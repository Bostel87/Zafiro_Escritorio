/*
 * ZafCxP12.java
 *
 * Created on 11/dic/2013
 */
package CxP.ZafCxP12;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafPerUsr.ZafPerUsr;
import Librerias.ZafSelFec.ZafSelFec;
import Librerias.ZafTblUti.ZafTblTot.ZafTblTot;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import java.util.ArrayList;
import java.sql.*;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafVenCon.ZafVenCon;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
/**
 *
 * @author  Dennis Betancourt
 */
public class ZafCxP12 extends javax.swing.JInternalFrame 
{
    //Constantes: Columnas del JTable:
    final int INT_TBL_DAT_LIN = 0;
    final int INT_TBL_DAT_COD_EMP = 1;
    final int INT_TBL_DAT_COD_LOC = 2;
    final int INT_TBL_DAT_COD_PRV = 3;
    final int INT_TBL_DAT_NOM_PRV = 4;
    final int INT_TBL_DAT_COD_BEN = 5;
    final int INT_TBL_DAT_NOM_BEN = 6;
    final int INT_TBL_DAT_COD_TIP_DOC = 7;
    final int INT_TBL_DAT_DES_COR_TIP_DOC = 8;
    final int INT_TBL_DAT_DES_LAR_TIP_DOC = 9;
    final int INT_TBL_DAT_COD_DOC = 10;
    final int INT_TBL_DAT_NUM_DOC = 11;
    final int INT_TBL_DAT_FEC_DOC = 12;
    final int INT_TBL_DAT_VAL_CHQ = 13;
    final int INT_TBL_DAT_CHK_CHQ_ENT = 14;
    final int INT_TBL_DAT_CHK_CHQ_ENT_AUX = 15;
    final int INT_TBL_DAT_FEC_ENT_CHQ = 16;
    final int INT_TBL_DAT_COD_USU_ENT_CHQ = 17;
    final int INT_TBL_DAT_ALI_USU_ENT_CHQ = 18;
    final int INT_TBL_DAT_NOM_USU_ENT_CHQ = 19;
    
    private ZafTblOrd objTblOrd;                        //JTable de ordenamiento.
    
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafColNumerada objColNum;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMená en JTable.
    private ZafThreadGUI objThrGUI;
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    
    private Vector vecDat, vecCab, vecReg, vecAux;
    private boolean blnCon;                     //true: Continua la ejecucián del hilo.
    private String strCodPrv, strDesLarPrv;             //Contenido del campo al obtener el foco.
    private ZafTblCelRenLbl objTblCelRenLbl;
    
    private ZafTblBus objTblBus;
   
    private ZafSelFec objSelFec;
    private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
    private ZafVenCon vcoPrv;
    private ZafTblCelEdiChk objTblCelEdiChk, objTblCelEdiChkAux;
    private ZafTblCelRenChk objTblCelRenChk;

    private boolean blnMarColChkChqEnt, blnMarTodChkTblEmp;
    private ZafPerUsr objPerUsr;
    private ZafTblTot objTblTot;

    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafCxP12(ZafParSis obj) 
    {
        try{
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
            objUti=new ZafUtil();
            objPerUsr=new ZafPerUsr(objParSis);

            if (!configurarFrm())
               exitForm();
        }
        catch (CloneNotSupportedException e){
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      bgrFil = new javax.swing.ButtonGroup();
      panFrm = new javax.swing.JPanel();
      lblTit = new javax.swing.JLabel();
      tabFrm = new javax.swing.JTabbedPane();
      panFil = new javax.swing.JPanel();
      panCorRpt = new javax.swing.JPanel();
      jPanel1 = new javax.swing.JPanel();
      chkMosDocPenEnt = new javax.swing.JCheckBox();
      chkMosDocEnt = new javax.swing.JCheckBox();
      optTodReg = new javax.swing.JRadioButton();
      optFilReg = new javax.swing.JRadioButton();
      lblPrv = new javax.swing.JLabel();
      txtCodPrv = new javax.swing.JTextField();
      txtDesLarPrv = new javax.swing.JTextField();
      butPrv = new javax.swing.JButton();
      panRpt = new javax.swing.JPanel();
      spnDat = new javax.swing.JScrollPane();
      tblDat = new javax.swing.JTable();
      spnTotal = new javax.swing.JScrollPane();
      tblTot = new javax.swing.JTable();
      panBar = new javax.swing.JPanel();
      panBot = new javax.swing.JPanel();
      butCon = new javax.swing.JButton();
      butGua = new javax.swing.JButton();
      butCer = new javax.swing.JButton();
      panBarEst = new javax.swing.JPanel();
      lblMsgSis = new javax.swing.JLabel();
      jPanel6 = new javax.swing.JPanel();
      pgrSis = new javax.swing.JProgressBar();

      setClosable(true);
      setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
      setIconifiable(true);
      setMaximizable(true);
      setResizable(true);
      setTitle("Título de la ventana");
      addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
         public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
         }
         public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
         }
         public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            exitForm(evt);
         }
         public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
         }
         public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
         }
         public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
         }
         public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
         }
      });
      getContentPane().setLayout(new java.awt.GridLayout(1, 0));

      panFrm.setLayout(new java.awt.BorderLayout());

      lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
      lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      lblTit.setText("Título de la ventana");
      panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

      panFil.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
      panFil.setLayout(new java.awt.BorderLayout());

      panCorRpt.setBorder(javax.swing.BorderFactory.createEtchedBorder());
      panCorRpt.setPreferredSize(new java.awt.Dimension(100, 100));
      panCorRpt.setLayout(new java.awt.BorderLayout());
      panFil.add(panCorRpt, java.awt.BorderLayout.NORTH);
      panCorRpt.getAccessibleContext().setAccessibleName("Codigo");

      jPanel1.setPreferredSize(new java.awt.Dimension(0, 140));
      jPanel1.setLayout(null);

      chkMosDocPenEnt.setSelected(true);
      chkMosDocPenEnt.setText("Mostrar documentos pendientes de entregar");
      jPanel1.add(chkMosDocPenEnt);
      chkMosDocPenEnt.setBounds(4, 74, 358, 20);

      chkMosDocEnt.setText("Mostrar documentos entregados");
      jPanel1.add(chkMosDocEnt);
      chkMosDocEnt.setBounds(4, 96, 272, 20);

      optTodReg.setSelected(true);
      optTodReg.setText("Todos los documentos");
      optTodReg.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            optTodRegActionPerformed(evt);
         }
      });
      jPanel1.add(optTodReg);
      optTodReg.setBounds(4, 6, 192, 16);

      optFilReg.setText("Sólo los documentos que cumplan el criterio seleccionado");
      optFilReg.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            optFilRegActionPerformed(evt);
         }
      });
      jPanel1.add(optFilReg);
      optFilReg.setBounds(4, 28, 442, 16);

      lblPrv.setText("Proveedor:");
      lblPrv.setToolTipText("Proveedor");
      jPanel1.add(lblPrv);
      lblPrv.setBounds(26, 46, 80, 20);

      txtCodPrv.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtCodPrvActionPerformed(evt);
         }
      });
      txtCodPrv.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            txtCodPrvFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            txtCodPrvFocusLost(evt);
         }
      });
      jPanel1.add(txtCodPrv);
      txtCodPrv.setBounds(112, 48, 58, 20);

      txtDesLarPrv.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtDesLarPrvActionPerformed(evt);
         }
      });
      txtDesLarPrv.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            txtDesLarPrvFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            txtDesLarPrvFocusLost(evt);
         }
      });
      jPanel1.add(txtDesLarPrv);
      txtDesLarPrv.setBounds(172, 48, 320, 20);

      butPrv.setText("...");
      butPrv.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            butPrvActionPerformed(evt);
         }
      });
      jPanel1.add(butPrv);
      butPrv.setBounds(492, 48, 20, 20);

      panFil.add(jPanel1, java.awt.BorderLayout.CENTER);

      tabFrm.addTab("Filtro", panFil);

      panRpt.setLayout(new java.awt.BorderLayout());

      spnDat.setPreferredSize(new java.awt.Dimension(453, 418));

      tblDat.setToolTipText("Doble click o ENTER para abrir la opción seleccionada.");
      tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
      tblDat.setMaximumSize(new java.awt.Dimension(2147483647, 192));
      spnDat.setViewportView(tblDat);

      panRpt.add(spnDat, java.awt.BorderLayout.CENTER);

      spnTotal.setPreferredSize(new java.awt.Dimension(320, 18));

      tblTot.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
         },
         new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4"
         }
      ));
      spnTotal.setViewportView(tblTot);

      panRpt.add(spnTotal, java.awt.BorderLayout.SOUTH);

      tabFrm.addTab("Reporte", panRpt);

      panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

      panBar.setLayout(new java.awt.BorderLayout());

      panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

      butCon.setText("Consultar");
      butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
      butCon.setPreferredSize(new java.awt.Dimension(92, 25));
      butCon.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            butConActionPerformed(evt);
         }
      });
      panBot.add(butCon);

      butGua.setText("Guardar");
      butGua.setToolTipText("Guardar datos");
      butGua.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            butGuaActionPerformed(evt);
         }
      });
      panBot.add(butGua);

      butCer.setText("Cerrar");
      butCer.setToolTipText("Cierra la ventana.");
      butCer.setPreferredSize(new java.awt.Dimension(92, 25));
      butCer.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            butCerActionPerformed(evt);
         }
      });
      panBot.add(butCer);

      panBar.add(panBot, java.awt.BorderLayout.CENTER);

      panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
      panBarEst.setLayout(new java.awt.BorderLayout());

      lblMsgSis.setText("Listo");
      lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
      panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

      jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
      jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
      jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
      jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

      pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
      pgrSis.setBorderPainted(false);
      pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
      pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
      jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

      panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

      panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

      panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

      getContentPane().add(panFrm);

      java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
      setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
   }// </editor-fold>//GEN-END:initComponents

    
                        
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar accion de acuerdo a la etiqueta del botán ("Consultar" o "Detener").
        objTblMod.removeAllRows();
        lblMsgSis.setText("");
        if(isCamVal()){
            if (butCon.getText().equals("Consultar")){
                blnCon = true;
                if (objThrGUI==null){
                    objThrGUI=new ZafThreadGUI();
                    objThrGUI.start();
                }
            }
            else{
                blnCon = false;
            }
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicacián. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void butGuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGuaActionPerformed
        // TODO add your handling code here:
        if (guardar())
           mostrarMsgInf("<HTML>La información se guardó correctamente.</HTML>");
        else 
           mostrarMsgInf("<HTML>La información no se pudo guardar.</HTML>");
    }//GEN-LAST:event_butGuaActionPerformed

   private void optTodRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTodRegActionPerformed
      // TODO add your handling code here:
      if (optTodReg.isSelected())
      {  optFilReg.setSelected(false);
         txtCodPrv.setText("");
         txtDesLarPrv.setText("");
      }
      else
      if (!optFilReg.isSelected())
      {  optTodReg.setSelected(true);
         txtCodPrv.setText("");
         txtDesLarPrv.setText("");
      }
   }//GEN-LAST:event_optTodRegActionPerformed

   private void optFilRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optFilRegActionPerformed
      // TODO add your handling code here:
      if (optFilReg.isSelected())
      {  optTodReg.setSelected(false);
         txtCodPrv.requestFocus();
      }
      else
      if (!optTodReg.isSelected())
         optFilReg.setSelected(true);
   }//GEN-LAST:event_optFilRegActionPerformed

   private void txtCodPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodPrvActionPerformed
      txtCodPrv.transferFocus();
   }//GEN-LAST:event_txtCodPrvActionPerformed

   private void txtCodPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusGained
      strCodPrv = txtCodPrv.getText();
      txtCodPrv.selectAll();
   }//GEN-LAST:event_txtCodPrvFocusGained

   private void txtCodPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusLost
      //Validar el contenido de la celda solo si ha cambiado
      if (!txtCodPrv.getText().equalsIgnoreCase(strCodPrv))
      {  if (txtCodPrv.getText().equals(""))
         {  txtCodPrv.setText("");
            txtDesLarPrv.setText("");
            objTblMod.removeAllRows();
         }
         else
         {  mostrarVenConPrv(1);
            optTodReg.setSelected(false);
            optFilReg.setSelected(true);
         }
      }
      else
      {  txtCodPrv.setText(strCodPrv);
         optTodReg.setSelected(false);
         optFilReg.setSelected(true);
      }
   }//GEN-LAST:event_txtCodPrvFocusLost

   private void txtDesLarPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarPrvActionPerformed
      txtDesLarPrv.transferFocus();
   }//GEN-LAST:event_txtDesLarPrvActionPerformed

   private void txtDesLarPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusGained
      strDesLarPrv = txtDesLarPrv.getText();
      txtDesLarPrv.selectAll();
   }//GEN-LAST:event_txtDesLarPrvFocusGained

   private void txtDesLarPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusLost
      //Validar el contenido de la celda solo si ha cambiado
      if (!txtDesLarPrv.getText().equalsIgnoreCase(strDesLarPrv))
      {  if (txtDesLarPrv.getText().equals(""))
         {  txtCodPrv.setText("");
            txtDesLarPrv.setText("");
            objTblMod.removeAllRows();
         }
         else
         {  mostrarVenConPrv(2);
            //Cargar los documentos pendientes solo si ha cambiado el beneficiario
         }
      }
      else
      {  txtDesLarPrv.setText(strDesLarPrv);
         optFilReg.setSelected(true);
      }
   }//GEN-LAST:event_txtDesLarPrvFocusLost

   private void butPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrvActionPerformed
      strCodPrv = txtCodPrv.getText();
      mostrarVenConPrv(0);
   }//GEN-LAST:event_butPrvActionPerformed


    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConPrv(int intTipBus)
    {
        boolean blnRes = true;
        
        try
        {  switch (intTipBus)
           {  case 0: //Mostrar la ventana de consulta
                 vcoPrv.setCampoBusqueda(2);
                 vcoPrv.show();
                 if (vcoPrv.getSelectedButton() == vcoPrv.INT_BUT_ACE)
                 {  txtCodPrv.setText(vcoPrv.getValueAt(1));
                    txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                    objTblMod.removeAllRows();
                 }
                 break;
                
              case 1: //Busqueda directa por "Codigo de proveedor"
                 if (vcoPrv.buscar("a1.co_cli", txtCodPrv.getText()))
                 {  txtCodPrv.setText(vcoPrv.getValueAt(1));
                    txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                    objTblMod.removeAllRows();
                 }
                 else
                 {  vcoPrv.setCampoBusqueda(0);
                    vcoPrv.setCriterio1(11);
                    vcoPrv.cargarDatos();
                    vcoPrv.show();
                    if (vcoPrv.getSelectedButton() == vcoPrv.INT_BUT_ACE)
                    {  txtCodPrv.setText(vcoPrv.getValueAt(1));
                       txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                       objTblMod.removeAllRows();
                    }
                    else
                       txtCodPrv.setText(strCodPrv);
                 }
                 break;
                 
              case 2: //Busqueda directa por "Descripcion larga"
                 if (vcoPrv.buscar("a1.tx_nom", txtDesLarPrv.getText()))
                 {  txtCodPrv.setText(vcoPrv.getValueAt(1));
                    txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                    objTblMod.removeAllRows();
                 }
                 else
                 {  vcoPrv.setCampoBusqueda(2);
                    vcoPrv.setCriterio1(11);
                    vcoPrv.cargarDatos();
                    vcoPrv.show();
                    if (vcoPrv.getSelectedButton() == vcoPrv.INT_BUT_ACE)
                    {  txtCodPrv.setText(vcoPrv.getValueAt(1));
                       txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                       objTblMod.removeAllRows();
                    }
                    else
                       txtDesLarPrv.setText(strDesLarPrv);
                 }
                 break;
            }
        }
        
        catch (Exception e)
        {  blnRes = false;
           objUti.mostrarMsgErr_F1(this, e);
        }
        
        return blnRes;
    }

    /** Cerrar la aplicacián. */
    private void exitForm() 
    {
        dispose();
    }    
        
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup bgrFil;
   private javax.swing.JButton butCer;
   private javax.swing.JButton butCon;
   private javax.swing.JButton butGua;
   private javax.swing.JButton butPrv;
   private javax.swing.JCheckBox chkMosDocEnt;
   private javax.swing.JCheckBox chkMosDocPenEnt;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel6;
   private javax.swing.JLabel lblMsgSis;
   private javax.swing.JLabel lblPrv;
   private javax.swing.JLabel lblTit;
   private javax.swing.JRadioButton optFilReg;
   private javax.swing.JRadioButton optTodReg;
   private javax.swing.JPanel panBar;
   private javax.swing.JPanel panBarEst;
   private javax.swing.JPanel panBot;
   private javax.swing.JPanel panCorRpt;
   private javax.swing.JPanel panFil;
   private javax.swing.JPanel panFrm;
   private javax.swing.JPanel panRpt;
   private javax.swing.JProgressBar pgrSis;
   private javax.swing.JScrollPane spnDat;
   private javax.swing.JScrollPane spnTotal;
   private javax.swing.JTabbedPane tabFrm;
   private javax.swing.JTable tblDat;
   private javax.swing.JTable tblTot;
   private javax.swing.JTextField txtCodPrv;
   private javax.swing.JTextField txtDesLarPrv;
   // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            if (objPerUsr.isOpcionEnabled(3822))
               blnMarColChkChqEnt = true;
            else
               blnMarColChkChqEnt = false;
            
            strAux=objParSis.getNombreMenu() + "v0.1.2";
            this.setTitle(strAux);
            lblTit.setText(strAux);
            
            //Configurar ZafSelFec:
            objSelFec=new ZafSelFec();
            objSelFec.setCheckBoxVisible(false);
            objSelFec.setTitulo("Fecha del documento");
            panCorRpt.add(objSelFec);
            objSelFec.setBounds(4, 4, 472, 72);
            objSelFec.setFechaDesde(getMesAnterior(objSelFec.getFechaHasta()));
            
            butCon.setVisible(false);
            butGua.setVisible(false);
            butCer.setVisible(false);
            
            if (objParSis.getCodigoUsuario() == 1)
            {  butCon.setVisible(true);
               butGua.setVisible(true);
               butCer.setVisible(true);
            }
            else
            {  if (objPerUsr.isOpcionEnabled(3823))
                  butCon.setVisible(true);
               
               if (objPerUsr.isOpcionEnabled(3824))
                  butGua.setVisible(true);
               
               if (objPerUsr.isOpcionEnabled(3825))
                  butCer.setVisible(true);
            }
            
            //Configurar JTable: Establecer el modelo.
            vecDat = new Vector();    //Almacena los datos
            vecCab = new Vector(20);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN, "");
            vecCab.add(INT_TBL_DAT_COD_EMP, "Cod.Emp.");
            vecCab.add(INT_TBL_DAT_COD_LOC, "Cod.Loc.");
            vecCab.add(INT_TBL_DAT_COD_PRV, "Cod.Pro.");
            vecCab.add(INT_TBL_DAT_NOM_PRV, "Nom.Pro.");
            vecCab.add(INT_TBL_DAT_COD_BEN, "Cod.Ben.");
            vecCab.add(INT_TBL_DAT_NOM_BEN, "Nom.Ben.");
            vecCab.add(INT_TBL_DAT_COD_TIP_DOC, "Cod.Tip.Doc.");
            vecCab.add(INT_TBL_DAT_DES_COR_TIP_DOC, "Tip.Doc");
            vecCab.add(INT_TBL_DAT_DES_LAR_TIP_DOC, "Tipo de Documento");
            vecCab.add(INT_TBL_DAT_COD_DOC, "Cod.Doc.");
            vecCab.add(INT_TBL_DAT_NUM_DOC, "Num.Doc.");
            vecCab.add(INT_TBL_DAT_FEC_DOC, "Fec.Doc.");
            vecCab.add(INT_TBL_DAT_VAL_CHQ, "Val.Doc.");
            vecCab.add(INT_TBL_DAT_CHK_CHQ_ENT, "Ent.");
            vecCab.add(INT_TBL_DAT_CHK_CHQ_ENT_AUX, "Ent.Aux.");
            vecCab.add(INT_TBL_DAT_FEC_ENT_CHQ, "Fec.Ent.");
            vecCab.add(INT_TBL_DAT_COD_USU_ENT_CHQ, "Cod.Usu.Ent.");
            vecCab.add(INT_TBL_DAT_ALI_USU_ENT_CHQ, "Ali.Usu.Ent.");
            vecCab.add(INT_TBL_DAT_NOM_USU_ENT_CHQ, "Nom.Usu.Ent.");
            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);

            //Configurar JTable: Establecer tipo de seleccion.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el menu de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Tamaño de las celdas
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_LIN).setPreferredWidth(25);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(30);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(30);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_PRV).setPreferredWidth(36);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NOM_PRV).setPreferredWidth(100);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_BEN).setPreferredWidth(36);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NOM_BEN).setPreferredWidth(100);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(30);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DES_COR_TIP_DOC).setPreferredWidth(55);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DES_LAR_TIP_DOC).setPreferredWidth(10);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(30);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(70);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(75);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_CHQ).setPreferredWidth(60);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CHQ_ENT).setPreferredWidth(30);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CHQ_ENT_AUX).setPreferredWidth(70);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FEC_ENT_CHQ).setPreferredWidth(90);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_ENT_CHQ).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_ENT_CHQ).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NOM_USU_ENT_CHQ).setPreferredWidth(100);
            
            //Configurar JTable: Establecer los listener para el TableHeader.
            tblDat.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tblDatMouseClicked(evt);
                }
            });
            
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            
            //Configurar JTable: Ocultar columnas del sistema.
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setMaxWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setMinWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setResizable(false);
            
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setMaxWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setMinWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setResizable(false);
            
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_BEN).setWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_BEN).setMaxWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_BEN).setMinWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_BEN).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_BEN).setResizable(false);

            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setMaxWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setMinWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setResizable(false);

            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setMaxWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setMinWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setResizable(false);
            
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_ENT_CHQ).setWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_ENT_CHQ).setMaxWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_ENT_CHQ).setMinWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_ENT_CHQ).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_ENT_CHQ).setResizable(false);
            
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_ENT_CHQ).setWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_ENT_CHQ).setMaxWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_ENT_CHQ).setMinWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_ENT_CHQ).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_ENT_CHQ).setResizable(false);

            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CHQ_ENT_AUX).setWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CHQ_ENT_AUX).setMaxWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CHQ_ENT_AUX).setMinWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CHQ_ENT_AUX).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CHQ_ENT_AUX).setResizable(false);
            
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_BEN).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CHQ_ENT_AUX).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_ENT_CHQ).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_ENT_CHQ).setResizable(false);
            
            //Configurar JTable: Establecer relacián entre el JTable de datos y JTable de totales.
            int intCol[] = {INT_TBL_DAT_VAL_CHQ};
            objTblTot = new ZafTblTot(spnDat, spnTotal, tblDat, tblTot, intCol);
            
            objTblBus=new ZafTblBus(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);
            
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda = new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            
            //Configurar JTable: Renderizar celdas
            objTblCelRenLbl = new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(), false, true);                       
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_CHQ).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl = null;
            
            objTblCelRenLbl = new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_GEN);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(), false, true);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NUM_DOC).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl = null;
            
            objTblCelRenLbl = new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.CENTER);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_GEN);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(), false, true);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_PRV).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_BEN).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl = null;
            
            objTblCelRenLbl = new ZafTblCelRenLbl();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NOM_PRV).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NOM_BEN).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DES_COR_TIP_DOC).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DES_LAR_TIP_DOC).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FEC_DOC).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CHQ_ENT).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CHQ_ENT_AUX).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FEC_ENT_CHQ).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_ENT_CHQ).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_ENT_CHQ).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NOM_USU_ENT_CHQ).setCellRenderer(objTblCelRenLbl);
            
            objTblCelRenChk = new ZafTblCelRenChk();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CHQ_ENT).setCellRenderer(objTblCelRenChk);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CHQ_ENT_AUX).setCellRenderer(objTblCelRenChk);
            
            //Configurar JTable: Editor de celdas
            objTblCelEdiChkAux = new ZafTblCelEdiChk(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CHQ_ENT_AUX).setCellEditor(objTblCelEdiChkAux);
            
            objTblCelEdiChk = new ZafTblCelEdiChk(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CHQ_ENT).setCellEditor(objTblCelEdiChk);
            
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter()
            {   public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    objTblCelEdiChk.setCancelarEdicion(false);
                    
                    if ((objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_CHQ_ENT)) && (objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_CHQ_ENT_AUX)) )
                    {  if (blnMarColChkChqEnt == true)
                          objTblCelEdiChk.setCancelarEdicion(false);
                       else
                          objTblCelEdiChk.setCancelarEdicion(true);
                    }
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    System.out.println("afterEdit");
                }
                
            });

            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_CHK_CHQ_ENT);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;

            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);

            configurarVenConPrv();
        }
        
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta funcion configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConPrv()
    {
       boolean blnRes = true;
       
       try
       {  //Listado de campos
          ArrayList arlCam = new ArrayList();
          arlCam.add("a1.co_cli");
          arlCam.add("a1.tx_ide");
          arlCam.add("a1.tx_nom");
          arlCam.add("a1.tx_dir");
          //Alias de los campos
          ArrayList arlAli = new ArrayList();
          arlAli.add("Código");
          arlAli.add("Identificación");
          arlAli.add("Nombre");
          arlAli.add("Dirección");
          //Ancho de las columnas
          ArrayList arlAncCol = new ArrayList();
          arlAncCol.add("50");
          arlAncCol.add("80");
          arlAncCol.add("414");
          arlAncCol.add("80");
          //Armar la sentencia SQL
          strSQL = "";
          strSQL += "SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
          strSQL += " FROM tbm_cli AS a1";
          strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
          strSQL += " AND a1.st_prv = 'S'";
          strSQL += " ORDER BY a1.tx_nom";

          //Ocultar columnas
          int intColOcu[] = new int[1];
          intColOcu[0] = 4;
          vcoPrv = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de proveedores", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
          arlCam = null;
          arlAli = null;
          arlAncCol = null;
          intColOcu = null;
          //Configurar columnas
          vcoPrv.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
       }
       
       catch (Exception e)
       {  blnRes = false;
          objUti.mostrarMsgErr_F1(this, e);
       }
       
       return blnRes;
    }
    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol = tblDat.columnAtPoint(evt.getPoint());
            String strMsg = "";
            
            switch (intCol)
            {   case INT_TBL_DAT_COD_PRV:
                    strMsg = "Código del proveedor";
                    break;
                case INT_TBL_DAT_NOM_PRV:
                    strMsg = "Nombre del proveedor";
                    break;
                case INT_TBL_DAT_COD_BEN:
                    strMsg = "Código del beneficiario";
                    break;
                case INT_TBL_DAT_NOM_BEN:
                    strMsg = "Nombre del beneficiario";
                    break;
                case INT_TBL_DAT_COD_TIP_DOC:
                    strMsg = "Código del tipo de documento";
                    break;
                case INT_TBL_DAT_DES_COR_TIP_DOC:
                    strMsg = "Tipo de documento";
                    break;
                case INT_TBL_DAT_DES_LAR_TIP_DOC:
                    strMsg = "Nombre del Tipo de documento";
                    break;
                case INT_TBL_DAT_NUM_DOC:
                    strMsg = "Número del documento";
                    break;
                case INT_TBL_DAT_FEC_DOC:
                    strMsg = "Fecha del documento";
                    break;
                case INT_TBL_DAT_VAL_CHQ:
                    strMsg = "Valor del cheque emitido";
                    break;
                case INT_TBL_DAT_CHK_CHQ_ENT:
                    strMsg = "El documento se entrego al beneficiario";
                    break;
                case INT_TBL_DAT_FEC_ENT_CHQ:
                    strMsg = "Fecha de entrega del cheque";
                    break;
                case INT_TBL_DAT_NOM_USU_ENT_CHQ:
                    strMsg = "Usuario que entrega el cheque";
                    break;
                default:
                    strMsg = "";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }

    /**
     * Esta funcián muestra un mensaje informativo al usuario. Se podráa utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podráa presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaráa informado en todo
     * momento de lo que ocurre. Si se desea hacer ásto es necesario utilizar ásta clase
     * ya que si no sálo se apreciaráa los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sálo cuando haya datos.
            if (tblDat.getRowCount() > 0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }
    
    /**
     * Esta funcián permite consultar los registros de acuerdo a los criterios seleccionados
     * @return true: Si se pudo establecer conexión y cargar datos.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg()
    {  boolean blnRes = true;
       int intNumTotReg, i;
        
       try
       {  butCon.setText("Detener");
          lblMsgSis.setText("Obteniendo datos...");
            
          if (con != null)
          {  strAux = "";
             switch (objSelFec.getTipoSeleccion())
             {  case 0: //Busqueda por rangos
                   strAux = "and a3.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                   break;
                case 1: //Fechas menores o iguales que "Hasta"
                   strAux = "and a3.fe_doc <= '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                   break;
                case 2: //Fechas mayores o iguales que "Desde"
                   strAux = "and a3.fe_doc >= '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                   break;
                case 3: //Todo
                   break;
             }

             stm = con.createStatement();

             strSQL = "";
             strSQL += "SELECT DISTINCT a3.co_emp, a3.co_loc, a3.co_tipdoc, a5.tx_descor, a5.tx_deslar, a3.co_doc, a3.co_cli as co_prv, a3.tx_nomcli as tx_nomprv, ";
             strSQL += "           a3.co_ben, a3.tx_benchq, a3.ne_numdoc1, a3.fe_doc, a3.nd_mondoc, a1.st_tieConBan, a4.st_ctaBan, a2.st_conban, a3.st_entchqben, a3.fe_entchqben, a3.co_usrentchqben, a6.tx_usr, a6.tx_nom ";
             strSQL += "FROM       tbm_cabDia AS a1 ";
             strSQL += "INNER JOIN tbm_detDia AS a2 ON a1.co_emp = a2.co_emp AND a1.co_loc = a2.co_loc AND a1.co_tipDoc = a2.co_tipDoc AND a1.co_dia = a2.co_dia ";
             strSQL += "INNER JOIN tbm_CabPag AS a3 ON a1.co_emp = a3.co_emp AND a1.co_loc = a3.co_loc AND a1.co_tipDoc = a3.co_tipDoc AND a1.co_dia = a3.co_doc ";
             strSQL += "INNER JOIN tbm_plaCta AS a4 ON a2.co_emp = a4.co_emp AND a2.co_cta = a4.co_cta ";
             strSQL += "INNER JOIN tbm_cabtipdoc AS a5 ON a3.co_emp = a5.co_emp and a3.co_loc = a5.co_loc and a3.co_tipdoc = a5.co_tipdoc ";
             strSQL += "LEFT  JOIN tbm_usr AS a6 ON a3.co_usrentchqben = a6.co_usr ";
             
             if (objParSis.getCodigoUsuario() == 1)
             {  strSQL += "INNER JOIN tbr_tipDocPrg AS a7 ON a5.co_emp = a7.co_emp and a5.co_loc = a7.co_loc and a5.co_tipDoc = a7.co_tipDoc ";
                strSQL += "WHERE a7.co_mnu = " + objParSis.getCodigoMenu();
             }
             else
             {  strSQL += "INNER JOIN tbr_tipDocUsr AS a7 ON a5.co_emp = a7.co_emp and a5.co_loc = a7.co_loc and a5.co_tipDoc = a7.co_tipDoc ";
                strSQL += "WHERE a7.co_mnu = " + objParSis.getCodigoMenu();
                strSQL += "      and a7.co_usr = " + objParSis.getCodigoUsuario();
             }
             
             strSQL += "           and a3.co_emp = " + objParSis.getCodigoEmpresa();
             strSQL += "           and a3.co_loc = " + objParSis.getCodigoLocal();
             strSQL += "           and a1.st_reg NOT IN ('E','I','O') and a3.st_reg = 'A' AND abs(nd_mondoc) > 0 AND a4.st_ctaBan = 'S' ";
             strSQL += "           and (a2.st_conban = 'S' or (a2.st_conban IS NULL OR a2.st_conban = 'N')) ";
             strSQL += strAux;
             
             if (!txtCodPrv.getText().equals(""))
                strSQL += " and a3.co_cli = " + txtCodPrv.getText() + " ";
                
             if (chkMosDocPenEnt.isSelected() == true && chkMosDocEnt.isSelected() == true)
             {  /*Se debe traer los 2 casos: Doc.pendientes de entregar y Doc.entregados */ }
             else if (chkMosDocPenEnt.isSelected() == true && chkMosDocEnt.isSelected() == false)
                strSQL += "and (a3.st_entchqben is null or a3.st_entchqben = 'N') ";
             else if (chkMosDocPenEnt.isSelected() == false && chkMosDocEnt.isSelected() == true)
                strSQL += "and a3.st_entchqben = 'S'";
             
             System.out.println("COUNT cargarDetReg: " + strSQL);
             intNumTotReg = objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
             
             if (intNumTotReg == -1)
                return false;
                
             strSQL += "ORDER BY tx_nomprv, a3.fe_doc, a3.ne_numdoc1";
             System.out.println("SQL cargarDetReg: " + strSQL);
             rst = stm.executeQuery(strSQL);

             vecDat.clear();
             lblMsgSis.setText("Cargando datos...");
             pgrSis.setMinimum(0);
             pgrSis.setMaximum(intNumTotReg);
             pgrSis.setValue(0);
             i = 0;                
             lblMsgSis.setText("Listo");
             
             while (rst.next())
             {  if (blnCon)
                {  vecReg = new Vector();
                   vecReg.add(INT_TBL_DAT_LIN,"");
                   vecReg.add(INT_TBL_DAT_COD_EMP,     "" + rst.getString("co_emp"));
                   vecReg.add(INT_TBL_DAT_COD_LOC,     "" + rst.getString("co_loc"));
                   vecReg.add(INT_TBL_DAT_COD_PRV,     "" + rst.getString("co_prv"));
                   vecReg.add(INT_TBL_DAT_NOM_PRV,     "" + rst.getString("tx_nomprv"));
                   vecReg.add(INT_TBL_DAT_COD_BEN,     "" + rst.getString("co_ben"));
                   vecReg.add(INT_TBL_DAT_NOM_BEN,     "" + rst.getString("tx_benchq"));
                   vecReg.add(INT_TBL_DAT_COD_TIP_DOC, "" + rst.getString("co_tipDoc"));
                   vecReg.add(INT_TBL_DAT_DES_COR_TIP_DOC, "" + rst.getString("tx_desCor"));
                   vecReg.add(INT_TBL_DAT_DES_LAR_TIP_DOC, "" + rst.getString("tx_desLar"));
                   vecReg.add(INT_TBL_DAT_COD_DOC,     "" + rst.getString("co_doc"));
                   vecReg.add(INT_TBL_DAT_NUM_DOC,     "" + rst.getString("ne_numdoc1"));
                   vecReg.add(INT_TBL_DAT_FEC_DOC,     "" + rst.getString("fe_doc"));
                   vecReg.add(INT_TBL_DAT_VAL_CHQ,     "" + Math.abs(rst.getDouble("nd_mondoc")));
                   vecReg.add(INT_TBL_DAT_CHK_CHQ_ENT,     null);
                   vecReg.add(INT_TBL_DAT_CHK_CHQ_ENT_AUX, null);
                   vecReg.add(INT_TBL_DAT_FEC_ENT_CHQ, "" + rst.getObject("fe_entchqben") == null? "" :rst.getString("fe_entchqben"));
                   vecReg.add(INT_TBL_DAT_COD_USU_ENT_CHQ, "" + rst.getObject("co_usrentchqben") == null? "" :rst.getString("co_usrentchqben"));
                   vecReg.add(INT_TBL_DAT_ALI_USU_ENT_CHQ, "" + rst.getObject("tx_usr") == null? "" :rst.getString("tx_usr"));
                   vecReg.add(INT_TBL_DAT_NOM_USU_ENT_CHQ, "" + rst.getObject("tx_nom") == null? "" :rst.getString("tx_nom"));
                   
                   strAux = rst.getObject("st_entchqben") == null? "" :rst.getString("st_entchqben");
                   
                   if (strAux.equals("S"))
                   {  vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK_CHQ_ENT);
                      vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK_CHQ_ENT_AUX);
                   }
                   vecDat.add(vecReg);                                                                                                
                   i++;
                   pgrSis.setValue(i);                        
                   lblMsgSis.setText("Se encontraron " + rst.getRow() + " registros.");                        
                }
                else
                {  lblMsgSis.setText("Se encontraron " + rst.getRow() + " registros.");
                   break;
                }
             }
             rst.close();
             stm.close();
             rst = null;
             stm = null;

             //Asignar vectores al modelo.
             objTblMod.setData(vecDat);
             tblDat.setModel(objTblMod);
             objTblTot.calcularTotales();
             pgrSis.setValue(0);
             butCon.setText("Consultar");
             blnMarTodChkTblEmp = true;
          } //if (con != null)
       } //try
       
       catch (java.sql.SQLException e)
       {  blnRes = false;
          objUti.mostrarMsgErr_F1(this, e);
       }
       
       catch (Exception e)
       {  blnRes = false;
          objUti.mostrarMsgErr_F1(this, e);
       }
       
       return blnRes;
    }

    /**
     * Esta función permite establecer la conexión
     * @return true: Si se pudo establecer conexión y cargar datos.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg(){
        boolean blnRes = true;
        try{
            con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con != null)
            {  if (!cargarDetReg())
                  blnRes = false;
            
               con.close();
               con = null;
            }
        }
        catch (Exception e){
            blnRes = false;
        }
        return blnRes;
    }
    
    /**
     * Esta función obtiene la "fecha desde" que se presenta en el formulario.
     * @param fechaActual La fecha del presente día.
     * @return String: Contiene la fecha del primer día del mes anterior.
     */
    private String getMesAnterior(String fechaActual){
        Connection conMesAnt;
        Statement stmMesAnt;
        ResultSet rstMesAnt;
        String strMesAnt="";
        try{
            conMesAnt=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conMesAnt!=null){
                stmMesAnt=conMesAnt.createStatement();
                strSQL="";
                strSQL+=" select '01/' ||";
                strSQL+=" case when extract('month' FROM cast('";
                strSQL+="" + objUti.formatearFecha(fechaActual, "dd/MM/yyyy", "yyyy-MM-dd") + "";
                strSQL+=" ' as date))<10 then '0'||extract('month' FROM cast('";
                strSQL+="" + objUti.formatearFecha(fechaActual, "dd/MM/yyyy", "yyyy-MM-dd") + "";
                strSQL+=" ' as date))";
                strSQL+=" else ''||extract('month' FROM cast('";
                strSQL+="" + objUti.formatearFecha(fechaActual, "dd/MM/yyyy", "yyyy-MM-dd") + "";
                strSQL+=" ' as date)) end";
                strSQL+=" || '/'  ||";
                strSQL+=" extract('year' FROM cast('";
                strSQL+="" + objUti.formatearFecha(fechaActual, "dd/MM/yyyy", "yyyy-MM-dd") + "";
                strSQL+=" ' as date))  as fechaInicial";

                rstMesAnt=stmMesAnt.executeQuery(strSQL);
                if(rstMesAnt.next()){
                    strMesAnt=rstMesAnt.getString("fechaInicial");
                }
                conMesAnt.close();
                conMesAnt=null;
                stmMesAnt.close();
                stmMesAnt=null;
                rstMesAnt.close();
                rstMesAnt=null;
            }
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return objUti.formatearFecha(strMesAnt,"dd/MM/yyyy","dd/MM/yyyy");
    }

    /**
     * Esta función establece la conexión y contiene las funciones que insertan y modifican campos de auditoria.
     * @return true: Si se pudo modificar.
     * <BR>false: En el caso contrario.
     */
    private boolean guardar(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                con.setAutoCommit(false);
                if(guardarDatos()){
                    con.commit();
                    cargarDetReg();
                }
                else{
                    con.rollback();
                    blnRes=false;
                }
                con.close();
                con=null;
            }
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }

    /**
     * Esta función permite actualizar en tbm_cabPag los campos para entrega de cheques.
     * @return true: Si se pudo modificar.
     * <BR>false: En el caso contrario.
     */
    private boolean guardarDatos()
    {
       boolean blnRes = true;
       String strLin = "", strUpd = "";
       
       try
       {  if (con != null)
          {  stm = con.createStatement();
             for (int i = 0; i < objTblMod.getRowCountTrue(); i++)
             {  strLin = objTblMod.getValueAt(i, INT_TBL_DAT_LIN) == null? "" :objTblMod.getValueAt(i, INT_TBL_DAT_LIN).toString();
                if (strLin.equals("M"))
                {  strSQL =  "";
                   strSQL += "UPDATE tbm_cabPag";
                   if (objTblMod.isChecked(i, INT_TBL_DAT_CHK_CHQ_ENT))
                   {  strSQL += " SET st_entchqben = 'S',";
                      strSQL += "     fe_entchqben = " + objParSis.getFuncionFechaHoraBaseDatos() + ",";
                      strSQL += "     co_usrentchqben = " + objParSis.getCodigoUsuario();
                   }
                   else
                   {  strSQL += " SET st_entchqben = 'N',";
                      strSQL += "     fe_entchqben = null,";
                      strSQL += "     co_usrentchqben = null";
                   }
                   
                   strSQL += " WHERE co_emp=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_EMP) + "";
                   strSQL += " AND co_loc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC) + "";
                   strSQL += " AND co_tipDoc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC) + "";
                   strSQL += " AND co_doc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC) + "";
                   strSQL += "; ";
                   strUpd += strSQL;
                }
             }
             System.out.println("strUpd: " + strUpd);
             stm.executeUpdate(strUpd);
             stm.close();
             stm = null;
          }
       }
       catch (java.sql.SQLException e)
       {  objUti.mostrarMsgErr_F1(this, e);
          blnRes = false;
       }
       
       catch (Exception e)
       {  objUti.mostrarMsgErr_F1(this, e);
          blnRes = false;
       }
       
       return blnRes;
    }

    /**
     * Esta funcián determina si los campos son válidos.
     * @return true: Si los campos son válidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal()
    {
       if ( (! chkMosDocPenEnt.isSelected()) && ( ! chkMosDocEnt.isSelected()) )
       {  tabFrm.setSelectedIndex(0);
          mostrarMsgInf("<HTML>Se debe tener al menos un filtro de documentos a mostrar seleccionado.<BR>Seleccione alguno y vuelva a intentarlo.</HTML>");
          return false;
       }

       return true;
    }

    /**
     * Esta función se ejecuta cuando se hace el "MouseClicked" en la cabecera del JTable.
     * Se utiliza ésta función especificamente para marcar todas las casillas de verificación
     * de la columna que indica si se entrego o no el cheque al beneficiario
     */
    private void tblDatMouseClicked(java.awt.event.MouseEvent evt)
    {
        int i, intNumFil;
        try
        {
            intNumFil=objTblMod.getRowCountTrue();
            //Marcar la casilla sólo si se da 1 click con el botón izquierdo.
            if (evt.getButton()==evt.BUTTON1 && evt.getClickCount()==1 && tblDat.columnAtPoint(evt.getPoint())==INT_TBL_DAT_CHK_CHQ_ENT)
            {
                if (blnMarTodChkTblEmp)
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        objTblMod.setChecked(true, i, INT_TBL_DAT_CHK_CHQ_ENT);
                    }
                    blnMarTodChkTblEmp=false;
                }
                else
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        objTblMod.setChecked(false, i, INT_TBL_DAT_CHK_CHQ_ENT);
                    }
                    blnMarTodChkTblEmp=true;
                }
            }
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }
}