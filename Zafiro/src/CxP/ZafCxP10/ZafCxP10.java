/*
 * ZafCxP10.java
 *
 * Created on 16 de enero de 2005, 17:10 PM
 */
package CxP.ZafCxP10;
import Contabilidad.ZafCon04.ZafCon04;
import Librerias.ZafAsiDia.ZafAsiDia;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafPerUsr.ZafPerUsr;
import Librerias.ZafSelFec.ZafSelFec;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import java.sql.*;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafVenCon.ZafVenCon;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaGrp;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;



/**
 *
 * @author  Ingrid Lino
 */
public class ZafCxP10 extends javax.swing.JInternalFrame
{
    //Constantes: Columnas del JTable:    
    
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_EMP=1;
    final int INT_TBL_DAT_COD_LOC=2;
    final int INT_TBL_DAT_COD_TIP_DOC=3;
    final int INT_TBL_DAT_DES_COR_TIP_DOC=4;
    final int INT_TBL_DAT_DES_LAR_TIP_DOC=5;
    final int INT_TBL_DAT_COD_DOC=6;
    final int INT_TBL_DAT_NUM_DOC=7;
    final int INT_TBL_DAT_FEC_DOC=8;
    final int INT_TBL_DAT_COD_CLI=9;
    final int INT_TBL_DAT_NOM_CLI=10;
    final int INT_TBL_DAT_VAL_DOC=11;
    final int INT_TBL_DAT_VAL_ABO=12;
    final int INT_TBL_DAT_CHK=13;


    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMen� en JTable.
    private ZafThreadGUI objThrGUI;
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private ZafTblFilCab objTblFilCab;
    
    private Vector vecDat, vecCab, vecReg, vecAux;
    private boolean blnCon;                     //true: Continua la ejecuci�n del hilo.
    private ZafTblCelRenLbl objTblCelRenLblCru;
    private ZafTblBus objTblBus;
    
    private ZafMouMotAda objMouMotAda;
    private ZafTblOrd objTblOrd;

    private ZafSelFec objSelFec;

    private String strCodPrv, strDesLarPrv;
    private ZafVenCon vcoPrv, vcoBen;

    private ZafTblCelEdiChk objTblCelEdiChk;
    private ZafTblCelRenChk objTblCelRenChk;

    private ZafPerUsr objPerUsr;
    private ZafAsiDia objAsiDia;
    //para pagos masivos
    private int intCodDocPagMas, intNumDocPagMas, intSigPagMas;
    private final int INT_COD_TIP_DOC_PAG_MAS_CXP_AUT=61;
    private final int INT_COD_TIP_DOC_PAG_NEW=186;

    private java.util.Date datFecAux;
    private String strCodBen, strNomBen;
    private ZafCon04 objZafCon04;


    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafCxP10(ZafParSis obj)
    {
        try{
            initComponents();
            this.objParSis=obj;
            objParSis=(ZafParSis)obj.clone();
            objUti=new ZafUtil();
            objPerUsr=new ZafPerUsr(objParSis);
            objAsiDia=new ZafAsiDia(objParSis);
            if (!configurarFrm())
                exitForm(); 
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }               
        
        
        
        

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        panFecCor = new javax.swing.JPanel();
        panFil = new javax.swing.JPanel();
        chkMosDocPag = new javax.swing.JCheckBox();
        chkMosDocPndPag = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        lblPrv = new javax.swing.JLabel();
        txtCodPrv = new javax.swing.JTextField();
        txtRucPrv = new javax.swing.JTextField();
        txtDesLarPrv = new javax.swing.JTextField();
        butPrv = new javax.swing.JButton();
        lblBen = new javax.swing.JLabel();
        txtCodBen = new javax.swing.JTextField();
        txtNomBen = new javax.swing.JTextField();
        butBen = new javax.swing.JButton();
        panRpt = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable() {
            protected javax.swing.table.JTableHeader createDefaultTableHeader()
            {
                return new ZafTblHeaGrp(columnModel);
            }
        };
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butGua = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        panFecCor.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha del documento"));
        panFecCor.setPreferredSize(new java.awt.Dimension(100, 80));
        panFecCor.setLayout(null);
        jPanel1.add(panFecCor, java.awt.BorderLayout.NORTH);

        panFil.setFont(new java.awt.Font("SansSerif", 1, 12));
        panFil.setPreferredSize(new java.awt.Dimension(0, 200));
        panFil.setLayout(null);

        chkMosDocPag.setText("Mostrar documentos pago asociado");
        panFil.add(chkMosDocPag);
        chkMosDocPag.setBounds(10, 10, 320, 16);

        chkMosDocPndPag.setSelected(true);
        chkMosDocPndPag.setText("Mostrar documentos pendientes de pago");
        panFil.add(chkMosDocPndPag);
        chkMosDocPndPag.setBounds(10, 30, 320, 16);

        jPanel1.add(panFil, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del Proveedor"));
        jPanel2.setPreferredSize(new java.awt.Dimension(100, 80));
        jPanel2.setLayout(null);

        lblPrv.setText("Proveedor:");
        lblPrv.setToolTipText("Proveedor");
        jPanel2.add(lblPrv);
        lblPrv.setBounds(20, 20, 90, 20);

        txtCodPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodPrvActionPerformed(evt);
            }
        });
        txtCodPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusLost(evt);
            }
        });
        jPanel2.add(txtCodPrv);
        txtCodPrv.setBounds(110, 20, 38, 20);
        jPanel2.add(txtRucPrv);
        txtRucPrv.setBounds(148, 20, 106, 20);

        txtDesLarPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarPrvActionPerformed(evt);
            }
        });
        txtDesLarPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusLost(evt);
            }
        });
        jPanel2.add(txtDesLarPrv);
        txtDesLarPrv.setBounds(254, 20, 250, 20);

        butPrv.setText("...");
        butPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrvActionPerformed(evt);
            }
        });
        jPanel2.add(butPrv);
        butPrv.setBounds(504, 20, 20, 20);

        lblBen.setText("Beneficiario:");
        lblBen.setToolTipText("Beneficiario");
        jPanel2.add(lblBen);
        lblBen.setBounds(20, 40, 90, 20);

        txtCodBen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodBenActionPerformed(evt);
            }
        });
        txtCodBen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodBenFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodBenFocusLost(evt);
            }
        });
        jPanel2.add(txtCodBen);
        txtCodBen.setBounds(110, 42, 38, 20);

        txtNomBen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomBenActionPerformed(evt);
            }
        });
        txtNomBen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomBenFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomBenFocusLost(evt);
            }
        });
        jPanel2.add(txtNomBen);
        txtNomBen.setBounds(148, 42, 270, 20);

        butBen.setText("...");
        butBen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBenActionPerformed(evt);
            }
        });
        jPanel2.add(butBen);
        butBen.setBounds(418, 42, 20, 20);

        jPanel1.add(jPanel2, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("Filtro", jPanel1);

        panRpt.setLayout(new java.awt.BorderLayout());

        spnDat.setPreferredSize(new java.awt.Dimension(453, 418));

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDat.setViewportView(tblDat);

        panRpt.add(spnDat, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Reporte", panRpt);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setPreferredSize(new java.awt.Dimension(385, 26));
        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butGua.setText("Guardar");
        butGua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGuaActionPerformed(evt);
            }
        });
        panBot.add(butGua);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents
                   /*Permite obtener un log de la tabla tbm_grpvar
 *
 */    
     
    
    
                        
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acci�n de acuerdo a la etiqueta del bot�n ("Consultar" o "Detener").
        //Realizar acci�n de acuerdo a la etiqueta del bot�n ("Consultar" o "Detener").
        objTblMod.removeAllRows();
        lblMsgSis.setText("");
        if (butCon.getText().equals("Consultar")){
            blnCon=true;
            if (objThrGUI==null){
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }
        }
        else{
            blnCon=false;
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicaci�n. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

private void butGuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGuaActionPerformed
    // TODO add your handling code here:
    if(isCamVal()){
        if(guardar()){
            mostrarMsgInf("<HTML>La información se guardó correctamente.</HTML>");
            cargarReg();
        }
        else{
            mostrarMsgInf("<HTML>La información no se pudo guardar.</HTML>");
        }
    }

}//GEN-LAST:event_butGuaActionPerformed

private void txtCodPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodPrvActionPerformed
    txtCodPrv.transferFocus();
}//GEN-LAST:event_txtCodPrvActionPerformed

private void txtCodPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusGained
    strCodPrv=txtCodPrv.getText();
    txtCodPrv.selectAll();
}//GEN-LAST:event_txtCodPrvFocusGained

private void txtCodPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusLost
    //Validar el contenido de la celda sálo si ha cambiado.
    if (!txtCodPrv.getText().equalsIgnoreCase(strCodPrv)) {
        if (txtCodPrv.getText().equals("")) {
            txtCodPrv.setText("");
            txtDesLarPrv.setText("");
            txtCodBen.setText("");
            txtNomBen.setText("");
            objTblMod.removeAllRows();
        } else {
            mostrarVenConPrv(1);
        }
    } else
        txtCodPrv.setText(strCodPrv);
}//GEN-LAST:event_txtCodPrvFocusLost

private void txtDesLarPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarPrvActionPerformed
    txtDesLarPrv.transferFocus();
}//GEN-LAST:event_txtDesLarPrvActionPerformed

private void txtDesLarPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusGained
    strDesLarPrv=txtDesLarPrv.getText();
    txtDesLarPrv.selectAll();
}//GEN-LAST:event_txtDesLarPrvFocusGained

private void txtDesLarPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusLost
    //Validar el contenido de la celda sálo si ha cambiado.
    if (!txtDesLarPrv.getText().equalsIgnoreCase(strDesLarPrv)) {
        if (txtDesLarPrv.getText().equals("")) {
            txtCodPrv.setText("");
            txtDesLarPrv.setText("");
            txtCodBen.setText("");
            txtNomBen.setText("");
            objTblMod.removeAllRows();
        } else {
            mostrarVenConPrv(2);
        }
    } else
        txtDesLarPrv.setText(strDesLarPrv);
}//GEN-LAST:event_txtDesLarPrvFocusLost

private void butPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrvActionPerformed
    strCodPrv=txtCodPrv.getText();
    mostrarVenConPrv(0);
}//GEN-LAST:event_butPrvActionPerformed

private void txtCodBenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodBenActionPerformed
    txtCodBen.transferFocus();
}//GEN-LAST:event_txtCodBenActionPerformed

private void txtCodBenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodBenFocusGained
    strCodBen=txtCodBen.getText();
    txtCodBen.selectAll();
}//GEN-LAST:event_txtCodBenFocusGained

private void txtCodBenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodBenFocusLost
    //Validar el contenido de la celda sálo si ha cambiado.
    if (!txtCodBen.getText().equalsIgnoreCase(strCodBen)) {
        if (txtCodBen.getText().equals("")) {
            txtCodBen.setText("");
            txtNomBen.setText("");
        } else {
            mostrarVenConBen(1);
        }
    } else
        txtCodBen.setText(strCodBen);
}//GEN-LAST:event_txtCodBenFocusLost

private void txtNomBenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomBenActionPerformed
    txtNomBen.transferFocus();
}//GEN-LAST:event_txtNomBenActionPerformed

private void txtNomBenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomBenFocusGained
    strNomBen=txtNomBen.getText();
    txtNomBen.selectAll();
}//GEN-LAST:event_txtNomBenFocusGained

private void txtNomBenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomBenFocusLost
    //Validar el contenido de la celda sálo si ha cambiado.
    if (!txtNomBen.getText().equalsIgnoreCase(strNomBen)) {
        if (txtNomBen.getText().equals("")) {
            txtCodBen.setText("");
            txtNomBen.setText("");
        } else {
            mostrarVenConBen(2);
        }
    } else
        txtNomBen.setText(strNomBen);
}//GEN-LAST:event_txtNomBenFocusLost

private void butBenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBenActionPerformed
    mostrarVenConBen(0);
}//GEN-LAST:event_butBenActionPerformed

    /** Cerrar la aplicaci�n. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butBen;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butGua;
    private javax.swing.JButton butPrv;
    private javax.swing.JCheckBox chkMosDocPag;
    private javax.swing.JCheckBox chkMosDocPndPag;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblBen;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblPrv;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFecCor;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panRpt;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodBen;
    private javax.swing.JTextField txtCodPrv;
    private javax.swing.JTextField txtDesLarPrv;
    private javax.swing.JTextField txtNomBen;
    private javax.swing.JTextField txtRucPrv;
    // End of variables declaration//GEN-END:variables

    

    
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarReg()){
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }            
            //Establecer el foco en el JTable s�lo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }

    
    
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            strAux=objParSis.getNombreMenu() + "v0.1.3";
            this.setTitle(strAux);
            lblTit.setText(strAux);
            //lblTit.setForeground(Color.red);
                     
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(14);    //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_EMP,"Cód.Emp.");
            vecCab.add(INT_TBL_DAT_COD_LOC,"Cód.Loc.");
            vecCab.add(INT_TBL_DAT_COD_TIP_DOC,"Cód.Tip.Doc.");
            vecCab.add(INT_TBL_DAT_DES_COR_TIP_DOC,"Tip.Doc.");
            vecCab.add(INT_TBL_DAT_DES_LAR_TIP_DOC,"Tipo de documento");
            vecCab.add(INT_TBL_DAT_COD_DOC,"Cód.Doc.");
            vecCab.add(INT_TBL_DAT_NUM_DOC,"Núm.Doc.");
            vecCab.add(INT_TBL_DAT_FEC_DOC,"Fec.Doc.");
            vecCab.add(INT_TBL_DAT_COD_CLI,"Cód.Cli.");
            vecCab.add(INT_TBL_DAT_NOM_CLI,"Nom.Cli.");
            vecCab.add(INT_TBL_DAT_VAL_DOC,"Val.Doc.");
            vecCab.add(INT_TBL_DAT_VAL_ABO,"Val.Abo.");
            vecCab.add(INT_TBL_DAT_CHK,"Autorizar");
            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);            
                          
            //Configurar JTable: Establecer tipo de selecci�n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el men� de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Tama�o de las celdas
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_DES_COR_TIP_DOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_DES_LAR_TIP_DOC).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(140);
            tcmAux.getColumn(INT_TBL_DAT_VAL_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_VAL_ABO).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setPreferredWidth(54);

            tblDat.getTableHeader().setReorderingAllowed(false);                        
            objTblBus=new ZafTblBus(tblDat);

            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            

            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);

            objTblOrd=new ZafTblOrd(tblDat);
            //Configurar ZafSelFec:
            objSelFec=new ZafSelFec();
            objSelFec.setCheckBoxVisible(false);
            panFecCor.add(objSelFec);
            objSelFec.setBounds(4, 4, 472, 72);

            //Configurar JTable: Renderizar celdas.
            objTblCelRenLblCru=new ZafTblCelRenLbl();
            objTblCelRenLblCru.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLblCru.setTipoFormato(objTblCelRenLblCru.INT_FOR_NUM);
            objTblCelRenLblCru.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_VAL_DOC).setCellRenderer(objTblCelRenLblCru);
            tcmAux.getColumn(INT_TBL_DAT_VAL_ABO).setCellRenderer(objTblCelRenLblCru);
            objTblCelRenLblCru=null;

            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_CHK);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;

            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
       

            butCon.setEnabled(false);
            butCer.setEnabled(false);

            if(objPerUsr.isOpcionEnabled(2957)){
                butCon.setEnabled(true);
            }
            if(objPerUsr.isOpcionEnabled(2958)){
                butGua.setEnabled(true);
            }
            if(objPerUsr.isOpcionEnabled(2959)){
                butCer.setEnabled(true);
            }


            //Configurar JTable: Ocultar columnas del sistema.
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_EMP, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_TIP_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_DOC, tblDat);

            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk=new ZafTblCelRenChk();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk=null;

            //Configurar JTable: Editor de celdas.
            objTblCelEdiChk=new ZafTblCelEdiChk(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFil=-1;
                BigDecimal bdeValDoc=new BigDecimal(BigInteger.ZERO);
                BigDecimal bdeValAbo=new BigDecimal(BigInteger.ZERO);
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFil=tblDat.getSelectedRow();
                    bdeValDoc=new BigDecimal(objTblMod.getValueAt(intFil, INT_TBL_DAT_VAL_DOC)==null?"0":(objTblMod.getValueAt(intFil, INT_TBL_DAT_VAL_DOC).toString().equals("")?"0":objTblMod.getValueAt(intFil, INT_TBL_DAT_VAL_DOC).toString())).abs();
                    bdeValAbo=new BigDecimal(objTblMod.getValueAt(intFil, INT_TBL_DAT_VAL_ABO)==null?"0":(objTblMod.getValueAt(intFil, INT_TBL_DAT_VAL_ABO).toString().equals("")?"0":objTblMod.getValueAt(intFil, INT_TBL_DAT_VAL_ABO).toString())).abs();
                    if(bdeValDoc.compareTo(bdeValAbo)>0){//si hay valor pendiente por tanto si se permite seleccionar
                        objTblCelEdiChk.setCancelarEdicion(false);
                    }
                    else{
                        objTblCelEdiChk.setCancelarEdicion(true);
                    }
                }
            });

            configurarVenConPrv();
            configurarVenConBen();

            //Libero los objetos auxiliares.
            tcmAux=null;


        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    

    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren m�s espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD_EMP:
                    strMsg="Código de la empresa";
                    break;
                case INT_TBL_DAT_COD_LOC:
                    strMsg="Código del local";
                    break;
                case INT_TBL_DAT_COD_TIP_DOC:
                    strMsg="Código del Tipo de Documento";
                    break;
                case INT_TBL_DAT_DES_COR_TIP_DOC:
                    strMsg="Descripción corta del Tipo de Documento";
                    break;
                case INT_TBL_DAT_DES_LAR_TIP_DOC:
                    strMsg="Descripción larga del Tipo de Documento";
                    break;
                case INT_TBL_DAT_COD_DOC:
                    strMsg="Código del documento";
                    break;
                case INT_TBL_DAT_NUM_DOC:
                    strMsg="Número de documento";
                    break;
                case INT_TBL_DAT_FEC_DOC:
                    strMsg="Fecha del documento";
                    break;
                case INT_TBL_DAT_COD_CLI:
                    strMsg="Código del cliente";
                    break;
                case INT_TBL_DAT_NOM_CLI:
                    strMsg="Nombre del Cliente";
                    break;
                case INT_TBL_DAT_VAL_DOC:
                    strMsg="Valor del documento";
                    break;
                case INT_TBL_DAT_VAL_ABO:
                    strMsg="Abono";
                    break;
                case INT_TBL_DAT_CHK:
                    strMsg="Autorizar la anulación del documento";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
    

            
            
    /**
     * Esta funci�n muestra un mensaje informativo al usuario. Se podr�a utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
 
    
    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                if(cargarDetReg()){
                }                
                con.close();
                con=null;
            }
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
 
    
    

  
    private boolean cargarDetReg(){
        boolean blnRes=true;
        int i;
        strAux="";
        int intNumReg=0;

        try{
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");

            if (con!=null){

                switch (objSelFec.getTipoSeleccion()){
                    case 0: //B�squeda por rangos
                        strAux+=" AND (a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        break;
                    case 1: //Fechas menores o iguales que "Hasta".
                        strAux+=" AND (a1.fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        break;
                    case 2: //Fechas mayores o iguales que "Desde".
                        strAux+=" AND (a1.fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        break;
                    case 3: //Todo.
                        break;
                }

                stm=con.createStatement();
                strSQL="";
                strSQL+=" SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc";
                strSQL+=" , a2.tx_desCor,a2.tx_desLar, a1.ne_numDoc AS ne_numDoc, a1.fe_doc";
                strSQL+=" , a1.co_cli, a1.tx_nomCli, ABS(a1.nd_tot) AS nd_valDoc, SUM(a4.nd_abo) as nd_abo";
                strSQL+=" FROM (tbm_cabMovInv AS a1 INNER JOIN tbm_cabTipDoc AS a2";
                strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc)";
                strSQL+=" INNER JOIN tbm_pagMovInv AS a3";
                strSQL+=" ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc AND a1.co_doc=a3.co_doc";
                strSQL+=" LEFT OUTER JOIN (tbm_detPag AS a4 INNER JOIN tbm_cabPag AS a5";
                strSQL+=" 	ON a4.co_emp=a5.co_emp AND a4.co_loc=a5.co_loc AND a4.co_tipDoc=a5.co_tipDoc AND a4.co_doc=a5.co_doc AND a5.st_reg NOT IN('E','I'))";
                strSQL+=" ON a3.co_emp=a4.co_emp AND a3.co_loc=a4.co_locPag AND a3.co_tipDoc=a4.co_tipDocPag AND a3.co_doc=a4.co_docPag AND a3.co_reg=a4.co_regPag";
                if(!objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                    strSQL+="   INNER JOIN tbr_cliLoc AS a6";
                    strSQL+="   ON a1.co_emp=a6.co_emp AND a1.co_loc=a6.co_loc AND a1.co_cli=a6.co_cli";
                }
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                if(!objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                    strSQL+=" 	AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                }
                strSQL+=" 	AND a1.co_tipDoc IN(" + tipoDocPrgUsr() + ")";
                strSQL+=" AND a1.st_reg NOT IN('E','I') AND a2.st_reg IN('A','C')";
                strSQL+="" + strAux;
                strSQL+=" AND (a1.st_docmarlis='N' OR a1.st_docmarlis IS NULL)";
                strSQL+=" GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc";
                strSQL+=" , a2.tx_desCor,a2.tx_desLar, a1.ne_numDoc, a1.fe_doc";
                strSQL+=" , a1.co_cli, a1.tx_nomCli,a1.nd_tot, a1.st_docmarlis";
                if( (chkMosDocPag.isSelected()) && chkMosDocPndPag.isSelected() )
                    strSQL+="";
                else if( (chkMosDocPag.isSelected()) && (!chkMosDocPndPag.isSelected()) )
                    strSQL+=" HAVING (SUM(a4.nd_abo)<>0)";
                else if( (!chkMosDocPag.isSelected()) && (chkMosDocPndPag.isSelected()) )
                    strSQL+=" HAVING (SUM(a4.nd_abo)=0 OR SUM(a4.nd_abo) IS NULL)";
                else
                    strSQL+="";
                
                
                strSQL+=" order by co_emp, fe_doc, co_loc, co_tipDoc, ne_numDoc, tx_nomCli";
                System.out.println("SQL cargarDetReg: " + strSQL);
                rst=stm.executeQuery(strSQL);

                vecDat.clear();
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
//                pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;

                lblMsgSis.setText("Listo");
                while (rst.next()){
//                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN, "");
                        vecReg.add(INT_TBL_DAT_COD_EMP,             "" + rst.getObject("co_emp")==null?"":rst.getString("co_emp"));
                        vecReg.add(INT_TBL_DAT_COD_LOC,             "" + rst.getObject("co_loc")==null?"":rst.getString("co_loc"));
                        vecReg.add(INT_TBL_DAT_COD_TIP_DOC,         "" + rst.getObject("co_tipDoc")==null?"":rst.getString("co_tipDoc"));
                        vecReg.add(INT_TBL_DAT_DES_COR_TIP_DOC,     "" + rst.getObject("tx_desCor")==null?"":rst.getString("tx_desCor"));
                        vecReg.add(INT_TBL_DAT_DES_LAR_TIP_DOC,     "" + rst.getObject("tx_desLar")==null?"":rst.getString("tx_desLar"));
                        vecReg.add(INT_TBL_DAT_COD_DOC,             "" + rst.getObject("co_doc")==null?"":rst.getString("co_doc"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC,             "" + rst.getObject("ne_numDoc")==null?"":rst.getString("ne_numDoc"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC,             "" + rst.getObject("fe_doc")==null?"":rst.getString("fe_doc"));
                        vecReg.add(INT_TBL_DAT_COD_CLI,             "" + rst.getObject("co_cli")==null?"":rst.getString("co_cli"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI,             "" + rst.getObject("tx_nomCli")==null?"":rst.getString("tx_nomCli"));
                        vecReg.add(INT_TBL_DAT_VAL_DOC,             "" + rst.getObject("nd_valDoc")==null?"":rst.getString("nd_valDoc"));
                        vecReg.add(INT_TBL_DAT_VAL_ABO,             "" + rst.getObject("nd_abo")==null?"":rst.getString("nd_abo"));
                        vecReg.add(INT_TBL_DAT_CHK,         null);
                        vecDat.add(vecReg);
                        i++;
                        pgrSis.setValue(i);
                        intNumReg=rst.getRow();
//                    }
//                    else{
//                        break;
//                    }
                }
                


                rst.close();
                stm.close();
                rst=null;
                stm=null;

                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                

                pgrSis.setValue(0);
                butCon.setText("Consultar");
                objTblMod.initRowsState();

                lblMsgSis.setText("Se encontraron " + intNumReg + " registros.");

            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    private String tipoDocPrgUsr(){
        String strTipDocUsr="";
        Statement stmTipDoc;
        ResultSet rstTipDoc;
        String strSQLTipDoc="";
        try{
            if(con!=null){
                stmTipDoc=con.createStatement();
                if(objParSis.getCodigoUsuario()==1){
                    strSQLTipDoc="";
                    strSQLTipDoc+="SELECT co_tipDoc";
                    strSQLTipDoc+=" FROM tbr_tipDocPrg AS a1";
                    strSQLTipDoc+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQLTipDoc+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                    strSQLTipDoc+=" AND a1.co_mnu=" + objParSis.getCodigoMenu() + "";
                }
                else{
                    strSQLTipDoc="";
                    strSQLTipDoc+="SELECT co_tipDoc";
                    strSQLTipDoc+=" FROM tbr_tipDocUsr AS a1";
                    strSQLTipDoc+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQLTipDoc+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                    strSQLTipDoc+=" AND a1.co_mnu=" + objParSis.getCodigoMenu() + "";
                    strSQLTipDoc+=" AND a1.co_usr=" + objParSis.getCodigoUsuario() + "";
                    strSQLTipDoc+="";
                }
                rstTipDoc=stmTipDoc.executeQuery(strSQLTipDoc);
                for(int k=0; rstTipDoc.next(); k++){
                    if(k==0){
                        strTipDocUsr="" + rstTipDoc.getString("co_tipDoc");
                    }
                    else{
                        strTipDocUsr+=", " + rstTipDoc.getString("co_tipDoc");
                    }
                }
                stmTipDoc.close();
                stmTipDoc=null;
                rstTipDoc.close();
                rstTipDoc=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return strTipDocUsr;
    }


    private boolean guardar(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                con.setAutoCommit(false);
                if(guardarDatos()){
                    con.commit();
                    //con.rollback();
                    objZafCon04.getAfterInsertar();
                }
                else{
                    con.rollback();
                    blnRes=false;
                }
                con.close();
                con=null;
            }
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }


    private boolean guardarDatos(){
        boolean blnRes=true;
        String strLin="";
        String strUpd="";
        BigDecimal bdeValDoc=new BigDecimal("0");
        BigDecimal bdeValAbo=new BigDecimal("0");
        BigDecimal bdeValPen=new BigDecimal("0");
        BigDecimal bdeValAplPagMas=new BigDecimal("0");
        int intCodEmp=-1;
        int intCodLoc=-1;
        try{
            if(con!=null){
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    strLin=objTblMod.getValueAt(i, INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_LIN).toString();
                    if(strLin.equals("M")){
                        if(objTblMod.isChecked(i, INT_TBL_DAT_CHK)){
                            bdeValDoc=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VAL_DOC)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VAL_DOC).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VAL_DOC).toString())).abs();
                            bdeValAbo=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VAL_ABO)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VAL_ABO).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VAL_ABO).toString())).abs();
                            bdeValPen=bdeValDoc.subtract(bdeValAbo);
                            if( bdeValPen.compareTo(new BigDecimal("0"))>0 ){
                                bdeValAplPagMas=bdeValAplPagMas.add(bdeValPen);
                            }
                        }
                    }
                }

                if(bdeValAplPagMas.compareTo(new BigDecimal("0"))>0 ){
                    intCodEmp=objParSis.getCodigoEmpresa();
                    intCodLoc=objParSis.getCodigoLocal();
                    if(insertarPagoMasivoCxP(intCodEmp, intCodLoc, bdeValAplPagMas)){
                        if(insertarDxP_cheque(bdeValAplPagMas)){
                            
                        }
                    }
                    else{
                        blnRes=false;
                    }
                }
                System.out.println("strUpd: " + strUpd);
            }

        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }


    /**
     * Esta funcián inserta el registro en la base de datos.
     * @return true: Si se pudo insertar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarPagoMasivoCxP(int codigoEmpresaEgreso, int codigoLocalEgreso, BigDecimal valorProcesar){
        boolean blnRes=true;
        int intCodCtaDebAsiDia=-1;
        int intCodCtaHabAsiDia=-1;
        BigDecimal bdeValProcesado=valorProcesar;
        try{
            if (con!=null){
                 switch(codigoEmpresaEgreso){
                     case 1://tuval
                         intCodCtaDebAsiDia=992;
                         intCodCtaHabAsiDia=3225;
                         break;
                     case 2://castek
                         intCodCtaDebAsiDia=178;
                         intCodCtaHabAsiDia=1324;
                         break;
                     case 4://dimulti
                         intCodCtaDebAsiDia=1771;
                         intCodCtaHabAsiDia=2355;
                         break;
                 }
                if (insertarCabPagoMasivoCxP(codigoEmpresaEgreso, codigoLocalEgreso, bdeValProcesado)){
                    if (insertarDetPagoMasivoCxP(codigoEmpresaEgreso, codigoLocalEgreso, bdeValProcesado)){
                        strAux=objSelFec.getFechaHasta();
                        objAsiDia.inicializar();
                        objAsiDia.generarDiario(codigoEmpresaEgreso, codigoLocalEgreso, INT_COD_TIP_DOC_PAG_MAS_CXP_AUT, intCodCtaDebAsiDia,  ""+bdeValProcesado.abs(), intCodCtaHabAsiDia, ""+bdeValProcesado.abs());
                        if (objAsiDia.insertarDiario(con, codigoEmpresaEgreso, codigoLocalEgreso, INT_COD_TIP_DOC_PAG_MAS_CXP_AUT, ""+intCodDocPagMas, ""+intNumDocPagMas, objUti.parseDate((strAux),"dd/MM/yyyy"))){
                        }
                    }
                    else
                        blnRes=false;
                }
                else
                    blnRes=false;

            }
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }

    /**
     * Esta funcián permite insertar la cabecera de un registro.
     * @return true: Si se pudo insertar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarCabPagoMasivoCxP(int codigoEmpresa, int codigoLocalEgreso, BigDecimal valorProcesar){
        intCodDocPagMas=-1; intNumDocPagMas=-1; intSigPagMas=-1;
        boolean blnRes=true;
        strAux="";
        BigDecimal bdeValProcesado=valorProcesar;
        try{
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT CASE WHEN MAX(a1.co_doc) IS NULL THEN 0 ELSE MAX(a1.co_doc) END AS co_doc";
                strSQL+=" FROM tbm_cabPag AS a1";
                strSQL+=" WHERE a1.co_emp=" + codigoEmpresa;
                strSQL+=" AND a1.co_loc=" + codigoLocalEgreso;
                strSQL+=" AND a1.co_tipDoc=" + INT_COD_TIP_DOC_PAG_MAS_CXP_AUT;
                rst=stm.executeQuery(strSQL);
                if(rst.next())
                    intCodDocPagMas=rst.getInt("co_doc");
                intCodDocPagMas++;

                strSQL="";
                strSQL+="SELECT CASE WHEN a1.ne_ultdoc IS NULL THEN 0 ELSE a1.ne_ultdoc END AS ne_ultdoc";
                strSQL+=" FROM tbm_cabTipDoc AS a1";
                strSQL+=" WHERE a1.co_emp=" + codigoEmpresa;
                strSQL+=" AND a1.co_loc=" + codigoLocalEgreso;
                strSQL+=" AND a1.co_tipDoc=" + INT_COD_TIP_DOC_PAG_MAS_CXP_AUT;
                rst=stm.executeQuery(strSQL);
                if(rst.next())
                    intNumDocPagMas=rst.getInt("ne_ultdoc");
                intNumDocPagMas++;

                strSQL="";
                strSQL+="SELECT a1.tx_natDoc";
                strSQL+=" FROM tbm_cabTipDoc AS a1";
                strSQL+=" WHERE a1.co_emp=" + codigoEmpresa;
                strSQL+=" AND a1.co_loc=" + codigoLocalEgreso;
                strSQL+=" AND a1.co_tipDoc=" + INT_COD_TIP_DOC_PAG_MAS_CXP_AUT;
                rst=stm.executeQuery(strSQL);
                if(rst.next())
                    intSigPagMas=(rst.getString("tx_natDoc").equals("I")?1:-1);

                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;


                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="INSERT INTO tbm_cabpag(";
                strSQL+="             co_emp, co_loc, co_tipdoc, co_doc, fe_doc, fe_ven, ne_numdoc1, ne_numdoc2, co_cta, co_cli, tx_ruc";
                strSQL+="             , tx_nomcli, tx_dircli, nd_mondoc, tx_obs1, tx_obs2, st_reg, fe_ing, fe_ultmod, co_usring, co_usrmod, ";
                strSQL+="             co_dia, co_ben, tx_benchq, tx_mondocpal, co_mnu, st_regrep, st_imp, tx_obssolaut, tx_obsautsol";
                strSQL+="             , st_aut, ne_valaut, st_condepban, st_autanu, fe_autanu, co_usrautanu, tx_comautanu, tx_coming, tx_commod)";
                strSQL+=" VALUES(";
                strSQL+="" + codigoEmpresa + "";//co_emp
                strSQL+="," + codigoLocalEgreso + "";//co_loc
                strSQL+="," + INT_COD_TIP_DOC_PAG_MAS_CXP_AUT + "";//co_tipdoc
                strSQL+="," + intCodDocPagMas + "";//co_doc
                strAux=objUti.formatearFecha((objSelFec.getFechaHasta()), "dd/MM/yyyy", objParSis.getFormatoFechaBaseDatos());
                strSQL+=",'" + strAux + "'";//fe_doc
                strSQL+=", Null";//fe_ven
                strSQL+="," + intNumDocPagMas + "";//ne_numdoc1
                strSQL+=",Null";//ne_numdoc2
                strSQL+=",Null";//co_cta
                strSQL+=",Null";//co_cli
                strSQL+=",Null";//tx_ruc
                strSQL+=",Null";//tx_nomcli
                strSQL+=",Null";//tx_dircli
                strSQL+="," + objUti.redondearBigDecimal((bdeValProcesado.multiply(new BigDecimal("" + intSigPagMas))), objParSis.getDecimalesBaseDatos()) + "";//nd_mondoc
                strSQL+=",Null";//tx_obs1
                strSQL+=",'Pago masivo generado por el sistema para liquidar DxP generados por Facturas pagadas con T/C'";//tx_obs2
                strSQL+=",'A'";//st_reg
                strAux=objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos());
                strSQL+=",'" + strAux + "'";//fe_ing
                strSQL+=",'" + strAux + "'";//fe_ultmod
                strSQL+="," + objParSis.getCodigoUsuario() + "";//co_usring
                strSQL+="," + objParSis.getCodigoUsuario() + "";//co_usrmod
                strSQL+=",Null";//co_dia
                strSQL+=",Null";//co_ben
                strSQL+=",Null";//tx_benchq
                strSQL+=",Null";//tx_mondocpal
                strSQL+=",Null";//co_mnu
                strSQL+=",'I'";//st_regrep
                strSQL+=",'N'";//st_imp
                strSQL+=",Null";//tx_obssolaut
                strSQL+=",Null";//tx_obsautsol
                strSQL+=",Null";//st_aut
                strSQL+=",Null";//ne_valaut
                strSQL+=",Null";//st_condepban
                strSQL+=",Null";//st_autanu
                strSQL+=",Null";//fe_autanu
                strSQL+=",Null";//co_usrautanu
                strSQL+=",Null";//tx_comautanu
                strSQL+="," + objUti.codificar(objParSis.getNombreComputadoraConDirIP()) + "";//tx_coming
                strSQL+="," + objUti.codificar(objParSis.getNombreComputadoraConDirIP()) + "";//tx_commod
                strSQL+=");";
                System.out.println("insertarCabPagoMasivoCxP: " +strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }




    /**
     * Esta funcián permite insertar el detalle de un registro.
     * @return true: Si se pudo insertar el detalle del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarDetPagoMasivoCxP(int codigoEmpresaEgreso, int codigoLocalEgreso, BigDecimal valorProcesado){
        boolean blnRes=true;
        String strUpd="";
        String strLin="";
        int intCodLoc=-1, intCodTipDoc=-1, intCodDoc=-1;
        int intUltReg=1;
        try{
            if (con!=null){
                stm=con.createStatement();
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    strLin=objTblMod.getValueAt(i, INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_LIN).toString();
                    if(strLin.equals("M")){
                        if(objTblMod.isChecked(i, INT_TBL_DAT_CHK)){
                            intCodLoc=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC).toString()));
                            intCodTipDoc=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC).toString()));
                            intCodDoc=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC).toString()));


                            //Armar la sentencia SQL.
                            strSQL="";
                            strSQL+="INSERT INTO tbm_detPag(co_emp, co_loc, co_tipdoc, co_doc, co_reg, co_locpag, co_tipdocpag, co_docpag, co_regpag, nd_abo";
                            strSQL+="         , co_tipdoccon, co_banchq, tx_numctachq, tx_numchq, fe_recchq, fe_venchq, st_regrep, tx_codsri";
                            strSQL+="         , st_reg, co_locreldepcliregdirban, co_tipdocreldepcliregdirban, co_docreldepcliregdirban, co_regreldepcliregdirban)";
                            strSQL+=" (";
                            strSQL+="        SELECT " + codigoEmpresaEgreso + " AS co_emp";//co_emp
                            strSQL+="       ," + codigoLocalEgreso + " AS co_loc";//co_loc
                            strSQL+="       ," + INT_COD_TIP_DOC_PAG_MAS_CXP_AUT + " AS co_tipdoc";//co_tipdoc
                            strSQL+="       ," + intCodDocPagMas + " AS co_doc";//co_doc
//                            strSQL+="       , (    ";
//                            strSQL+="               SELECT ((CASE WHEN MAX (co_reg) IS NULL THEN 0 ELSE MAX (co_reg) END)+1) AS co_reg";
//                            strSQL+="               FROM tbm_detPag WHERE co_emp=" + codigoEmpresaEgreso + "";
//                            strSQL+="               AND co_loc=" + codigoLocalEgreso + " AND co_tipDoc=" + INT_COD_TIP_DOC_PAG_MAS_CXP_AUT + "";
//                            strSQL+="               AND co_doc=" + intCodDocPagMas + "";
//                            strSQL+="               )";//co_reg
                            strSQL+="       , " + intUltReg + "";//co_reg
                            strSQL+="       ," + intCodLoc + " AS co_locpag";//co_locpag
                            strSQL+="       ," + intCodTipDoc + " AS co_tipdocpag";//co_tipdocpag
                            strSQL+="       ," + intCodDoc + " AS co_docpag";//co_docpag
                            strSQL+="       , co_reg AS co_regPag";//co_regpag
                            strSQL+="       ," + ("(abs(mo_pag) - abs(nd_abo))*" + intSigPagMas)  + "";//nd_abo
                            strSQL+="       ," + INT_COD_TIP_DOC_PAG_MAS_CXP_AUT + "";//co_tipdoccon
                            strSQL+="       ,Null";//co_banchq
                            strSQL+="       ,Null";//tx_numctachq
                            strSQL+="       ,Null";//tx_numchq
                            strSQL+="       ,Null";//fe_recchq
                            strSQL+="       ,Null";//fe_venchq
                            strSQL+="       ,'I'";//st_regrep
                            strSQL+="       ,Null";//tx_codsri
                            strSQL+="       ,'A'";//st_reg
                            strSQL+="       ,Null";//co_locreldepcliregdirban
                            strSQL+="       ,Null";//co_tipdocreldepcliregdirban
                            strSQL+="       ,Null";//co_docreldepcliregdirban
                            strSQL+="       ,Null";//co_regreldepcliregdirban
                            strSQL+="       FROM tbm_pagMovInv";
                            strSQL+="       WHERE co_emp=" + codigoEmpresaEgreso + "";
                            strSQL+="       AND co_loc= " + intCodLoc + "";
                            strSQL+="       AND co_tipDoc=" + intCodTipDoc + "";
                            strSQL+="       AND co_doc=" + intCodDoc + "";
                            strSQL+="       AND st_reg IN('A','C')";
                            strSQL+="       AND (abs(mo_pag) - abs(nd_abo))>0";
                            strSQL+=");";
                            strSQL+="UPDATE tbm_pagMovInv";
                            strSQL+=" SET nd_monchq=nd_valPnd";
                            strSQL+=" , nd_abo=nd_abo+x.nd_valPnd FROM(";
                            strSQL+="       SELECT co_emp, co_loc, co_tipDoc, co_doc, co_reg,";
                            strSQL+="       (abs(mo_pag) - abs(nd_abo))*" + intSigPagMas + " AS nd_valPnd ";
                            strSQL+="       FROM tbm_pagMovInv";
                            strSQL+="       WHERE co_emp=" + codigoEmpresaEgreso + "";
                            strSQL+="       AND co_loc= " + intCodLoc + "";
                            strSQL+="       AND co_tipDoc=" + intCodTipDoc + "";
                            strSQL+="       AND co_doc=" + intCodDoc + "";
                            strSQL+="       AND st_reg IN('A','C')";
                            strSQL+="       AND (abs(mo_pag) - abs(nd_abo))>0";
                            strSQL+=" ) AS x";                            
                            strSQL+=" WHERE tbm_pagMovInv.co_emp=x.co_emp";
                            strSQL+="   AND tbm_pagMovInv.co_loc=x.co_loc";
                            strSQL+="   AND tbm_pagMovInv.co_tipDoc=x.co_tipDoc";
                            strSQL+="   AND tbm_pagMovInv.co_doc=x.co_doc";
                            strSQL+="   AND tbm_pagMovInv.co_reg=x.co_reg";
                            strSQL+=";";
                            strUpd+=strSQL;
                            intUltReg++;
                        }
                    }

                }

                System.out.println("*************************************************************");
                System.out.println("insertarDetPagoMasivoCxP: " +strUpd);
                System.out.println("*************************************************************");
                stm.executeUpdate(strUpd);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


//    private boolean getDatosProveedor(int codigoEmpresa, int codigoCliente){
//        boolean blnRes=true;
//        try{
//            if(con!=null){
//                stm=con.createStatement();
//                strSQL="";
//                strSQL+="SELECT co_cli,tx_nom, tx_ide, tx_dir";
//                strSQL+=" FROM tbm_cli";
//                strSQL+=" WHERE co_emp=" + codigoEmpresa + "";
//                strSQL+=" AND co_cli=" + codigoCliente + "";
//                //System.out.println("getDatosCliente: " + strSQL);
//                rst=stm.executeQuery(strSQL);
//                if(rst.next()){
//                    strRucPrv=rst.getString("tx_ide");
//                    strNomPrv=rst.getString("tx_nom");
//                    strDirPrv=rst.getString("tx_dir");
//                }
//                stm.close();
//                stm=null;
//                rst.close();
//                rst=null;
//            }
//        }
//        catch (java.sql.SQLException e){
//            blnRes=false;
//            objUti.mostrarMsgErr_F1(this, e);
//        }
//        catch (Exception e){
//            blnRes=false;
//            objUti.mostrarMsgErr_F1(this, e);
//        }
//        return blnRes;
//    }



    /**
     * Esta funcián configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConPrv()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            arlCam.add("a1.tx_tel");
            arlCam.add("a1.tx_nomCiu");
            arlCam.add("a1.tx_numSerFacPrv");
            arlCam.add("a1.tx_numAutSriFacPrv");
            arlCam.add("a1.tx_fecCadFacPrv");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Identificación");
            arlAli.add("Nombre");
            arlAli.add("Dirección");
            arlAli.add("Teléfono");
            arlAli.add("Ciudad");
            arlAli.add("Serie");
            arlAli.add("Autorización");
            arlAli.add("Caducidad");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            arlAncCol.add("80");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir, a1.tx_tel, a2.tx_deslar AS tx_nomCiu";
            strSQL+=", a1.tx_numSerFacPrv, a1.tx_numAutSriFacPrv, a1.tx_fecCadFacPrv";
            strSQL+=" FROM tbm_cli AS a1 LEFT OUTER JOIN tbm_ciu AS a2";
            strSQL+=" ON a1.co_ciu=a2.co_ciu AND a2.st_reg='A'";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" AND a1.st_prv='S'";
            strSQL+=" AND a1.st_reg='A' ";
            strSQL+=" ORDER BY a1.tx_nom";
            //Ocultar columnas.
            int intColOcu[]=new int[6];
            intColOcu[0]=4;
            intColOcu[1]=5;
            intColOcu[2]=6;
            intColOcu[3]=7;
            intColOcu[4]=8;
            intColOcu[5]=9;
            vcoPrv=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de proveedores", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoPrv.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }





    /**
     * Esta funcián configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Beneficiarios".
     */
    private boolean configurarVenConBen()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_reg");
            arlCam.add("a1.tx_benChq");
            arlCam.add("a1.st_reg");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Cádigo");
            arlAli.add("Beneficiario");
            arlAli.add("Estado");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("414");
            arlAncCol.add("80");
            vcoBen=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de beneficiarios", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoBen.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoBen.setConfiguracionColumna(3, javax.swing.JLabel.CENTER);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConPrv(int intTipBus)
    {
        boolean blnRes=true;
        String strSQLTmp="";
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoPrv.setCampoBusqueda(2);
                    vcoPrv.show();
                    if (vcoPrv.getSelectedButton()==vcoPrv.INT_BUT_ACE)
                    {
                        txtCodPrv.setText(vcoPrv.getValueAt(1));
                        txtRucPrv.setText(vcoPrv.getValueAt(2));
                        txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                        mostrarBenPre();
                    }
                    break;
                case 1: //Básqueda directa por "Námero de cuenta".
                    if (vcoPrv.buscar("a1.co_cli", txtCodPrv.getText()))
                    {
                        txtCodPrv.setText(vcoPrv.getValueAt(1));
                        txtRucPrv.setText(vcoPrv.getValueAt(2));
                        txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                        mostrarBenPre();
                    }
                    else
                    {
                        vcoPrv.setCampoBusqueda(0);
                        vcoPrv.setCriterio1(11);
                        vcoPrv.cargarDatos();
                        vcoPrv.show();
                        if (vcoPrv.getSelectedButton()==vcoPrv.INT_BUT_ACE)
                        {
                            txtCodPrv.setText(vcoPrv.getValueAt(1));
                            txtRucPrv.setText(vcoPrv.getValueAt(2));
                            txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                            mostrarBenPre();
                        }
                        else
                        {
                            txtCodPrv.setText(strCodPrv);
                        }
                    }
                    break;
                case 2: //Básqueda directa por "Descripcián larga".
                    if (vcoPrv.buscar("a1.tx_nom", txtDesLarPrv.getText()))
                    {
                        txtCodPrv.setText(vcoPrv.getValueAt(1));
                        txtRucPrv.setText(vcoPrv.getValueAt(2));
                        txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                        mostrarBenPre();
                    }
                    else
                    {
                        vcoPrv.setCampoBusqueda(2);
                        vcoPrv.setCriterio1(11);
                        vcoPrv.cargarDatos();
                        vcoPrv.show();
                        if (vcoPrv.getSelectedButton()==vcoPrv.INT_BUT_ACE)
                        {
                            txtCodPrv.setText(vcoPrv.getValueAt(1));
                            txtRucPrv.setText(vcoPrv.getValueAt(2));
                            txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                            mostrarBenPre();
                        }
                        else
                        {
                            txtDesLarPrv.setText(strDesLarPrv);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConBen(int intTipBus){
        boolean blnRes=true;
        try{
            //Validar que se pueda seleccionar el "Beneficiario" sálo si se seleccioná el "Proveedor".
            if (txtCodPrv.getText().equals("")){
                txtCodBen.setText("");
                txtNomBen.setText("");
                mostrarMsgInf("<HTML>Primero debe seleccionar un <FONT COLOR=\"blue\">Proveedor</FONT>.<BR>Escriba o seleccione un proveedor y vuelva a intentarlo.</HTML>");
                txtCodPrv.requestFocus();
            }
            else{
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT a1.co_reg, a1.tx_benChq, a1.st_reg";
                strSQL+=" FROM tbm_benChq AS a1";
                strSQL+=" INNER JOIN tbm_cabMovInv AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli AND a1.co_reg=a2.co_ben";
                strSQL+=" INNER JOIN tbm_pagMovInv AS a3";
                strSQL+=" ON a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc ";
                strSQL+=" AND a2.co_tipDoc=a3.co_tipDoc AND a2.co_doc=a3.co_doc";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_cli=" + txtCodPrv.getText();
                strSQL+=" AND a1.st_reg IN ('A','P')";
                strSQL+=" AND a3.st_reg IN('A','C') AND a3.st_autpag='S'";
                strSQL+=" GROUP BY a1.co_reg, a1.tx_benChq, a1.st_reg";
                strSQL+=" ORDER BY a1.co_reg";
                vcoBen.setSentenciaSQL(strSQL);
                switch (intTipBus)
                {
                    case 0: //Mostrar la ventana de consulta.
                        vcoBen.setCampoBusqueda(1);
                        vcoBen.show();
                        if (vcoBen.getSelectedButton()==vcoBen.INT_BUT_ACE)
                        {
                            txtCodBen.setText(vcoBen.getValueAt(1));
                            txtNomBen.setText(vcoBen.getValueAt(2));
                        }
                        break;
                    case 1: //Básqueda directa por "Námero de cuenta".
                        if (vcoBen.buscar("a1.co_reg", txtCodBen.getText()))
                        {
                            txtCodBen.setText(vcoBen.getValueAt(1));
                            txtNomBen.setText(vcoBen.getValueAt(2));
                        }
                        else
                        {
                            vcoBen.setCampoBusqueda(0);
                            vcoBen.setCriterio1(11);
                            vcoBen.cargarDatos();
                            vcoBen.show();
                            if (vcoBen.getSelectedButton()==vcoBen.INT_BUT_ACE)
                            {
                                txtCodBen.setText(vcoBen.getValueAt(1));
                                txtNomBen.setText(vcoBen.getValueAt(2));
                            }
                            else
                            {
                                txtCodBen.setText(strCodBen);
                            }
                        }
                        break;
                    case 2: //Básqueda directa por "Descripcián larga".
                        if (vcoBen.buscar("a1.tx_benChq", txtNomBen.getText()))
                        {
                            txtCodBen.setText(vcoBen.getValueAt(1));
                            txtNomBen.setText(vcoBen.getValueAt(2));
                        }
                        else
                        {
                            vcoBen.setCampoBusqueda(1);
                            vcoBen.setCriterio1(11);
                            vcoBen.cargarDatos();
                            vcoBen.show();
                            if (vcoBen.getSelectedButton()==vcoBen.INT_BUT_ACE)
                            {
                                txtCodBen.setText(vcoBen.getValueAt(1));
                                txtNomBen.setText(vcoBen.getValueAt(2));
                            }
                            else
                            {
                                txtNomBen.setText(strNomBen);
                            }
                        }
                        break;
                }
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funcián muestra el beneficiario predeterminado del cheque
     * de acuerdo al proveedor seleccionado.
     * @return true: Si se pudo mostrar el beneficiario predeterminado.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarBenPre()
    {
        boolean blnRes=true;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT a1.co_reg, a1.tx_benChq";
                strSQL+=" FROM tbm_benChq AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_cli=" + txtCodPrv.getText();
                strSQL+=" AND a1.st_reg='P'";
                rst=stm.executeQuery(strSQL);
                if (rst.next())
                {
                    txtCodBen.setText(rst.getString("co_reg"));
                    txtNomBen.setText(rst.getString("tx_benChq"));
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función inserta el registro en la base de datos.
     * @return true: Si se pudo insertar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarDxP_cheque(BigDecimal valorDocumentoPagar){
        boolean blnRes=true;
        try{
            strAux=objSelFec.getFechaHasta();
            objZafCon04=new ZafCon04(objParSis, INT_COD_TIP_DOC_PAG_NEW, Integer.parseInt(txtCodPrv.getText()), Integer.parseInt(txtCodBen.getText()), strAux, valorDocumentoPagar, Integer.parseInt("523"), con);
            this.getParent().add(objZafCon04,javax.swing.JLayeredPane.DEFAULT_LAYER);
            objZafCon04.show();



//            if(objZafCon04.setDetConIntMovInv()){//detalle
//                if(objZafCon04.setPagMovInv()){//forma de pago
//                    if(objZafCon04.setRetMovInv()){//motivos
//                        //objZafCon04.getObjTooBar().insertar();
//                    }
//                }
//            }



        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }

    /**
     * Esta función determina si los campos son válidos.
     * @return true: Si los campos son válidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal()
    {
        //Validar el "Proveedor".
        if (txtCodPrv.getText().equals(""))
        {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Proveedor</FONT> es obligatorio.<BR>Escriba o seleccione un proveedor y vuelva a intentarlo.</HTML>");
            txtCodPrv.requestFocus();
            return false;
        }
        //Validar el "Beneficiario".
        if (txtCodBen.getText().equals(""))
        {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Beneficiario</FONT> es obligatorio.<BR>Escriba o seleccione un beneficiario y vuelva a intentarlo.</HTML>");
            txtCodBen.requestFocus();
            return false;
        }


        return true;
    }


}