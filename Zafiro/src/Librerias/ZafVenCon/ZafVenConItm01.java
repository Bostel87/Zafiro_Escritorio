/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 * v0.1
 */
package Librerias.ZafVenCon;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;

/**
 * Esta clase se utiliza para filtrar por "Item".
 * Está compuesta por un JLabel, un JTextField y un JButton.
 * En el JLabel se muestra el texto "Item:", el "JTextField" está vacío inicialmente y cambia a "Filtro aplicado: Click en el botón para ver el filtro" cuando se aplica un filtro.
 * Al dar click en el botón se llama a un JDialog donde se presentan las opciones de filtrado de items.
 * @author elino
 */
public class ZafVenConItm01 extends javax.swing.JPanel
{
    //Variables:
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafVenConItm01_01 objVenConItm01_01;                //JDialog para filtrar por código alterno del item.
    private String strAliSQL;                                   //Alias de la sentencia SQL.
    private String strConSQLItm;                                //Condiciones SQL.
    private javax.swing.JRadioButton optFil;                    //Botón de radio a seleccionar cuando se aplica un filtro.

    /**
     * Este constructor crea una instancia de la clase ZafVenConItm01.
     * @param objParSis El objeto ZafParSis.
     * @param strAliSQL El alias utilizado en la sentencia SQL. El alias debe incluir el punto. Ejemplo: "a1.", "x.", "t1.".
     * @param optFil El JRadioButton que se debe seleccionar cuando se aplique un filtro de item.
     * Si no se debe seleccionar ningún botón de radio se debe enviar <I>null</I>.
     */
    public ZafVenConItm01(ZafParSis objParSis, String strAliSQL, javax.swing.JRadioButton optFil)
    {
        try
        {
            initComponents();
            //Inicializar objetos.
            objUti=new ZafUtil();
            this.objParSis=(ZafParSis)objParSis.clone();
            this.strAliSQL=strAliSQL;
            this.strConSQLItm="";
            //Asignar el JRadioButton sólo cuando se lo haya especificado.
            if (optFil instanceof javax.swing.JRadioButton)
            {
                this.optFil=optFil;
            }
            configurarFrm();
        }
        catch (CloneNotSupportedException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblFilItm = new javax.swing.JLabel();
        txtFilItm = new javax.swing.JTextField();
        butFilItm = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        lblFilItm.setText("Item:");
        lblFilItm.setToolTipText("Item");
        lblFilItm.setPreferredSize(new java.awt.Dimension(120, 14));
        add(lblFilItm, java.awt.BorderLayout.LINE_START);
        add(txtFilItm, java.awt.BorderLayout.CENTER);

        butFilItm.setText("...");
        butFilItm.setPreferredSize(new java.awt.Dimension(20, 20));
        butFilItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFilItmActionPerformed(evt);
            }
        });
        add(butFilItm, java.awt.BorderLayout.LINE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void butFilItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFilItmActionPerformed
        objVenConItm01_01.setVisible(true);
         if (objVenConItm01_01.getSelectedButton()==ZafVenConItm01_01.INT_BUT_ACE)
         {
             strConSQLItm=objVenConItm01_01.getCondicionesSQL();
             if (strConSQLItm.equals(""))
             {
                 txtFilItm.setText("");
             }
             else
             {
                 txtFilItm.setText("Filtro aplicado: Click en el botón para ver el filtro");
                 //Seleccionar el JRadioButton sólo cuando se lo haya especificado.
                 if (optFil instanceof javax.swing.JRadioButton)
                 {
                     optFil.setSelected(true);
                 }
             }
         }
    }//GEN-LAST:event_butFilItmActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butFilItm;
    private javax.swing.JLabel lblFilItm;
    private javax.swing.JTextField txtFilItm;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objVenConItm01_01=new ZafVenConItm01_01(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, strAliSQL);
            //Configurar objetos.
            txtFilItm.setEditable(false);
            txtFilItm.setForeground(java.awt.Color.BLUE);
            txtFilItm.setBackground(java.awt.Color.WHITE);
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función determina si el usuario ha utilizado alguno de los siguientes filtros: 
     * "Desde-Hasta", "Termina con" o los filtros adicionales "Código alterno 1", "Nombre del item".
     * @return true: Si se ha aplicado alguna condición.
     * <BR>false: En el caso contrario.
     */
    public boolean isCondicionAplicada()
    {
        if (txtFilItm.getText().length()>0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    /**
     * Esta función obtiene todas las condiciones SQL. Es decir, se concatenan las condiciones 
     * "Desde-Hasta", "Termina con" y los filtros adicionales "Código alterno 1", "Nombre del item".
     * @return La cadena que contiene las condiciones SQL a utilizar.
     */
    public String getCondicionesSQL()
    {
        return strConSQLItm;
    }
    
    /**
     * Esta función borra todos los filtros del item.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    public boolean limpiar()
    {
        txtFilItm.setText("");
        return objVenConItm01_01.limpiar();
    }
    
}
