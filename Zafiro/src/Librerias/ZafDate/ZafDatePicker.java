/*
 * zafDatePicker.java
 * Version : v0.5
 * Created on 29 de julio de 2004, 14:19
 */
package Librerias.ZafDate;
import java.awt.event.*; 

/**
 * Crea un DatePicker, con el formato dd/mm/aaaa.
 */
public class ZafDatePicker extends javax.swing.JPanel 
{
    private ZafCalendario Calendario;    
    private String strFormatoDatePicker  ; //  "d/m/y"
    private String strFormatoDateText    ; //  "##/##/####"
    private ZafDatePicker dtpThis ; 
    private javax.swing.JFormattedTextField fmtTxtFecha;   
    
    /**
     * Construye un nuevo ZafDatePicker
     * @param strFecha Un string con la fecha que queremos presentar de manera predeterminada en el DatePicker.
     * <BR>Por ejemplo: zafDatePicker objDatePick = new zafDatePicker("10/12/2004");
     * <BR>En el ejemplo estamos enviando la fecha predeterminada 10 de Dic. del 2004
     * @param JFrmPrincipal Un JFrame que representa el JFrame que contendra al datepicker, para el que el datepicker actúe de manera modal
     * @param strFormatDate Formato con el que queremos presentar la fecha en el DatePicker
     */
    public ZafDatePicker(String strFecha, javax.swing.JFrame JFrmPrincipal, String strFormatDate){
        strFormatoDatePicker = strFormatDate.toLowerCase();
        strFormatoDateText = FormatoFecha();
        construyeTodo(JFrmPrincipal);
        dtpThis = this;
        setText(strFecha);
    }
     
    public ZafDatePicker(String strFormatDate){
        strFormatoDatePicker = strFormatDate.toLowerCase();
        strFormatoDateText = FormatoFecha();
        dtpThis = this;
    }
    
    /**
     * Construye un nuevo zafDatePicker con los parametros (dia , mes, año)
     * @param intDay Un Entero que representa el dia predeterminado en el que se va a trabajar
     * @param intMonth Un Entero que representa el mes predeterminado en el que se va a trabajar
     * <BR> Puede contener del 1 a 12 (enero a diciembre)
     * @param intYear Un Entero que representa el anio predeterminado en el que se va a trabajar
     * @param JFrmPrincipal Un JFrame que representa el JFrame que contendra al datepicker,
     * para el que el datepicker actuara de manera modal.
     * @param strFormatDate 
     */
    public ZafDatePicker(int intDay, int intMonth, int intYear, javax.swing.JFrame JFrmPrincipal, String strFormatDate){
        strFormatoDatePicker = strFormatDate.toLowerCase();
        strFormatoDateText = FormatoFecha();
        construyeTodo(JFrmPrincipal);
        setText(intDay, intMonth, intYear);
    }
     
    /**
     * Construye un DatePicker que presenta la fecha actual del sistema
     * @param JFrmPrincipal Un JFrame que representa el JFrame que contendra al datepicker,
     * para el que el datepicker actuara de manera modal.
     * @param strFormatDate 
     */
     public ZafDatePicker(javax.swing.JFrame JFrmPrincipal, String strFormatDate) {
        strFormatoDatePicker = strFormatDate.toLowerCase();
        strFormatoDateText = FormatoFecha();
        construyeTodo(JFrmPrincipal);
        setHoy();
    }

    /**
     * Construye un DatePicker que presenta la fecha actual del sistema
     * @param FramePrincipal Un Frame que representa el Frame que contendra al datepicker,
     * para el que el datepicker actuara de manera modal
     * @param strFormatDate 
     */
    public ZafDatePicker(java.awt.Frame FramePrincipal, String strFormatDate) {
        strFormatoDatePicker = strFormatDate.toLowerCase();
        strFormatoDateText = FormatoFecha();
        construyeTodo(FramePrincipal);
        setHoy();
    }

  
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        butVerCalendar = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        setBorder(new javax.swing.border.EtchedBorder());
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        butVerCalendar.setFont(new java.awt.Font("Arial", 0, 11));
        butVerCalendar.setText("V");
        butVerCalendar.setBorder(new javax.swing.border.EtchedBorder());
        butVerCalendar.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        butVerCalendar.setMaximumSize(new java.awt.Dimension(25, 23));
        butVerCalendar.setPreferredSize(new java.awt.Dimension(16, 10));
        butVerCalendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butVerCalendarActionPerformed(evt);
            }
        });

        add(butVerCalendar, java.awt.BorderLayout.EAST);

    }//GEN-END:initComponents

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        fmtTxtFecha.requestFocus();
    }//GEN-LAST:event_formFocusGained

    private void butVerCalendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butVerCalendarActionPerformed
        //Calendario.setLocation(butVerCalendar.getLocation());
        Calendario.setLocationRelativeTo(butVerCalendar);
        //java.util.Calendar objCalend =  new java.util.Calendar();
        int fec[] = getFecha(fmtTxtFecha.getText()) ;  
        if(fec != null)
            Calendario.setFecha(fec[0],fec[1],fec[2]);   
        Calendario.show();
        this.setText(Calendario.Dia(),Calendario.Mes(),Calendario.Anio());
    }//GEN-LAST:event_butVerCalendarActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butVerCalendar;
    // End of variables declaration//GEN-END:variables
     

    /**
     * Construye toda la fecha en un JFrame
     * @param JFrmPadre 
     */
    private void construyeTodo(javax.swing.JFrame JFrmPadre)
    {
        fmtTxtFecha = maskedFormattedTextField(strFormatoDateText,true);	
        fmtTxtFecha.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                if(!isFecha()){
                    setText(""); //Cuando no es una fecha válida, setea en "".
                }
            }
        });                        
        fmtTxtFecha.setBorder(null);
        fmtTxtFecha.setFont(new java.awt.Font("MS Sans Serif", 1, 11));
        fmtTxtFecha.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        //fmtTxtFecha.addPropertyChangeListener("value",  );
        initComponents();
        add(fmtTxtFecha, java.awt.BorderLayout.CENTER);
        Calendario = new ZafCalendario(JFrmPadre, true);
    }
    
    /**
     * Construye toda la fecha en un Frame
     * @param FrmPadre 
     */
    private void construyeTodo(java.awt.Frame FrmPadre)
    {
        fmtTxtFecha = maskedFormattedTextField(strFormatoDateText,true);	
        fmtTxtFecha.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                if(!isFecha()){
                    setText(""); //Cuando no es una fecha válida, setea en "".
                }
            }
        });                        
        fmtTxtFecha.setBorder(null);
        fmtTxtFecha.setFont(new java.awt.Font("MS Sans Serif", 1, 11));
        fmtTxtFecha.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        //fmtTxtFecha.addPropertyChangeListener("value",  );
        initComponents();
        add(fmtTxtFecha, java.awt.BorderLayout.CENTER);
        Calendario = new ZafCalendario(FrmPadre, true);
    }    
    
    /**
     * Recibe los siguientes caracteres para formatear el ingreso de datos.
     * @param mask Ver referencias en java.sun.com => Class MaskFormatter
     * <BR>Por ejemplo:
     *          <CENTER>
     *          <TABLE BORDER=1>
     *              <TR><TD><I>Character</I></TD><TD><I>Description</I></TD></TR>
     *              <TR><TD>#</TD><TD>Un numero valido</TD></TR>
     *              <TR><TD>'</TD><TD>Un caracter especial de escape</TD></TR>
     *              <TR><TD>U</TD><TD>Un caracter que se convertira a mayuscula uppercase</TD></TR>
     *              <TR><TD>L</TD><TD>Un caracter que se convertira a minuscula lowercase</TD></TR>
     *              <TR><TD>A</TD><TD>Algun caracter o numero</TD></TR>
     *              <TR><TD>?</TD><TD>Un caracter</TD></TR>
     *              <TR><TD>*</TD><TD>Cualquier cosa: Letra, numero, chars especiales</TD></TR>
     *              <TR><TD>H</TD><TD>Un caracter hexadecimal (0-9, a-f or A-F)</TD></TR>
     *          </TABLE>
     *          </CENTER>
     * <BR>
     * @param valueContainsLiteralChars
     * @return 
     */
    private static javax.swing.JFormattedTextField maskedFormattedTextField(String mask, boolean valueContainsLiteralChars)
    {
        javax.swing.JFormattedTextField field = null;
        try {
            javax.swing.text.MaskFormatter mf = new javax.swing.text.MaskFormatter(mask);
            mf.setValueContainsLiteralCharacters(valueContainsLiteralChars);
            field = field = new javax.swing.JFormattedTextField(mf);
        }
        catch (Exception e) {
            field = new javax.swing.JFormattedTextField();
        }
        return field;
    }    
    
    /**
     * Función que verifica si la fecha ingresada es una fecha válida.
     * @return true: Si es una fecha válida
     * <BR> Caso contrario, no es fecha válida.
     */
    public boolean isFecha()   
    {
        int fec[] = getFecha(fmtTxtFecha.getText()) ;  
        if(fec == null)
            return false;   

        /* Crea una instancia de calendario para la fecha. */
        java.util.Calendar CalVal =  java.util.Calendar.getInstance();

        /* Si el año < 1900 no es una fecha válida. Se retorna false y se sale de la función.*/
        if(fec[2]<1900)
            return false;   
        CalVal.set(java.util.Calendar.YEAR,fec[2]);

        /* Si el mes no está dentro de 1 y 12 no es una fecha válida. Se retorna false y se sale de la función.*/
        if(fec[1]<1 || fec[1]>12)
            return false;   
        CalVal.set(java.util.Calendar.MONTH,fec[1]-1);

        /* Si el día no está entre 1 y el máximo definido para ese mes. Se retorna false y se sale de la función. */
        if(fec[0]<1 || fec[0] > CalVal.getActualMaximum(java.util.Calendar.DAY_OF_MONTH))
            return false;
        
        return true;
    }
    
    /**
     * Función obtiene el formato de fecha, según el formato indicado.
     * @return strFormatoListo
     */
    private String FormatoFecha()  
    {
        String strFormatoListo="";
        String strDelimitador;
        try{
            strDelimitador=(strFormatoDatePicker.contains("-") ?"-":"/");
            java.util.StringTokenizer MiToken = new java.util.StringTokenizer(strFormatoDatePicker, strDelimitador);
            for(int i = 0 ; MiToken.hasMoreTokens(); i++ )
            { 
                String strLetra = MiToken.nextToken().toString();
                if(strLetra.equals("d") )
                    strFormatoListo+="##"+strDelimitador+"";
                if(strLetra.equals("m") )    
                    strFormatoListo+="##"+strDelimitador+"";
                if(strLetra.equals("y") )    
                    strFormatoListo+="####"+strDelimitador+"";
            }
        }
        catch (Exception e) {
            throw new IllegalArgumentException("Fecha no tiene un formato adecuado!!!");
        }
        return strFormatoListo.substring(0,10);
    }    

    /**
     * 
     * Función que obtiene un arreglo de enteros que contiene la fecha en dia,mes,anio
     * @param Fecha Recibe un string con una fecha válida, en formato "dd/mm/aaaa".
     * @return Un arreglo de enteros con la fecha: intArray[0]=dia , intArray[1]=mes , intArray[2]=anio
     * <BR>Por ejemplo:
     *          <CENTER>
     *          <pre>
     *               int fecha[0] = dia
     *               int fecha[1] = Mes
     *               int fecha[2] = Anio
     *          </pre>
     *          </CENTER>
     */
    public int [] getFecha(String fecha)
    {        
        int arrFec[] = new int[3];  
        String strDelimitador; 
        try{
            strDelimitador=(strFormatoDatePicker.contains("-") ?"-":"/");

            java.util.StringTokenizer MiToken = new java.util.StringTokenizer(fecha, strDelimitador);
            char formato[] = strFormatoDatePicker.replaceAll(strDelimitador, "").toCharArray();

            for(int i = 0 ; MiToken.hasMoreTokens(); i++ ){ 
                String  strDate = MiToken.nextToken().toString();
                if(strDate.trim().equals("")){
                   arrFec = null ;
                   return arrFec;
                }
                switch (formato[i]){
                    case 'd':  arrFec[0] = Integer.parseInt(strDate.trim());   break;
                    case 'm':  arrFec[1] = Integer.parseInt(strDate.trim());   break;
                    case 'y':  arrFec[2] = Integer.parseInt(strDate.trim());   break;
                }
            }
        }
        catch (Exception e) { 
            throw new IllegalArgumentException("Fecha no tiene un formato adecuado!!!");
        }            
        return arrFec;
    }
    
    /**
     * Función obtiene un string con la fecha que está en el objeto, pero con el formato pasado por parámetro.
     * @param strDelimitador Un string que contiene el caracter que separa los días del mes y año.
     * <BR>Es importante que el caracter separador sea el mismo que utiliza el formato que se envia.
     * <BR>Por ejemplo: 
     *          <CENTER>
     *          <pre>
     *               "/" es separador de "d/m/y"
     *               "-" es separador de "d-m-y"
     *          </pre>
     *          </CENTER>
     * @param strDateFormat Un string que contiene el el formato en que se devolvera la fecha.
     * <BR>Es importante que el caracter separador sea el mismo que utiliza el formato que se envia.
     * <BR>Por ejemplo:
     *          <CENTER>
     *          <pre>
     *               "d/m/y" o "y/m/d" 
     *               "d-m-y" o "y/m/d"
     *          </pre>
     *          </CENTER>
     * @return String con la fecha formateada
     */
    public String getFecha(String strDelimitador, String strDateFormat)
    {
        String strFecha="", strDia, strMes, strAnio ;
        int intFec[] = getFecha(this.getText()) ;
        strDia=(intFec[0]<10)?"0"+intFec[0]:""+intFec[0];
        strMes=(intFec[1]<10)?"0"+intFec[1]:""+intFec[1];
        strAnio="" + intFec[2];
        
        java.util.StringTokenizer MiToken = new java.util.StringTokenizer(strDateFormat, strDelimitador);
        
        for(int i = 0 ; MiToken.hasMoreTokens(); i++ ){ 
            String strLetra = MiToken.nextToken().toString();
            if(strLetra.equals("d"))
                strFecha+=strDia + strDelimitador;
            if(strLetra.equals("m"))    
                strFecha+=strMes + strDelimitador;
            if(strLetra.equals("y"))    
                strFecha+=strAnio + strDelimitador;
        }        
        return strFecha;
    }
    
    /**
     * Asigna una fecha enviada por parametro
     * @param txtFecha Un String que tiene la fecha que se va a asignar en formato "dd/mm/aaaa"
     * <BR>Caso contrario se asignara null.
     */    
    public void setText(String txtFecha){
        fmtTxtFecha.setText(txtFecha);
    }
    
    /**
     * Asigna una fecha enviada por parámetro
     * @param Dia Un entero que representa el dia que se asignara al datepicker
     * @param Mes Un entero que representa el mes que se asignara al datepicker
     * @param Anio Un entero que representa el anio que se asignara al datepicker
     */    
    public void setText(int Dia, int Mes, int Anio)
    {
        String strFecha = "", strDia, strMes, strAnio;
        strDia=(Dia<10)?"0"+Dia:""+Dia;
        strMes=(Mes<10)?"0"+Mes:""+Mes;
        strAnio="" + Anio;
        
        String strDelimitador=(strFormatoDatePicker.contains("-") ?"-":"/");
        java.util.StringTokenizer MiToken = new java.util.StringTokenizer(strFormatoDatePicker, strDelimitador);
        
        for(int i = 0 ; MiToken.hasMoreTokens(); i++ ){ 
            String  strLetra = MiToken.nextToken().toString();
            if(strLetra.equals("d"))
                strFecha+=strDia + strDelimitador;
            if(strLetra.equals("m"))    
                strFecha+=strMes + strDelimitador;
            if(strLetra.equals("y"))    
                strFecha+=strAnio + strDelimitador;
        }
        //strFecha= strDia + strDelimitador + strMes + strDelimitador + strAnio;
        fmtTxtFecha.setText(strFecha.substring(0,10));
    }
    
    public void selectAll(){
        fmtTxtFecha.selectAll();
    }

    /**
     * Asigna el anio que tendra el DatePicker
     * @param Anio un int con el anio que se asignara al DatePicker
     */    
    public void setAnio(int Anio){
        int FecAct [] = getFecha(fmtTxtFecha.getText());
        this.setText(FecAct[0], FecAct[1], Anio);
    }
    
    /**
     * Asigna el Mes que tendra el DatePicker
     * @param Mes un int con el mes que se asignara al DatePicker
     */    
    public void setMes(int Mes){
        int FecAct [] = getFecha(fmtTxtFecha.getText());
        this.setText(FecAct[0], Mes,FecAct[2]);
    }
    
    /**
     * Asigna el Dia que tendra el DatePicker
     * @param Dia un int con el Dia que se asignara al DatePicker
     */    
    public void setDia(int Dia){
        int FecAct [] = getFecha(fmtTxtFecha.getText());
        this.setText( Dia, FecAct[1], FecAct[2]); 
    }
    
    /**
     * Obtiene el texto que representa la fecha que tiene el datepicker
     * @return un String que contiene la fecha en formato "dd/mm/aaaa"
     */    
    public String getText(){
        return fmtTxtFecha.getText().toString();
    }
    
    /**
     * Agrega un listener a la caja de texto
     * @param l 
     */
    public synchronized void addActionListener(ActionListener l) {
        fmtTxtFecha.addActionListener(l);
    }

    /**
     * Asigna la fecha actual al DatePicker
     */
    public void setHoy(){
        java.util.Calendar today;
        today = java.util.Calendar.getInstance();
        setText(today.get(java.util.Calendar.DAY_OF_MONTH),today.get(java.util.Calendar.MONTH)+1, today.get(java.util.Calendar.YEAR));
    }
    
    public void setEnabled(boolean blnEnabled){
        butVerCalendar.setEnabled(blnEnabled);
        fmtTxtFecha.setEnabled(blnEnabled);
    }  
    
    
    
}
