/*
 * ZafAut_03.java
 *
 * Created on 26 de marzo de 2006, 05:07 PM
 */

package Librerias.ZafAut;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblTot.ZafTblTot;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;

/**
 *
 * @author  Eddye Lino
 */
public class ZafAut_01 extends javax.swing.JDialog
{
    //Constantes: Columnas del JTable:
    final int INT_TBL_DAT_LIN=0;                        //Línea
    final int INT_TBL_DAT_COD_ITM=1;                    //Código del item (Sistema).
    final int INT_TBL_DAT_COD_ALT=2;                    //Código alterno.
    final int INT_TBL_DAT_NOM_ITM=3;                    //Nombre del item.
    final int INT_TBL_DAT_CAN=4;                        //Cantidad.
    final int INT_TBL_DAT_PRE_UNI=5;                    //Precio unitario.
    final int INT_TBL_DAT_POR_DES=6;                    //Porcentaje de descuento.
    final int INT_TBL_DAT_PRE_VEN=7;                    //Precio de venta.
    final int INT_TBL_DAT_TOT_FIL=8;                    //Total de la fila
    final int INT_TBL_DAT_COS_UNI=9;                    //Costo unitario.
    final int INT_TBL_DAT_PRE_LIS=10;                   //Precio de lista.
    final int INT_TBL_DAT_PRE_COM=11;                   //Precio de lista.
    final int INT_TBL_DAT_PRE_MIN=12;                   //Mínimo precio unitario de venta.
    final int INT_TBL_DAT_DEF_VAL=13;                   //Deficit en valores.
    final int INT_TBL_DAT_DEF_POR=14;                   //Deficit en porcentajes.
    final int INT_TBL_DAT_GAN_UNI_VAL=15;               //Ganancia unitaria en valores.
    final int INT_TBL_DAT_GAN_TOT_VAL=16;               //Ganancia total en valores.
    final int INT_TBL_DAT_MAR_UTI=17;                   //Margen de utilidad.
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblFilCab objTblFilCab;
    private ZafTblMod objTblMod;
    private ZafThreadGUI objThrGUI;
    private ZafTblCelRenLbl objTblCelRenLbl;            //Render: Presentar JLabel en JTable.
    private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMenú en JTable.
    private ZafTblBus objTblBus;                        //Editor de búsqueda.
    private ZafTblTot objTblTot;                        //JTable de totales.
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg;
    private boolean blnCon;                             //true: Continua la ejecución del hilo.
    //Variables de la clase.
    private int intCodEmp;                              //Código de la empresa.
    private int intCodLoc;                              //Código del local.
    private int intCodTipDoc;                           //Código del tipo de documento.
    private int intCodDoc;                              //Código del docuemnto.
    
    /**
     * Este constructor crea una instancia de la clase ZafAut_03.
     * @param parametros El ArrayList que contiene los parámetros que necesita el JDialog.
     * Los parámetros que contiene el ArrayList son los siguientes:
     * <UL>
     * <LI>0: El objeto Frame padre.
     * <LI>1: El objeto ZafParSis.
     * <LI>2: Un <I>int</I> que contiene el código de la empresa.
     * <LI>3: Un <I>int</I> que contiene el código del local.
     * <LI>4: Un <I>int</I> que contiene el código del tipo de documento.
     * <LI>5: Un <I>int</I> que contiene el código del documento.
     * </UL>
     */
    public ZafAut_01(java.util.ArrayList parametros)
    {
        super((java.awt.Frame)parametros.get(0), true);
        initComponents();
        //Inicializar objetos.
        objParSis=(ZafParSis)parametros.get(1);
        intCodEmp=Integer.parseInt(parametros.get(2).toString());
        intCodLoc=Integer.parseInt(parametros.get(3).toString());
        if (parametros.get(4)!=null)
            intCodTipDoc=Integer.parseInt(parametros.get(4).toString());
        intCodDoc=Integer.parseInt(parametros.get(5).toString());
        if (!configurarFrm())
            exitForm();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGen = new javax.swing.JPanel();
        panGenCab = new javax.swing.JPanel();
        txtMaxDes = new javax.swing.JTextField();
        lblMaxDes = new javax.swing.JLabel();
        lblMarUti = new javax.swing.JLabel();
        txtMarUti = new javax.swing.JTextField();
        panGenDet = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        spnTot = new javax.swing.JScrollPane();
        tblTot = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCan = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("T\u00edtulo de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panGen.setLayout(new java.awt.BorderLayout());

        panGenCab.setLayout(null);

        panGenCab.setPreferredSize(new java.awt.Dimension(10, 24));
        txtMaxDes.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGenCab.add(txtMaxDes);
        txtMaxDes.setBounds(100, 4, 100, 20);

        lblMaxDes.setText("M\u00e1ximo descuento:");
        lblMaxDes.setToolTipText("M\u00e1ximo porcentaje de descuento");
        panGenCab.add(lblMaxDes);
        lblMaxDes.setBounds(0, 4, 100, 20);

        lblMarUti.setText("Margen de utilidad:");
        lblMarUti.setToolTipText("Margen de utilidad");
        panGenCab.add(lblMarUti);
        lblMarUti.setBounds(340, 4, 100, 20);

        txtMarUti.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGenCab.add(txtMarUti);
        txtMarUti.setBounds(440, 4, 100, 20);

        panGen.add(panGenCab, java.awt.BorderLayout.NORTH);

        panGenDet.setLayout(new java.awt.BorderLayout(0, 1));

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnDat.setViewportView(tblDat);

        panGenDet.add(spnDat, java.awt.BorderLayout.CENTER);

        spnTot.setPreferredSize(new java.awt.Dimension(454, 18));
        tblTot.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnTot.setViewportView(tblTot);

        panGenDet.add(spnTot, java.awt.BorderLayout.SOUTH);

        panGen.add(panGenDet, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panGen);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });

        panBot.add(butCon);

        butCan.setText("Cancelar");
        butCan.setToolTipText("Cierra el cuadro de dialogo.");
        butCan.setPreferredSize(new java.awt.Dimension(92, 25));
        butCan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCanActionPerformed(evt);
            }
        });

        panBot.add(butCan);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setLayout(new java.awt.BorderLayout());

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        jPanel6.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        pgrSis.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1020)/2, (screenSize.height-450)/2, 1020, 450);
    }//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        butConActionPerformed(null);
    }//GEN-LAST:event_formWindowOpened

    private void butCanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCanActionPerformed
        exitForm();
    }//GEN-LAST:event_butCanActionPerformed

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acción de acuerdo a la etiqueta del botón ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar"))
        {
            blnCon=true;
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
        }
        else
        {
            blnCon=false;
        }
    }//GEN-LAST:event_butConActionPerformed
    
    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCan;
    private javax.swing.JButton butCon;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblMarUti;
    private javax.swing.JLabel lblMaxDes;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGen;
    private javax.swing.JPanel panGenCab;
    private javax.swing.JPanel panGenDet;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JScrollPane spnTot;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblTot;
    private javax.swing.JTextField txtMarUti;
    private javax.swing.JTextField txtMaxDes;
    // End of variables declaration//GEN-END:variables
    
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux="Análisis de precios de la cotización";
            this.setTitle(strAux + " v0.5");
            lblTit.setText(strAux);
            //Configurar objetos.
            txtMaxDes.setEditable(false);
            txtMarUti.setEditable(false);
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(18);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_ITM,"Cód.Itm.");
            vecCab.add(INT_TBL_DAT_COD_ALT,"Cód.Alt.");
            vecCab.add(INT_TBL_DAT_NOM_ITM,"Nombre");
            vecCab.add(INT_TBL_DAT_CAN,"Cantidad");
            vecCab.add(INT_TBL_DAT_PRE_UNI,"Pre.Uni.");
            vecCab.add(INT_TBL_DAT_POR_DES,"% Des.");
            vecCab.add(INT_TBL_DAT_PRE_VEN,"Pre.Vta.");
            vecCab.add(INT_TBL_DAT_TOT_FIL,"Total");
            vecCab.add(INT_TBL_DAT_COS_UNI,"Cos.Uni.");
            vecCab.add(INT_TBL_DAT_PRE_LIS,"Pre.Lis.");
            vecCab.add(INT_TBL_DAT_PRE_COM,"Pre.Com.");
            vecCab.add(INT_TBL_DAT_PRE_MIN,"Min.Pre.");
            vecCab.add(INT_TBL_DAT_DEF_VAL,"Res.");
            vecCab.add(INT_TBL_DAT_DEF_POR,"Res.(%)");
            vecCab.add(INT_TBL_DAT_GAN_UNI_VAL,"Gan.Uni.Val");
            vecCab.add(INT_TBL_DAT_GAN_TOT_VAL,"Gan.Tot.Val.");
            vecCab.add(INT_TBL_DAT_MAR_UTI,"Margen");
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM).setPreferredWidth(55);
            tcmAux.getColumn(INT_TBL_DAT_COD_ALT).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_NOM_ITM).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_CAN).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_PRE_UNI).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_POR_DES).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_PRE_VEN).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_TOT_FIL).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_COS_UNI).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_PRE_LIS).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_PRE_COM).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_PRE_MIN).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DEF_VAL).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DEF_POR).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_GAN_UNI_VAL).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_GAN_TOT_VAL).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_MAR_UTI).setPreferredWidth(60);
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
//            tcmAux.getColumn(INT_TBL_DAT_BUT_MOT).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Ocultar columnas del sistema.
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM).setWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM).setMaxWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM).setMinWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM).setPreferredWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM).setResizable(false);
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Editor de la tabla.
//            objTblEdi=new ZafTblEdi(tblDat);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);
            //Configurar JTable: Editor de búsqueda.
            objTblBus=new ZafTblBus(tblDat);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_CAN).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_PRE_UNI).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_POR_DES).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_TOT_FIL).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_COS_UNI).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_PRE_LIS).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_PRE_COM).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_DEF_VAL).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_DEF_POR).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_GAN_UNI_VAL).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_GAN_TOT_VAL).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_MAR_UTI).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            objTblCelRenLbl.setBackground(new java.awt.Color(255,207,159));
            tcmAux.getColumn(INT_TBL_DAT_PRE_VEN).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_PRE_MIN).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            //Configurar JTable: Establecer relación entre el JTable de datos y JTable de totales.
            int intCol[]={INT_TBL_DAT_TOT_FIL, INT_TBL_DAT_GAN_UNI_VAL, INT_TBL_DAT_GAN_TOT_VAL};
            objTblTot=new ZafTblTot(spnDat, spnTot, tblDat, tblTot, intCol);
            //Configurar JTable: Modo de operación del JTable.
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg()
    {
        int intNumTotReg, i;
        double dblMaxPorDes, dblMarUti, dblCan, dblPreUni, dblPorDes, dblPreUniVta, dblCosUni, dblPreLis, dblPreCom, dblMinPrePer;
        boolean blnRes=true;
        try
        {
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Obtener los datos necesarios del cliente.
                strSQL="";
                strSQL+="SELECT a1.nd_maxDes, a1.nd_marUti";
                strSQL+=" FROM tbm_cli AS a1";
                strSQL+=" WHERE a1.co_emp=" + intCodEmp;
                strSQL+=" AND a1.co_cli=(";
                strSQL+=" SELECT co_cli";
                strSQL+=" FROM tbm_cabCotVen";
                strSQL+=" WHERE co_emp=" + intCodEmp;
                strSQL+=" AND co_loc=" + intCodLoc;
                strSQL+=" AND co_cot=" + intCodDoc;
                strSQL+=" )";
                rst=stm.executeQuery(strSQL);
                if (rst.next())
                {
                    dblMaxPorDes=rst.getDouble("nd_maxDes");
                    dblMarUti=rst.getDouble("nd_marUti");
                    txtMaxDes.setText("" + dblMaxPorDes);
                    txtMarUti.setText("" + dblMarUti);
                }
                else
                {
                    dblMaxPorDes=0;
                    dblMarUti=0;
                }
                rst.close();
                rst=null;
                //Obtener el número total de registros.
                strSQL="";
                strSQL+="SELECT COUNT(*)";
                strSQL+=" FROM (";
                strSQL+=" SELECT a1.co_itm, a1.tx_codAlt, a1.tx_nomItm, a1.nd_can, a1.nd_preUni, a1.nd_porDes, a1.nd_preCom AS nd_cosUni, a3.nd_preVta1";
                strSQL+=" FROM tbm_detCotVen AS a1";
                strSQL+=" INNER JOIN tbm_equInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm)";
                strSQL+=" INNER JOIN tbm_inv AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_itm=a3.co_itm)";
                strSQL+=" WHERE a1.co_emp=" + intCodEmp;
                strSQL+=" AND a1.co_loc=" + intCodLoc;
                strSQL+=" AND a1.co_cot=" + intCodDoc;
                strSQL+=" ) AS b1";
                intNumTotReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intNumTotReg==-1)
                    return false;
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT a1.co_itm, a1.tx_codAlt, a1.tx_nomItm, a1.nd_can, a1.nd_preUni, a1.nd_porDes, a3.nd_cosUni, a4.nd_preVta1, a1.nd_preCom*(1-a1.nd_porDesPreCom/100) AS nd_preCom";
                strSQL+=" FROM tbm_detCotVen AS a1";
                strSQL+=" INNER JOIN tbm_equInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm)";
                strSQL+=" INNER JOIN (";
                strSQL+=" SELECT b2.co_itmMae, b1.nd_cosUni";
                strSQL+=" FROM tbm_inv AS b1";
                strSQL+=" INNER JOIN tbm_equInv AS b2 ON (b1.co_emp=b2.co_emp AND b1.co_itm=b2.co_itm)";
                strSQL+=" WHERE b1.co_emp=" + objParSis.getCodigoEmpresaGrupo();
                strSQL+=" ) AS a3 ON (a2.co_itmMae=a3.co_itmMae)";
                strSQL+=" INNER JOIN tbm_inv AS a4 ON (a1.co_emp=a4.co_emp AND a1.co_itm=a4.co_itm)";
                strSQL+=" WHERE a1.co_emp=" + intCodEmp;
                strSQL+=" AND a1.co_loc=" + intCodLoc;
                strSQL+=" AND a1.co_cot=" + intCodDoc;
                strSQL+=" ORDER BY a1.co_reg";
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;
                while (rst.next())
                {
                    if (blnCon)
                    {
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_COD_ITM,rst.getString("co_itm"));
                        vecReg.add(INT_TBL_DAT_COD_ALT,rst.getString("tx_codAlt"));
                        vecReg.add(INT_TBL_DAT_NOM_ITM,rst.getString("tx_nomItm"));
                        dblCan=rst.getDouble("nd_can");
                        vecReg.add(INT_TBL_DAT_CAN,"" + dblCan);
                        dblPreUni=rst.getDouble("nd_preUni");
                        vecReg.add(INT_TBL_DAT_PRE_UNI,"" + dblPreUni);
                        dblPorDes=rst.getDouble("nd_porDes");
                        vecReg.add(INT_TBL_DAT_POR_DES,"" + dblPorDes);
                        dblPreUniVta=dblPreUni*(1-dblPorDes/100);
                        vecReg.add(INT_TBL_DAT_PRE_VEN,"" + dblPreUniVta);
                        vecReg.add(INT_TBL_DAT_TOT_FIL,"" + (dblCan*dblPreUniVta));
                        dblCosUni=rst.getDouble("nd_cosUni");
                        vecReg.add(INT_TBL_DAT_COS_UNI,"" + dblCosUni);
                        dblPreLis=rst.getDouble("nd_preVta1");
                        vecReg.add(INT_TBL_DAT_PRE_LIS,"" + dblPreLis);
                        dblPreCom=rst.getDouble("nd_preCom");
                        vecReg.add(INT_TBL_DAT_PRE_COM,"" + dblPreCom);
//                        if (dblPreLis>0)
//                            dblMinPrePer=dblPreLis*(1-dblMaxPorDes/100);
//                        else if (dblCosUni>0)
//                            dblMinPrePer=dblCosUni*(1+dblMarUti/100);
//                        else
//                        {
//                            dblCosUni=dblPreCom;
//                            dblMinPrePer=dblCosUni*(1+dblMarUti/100);
//                        }
                        if (dblPreCom>0)
                        {
                            dblCosUni=dblPreCom;
                            dblMinPrePer=dblCosUni*(1+dblMarUti/100);
                        }
                        else if (dblPreLis>0)
                            dblMinPrePer=dblPreLis*(1-dblMaxPorDes/100);
                        else
                            dblMinPrePer=dblCosUni*(1+dblMarUti/100);
                        vecReg.add(INT_TBL_DAT_PRE_MIN,"" + dblMinPrePer);
                        vecReg.add(INT_TBL_DAT_DEF_VAL,"" + (dblPreUniVta-dblMinPrePer));
                        vecReg.add(INT_TBL_DAT_DEF_POR,"" + (((dblPreUniVta-dblMinPrePer)/dblPreUniVta)*100));
                        vecReg.add(INT_TBL_DAT_GAN_UNI_VAL,"" + (dblPreUniVta-dblCosUni));
                        vecReg.add(INT_TBL_DAT_GAN_TOT_VAL,"" + (dblCan*(dblPreUniVta-dblCosUni)));
                        vecReg.add(INT_TBL_DAT_MAR_UTI,"" + (((dblPreUniVta-dblCosUni)/dblPreUniVta)*100));
                        vecDat.add(vecReg);
                        i++;
                        pgrSis.setValue(i);
                    }
                    else
                    {
                        break;
                    }
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                //Calcular totales.
                objTblTot.calcularTotales();
                if (intNumTotReg==tblDat.getRowCount())
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros.");
                else
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros pero sólo se procesaron " + tblDat.getRowCount() + ".");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podría presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaría informado en todo
     * momento de lo que ocurre. Si se desea hacer ésto es necesario utilizar ésta clase
     * ya que si no sólo se apreciaría los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarDetReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sólo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(0);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }
    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_LIN:
                    strMsg="";
                    break;
                case INT_TBL_DAT_COD_ALT:
                    strMsg="Código alterno del item";
                    break;
                case INT_TBL_DAT_NOM_ITM:
                    strMsg="Nombre del item";
                    break;
                case INT_TBL_DAT_CAN:
                    strMsg="Cantidad";
                    break;
                case INT_TBL_DAT_PRE_UNI:
                    strMsg="Precio unitario";
                    break;
                case INT_TBL_DAT_POR_DES:
                    strMsg="Porcentaje de descuento";
                    break;
                case INT_TBL_DAT_PRE_VEN:
                    strMsg="Precio unitario de venta";
                    break;
                case INT_TBL_DAT_TOT_FIL:
                    strMsg="Total";
                    break;
                case INT_TBL_DAT_COS_UNI:
                    strMsg="Costo unitario";
                    break;
                case INT_TBL_DAT_PRE_LIS:
                    strMsg="Precio de lista";
                    break;
                case INT_TBL_DAT_PRE_COM:
                    strMsg="Precio de compra";
                    break;
                case INT_TBL_DAT_PRE_MIN:
                    strMsg="Mínimo precio de venta permitido";
                    break;
                case INT_TBL_DAT_DEF_VAL:
                    strMsg="Resultado=Pre.Vta.-Min.Pre.";
                    break;
                case INT_TBL_DAT_DEF_POR:
                    strMsg="Resultado (%)";
                    break;
                case INT_TBL_DAT_GAN_UNI_VAL:
                    strMsg="Ganancia unitaria";
                    break;
                case INT_TBL_DAT_GAN_TOT_VAL:
                    strMsg="Ganancia total";
                    break;
                case INT_TBL_DAT_MAR_UTI:
                    strMsg="Margen";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
}
