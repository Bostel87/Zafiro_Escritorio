/*
 * ZafAut_10.java
 *
 * Created on 15 de julio de 2010, 09:25 AM
 */

package Librerias.ZafAut;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;

/**
 *
 * @author  Eddye Lino
 */
public class ZafAut_10 extends javax.swing.JDialog
{
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafThreadGUI objThrGUI;
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private boolean blnCon;                                     //true: Continua la ejecución del hilo.
    //Variables de la clase.
    private int intCodEmp;                                      //Código de la empresa.
    private int intCodLoc;                                      //Código del local.
    private int intCodTipDoc;                                   //Código del tipo de documento.
    private int intCodDoc;                                      //Código del docuemnto.
    
    /**
     * Este constructor crea una instancia de la clase ZafAut_10.
     * @param parametros El ArrayList que contiene los parámetros que necesita el JDialog.
     * Los parámetros que contiene el ArrayList son los siguientes:
     * <UL>
     * <LI>0: El objeto Frame padre.
     * <LI>1: El objeto ZafParSis.
     * <LI>2: Un <I>int</I> que contiene el código de la empresa.
     * <LI>3: Un <I>int</I> que contiene el código del local.
     * <LI>4: Un <I>int</I> que contiene el código del tipo de documento.
     * <LI>5: Un <I>int</I> que contiene el código del documento.
     * </UL>
     */
    public ZafAut_10(java.util.ArrayList parametros)
    {
        super((java.awt.Frame)parametros.get(0), true);
        initComponents();
        //Inicializar objetos.
        objParSis=(ZafParSis)parametros.get(1);
        intCodEmp=Integer.parseInt(parametros.get(2).toString());
        intCodLoc=Integer.parseInt(parametros.get(3).toString());
        if (parametros.get(4)!=null)
            intCodTipDoc=Integer.parseInt(parametros.get(4).toString());
        intCodDoc=Integer.parseInt(parametros.get(5).toString());
        if (!configurarFrm())
            exitForm();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGen = new javax.swing.JPanel();
        lblDiaVal = new javax.swing.JLabel();
        lblDiaValAdi = new javax.swing.JLabel();
        lblFecVal = new javax.swing.JLabel();
        txtFecIng = new javax.swing.JTextField();
        txtDiaVal = new javax.swing.JTextField();
        txtFecVal = new javax.swing.JTextField();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCan = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panGen.setLayout(null);

        lblDiaVal.setText("Fecha de ingreso:");
        lblDiaVal.setToolTipText("Fecha de ingreso de la cotización");
        panGen.add(lblDiaVal);
        lblDiaVal.setBounds(0, 4, 200, 20);

        lblDiaValAdi.setText("Días de validez:");
        lblDiaValAdi.setToolTipText("Días de validez de la cotización");
        panGen.add(lblDiaValAdi);
        lblDiaValAdi.setBounds(0, 24, 200, 20);

        lblFecVal.setText("Fecha de validez:");
        lblFecVal.setToolTipText("Fecha de validez de la cotización");
        panGen.add(lblFecVal);
        lblFecVal.setBounds(0, 44, 200, 20);

        txtFecIng.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGen.add(txtFecIng);
        txtFecIng.setBounds(200, 4, 148, 20);

        txtDiaVal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGen.add(txtDiaVal);
        txtDiaVal.setBounds(200, 24, 148, 20);

        txtFecVal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGen.add(txtFecVal);
        txtFecVal.setBounds(200, 44, 148, 20);

        tabFrm.addTab("General", panGen);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butCan.setText("Cancelar");
        butCan.setToolTipText("Cierra el cuadro de dialogo.");
        butCan.setPreferredSize(new java.awt.Dimension(92, 25));
        butCan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCanActionPerformed(evt);
            }
        });
        panBot.add(butCan);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-400)/2, (screenSize.height-300)/2, 400, 300);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        butConActionPerformed(null);
    }//GEN-LAST:event_formWindowOpened

    private void butCanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCanActionPerformed
        exitForm();
    }//GEN-LAST:event_butCanActionPerformed

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acción de acuerdo a la etiqueta del botón ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar"))
        {
            blnCon=true;
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
        }
        else
        {
            blnCon=false;
        }
    }//GEN-LAST:event_butConActionPerformed
    
    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCan;
    private javax.swing.JButton butCon;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblDiaVal;
    private javax.swing.JLabel lblDiaValAdi;
    private javax.swing.JLabel lblFecVal;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGen;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTextField txtDiaVal;
    private javax.swing.JTextField txtFecIng;
    private javax.swing.JTextField txtFecVal;
    // End of variables declaration//GEN-END:variables
    
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux="Días de validez de la cotización";
            this.setTitle(strAux + " v0.1");
            lblTit.setText(strAux);
            //Configurar objetos.
            txtFecIng.setEditable(false);
            txtDiaVal.setEditable(false);
            txtFecVal.setEditable(false);
            txtFecIng.setBackground(objParSis.getColorCamposSistema());
            txtDiaVal.setBackground(objParSis.getColorCamposSistema());
            txtFecVal.setBackground(objParSis.getColorCamposSistema());
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg()
    {
        boolean blnRes=true;
        try
        {
            pgrSis.setIndeterminate(true);
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Obtener la forma de pago solicitada.
                strSQL="";
                strSQL+="SELECT a1.fe_ing, a1.ne_val, a1.fe_val";
                strSQL+=" FROM tbm_cabCotVen AS a1";
                strSQL+=" WHERE a1.co_emp=" + intCodEmp;
                strSQL+=" AND a1.co_loc=" + intCodLoc;
                strSQL+=" AND a1.co_cot=" + intCodDoc;
                rst=stm.executeQuery(strSQL);
                if (rst.next())
                {
                    txtFecIng.setText(rst.getString("fe_ing"));
                    txtDiaVal.setText(rst.getString("ne_val"));
                    txtFecVal.setText(rst.getString("fe_val"));
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                if (blnCon)
                    lblMsgSis.setText("Se encontró 1 registro.");
                else
                    lblMsgSis.setText("Interrupción del usuario. No se procesó la consulta.");
                butCon.setText("Consultar");
                pgrSis.setIndeterminate(false);
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podría presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaría informado en todo
     * momento de lo que ocurre. Si se desea hacer ésto es necesario utilizar ésta clase
     * ya que si no sólo se apreciaría los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarDetReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            objThrGUI=null;
        }
    }
    
}
