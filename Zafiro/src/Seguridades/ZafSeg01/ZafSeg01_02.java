/*
 * ZafSeg01_02.java
 *
 * Created on 16 de septiembre de 2004, 03:50 PM
 * v1.02
 */
package Seguridades.ZafSeg01;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
//import Librerias.ZafConMem.ZafConMem;
import Librerias.ZafConItm.ZafConItm;
import Librerias.ZafConRecHum.ZafConRecHumNotAtr.ZafConRecHumNotAtr;
import Librerias.ZafConRecHum.ZafConRecHumNotVenCon.ZafConRecHumNotVenCon;
import Librerias.ZafImpAut.ZafImpAut;
import Librerias.ZafNotAle.ZafNotAle;
import RecursosHumanos.ZafRecHum58.ZafRecHum58;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.Calendar;
import javax.swing.JMenuBar;
import java.util.Vector;

/**
 *
 * @author  Eddye Lino
 */
public class ZafSeg01_02 extends javax.swing.JFrame 
{
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL;
    private JMenuBar mnuBar;
    private ZafSeg01_03 mnuMnu;
    private ZafSeg01_04 mnuItm;
    private ZafSeg01_05 mnuSep;
    private Vector vecMnu;
    
    /** Crea una nueva instancia de la clase ZafSeg01_02. */
    public ZafSeg01_02(ZafParSis obj) 
    {
        initComponents();
        //Inicializar objetos.
        objParSis=obj;
        objParSis.cargarParametrosSistema();
        objUti=new ZafUtil();
        if (!configurarFrm())
            exitForm();
        if (!cargarMnuSis_F1())
            exitForm();
        if (!objParSis.cargarAniosCreadosSistema())
            exitForm();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        dskGen = new javax.swing.JDesktopPane();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        panBarEstCen = new javax.swing.JPanel();
        lblEmp = new javax.swing.JLabel();
        lblLoc = new javax.swing.JLabel();
        lblUsr = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Zafiro");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        getContentPane().add(dskGen, java.awt.BorderLayout.CENTER);

        panBarEst.setLayout(new java.awt.BorderLayout());

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        lblMsgSis.setPreferredSize(new java.awt.Dimension(300, 19));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.WEST);

        panBarEstCen.setLayout(new java.awt.GridLayout(1, 3));

        panBarEstCen.setMinimumSize(new java.awt.Dimension(24, 26));
        panBarEstCen.setPreferredSize(new java.awt.Dimension(200, 15));
        lblEmp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEmp.setText("Empresa");
        lblEmp.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEstCen.add(lblEmp);

        lblLoc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoc.setText("Local");
        lblLoc.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEstCen.add(lblLoc);

        lblUsr.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUsr.setText("Usuario");
        lblUsr.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEstCen.add(lblUsr);

        panBarEst.add(panBarEstCen, java.awt.BorderLayout.CENTER);

        getContentPane().add(panBarEst, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-780)/2, (screenSize.height-580)/2, 780, 580);
    }//GEN-END:initComponents
    
    /** Cerrar la aplicación. */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (javax.swing.JOptionPane.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
            System.exit(0);
        }
    }//GEN-LAST:event_exitForm

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
        System.exit(0);
    }
    
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        new ZafSeg01_02().show();
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane dskGen;
    private javax.swing.JLabel lblEmp;
    private javax.swing.JLabel lblLoc;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblUsr;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBarEstCen;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            vecMnu=new Vector();
            //Para centrar la ventana le mando null.
            this.setLocationRelativeTo(null);
            //Para maximizar la ventana.
            this.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
            lblMsgSis.setText("Listo");
            this.setTitle("Zafiro - " + objParSis.getNombreEmpresa() + " v0.8");
            lblEmp.setText(objParSis.getNombreEmpresa());
            lblLoc.setText(objParSis.getNombreLocal());
            lblUsr.setText(objParSis.getNombreUsuario());
            lblEmp.setToolTipText("Empresa: " + objParSis.getNombreEmpresa());
            lblLoc.setToolTipText("Local: " + objParSis.getNombreLocal());
            lblUsr.setToolTipText("Usuario: " + objParSis.getNombreUsuario());
            
            //Agregar la clase que permite controlar la memoria.
           // ZafConMem objConMem=new ZafConMem();
            
            //Ventanas de Notificaciones.
            ZafConItm objConItm=new ZafConItm(objParSis, javax.swing.JOptionPane.getFrameForComponent(this), dskGen );  
            ZafConRecHumNotAtr objConRecNotAtr=new ZafConRecHumNotAtr(objParSis, javax.swing.JOptionPane.getFrameForComponent(this), dskGen );  
            ZafConRecHumNotVenCon objConRecHumNotVenCon=new ZafConRecHumNotVenCon(objParSis, javax.swing.JOptionPane.getFrameForComponent(this), dskGen );
            ZafNotAle objNotAle=new ZafNotAle(objParSis, javax.swing.JOptionPane.getFrameForComponent(this), dskGen );  
            ZafImpAut objImpAut =new ZafImpAut(objParSis);
            // panBarEst.add(objConMem, java.awt.BorderLayout.EAST);
            panBarEst.add(objConItm, java.awt.BorderLayout.EAST);
            panBarEst.add(objConRecNotAtr, java.awt.BorderLayout.WEST);
            panBarEst.add(objConRecHumNotVenCon, java.awt.BorderLayout.WEST);
            dskGen.add(objNotAle,javax.swing.JLayeredPane.CENTER_ALIGNMENT);
            
            if(objParSis.getCodigoUsuario()==101){
                RecursosHumanos.ZafRecHum58.ZafRecHum58 zafRecHum58 = new ZafRecHum58(objParSis,Boolean.TRUE);
                dskGen.add(zafRecHum58,javax.swing.JLayeredPane.DEFAULT_LAYER);
                zafRecHum58.show();
            }else{
                if(permisoSegNov()){
                    RecursosHumanos.ZafRecHum58.ZafRecHum58 zafRecHum58 = new ZafRecHum58(objParSis,Boolean.TRUE);
                    dskGen.add(zafRecHum58,javax.swing.JLayeredPane.DEFAULT_LAYER);
                    zafRecHum58.show();
                }
            }
            
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean permisoSegNov(){
        
        boolean blnResPen=false;
        boolean blnUsPer=false;
        java.sql.ResultSet rstRes=null;
        java.sql.Statement stmLoc=null;
        java.sql.Connection con=null;
        
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                 stmLoc=con.createStatement();
                 String strSql = "select * from tbr_perusr where co_mnu=3475 and co_usr = " + objParSis.getCodigoUsuario() + " and co_emp = " + objParSis.getCodigoEmpresa();
                 rstRes = stmLoc.executeQuery(strSql);
                 if(rstRes.next()){
                     blnUsPer= true;
                 }
                 if(blnUsPer){
                     Calendar cal = Calendar.getInstance();
                     int intDiaMax = cal.getActualMaximum(java.util.Calendar.DAY_OF_MONTH);
                     String strFecDes=cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH)+1) + "-" + "01";
                     String strFecHas=cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH)+1) + "-" + intDiaMax;
                     strSql="";
                     strSql+="select a.*, b.tx_usr as tx_usrrem, c.tx_usr as tx_usrdes, d.tx_usr as tx_usrdesree , ";
                     strSql+="e.tx_deslar, e.co_tipnov FROM tbm_novrechum AS a inner join tbm_usr b on (b.co_usr=a.co_usrrem) ";
                     strSql+="inner join tbm_usr c on (c.co_usr=a.co_usrdes) ";
                     strSql+="inner join tbm_tipnovrechum e on (e.co_tipnov=a.co_tipnov) ";
                     strSql+="left join tbm_usr d on (d.co_usr=a.co_usrdesree) ";
                     strSql+="WHERE a.st_reg IN ('P') ";
                     strSql+="and a.co_usrdes  = " + objParSis.getCodigoUsuario();
                     strSql+="and date(a.fe_ing) BETWEEN " + objUti.codificar(strFecDes) + " and " + objUti.codificar(strFecHas);
                     strSql+="order by a.co_nov";
                     System.out.println("presenta info: " + strSql);
                     rstRes = stmLoc.executeQuery(strSql);
                     if(rstRes.next()){
                        blnResPen= true;
                    }
                 }
            }
        }catch(Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnUsPer= false;
        }finally {
            try{rstRes.close();rstRes=null;}catch(Throwable ignore){}
            try{stmLoc.close();stmLoc=null;}catch(Throwable ignore){}
            try{con.close();}catch(Throwable ignore){}
        }
        return blnResPen;
    }

    /**
     * Nombre de la función: Cargar menú del sistema.
     * Esta función se conecta a la base de datos y carga los menues y todas las opciones que tendrá
     * cada menú incluyendo información de las clases o funciones a la que llamará cada menú. 
     * @return true: Si la función se ejecutó con éxito.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarMnuSis_F1()
    {
        int intCodMnu, intCodPad;
        String strTipMnu, strNomMen, strAcc;
        boolean blnRes=true;
        try
        {
            con=java.sql.DriverManager.getConnection(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Si es el usuario Administrador (Código=1) tiene acceso a todas las opciones.
                if (objParSis.getCodigoUsuario()==1)
                {
                    strSQL="";
                    strSQL+="SELECT a1.co_mnu, a1.tx_tipMnu, a1.tx_nom, a1.tx_des, a1.ne_pad, a1.ne_niv, a1.tx_acc";
                    strSQL+=" FROM tbm_mnuSis AS a1";
                    strSQL+=" WHERE a1.tx_tipMnu IN ('M','C','F','S')";
                    strSQL+=" AND a1.st_reg='A'";
                    strSQL+=" ORDER BY a1.ne_ubi";
                }
                else
                {
                    strSQL="";
                    strSQL+="SELECT a1.co_mnu, a1.tx_tipMnu, a1.tx_nom, a1.tx_des, a1.ne_pad ,a1.ne_niv, a1.tx_acc";
                    strSQL+=" FROM tbm_mnuSis AS a1";
                    strSQL+=" LEFT OUTER JOIN tbr_perUsr AS a2 ON (a1.co_mnu=a2.co_mnu)";
                    strSQL+=" WHERE a2.co_emp=" + objParSis.getCodigoEmpresa();
                    strSQL+=" AND a2.co_loc=" + objParSis.getCodigoLocal();
                    strSQL+=" AND a2.co_usr=" + objParSis.getCodigoUsuario();
                    strSQL+=" AND a1.tx_tipMnu IN ('M','C','F','S')";
                    strSQL+=" AND a1.st_reg='A'";
                    strSQL+=" ORDER BY a1.ne_ubi";
                }
                rst = stm.executeQuery(strSQL);
                //Creo la barra de menú.
                mnuBar=new JMenuBar();
                while (rst.next())
                {
                    intCodMnu=rst.getInt("co_mnu");
                    strTipMnu=rst.getString("tx_tipMnu");
                    strNomMen=rst.getString("tx_nom");
                    intCodPad=rst.getInt("ne_pad");
                    strAcc=rst.getString("tx_acc");
                    if (strTipMnu.equals("M"))
                    {
                        mnuMnu=new ZafSeg01_03();
                        mnuMnu.setCodigoMenu(intCodMnu);
                        mnuMnu.setTipoMenu(strTipMnu);
                        mnuMnu.setText(strNomMen);
                        mnuMnu.setAccion(strAcc);
                        vecMnu.add(mnuMnu);
                    }
                    else if (strTipMnu.equals("C"))
                    {
                        mnuItm=new ZafSeg01_04();
                        mnuItm.setCodigoMenu(intCodMnu);
                        mnuItm.setTipoMenu(strTipMnu);
                        mnuItm.setText(strNomMen);
                        mnuItm.setAccion(strAcc);
                        vecMnu.add(mnuItm);
                        if (strAcc!=null)
                        {
                            mnuItm.addActionListener(new java.awt.event.ActionListener() 
                            {
                                public void actionPerformed(java.awt.event.ActionEvent evt) 
                                {
                                    ZafSeg01_04 objAux=(ZafSeg01_04)evt.getSource();
                                    objParSis.setCodigoMenu(objAux.getCodigoMenu());
                                    objParSis.setNombreMenu(objAux.getText());
                                    invocarClase(objAux.getAccion());
                                }
                            });
                        }
                    }
                    else if (strTipMnu.equals("F"))
                    {
                        mnuItm=new ZafSeg01_04();
                        mnuItm.setCodigoMenu(intCodMnu);
                        mnuItm.setTipoMenu(strTipMnu);
                        mnuItm.setText(strNomMen);
                        mnuItm.setAccion(strAcc);
                        vecMnu.add(mnuItm);
                        if (strAcc!=null)
                        {
                            mnuItm.addActionListener(new java.awt.event.ActionListener() 
                            {
                                public void actionPerformed(java.awt.event.ActionEvent evt) 
                                {
                                    ZafSeg01_04 objAux=(ZafSeg01_04)evt.getSource();
                                    invocarFuncion(objAux.getAccion());
                                }
                            });
                        }
                    }
                    else if (strTipMnu.equals("S"))
                    {
                        mnuSep=new ZafSeg01_05();
                        mnuSep.setCodigoMenu(intCodMnu);
                        mnuSep.setTipoMenu(strTipMnu);
                        vecMnu.add(mnuSep);
                    }
                    //Agregar el menú donde corresponda.
                    if (rst.getInt("ne_niv")==1)
                        mnuBar.add(mnuMnu);
                    else
                    {
                        for (int i=vecMnu.size()-2;i>=0;i--)
                        {
                            if (vecMnu.get(i) instanceof ZafSeg01_03)
                            {
                                if (intCodPad==((ZafSeg01_03)vecMnu.get(i)).getCodigoMenu())
                                {
                                    if (strTipMnu.equals("M"))
                                        ((ZafSeg01_03)vecMnu.get(i)).add(mnuMnu);
                                    else if ( (strTipMnu.equals("C")) || (strTipMnu.equals("F")) )
                                        ((ZafSeg01_03)vecMnu.get(i)).add(mnuItm);
                                    else if (strTipMnu.equals("S"))
                                        ((ZafSeg01_03)vecMnu.get(i)).add(mnuSep);
                                    break;
                                }
                            }
                            else if (vecMnu.get(i) instanceof ZafSeg01_04)
                            {
                                if (intCodPad==((ZafSeg01_04)vecMnu.get(i)).getCodigoMenu())
                                {
                                    if (strTipMnu.equals("M"))
                                        ((ZafSeg01_04)vecMnu.get(i)).add(mnuMnu);
                                    else if ( (strTipMnu.equals("C")) || (strTipMnu.equals("F")) )
                                        ((ZafSeg01_04)vecMnu.get(i)).add(mnuItm);
                                    else if (strTipMnu.equals("S"))
                                        ((ZafSeg01_04)vecMnu.get(i)).add(mnuSep);
                                    break;
                                }
                            }
                            else if (vecMnu.get(i) instanceof ZafSeg01_05)
                            {
                                if (intCodPad==((ZafSeg01_05)vecMnu.get(i)).getCodigoMenu())
                                {
                                    if (strTipMnu.equals("M"))
                                        ((ZafSeg01_05)vecMnu.get(i)).add(mnuMnu);
                                    else if ( (strTipMnu.equals("C")) || (strTipMnu.equals("F")) )
                                        ((ZafSeg01_05)vecMnu.get(i)).add(mnuItm);
                                    else if (strTipMnu.equals("S"))
                                        ((ZafSeg01_05)vecMnu.get(i)).add(mnuSep);
                                    break;
                                }
                            }
                        }
                    }
                }
                //Establezco la barra de menú.
                setJMenuBar(mnuBar);
                rst.close(); 
                stm.close();
                con.close();
                vecMnu=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean invocarClase(String clase)
    {
        boolean blnRes=true;
        try
        {
            //Obtener el constructor de la clase que se va a invocar.
            Class objVen=Class.forName(clase);
            Class objCla[]=new Class[1];
            objCla[0]=objParSis.getClass();
            java.lang.reflect.Constructor objCon=objVen.getConstructor(objCla);
            //Inicializar el constructor que se obtuvo.
            Object objObj[]=new Object[1];
            objObj[0]=objParSis;
            javax.swing.JInternalFrame ifrVen;
            ifrVen=(javax.swing.JInternalFrame)objCon.newInstance(objObj);
            dskGen.add(ifrVen,javax.swing.JLayeredPane.DEFAULT_LAYER);
            ifrVen.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
                public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                }
                public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                    System.gc();
                }
                public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                }
                public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
                }
                public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
                }
                public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                }
                public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                }
            });
            ifrVen.show();
        }
        catch (ClassNotFoundException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (NoSuchMethodException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (SecurityException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (InstantiationException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (IllegalAccessException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (IllegalArgumentException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (java.lang.reflect.InvocationTargetException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
     
    private boolean invocarFuncion(String funcion)
    {
        boolean blnRes=true;
        try
        {
            java.lang.reflect.Method objMet=this.getClass().getMethod(funcion, null);
            objMet.invoke(this, null);
        }
        catch (NoSuchMethodException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (SecurityException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (IllegalAccessException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (IllegalArgumentException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (java.lang.reflect.InvocationTargetException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    public void salir()
    {
        exitForm(null);
    }

    public void minimizarTodVen()
    {
        int i;
        try
        {
            javax.swing.JInternalFrame ifrVen[]=dskGen.getAllFramesInLayer(javax.swing.JLayeredPane.DEFAULT_LAYER.intValue());
            for (i=ifrVen.length-1; i>=0; i--)
            {
                ifrVen[i].setIcon(true);
            }
            ifrVen=null;
        }
        catch (java.beans.PropertyVetoException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }

    public void restaurarTodVen()
    {
        int i;
        try
        {
            javax.swing.JInternalFrame ifrVen[]=dskGen.getAllFramesInLayer(javax.swing.JLayeredPane.DEFAULT_LAYER.intValue());
            for (i=0; i<ifrVen.length; i++)
            {
                ifrVen[i].setIcon(false);
            }
            ifrVen=null;
        }
        catch (java.beans.PropertyVetoException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }

    public void mosaicoHor()
    {
        int intNumTotVenPro, intAltVenUti, i, j;
        try
        {
            javax.swing.JInternalFrame ifrVen[]=dskGen.getAllFramesInLayer(javax.swing.JLayeredPane.DEFAULT_LAYER.intValue());
            //Obtener el número total de ventanas a procesar.
            intNumTotVenPro=0;
            for (i=0; i<ifrVen.length; i++)
            {
                //Se excluyen las ventanas que están minimizadas.
                if (!ifrVen[i].isIcon())
                    intNumTotVenPro++;
            }
            //Redimensionar y reubicar las ventanas a procesar.
            if (intNumTotVenPro>0)
            {
                intAltVenUti=(dskGen.getHeight()-30)/intNumTotVenPro;
                j=0;
                for (i=ifrVen.length-1; i>=0; i--)
                {
                    if (!ifrVen[i].isIcon())
                    {
                        ifrVen[i].setSize(dskGen.getWidth(), intAltVenUti);
                        ifrVen[i].setLocation(0, j*intAltVenUti);
                        j++;
                    }
                }
            }
            ifrVen=null;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }
    
    public void mosaicoVer()
    {
        int intNumTotVenPro, intAncVenUti, i, j;
        try
        {
            javax.swing.JInternalFrame ifrVen[]=dskGen.getAllFramesInLayer(javax.swing.JLayeredPane.DEFAULT_LAYER.intValue());
            //Obtener el número total de ventanas a procesar.
            intNumTotVenPro=0;
            for (i=0; i<ifrVen.length; i++)
            {
                //Se excluyen las ventanas que están minimizadas.
                if (!ifrVen[i].isIcon())
                    intNumTotVenPro++;
            }
            //Redimensionar y reubicar las ventanas a procesar.
            if (intNumTotVenPro>0)
            {
                intAncVenUti=dskGen.getWidth()/intNumTotVenPro;
                j=0;
                for (i=ifrVen.length-1; i>=0; i--)
                {
                    if (!ifrVen[i].isIcon())
                    {
                        ifrVen[i].setSize(intAncVenUti, dskGen.getHeight()-30);
                        ifrVen[i].setLocation(j*intAncVenUti, 0);
                        j++;
                    }
                }
            }
            ifrVen=null;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }
    
    public void cascada()
    {
        int i, j;
        try
        {
            javax.swing.JInternalFrame ifrVen[]=dskGen.getAllFramesInLayer(javax.swing.JLayeredPane.DEFAULT_LAYER.intValue());
            j=0;
            for (i=ifrVen.length-1; i>=0; i--)
            {
                if (!ifrVen[i].isIcon())
                {
                    ifrVen[i].setLocation(j*30, j*30);
                    j++;
                }
            }
            ifrVen=null;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }
    
    public void organizar()
    {
        int intNumTotFil, intNumTotCol, intAncVenUti, intAltVenUti, i, j, k;
        String strOpcSel;
        try
        {
            String[] strOpc={"2 x 2", "2 x 3", "2 x 4", "2 x 5", "3 x 2", "3 x 3", "3 x 4", "3 x 5", "4 x 2", "4 x 3", "4 x 4", "4 x 5"};
            strOpcSel=(String)javax.swing.JOptionPane.showInternalInputDialog(dskGen, "Seleccione la forma como desea organizar las ventanas:", "Mensaje del sistema Zafiro", javax.swing.JOptionPane.PLAIN_MESSAGE, null, strOpc, strOpc[0]);
            if (strOpcSel!=null)
            {
                javax.swing.JInternalFrame ifrVen[]=dskGen.getAllFramesInLayer(javax.swing.JLayeredPane.DEFAULT_LAYER.intValue());
                intNumTotFil=1;
                intNumTotCol=1;
                if (strOpcSel.equals("2 x 2"))
                {
                    intNumTotFil=2;
                    intNumTotCol=2;
                }
                else if (strOpcSel.equals("2 x 3"))
                {
                    intNumTotFil=2;
                    intNumTotCol=3;
                }
                else if (strOpcSel.equals("2 x 4"))
                {
                    intNumTotFil=2;
                    intNumTotCol=4;
                }
                else if (strOpcSel.equals("2 x 5"))
                {
                    intNumTotFil=2;
                    intNumTotCol=5;
                }
                else if (strOpcSel.equals("3 x 2"))
                {
                    intNumTotFil=3;
                    intNumTotCol=2;
                }
                else if (strOpcSel.equals("3 x 3"))
                {
                    intNumTotFil=3;
                    intNumTotCol=3;
                }
                else if (strOpcSel.equals("3 x 4"))
                {
                    intNumTotFil=3;
                    intNumTotCol=4;
                }
                else if (strOpcSel.equals("3 x 5"))
                {
                    intNumTotFil=3;
                    intNumTotCol=5;
                }
                else if (strOpcSel.equals("4 x 2"))
                {
                    intNumTotFil=4;
                    intNumTotCol=2;
                }
                else if (strOpcSel.equals("4 x 3"))
                {
                    intNumTotFil=4;
                    intNumTotCol=3;
                }
                else if (strOpcSel.equals("4 x 4"))
                {
                    intNumTotFil=4;
                    intNumTotCol=4;
                }
                else if (strOpcSel.equals("4 x 5"))
                {
                    intNumTotFil=4;
                    intNumTotCol=5;
                }
                //Redimensionar y reubicar las ventanas a procesar.
                intAncVenUti=dskGen.getWidth()/intNumTotCol;
                intAltVenUti=(dskGen.getHeight()-30)/intNumTotFil;
                j=0;
                k=0;
                for (i=ifrVen.length-1; i>=0; i--)
                {
                    if (!ifrVen[i].isIcon())
                    {
                        ifrVen[i].setSize(intAncVenUti, intAltVenUti);
                        ifrVen[i].setLocation(k*intAncVenUti, j*intAltVenUti);
                        if (k<(intNumTotCol-1))
                        {
                            k++;
                        }
                        else
                        {
                            k=0;
                            j++;
                        }
                    }
                }
                ifrVen=null;
            }
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }
    
}
