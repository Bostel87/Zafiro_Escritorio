/*
 * ZafSeg01_06.java
 *
 * Created on 26 de agosto de 2008, 01:05 PM
 * v0.1
 */
package Seguridades.ZafSeg01;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author  Eddye Lino
 */
public class ZafSeg01_06 extends javax.swing.JFrame 
{
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL;
    //Variables de la clase.
    private int intCodUsr;                                      //Código del usuario.
    private String strUsr;                                      //Usuario del Sistema.
    private String strCla;                                      //Clave del usuario.
    private String strFecProActCla;                             //Fecha de próxima actualización de clave.
    private int intDiaProActCla;                                //Número de días para la próxima actualización de la clave.
    
    /**
     * Este constructor crea una instancia de la clase ZafSeg01_06.
     * @param objParSis El objeto ZafParSis.
     * @param intCodUsr El código del usuario.
     * @param strUsr El usuario.
     * @param strCla La clave del usuario.
     * @param intDiaProActCla El número de días para la próxima actualización de la clave.
     */
    public ZafSeg01_06(ZafParSis objParSis, int intCodUsr, String strUsr, String strCla, int intDiaProActCla) 
    {
        initComponents();
        //Inicializar objetos.
        this.objParSis=objParSis;
        this.intCodUsr=intCodUsr;
        this.strUsr=strUsr;
        this.strCla=strCla;
        this.intDiaProActCla=intDiaProActCla;
        objUti=new ZafUtil();
        if (!configurarFrm())
            exitForm();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTit = new javax.swing.JLabel();
        lblUsr = new javax.swing.JLabel();
        lblClaAct = new javax.swing.JLabel();
        lblClaNue = new javax.swing.JLabel();
        lblClaCon = new javax.swing.JLabel();
        txtUsr = new javax.swing.JTextField();
        pwdClaAct = new javax.swing.JPasswordField();
        pwdClaNue = new javax.swing.JPasswordField();
        pwdClaCon = new javax.swing.JPasswordField();
        butAce = new javax.swing.JButton();
        butCan = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Zafiro - Cambio de contraseña");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 12)); // NOI18N
        lblTit.setForeground(java.awt.SystemColor.activeCaption);
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Cambio de contraseña");
        getContentPane().add(lblTit);
        lblTit.setBounds(0, 0, 352, 16);

        lblUsr.setText("Usuario:");
        getContentPane().add(lblUsr);
        lblUsr.setBounds(4, 24, 168, 20);

        lblClaAct.setText("Contraseña actual:");
        getContentPane().add(lblClaAct);
        lblClaAct.setBounds(4, 44, 168, 20);

        lblClaNue.setText("Nueva contraseña:");
        getContentPane().add(lblClaNue);
        lblClaNue.setBounds(4, 64, 168, 20);

        lblClaCon.setText("Confirmar nueva contraseña:");
        getContentPane().add(lblClaCon);
        lblClaCon.setBounds(4, 84, 168, 20);
        getContentPane().add(txtUsr);
        txtUsr.setBounds(172, 24, 188, 20);

        pwdClaAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdClaActActionPerformed(evt);
            }
        });
        getContentPane().add(pwdClaAct);
        pwdClaAct.setBounds(172, 44, 188, 20);

        pwdClaNue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdClaNueActionPerformed(evt);
            }
        });
        getContentPane().add(pwdClaNue);
        pwdClaNue.setBounds(172, 64, 188, 20);

        pwdClaCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAceActionPerformed(evt);
            }
        });
        getContentPane().add(pwdClaCon);
        pwdClaCon.setBounds(172, 84, 188, 20);

        butAce.setText("Aceptar");
        butAce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAceActionPerformed(evt);
            }
        });
        getContentPane().add(butAce);
        butAce.setBounds(172, 108, 92, 25);

        butCan.setText("Cancelar");
        butCan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCanActionPerformed(evt);
            }
        });
        getContentPane().add(butCan);
        butCan.setBounds(268, 108, 92, 25);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-372)/2, (screenSize.height-164)/2, 372, 164);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //Establecer el foco en el cuadro de texto adecuado.
        pwdClaAct.requestFocusInWindow();
    }//GEN-LAST:event_formWindowOpened

    private void butCanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCanActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCanActionPerformed

    private void butAceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAceActionPerformed
        if (actualizarReg())
        {
            mostrarMsgInf("Su contraseña fue cambiada con éxito.\nEl próximo cambio de contraseña deberá ser efectuado antes del " + strFecProActCla + ".\nCaso contrario el Sistema le solicitará hacer el cambio de forma obligatoria antes de ingresar al Sistema.");
            ZafSeg01_02 objSeg=new ZafSeg01_02(objParSis);
            objSeg.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_butAceActionPerformed
    
    /** Cerrar la aplicación. */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
            System.exit(0);
        }
    }//GEN-LAST:event_exitForm

private void pwdClaActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdClaActActionPerformed
    pwdClaNue.requestFocusInWindow();
}//GEN-LAST:event_pwdClaActActionPerformed

private void pwdClaNueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdClaNueActionPerformed
    pwdClaCon.requestFocusInWindow();
}//GEN-LAST:event_pwdClaNueActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
        System.exit(0);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butAce;
    private javax.swing.JButton butCan;
    private javax.swing.JLabel lblClaAct;
    private javax.swing.JLabel lblClaCon;
    private javax.swing.JLabel lblClaNue;
    private javax.swing.JLabel lblTit;
    private javax.swing.JLabel lblUsr;
    private javax.swing.JPasswordField pwdClaAct;
    private javax.swing.JPasswordField pwdClaCon;
    private javax.swing.JPasswordField pwdClaNue;
    private javax.swing.JTextField txtUsr;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            txtUsr.setBackground(objParSis.getColorCamposSistema());
            txtUsr.setText(strUsr);
            txtUsr.setEditable(false);
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si y No. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta función actualiza el registro en la base de datos.
     * @return true: Si se pudo actualizar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarReg()
    {
        boolean blnRes=false;
        try
        {
            if (isCamVal())
            {
                con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
                con.setAutoCommit(false);
                if (con!=null)
                {
                    if (actualizarClaUsr())
                    {
                        con.commit();
                        blnRes=true;
                    }
                    else
                        con.rollback();
                }
                con.close();
                con=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función determina si los campos son válidos.
     * @return true: Si los campos son válidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal()
    {
        String strClaAct, strClaNue, strClaCon;
        strClaAct=String.copyValueOf(pwdClaAct.getPassword());
        strClaNue=String.copyValueOf(pwdClaNue.getPassword());
        strClaCon=String.copyValueOf(pwdClaCon.getPassword());
        //Validar que el campo "Contraseña actual" no esté vacío.
        if (strClaAct.equals(""))
        {
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Contraseña actual</FONT> no puede quedar vacío.<BR>Ingrese una contraseña valida y vuelva a intentarlo.</HTML>");
            pwdClaAct.requestFocus();
            return false;
        }
        //Validar que el campo "Contraseña actual" coincida con la contraseña actual almacenada en la base de datos.
        if (!strClaAct.equals(strCla))
        {
            mostrarMsgInf("<HTML>La contraseña ingresada no coincide con la contraseña que actualmente tiene vigente.<BR>Ingrese la contraseña que actualmente tiene vigente y vuelva a intentarlo.</HTML>");
            pwdClaAct.selectAll();
            pwdClaAct.requestFocus();
            return false;
        }
        //Validar que el campo "Nueva contraseña" no esté vacío.
        if (strClaNue.equals(""))
        {
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Nueva contraseña</FONT> no puede quedar vacío.<BR>Ingrese una contraseña valida y vuelva a intentarlo.</HTML>");
            pwdClaNue.requestFocus();
            return false;
        }
        //Validar que el campo "Nueva contraseña" tenga al menos 4 caracteres.
        if (strClaNue.length()<4)
        {
            mostrarMsgInf("<HTML>Su nueva contraseña debe tener al menos 4 caracteres.<BR>Ingrese una contraseña que tenga al menos 4 caracteres y vuelva a intentarlo.</HTML>");
            pwdClaNue.selectAll();
            pwdClaNue.requestFocus();
            return false;
        }
        //Validar que el campo "Confirmar nueva contraseña" sea igual al campo "Nueva contraseña".
        if (!strClaCon.equals(strClaNue))
        {
            mostrarMsgInf("<HTML>La confirmación de la nueva contraseña no coincide con la nueva contraseña.<BR>Ingrese la misma contraseña que ingresó en el campo <FONT COLOR=\"blue\">Nueva contraseña</FONT> y vuelva a intentarlo.</HTML>");
            pwdClaCon.selectAll();
            pwdClaCon.requestFocus();
            return false;
        }
        //Validar que el campo "Nueva contraseña" sea diferente a la contraseña vigente.
        if (strClaNue.equals(strCla))
        {
            mostrarMsgInf("<HTML>La nueva contraseña debe ser diferente a la contraseña vigente.<BR>Ingrese una contraseña diferente a la contraseña vigente y vuelva a intentarlo.</HTML>");
            pwdClaCon.setText("");
            pwdClaNue.setText("");
            pwdClaNue.requestFocus();
            return false;
        }
        return true;
    }

    /**
     * Esta función permite actualizar la contraseña del usuario.
     * @return true: Si se pudo actualizar la contraseña del usuario.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarClaUsr()
    {
        java.util.Calendar calFecProActCla=java.util.Calendar.getInstance();
        boolean blnRes=true;
        try
        {
            if (con!=null)
            {
                stm=con.createStatement();
                calFecProActCla.setTime(objParSis.getFechaHoraServidorIngresarSistema());
                calFecProActCla.add(java.util.Calendar.DATE, intDiaProActCla);
                strFecProActCla=objUti.formatearFecha(calFecProActCla.getTime(), objParSis.getFormatoFecha());
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_usr";
                strSQL+=" SET tx_pwd=MD5(" + objUti.codificar(String.copyValueOf(pwdClaNue.getPassword())) + ")";
                strSQL+=", fe_proActCla='" + objUti.formatearFecha(calFecProActCla.getTime(), objParSis.getFormatoFechaBaseDatos()) + "'";
                strSQL+=", tx_comUltActCla='" + objParSis.getNombreComputadoraConDirIP() + "'";
                strSQL+=" WHERE co_usr=" + intCodUsr;
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
                calFecProActCla=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

}
