/*
 * ZafSeg05.java
 *
 * Created on Octubre 22, 2013, 12:41 PM
 */

package Seguridades.ZafSeg05;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import Librerias.ZafTblUti.ZafTblCelRenCbo.ZafTblCelRenCbo;
import Librerias.ZafTblUti.ZafTblCelEdiCbo.ZafTblCelEdiCbo;
import Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt;
/**
 *
 * @author  José Marín 
 */
public class ZafSeg05 extends javax.swing.JInternalFrame {
    
    private ZafParSis objParSis;
    private ZafTblModLis objTblModLis;                          //Detectar cambios de valores en las celdas.
    private ZafVenCon vcoPrg;
    private ZafUtil objUti;
    private ZafTblCelEdiTxt objTblCelEdiTxt;                    //Editor: JTextField en celda.
    private MiToolBar objTooBar;
    private ZafTblMod objTblMod;
    private ZafColNumerada objColNum;
    private ZafTblPopMnu objTblPopMnu;
    private ZafMouMotAda objMouMotAda;
    private ZafTblCelRenChk objTblCelRenChk, objTblCelRenChkPrd;
    private ZafTblCelEdiChk objTblCelEdiChk, objTblCelEdiChkPrd;
    private ZafTblOrd objTblOrd;
    private ZafTblBus objTblBus;
    private ZafVenCon vcoUsr;
    private ZafTblCelEdiChk objTblCelEdiChkPre;         //Editor: JCheckBox en celda.
    private ZafTblCelRenCbo objTblCelRenCmbBox;
    private ZafTblCelEdiCbo objTblCelEdiCmbBox;
    private boolean blnHayCam;
    
    private String strSQL, strAux;
    private Vector vecDat, vecReg, vecCab, vecAux;
    private String strTipPrg;
    private String strNomPrg;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private int intSelPrd;
    private int intSelRepSelPrd;
    private Vector vecCodVeh, vecPlaca, vecDesLar;
    
    private String strMacDir;
    
    private final int INT_TBL_DAT_LIN=0;
    private final int INT_TBL_DAT_NOM_USR=1;
    private final int INT_TBL_DAT_TIP_SIS=2;
    private final int INT_TBL_DAT_DIR_IP=3;
    private final int INT_TBL_DAT_DIR_MAC=4;
    private boolean blnPre;
    
    private ZafDocLis objDocLis;
    private String strDesCorUsr, strDesLarUsr;

    /** Creates new form ZafSeg05 */
    public ZafSeg05(ZafParSis obj) {
        try{
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
             agregarDocLis();
            if (!configurarFrm())
                exitForm();
        }
        catch (CloneNotSupportedException e){
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }

//    /** This method is called from within the constructor to
//     * initialize the form.
//     * WARNING: Do NOT modify this code. The content of this method is
//     * always regenerated by the Form Editor.
//     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panDat = new javax.swing.JPanel();
        panCab = new javax.swing.JPanel();
        txtNumCta = new javax.swing.JTextField();
        txtNumPro = new javax.swing.JTextField();
        lblUsr = new javax.swing.JLabel();
        txtCodUsr = new javax.swing.JTextField();
        txtDesCorUsr = new javax.swing.JTextField();
        txtDesLarUsr = new javax.swing.JTextField();
        butUsr = new javax.swing.JButton();
        panDet = new javax.swing.JPanel();
        spnDet = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Información del registro actual");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        tabFrm.setPreferredSize(new java.awt.Dimension(459, 473));

        panDat.setPreferredSize(new java.awt.Dimension(600, 80));
        panDat.setLayout(new java.awt.BorderLayout());

        panCab.setPreferredSize(new java.awt.Dimension(610, 30));
        panCab.setLayout(null);

        txtNumCta.setMaximumSize(null);
        txtNumCta.setPreferredSize(new java.awt.Dimension(70, 20));
        panCab.add(txtNumCta);
        txtNumCta.setBounds(180, 25, 0, 0);

        txtNumPro.setMaximumSize(null);
        txtNumPro.setPreferredSize(new java.awt.Dimension(70, 20));
        panCab.add(txtNumPro);
        txtNumPro.setBounds(180, 46, 0, 0);

        lblUsr.setText("Usuario:");
        lblUsr.setToolTipText("Tipo de documento");
        panCab.add(lblUsr);
        lblUsr.setBounds(0, 5, 70, 20);

        txtCodUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodUsrActionPerformed(evt);
            }
        });
        panCab.add(txtCodUsr);
        txtCodUsr.setBounds(40, 5, 32, 20);

        txtDesCorUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorUsrActionPerformed(evt);
            }
        });
        txtDesCorUsr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorUsrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorUsrFocusLost(evt);
            }
        });
        panCab.add(txtDesCorUsr);
        txtDesCorUsr.setBounds(72, 5, 80, 20);

        txtDesLarUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarUsrActionPerformed(evt);
            }
        });
        txtDesLarUsr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarUsrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarUsrFocusLost(evt);
            }
        });
        panCab.add(txtDesLarUsr);
        txtDesLarUsr.setBounds(152, 5, 368, 20);

        butUsr.setText("...");
        butUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUsrActionPerformed(evt);
            }
        });
        panCab.add(butUsr);
        butUsr.setBounds(520, 5, 20, 20);

        panDat.add(panCab, java.awt.BorderLayout.NORTH);

        panDet.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDet.setViewportView(tblDat);

        panDet.add(spnDet, java.awt.BorderLayout.CENTER);

        panDat.add(panDet, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panDat);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());
        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
// TODO add your handling code here:
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="¿Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                if(con!=null){
                    con.close();
                    con=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e)
        {
            dispose();
        }
            
}//GEN-LAST:event_exitForm

    private void txtCodUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodUsrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodUsrActionPerformed

    private void txtDesCorUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorUsrActionPerformed
        txtDesCorUsr.transferFocus();
      
    }//GEN-LAST:event_txtDesCorUsrActionPerformed

    
    private void txtDesCorUsrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorUsrFocusGained
        strDesCorUsr=txtDesCorUsr.getText();
        txtDesCorUsr.selectAll();
    }//GEN-LAST:event_txtDesCorUsrFocusGained

    private void txtDesCorUsrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorUsrFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesCorUsr.getText().equalsIgnoreCase(strDesCorUsr))
        {
            if (txtDesCorUsr.getText().equals(""))
            {
                txtCodUsr.setText("");
                txtDesLarUsr.setText("");
            }
            else
            {
                mostrarVenConUsr(1);
            }
        }
        else
        txtDesCorUsr.setText(strDesCorUsr);
    }//GEN-LAST:event_txtDesCorUsrFocusLost

    private void txtDesLarUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarUsrActionPerformed
        txtDesLarUsr.transferFocus();
    }//GEN-LAST:event_txtDesLarUsrActionPerformed

    private void txtDesLarUsrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarUsrFocusGained
        strDesLarUsr=txtDesLarUsr.getText();
        txtDesLarUsr.selectAll();
    }//GEN-LAST:event_txtDesLarUsrFocusGained

    private void txtDesLarUsrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarUsrFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesLarUsr.getText().equalsIgnoreCase(strDesLarUsr))
        {
            if (txtDesLarUsr.getText().equals(""))
            {
                txtCodUsr.setText("");
                txtDesCorUsr.setText("");
            }
            else
            {
                mostrarVenConUsr(2);
            }
        }
        else
        txtDesLarUsr.setText(strDesLarUsr);
    }//GEN-LAST:event_txtDesLarUsrFocusLost

    private void butUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUsrActionPerformed
        mostrarVenConUsr(0);
    }//GEN-LAST:event_butUsrActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butUsr;
    private javax.swing.JLabel lblTit;
    private javax.swing.JLabel lblUsr;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panDat;
    private javax.swing.JPanel panDet;
    private javax.swing.JPanel panFrm;
    private javax.swing.JScrollPane spnDet;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodUsr;
    private javax.swing.JTextField txtDesCorUsr;
    private javax.swing.JTextField txtDesLarUsr;
    private javax.swing.JTextField txtNumCta;
    private javax.swing.JTextField txtNumPro;
    // End of variables declaration//GEN-END:variables

//    /** Cerrar la aplicación. */
    private void exitForm(){
        dispose();
    }   
    
        
//    /** Configurar el formulario. */
    private boolean configurarFrm(){
        boolean blnRes=true;
        
        try{
            //Inicializar objetos.
            System.out.println("configurarFrm....");
            objUti=new ZafUtil();
            objTooBar=new MiToolBar(this);
            objTooBar.setVisibleAnular(false);
            panBar.add(objTooBar);
            blnPre=false;
            intSelPrd=0;
            this.setTitle(objParSis.getNombreMenu() + " v0.1.2");
            lblTit.setText(objParSis.getNombreMenu());
            txtDesCorUsr.setBackground(objParSis.getColorCamposObligatorios());
            txtCodUsr.setBackground(objParSis.getColorCamposObligatorios());
            txtDesLarUsr.setBackground(objParSis.getColorCamposObligatorios());
            configurarVenConUsr();
            txtCodUsr.setVisible(false);
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(7);   //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_NOM_USR,"Nom.Usr.");
            vecCab.add(INT_TBL_DAT_TIP_SIS,"Tip.Sis.");
            vecCab.add(INT_TBL_DAT_DIR_IP,"Dir.Ip.");
            vecCab.add(INT_TBL_DAT_DIR_MAC,"Dir.Mac.");
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_NOM_USR).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_TIP_SIS).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_DAT_DIR_IP).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_DAT_DIR_MAC).setPreferredWidth(150);
            if(objParSis.getCodigoUsuario()!=128)//DANNY Obando
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_NOM_USR, tblDat);
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_DAT_TIP_SIS).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_TIP_SIS);
            vecAux.add("" + INT_TBL_DAT_DIR_IP);
            vecAux.add("" + INT_TBL_DAT_DIR_MAC);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            //Configurar JTable: Editor de la tabla.
            //objTblEdi=new ZafTblEdi(tblDat);
            //Configurar JTable: Renderizar celdas.
            
            objTblCelRenCmbBox=new ZafTblCelRenCbo();
            tcmAux.getColumn(INT_TBL_DAT_TIP_SIS).setCellRenderer(objTblCelRenCmbBox);
            objTblCelEdiCmbBox=new ZafTblCelEdiCbo(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_TIP_SIS).setCellEditor(objTblCelEdiCmbBox);
            
            cargarComboTipoSis();
            ///////////////////////////////
            //Configurar ZafTblMod: Establecer el tipo de dato de las columnas.
            //////////////////////////////
            objTblCelEdiTxt=new ZafTblCelEdiTxt(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_DIR_MAC).setCellEditor(objTblCelEdiTxt);
            objTblCelEdiTxt.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                String temp="";
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    
                    temp= objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_DIR_MAC).toString().toUpperCase();
                    strMacDir=temp;//PARA LA MASCARA DE LAS LINEAS
                    setPuntos();
                    objTblMod.setValueAt(strMacDir, tblDat.getSelectedRow(), INT_TBL_DAT_DIR_MAC);
                    if(strMacDir!="")
                        objTblMod.insertRow();
                }
            });
                
            ///////Configurar JTable: Detectar cambios de valores en las celdas.
            objTblModLis=new ZafTblModLis();
            objTblMod.addTableModelListener(objTblModLis);
            ///////objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            objTblOrd=new ZafTblOrd(tblDat);
            objTblBus=new ZafTblBus(tblDat);
            objTooBar.setVisibleAnular(false);
            objDocLis=new ZafDocLis();
            System.out.println("Se configuara la tabla!!!!... ");
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    private void setPuntos(){
        System.out.println("setPuntos: " + strMacDir);
        String strMac=strMacDir;
        String strMacDes="";
        int intFlag=0;
        //obtengo la longitud de mi cadena
        /*DIRECCION MACC 74-86-7A-1C-7F-2F =COMPLETA 16  José Marín  
                         74867A1C7F2F  = INCOMPLETA 11
         */
        int intLonMac=strMac.length();
        System.out.println(":::: " + intLonMac );
        if(intLonMac==12){  //CADENA INCOMPLETA
            System.out.println("CADENA INCOMPLETA: ");
            for(int i=0;i<intLonMac;i++){
                strMacDes+=strMac.charAt(i);
                 switch(i)
                 {
                     case 1: 
                        case 3: 
                            case 5:
                                case 7:
                                     case 9:
                                        strMacDes+="-";  break; 
                 }
            }
            intFlag=1;
            strMacDir=strMacDes;
        }
        else if(intLonMac==17){
            System.out.println("CADENA COMPLETA: ");
            if(strMac.charAt(2)=='-' && strMac.charAt(5)=='-' && strMac.charAt(8)=='-' && strMac.charAt(11)=='-' && strMac.charAt(14)=='-' ){
                intFlag=1;
                strMacDir=strMac;
            }
            else{
                for(int i=0;i<intLonMac;i++){
                    if((i==0)||(i==1)||(i==3)||(i==4)||(i==6)||(i==7)||(i==9)||(i==10)||(i==12)||(i==13)||(i==15)||(i==16))
                    strMacDes+=strMac.charAt(i);
                     switch(i)
                     {
                         case 2: 
                            case 5: 
                                case 8:
                                    case 11:
                                         case 14:
                                            strMacDes+="-";  break; 
                     }
                }
             intFlag=1;
             strMacDir=strMacDes;   
            }
        }
        if(intFlag==0)
        {
             mostrarMsgInf("Dirección Macc incorrecta.");
             strMacDir="";
        }
    }
    
 
    
//    /**
//     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
//     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
//     * insertar, consultar, modificar, eliminar, etc. Además de los botones de navegación
//     * que permiten desplazarse al primero, anterior, siguiente y último registro.
//     */
    private class MiToolBar extends ZafToolBar{
        public MiToolBar(javax.swing.JInternalFrame ifrFrm)
        {
            super(ifrFrm, objParSis);
        }

        public boolean anular()
        {
            return true;
        }

        public void clickAceptar()
        {
            System.out.println("clickAceptar....");
        }

        public void clickAnterior() 
        {
            try{
                System.out.println("clickAnterior....");
                if (!rstCab.isFirst()){
                    if (blnHayCam || objTblMod.isDataModelChanged()){
                        if (isRegPro()){
                            rstCab.previous();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.previous();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnular()
        {
            
        }

        public void clickCancelar()
        {
            System.out.println("clickCancelar....");
            intSelPrd=0;
            limpiarFrm();
        }

        public void clickConsultar(){
            System.out.println("clickConsultar::..");
           // consultarReg();
            objTblMod.setDataModelChanged(false);
        }

        public void clickEliminar()
        {
            
        }

        public void clickFin() 
        {
            try{
                System.out.println("clickFin....");
                if (!rstCab.isLast()){
                    if (blnHayCam  || objTblMod.isDataModelChanged()){
                        if (isRegPro()){
                            rstCab.last();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.last();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickImprimir()
        {
            
        }

        public void clickInicio()
        {
            try{
                System.out.println("clickInicio....");
                if (!rstCab.isFirst()){
                    if (blnHayCam  || objTblMod.isDataModelChanged()){
                        if (isRegPro()){
                            rstCab.first();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.first();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickInsertar(){
            try{
                System.out.println("clickInsertar....");
                if (blnHayCam){
                    isRegPro();
                }
                if (rstCab!=null){
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                //cargarReportesSistema();
                intSelRepSelPrd=0;
                limpiarFrm();
               // consultarReg();
              // cargarOpcMnu();
                txtDesCorUsr.requestFocus();
                objTblMod.setModoOperacion(ZafTblMod.INT_TBL_INS);
                objTblMod.setDataModelChanged(false);
                blnHayCam=false;
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            
            
            
            
        }

        public void clickModificar()
        {
            System.out.println("clickModificar....");
            txtDesCorUsr.setEditable(false);
            txtDesLarUsr.setEditable(false);
            butUsr.setEnabled(false);
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            objTblMod.setDataModelChanged(false);
            //cargarDetReg();
            //blnPre=true;
        }

        public void clickSiguiente()
        {
            try{
                System.out.println("clickSiguiente....");
                if (!rstCab.isLast()){
                    if (blnHayCam  || objTblMod.isDataModelChanged()){
                        if (isRegPro()){
                            rstCab.next();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.next();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickVisPreliminar() 
        {
        }

        public boolean consultar(){
            System.out.println("consultar....");
            if(objParSis.getCodigoUsuario()!=128)
                consultarReg();
            else
                cargarDetReg();
             return true;
        }

        public boolean eliminar(){
            try{
                System.out.println("eliminar....");
                if (!eliminarReg())
                    return false;
                //Desplazarse al siguiente registro si es posible.
                if (!rstCab.isLast()){
                    rstCab.next();
                    cargarReg();
                }
                else{
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                }
                blnHayCam=false;
            }
            catch (java.sql.SQLException e){
                return true;
            }
            return true;
            
            
            
            
            
        }

        public boolean insertar()
        {
            System.out.println("insertar....");
            if (!insertarReg())
                return false;
            return true;
        }

        public boolean modificar(){
        System.out.println("modificar....");
            if (!actualizarReg())
                return false;
            return true;
        }
        
        public boolean cancelar()
        {
            System.out.println("cancelar....");
            boolean blnRes=true;
            try{
                if (blnHayCam){
                    if (objTooBar.getEstado()=='n' || objTooBar.getEstado()=='m'){
                        if (!isRegPro())
                            return false;
                    }
                }
                if (rstCab!=null){
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                objTblMod.clearRowHeaderRaise();
                limpiarFrm();
                //Inicializar las variables que indican cambios.
                objTblMod.setDataModelChanged(false);
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            limpiarFrm();
            blnHayCam=false;
            return blnRes;
        }
        
        public boolean vistaPreliminar()
        {
            return true;
        }
        
        public boolean aceptar()
        {
            return true;
        }
        
        public boolean imprimir()
        {
            return true;
        }
        
        public boolean beforeInsertar(){
            System.out.println("beforeInsertar....");
            boolean blnRes=true;
            if(!isCamVal()){
                blnRes=false;
            }
            if (objTblMod.getRowCountTrue()==0)
            {
                mostrarMsgAdv("El documento no tiene ninguna fila en el detalle.\n");
                blnRes=false;
            }
            return blnRes;
        }
        
        public boolean beforeConsultar(){
            
            return true;
        }

        public boolean beforeModificar()
        {
            if (!(blnHayCam || objTblMod.isDataModelChanged()))
            {
                mostrarMsgInf("No ha realizado ningún cambio que se pueda guardar.");
                return false;
            }
            if(objParSis.getCodigoUsuario()==128)
            {
                if(txtCodUsr.getText().length()==0)
                {
                    System.out.println("EsObando");
                    mostrarMsgInf("No se puede modificar en este tipo de consulta.");
                    return false;
                }
            }
           
            return true;
        }

        public boolean beforeEliminar()
        {

            return true;
        }

        public boolean beforeAnular()
        {
            return true;
        }

        public boolean beforeImprimir()
        {
            return true;
        }

        public boolean beforeVistaPreliminar()
        {
            return true;
        }

        public boolean beforeAceptar()
        {
            return true;
        }
        
        public boolean beforeCancelar()
        {
            return true;
        }
        
        public boolean afterInsertar()
        {
            System.out.println("afterInsertar....");
            blnHayCam=false;
            //Configurar JFrame de acuerdo al estado del registro.
            objTooBar.setEstado('n');
            intSelPrd=0;
           // consultarReg();
            objTblMod.initRowsState();
            blnHayCam=false;
            return true;
        }

        public boolean afterConsultar()
        {
            System.out.println("afterConsultar....");
            intSelPrd=0;
            objTblMod.initRowsState();
            
            if(objParSis.getCodigoUsuario()==128)
            {
                if(txtCodUsr.getText().length()==0)
                {
                    System.out.println("EsObando");
                    objTooBar.setEnabledModificar(false);
                    objTooBar.setEnabledEliminar(false);
                    objTooBar.setEnabledInsertar(false);
                }
            }
            return true;
        }

        public boolean afterModificar()
        {
            System.out.println("afterModificar....");
            intSelPrd=0;
            blnHayCam=false;
            objTblMod.initRowsState();
           // limpiarFrm();
            return true;
        }

        public boolean afterEliminar()
        {
            System.out.println("afterEliminar....");
            intSelPrd=0;
            objTblMod.initRowsState();
            return true;
        }

        public boolean afterAnular()
        {
            System.out.println("afterAnular....");
            intSelPrd=0;
            objTblMod.initRowsState();
            return true;
        }

        public boolean afterImprimir()
        {
            return true;
        }

        public boolean afterVistaPreliminar()
        {
            return true;
        }

        public boolean afterAceptar()
        {
            return true;
        }
        
        public boolean afterCancelar()
        {
            return true;
        }
        
    }
    
    
//    /**
//     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
//     * del mouse (mover el mouse; arrastrar y soltar).
//     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
//     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
//     * resulta muy corto para mostrar leyendas que requieren más espacio.
//     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_NOM_USR:
                    strMsg="Nombre del usuario";
                    break;
                case INT_TBL_DAT_TIP_SIS:
                    strMsg="Tipo de Sistema";
                    break;
                case INT_TBL_DAT_DIR_IP:
                    strMsg="Dirección IP";
                    break;
                case INT_TBL_DAT_DIR_MAC:
                    strMsg="MAC Address";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
    
    private boolean isCamVal(){
        
        
        //Validar el "Tipo de documento".
        if(objParSis.getCodigoUsuario()!=128)
        {
            if (txtDesCorUsr.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Usuario</FONT> es obligatorio.<BR>Escriba o seleccione un usuario y vuelva a intentarlo.</HTML>");
            txtDesCorUsr.requestFocus();
            return false;
            }
        }
        
        if(isRegInsertados()){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El usuario seleccionado ya ha sido ingresado.<BR>Consulte el usuario y luego modifiquelo.</HTML>");
            txtDesCorUsr.requestFocus();
            return false;
        }
        return true;
    }
    
    /**
     * Esta funci�n muestra un mensaje informativo al usuario. Se podr�a utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
  
    private boolean isRegInsertados(){
        boolean blnRes=false;
        try{
            System.out.println("isRegInsertados....");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                 strSQL+="SELECT *";
                 strSQL+=" FROM tbm_equUsrIngSis ";
                 strSQL+=" WHERE co_usr=" + txtCodUsr.getText() + "";
                 System.out.println(strSQL);
                 rst=stm.executeQuery(strSQL);
                 if(rst.next())
                     blnRes=true;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                con.close();
                con=null;
            }
            
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    private boolean insertarReg(){
        boolean blnRes=false;
        try{
            System.out.println("insertarReg.....");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (insertar_tbrRptSisUsr()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean insertar_tbrRptSisUsr(){
        boolean blnRes=true;
        int intReg=1;
        try{
            if (con!=null){
                stm=con.createStatement();
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    strSQL="";
                    strSQL+="INSERT INTO tbm_equUsrIngSis(";
                    strSQL+="co_usr,co_reg,tx_tipSis,tx_dirIp,tx_macAdd)";
                    strSQL+="VALUES (";
                    strSQL+="" + txtCodUsr.getText() + ",";
                    strSQL+="" + intReg + ",";
                    if(objTblMod.getValueAt(i, INT_TBL_DAT_TIP_SIS).equals("Escritorio"))
                        strSQL+=" 'E',";
                    else if(objTblMod.getValueAt(i, INT_TBL_DAT_TIP_SIS).equals("Web"))
                        strSQL+=" 'W',";
                    strSQL+=" '" + objTblMod.getValueAt(i, INT_TBL_DAT_DIR_IP) + "',";
                    strSQL+=" '" + objTblMod.getValueAt(i, INT_TBL_DAT_DIR_MAC).toString().toUpperCase() + "'";
                    strSQL+=");";
                    intReg++;
                    System.out.println(strSQL);
                    stm.executeUpdate(strSQL);
                }           
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean limpiarFrm(){
        txtCodUsr.setText("");
        txtDesCorUsr.setText("");
        txtDesLarUsr.setText("");
        objTblMod.removeAllRows();
        objTooBar.setEnabledModificar(true);
                    objTooBar.setEnabledEliminar(true);
                    objTooBar.setEnabledInsertar(true);
        return true;
    }

    
    /**
     * Esta funci�n permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean consultarReg(){
        int intCodEmp, intCodLoc;
        boolean blnRes=true;
        try{
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null){
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                //Validar que s�lo se muestre los documentos asignados al programa.
                strSQL="";
                strSQL+=" SELECT DISTINCT a1.co_usr";
                strSQL+=" FROM tbm_equUsrIngSis a1 ";
                if (!txtCodUsr.getText().equals(""))
                    strSQL+=" WHERE a1.co_usr=" + txtCodUsr.getText();
                strSQL+=" GROUP BY a1.co_usr";
                strSQL+=" ORDER BY a1.co_usr";
                System.out.println("consultarReg......rstCab: " + strSQL);
                rstCab=stmCab.executeQuery(strSQL);
                if (rstCab.next())
                {
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                }
                else
                {
                    mostrarMsgInf("No se ha encontrado ning�n registro que cumpla el criterio de b�squeda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
//    /**
//     * Esta funci�n permite cargar el registro seleccionado.
//     * @return true: Si se pudo cargar el registro.
//     * <BR>false: En el caso contrario.
//     */
    private boolean cargarReg()
    {
        boolean blnRes=true;
        try
        {
            System.out.println("cargarReg....");
            if (cargarCabReg())
            {
                cargarDetReg();
            }
            blnHayCam=false;
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }
    
//    /**
//     * Esta funci�n permite cargar la cabecera del registro seleccionado.
//     * @return true: Si se pudo cargar la cabecera del registro.
//     * <BR>false: En el caso contrario.
//     */
    private boolean cargarCabReg(){
        int intPosRel;
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+=" SELECT a1.co_usr,a2.tx_usr,a2.tx_nom";
                strSQL+=" FROM tbm_equUsrIngSis as a1";
                strSQL+=" INNER JOIN tbm_usr as a2 ON (a1.co_usr=a2.co_usr)";
                strSQL+=" WHERE a1.co_usr="+ rstCab.getString("co_usr") + "";
                System.out.println("cargarCabReg::.. " + strSQL);
                rst=stm.executeQuery(strSQL);
                if (rst.next()){
                    strAux=rst.getString("co_usr");
                    txtCodUsr.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_usr");
                    txtDesCorUsr.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_nom");
                    txtDesLarUsr.setText((strAux==null)?"":strAux);
                }
                else
                {
                    limpiarFrm();
                    blnRes=false;
                }
            }
            rst.close();
            stm.close();
            con.close();
            rst=null;
            stm=null;
            con=null;
            //Mostrar la posici�n relativa del registro.
            intPosRel=rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
   
//    /**
//     * Esta funci�n permite cargar el detalle del registro seleccionado.
//     * @return true: Si se pudo cargar el detalle del registro.
//     * <BR>false: En el caso contrario.
//     */
    private boolean cargarDetReg(){
        String strAux="";
        int band=0;
        boolean blnRes=true;
        try{
            objTblMod.removeAllRows();
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+=" SELECT a1.co_usr,a2.tx_usr,a1.co_reg,a1.tx_tipSis,a1.tx_dirIp,a1.tx_macAdd  ";
                strSQL+=" FROM tbm_equUsrIngSis as a1";
                strSQL+=" INNER JOIN tbm_usr as a2 ON (a1.co_usr=a2.co_usr)";
                if(objParSis.getCodigoUsuario()!=128)
                    strSQL+=" WHERE a1.co_usr=" + rstCab.getString("co_usr") + "";
                if(objParSis.getCodigoUsuario()==128)
                {
                    if(txtCodUsr.getText().length()>0)
                    {
                        strSQL+=" WHERE a1.co_usr=" + txtCodUsr.getText();
                    }
                }
                strSQL+=" ORDER BY a1.co_usr";
                System.out.println("cargarDetReg::.." + strSQL);
                
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                while (rst.next()){
                    band=1;
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN,"");
                    vecReg.add(INT_TBL_DAT_NOM_USR,rst.getString("tx_usr"));
                    if(rst.getString("tx_tipSis").equals("W"))
                        vecReg.add(INT_TBL_DAT_TIP_SIS,"Web");
                    else if((rst.getString("tx_tipSis").equals("E")))
                        vecReg.add(INT_TBL_DAT_TIP_SIS,"Escritorio");
                    vecReg.add(INT_TBL_DAT_DIR_IP,rst.getString("tx_dirIp"));
                    vecReg.add(INT_TBL_DAT_DIR_MAC,rst.getString("tx_macAdd"));
                    vecDat.add(vecReg);
              }
                if(objParSis.getCodigoUsuario()==128)
                {
                    if(band==0)
                    {
                        mostrarMsgInf("No se ha encontrado ning�n registro que cumpla el criterio de b�squeda especificado.");
                        limpiarFrm();
                        objTooBar.setEstado('l');
                        objTooBar.setMenSis("Listo");
                    }
                }
                
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                objTooBar.setMenSis("Listo");
            }

        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean actualizarReg(){
        boolean blnRes=false;
        try{
            System.out.println("actualizarReg....");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (eliminar_tbrRptSisUsr()){
                    if (insertar_tbrRptSisUsr()){
                        con.commit();
                        blnRes=true;
                    }
                    else
                        con.rollback();
                }
                else
                    con.rollback();


            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean eliminar_tbrRptSisUsr(){
        boolean blnRes=true;
        try{
            System.out.println("eliminar_tbrRptSisUsr....");
            if (con!=null){
                 stm=con.createStatement();
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    strSQL="";
                    strSQL+=" DELETE FROM tbm_equUsrIngSis";
                    strSQL+=" WHERE co_usr=" + txtCodUsr.getText() + " ";
                    System.out.println(strSQL);
                    stm.executeUpdate(strSQL);
                }
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean eliminarReg(){
        boolean blnRes=false;
        try{
            System.out.println("eliminarReg....");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (eliminar_tbrRptSisUsr()){
                    con.commit();
                    blnRes=true;
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                }
                else
                    con.rollback();
                con.close();
                con=null;
            }
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
   
//    /**
//     * Esta clase implementa la interface DocumentListener que observa los cambios que
//     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
//     * Se la usa en el sistema para determinar si existe alg�n cambio que se deba grabar
//     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
//     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
//     * presentar� un mensaje advirtiendo que si no guarda los cambios los perder�.
//     */
    class ZafDocLis implements javax.swing.event.DocumentListener 
    {
        public void changedUpdate(javax.swing.event.DocumentEvent evt)        {
            blnHayCam=true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }
    }
    
    
//    /**
//     * Esta funci�n se encarga de agregar el listener "DocumentListener" a los objetos
//     * de tipo texto para poder determinar si su contenido a cambiado o no.
//     */
    private boolean isRegPro()
    {
        System.out.println("isRegPro....");
        boolean blnRes=true;
        strAux="�Desea guardar los cambios efectuados a �ste registro?\n";
        strAux+="Si no guarda los cambios perder� toda la informaci�n que no haya guardado.";
        switch (mostrarMsgCon(strAux))
        {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado())
                {
                    case 'n': //Insertar
                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }
    
//    /**
//     * Esta funci�n muestra un mensaje "showConfirmDialog". Presenta las opciones
//     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
//     * seleccionando una de las opciones que se presentan.
//     */
    
    private int mostrarMsgCon(String strMsg){
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    //    /**
//     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
//     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
//     * seleccionando una de las opciones que se presentan.
//     * @param strMsg El mensaje que se desea mostrar en el cuadro de diálogo.
//     * @param blnMosBotCan Un valor booleano que deteremina si se debe mostrar el botón "Cancelar".
//     * @return La opción que seleccionó el usuario.
//     */
    private int mostrarMsgCon(String strMsg, boolean blnMosBotCan)
    {
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return javax.swing.JOptionPane.showConfirmDialog(this, strMsg, strTit, (blnMosBotCan==true?javax.swing.JOptionPane.YES_NO_CANCEL_OPTION:javax.swing.JOptionPane.YES_NO_OPTION), javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    
//    /**
//     * Esta funci�n se encarga de agregar el listener "DocumentListener" a los objetos
//     * de tipo texto para poder determinar si su contenido a cambiado o no.
//     */
    
    private void agregarDocLis()
    {
        System.out.println("agregarDocLis....");
        txtDesCorUsr.getDocument().addDocumentListener(objDocLis);
        txtDesLarUsr.getDocument().addDocumentListener(objDocLis);

    }
    
    
    
//    /**
//     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
//     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
//     * una búsqueda directa (No se muestra la ventana de consulta a menos que no 
//     * exista lo que se está buscando) o presentar la ventana de consulta para que
//     * el usuario seleccione la opción que desea utilizar.
//     * @param intTipBus El tipo de búsqueda a realizar.
//     * @return true: Si no se presentó ningún problema.
//     * <BR>false: En el caso contrario.
//     */
    
    private boolean mostrarVenConUsr(int intTipBus)
    {
        //System.out.println("mostrarVenConUsr...");
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoUsr.setCampoBusqueda(2);
                    vcoUsr.setVisible(true);
                    if (vcoUsr.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                    {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Descripción corta".
                    if (vcoUsr.buscar("a1.tx_usr", txtDesCorUsr.getText()))
                    {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    }
                    else
                    {
                        vcoUsr.setCampoBusqueda(1);
                        vcoUsr.setCriterio1(11);
                        vcoUsr.cargarDatos();
                        vcoUsr.setVisible(true);
                        if (vcoUsr.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodUsr.setText(vcoUsr.getValueAt(1));
                            txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                            txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                        }
                        else
                        {
                            txtDesCorUsr.setText(strDesCorUsr);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoUsr.buscar("a1.tx_nom", txtDesLarUsr.getText()))
                    {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    }
                    else
                    {
                        vcoUsr.setCampoBusqueda(2);
                        vcoUsr.setCriterio1(11);
                        vcoUsr.cargarDatos();
                        vcoUsr.setVisible(true);
                        if (vcoUsr.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodUsr.setText(vcoUsr.getValueAt(1));
                            txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                            txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                        }
                        else
                        {
                            txtDesLarUsr.setText(strDesLarUsr);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
//    /**
//     * Esta función configura la "Ventana de consulta" que será utilizada para
//     * mostrar los "Usuarios".
//     */
    private boolean configurarVenConUsr()
    {
        boolean blnRes=true;
        try
        {
            
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_usr");
            arlCam.add("a1.tx_usr");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Usuario");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("120");
            arlAncCol.add("374");
            //Armar la sentencia SQL.
            strSQL=" ";
            strSQL+=" SELECT DISTINCT a1.co_usr, a1.tx_usr, a1.tx_nom ";
            strSQL+=" FROM tbm_usr AS a1";
            strSQL+=" LEFT OUTER JOIN tbr_usrEmp AS a2 ON (a1.co_usr=a2.co_usr)";
            strSQL+=" WHERE a1.st_reg='A'";
            strSQL+=" ORDER BY a1.tx_nom ";
            System.out.println("configurarVenConUsr...." + strSQL);
            vcoUsr=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de usuarios", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoUsr.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
       
      
      private boolean cargarComboTipoSis(){
        objTblCelEdiCmbBox.removeAllItems();
        objTblCelEdiCmbBox.addItem(" ");
        objTblCelEdiCmbBox.addItem("Escritorio");
        objTblCelEdiCmbBox.addItem("Web");
        return true;
    }
        
       /**
     * Esta clase hereda de la interface TableModelListener que permite determinar
     * cambios en las celdas del JTable.
     */
    private class ZafTblModLis implements javax.swing.event.TableModelListener
    {
        public void tableChanged(javax.swing.event.TableModelEvent e)
        {
            switch (e.getType())
            {
                case javax.swing.event.TableModelEvent.INSERT:
                    break;
                case javax.swing.event.TableModelEvent.DELETE:
                    break;
                case javax.swing.event.TableModelEvent.UPDATE:
                    break;
            }
        }
    }
      
//    /**
//     * Esta función muestra un mensaje de advertencia al usuario. Se podría utilizar
//     * para mostrar al usuario un mensaje que indique que los datos se han cargado
//     * con errores y que debe revisar dichos datos.
//     */
    private void mostrarMsgAdv(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        if (strMsg.equals(""))
            strMsg="<HTML>Número de documento <FONT COLOR=\"red\">ya en uso </FONT>. <BR>.</HTML>";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.WARNING_MESSAGE);
    }
      
}
