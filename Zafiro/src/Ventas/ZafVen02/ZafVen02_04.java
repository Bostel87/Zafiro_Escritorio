/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ZafConItm_14.java
 *
 * Created on Oct 21, 2011, 12:17:13 PM
 */  
  
package Ventas.ZafVen02;
   
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafDate.ZafDatePicker;
import Librerias.ZafInventario.ZafInvItm;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter;
import Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafUtil.ZafUtil;
import java.awt.Dimension;
import java.awt.Frame;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author jayapata
 */ 
public class ZafVen02_04 extends JDialog {

    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod, objTblMod2;
    private ZafTblCelRenChk objTblCelRenChk, objTblCelRenChk2;
    private ZafTblCelEdiChk objTblCelEdiChk, objTblCelEdiChk2;
    private ZafInvItm objInvItm;

    private static final int INT_TBL_LIN=0;
    private static final int INT_TBL_CODEMP=1;
    private static final int INT_TBL_CODLOC=2;
    private static final int INT_TBL_CODTIDO=3;
    private static final int INT_TBL_CODDOC=4;
    private static final int INT_TBL_CODREG=5;
    private static final int INT_TBL_CODALT=6;
    private static final int INT_TBL_NOMITM=7;
    private static final int INT_TBL_UNIMED=8;
    private static final int INT_TBL_CANEGR=9;
    private static final int INT_TBL_CODBOD=10;
    private static final int INT_TBL_NOMBOD=11;
    private static final int INT_TBL_NUMDOC=12;
    private static final int INT_TBL_CHKCR=13;
    private static final int INT_TBL_SELMAR=14;
    private static final int INT_TBL_CODITM=15;
    private static final int INT_TBL_CODBODGRP=16;

    private ZafDatePicker txtFecCliRet;

    private Vector vecAux, vecCab, vecReg, vecDat;

    int intCodTipDoc=0, intCodDoc=0;

    /** Creates new form ZafConItm_14 */
    public ZafVen02_04(Frame parent, boolean modal, ZafParSis obj, int intCodTipDocRec, int intCodDocRec  ) {
        super(parent, modal);

        objParSis=obj;
        objUti=new ZafUtil();

        objInvItm=new ZafInvItm(this, objParSis);
        System.out.println("ZafVen02_04:  intCodTipDocRec " + intCodTipDocRec);
        intCodTipDoc=intCodTipDocRec;
        intCodDoc=intCodDocRec;
        
        initComponents();

        
        txtFecCliRet = new ZafDatePicker(((JFrame)this.getParent()),"d/m/y");
        txtFecCliRet.setPreferredSize(new Dimension(70, 20));
        txtFecCliRet.setText("");
        pancliret.add(txtFecCliRet);
        txtFecCliRet.setBounds(150, 5, 92, 20);


        configurarFrm();
        configurarFrm2();
        cargarDoc();
        cargarDoc2();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */



   private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
          //Configurar objetos.
            vecDat=new Vector();
            vecCab=new Vector();   //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_LIN,"");
            vecCab.add(INT_TBL_CODEMP,"Cod.Emp.");
            vecCab.add(INT_TBL_CODLOC,"Cod.Loc.");
            vecCab.add(INT_TBL_CODTIDO,"Cod.TipDoc.");
            vecCab.add(INT_TBL_CODDOC,"Cod.Doc.");
            vecCab.add(INT_TBL_CODREG,"Cod.Reg.");
            vecCab.add(INT_TBL_CODALT,"Cod.Alt.");
            vecCab.add(INT_TBL_NOMITM,"Nom.Itm.");
            vecCab.add(INT_TBL_UNIMED,"Uni.Med.");
            vecCab.add(INT_TBL_CANEGR,"Can.Egr.");
            vecCab.add(INT_TBL_CODBOD,"Cod.Bod");
            vecCab.add(INT_TBL_NOMBOD,"Bodega.");
            vecCab.add(INT_TBL_NUMDOC,"Num.OD.");
            vecCab.add(INT_TBL_CHKCR,"..");
            vecCab.add(INT_TBL_SELMAR,"");
            vecCab.add(INT_TBL_CODITM,"Cod.Itm");
            vecCab.add(INT_TBL_CODBODGRP, "Cod.Bod.Grp");

            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);

            //Configurar JTable: Establecer tipo de selecci√≥n.
             tblDat.setRowSelectionAllowed(true);
             tblDat.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            ZafColNumerada zafColNumerada = new ZafColNumerada(tblDat,INT_TBL_LIN);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

              /* Aqui se agrega las columnas que van
                ha hacer ocultas
             * */
            ArrayList arlColHid=new ArrayList();
            arlColHid.add(""+INT_TBL_CODEMP);
            arlColHid.add(""+INT_TBL_CODLOC);
            arlColHid.add(""+INT_TBL_CODTIDO);
            arlColHid.add(""+INT_TBL_CODDOC);
            arlColHid.add(""+INT_TBL_CODREG);
            arlColHid.add(""+INT_TBL_SELMAR);
            arlColHid.add(""+INT_TBL_CODITM);
            arlColHid.add(""+INT_TBL_CODBOD);
            arlColHid.add(""+INT_TBL_NUMDOC);
            arlColHid.add(""+INT_TBL_CODBODGRP);
            
            objTblMod.setSystemHiddenColumns(arlColHid, tblDat);
            arlColHid=null;
//             
            //Configurar JTable: Establecer el ancho de las columnas.
            TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_LIN).setPreferredWidth(25);
            tcmAux.getColumn(INT_TBL_CODALT).setPreferredWidth(120);
            tcmAux.getColumn(INT_TBL_NOMITM).setPreferredWidth(250);
            tcmAux.getColumn(INT_TBL_UNIMED).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_CANEGR).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_NOMBOD).setPreferredWidth(80);
           // tcmAux.getColumn(INT_TBL_NUMDOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_CHKCR).setPreferredWidth(30);
           
            tblDat.getTableHeader().setReorderingAllowed(false);

            objTblMod.setColumnDataType(INT_TBL_CANEGR, ZafTblMod.INT_COL_DBL, new Integer(0), null);

            ZafTblCelRenLbl objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setBackground(objParSis.getColorCamposObligatorios());
            objTblCelRenLbl.setHorizontalAlignment(JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(ZafTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_CANEGR).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;

             //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
//            vecAux.add("" + INT_TBL_CHKCR);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;


            objTblCelRenChk = new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_CHKCR).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk=null;

            objTblCelEdiChk = new ZafTblCelEdiChk();
            tcmAux.getColumn(INT_TBL_CHKCR).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new ZafTableAdapter() {
                @Override
                public void beforeEdit(ZafTableEvent evt){
                   int intColSel=tblDat.getSelectedRow();
                   String strEstCliR =( (tblDat.getValueAt(intColSel, INT_TBL_SELMAR)==null)?"":tblDat.getValueAt(intColSel, INT_TBL_SELMAR).toString() );
                   String strCodBodGrp = ((tblDat.getValueAt(intColSel, INT_TBL_CODBODGRP)==null)?"0":(tblDat.getValueAt(intColSel, INT_TBL_CODBODGRP).toString().equals("")?"0":tblDat.getValueAt(intColSel, INT_TBL_CODBODGRP).toString()));
                   System.out.println("Cod Bog Grp: " + strCodBodGrp);
                   
                   if(strEstCliR.equals("S"))
                       objTblCelEdiChk.setCancelarEdicion(true);
                   
                   /** BLOQUEO CLIENTE RETIRA EN MANTA Y SANTO DOMINGO. */
                   if (strCodBodGrp.equals("5") || strCodBodGrp.equals("11"))
                       objTblCelEdiChk.setCancelarEdicion(true);
                   
                }
                @Override
                public void afterEdit(ZafTableEvent evt) {
                }
            });
            //Configurar JTable: Editor de la tabla.
            ZafTblEdi zafTblEdi = new ZafTblEdi(tblDat);


             objTblMod.setModoOperacion(ZafTblMod.INT_TBL_EDI);
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }




   private boolean configurarFrm2()
    {
        boolean blnRes=true;
        try
        {
          //Configurar objetos.
            vecDat=new Vector();
            vecCab=new Vector();   //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_LIN,"");
            vecCab.add(INT_TBL_CODEMP,"Cod.Emp.");
            vecCab.add(INT_TBL_CODLOC,"Cod.Loc.");
            vecCab.add(INT_TBL_CODTIDO,"Cod.TipDoc.");
            vecCab.add(INT_TBL_CODDOC,"Cod.Doc.");
            vecCab.add(INT_TBL_CODREG,"Cod.Reg.");
            vecCab.add(INT_TBL_CODALT,"Cod.Alt.");
            vecCab.add(INT_TBL_NOMITM,"Nom.Itm.");
            vecCab.add(INT_TBL_UNIMED,"Uni.Med.");
            vecCab.add(INT_TBL_CANEGR,"Can.Egr.");
            vecCab.add(INT_TBL_CODBOD,"Cod.Bod");
            vecCab.add(INT_TBL_NOMBOD,"Bodega.");
            vecCab.add(INT_TBL_NUMDOC,"Num.OD.");
            vecCab.add(INT_TBL_CHKCR,"..");
            vecCab.add(INT_TBL_SELMAR,"");
            vecCab.add(INT_TBL_CODITM,"Cod.Itm");
            vecCab.add(INT_TBL_CODBODGRP, "Cod.Bod.Grp");

            objTblMod2=new ZafTblMod();
            objTblMod2.setHeader(vecCab);
            tblDat1.setModel(objTblMod2);

            //Configurar JTable: Establecer tipo de selecci√≥n.
             tblDat1.setRowSelectionAllowed(true);
             tblDat1.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            ZafColNumerada zafColNumerada = new ZafColNumerada(tblDat1,INT_TBL_LIN);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

              /* Aqui se agrega las columnas que van
                ha hacer ocultas
             * */
            ArrayList arlColHid=new ArrayList();
            arlColHid.add(""+INT_TBL_CODEMP);
            arlColHid.add(""+INT_TBL_CODLOC);
            arlColHid.add(""+INT_TBL_CODTIDO);
            arlColHid.add(""+INT_TBL_CODDOC);
            arlColHid.add(""+INT_TBL_CODREG);
            arlColHid.add(""+INT_TBL_SELMAR);
            arlColHid.add(""+INT_TBL_CODITM);
            arlColHid.add(""+INT_TBL_CODBOD);
            arlColHid.add(""+INT_TBL_CODBODGRP);
            objTblMod2.setSystemHiddenColumns(arlColHid, tblDat1);
            arlColHid=null;

            //Configurar JTable: Establecer el ancho de las columnas.
            TableColumnModel tcmAux=tblDat1.getColumnModel();
            tcmAux.getColumn(INT_TBL_LIN).setPreferredWidth(25);
            tcmAux.getColumn(INT_TBL_CODALT).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_NOMITM).setPreferredWidth(250);
            tcmAux.getColumn(INT_TBL_UNIMED).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_CANEGR).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_NOMBOD).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_NUMDOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_CHKCR).setPreferredWidth(30);

            tblDat1.getTableHeader().setReorderingAllowed(false);

            objTblMod2.setColumnDataType(INT_TBL_CANEGR, ZafTblMod.INT_COL_DBL, new Integer(0), null);

            ZafTblCelRenLbl objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setBackground(objParSis.getColorCamposObligatorios());
            objTblCelRenLbl.setHorizontalAlignment(JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(ZafTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_CANEGR).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;

             //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            objTblMod2.setColumnasEditables(vecAux);
            vecAux=null;


            objTblCelRenChk2 = new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_CHKCR).setCellRenderer(objTblCelRenChk2);
            objTblCelRenChk2=null;


            objTblCelEdiChk2 = new ZafTblCelEdiChk();
            tcmAux.getColumn(INT_TBL_CHKCR).setCellEditor(objTblCelEdiChk2);
            objTblCelEdiChk2.addTableEditorListener(new ZafTableAdapter() {
                @Override
                public void beforeEdit(ZafTableEvent evt){
                   

                }
                @Override
                public void afterEdit(ZafTableEvent evt) {
                }
            });
         
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



/**
 * MODIFICADO EFLORESA 2012-04-30
 * CONSULTA DE PEDIDOS EN OTRA EMPRESA.
 * MODIFICADO EFLORESA 2012-05-28
 * MEJORA AL QUERY DE CONSULTA. 
 */
private void cargarDoc(){
  Connection conn;
  Statement stm;
  ResultSet rst;
  String strSql="";
  try{
      conn = DriverManager.getConnection(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos());
      if(conn!=null){
         stm = conn.createStatement();

      vecDat.clear();

     /*strSql="select x3.co_emp, x3.tx_codalt,  sum(x3.nd_can) as nd_can, x3.tx_nomitm, x3.tx_unimed  "
     + " ,x5.st_cliretemprel, x5.tx_obscliretemprel, x6.co_bod, x6.tx_nom, x3.co_itm  "
     + " from tbr_detmovinv as x   "
     + " inner join tbr_detmovinv as x1 on (x1.co_emprel=x.co_emprel and x1.co_locrel=x.co_locrel and x1.co_tipdocrel=x.co_tipdocrel and x1.co_docrel=x.co_docrel and x1.co_regrel=x.co_regrel   "
     + " and ( x1.co_emp!=x.co_emp or x1.co_loc!=x.co_loc or x1.co_tipdoc!=x.co_tipdoc or x1.co_doc!=x.co_doc )  )   "
     + " inner join tbr_detmovinv as x2 on (x2.co_emp=x1.co_emp and x2.co_loc=x1.co_loc and x2.co_tipdoc=x1.co_tipdoc and x2.co_doc=x1.co_doc and x2.co_reg=x1.co_reg  )   "
     + " inner join tbm_detmovinv as x5 on (x5.co_emp=x2.co_emp and x5.co_loc=x2.co_loc and x5.co_tipdoc=x2.co_tipdoc and x5.co_doc=x2.co_doc and x5.co_reg=x2.co_reg )   "
     + " inner join tbm_detguirem as x3 on (x3.co_emprel=x5.co_emp and x3.co_locrel=x5.co_loc and x3.co_tipdocrel=x5.co_tipdoc and x3.co_docrel=x5.co_doc and x3.co_regrel=x5.co_reg )   "
     + " inner join tbm_cabguirem as x4 on (x4.co_emp=x3.co_emp and x4.co_loc=x3.co_loc and x4.co_tipdoc=x3.co_tipdoc and x4.co_doc=x3.co_doc )   "
     + " inner join tbm_bod as x6 on (x6.co_emp=x4.co_emp and x6.co_bod=x4.co_ptopar )   "
     + " where x.co_emp="+objParSis.getCodigoEmpresa()+" and x.co_loc="+objParSis.getCodigoLocal()+" and x.co_tipdoc="+intCodTipDoc+" and x.co_doc= "+intCodDoc+"  "
     + " and x.co_emprel="+objParSis.getCodigoEmpresa()+" and x4.st_coninv = 'P' "
     + " group by  x3.co_emp,  x3.tx_codalt, x3.tx_nomitm, x3.tx_unimed "
     + " ,x5.st_cliretemprel, x5.tx_obscliretemprel, x6.co_bod, x6.tx_nom, x3.co_itm  ";*/

     /*strSql="select distinct(x4.ne_numorddes), x3.co_emp, x3.tx_codalt, sum(x3.nd_can) as nd_can, x3.tx_nomitm, x3.tx_unimed  "
     + " ,x5.st_cliretemprel, x5.tx_obscliretemprel, x6.co_bod, x6.tx_nom, x3.co_itm  "
     + " from tbr_detmovinv as x   "
     + " inner join tbr_detmovinv as x1 on (x1.co_emprel=x.co_emprel and x1.co_locrel=x.co_locrel and x1.co_tipdocrel=x.co_tipdocrel and x1.co_docrel=x.co_docrel and x1.co_regrel=x.co_regrel   "
     + " and ( x1.co_emp!=x.co_emp or x1.co_loc!=x.co_loc or x1.co_tipdoc!=x.co_tipdoc or x1.co_doc!=x.co_doc )  )   "
     + " inner join tbr_detmovinv as x2 on (x2.co_emp=x1.co_emp and x2.co_loc=x1.co_loc and x2.co_tipdoc=x1.co_tipdoc and x2.co_doc=x1.co_doc and x2.co_reg=x1.co_reg  )   "
     + " inner join tbm_detmovinv as x5 on (x5.co_emp=x2.co_emp and x5.co_loc=x2.co_loc and x5.co_tipdoc=x2.co_tipdoc and x5.co_doc=x2.co_doc and x5.co_reg=x2.co_reg )   "
     + " inner join tbm_detguirem as x3 on (x3.co_emprel=x5.co_emp and x3.co_locrel=x5.co_loc and x3.co_tipdocrel=x5.co_tipdoc and x3.co_docrel=x5.co_doc and x3.co_regrel=x5.co_reg )   "
     + " inner join tbm_cabguirem as x4 on (x4.co_emp=x3.co_emp and x4.co_loc=x3.co_loc and x4.co_tipdoc=x3.co_tipdoc and x4.co_doc=x3.co_doc )   "
     + " inner join tbm_bod as x6 on (x6.co_emp=x4.co_emp and x6.co_bod=x4.co_ptopar )   "
     + " where x.co_emp="+objParSis.getCodigoEmpresa()+" and x.co_loc="+objParSis.getCodigoLocal()+" and x.co_tipdoc="+intCodTipDoc+" and x.co_doc= "+intCodDoc+"  "
     + " and x.co_emprel="+objParSis.getCodigoEmpresa()+" and x4.st_coninv = 'P' "
     + " group by x4.ne_numorddes, x3.tx_codalt, x3.co_emp, x3.tx_nomitm, x3.tx_unimed, x5.st_cliretemprel, x5.tx_obscliretemprel, x6.co_bod, x6.tx_nom, x3.co_itm ";*/

     /*strSql=" select ne_numorddes, sum(nd_can) as nd_can, co_emp, tx_codalt, tx_nomitm, tx_unimed, st_cliretemprel, tx_obscliretemprel, co_bod, tx_nom, co_itm from ( "
          + " select distinct(x4.ne_numorddes) as ne_numorddes, x3.nd_can as nd_can, x3.co_emp, x3.tx_codalt, x3.tx_nomitm, x3.tx_unimed,x5.st_cliretemprel, x5.tx_obscliretemprel, x6.co_bod, x6.tx_nom, x3.co_itm "
          + " from tbr_detmovinv as x "
          + " inner join tbr_detmovinv as x1 on (x1.co_emprel=x.co_emprel and x1.co_locrel=x.co_locrel and x1.co_tipdocrel=x.co_tipdocrel and x1.co_docrel=x.co_docrel and x1.co_regrel=x.co_regrel "
          + " and ( x1.co_emp!=x.co_emp or x1.co_loc!=x.co_loc or x1.co_tipdoc!=x.co_tipdoc or x1.co_doc!=x.co_doc ) ) "
          + " inner join tbr_detmovinv as x2 on (x2.co_emp=x1.co_emp and x2.co_loc=x1.co_loc and x2.co_tipdoc=x1.co_tipdoc and x2.co_doc=x1.co_doc and x2.co_reg=x1.co_reg ) "
          + " inner join tbm_detmovinv as x5 on (x5.co_emp=x2.co_emp and x5.co_loc=x2.co_loc and x5.co_tipdoc=x2.co_tipdoc and x5.co_doc=x2.co_doc and x5.co_reg=x2.co_reg ) "
          + " inner join tbm_detguirem as x3 on (x3.co_emprel=x5.co_emp and x3.co_locrel=x5.co_loc and x3.co_tipdocrel=x5.co_tipdoc and x3.co_docrel=x5.co_doc and x3.co_regrel=x5.co_reg ) "
          + " inner join tbm_cabguirem as x4 on (x4.co_emp=x3.co_emp and x4.co_loc=x3.co_loc and x4.co_tipdoc=x3.co_tipdoc and x4.co_doc=x3.co_doc ) "
          + " inner join tbm_bod as x6 on (x6.co_emp=x4.co_emp and x6.co_bod=x4.co_ptopar ) "
          + " where x.co_emp="+objParSis.getCodigoEmpresa()+" and x.co_loc="+objParSis.getCodigoLocal()+" and x.co_tipdoc="+intCodTipDoc+" and x.co_doc= "+intCodDoc+" "
          + " and x.co_emprel="+objParSis.getCodigoEmpresa()+" and x4.st_coninv = 'P' "
          + " group by x4.ne_numorddes, x3.tx_codalt, x3.co_emp, x3.tx_nomitm, x3.tx_unimed, x5.st_cliretemprel, x5.tx_obscliretemprel, x6.co_bod, x6.tx_nom, x3.co_itm, x3.nd_can "
          + " )as a "
          + " group by ne_numorddes, co_emp, tx_codalt, tx_nomitm, tx_unimed, st_cliretemprel, tx_obscliretemprel, co_bod, tx_nom, co_itm " ;*/

     strSql=" select ne_numorddes, sum(nd_can) as nd_can, co_emp, tx_codalt, tx_nomitm, tx_unimed, st_cliretemprel, tx_obscliretemprel, co_bod, tx_nom, co_itm, co_bodgrp "
          + " from ( "
          + " select distinct(x4.ne_numorddes) as ne_numorddes, x3.nd_can as nd_can, x3.co_emp, x3.tx_codalt, x3.tx_nomitm, x3.tx_unimed,x5.st_cliretemprel, x5.tx_obscliretemprel, x6.co_bod, x6.tx_nom, x3.co_itm, x7.co_bodgrp "
          + " from tbr_detmovinv as x "
          + " inner join tbr_detmovinv as x1 on (x1.co_emprel=x.co_emprel and x1.co_locrel=x.co_locrel and x1.co_tipdocrel=x.co_tipdocrel and x1.co_docrel=x.co_docrel and x1.co_regrel=x.co_regrel "
          + " and ( x1.co_emp!=x.co_emp or x1.co_loc!=x.co_loc or x1.co_tipdoc!=x.co_tipdoc or x1.co_doc!=x.co_doc ) ) "
          + " inner join tbr_detmovinv as x2 on (x2.co_emp=x1.co_emp and x2.co_loc=x1.co_loc and x2.co_tipdoc=x1.co_tipdoc and x2.co_doc=x1.co_doc and x2.co_reg=x1.co_reg ) "
          + " inner join tbm_detmovinv as x5 on (x5.co_emp=x2.co_emp and x5.co_loc=x2.co_loc and x5.co_tipdoc=x2.co_tipdoc and x5.co_doc=x2.co_doc and x5.co_reg=x2.co_reg ) "
          + " inner join tbm_detguirem as x3 on (x3.co_emprel=x5.co_emp and x3.co_locrel=x5.co_loc and x3.co_tipdocrel=x5.co_tipdoc and x3.co_docrel=x5.co_doc and x3.co_regrel=x5.co_reg ) "
          + " inner join tbm_cabguirem as x4 on (x4.co_emp=x3.co_emp and x4.co_loc=x3.co_loc and x4.co_tipdoc=x3.co_tipdoc and x4.co_doc=x3.co_doc ) "
          + " inner join tbm_bod as x6 on (x6.co_emp=x4.co_emp and x6.co_bod=x4.co_ptopar ) "
          + " inner join tbr_bodempbodgrp as x7 on (x7.co_emp=x6.co_emp and x7.co_bod=x6.co_bod ) "
          + " where x.co_emp="+objParSis.getCodigoEmpresa()+" and x.co_loc="+objParSis.getCodigoLocal()+" and x.co_tipdoc="+intCodTipDoc+" and x.co_doc= "+intCodDoc+" "
          + " and x.co_emprel="+objParSis.getCodigoEmpresa()+" and x4.st_coninv = 'P' "
          + " group by x4.ne_numorddes, x3.tx_codalt, x3.co_emp, x3.tx_nomitm, x3.tx_unimed, x5.st_cliretemprel, x5.tx_obscliretemprel, x6.co_bod, x6.tx_nom, x3.co_itm, x3.nd_can, x7.co_bodgrp "
          + " )as a "
          + " group by ne_numorddes, co_emp, tx_codalt, tx_nomitm, tx_unimed, st_cliretemprel, tx_obscliretemprel, co_bod, tx_nom, co_itm, co_bodgrp " ;
     
     System.out.println("ZafVen02_04.cargarDoc: " + strSql );
     rst=stm.executeQuery(strSql);
     while(rst.next()){

            vecReg=new Vector();
            vecReg.add(INT_TBL_LIN,"");
            vecReg.add(INT_TBL_CODEMP, rst.getString("co_emp") );
            vecReg.add(INT_TBL_CODLOC, "" );
            vecReg.add(INT_TBL_CODTIDO, "" );
            vecReg.add(INT_TBL_CODDOC, "" );
            vecReg.add(INT_TBL_CODREG, "" );
            vecReg.add(INT_TBL_CODALT, rst.getString("tx_codalt") );
            vecReg.add(INT_TBL_NOMITM, rst.getString("tx_nomitm") );
            vecReg.add(INT_TBL_UNIMED, rst.getString("tx_unimed") );
            vecReg.add(INT_TBL_CANEGR, rst.getString("nd_can") );
            vecReg.add(INT_TBL_CODBOD, rst.getString("co_bod") );
            vecReg.add(INT_TBL_NOMBOD, rst.getString("tx_nom") );
            vecReg.add(INT_TBL_NUMDOC,  "" );
            vecReg.add(INT_TBL_CHKCR, ((rst.getString("st_cliretemprel")==null?"":rst.getString("st_cliretemprel")).equals("S")?true:false));
            vecReg.add(INT_TBL_SELMAR, rst.getString("st_cliretemprel") );
            vecReg.add(INT_TBL_CODITM, rst.getString("co_itm") );
            vecReg.add(INT_TBL_CODBODGRP, rst.getString("co_bodgrp") );
            
            txtObs.setText( rst.getString("tx_obscliretemprel")  );

            vecDat.add(vecReg);
     }
      objTblMod.setData(vecDat);
      tblDat.setModel(objTblMod);
      vecDat.clear();

     rst.close();
     stm.close();
     conn.close();
     rst=null;
     stm=null;
     conn=null;


  }}catch(SQLException e)  {   objUti.mostrarMsgErr_F1(this, e);  }
    catch(Exception Evt)  {  objUti.mostrarMsgErr_F1(this, Evt);  }
}


private void cargarDoc2(){
  Connection conn;
  Statement stm;
  ResultSet rst;
  String strSql="";
  try{
      conn = DriverManager.getConnection(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos());
      if(conn!=null){
         stm = conn.createStatement();

      vecDat.clear();

     /*strSql="select x3.co_emp, x3.tx_codalt,  x3.nd_can as nd_can, x3.tx_nomitm, x3.tx_unimed  "
     + " ,x5.st_cliretemprel, x5.tx_obscliretemprel, x6.co_bod, x6.tx_nom, x3.co_itm , x4.st_coninv, x4.ne_numorddes "
     + " from tbr_detmovinv as x   "
     + " inner join tbr_detmovinv as x1 on (x1.co_emprel=x.co_emprel and x1.co_locrel=x.co_locrel and x1.co_tipdocrel=x.co_tipdocrel and x1.co_docrel=x.co_docrel and x1.co_regrel=x.co_regrel   "
     + " and ( x1.co_emp!=x.co_emp or x1.co_loc!=x.co_loc or x1.co_tipdoc!=x.co_tipdoc or x1.co_doc!=x.co_doc )  )   "
     + " inner join tbr_detmovinv as x2 on (x2.co_emp=x1.co_emp and x2.co_loc=x1.co_loc and x2.co_tipdoc=x1.co_tipdoc and x2.co_doc=x1.co_doc and x2.co_reg=x1.co_reg  )   "
     + " inner join tbm_detmovinv as x5 on (x5.co_emp=x2.co_emp and x5.co_loc=x2.co_loc and x5.co_tipdoc=x2.co_tipdoc and x5.co_doc=x2.co_doc and x5.co_reg=x2.co_reg )   "
     + " inner join tbm_detguirem as x3 on (x3.co_emprel=x5.co_emp and x3.co_locrel=x5.co_loc and x3.co_tipdocrel=x5.co_tipdoc and x3.co_docrel=x5.co_doc and x3.co_regrel=x5.co_reg )   "
     + " inner join tbm_cabguirem as x4 on (x4.co_emp=x3.co_emp and x4.co_loc=x3.co_loc and x4.co_tipdoc=x3.co_tipdoc and x4.co_doc=x3.co_doc )   "
     + " inner join tbm_bod as x6 on (x6.co_emp=x4.co_emp and x6.co_bod=x4.co_ptopar )   "
     + " where x.co_emp="+objParSis.getCodigoEmpresa()+" and x.co_loc="+objParSis.getCodigoLocal()+" and x.co_tipdoc="+intCodTipDoc+" and x.co_doc= "+intCodDoc+"  "
     + " and x.co_emprel="+objParSis.getCodigoEmpresa()+"  ";*/

     strSql="select distinct(x4.ne_numorddes), x3.co_emp, x3.tx_codalt,  x3.nd_can as nd_can, x3.tx_nomitm, x3.tx_unimed, x.co_reg "
     + " ,x5.st_cliretemprel, x5.tx_obscliretemprel, x6.co_bod, x6.tx_nom, x3.co_itm , x4.st_coninv "
     + " from tbr_detmovinv as x   "
     + " inner join tbr_detmovinv as x1 on (x1.co_emprel=x.co_emprel and x1.co_locrel=x.co_locrel and x1.co_tipdocrel=x.co_tipdocrel and x1.co_docrel=x.co_docrel and x1.co_regrel=x.co_regrel   "
     + " and ( x1.co_emp!=x.co_emp or x1.co_loc!=x.co_loc or x1.co_tipdoc!=x.co_tipdoc or x1.co_doc!=x.co_doc )  )   "
     + " inner join tbr_detmovinv as x2 on (x2.co_emp=x1.co_emp and x2.co_loc=x1.co_loc and x2.co_tipdoc=x1.co_tipdoc and x2.co_doc=x1.co_doc and x2.co_reg=x1.co_reg  )   "
     + " inner join tbm_detmovinv as x5 on (x5.co_emp=x2.co_emp and x5.co_loc=x2.co_loc and x5.co_tipdoc=x2.co_tipdoc and x5.co_doc=x2.co_doc and x5.co_reg=x2.co_reg )   "
     + " inner join tbm_detguirem as x3 on (x3.co_emprel=x5.co_emp and x3.co_locrel=x5.co_loc and x3.co_tipdocrel=x5.co_tipdoc and x3.co_docrel=x5.co_doc and x3.co_regrel=x5.co_reg )   "
     + " inner join tbm_cabguirem as x4 on (x4.co_emp=x3.co_emp and x4.co_loc=x3.co_loc and x4.co_tipdoc=x3.co_tipdoc and x4.co_doc=x3.co_doc )   "
     + " inner join tbm_bod as x6 on (x6.co_emp=x4.co_emp and x6.co_bod=x4.co_ptopar )   "
     + " where x.co_emp="+objParSis.getCodigoEmpresa()+" and x.co_loc="+objParSis.getCodigoLocal()+" and x.co_tipdoc="+intCodTipDoc+" and x.co_doc= "+intCodDoc+"  "
     + " and x.co_emprel="+objParSis.getCodigoEmpresa()
     + " order by x.co_reg ";
 //    + " group by  x3.co_emp,  x3.tx_codalt, x3.tx_nomitm, x3.tx_unimed "
  //   + " ,x5.st_cliretemprel, x5.tx_obscliretemprel, x6.co_bod, x6.tx_nom, x3.co_itm  ";
     System.out.println("ZafVen02_04.cargarDoc2: " + strSql );
     rst=stm.executeQuery(strSql);
     while(rst.next()){

            vecReg=new Vector();
            vecReg.add(INT_TBL_LIN,"");
            vecReg.add(INT_TBL_CODEMP, rst.getString("co_emp") );
            vecReg.add(INT_TBL_CODLOC, "" );
            vecReg.add(INT_TBL_CODTIDO, "" );
            vecReg.add(INT_TBL_CODDOC, "" );
            vecReg.add(INT_TBL_CODREG, "" );
            vecReg.add(INT_TBL_CODALT, rst.getString("tx_codalt") );
            vecReg.add(INT_TBL_NOMITM, rst.getString("tx_nomitm") );
            vecReg.add(INT_TBL_UNIMED, rst.getString("tx_unimed") );
            vecReg.add(INT_TBL_CANEGR, rst.getString("nd_can") );
            vecReg.add(INT_TBL_CODBOD, rst.getString("co_bod") );
            vecReg.add(INT_TBL_NOMBOD, rst.getString("tx_nom") );
            vecReg.add(INT_TBL_NUMDOC, rst.getString("ne_numorddes") );
            vecReg.add(INT_TBL_CHKCR, ((rst.getString("st_cliretemprel")==null?"":rst.getString("st_cliretemprel")).equals("S")?true:false));
            vecReg.add(INT_TBL_SELMAR, rst.getString("st_cliretemprel") );
            vecReg.add(INT_TBL_CODITM, rst.getString("co_itm") );
            vecReg.add(INT_TBL_CODBODGRP,"");

            txtObs.setText( rst.getString("tx_obscliretemprel")  );

            vecDat.add(vecReg);
     }
      objTblMod2.setData(vecDat);
      tblDat1.setModel(objTblMod2);
      vecDat.clear();

     rst.close();
     stm.close();
     conn.close();
     rst=null;
     stm=null;
     conn=null;


  }}catch(SQLException e)  {   objUti.mostrarMsgErr_F1(this, e);  }
    catch(Exception Evt)  {  objUti.mostrarMsgErr_F1(this, Evt);  }
}


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        panObs = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtObs = new javax.swing.JTextArea();
        pancliret = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtVehRet = new javax.swing.JTextField();
        txtPlaRet = new javax.swing.JTextField();
        txtPerRet = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDat1 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        butAce = new javax.swing.JButton();
        butCerr = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jLabel1.setText("ITEMS QUE CLIENTE RETIRA EN OTRA BODEGA");
        jPanel1.add(jLabel1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDat);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel7.setPreferredSize(new java.awt.Dimension(200, 100));
        jPanel7.setLayout(new java.awt.BorderLayout());

        panObs.setPreferredSize(new java.awt.Dimension(166, 40));
        panObs.setLayout(new java.awt.BorderLayout());

        txtObs.setColumns(20);
        txtObs.setLineWrap(true);
        txtObs.setRows(5);
        jScrollPane2.setViewportView(txtObs);

        panObs.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel7.add(panObs, java.awt.BorderLayout.SOUTH);

        pancliret.setLayout(null);

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 11));
        jLabel2.setText("Persona que retira :");
        pancliret.add(jLabel2);
        jLabel2.setBounds(10, 30, 150, 20);

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 11));
        jLabel3.setText("Fecha que Cliente Retira:");
        pancliret.add(jLabel3);
        jLabel3.setBounds(10, 5, 150, 20);

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 11));
        jLabel4.setText("Placa de vehiculo que retira:");
        pancliret.add(jLabel4);
        jLabel4.setBounds(340, 30, 160, 20);

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 11));
        jLabel5.setText("Vehiculo que retira:");
        pancliret.add(jLabel5);
        jLabel5.setBounds(340, 5, 150, 20);

        txtVehRet.setBackground(objParSis.getColorCamposObligatorios());
        txtVehRet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVehRetActionPerformed(evt);
            }
        });
        pancliret.add(txtVehRet);
        txtVehRet.setBounds(490, 5, 130, 20);

        txtPlaRet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPlaRetActionPerformed(evt);
            }
        });
        pancliret.add(txtPlaRet);
        txtPlaRet.setBounds(490, 30, 130, 20);

        txtPerRet.setBackground(objParSis.getColorCamposObligatorios());
        txtPerRet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPerRetActionPerformed(evt);
            }
        });
        pancliret.add(txtPerRet);
        txtPerRet.setBounds(110, 30, 220, 20);

        jPanel7.add(pancliret, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel7, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("General", jPanel3);

        jPanel8.setLayout(new java.awt.BorderLayout());

        tblDat1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblDat1);

        jPanel8.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Pedidos", jPanel8);

        jPanel2.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.GridBagLayout());

        butAce.setText("Guardar");
        butAce.setPreferredSize(new java.awt.Dimension(80, 25));
        butAce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAceActionPerformed(evt);
            }
        });
        jPanel5.add(butAce, new java.awt.GridBagConstraints());

        butCerr.setText("Cerrar");
        butCerr.setPreferredSize(new java.awt.Dimension(80, 25));
        butCerr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerrActionPerformed(evt);
            }
        });
        jPanel5.add(butCerr, new java.awt.GridBagConstraints());

        jPanel4.add(jPanel5, java.awt.BorderLayout.EAST);
        jPanel4.add(jPanel6, java.awt.BorderLayout.WEST);

        getContentPane().add(jPanel4, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-655)/2, (screenSize.height-375)/2, 655, 375);
    }// </editor-fold>//GEN-END:initComponents

    private void butAceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAceActionPerformed
        // TODO add your handling code here:

      if(validar()){
        if( guardarDat() )
            this.dispose();
      }


    }//GEN-LAST:event_butAceActionPerformed

public boolean validar(){
   boolean blnRes=false;
   try{
       for(int i=0; i<tblDat.getRowCount(); i++){
         String strSelAct=( (tblDat.getValueAt(i, INT_TBL_CHKCR)==null)?"":tblDat.getValueAt(i, INT_TBL_CHKCR).toString() );
         String strSelAnt=( (tblDat.getValueAt(i, INT_TBL_SELMAR)==null)?"":tblDat.getValueAt(i, INT_TBL_SELMAR).toString() );

         if(strSelAct.equals("true")){
          if(strSelAnt.equals("")){

              blnRes=true;

         }}
       }

      if(blnRes){
         if(!txtFecCliRet.isFecha()){
            MensajeInf("FECHA QUE CLIENTE RETIRA");
            txtFecCliRet.requestFocus();
            return false;
        }
       if(txtVehRet.getText().trim().equals("")){
          MensajeInf("DATO DE VEHICULO DE RETIRO ESTA VACIO INGRESE INFORMACI√ìN....");
          txtVehRet.requestFocus();
          return false;
       }
       if(txtPerRet.getText().trim().equals("")){
          MensajeInf("PERSONA QUE RETIRA ESTA VACIO INGRESE INFORMACI√ìN....");
          txtPerRet.requestFocus();
          return false;
       }
         
      }else blnRes=true;


   }catch(Exception Evt){ blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt); }
    return blnRes;
}



private boolean guardarDat(){
  boolean blnRes=false;
  Connection conn;
  try{
     conn=DriverManager.getConnection(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos());
     if(conn!=null){
       conn.setAutoCommit(false);

       if(guardarInf(conn)){
           conn.commit();
           enviarImpBodRem(conn);
           enviarImpBodLoc(conn);
           blnRes=true;
           MensajeInf("Los datos se guardaron con exito.. ");
       }else conn.rollback();


       conn.close();
       conn=null;
   }}catch(SQLException Evt) { blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt);  }
     catch(Exception Evt) { blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt);  }

    //System.gc();
    Runtime.getRuntime().gc();
    return blnRes;
}


public boolean guardarInf(java.sql.Connection conn ){
   boolean blnRes=false;
   boolean blnEst=false;
   java.sql.Statement stmLoc;
   java.sql.ResultSet rstLoc;
   String strSql="", strSqlUpD="";
   try{
      if(conn!=null){
      stmLoc=conn.createStatement();


         String strFecCR = null;

        if(txtFecCliRet.isFecha())
            strFecCR = "'#" + txtFecCliRet.getFecha("/", "y/m/d") + "#'";


       for(int i=0; i<tblDat.getRowCount(); i++){
         String strSelAct=( (tblDat.getValueAt(i, INT_TBL_CHKCR)==null)?"":tblDat.getValueAt(i, INT_TBL_CHKCR).toString() );
         String strSelAnt=( (tblDat.getValueAt(i, INT_TBL_SELMAR)==null)?"":tblDat.getValueAt(i, INT_TBL_SELMAR).toString() );
       
         if(strSelAct.equals("true")){
          if(strSelAnt.equals("")){


              strSql="select x3.co_emp, x3.co_loc, x3.co_tipdoc, x3.co_doc, x3.co_reg, x3.nd_can, x3.tx_nomitm, x3.co_itm, x3.co_emprel, x3.co_locrel, x3.co_tipdocrel, x3.co_docrel, x3.co_regrel "
              + " from tbr_detmovinv as x "
              + " inner join tbr_detmovinv as x1 on (x1.co_emprel=x.co_emprel and x1.co_locrel=x.co_locrel and x1.co_tipdocrel=x.co_tipdocrel and x1.co_docrel=x.co_docrel and x1.co_regrel=x.co_regrel and ( x1.co_emp!=x.co_emp or x1.co_loc!=x.co_loc or x1.co_tipdoc!=x.co_tipdoc or x1.co_doc!=x.co_doc ) ) "
              + " inner join tbr_detmovinv as x2 on (x2.co_emp=x1.co_emp and x2.co_loc=x1.co_loc and x2.co_tipdoc=x1.co_tipdoc and x2.co_doc=x1.co_doc and x2.co_reg=x1.co_reg  ) "
              + " inner join tbm_detmovinv as x5 on (x5.co_emp=x2.co_emp and x5.co_loc=x2.co_loc and x5.co_tipdoc=x2.co_tipdoc and x5.co_doc=x2.co_doc and x5.co_reg=x2.co_reg ) "
              + " inner join tbm_detguirem as x3 on (x3.co_emprel=x5.co_emp and x3.co_locrel=x5.co_loc and x3.co_tipdocrel=x5.co_tipdoc and x3.co_docrel=x5.co_doc and x3.co_regrel=x5.co_reg ) "
              + " inner join tbm_cabguirem as x4 on (x4.co_emp=x3.co_emp and x4.co_loc=x3.co_loc and x4.co_tipdoc=x3.co_tipdoc and x4.co_doc=x3.co_doc ) "
              + " inner join tbm_bod as x6 on (x6.co_emp=x4.co_emp and x6.co_bod=x4.co_ptopar ) "
              + " where x.co_emp="+objParSis.getCodigoEmpresa()+" and x.co_loc="+objParSis.getCodigoLocal()+" and x.co_tipdoc="+intCodTipDoc+" and x.co_doc= "+intCodDoc+" "
              + " and x.co_emprel="+objParSis.getCodigoEmpresa()+" and x4.st_coninv = 'P' and  x3.co_emp="+tblDat.getValueAt(i, INT_TBL_CODEMP).toString()+" "
              + " and x3.co_itm="+tblDat.getValueAt(i, INT_TBL_CODITM).toString()+" and x6.co_bod="+tblDat.getValueAt(i, INT_TBL_CODBOD).toString()+" ";
              
              System.out.println("ZafVen02_04.guardarInf: "+ strSql );
              
              rstLoc=stmLoc.executeQuery(strSql);
              while(rstLoc.next()){

                  strSqlUpD+="; UPDATE tbm_detmovinv set st_cliretemprel='S', tx_obscliretemprel='"+txtObs.getText()+"' "
                  + ", fe_retemprel="+strFecCR+", tx_perretemprel='"+txtPerRet.getText()+"', tx_vehretemprel='"+txtVehRet.getText()+"'"
                  + ", tx_plavehretemprel='"+txtPlaRet.getText()+"'  "
                  + " WHERE co_emp="+rstLoc.getInt("co_emprel")+" and co_loc="+rstLoc.getInt("co_locrel")+" and co_tipdoc="+rstLoc.getInt("co_tipdocrel")+" "
                  + " and co_doc="+rstLoc.getInt("co_docrel")+" and co_reg="+rstLoc.getInt("co_regrel")+"";
              }
              rstLoc.close();
              rstLoc=null;

              blnEst=true;              
         }}

       }
    
      if(!blnEst) MensajeInf("NO HAY DATOS PARA PROCESAR..");
      else{
        stmLoc.executeUpdate(strSqlUpD);
        blnRes=true;
      }

      stmLoc.close();
      stmLoc=null;
     
   }}catch(SQLException Evt){ blnRes=false; objUti.mostrarMsgErr_F1(this, Evt); }
    catch(Exception Evt){ blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt); }
    return blnRes;
}


public boolean enviarImpBodRem(java.sql.Connection conn ){
   boolean blnRes=true;
   java.sql.Statement stmLoc;
   java.sql.ResultSet rstLoc;
   String strSql="";
   try{
      if(conn!=null){
      stmLoc=conn.createStatement();

       for(int i=0; i<tblDat.getRowCount(); i++){
         String strSelAct=( (tblDat.getValueAt(i, INT_TBL_CHKCR)==null)?"":tblDat.getValueAt(i, INT_TBL_CHKCR).toString() );
         String strSelAnt=( (tblDat.getValueAt(i, INT_TBL_SELMAR)==null)?"":tblDat.getValueAt(i, INT_TBL_SELMAR).toString() );

         if(strSelAct.equals("true")){
          if(strSelAnt.equals("")){

              
              strSql="select a.*, a2.ne_pueser, tx_dirser, tx_coreleerr from ( "
              + " select x4.co_emp, x4.co_loc, x4.co_tipdoc, x4.co_doc, x4.co_ptopar  as co_bod "
              + " from tbr_detmovinv as x "
              + " inner join tbr_detmovinv as x1 on (x1.co_emprel=x.co_emprel and x1.co_locrel=x.co_locrel and x1.co_tipdocrel=x.co_tipdocrel and x1.co_docrel=x.co_docrel and x1.co_regrel=x.co_regrel  "
              + " and ( x1.co_emp!=x.co_emp or x1.co_loc!=x.co_loc or x1.co_tipdoc!=x.co_tipdoc or x1.co_doc!=x.co_doc )  ) "
              + " inner join tbr_detmovinv as x2 on (x2.co_emp=x1.co_emp and x2.co_loc=x1.co_loc and x2.co_tipdoc=x1.co_tipdoc and x2.co_doc=x1.co_doc and x2.co_reg=x1.co_reg  ) "
              + " inner join tbm_detmovinv as x5 on (x5.co_emp=x2.co_emp and x5.co_loc=x2.co_loc and x5.co_tipdoc=x2.co_tipdoc and x5.co_doc=x2.co_doc and x5.co_reg=x2.co_reg )  "
              + " inner join tbm_detguirem as x3 on (x3.co_emprel=x5.co_emp and x3.co_locrel=x5.co_loc and x3.co_tipdocrel=x5.co_tipdoc and x3.co_docrel=x5.co_doc and x3.co_regrel=x5.co_reg ) "
              + " inner join tbm_cabguirem as x4 on (x4.co_emp=x3.co_emp and x4.co_loc=x3.co_loc and x4.co_tipdoc=x3.co_tipdoc and x4.co_doc=x3.co_doc )  "
              + " inner join tbm_bod as x6 on (x6.co_emp=x4.co_emp and x6.co_bod=x4.co_ptopar ) "
              + " where x.co_emp="+objParSis.getCodigoEmpresa()+" and x.co_loc="+objParSis.getCodigoLocal()+" and x.co_tipdoc="+intCodTipDoc+" and x.co_doc= "+intCodDoc+"  "
              + " and x.co_emprel="+objParSis.getCodigoEmpresa()+" and x4.st_coninv = 'P' and  x3.co_emp="+tblDat.getValueAt(i, INT_TBL_CODEMP).toString()+" "
              + " and  x3.co_itm="+tblDat.getValueAt(i, INT_TBL_CODITM).toString()+" and x6.co_bod="+tblDat.getValueAt(i, INT_TBL_CODBOD).toString()+" "
              + " group by x4.co_emp, x4.co_loc, x4.co_tipdoc, x4.co_doc, x4.co_ptopar "
              + " ) as a "
              + " inner join tbr_sercliserbod as a1 on (a1.co_empbod=a.co_emp and a1.co_bod=a.co_bod )  "
              + " inner join tbm_sercliserloc as a2 on (a2.co_emp=a1.co_empser and a2.co_loc=a1.co_locser and a2.co_ser=a1.co_ser ) "
              + " ";
              //System.out.println("--> "+ strSql );
              rstLoc=stmLoc.executeQuery(strSql);
              while(rstLoc.next()){
                 
                  objInvItm.enviarRequisitoImp( rstLoc.getString("tx_dirser"), rstLoc.getInt("ne_pueser"), rstLoc.getInt("co_emp"), rstLoc.getInt("co_loc"), rstLoc.getInt("co_tipdoc"), rstLoc.getInt("co_doc"), "G"  );

              }
              rstLoc.close();
              rstLoc=null;

         }}
       }
      stmLoc.close();
      stmLoc=null;

   }}catch(SQLException Evt){ blnRes=false; objUti.mostrarMsgErr_F1(this, Evt); }
    catch(Exception Evt){ blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt); }
    return blnRes;
}



public boolean enviarImpBodLoc(java.sql.Connection conn ){
   boolean blnRes=true;
   java.sql.Statement stmLoc;
   java.sql.ResultSet rstLoc;
   String strSql="";
   try{
      if(conn!=null){
      stmLoc=conn.createStatement();

          strSql="select a.*, a2.ne_pueser, tx_dirser, tx_coreleerr from (   "
          + " select x.co_emp, x.co_loc, x.co_tipdoc, x.co_doc, x.co_bod "
          + " from tbm_detmovinv as x   "
          + " inner join tbm_bod as x6 on (x6.co_emp=x.co_emp and x6.co_bod=x.co_bod )  "
          + " where x.co_emp="+objParSis.getCodigoEmpresa()+" and x.co_loc="+objParSis.getCodigoLocal()+" and x.co_tipdoc="+intCodTipDoc+" and x.co_doc="+intCodDoc+"  "
          + " group by x.co_emp, x.co_loc, x.co_tipdoc, x.co_doc, x.co_bod  "
          + "  ) as a "
          + " inner join tbr_sercliserbod as a1 on (a1.co_empbod=a.co_emp and a1.co_bod=a.co_bod )  "
          + " inner join tbm_sercliserloc as a2 on (a2.co_emp=a1.co_empser and a2.co_loc=a1.co_locser and a2.co_ser=a1.co_ser ) "
          + " ";
          //System.out.println("--> "+ strSql );
          rstLoc=stmLoc.executeQuery(strSql);
          while(rstLoc.next()){

              objInvItm.enviarRequisitoImp( rstLoc.getString("tx_dirser"), rstLoc.getInt("ne_pueser"), rstLoc.getInt("co_emp"), rstLoc.getInt("co_loc"), rstLoc.getInt("co_tipdoc"), rstLoc.getInt("co_doc"), "L"  );

          }
          rstLoc.close();
          rstLoc=null;

      stmLoc.close();
      stmLoc=null;

   }}catch(SQLException Evt){ blnRes=false; objUti.mostrarMsgErr_F1(this, Evt); }
    catch(Exception Evt){ blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt); }
    return blnRes;
}

   private void MensajeInf(String strMensaje){
        //JOptionPane obj = JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        JOptionPane.showMessageDialog(this,strMensaje,strTit,JOptionPane.INFORMATION_MESSAGE);
    }

    private void butCerrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerrActionPerformed
        // TODO add your handling code here:
        Runtime.getRuntime().gc();
        this.dispose();

    }//GEN-LAST:event_butCerrActionPerformed

    private void txtVehRetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVehRetActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_txtVehRetActionPerformed

    private void txtPlaRetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPlaRetActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_txtPlaRetActionPerformed

    private void txtPerRetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPerRetActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_txtPerRetActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butAce;
    private javax.swing.JButton butCerr;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel panObs;
    private javax.swing.JPanel pancliret;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblDat1;
    private javax.swing.JTextArea txtObs;
    private javax.swing.JTextField txtPerRet;
    private javax.swing.JTextField txtPlaRet;
    private javax.swing.JTextField txtVehRet;
    // End of variables declaration//GEN-END:variables

}
