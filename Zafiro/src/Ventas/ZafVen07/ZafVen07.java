/*
 * ZafVen07.java
 * Autorización de Anulación de Documentos de Inventario
 * Created on 16 de enero de 2005, 17:10 PM
 */
package Ventas.ZafVen07;

import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafPerUsr.ZafPerUsr;
import Librerias.ZafSelFec.ZafSelFec;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import java.sql.*;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafVenCon.ZafVenCon;
import java.util.ArrayList;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaGrp;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaColGrp;
import Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut;
import Librerias.ZafTblUti.ZafTblCelEdiButGen.ZafTblCelEdiButGen;
import java.awt.Color;

/**
 *
 * @author Ingrid Lino
 */
public class ZafVen07 extends javax.swing.JInternalFrame
{
    //Constantes: Columnas del JTable 
    final int INT_TBL_DAT_LIN = 0;
    final int INT_TBL_DAT_COD_EMP = 1;
    final int INT_TBL_DAT_COD_LOC = 2;
    final int INT_TBL_DAT_COD_TIP_DOC = 3;
    final int INT_TBL_DAT_DES_COR_TIP_DOC = 4;
    final int INT_TBL_DAT_DES_LAR_TIP_DOC = 5;
    final int INT_TBL_DAT_COD_DOC = 6;
    final int INT_TBL_DAT_NUM_DOC = 7;
    final int INT_TBL_DAT_FEC_DOC = 8;
    final int INT_TBL_DAT_COD_CLI = 9;
    final int INT_TBL_DAT_NOM_CLI = 10;
    final int INT_TBL_DAT_VAL_DOC = 11;
    final int INT_TBL_DAT_VAL_ABO = 12;
    final int INT_TBL_DAT_BUT = 13;
    final int INT_TBL_DAT_EST_FRG = 14;
    
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafColNumerada objColNum;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;                                          //PopupMenu: Establecer PeopuMenu en JTable.
    private ZafThreadGUI objThrGUI;
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private ZafTblFilCab objTblFilCab;
    private Vector vecDat, vecCab, vecReg, vecAux;
    private boolean blnCon;                                                     //true: Continua la ejecucion del hilo.
    private ZafTblCelRenLbl objTblCelRenLblCru, objTblCelRenLblDocRel, objTblCelRenLblNum, objTblCelRenLblCol;
    private ZafTblBus objTblBus;
    private ZafMouMotAda objMouMotAda;
    private ZafTblOrd objTblOrd;
    private ZafSelFec objSelFec;
    private String strDesCorTipDoc, strDesLarTipDoc;
    private String strCodPrv, strDesLarPrv;
    private ZafVenCon vcoPrv, vcoTipDoc, vcoLoc;
    private String strCodLoc, strDesLarLoc;
    private ZafTblCelEdiChk objTblCelEdiChk;
    private ZafTblCelRenChk objTblCelRenChk;
    private ZafTblCelEdiButGen objTblCelEdiButGen;
    private ZafTblCelRenBut objTblCelRenBut;
    private ZafPerUsr objPerUsr;

    /**
     * Crea una nueva instancia de la clase ZafVen07. 
     */
    public ZafVen07(ZafParSis obj) 
    {
        try 
        {
            initComponents();
            this.objParSis = obj;
            objParSis = (ZafParSis) obj.clone();
            objUti = new ZafUtil();
            objPerUsr = new ZafPerUsr(objParSis);
            if (!configurarFrm()) 
            {
                exitForm();
            }
        } 
        catch (CloneNotSupportedException e) {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        panFecCor = new javax.swing.JPanel();
        panFil = new javax.swing.JPanel();
        optTod = new javax.swing.JRadioButton();
        optFil = new javax.swing.JRadioButton();
        lblTipDoc = new javax.swing.JLabel();
        txtCodTipDoc = new javax.swing.JTextField();
        txtDesCorTipDoc = new javax.swing.JTextField();
        txtDesLarTipDoc = new javax.swing.JTextField();
        butTipDoc = new javax.swing.JButton();
        lblPrv = new javax.swing.JLabel();
        txtCodPrv = new javax.swing.JTextField();
        txtDesLarPrv = new javax.swing.JTextField();
        butPrv = new javax.swing.JButton();
        lblLoc = new javax.swing.JLabel();
        txtCodLoc = new javax.swing.JTextField();
        txtDesLarLoc = new javax.swing.JTextField();
        butLoc = new javax.swing.JButton();
        chkMosDocPagAso = new javax.swing.JCheckBox();
        chkExcDocCia1 = new javax.swing.JCheckBox();
        panRpt = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable() {
            protected javax.swing.table.JTableHeader createDefaultTableHeader()
            {
                return new ZafTblHeaGrp(columnModel);
            }
        };
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butGua = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        panFecCor.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha del documento"));
        panFecCor.setPreferredSize(new java.awt.Dimension(100, 80));
        panFecCor.setLayout(null);
        jPanel1.add(panFecCor, java.awt.BorderLayout.NORTH);

        panFil.setFont(new java.awt.Font("SansSerif", 1, 12));
        panFil.setPreferredSize(new java.awt.Dimension(0, 200));
        panFil.setLayout(null);

        optTod.setFont(new java.awt.Font("SansSerif", 0, 11));
        optTod.setSelected(true);
        optTod.setText("Todos los documentos");
        optTod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTodActionPerformed(evt);
            }
        });
        panFil.add(optTod);
        optTod.setBounds(0, 4, 400, 14);

        optFil.setFont(new java.awt.Font("SansSerif", 0, 11));
        optFil.setText("Sólo los documentos que cumplan el criterio seleccionado");
        optFil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optFilActionPerformed(evt);
            }
        });
        panFil.add(optFil);
        optFil.setBounds(0, 20, 400, 14);

        lblTipDoc.setText("Tipo de documento:");
        lblTipDoc.setToolTipText("Tipo de documento");
        panFil.add(lblTipDoc);
        lblTipDoc.setBounds(14, 70, 120, 20);
        panFil.add(txtCodTipDoc);
        txtCodTipDoc.setBounds(91, 70, 32, 20);

        txtDesCorTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorTipDocActionPerformed(evt);
            }
        });
        txtDesCorTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusLost(evt);
            }
        });
        panFil.add(txtDesCorTipDoc);
        txtDesCorTipDoc.setBounds(126, 70, 56, 20);

        txtDesLarTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarTipDocActionPerformed(evt);
            }
        });
        txtDesLarTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusLost(evt);
            }
        });
        panFil.add(txtDesLarTipDoc);
        txtDesLarTipDoc.setBounds(182, 70, 264, 20);

        butTipDoc.setText("...");
        butTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butTipDocActionPerformed(evt);
            }
        });
        panFil.add(butTipDoc);
        butTipDoc.setBounds(446, 70, 20, 20);

        lblPrv.setText("Proveedor:");
        lblPrv.setToolTipText("Proveedor");
        panFil.add(lblPrv);
        lblPrv.setBounds(14, 90, 100, 20);

        txtCodPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodPrvActionPerformed(evt);
            }
        });
        txtCodPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusLost(evt);
            }
        });
        panFil.add(txtCodPrv);
        txtCodPrv.setBounds(126, 91, 56, 20);

        txtDesLarPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarPrvActionPerformed(evt);
            }
        });
        txtDesLarPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusLost(evt);
            }
        });
        panFil.add(txtDesLarPrv);
        txtDesLarPrv.setBounds(182, 91, 264, 20);

        butPrv.setText("...");
        butPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrvActionPerformed(evt);
            }
        });
        panFil.add(butPrv);
        butPrv.setBounds(446, 91, 20, 20);

        lblLoc.setText("Local:");
        lblLoc.setToolTipText("Proveedor");
        panFil.add(lblLoc);
        lblLoc.setBounds(14, 48, 100, 20);

        txtCodLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodLocActionPerformed(evt);
            }
        });
        txtCodLoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodLocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodLocFocusLost(evt);
            }
        });
        panFil.add(txtCodLoc);
        txtCodLoc.setBounds(126, 49, 56, 20);

        txtDesLarLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarLocActionPerformed(evt);
            }
        });
        txtDesLarLoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarLocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarLocFocusLost(evt);
            }
        });
        panFil.add(txtDesLarLoc);
        txtDesLarLoc.setBounds(182, 49, 264, 20);

        butLoc.setText("...");
        butLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLocActionPerformed(evt);
            }
        });
        panFil.add(butLoc);
        butLoc.setBounds(446, 49, 20, 20);

        chkMosDocPagAso.setText("Mostrar documentos que tienen pagos asociados");
        panFil.add(chkMosDocPagAso);
        chkMosDocPagAso.setBounds(10, 140, 400, 20);

        chkExcDocCia1.setSelected(true);
        chkExcDocCia1.setText("Excluir las ventas entre las empresas del grupo");
        chkExcDocCia1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkExcDocCia1ActionPerformed(evt);
            }
        });
        panFil.add(chkExcDocCia1);
        chkExcDocCia1.setBounds(10, 120, 400, 20);

        jPanel1.add(panFil, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Filtro", jPanel1);

        panRpt.setLayout(new java.awt.BorderLayout());

        spnDat.setPreferredSize(new java.awt.Dimension(453, 418));

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDat.setViewportView(tblDat);

        panRpt.add(spnDat, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Reporte", panRpt);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setPreferredSize(new java.awt.Dimension(385, 26));
        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butGua.setText("Guardar");
        butGua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGuaActionPerformed(evt);
            }
        });
        panBot.add(butGua);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar accion de acuerdo a la etiqueta del boton ("Consultar" o "Detener").
        //Realizar accion de acuerdo a la etiqueta del boton ("Consultar" o "Detener").
        objTblMod.removeAllRows();
        lblMsgSis.setText("");
        if (butCon.getText().equals("Consultar")) {
            blnCon = true;
            if (objThrGUI == null) {
                objThrGUI = new ZafThreadGUI();
                objThrGUI.start();
            }
        } else {
            blnCon = false;
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /**
     * Cerrar la aplicacion.
     */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        strTit = "Mensaje del sistema Zafiro";
        strMsg = "¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this, strMsg, strTit, javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE) == javax.swing.JOptionPane.YES_OPTION) 
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

private void optTodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTodActionPerformed
    if (optTod.isSelected())
    {
        optFil.setSelected(false);
        txtCodLoc.setText("");
        txtDesLarLoc.setText("");
        txtCodTipDoc.setText("");
        txtDesCorTipDoc.setText("");
        txtDesLarTipDoc.setText("");
        txtCodPrv.setText("");
        txtDesLarPrv.setText("");
    } 
    else
    {
        optFil.setSelected(true);
    }
}//GEN-LAST:event_optTodActionPerformed

private void optFilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optFilActionPerformed
    if (optFil.isSelected()) 
    {
        optTod.setSelected(false);
    } 
    else 
    {
        optTod.setSelected(true);
    }
}//GEN-LAST:event_optFilActionPerformed

private void txtDesCorTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorTipDocActionPerformed
    txtDesCorTipDoc.transferFocus();
}//GEN-LAST:event_txtDesCorTipDocActionPerformed

private void txtDesCorTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusGained
    strDesCorTipDoc = txtDesCorTipDoc.getText();
    txtDesCorTipDoc.selectAll();
}//GEN-LAST:event_txtDesCorTipDocFocusGained

private void txtDesCorTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusLost
    //Validar el contenido de la celda olo si ha cambiado.
    if (!txtDesCorTipDoc.getText().equalsIgnoreCase(strDesCorTipDoc)) {
        if (txtDesCorTipDoc.getText().equals("")) {
            txtCodTipDoc.setText("");
            txtDesLarTipDoc.setText("");
        } 
        else 
        {
            mostrarVenConTipDoc(1);
        }
    }
    else
    {
        txtDesCorTipDoc.setText(strDesCorTipDoc);
    }
}//GEN-LAST:event_txtDesCorTipDocFocusLost

private void txtDesLarTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarTipDocActionPerformed
    txtDesLarTipDoc.transferFocus();
}//GEN-LAST:event_txtDesLarTipDocActionPerformed

private void txtDesLarTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusGained
    strDesLarTipDoc = txtDesLarTipDoc.getText();
    txtDesLarTipDoc.selectAll();
}//GEN-LAST:event_txtDesLarTipDocFocusGained

private void txtDesLarTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusLost
    //Validar el contenido de la celda s�lo si ha cambiado.
    if (!txtDesLarTipDoc.getText().equalsIgnoreCase(strDesLarTipDoc)) {
        if (txtDesLarTipDoc.getText().equals("")) 
        {
            txtCodTipDoc.setText("");
            txtDesCorTipDoc.setText("");
        }
        else
        {
            mostrarVenConTipDoc(2);
        }
    }
    else 
    {
        txtDesLarTipDoc.setText(strDesLarTipDoc);
    }
}//GEN-LAST:event_txtDesLarTipDocFocusLost

private void butTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butTipDocActionPerformed
    mostrarVenConTipDoc(0);
}//GEN-LAST:event_butTipDocActionPerformed

private void txtCodPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodPrvActionPerformed
    txtCodPrv.transferFocus();
}//GEN-LAST:event_txtCodPrvActionPerformed

private void txtCodPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusGained
    strCodPrv = txtCodPrv.getText();
    txtCodPrv.selectAll();
}//GEN-LAST:event_txtCodPrvFocusGained

private void txtCodPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusLost
    //Validar el contenido de la celda solo si ha cambiado.
    if (!txtCodPrv.getText().equalsIgnoreCase(strCodPrv)) 
    {
        if (txtCodPrv.getText().equals("")) 
        {
            txtCodPrv.setText("");
            txtDesLarPrv.setText("");
            objTblMod.removeAllRows();
        } 
        else
        {
            mostrarVenConPrv(1);
        }
    }
    else 
    {
        txtCodPrv.setText(strCodPrv);
    }
}//GEN-LAST:event_txtCodPrvFocusLost

private void txtDesLarPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarPrvActionPerformed
    txtDesLarPrv.transferFocus();
}//GEN-LAST:event_txtDesLarPrvActionPerformed

private void txtDesLarPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusGained
    strDesLarPrv = txtDesLarPrv.getText();
    txtDesLarPrv.selectAll();
}//GEN-LAST:event_txtDesLarPrvFocusGained

private void txtDesLarPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusLost
    //Validar el contenido de la celda s�lo si ha cambiado.
    if (!txtDesLarPrv.getText().equalsIgnoreCase(strDesLarPrv))
    {
        if (txtDesLarPrv.getText().equals(""))
        {
            txtCodPrv.setText("");
            txtDesLarPrv.setText("");
            objTblMod.removeAllRows();
        }
        else 
        {
            mostrarVenConPrv(2);
        }
    }
    else
    {
        txtDesLarPrv.setText(strDesLarPrv);
    }
}//GEN-LAST:event_txtDesLarPrvFocusLost

private void butPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrvActionPerformed
    strCodPrv = txtCodPrv.getText();
    mostrarVenConPrv(0);
}//GEN-LAST:event_butPrvActionPerformed

private void txtCodLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodLocActionPerformed
    txtCodLoc.transferFocus();
}//GEN-LAST:event_txtCodLocActionPerformed

private void txtCodLocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodLocFocusGained
    strCodLoc = txtCodLoc.getText();
    txtCodLoc.selectAll();
}//GEN-LAST:event_txtCodLocFocusGained

private void txtCodLocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodLocFocusLost
    //Validar el contenido de la celda s�lo si ha cambiado.
    if (!txtCodLoc.getText().equalsIgnoreCase(strCodLoc)) 
    {
        if (txtCodLoc.getText().equals(""))
        {
            txtCodLoc.setText("");
            txtDesLarLoc.setText("");
            objTblMod.removeAllRows();
        } 
        else 
        {
            mostrarVenConLoc(1);
        }
    }
    else 
    {
        txtCodLoc.setText(strCodLoc);
    }
}//GEN-LAST:event_txtCodLocFocusLost

private void txtDesLarLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarLocActionPerformed
    txtDesLarLoc.transferFocus();
}//GEN-LAST:event_txtDesLarLocActionPerformed

private void txtDesLarLocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarLocFocusGained
    strDesLarLoc = txtDesLarLoc.getText();
    txtDesLarLoc.selectAll();
}//GEN-LAST:event_txtDesLarLocFocusGained

private void txtDesLarLocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarLocFocusLost
    //Validar el contenido de la celda solo si ha cambiado.
    if (!txtDesLarLoc.getText().equalsIgnoreCase(strDesLarLoc)) 
    {
        if (txtDesLarLoc.getText().equals(""))
        {
            txtCodLoc.setText("");
            txtDesLarLoc.setText("");
            objTblMod.removeAllRows();
        } 
        else
        {
            mostrarVenConLoc(2);
        }
    } 
    else 
    {
        txtDesLarLoc.setText(strDesLarLoc);
    }
}//GEN-LAST:event_txtDesLarLocFocusLost

private void butLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLocActionPerformed
    strCodLoc = txtCodLoc.getText();
    mostrarVenConLoc(0);
}//GEN-LAST:event_butLocActionPerformed

private void butGuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGuaActionPerformed
    if (guardar()) 
    {
        mostrarMsgInf("<HTML>La información se guardó correctamente.</HTML>");
        cargarReg();
    } 
    else 
    {
        mostrarMsgInf("<HTML>La información no se pudo guardar.</HTML>");
    }
}//GEN-LAST:event_butGuaActionPerformed

private void chkExcDocCia1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkExcDocCia1ActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_chkExcDocCia1ActionPerformed

    /**
     * Cerrar la aplicacion.
     */
    private void exitForm() {
        dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butGua;
    private javax.swing.JButton butLoc;
    private javax.swing.JButton butPrv;
    private javax.swing.JButton butTipDoc;
    private javax.swing.JCheckBox chkExcDocCia1;
    private javax.swing.JCheckBox chkMosDocPagAso;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblLoc;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblPrv;
    private javax.swing.JLabel lblTipDoc;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optFil;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFecCor;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panRpt;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodLoc;
    private javax.swing.JTextField txtCodPrv;
    private javax.swing.JTextField txtCodTipDoc;
    private javax.swing.JTextField txtDesCorTipDoc;
    private javax.swing.JTextField txtDesLarLoc;
    private javax.swing.JTextField txtDesLarPrv;
    private javax.swing.JTextField txtDesLarTipDoc;
    // End of variables declaration//GEN-END:variables

    private class ZafThreadGUI extends Thread {

        public void run() 
        {
            if (!cargarReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable s�lo cuando haya datos.
            if (tblDat.getRowCount() > 0) 
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI = null;
        }
    }

    /**
     * Configurar el formulario.
     */
    private boolean configurarFrm()
    {
        boolean blnRes = true;
        try 
        {
            strAux = objParSis.getNombreMenu() + " v0.1.2 ";
            this.setTitle(strAux);
            lblTit.setText(objParSis.getNombreMenu());
            lblTit.setForeground(Color.red);

            //Configurar JTable: Establecer el modelo.
            vecDat = new Vector();      //Almacena los datos
            vecCab = new Vector(15);    //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN, "");
            vecCab.add(INT_TBL_DAT_COD_EMP, "Cód.Emp.");
            vecCab.add(INT_TBL_DAT_COD_LOC, "Cód.Loc.");
            vecCab.add(INT_TBL_DAT_COD_TIP_DOC, "Cód.Tip.Doc.");
            vecCab.add(INT_TBL_DAT_DES_COR_TIP_DOC, "Tip.Doc.");
            vecCab.add(INT_TBL_DAT_DES_LAR_TIP_DOC, "Tipo de documento");
            vecCab.add(INT_TBL_DAT_COD_DOC, "Cód.Doc.");
            vecCab.add(INT_TBL_DAT_NUM_DOC, "Núm.Doc.");
            vecCab.add(INT_TBL_DAT_FEC_DOC, "Fec.Doc.");
            vecCab.add(INT_TBL_DAT_COD_CLI, "Cód.Cli.");
            vecCab.add(INT_TBL_DAT_NOM_CLI, "Nom.Cli.");
            vecCab.add(INT_TBL_DAT_VAL_DOC, "Val.Doc.");
            vecCab.add(INT_TBL_DAT_VAL_ABO, "Val.Abo.");
            vecCab.add(INT_TBL_DAT_BUT, "");
            vecCab.add(INT_TBL_DAT_EST_FRG, "Autorizar");

            objTblMod = new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);

            //Configurar JTable: Establecer tipo de selecci�n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el men� de contexto.
            objTblPopMnu = new ZafTblPopMnu(tblDat);
            objColNum = new ZafColNumerada(tblDat, INT_TBL_DAT_LIN);
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Tama�o de las celdas
            javax.swing.table.TableColumnModel tcmAux = tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_DES_COR_TIP_DOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_DES_LAR_TIP_DOC).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(140);
            tcmAux.getColumn(INT_TBL_DAT_VAL_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_VAL_ABO).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_BUT).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_EST_FRG).setPreferredWidth(54);

            tblDat.getTableHeader().setReorderingAllowed(false);
            objTblBus = new ZafTblBus(tblDat);

            objMouMotAda = new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            objTblOrd = new ZafTblOrd(tblDat);

            //Configurar ZafSelFec:
            objSelFec = new ZafSelFec();
            objSelFec.setCheckBoxVisible(false);
            panFecCor.add(objSelFec);
            objSelFec.setBounds(4, 4, 472, 72);

            configurarVenConTipDoc();
            configurarVenConPrv();
            configurarVenConLoc();

            txtCodTipDoc.setVisible(false);
            txtCodTipDoc.setEditable(false);
            txtCodTipDoc.setEnabled(false);

            //Configurar JTable: Renderizar celdas.
            objTblCelRenLblCru = new ZafTblCelRenLbl();
            objTblCelRenLblCru.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLblCru.setTipoFormato(objTblCelRenLblCru.INT_FOR_NUM);
            objTblCelRenLblCru.setFormatoNumerico(objParSis.getFormatoNumero(), false, true);
            tcmAux.getColumn(INT_TBL_DAT_VAL_DOC).setCellRenderer(objTblCelRenLblCru);
            tcmAux.getColumn(INT_TBL_DAT_VAL_ABO).setCellRenderer(objTblCelRenLblCru);
            objTblCelRenLblCru = null;

            //Configurar JTable: Establecer columnas editables.
            vecAux = new Vector();
            vecAux.add("" + INT_TBL_DAT_BUT);
            vecAux.add("" + INT_TBL_DAT_EST_FRG);
            objTblMod.setColumnasEditables(vecAux);
            vecAux = null;

            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);


            butCon.setEnabled(false);
            butCer.setEnabled(false);

            if ((objPerUsr.isOpcionEnabled(2499)) || (objPerUsr.isOpcionEnabled(2483))) {
                butCon.setEnabled(true);
            }
            if ((objPerUsr.isOpcionEnabled(2500)) || (objPerUsr.isOpcionEnabled(2484))) {
                butGua.setEnabled(true);
            }
            if ((objPerUsr.isOpcionEnabled(2501)) || (objPerUsr.isOpcionEnabled(2485))) {
                butCer.setEnabled(true);
            }

            //Configurar JTable: Ocultar columnas del sistema.
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_EMP, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_TIP_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_DOC, tblDat);

            objTblCelRenBut = new ZafTblCelRenBut();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_BUT).setCellRenderer(objTblCelRenBut);

            objTblCelEdiButGen = new ZafTblCelEdiButGen();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_BUT).setCellEditor(objTblCelEdiButGen);
            objTblCelEdiButGen.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFilSel;

                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFilSel = tblDat.getSelectedRow();
                }

                public void actionPerformed(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    cargarDocumento(intFilSel);//carga el programa del tipo de documento q se esta cruzando
                }

                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
            });

            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk = new ZafTblCelRenChk();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_EST_FRG).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk = null;

            //Configurar JTable: Editor de celdas.
            objTblCelEdiChk = new ZafTblCelEdiChk(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_EST_FRG).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                String strLin = "";

                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    strLin = objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_LIN) == null ? "" : objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_LIN).toString();
                    if (objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_EST_FRG)) {
                        if (strLin.equals("M")) {
                            objTblCelEdiChk.setCancelarEdicion(false);
                        } else {
                            if (objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_EST_FRG)) {
                                objTblCelEdiChk.setCancelarEdicion(true);
                            } else {
                                objTblCelEdiChk.setCancelarEdicion(false);
                            }
                        }
                    }
                }
            });

            //Libero los objetos auxiliares.
            tcmAux = null;


        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar
     * eventos de del mouse (mover el mouse; arrastrar y soltar). Se la usa en
     * el sistema para mostrar el ToolTipText adecuado en la cabecera de las
     * columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren m�s espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter {

        public void mouseMoved(java.awt.event.MouseEvent evt) {
            int intCol = tblDat.columnAtPoint(evt.getPoint());
            String strMsg = "";
            switch (intCol) {
                case INT_TBL_DAT_COD_EMP:
                    strMsg = "Código de la empresa";
                    break;
                case INT_TBL_DAT_COD_LOC:
                    strMsg = "Código del local";
                    break;
                case INT_TBL_DAT_COD_TIP_DOC:
                    strMsg = "Código del Tipo de Documento";
                    break;
                case INT_TBL_DAT_DES_COR_TIP_DOC:
                    strMsg = "Descripción corta del Tipo de Documento";
                    break;
                case INT_TBL_DAT_DES_LAR_TIP_DOC:
                    strMsg = "Descripción larga del Tipo de Documento";
                    break;
                case INT_TBL_DAT_COD_DOC:
                    strMsg = "Código del documento";
                    break;
                case INT_TBL_DAT_NUM_DOC:
                    strMsg = "Número de documento";
                    break;
                case INT_TBL_DAT_FEC_DOC:
                    strMsg = "Fecha del documento";
                    break;
                case INT_TBL_DAT_COD_CLI:
                    strMsg = "Código del cliente";
                    break;
                case INT_TBL_DAT_NOM_CLI:
                    strMsg = "Nombre del Cliente";
                    break;
                case INT_TBL_DAT_VAL_DOC:
                    strMsg = "Valor del documento";
                    break;
                case INT_TBL_DAT_VAL_ABO:
                    strMsg = "Abono";
                    break;
                case INT_TBL_DAT_BUT:
                    strMsg = "Muestra el documento seleccionado";
                    break;
                case INT_TBL_DAT_EST_FRG:
                    strMsg = "Autorizar la anulación del documento";
                    break;
                default:
                    strMsg = "";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }

    /**
     * Esta funci�n muestra un mensaje informativo al usuario. Se podr�a
     * utilizar para mostrar al usuario un mensaje que indique el campo que es
     * invalido y que debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        String strTit;
        strTit = "Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this, strMsg, strTit, javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    private boolean cargarReg()
    {
        boolean blnRes = true;
        try {
            con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con != null) {
                if (cargarDetReg()) {
                }
                con.close();
                con = null;
            }
        } catch (Exception e) {
            blnRes = false;
        }
        return blnRes;
    }

    private boolean cargarDetReg() 
    {
        boolean blnRes = true;
        int i;
        strAux = "";
        int intNumReg = 0;

        try
        {
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");

            if (con != null) 
            {
                if (!txtCodPrv.getText().toString().equals("")) 
                {
                    strAux += " AND a1.co_cli=" + txtCodPrv.getText() + "";
                }

                switch (objSelFec.getTipoSeleccion()) {
                    case 0: //B�squeda por rangos
                        strAux += " AND (a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        break;
                    case 1: //Fechas menores o iguales que "Hasta".
                        strAux += " AND (a1.fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        break;
                    case 2: //Fechas mayores o iguales que "Desde".
                        strAux += " AND (a1.fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        break;
                    case 3: //Todo.
                        break;
                }

                //para no presentar documentos entre compañias
                if (chkMosDocPagAso.isSelected()) {
                    strAux += " AND NOT (a1.co_emp=1 AND a1.co_cli IN(3515,3516,602,603,2600,1039))";
                    strAux += " AND NOT (a1.co_emp=2 AND a1.co_cli IN(2853, 2854,446,447,2105,789,790))";
                    strAux += " AND NOT (a1.co_emp=3 AND a1.co_cli IN(2857,2858,452,453,2107,832))";
                    strAux += " AND NOT (a1.co_emp=4 AND a1.co_cli IN(3116,3117,497,498,2294,886,887))";
                }

                stm = con.createStatement();
                strSQL = "";
                strSQL += " SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc";
                strSQL += " ,a2.tx_desCor,a2.tx_desLar, a1.ne_numDoc1 AS ne_numDoc, a1.fe_doc";
                strSQL += " ,a1.co_cli, a1.tx_nomCli, ABS(a1.nd_mondoc) AS nd_valDoc";
                strSQL += " ,SUM(a3.nd_abo) as nd_abo, CAST('N' AS character) AS st_vrfAbo";
                strSQL += " FROM (tbm_cabPag AS a1 INNER JOIN tbm_detPag AS a3";
                strSQL += " ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc AND a1.co_doc=a3.co_doc)";
                strSQL += " INNER JOIN tbm_cabTipDoc AS a2 ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";

                if (objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())) 
                {
                } 
                else 
                {
                    strSQL += " INNER JOIN tbr_cliLoc AS a6";
                    strSQL += " ON a1.co_emp=a6.co_emp AND a1.co_loc=a6.co_loc AND a1.co_cli=a6.co_cli";
                }
                strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                
                if (!txtCodLoc.getText().toString().equals("")) 
                {
                    strAux += " AND a1.co_loc=" + txtCodLoc.getText() + "";
                }
                else
                {
                    if (objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())) 
                    {
                    }
                    else 
                    {
                        strSQL += " AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                    }
                }
                if (!txtCodTipDoc.getText().toString().equals("")) 
                {
                    strSQL += " AND a1.co_tipDoc=" + txtCodTipDoc.getText() + "";
                } 
                else 
                {
                    strSQL += " AND a1.co_tipDoc IN(" + tipoDocPrgUsr() + ")";
                }

                strSQL += " AND a1.st_reg NOT IN('E','I') AND a1.st_autAnu IS NULL";
                strSQL += "" + strAux;

                strSQL += " GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc";
                strSQL += " ,a2.tx_desCor,a2.tx_desLar, a1.ne_numDoc1, a1.fe_doc";
                strSQL += " ,a1.co_cli, a1.tx_nomCli,a1.nd_mondoc";
                strSQL += " UNION";
                strSQL += " SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc";
                strSQL += " ,a2.tx_desCor,a2.tx_desLar, a1.ne_numDoc AS ne_numDoc, a1.fe_doc";
                strSQL += " ,a1.co_cli, a1.tx_nomCli, ABS(a1.nd_tot) AS nd_valDoc, SUM(a4.nd_abo) as nd_abo, CAST('S' AS character) AS st_vrfAbo";
                strSQL += " FROM (tbm_cabMovInv AS a1 INNER JOIN tbm_cabTipDoc AS a2";
                strSQL += " ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc)";
                strSQL += " INNER JOIN tbm_pagMovInv AS a3";
                strSQL += " ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc AND a1.co_doc=a3.co_doc";
                strSQL += " LEFT OUTER JOIN (tbm_detPag AS a4 INNER JOIN tbm_cabPag AS a5";
                strSQL += " ON a4.co_emp=a5.co_emp AND a4.co_loc=a5.co_loc AND a4.co_tipDoc=a5.co_tipDoc AND a4.co_doc=a5.co_doc AND a5.st_reg NOT IN('E','I'))";
                strSQL += " ON a3.co_emp=a4.co_emp AND a3.co_loc=a4.co_locPag AND a3.co_tipDoc=a4.co_tipDocPag AND a3.co_doc=a4.co_docPag AND a3.co_reg=a4.co_regPag";

                if (objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario()))
                {
                }
                else
                {
                    strSQL += " INNER JOIN tbr_cliLoc AS a6";
                    strSQL += " ON a1.co_emp=a6.co_emp AND a1.co_loc=a6.co_loc AND a1.co_cli=a6.co_cli";
                }

                strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                if (!txtCodLoc.getText().toString().equals("")) 
                {
                    strAux += " AND a1.co_loc=" + txtCodLoc.getText() + "";
                } 
                else
                {
                    if (objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())) 
                    {
                    } 
                    else
                    {
                        strSQL += " AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                    }
                }
                if (!txtCodTipDoc.getText().toString().equals("")) 
                {
                    strSQL += " AND a1.co_tipDoc=" + txtCodTipDoc.getText() + "";
                } else {
                    strSQL += " AND a1.co_tipDoc IN(" + tipoDocPrgUsr() + ")";
                }

                strSQL += " AND a1.st_reg NOT IN('E','I') AND a2.st_reg IN('A','C') AND a1.st_autAnu IS NULL";
                strSQL += "" + strAux;
                strSQL += " GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc";
                strSQL += " , a2.tx_desCor,a2.tx_desLar, a1.ne_numDoc, a1.fe_doc";
                strSQL += " , a1.co_cli, a1.tx_nomCli,a1.nd_tot";
                
                if (!chkMosDocPagAso.isSelected()) 
                {
                    strSQL += " HAVING (SUM(a4.nd_abo)=0 OR SUM(a4.nd_abo) IS NULL)";
                }
                strSQL += " order by co_emp, fe_doc, co_loc, co_tipDoc, ne_numDoc, tx_nomCli";

                System.out.println("SQL cargarDetReg: " + strSQL);
                rst = stm.executeQuery(strSQL);

                vecDat.clear();
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                // pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i = 0;

                lblMsgSis.setText("Listo");
                while (rst.next()) 
                {
                    if (blnCon)
                    {
                        vecReg = new Vector();
                        vecReg.add(INT_TBL_DAT_LIN, "");
                        vecReg.add(INT_TBL_DAT_COD_EMP, "" + rst.getObject("co_emp") == null ? "" : rst.getString("co_emp"));
                        vecReg.add(INT_TBL_DAT_COD_LOC, "" + rst.getObject("co_loc") == null ? "" : rst.getString("co_loc"));
                        vecReg.add(INT_TBL_DAT_COD_TIP_DOC, "" + rst.getObject("co_tipDoc") == null ? "" : rst.getString("co_tipDoc"));
                        vecReg.add(INT_TBL_DAT_DES_COR_TIP_DOC, "" + rst.getObject("tx_desCor") == null ? "" : rst.getString("tx_desCor"));
                        vecReg.add(INT_TBL_DAT_DES_LAR_TIP_DOC, "" + rst.getObject("tx_desLar") == null ? "" : rst.getString("tx_desLar"));
                        vecReg.add(INT_TBL_DAT_COD_DOC, "" + rst.getObject("co_doc") == null ? "" : rst.getString("co_doc"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC, "" + rst.getObject("ne_numDoc") == null ? "" : rst.getString("ne_numDoc"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC, "" + rst.getObject("fe_doc") == null ? "" : rst.getString("fe_doc"));
                        vecReg.add(INT_TBL_DAT_COD_CLI, "" + rst.getObject("co_cli") == null ? "" : rst.getString("co_cli"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI, "" + rst.getObject("tx_nomCli") == null ? "" : rst.getString("tx_nomCli"));
                        vecReg.add(INT_TBL_DAT_VAL_DOC, "" + rst.getObject("nd_valDoc") == null ? "" : rst.getString("nd_valDoc"));
                        vecReg.add(INT_TBL_DAT_VAL_ABO, null);
                        vecReg.add(INT_TBL_DAT_BUT, "");
                        vecReg.add(INT_TBL_DAT_EST_FRG, null);

                        if ((rst.getObject("st_vrfAbo") == null ? "" : rst.getString("st_vrfAbo")).equals("S"))
                        {
                            vecReg.setElementAt(rst.getObject("nd_abo") == null ? "" : rst.getString("nd_abo"), INT_TBL_DAT_VAL_ABO);
                        }

                        vecDat.add(vecReg);
                        i++;
                        pgrSis.setValue(i);
                        intNumReg = rst.getRow();
                    } else {
                        break;
                    }
                }

                rst.close();
                stm.close();
                rst = null;
                stm = null;

                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                pgrSis.setValue(0);
                butCon.setText("Consultar");
                objTblMod.initRowsState();
                lblMsgSis.setText("Se encontraron " + intNumReg + " registros.");
            }
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funcion configura la "Ventana de consulta" que sera utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConPrv()
    {
        boolean blnRes = true;
        String strTitVenCon = "";
        try 
        {
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("Código");
            arlAli.add("Identificación");
            arlAli.add("Nombre");
            arlAli.add("Dirección");
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            if (objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())) {
                strSQL = "";
                strSQL += " SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
                strSQL += " FROM tbm_cli AS a1";
                strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                if (objParSis.getCodigoMenu() == 2122)
                {
                    strSQL += " AND a1.st_cli='S'";
                    strTitVenCon = "Listado de Clientes";
                    lblPrv.setText("Clientes:");
                    lblPrv.setToolTipText("Clientes");
                } 
                else 
                {
                    strSQL += " AND a1.st_prv='S'";
                    strTitVenCon = "Listado de Proveedores";
                    lblPrv.setText("Proveedor:");
                    lblPrv.setToolTipText("Proveedor");
                }
                strSQL += " ORDER BY a1.tx_nom";
            }
            else 
            {
                strSQL = "";
                strSQL += " SELECT a2.co_cli, a2.tx_ide, a2.tx_nom, a2.tx_dir";
                strSQL += " FROM tbr_cliLoc AS a1 INNER JOIN tbm_cli AS a2";
                strSQL += " ON a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli";
                strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL += " AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                if (objParSis.getCodigoMenu() == 2122)
                {
                    strSQL += " AND a2.st_cli='S'";
                    strTitVenCon = "Listado de Clientes";
                    lblPrv.setText("Clientes:");
                    lblPrv.setToolTipText("Clientes");
                } 
                else 
                {
                    strSQL += " AND a2.st_prv='S'";
                    strTitVenCon = "Listado de Proveedores";
                    lblPrv.setText("Proveedor:");
                    lblPrv.setToolTipText("Proveedor");
                }
                strSQL += " ORDER BY a2.tx_nom";
            }
            //Ocultar columnas.
            int intColOcu[] = new int[1];
            intColOcu[0] = 4;
            vcoPrv = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, strTitVenCon, strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;
            intColOcu = null;
            //Configurar columnas.
            vcoPrv.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci�n permite utilizar la "Ventana de Consulta" para seleccionar
     * un registro de la base de datos. El tipo de b�squeda determina si se debe
     * hacer una b�squeda directa (No se muestra la ventana de consulta a menos
     * que no exista lo que se est� buscando) o presentar la ventana de consulta
     * para que el usuario seleccione la opci�n que desea utilizar.
     *
     * @param intTipBus El tipo de b�squeda a realizar.
     * @return true: Si no se present� ning�n problema. <BR>false: En el caso
     * contrario.
     */
    private boolean mostrarVenConPrv(int intTipBus) {
        boolean blnRes = true;
        try {
            switch (intTipBus) {
                case 0: //Mostrar la ventana de consulta.
                    vcoPrv.setCampoBusqueda(2);
                    vcoPrv.show();
                    if (vcoPrv.getSelectedButton() == vcoPrv.INT_BUT_ACE) {
                        txtCodPrv.setText(vcoPrv.getValueAt(1));
                        txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                        objTblMod.removeAllRows();
                    }
                    break;
                case 1: //B�squeda directa por "Numero de cuenta".
                    if (vcoPrv.buscar("a1.co_cli", txtCodPrv.getText())) {
                        txtCodPrv.setText(vcoPrv.getValueAt(1));
                        txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                        objTblMod.removeAllRows();
                    } else {
                        vcoPrv.setCampoBusqueda(0);
                        vcoPrv.setCriterio1(11);
                        vcoPrv.cargarDatos();
                        vcoPrv.show();
                        if (vcoPrv.getSelectedButton() == vcoPrv.INT_BUT_ACE) {
                            txtCodPrv.setText(vcoPrv.getValueAt(1));
                            txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                            objTblMod.removeAllRows();
                        } else {
                            txtCodPrv.setText(strCodPrv);
                        }
                    }
                    break;
                case 2: //Busqueda directa por "Descripcion larga".
                    if (vcoPrv.buscar("a1.tx_nom", txtDesLarPrv.getText())) {
                        txtCodPrv.setText(vcoPrv.getValueAt(1));
                        txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                        objTblMod.removeAllRows();
                    } else {
                        vcoPrv.setCampoBusqueda(2);
                        vcoPrv.setCriterio1(11);
                        vcoPrv.cargarDatos();
                        vcoPrv.show();
                        if (vcoPrv.getSelectedButton() == vcoPrv.INT_BUT_ACE) {
                            txtCodPrv.setText(vcoPrv.getValueAt(1));
                            txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                            objTblMod.removeAllRows();
                        } else {
                            txtDesLarPrv.setText(strDesLarPrv);
                        }
                    }
                    break;
            }
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci�n configura la "Ventana de consulta" que ser� utilizada para
     * mostrar los "Tipos de documentos".
     */
    private boolean configurarVenConTipDoc() 
    {
        boolean blnRes = true;
        try 
        {
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("a1.co_tipdoc");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            arlCam.add("a1.ne_ultDoc");
            arlCam.add("a1.tx_natDoc");
            arlCam.add("tblActNumDoc");
            arlCam.add("a2.co_grpTipDoc");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("Código");
            arlAli.add("Tip.Doc.");
            arlAli.add("Tipo de documento");
            arlAli.add("Ult.Doc.");
            arlAli.add("Nat.Doc.");
            arlAli.add("Ref.Tbl.Act.");
            arlAli.add("Cod.Grp.Tbl.Tip.Doc.");
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            arlAncCol.add("80");
            arlAncCol.add("80");
            arlAncCol.add("80");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            if (objParSis.getCodigoUsuario() == 1) 
            {
                strSQL = "";
                strSQL += " SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar, ";
                strSQL += " CASE WHEN a2.ne_ultDoc IS NULL THEN a1.ne_ultDoc ELSE a2.ne_ultDoc END AS ne_ultDoc";
                strSQL += " ,a1.tx_natDoc";
                strSQL += " ,CASE WHEN a2.ne_ultDoc IS NULL THEN 'L' ELSE 'G' END AS tblActNumDoc, a2.co_grpTipDoc";
                strSQL += " FROM (tbm_cabTipDoc AS a1 LEFT OUTER JOIN tbm_cabGrpTipDoc AS a2 ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_grpTipDoc=a2.co_grpTipDoc)";
                strSQL += " INNER JOIN tbr_tipDocPrg AS a3";
                strSQL += " ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc";
                strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL += " AND a1.co_loc=" + objParSis.getCodigoLocal();
                strSQL += " AND a3.co_mnu=" + objParSis.getCodigoMenu();
                strSQL += " ORDER BY a1.tx_desCor";
            }
            else
            {
                strSQL = "";
                strSQL += " SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar,";
                strSQL += " CASE WHEN a2.ne_ultDoc IS NULL THEN a1.ne_ultDoc ELSE a2.ne_ultDoc END AS ne_ultDoc";
                strSQL += " ,a1.tx_natDoc";
                strSQL += " ,CASE WHEN a2.ne_ultDoc IS NULL THEN 'L' ELSE 'G' END AS tblActNumDoc, a2.co_grpTipDoc";
                strSQL += " FROM tbr_tipDocUsr AS a3 inner join  (tbm_cabTipDoc AS a1 LEFT OUTER JOIN tbm_cabGrpTipDoc AS a2 ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_grpTipDoc=a2.co_grpTipDoc)";
                strSQL += " ON (a1.co_emp=a3.co_emp and a1.co_loc=a3.co_loc and a1.co_tipdoc=a3.co_tipdoc)";
                strSQL += " WHERE ";
                strSQL += " a3.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL += " AND a3.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL += " AND a3.co_mnu=" + objParSis.getCodigoMenu() + "";
                strSQL += " AND a3.co_usr=" + objParSis.getCodigoUsuario() + "";
            }
            //Ocultar columnas.
            int intColOcu[] = new int[3];
            intColOcu[0] = 7;
            vcoTipDoc = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de tipos de documentos", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;
            intColOcu = null;
            //Configurar columnas.
            vcoTipDoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoTipDoc.setConfiguracionColumna(4, javax.swing.JLabel.RIGHT);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci�n permite utilizar la "Ventana de Consulta" para seleccionar
     * un registro de la base de datos. El tipo de b�squeda determina si se debe
     * hacer una b�squeda directa (No se muestra la ventana de consulta a menos
     * que no exista lo que se est� buscando) o presentar la ventana de consulta
     * para que el usuario seleccione la opci�n que desea utilizar.
     *
     * @param intTipBus El tipo de b�squeda a realizar.
     * @return true: Si no se present� ning�n problema. <BR>false: En el caso
     * contrario.
     */
    private boolean mostrarVenConTipDoc(int intTipBus)
    {
        boolean blnRes = true;
        try {
            switch (intTipBus) {
                case 0: //Mostrar la ventana de consulta.
                    vcoTipDoc.setCampoBusqueda(1);
                    vcoTipDoc.show();
                    if (vcoTipDoc.getSelectedButton() == vcoTipDoc.INT_BUT_ACE) {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    break;
                case 1: //B�squeda directa por "Descripci�n corta".
                    if (vcoTipDoc.buscar("a1.tx_desCor", txtDesCorTipDoc.getText())) {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    } else {
                        vcoTipDoc.setCampoBusqueda(1);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton() == vcoTipDoc.INT_BUT_ACE) {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        } else {
                            txtDesCorTipDoc.setText(strDesCorTipDoc);
                        }
                    }
                    break;
                case 2: //B�squeda directa por "Descripci�n larga".
                    if (vcoTipDoc.buscar("a1.tx_desLar", txtDesLarTipDoc.getText())) {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    } else {
                        vcoTipDoc.setCampoBusqueda(2);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton() == vcoTipDoc.INT_BUT_ACE) {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        } else {
                            txtDesLarTipDoc.setText(strDesLarTipDoc);
                        }
                    }
                    break;
            }
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci�n configura la "Ventana de consulta" que ser� utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConLoc()
    {
        boolean blnRes = true;
        try {
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("a1.co_loc");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("Código");
            arlAli.add("Nombre");
            arlAli.add("Dirección");
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("414");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            if (objParSis.getCodigoUsuario() == 1) {
                strSQL = "";
                strSQL += " SELECT a1.co_loc, a1.tx_nom, a1.tx_dir";
                strSQL += " FROM tbm_loc AS a1";
                strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + " AND a1.st_reg NOT IN('I','E')";
                strSQL += " ORDER BY a1.tx_nom";
            } else {
                strSQL = "";
                strSQL += " SELECT a1.co_loc, a1.tx_nom, a1.tx_dir";
                strSQL += " FROM tbm_loc AS a1 INNER JOIN tbr_locusr AS a2";
                strSQL += " ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc";
                strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + " AND a1.st_reg NOT IN('I','E')";
                strSQL += " AND a2.st_reg NOT IN('I','E') AND a2.co_usr=" + objParSis.getCodigoUsuario() + "";
                strSQL += " ORDER BY a1.tx_nom";
            }
            vcoLoc = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de locales", strSQL, arlCam, arlAli, arlAncCol);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;
            //Configurar columnas.
            vcoLoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci�n permite utilizar la "Ventana de Consulta" para seleccionar
     * un registro de la base de datos. El tipo de b�squeda determina si se debe
     * hacer una b�squeda directa (No se muestra la ventana de consulta a menos
     * que no exista lo que se est� buscando) o presentar la ventana de consulta
     * para que el usuario seleccione la opci�n que desea utilizar.
     *
     * @param intTipBus El tipo de b�squeda a realizar.
     * @return true: Si no se present� ning�n problema. <BR>false: En el caso
     * contrario.
     */
    private boolean mostrarVenConLoc(int intTipBus) {
        boolean blnRes = true;
        try {
            switch (intTipBus) {
                case 0: //Mostrar la ventana de consulta.
                    vcoLoc.setCampoBusqueda(2);
                    vcoLoc.show();
                    if (vcoLoc.getSelectedButton() == vcoLoc.INT_BUT_ACE) {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                        objTblMod.removeAllRows();
                    }
                    break;
                case 1: //B�squeda directa por codigo de local".
                    if (vcoLoc.buscar("a1.co_loc", txtCodLoc.getText())) {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                        objTblMod.removeAllRows();
                    } else {
                        vcoLoc.setCampoBusqueda(0);
                        vcoLoc.setCriterio1(11);
                        vcoLoc.cargarDatos();
                        vcoLoc.show();
                        if (vcoLoc.getSelectedButton() == vcoLoc.INT_BUT_ACE) {
                            txtCodLoc.setText(vcoLoc.getValueAt(1));
                            txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                            objTblMod.removeAllRows();
                        } else {
                            txtCodLoc.setText(strCodLoc);
                        }
                    }
                    break;
                case 2: //B�squeda directa por "Descripci�n larga".
                    if (vcoLoc.buscar("a1.tx_nom", txtDesLarLoc.getText())) {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                        objTblMod.removeAllRows();
                    } else {
                        vcoLoc.setCampoBusqueda(2);
                        vcoLoc.setCriterio1(11);
                        vcoLoc.cargarDatos();
                        vcoLoc.show();
                        if (vcoLoc.getSelectedButton() == vcoLoc.INT_BUT_ACE) {
                            txtCodLoc.setText(vcoLoc.getValueAt(1));
                            txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                            objTblMod.removeAllRows();
                        } else {
                            txtDesLarLoc.setText(strDesLarLoc);
                        }
                    }
                    break;
            }
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private String tipoDocPrgUsr()
    {
        Statement stmTipDoc;
        ResultSet rstTipDoc;
        String strSQLTipDoc = "";
        try 
        {
            if (con != null)
            {
                stmTipDoc = con.createStatement();
                if (objParSis.getCodigoUsuario() == 1) 
                {
                    strSQLTipDoc = "";
                    strSQLTipDoc += " SELECT co_tipDoc";
                    strSQLTipDoc += " FROM tbr_tipDocPrg AS a1";
                    strSQLTipDoc += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQLTipDoc += " AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                    strSQLTipDoc += " AND a1.co_mnu=" + objParSis.getCodigoMenu() + "";
                }
                else 
                {
                    strSQLTipDoc = "";
                    strSQLTipDoc += " SELECT co_tipDoc";
                    strSQLTipDoc += " FROM tbr_tipDocUsr AS a1";
                    strSQLTipDoc += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQLTipDoc += " AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                    strSQLTipDoc += " AND a1.co_mnu=" + objParSis.getCodigoMenu() + "";
                    strSQLTipDoc += " AND a1.co_usr=" + objParSis.getCodigoUsuario() + "";
                    strSQLTipDoc += "";
                }
                rstTipDoc = stmTipDoc.executeQuery(strSQLTipDoc);
                System.out.println("tipoDocPrgUsr: " + strSQLTipDoc);
                stmTipDoc.close();
                stmTipDoc = null;
                rstTipDoc.close();
                rstTipDoc = null;
            }
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return strSQLTipDoc;
    }

    private void cargarDocumento(int fila) 
    {
        String strCodEmp = objTblMod.getValueAt(fila, INT_TBL_DAT_COD_EMP).toString();
        String strCodLoc = objTblMod.getValueAt(fila, INT_TBL_DAT_COD_LOC).toString();
        String strCodTipDoc = objTblMod.getValueAt(fila, INT_TBL_DAT_COD_TIP_DOC).toString();
        String strCodDoc = objTblMod.getValueAt(fila, INT_TBL_DAT_COD_DOC).toString();

        if (strCodTipDoc.equals("1") || strCodTipDoc.equals("228"))//Facven, Facvene
        {
            int intCodMnu = 14;
            Ventas.ZafVen02.ZafVen02 objVen02 = new Ventas.ZafVen02.ZafVen02(objParSis, strCodEmp, strCodLoc, strCodTipDoc, strCodDoc, intCodMnu);
            this.getParent().add(objVen02, javax.swing.JLayeredPane.DEFAULT_LAYER);
            objVen02.show();
        }

        if (strCodTipDoc.equals("2"))//Faccom
        {
            Compras.ZafCom02.ZafCom02 objCom02 = new Compras.ZafCom02.ZafCom02(objParSis, new Integer(strCodEmp), new Integer(strCodLoc), new Integer(strCodTipDoc), new Integer(strCodDoc));
            this.getParent().add(objCom02, javax.swing.JLayeredPane.DEFAULT_LAYER);
            objCom02.show();
        }

        if (strCodTipDoc.equals("3") || strCodTipDoc.equals("229"))//Devven, Devvene
        {
            Ventas.ZafVen28.ZafVen28 objVen28 = new Ventas.ZafVen28.ZafVen28(objParSis, new Integer(strCodEmp), new Integer(strCodLoc), new Integer(strCodTipDoc), new Integer(strCodDoc));
            this.getParent().add(objVen28, javax.swing.JLayeredPane.DEFAULT_LAYER);
            objVen28.show();
        }

        if (strCodTipDoc.equals("4"))//Devcom
        {
            Compras.ZafCom04.ZafCom04 objCom04 = new Compras.ZafCom04.ZafCom04(objParSis, new Integer(strCodEmp), new Integer(strCodLoc), new Integer(strCodTipDoc), new Integer(strCodDoc));
            this.getParent().add(objCom04, javax.swing.JLayeredPane.DEFAULT_LAYER);
            objCom04.show();
        }

        if ((strCodTipDoc.equals("28")) || (strCodTipDoc.equals("40")) || (strCodTipDoc.equals("51")) || (strCodTipDoc.equals("74")) || (strCodTipDoc.equals("75"))) 
        { //n/c
            int intCodMnu = -1;
            if (strCodTipDoc.equals("28")) {
                intCodMnu = 296;
            }

            if ((strCodTipDoc.equals("40")) || (strCodTipDoc.equals("51"))) {
                intCodMnu = 306;
            }

            if (strCodTipDoc.equals("74")) {
                intCodMnu = 1424;
            }

            if (strCodTipDoc.equals("75")) {
                intCodMnu = 1414;
            }

            CxC.ZafCxC10.ZafCxC10 objCxC10 = new CxC.ZafCxC10.ZafCxC10(objParSis, Integer.parseInt(strCodEmp), Integer.parseInt(strCodLoc), Integer.parseInt(strCodTipDoc), Integer.parseInt(strCodDoc), intCodMnu);
            this.getParent().add(objCxC10, javax.swing.JLayeredPane.DEFAULT_LAYER);
            objCxC10.show();
        }

        if ((strCodTipDoc.equals("38")) || (strCodTipDoc.equals("57")) || (strCodTipDoc.equals("105")) || (strCodTipDoc.equals("106")) || (strCodTipDoc.equals("120"))) {//n/c
            int intCodMnu = 523;
            Contabilidad.ZafCon04.ZafCon04 objCon04 = new Contabilidad.ZafCon04.ZafCon04(objParSis, Integer.parseInt(strCodEmp), Integer.parseInt(strCodLoc), Integer.parseInt(strCodTipDoc), Integer.parseInt(strCodDoc), intCodMnu);
            this.getParent().add(objCon04, javax.swing.JLayeredPane.DEFAULT_LAYER);
            objCon04.show();
        }

        if (strCodTipDoc.equals("32"))  //egre para proveedores
        {
            int intCodMnu = 574;
            Contabilidad.ZafCon09.ZafCon09 objCon09 = new Contabilidad.ZafCon09.ZafCon09(objParSis, Integer.parseInt(strCodEmp), Integer.parseInt(strCodLoc), Integer.parseInt(strCodTipDoc), Integer.parseInt(strCodDoc), intCodMnu);
            this.getParent().add(objCon09, javax.swing.JLayeredPane.DEFAULT_LAYER);
            objCon09.show();
        }

        if (strCodTipDoc.equals("123")) //egre para cliente
        {
            int intCodMnu = 2024;
            Contabilidad.ZafCon09.ZafCon09 objCon09 = new Contabilidad.ZafCon09.ZafCon09(objParSis, Integer.parseInt(strCodEmp), Integer.parseInt(strCodLoc), Integer.parseInt(strCodTipDoc), Integer.parseInt(strCodDoc), intCodMnu);
            this.getParent().add(objCon09, javax.swing.JLayeredPane.DEFAULT_LAYER);
            objCon09.show();
        }

        if ((strCodTipDoc.equals("33")) || (strCodTipDoc.equals("160")))  //retenciones emitidas
        {
            int intCodMnu = 533;
            Contabilidad.ZafCon05.ZafCon05 objCon05 = new Contabilidad.ZafCon05.ZafCon05(objParSis, Integer.parseInt(strCodEmp), Integer.parseInt(strCodLoc), Integer.parseInt(strCodTipDoc), Integer.parseInt(strCodDoc), intCodMnu);
            this.getParent().add(objCon05, javax.swing.JLayeredPane.DEFAULT_LAYER);
            objCon05.show();
        }

    }

    private boolean guardar() 
    {
        boolean blnRes = true;
        try {
            con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con != null) {
                con.setAutoCommit(false);
                if (guardarDatos()) {
                    con.commit();
                } else {
                    con.rollback();
                    blnRes = false;
                }
                con.close();
                con = null;
            }
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes = false;
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes = false;
        }
        return blnRes;
    }

    private boolean guardarDatos() 
    {
        boolean blnRes = true;
        String strLin = "";
        String strUpd = "";
        try 
        {
            if (con != null) {
                stm = con.createStatement();
                for (int i = 0; i < objTblMod.getRowCountTrue(); i++) {
                    strLin = objTblMod.getValueAt(i, INT_TBL_DAT_LIN) == null ? "" : objTblMod.getValueAt(i, INT_TBL_DAT_LIN).toString();
                    if (strLin.equals("M")) {
                        if (objTblMod.isChecked(i, INT_TBL_DAT_EST_FRG))
                        {
                            // tbm_cabMovInv
                            strSQL = "";
                            strSQL += " UPDATE tbm_cabMovInv";
                            strSQL += " SET st_autanu='A'";
                            strSQL += ", fe_autanu=" + objParSis.getFuncionFechaHoraBaseDatos() + "";
                            strSQL += ", co_usrautanu=" + objParSis.getCodigoUsuario() + "";
                            strSQL += ", tx_comautanu='" + objParSis.getNombreComputadoraConDirIP() + "'";

                            strSQL += " WHERE co_emp=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_EMP) + "";
                            strSQL += " AND co_loc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC) + "";
                            strSQL += " AND co_tipDoc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC) + "";
                            strSQL += " AND co_doc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC) + "";


                            strSQL += " AND EXISTS(SELECT co_emp, co_loc, co_tipDoc, co_doc FROM tbm_cabMovInv ";
                            strSQL += "               WHERE co_emp=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_EMP) + "";
                            strSQL += "               AND co_loc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC) + "";
                            strSQL += "               AND co_tipDoc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC) + "";
                            strSQL += "               AND co_doc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC) + ")";
                            strSQL += ";";
                            strUpd += strSQL;
                            //para tbm_cabPag
                            strSQL = "";
                            strSQL += "UPDATE tbm_cabPag";
                            strSQL += " SET st_autanu='A'";
                            strSQL += ", fe_autanu=" + objParSis.getFuncionFechaHoraBaseDatos() + "";
                            strSQL += ", co_usrautanu=" + objParSis.getCodigoUsuario() + "";
                            strSQL += ", tx_comautanu='" + objParSis.getNombreComputadoraConDirIP() + "'";

                            strSQL += " WHERE co_emp=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_EMP) + "";
                            strSQL += " AND co_loc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC) + "";
                            strSQL += " AND co_tipDoc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC) + "";
                            strSQL += " AND co_doc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC) + "";


                            strSQL += " AND EXISTS(SELECT co_emp, co_loc, co_tipDoc, co_doc FROM tbm_cabPag ";
                            strSQL += "               WHERE co_emp=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_EMP) + "";
                            strSQL += "               AND co_loc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC) + "";
                            strSQL += "               AND co_tipDoc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC) + "";
                            strSQL += "               AND co_doc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC) + ")";
                            strSQL += ";";
                            strUpd += strSQL;
                        }
                    }

                }
                System.out.println("strUpd: " + strUpd);
                stm.executeUpdate(strUpd);
                stm.close();
                stm = null;
            }

        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes = false;
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes = false;
        }
        return blnRes;
    }
}