/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventas.ZafVen03;

import CxC.ZafCxC23.ZafCxC23_02;
import CxC.ZafCxC23.ZafCxC23_04;
import CxC.ZafCxC23.ZafCxC23_05;
import CxC.ZafCxC50.ZafCxC50;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafPerUsr.ZafPerUsr;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblEvt.ZafTblCelRenAdapter;
import Librerias.ZafTblUti.ZafTblEvt.ZafTblCelRenEvent;
import Librerias.ZafTblUti.ZafTblEvt.ZafTblCelRenListener;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafUtil.ZafLocPrgUsr;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafVenCon.ZafVenCon;
import Ventas.ZafVen11.ZafVen11;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.EventListenerList;
import javax.swing.table.TableColumnModel;

/**
 * Clase que permite la asignacion de vendedores de manera masiva a los clientes
 * @author Christian Mateo
 * 
 */
public class ZafVen03 extends javax.swing.JInternalFrame {

    /**
     * Creates new form ZafVen03
     */
    
    
    
    private ZafVenCon vcoLoc; // OBJETO DE VENTANA DE CONSULTA DE LOCALES
    private ZafVenCon vcoCiu; 
    private ZafVenCon vcoForPag;                                //Ventana de consulta.
    private ZafVenCon vcoVen; 
    private ZafVenCon vcoVenFil; 
    //private JTextField txtCodLoc = new JTextField();
    private String strCodVen="", strNomVen="";
    private String  strCodLoc="", strDesLoc="";
    private String  strCodCli="", strNomCli="";
    private String  strCodCiu="", strCiudad="";
    private String strCodForPag="", strDesCodForPag="";
    private String strVenCod="", strVenNom="";
    private ZafVenCon vcoCli;
    private ZafParSis objZafParSis;
    private ZafLocPrgUsr objLocPrgUsr; 
    private ZafUtil objUti;
    private Connection con;
    private ZafThreadGUI objThrGUI;
    
    private Vector vecCab = new Vector();    //Almacena las cabeceras  /**/
    private ZafTblMod objTblMod;
    private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
    
    
    final int INT_TBL_LINEA    = 0; 
    final int INT_TBL_CODCLI   = 1;
    final int INT_TBL_IDECLI   = 2;
    final int INT_TBL_NOMCLI   = 3;      
    final int INT_TBL_CIUCLI   = 4;      
    final int INT_TBL_CODVEN   = 5;      
    final int INT_TBL_NOMVEN   = 6;      
    
    private ZafTblOrd objTblOrd;                                //JTable de ordenamiento.
    private ZafTblBus objTblBus;                                //Editor de b√∫squeda.
    
    public ZafVen03(ZafParSis obj) {
        try{
            this.objZafParSis = (Librerias.ZafParSis.ZafParSis) obj.clone();        
            initComponents();
        }catch(CloneNotSupportedException ex){
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrp = new javax.swing.ButtonGroup();
        panNor = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        panCen = new javax.swing.JPanel();
        tabGen = new javax.swing.JTabbedPane();
        panGenTabGen = new javax.swing.JPanel();
        panGenSol = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtLoc = new javax.swing.JTextField();
        txtCodLoc = new javax.swing.JTextField();
        butLoc = new javax.swing.JButton();
        optTod = new javax.swing.JRadioButton();
        optTodCli = new javax.swing.JRadioButton();
        lblMotDev = new javax.swing.JLabel();
        txtCodCiu = new javax.swing.JTextField();
        txtForPag = new javax.swing.JTextField();
        butForPag = new javax.swing.JButton();
        lblPrv = new javax.swing.JLabel();
        txtCodCli = new javax.swing.JTextField();
        txtNomCli = new javax.swing.JTextField();
        butCliCon = new javax.swing.JButton();
        lblDir = new javax.swing.JLabel();
        txtDesCiu = new javax.swing.JTextField();
        butCiuCon = new javax.swing.JButton();
        chkCliVenIna = new javax.swing.JCheckBox();
        chkCliNoVen = new javax.swing.JCheckBox();
        chkCliVenAct = new javax.swing.JCheckBox();
        txtCodForPag = new javax.swing.JTextField();
        txtVenCod = new javax.swing.JTextField();
        txtVenNom = new javax.swing.JTextField();
        butVenCon = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        panDatTabGen = new javax.swing.JPanel();
        panTabGenNor = new javax.swing.JPanel();
        panTabGenNorCab = new javax.swing.JPanel();
        txtCodVen = new javax.swing.JTextField();
        txtNomVen = new javax.swing.JTextField();
        butVen = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnAsi = new javax.swing.JButton();
        panTabGenCen = new javax.swing.JPanel();
        scrollTbl = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBot = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butGua = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setMinimumSize(new java.awt.Dimension(121, 34));
        setNormalBounds(new java.awt.Rectangle(0, 0, 121, 0));
        setPreferredSize(new java.awt.Dimension(473, 537));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        panNor.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("titulo"); // NOI18N
        panNor.add(lblTit, java.awt.BorderLayout.CENTER);

        getContentPane().add(panNor, java.awt.BorderLayout.NORTH);

        panCen.setLayout(new java.awt.BorderLayout());

        panGenTabGen.setLayout(new java.awt.BorderLayout());

        panGenSol.setPreferredSize(new java.awt.Dimension(100, 230));
        panGenSol.setLayout(null);

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        jLabel3.setText("Local:"); // NOI18N
        panGenSol.add(jLabel3);
        jLabel3.setBounds(10, 10, 110, 20);

        txtLoc.setBackground(objZafParSis.getColorCamposObligatorios());
        txtLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLocActionPerformed(evt);
            }
        });
        txtLoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLocFocusLost(evt);
            }
        });
        panGenSol.add(txtLoc);
        txtLoc.setBounds(190, 10, 230, 20);

        txtCodLoc.setBackground(objZafParSis.getColorCamposObligatorios());
        txtCodLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodLocActionPerformed(evt);
            }
        });
        txtCodLoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodLocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodLocFocusLost(evt);
            }
        });
        panGenSol.add(txtCodLoc);
        txtCodLoc.setBounds(120, 10, 70, 20);

        butLoc.setText(".."); // NOI18N
        butLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLocActionPerformed(evt);
            }
        });
        panGenSol.add(butLoc);
        butLoc.setBounds(420, 10, 20, 20);

        btnGrp.add(optTod);
        optTod.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        optTod.setSelected(true);
        optTod.setText("Todos los clientes."); // NOI18N
        optTod.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optTodStateChanged(evt);
            }
        });
        optTod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTodActionPerformed(evt);
            }
        });
        panGenSol.add(optTod);
        optTod.setBounds(10, 30, 150, 23);

        btnGrp.add(optTodCli);
        optTodCli.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        optTodCli.setText("Solo los clientes que cumplan con el criterio seleccionado."); // NOI18N
        optTodCli.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                optTodCliStateChanged(evt);
            }
        });
        optTodCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTodCliActionPerformed(evt);
            }
        });
        panGenSol.add(optTodCli);
        optTodCli.setBounds(10, 50, 330, 23);

        lblMotDev.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        lblMotDev.setText("Forma de Pago:");
        panGenSol.add(lblMotDev);
        lblMotDev.setBounds(20, 110, 80, 20);

        txtCodCiu.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        txtCodCiu.setSelectionColor(new java.awt.Color(255, 255, 255));
        txtCodCiu.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodCiuFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodCiuFocusLost(evt);
            }
        });
        txtCodCiu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodCiuActionPerformed(evt);
            }
        });
        panGenSol.add(txtCodCiu);
        txtCodCiu.setBounds(100, 140, 50, 20);

        txtForPag.setFont(new java.awt.Font("SansSerif", 0, 11));
        txtForPag.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtForPagFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtForPagFocusLost(evt);
            }
        });
        txtForPag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtForPagActionPerformed(evt);
            }
        });
        panGenSol.add(txtForPag);
        txtForPag.setBounds(150, 110, 300, 20);

        butForPag.setText("...");
        butForPag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butForPagActionPerformed(evt);
            }
        });
        panGenSol.add(butForPag);
        butForPag.setBounds(450, 110, 20, 20);

        lblPrv.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        lblPrv.setText("Cliente::"); // NOI18N
        panGenSol.add(lblPrv);
        lblPrv.setBounds(50, 80, 50, 15);

        txtCodCli.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtCodCli.setMinimumSize(new java.awt.Dimension(0, 0));
        txtCodCli.setPreferredSize(new java.awt.Dimension(25, 20));
        txtCodCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodCliFocusLost(evt);
            }
        });
        txtCodCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodCliActionPerformed(evt);
            }
        });
        panGenSol.add(txtCodCli);
        txtCodCli.setBounds(100, 80, 50, 20);

        txtNomCli.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtNomCli.setPreferredSize(new java.awt.Dimension(100, 20));
        txtNomCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomCliFocusLost(evt);
            }
        });
        txtNomCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomCliActionPerformed(evt);
            }
        });
        txtNomCli.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                txtNomCliVetoableChange(evt);
            }
        });
        panGenSol.add(txtNomCli);
        txtNomCli.setBounds(150, 80, 300, 20);

        butCliCon.setText("..."); // NOI18N
        butCliCon.setPreferredSize(new java.awt.Dimension(20, 20));
        butCliCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCliConActionPerformed(evt);
            }
        });
        panGenSol.add(butCliCon);
        butCliCon.setBounds(450, 80, 22, 20);

        lblDir.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        lblDir.setText("Ciudad:"); // NOI18N
        panGenSol.add(lblDir);
        lblDir.setBounds(40, 140, 60, 20);

        txtDesCiu.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtDesCiu.setPreferredSize(new java.awt.Dimension(70, 20));
        txtDesCiu.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtDesCiuCaretUpdate(evt);
            }
        });
        txtDesCiu.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCiuFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCiuFocusLost(evt);
            }
        });
        txtDesCiu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCiuActionPerformed(evt);
            }
        });
        panGenSol.add(txtDesCiu);
        txtDesCiu.setBounds(150, 140, 300, 20);

        butCiuCon.setText("..."); // NOI18N
        butCiuCon.setPreferredSize(new java.awt.Dimension(20, 20));
        butCiuCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCiuConActionPerformed(evt);
            }
        });
        panGenSol.add(butCiuCon);
        butCiuCon.setBounds(450, 140, 22, 20);

        chkCliVenIna.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        chkCliVenIna.setText("Clientes que tienen asignado vendedor inactivo");
        chkCliVenIna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCliVenInaActionPerformed(evt);
            }
        });
        panGenSol.add(chkCliVenIna);
        chkCliVenIna.setBounds(60, 260, 460, 20);

        chkCliNoVen.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        chkCliNoVen.setText("Clientes que no tienen asignado vendedor");
        chkCliNoVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCliNoVenActionPerformed(evt);
            }
        });
        panGenSol.add(chkCliNoVen);
        chkCliNoVen.setBounds(60, 200, 460, 20);

        chkCliVenAct.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        chkCliVenAct.setText("Clientes que tienen asignado vendedor activo");
        chkCliVenAct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCliVenActActionPerformed(evt);
            }
        });
        panGenSol.add(chkCliVenAct);
        chkCliVenAct.setBounds(60, 230, 460, 20);

        txtCodForPag.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        txtCodForPag.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodForPagFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodForPagFocusLost(evt);
            }
        });
        txtCodForPag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodForPagActionPerformed(evt);
            }
        });
        panGenSol.add(txtCodForPag);
        txtCodForPag.setBounds(100, 110, 50, 20);

        txtVenCod.setMinimumSize(new java.awt.Dimension(0, 0));
        txtVenCod.setPreferredSize(new java.awt.Dimension(25, 20));
        txtVenCod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtVenCodFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtVenCodFocusLost(evt);
            }
        });
        txtVenCod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVenCodActionPerformed(evt);
            }
        });
        panGenSol.add(txtVenCod);
        txtVenCod.setBounds(100, 170, 50, 20);

        txtVenNom.setPreferredSize(new java.awt.Dimension(100, 20));
        txtVenNom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtVenNomFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtVenNomFocusLost(evt);
            }
        });
        txtVenNom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVenNomActionPerformed(evt);
            }
        });
        panGenSol.add(txtVenNom);
        txtVenNom.setBounds(150, 170, 300, 20);

        butVenCon.setText("...");
        butVenCon.setPreferredSize(new java.awt.Dimension(20, 20));
        butVenCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butVenConActionPerformed(evt);
            }
        });
        panGenSol.add(butVenCon);
        butVenCon.setBounds(450, 170, 20, 20);

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        jLabel2.setText("Vendedor");
        panGenSol.add(jLabel2);
        jLabel2.setBounds(40, 170, 50, 20);

        panGenTabGen.add(panGenSol, java.awt.BorderLayout.CENTER);

        tabGen.addTab("Filtro", panGenTabGen);

        panDatTabGen.setLayout(new java.awt.BorderLayout());

        panTabGenNor.setPreferredSize(new java.awt.Dimension(100, 100));
        panTabGenNor.setLayout(new java.awt.BorderLayout());

        panTabGenNorCab.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccione el/los clientes a los que desea asignar un vendedor y de click en el boton \"Asignar\""));
        panTabGenNorCab.setPreferredSize(new java.awt.Dimension(100, 20));
        panTabGenNorCab.setLayout(null);

        txtCodVen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodVenFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodVenFocusLost(evt);
            }
        });
        txtCodVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodVenActionPerformed(evt);
            }
        });
        panTabGenNorCab.add(txtCodVen);
        txtCodVen.setBounds(80, 30, 40, 20);

        txtNomVen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomVenFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomVenFocusLost(evt);
            }
        });
        txtNomVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomVenActionPerformed(evt);
            }
        });
        panTabGenNorCab.add(txtNomVen);
        txtNomVen.setBounds(120, 30, 276, 20);

        butVen.setLabel("..."); // NOI18N
        butVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butVenActionPerformed(evt);
            }
        });
        panTabGenNorCab.add(butVen);
        butVen.setBounds(400, 30, 20, 20);

        jLabel1.setText("Vendedor");
        panTabGenNorCab.add(jLabel1);
        jLabel1.setBounds(14, 35, 60, 14);

        btnAsi.setText("Asignar");
        btnAsi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAsiActionPerformed(evt);
            }
        });
        panTabGenNorCab.add(btnAsi);
        btnAsi.setBounds(420, 30, 90, 20);

        panTabGenNor.add(panTabGenNorCab, java.awt.BorderLayout.CENTER);
        panTabGenNorCab.getAccessibleContext().setAccessibleName("Seleccione");

        panDatTabGen.add(panTabGenNor, java.awt.BorderLayout.NORTH);

        panTabGenCen.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollTbl.setViewportView(tblDat);

        panTabGenCen.add(scrollTbl, java.awt.BorderLayout.CENTER);

        panDatTabGen.add(panTabGenCen, java.awt.BorderLayout.CENTER);

        tabGen.addTab("Reporte", panDatTabGen);

        panCen.add(tabGen, java.awt.BorderLayout.CENTER);
        tabGen.getAccessibleContext().setAccessibleName("Filtro");

        getContentPane().add(panCen, java.awt.BorderLayout.CENTER);

        panBot.setLayout(new java.awt.BorderLayout());

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        jPanel1.add(butCon);

        butGua.setText("Guardar");
        butGua.setPreferredSize(new java.awt.Dimension(92, 23));
        butGua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGuaActionPerformed(evt);
            }
        });
        jPanel1.add(butGua);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        jPanel1.add(butCer);

        panBot.add(jPanel1, java.awt.BorderLayout.EAST);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBot.add(panBarEst, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panBot, java.awt.BorderLayout.SOUTH);

        setBounds(0, 0, 789, 540);
    }// </editor-fold>//GEN-END:initComponents

    private void txtLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLocActionPerformed
        // TODO add your handling code here:
        txtLoc.transferFocus();
    }//GEN-LAST:event_txtLocActionPerformed

    private void txtLocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLocFocusGained
        // TODO add your handling code here:
        strDesLoc = txtLoc.getText();
        txtLoc.selectAll();
    }//GEN-LAST:event_txtLocFocusGained

    private void txtLocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLocFocusLost
        if (!txtLoc.getText().equalsIgnoreCase(strDesLoc)) {
            if (txtLoc.getText().equals("")) {
                txtCodLoc.setText("");
                txtLoc.setText("");
            } else {
                mostrarVenConLoc(2);
            }
        } else {
            txtLoc.setText(strDesLoc);
        }
    }//GEN-LAST:event_txtLocFocusLost

    
    
    
    private void txtCodLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodLocActionPerformed
        // TODO add your handling code here:
        txtCodLoc.transferFocus();
    }//GEN-LAST:event_txtCodLocActionPerformed

    private void txtCodLocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodLocFocusGained
        // TODO add your handling code here:
        strCodLoc = txtCodLoc.getText();
        txtCodLoc.selectAll();
    }//GEN-LAST:event_txtCodLocFocusGained

    private void txtCodLocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodLocFocusLost
        if (!txtCodLoc.getText().equalsIgnoreCase(strCodLoc)) {
            if (txtCodLoc.getText().equals("")) {
                txtCodLoc.setText("");
                txtCodLoc.setText("");
                txtLoc.setText("");
            } else {
                mostrarVenConLoc(1);
            }
        } else {
            txtCodLoc.setText(strCodLoc);
        }
    }//GEN-LAST:event_txtCodLocFocusLost

    private void butLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLocActionPerformed
        vcoLoc.setTitle("Listado de Locales");
        vcoLoc.setCampoBusqueda(1);
        vcoLoc.show();
        if (vcoLoc.getSelectedButton() == ZafVenCon.INT_BUT_ACE) {
            txtCodLoc.setText(vcoLoc.getValueAt(1));
            //txtCodLoc.setText(vcoLoc.getValueAt(2));
            txtLoc.setText(vcoLoc.getValueAt(2));
            //strCodTipDoc = objVenConTipdoc.getValueAt(1);
        }
    }//GEN-LAST:event_butLocActionPerformed

    private void optTodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTodActionPerformed
    }//GEN-LAST:event_optTodActionPerformed

    private void optTodCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTodCliActionPerformed

    }//GEN-LAST:event_optTodCliActionPerformed

    private void chkCliVenInaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCliVenInaActionPerformed
        // <editor-fold defaultstate="collapsed" desc=" /* Rose: Habilitar Opci√≥n Volver a Facturar */ ">        
    }//GEN-LAST:event_chkCliVenInaActionPerformed

    private void txtDesCiuCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtDesCiuCaretUpdate

    }//GEN-LAST:event_txtDesCiuCaretUpdate

    private void txtDesCiuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCiuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDesCiuActionPerformed

    private void txtDesCiuFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCiuFocusGained
        strCiudad = txtDesCiu.getText();
        txtDesCiu.selectAll();
    }//GEN-LAST:event_txtDesCiuFocusGained

    private void txtCodCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodCliActionPerformed
        txtCodCli.transferFocus();
    }//GEN-LAST:event_txtCodCliActionPerformed

    private void txtCodCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCliFocusGained
        strCodCli = txtCodCli.getText();
        txtCodCli.selectAll();
    }//GEN-LAST:event_txtCodCliFocusGained

    private void txtCodCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCliFocusLost
        if (!txtCodCli.getText().equalsIgnoreCase(strCodCli)) {
            if (txtCodCli.getText().equals("")) {
                txtCodCli.setText("");
                txtNomCli.setText("");
                txtDesCiu.setText("");
            } else {
                if(txtCodLoc.getText().length()>0){
                    BuscarCliente("a.co_cli", txtCodCli.getText(), 0);
                }else{
                    mostrarMsgInf("Debe primero seleccionar un local ");
                    txtCodCli.setText("");
                    txtNomCli.setText("");                    
                }
            }
        } else {
            txtCodCli.setText(strCodCli);
        }
        if (txtCodCli.getText().length() > 0)
        {
            optTodCli.setSelected(true);                    
        }
        
    }//GEN-LAST:event_txtCodCliFocusLost

    private void txtNomCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliFocusGained
        strNomCli = txtNomCli.getText();
        txtNomCli.selectAll();
    }//GEN-LAST:event_txtNomCliFocusGained

    private void txtNomCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliFocusLost
        if (!txtNomCli.getText().equalsIgnoreCase(strNomCli)) {
            if (txtNomCli.getText().equals("")) {
                txtCodCli.setText("");
                txtNomCli.setText("");
                txtDesCiu.setText("");
            } else {
                
               if(txtCodLoc.getText().length()>0){
                    BuscarCliente("a.tx_nom", txtNomCli.getText(), 1);
                    if (txtCodCli.getText().length() > 0)
                    {
                        optTodCli.setSelected(true);                    
                    }                    
                }else{
                    mostrarMsgInf("Debe seleccionar primero un local ");
                    txtCodCli.setText("");
                    txtNomCli.setText("");                    
                }                
                
                //BuscarCliente("a.tx_nom", txtNomCli.getText(), 1);
                
            }
        } else {
            txtNomCli.setText(strNomCli);
        }
    }//GEN-LAST:event_txtNomCliFocusLost

    private void txtNomCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomCliActionPerformed
        txtNomCli.transferFocus();
    }//GEN-LAST:event_txtNomCliActionPerformed

    private void txtNomCliVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_txtNomCliVetoableChange
        // Prueba
    }//GEN-LAST:event_txtNomCliVetoableChange

    private void butCliConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCliConActionPerformed
        /*
        
                        if(txtCodLoc.getText().length()>0){
                    BuscarCliente("a.co_cli", txtCodCli.getText(), 0);
                }else{
                    mostrarMsgInf("Debe seleccionar un local primeramente");
                }

        */
        if(txtCodLoc.getText().length()>0){
            configurarVenConClientes();
            vcoCli.setTitle("Listado de Clientes");
            vcoCli.setCampoBusqueda(1);
            vcoCli.show();
            if (vcoCli.getSelectedButton() == vcoCli.INT_BUT_ACE)
            {
                txtCodCli.setText(vcoCli.getValueAt(1));
                txtNomCli.setText(vcoCli.getValueAt(3));
                //txtDesCiu.setText(objVenConCli.getValueAt(3));
                strCodCli = vcoCli.getValueAt(1);
                if (txtCodCli.getText().length() > 0)
                {
                    optTodCli.setSelected(true);                    
                }

            }
        }else{
            mostrarMsgInf("Debe seleccionar primero un local ");
        }
    }//GEN-LAST:event_butCliConActionPerformed

    private void butCiuConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCiuConActionPerformed
        // TODO add your handling code here:
        vcoCiu.setTitle("Listado de Ciudades");
        vcoCiu.setCampoBusqueda(1);
        vcoCiu.show();
        if (vcoCiu.getSelectedButton()==vcoCiu.INT_BUT_ACE)
        {
            txtCodCiu.setText(vcoCiu.getValueAt(1));
            txtDesCiu.setText(vcoCiu.getValueAt(2));
            strCodCiu = vcoCiu.getValueAt(1);
            strCiudad = vcoCiu.getValueAt(2);
        }
    }//GEN-LAST:event_butCiuConActionPerformed

    private void txtCodCiuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodCiuActionPerformed
        txtCodCiu.transferFocus();
    }//GEN-LAST:event_txtCodCiuActionPerformed

    private void txtCodCiuFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCiuFocusGained
        strCodCiu = txtCodCiu.getText();
        txtCodCiu.selectAll();
    }//GEN-LAST:event_txtCodCiuFocusGained

    private void txtCodCiuFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCiuFocusLost
        if (!txtCodCiu.getText().equalsIgnoreCase(strCodCiu)) {
            if (txtCodCiu.getText().equals("")) {
                txtCodCiu.setText("");
                txtDesCiu.setText("");
            } else {
                BuscarCiudad("a.co_ciu", txtCodCiu.getText(), 0);
            }
        } else {
            txtCodCiu.setText(strCodCiu);
        }
        if (txtCodCiu.getText().length() > 0)
        {
            optTodCli.setSelected(true);                    
        }
        
    }//GEN-LAST:event_txtCodCiuFocusLost

    private void txtForPagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtForPagActionPerformed
        txtForPag.transferFocus();
    }//GEN-LAST:event_txtForPagActionPerformed

    private void txtForPagFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtForPagFocusGained
        strDesCodForPag = txtForPag.getText();
        txtForPag.selectAll();
    }//GEN-LAST:event_txtForPagFocusGained

    private void txtForPagFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtForPagFocusLost
        // TODO add your handling code here:
        if (!txtForPag.getText().equalsIgnoreCase(strDesCodForPag)) {
            if (txtForPag.getText().equals("")) {
                txtCodForPag.setText("");
                txtForPag.setText("");
            } else {
                mostrarVenConForPag(2);                
            }
        } else {
            txtForPag.setText(strDesCodForPag);
        }
    }//GEN-LAST:event_txtForPagFocusLost

    private void butForPagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butForPagActionPerformed
        mostrarVenConForPag(0);
    }//GEN-LAST:event_butForPagActionPerformed

    private void chkCliNoVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCliNoVenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkCliNoVenActionPerformed

    private void chkCliVenActActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCliVenActActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkCliVenActActionPerformed

    private void txtCodForPagFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodForPagFocusGained
        // TODO add your handling code here:
        strCodForPag=txtCodForPag.getText();
        txtCodForPag.selectAll();
    }//GEN-LAST:event_txtCodForPagFocusGained

    private void txtCodForPagFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodForPagFocusLost
        // TODO add your handling code here:
        if (!txtCodForPag.getText().equalsIgnoreCase(strCodForPag))
        {
            if (txtCodForPag.getText().equals(""))
            {
                txtCodForPag.setText("");
                txtForPag.setText("");
            }
            else
            {                
                mostrarVenConForPag(1);                  
            }
        }
        else{
            txtCodForPag.setText(strCodForPag);
        }
        
        if (txtCodForPag.getText().length() > 0)
        {
            optTodCli.setSelected(true);                    
        }
        
    }//GEN-LAST:event_txtCodForPagFocusLost

    private void txtCodForPagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodForPagActionPerformed
        // TODO add your handling code here:
        txtCodForPag.transferFocus();
    }//GEN-LAST:event_txtCodForPagActionPerformed

    private void txtCodVenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodVenFocusGained
        strCodVen=txtCodVen.getText();
        txtCodVen.selectAll();
    }//GEN-LAST:event_txtCodVenFocusGained

    private void txtCodVenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodVenFocusLost
        if (!txtCodVen.getText().equalsIgnoreCase(strCodVen))
        {
            if (txtCodVen.getText().equals(""))
            {
                txtCodVen.setText("");
                txtNomVen.setText("");
            }
            else
            {
                if(txtCodLoc.getText().length()>0){
                    BuscarVendedor("a.co_usr",txtCodVen.getText(),0);
                }else{
                    mostrarMsgInf("Debe primero seleccionar un local ");
                    txtCodVen.setText("");
                    txtNomVen.setText("");                    
                }
            }
        }
        else
        txtCodVen.setText(strCodVen);
    }//GEN-LAST:event_txtCodVenFocusLost

    private void txtCodVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodVenActionPerformed
        txtCodVen.transferFocus();
    }//GEN-LAST:event_txtCodVenActionPerformed

    private void txtNomVenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomVenFocusGained
        strNomVen=txtNomVen.getText();
        txtNomVen.selectAll();
    }//GEN-LAST:event_txtNomVenFocusGained

    private void txtNomVenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomVenFocusLost
        if (!txtNomVen.getText().equalsIgnoreCase(strNomVen))
        {
            if (txtNomVen.getText().equals(""))
            {
                txtCodVen.setText("");
                txtNomVen.setText("");
            }
            else
            {
                if(txtCodLoc.getText().length()>0){
                    BuscarVendedor("a.tx_nom",txtNomVen.getText(),1);
                }else{
                  mostrarMsgInf("Debe seleccionar primero un local ");  
                }
            }
        }
        else
        txtNomVen.setText(strNomVen);
    }//GEN-LAST:event_txtNomVenFocusLost

    private void txtNomVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomVenActionPerformed
        txtNomVen.transferFocus();
    }//GEN-LAST:event_txtNomVenActionPerformed

    private void butVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butVenActionPerformed
        if(txtCodLoc.getText().length()>0){
            vcoVen.setTitle("Listado de Vendedores");
            vcoVen.setCampoBusqueda(1);
            vcoVen.cargarDatos();
            vcoVen.show();
            if (vcoVen.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
            {
                txtCodVen.setText(vcoVen.getValueAt(1));
                txtNomVen.setText(vcoVen.getValueAt(2));
                strCodVen =  vcoVen.getValueAt(1);
                strNomVen =  vcoVen.getValueAt(2);
            }
        }else{
            mostrarMsgInf("Debe seleccionar primero un local ");
        }        

    }//GEN-LAST:event_butVenActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        configurarFrm();
    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        exitForm(evt);
    }//GEN-LAST:event_formInternalFrameClosing

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acci√≥n de acuerdo a la etiqueta del bot√≥n ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar"))
        {
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }
        }
        else
        {

        }

    }//GEN-LAST:event_butConActionPerformed

    private void butGuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGuaActionPerformed
        // TODO add your handling code here:
        guardarReg();

    }//GEN-LAST:event_butGuaActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    private void btnAsiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAsiActionPerformed
        // TODO add your handling code here:
        int [] intArrFil=tblDat.getSelectedRows();
        for(int i=0; i<intArrFil.length; i++){
             tblDat.setValueAt(txtCodVen.getText(), intArrFil[i], INT_TBL_CODVEN);
             tblDat.setValueAt(txtNomVen.getText(), intArrFil[i], INT_TBL_NOMVEN);
         }        
    }//GEN-LAST:event_btnAsiActionPerformed

    private void txtVenCodFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVenCodFocusGained
        // TODO add your handling code here:
        strVenCod=txtVenCod.getText();
        txtVenCod.selectAll();
    }//GEN-LAST:event_txtVenCodFocusGained

    private void txtVenCodFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVenCodFocusLost

        if (!txtVenCod.getText().equalsIgnoreCase(strVenCod))
        {
            if (txtVenCod.getText().equals(""))
            {
                txtVenCod.setText("");
                txtVenNom.setText("");
            }
            else
            {
                if(txtCodLoc.getText().length()>0){
                    BuscarVendedorFil("a.co_usr",txtVenCod.getText(),0);
                }else{
                    mostrarMsgInf("Debe primero seleccionar un local ");
                    txtVenCod.setText("");
                    txtVenNom.setText("");
                }
            }
        }
        else{
            txtVenCod.setText(strVenCod);
        }
        if (txtVenCod.getText().length() > 0)
        {
            optTodCli.setSelected(true);                    
        }
        

    }//GEN-LAST:event_txtVenCodFocusLost

    private void txtVenCodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVenCodActionPerformed
        txtVenCod.transferFocus();

    }//GEN-LAST:event_txtVenCodActionPerformed

    private void txtVenNomFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVenNomFocusGained
        // TODO add your handling code here:
        strVenNom=txtVenNom.getText();
        txtVenNom.selectAll();
    }//GEN-LAST:event_txtVenNomFocusGained

    private void txtVenNomFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVenNomFocusLost
        // TODO add your handling code here:
        if (!txtVenNom.getText().equalsIgnoreCase(strVenNom))
        {
            if (txtVenNom.getText().equals(""))
            {
                txtVenCod.setText("");
                txtVenNom.setText("");
            }
            else
            {
                if(txtCodLoc.getText().length()>0){
                    BuscarVendedorFil("a.tx_nom",txtVenNom.getText(),1);
                }else{
                    mostrarMsgInf("Debe primero seleccionar un local ");
                    txtVenCod.setText("");
                    txtVenNom.setText("");
                }
            }
        }
        else
        txtVenNom.setText(strVenNom);

    }//GEN-LAST:event_txtVenNomFocusLost

    private void txtVenNomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVenNomActionPerformed

        txtVenNom.transferFocus();

    }//GEN-LAST:event_txtVenNomActionPerformed

    private void butVenConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butVenConActionPerformed
        
        if(txtCodLoc.getText().length()>0){
            BuscarVendedorFil("a.co_usr","",0);
        }else{
            mostrarMsgInf("Debe primero seleccionar un local ");
            txtVenCod.setText("");
            txtVenNom.setText("");
        }
        if (txtVenCod.getText().length() > 0)
        {
            optTodCli.setSelected(true);                    
        }
        
    }//GEN-LAST:event_butVenConActionPerformed

    private void optTodStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optTodStateChanged

        if(optTod.isSelected())
        {
        txtCodCiu.setText("");
        strCodCiu="";
        txtDesCiu.setText("");
        strCiudad="";
        txtCodCli.setText("");
        strCodCli="";
        txtNomCli.setText("");
        strNomCli="";
        txtCodForPag.setText("");
        strCodForPag="";
        txtForPag.setText("");
        strDesCodForPag="";
        txtVenCod.setText("");
        strVenCod="";
        txtVenNom.setText("");    
        strVenNom="";
        chkCliNoVen.setSelected(false);
        chkCliVenAct.setSelected(false);
        chkCliVenIna.setSelected(false);
        } 
    }//GEN-LAST:event_optTodStateChanged

    private void optTodCliStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_optTodCliStateChanged
        if(optTodCli.isSelected())
        {
           optTod.setSelected(false);
        }  
    }//GEN-LAST:event_optTodCliStateChanged

    private void txtDesCiuFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCiuFocusLost
        // TODO add your handling code here:
        
        if (!txtDesCiu.getText().equalsIgnoreCase(strCiudad)) {
            if (txtDesCiu.getText().equals("")) {
                txtCodCiu.setText("");
                txtDesCiu.setText("");
            } else {                
                BuscarCiudad("a.tx_deslar", txtDesCiu.getText(), 1);
            }
        } else {
            txtDesCiu.setText(strCiudad);
        }        
    }//GEN-LAST:event_txtDesCiuFocusLost

    
    
   /**
     * Esta funci√≥n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de b√∫squeda determina si se debe hacer
     * una b√∫squeda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se est√° buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opci√≥n que desea utilizar.
     * @param intTipBus El tipo de b√∫squeda a realizar.
     * @return true: Si no se present√≥ ning√∫n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConLoc(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoLoc.setCampoBusqueda(1);
                    vcoLoc.setVisible(true);
                    if (vcoLoc.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                    {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtLoc.setText(vcoLoc.getValueAt(2));
                    }
                    break;
                case 1: //B√∫squeda directa por "C√≥digo".
                    if (vcoLoc.buscar("a1.co_loc", txtCodLoc.getText()))
                    {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtLoc.setText(vcoLoc.getValueAt(2));
                    }
                    else
                    {
                        vcoLoc.setCampoBusqueda(0);
                        vcoLoc.setCriterio1(11);
                        vcoLoc.cargarDatos();
                        vcoLoc.setVisible(true);
                        if (vcoLoc.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodLoc.setText(vcoLoc.getValueAt(1));
                            txtLoc.setText(vcoLoc.getValueAt(2));
                        }
                        else
                        {
                            txtCodLoc.setText(strCodLoc);
                        }
                    }
                    break;
                case 2: //B√∫squeda directa por "Nombre".
                    if (vcoLoc.buscar("a1.tx_nom", txtLoc.getText()))
                    {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtLoc.setText(vcoLoc.getValueAt(2));
                    }
                    else
                    {
                        vcoLoc.setCampoBusqueda(1);
                        vcoLoc.setCriterio1(11);
                        vcoLoc.cargarDatos();
                        vcoLoc.setVisible(true);
                        if (vcoLoc.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodLoc.setText(vcoLoc.getValueAt(1));
                            txtLoc.setText(vcoLoc.getValueAt(2));
                        }
                        else
                        {
                            //txtLoc.setText(strLoc);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }   
    
    
public void BuscarVendedor(String campo, String strBusqueda, int tipo)
    {
        configurarVenConVendedor();
        vcoVen.setTitle("Listado de Vendedores");
        if (vcoVen.buscar(campo, strBusqueda)) 
        {
            txtCodVen.setText(vcoVen.getValueAt(1));
            txtNomVen.setText(vcoVen.getValueAt(2));
            strCodVen = vcoVen.getValueAt(1);
            strNomVen = vcoVen.getValueAt(2);
        } 
        else 
        {
            vcoVen.setCampoBusqueda(tipo);
            vcoVen.cargarDatos();
            vcoVen.show();
            if (vcoVen.getSelectedButton() == ZafVenCon.INT_BUT_ACE) 
            {
                txtCodVen.setText(vcoVen.getValueAt(1));
                txtNomVen.setText(vcoVen.getValueAt(2));
                strCodVen = vcoVen.getValueAt(1);
                strNomVen = vcoVen.getValueAt(2);
            }
            else 
            {
                txtCodVen.setText(strCodVen);
                txtNomVen.setText(strNomVen);
            }
        }
    }  

    public void BuscarVendedorFil(String campo, String strBusqueda, int tipo)
    {
        configurarVenConVendedorFil();
        vcoVenFil.setTitle("Listado de Vendedores");
        if (vcoVenFil.buscar(campo, strBusqueda)) 
        {
            txtVenCod.setText(vcoVenFil.getValueAt(1));
            txtVenNom.setText(vcoVenFil.getValueAt(2));
        } 
        else 
        {
            vcoVenFil.setCampoBusqueda(tipo);
            vcoVenFil.cargarDatos();
            vcoVenFil.show();
            if (vcoVenFil.getSelectedButton() == ZafVenCon.INT_BUT_ACE) 
            {
                txtVenCod.setText(vcoVenFil.getValueAt(1));
                txtVenNom.setText(vcoVenFil.getValueAt(2));
            }
            else 
            {
                txtVenCod.setText(strVenCod);
                txtVenNom.setText(strVenNom);
            }
        }
    } 

    
    public void BuscarCliente(String campo, String strBusqueda, int tipo) 
    {
        vcoCli.setTitle("Listado de Clientes");
        if (vcoCli.buscar(campo, strBusqueda)) 
        {
            txtCodCli.setText(vcoCli.getValueAt(1));
            txtNomCli.setText(vcoCli.getValueAt(3));
            //txtDirCliVolFac.setText(objVenConCli.getValueAt(3));
        } 
        else 
        {
            vcoCli.setCampoBusqueda(tipo);
            vcoCli.cargarDatos();
            vcoCli.show();
            if (vcoCli.getSelectedButton() == vcoCli.INT_BUT_ACE) 
            {
                txtCodCli.setText(vcoCli.getValueAt(1));
                txtNomCli.setText(vcoCli.getValueAt(3));
                //txtDirCliVolFac.setText(objVenConCli.getValueAt(3));
            }
            else 
            {
                txtCodCli.setText(strCodCli);
                txtNomCli.setText(strNomCli);
                //txtDirCliVolFac.setText(strDirCliVolFac);
            }
        }    
    }   


    private boolean configurarVenConClientes() {
        boolean blnRes=true;
        int intTipLoc=1; //Tipo de Consulta para generar query de locales. 1=C√≥digo Local; 2=Todos los datos del local.
        String strSQL="";
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("C√≥digo");
            arlAli.add("Identificaci√≥n");
            arlAli.add("Nombre");
            arlAli.add("Direcci√≥n");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("100");
            arlAncCol.add("284");
            arlAncCol.add("110");
            if (objZafParSis.getCodigoEmpresa()==objZafParSis.getCodigoEmpresaGrupo())
            {
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT ' ' AS co_cli, b2.tx_ide, b2.tx_nom, b2.tx_dir";
                strSQL+=" FROM (";
                strSQL+=" SELECT a2.co_emp, MAX(a2.co_cli) AS co_cli, a2.tx_ide";
                strSQL+=" FROM (";
                strSQL+=" SELECT MIN(co_emp) AS co_emp, tx_ide";
                strSQL+=" FROM tbm_cli";
                strSQL+=" GROUP BY tx_ide";
                strSQL+=" ) AS a1";
                strSQL+=" INNER JOIN tbm_cli AS a2 ON (a1.co_emp=a2.co_emp AND a1.tx_ide=a2.tx_ide)";
                strSQL+=" GROUP BY a2.co_emp, a2.tx_ide";
                strSQL+=" ) AS b1";
                strSQL+=" INNER JOIN tbm_cli AS b2 ON (b1.co_emp=b2.co_emp AND b1.co_cli=b2.co_cli)";
                switch (objZafParSis.getCodigoMenu())
                {
                    case 775: //CxC: Actualizaci√≥n de datos de cr√©dito...
                        strSQL+=" AND b2.st_cli='S' AND b2.st_reg='A'";
                        break;
                    case 2327: //CxP: Actualizaci√≥n de datos de cr√©dito...
                        strSQL+=" AND b2.st_prv='S' AND b2.st_reg='A'";
                        break;
                }
                strSQL+=" ORDER BY b2.tx_nom";
            }
            else
            {
                //Armar la sentencia SQL.
                if (objZafParSis.getCodigoUsuario() == 1)
                {
                    strSQL = "";
                    strSQL += " SELECT distinct a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
                    strSQL += " FROM tbm_cli as a1";
                    strSQL += " INNER JOIN tbr_cliLoc AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli)";                    
                    strSQL += " WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa();
                    if(txtCodLoc.getText().length()>0){
                        strSQL += " AND a2.co_loc =" + txtCodLoc.getText() ;
                    }                    
                } 
                else 
                {
                    strSQL = "";
                    strSQL += "SELECT distinct a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
                    strSQL += " FROM tbm_cli AS a1";
                    strSQL += " INNER JOIN tbr_cliLoc AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli)";
                    strSQL += " WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa();
                    //Valida si el usuario tiene acceso a locales.
                    if ((objLocPrgUsr.validaLocUsr())) 
                    {
                        if(txtCodLoc.getText().length()>0){
                            //strSQL += " AND a2.co_loc in (" + objLocPrgUsr.cargarLocUsr(intTipLoc) + ")";
                            strSQL += " AND a2.co_loc =" + txtCodLoc.getText() ;
                        }else{
                            strSQL += " AND a2.co_loc in (" + objLocPrgUsr.cargarLocUsr(intTipLoc) + ")";                        
                        }
                    }
                    else 
                    {
                        strSQL += " AND a2.co_loc not in (" + objLocPrgUsr.cargarLoc(intTipLoc) + ")";
                    }
                }
                switch (objZafParSis.getCodigoMenu()) 
                {
                    case 775: //CxC: Actualizaci√≥n de datos de cr√©dito...
                        strSQL += " AND a1.st_cli='S' AND a1.st_reg='A'";
                        break;
                    case 2327: //CxP: Actualizaci√≥n de datos de cr√©dito...
                        strSQL += " AND a1.st_prv='S' AND a1.st_reg='A'";
                        break;
                    case 4137: //VEN: Asignaci√≥n de vendedores a clientes por local
                        strSQL += " AND a1.st_cli='S' AND a1.st_reg='A'";
                        break;
                        
                }
                strSQL += " ORDER BY a1.tx_nom";
            }
            //System.out.println("configurarVenConCli: "+strSQL);
            vcoCli=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objZafParSis, "Listado de clientes/proveedores", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoCli.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoCli.setConfiguracionColumna(2, javax.swing.JLabel.RIGHT);

        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


private boolean configurarVenConForPag()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_forPag");
            arlCam.add("a1.tx_des");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("C√≥digo");
            arlAli.add("Descripci√≥n");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("60");
            arlAncCol.add("300");
            //Armar la sentencia SQL.
            String strSQL="";
            strSQL+=" SELECT a1.co_forPag, a1.tx_des";
            strSQL+=" FROM tbm_cabForPag AS a1";
            strSQL+=" WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa();
            strSQL+=" ORDER BY a1.tx_des";
            vcoForPag=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objZafParSis, "Listado de formas de pago", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoForPag.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean configurarVenConVendedor() 
    {
        boolean blnRes = true;
        String strSQL="";
        try 
        {
            //System.out.println("configurarVenConVendedor");
            ArrayList arlCam = new ArrayList();
            arlCam.add("a.co_usr");
            arlCam.add("a.tx_nom");
            ArrayList arlAli = new ArrayList();
            arlAli.add("C√≥digo");
            arlAli.add("Nombre.");
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("70");
            arlAncCol.add("470");
            
            //strSQL = "Select a.co_usr, a.tx_nom from tbm_usr as a where st_reg='A'"; //Antes

            //Armar la sentencia SQL.
            if (objZafParSis.getCodigoEmpresa()==objZafParSis.getCodigoEmpresaGrupo())
            {
                strSQL="";
                strSQL+=" SELECT a.co_usr, a.tx_usr, a.tx_nom";
                strSQL+=" FROM tbm_usr AS a";
                strSQL+=" INNER JOIN tbr_usrEmp AS a2 ON (a.co_usr=a2.co_usr)";
                strSQL+=" WHERE a.st_reg='A' AND (a2.st_ven='S' OR a2.st_com='S')";
                strSQL+=" GROUP BY a.co_usr, a.tx_usr, a.tx_nom";
                strSQL+=" ORDER BY a.tx_nom";
            }
            else
            {
                strSQL="";
                strSQL+=" SELECT a.co_usr, a.tx_usr, a.tx_nom";
                strSQL+=" FROM tbm_usr AS a";
                strSQL+=" INNER JOIN tbr_usrEmp AS a2 ON (a.co_usr=a2.co_usr)";
                strSQL+=" INNER JOIN tbr_locUsr as a1 ON (a2.co_emp=a1.co_emp AND a.co_usr=a1.co_usr)";                 
                strSQL+=" WHERE a2.co_emp=" + objZafParSis.getCodigoEmpresa();
                if(txtCodLoc.getText().length()>0){
                    strSQL+=" AND a1.co_loc="+txtCodLoc.getText();
                }else{
                    strSQL+=" AND a1.co_loc="+objZafParSis.getCodigoLocal();
                }
                strSQL+=" AND a.st_reg='A' AND (a2.st_ven='S' OR a2.st_com='S')";
                strSQL+=" ORDER BY a.tx_nom";
                
                /*select a.co_usr, a.tx_nom   
                    from tbr_usremp as b 
                    inner join tbm_usr as a on (a.co_usr=b.co_usr)  
                    INNER JOIN tbr_locUsr as a1 ON (b.co_emp=a1.co_emp AND a.co_usr=a1.co_usr) 
                    where b.co_emp=4  AND a1.co_loc=3
                    and b.st_ven='S' and a.st_reg not in ('I') AND a1.st_reg IN ('A','P') order by a.tx_nom
                */
                
            }
            
            vcoVen = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objZafParSis, objZafParSis.getNombreMenu(), strSQL, arlCam, arlAli, arlAncCol);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;

        } 
        catch (Exception e) {    blnRes = false;        objUti.mostrarMsgErr_F1(this, e);     }
        return blnRes;
    }

    private boolean configurarVenConVendedorFil() 
    {
        boolean blnRes = true;
        String strSQL="";
        try 
        {
            
            ArrayList arlCam = new ArrayList();
            arlCam.add("a.co_usr");
            arlCam.add("a.tx_nom");
            ArrayList arlAli = new ArrayList();
            arlAli.add("C√≥digo");
            arlAli.add("Nombre.");
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("70");
            arlAncCol.add("470");
            
            //strSQL = "Select a.co_usr, a.tx_nom from tbm_usr as a where st_reg='A'"; //Antes

            //Armar la sentencia SQL.
            if (objZafParSis.getCodigoEmpresa()==objZafParSis.getCodigoEmpresaGrupo())
            {
                strSQL="";
                strSQL+=" SELECT a.co_usr, a.tx_usr, a.tx_nom";
                strSQL+=" FROM tbm_usr AS a";
                strSQL+=" INNER JOIN tbr_usrEmp AS a2 ON (a.co_usr=a2.co_usr)";
                strSQL+=" WHERE a.st_reg='A' AND (a2.st_ven='S' OR a2.st_com='S')";
                strSQL+=" GROUP BY a.co_usr, a.tx_usr, a.tx_nom";
                strSQL+=" ORDER BY a.tx_nom";
            }
            else
            {
                strSQL="";
                strSQL+=" SELECT a.co_usr, a.tx_usr, a.tx_nom";
                strSQL+=" FROM tbm_usr AS a";
                strSQL+=" INNER JOIN tbr_usrEmp AS a2 ON (a.co_usr=a2.co_usr)";
                strSQL+=" INNER JOIN tbr_locUsr as a1 ON (a2.co_emp=a1.co_emp AND a.co_usr=a1.co_usr)";                 
                strSQL+=" WHERE a2.co_emp=" + objZafParSis.getCodigoEmpresa();
                if(txtCodLoc.getText().length()>0){
                  strSQL+=" AND a1.co_loc="+txtCodLoc.getText();
                }else{
                  strSQL+=" AND a1.co_loc="+objZafParSis.getCodigoLocal();                
                }
                strSQL+=" AND a.st_reg='A' AND (a2.st_ven='S' OR a2.st_com='S')";
                strSQL+=" ORDER BY a.tx_nom";
                
            }
            
            vcoVenFil = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objZafParSis, objZafParSis.getNombreMenu(), strSQL, arlCam, arlAli, arlAncCol);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;

        } 
        catch (Exception e) {    blnRes = false;        objUti.mostrarMsgErr_F1(this, e);     }
        return blnRes;
    }    

private boolean configurarVenConLoc()
    {
        boolean blnRes=true;
        String strSQL="";
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_loc");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("C√≥digo");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("400");
           
            strSQL="";
            
            if(objZafParSis.getCodigoUsuario()==1)  
            {    strSQL=objLocPrgUsr.cargarLoc(2);       }
            else 
            {    strSQL=objLocPrgUsr.cargarLocUsr(2);    }

            //System.out.println("ConfigurarVenConLoc: "+strSQL);
            vcoLoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objZafParSis, "Listado de locales", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoLoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean configurarVenConCiudad() 
    {
        boolean blnRes = true;
        try 
        {
            ArrayList arlCam = new ArrayList();
            arlCam.add("a.co_ciu");
            arlCam.add("a.tx_deslar");
            ArrayList arlAli = new ArrayList();
            arlAli.add("C√≥digo");
            arlAli.add("Descripci√≥n.");
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("70");
            arlAncCol.add("470");
            //Armar la sentencia SQL.
            String strSQL = "";
            strSQL = "SELECT a.co_ciu, a.tx_deslar FROM tbm_ciu as a ORDER BY a.tx_deslar";

            vcoCiu = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objZafParSis, objZafParSis.getNombreMenu(), strSQL, arlCam, arlAli, arlAncCol);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;
        }
        catch (Exception e) {   blnRes = false;    objUti.mostrarMsgErr_F1(this, e);     }
        return blnRes;
    }
  

/**
     * Esta funci√≥n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de b√∫squeda determina si se debe hacer
     * una b√∫squeda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se est√° buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opci√≥n que desea utilizar.
     * @param intTipBus El tipo de b√∫squeda a realizar.
     * @return true: Si no se present√≥ ning√∫n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConForPag(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoForPag.setCampoBusqueda(2);
                    vcoForPag.setVisible(true);
                    if (vcoForPag.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                    {
                        txtCodForPag.setText(vcoForPag.getValueAt(1));
                        txtForPag.setText(vcoForPag.getValueAt(2));
                    }
                    break;
                case 1: //B√∫squeda directa por "C√≥digo".
                    if (vcoForPag.buscar("a1.co_forPag", txtCodForPag.getText()))
                    {
                        txtCodForPag.setText(vcoForPag.getValueAt(1));
                        txtForPag.setText(vcoForPag.getValueAt(2));
                    }
                    else
                    {
                        vcoForPag.setCampoBusqueda(0);
                        vcoForPag.setCriterio1(11);
                        vcoForPag.cargarDatos();
                        vcoForPag.setVisible(true);
                        if (vcoForPag.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodForPag.setText(vcoForPag.getValueAt(1));
                            txtForPag.setText(vcoForPag.getValueAt(2));
                        }
                        else
                        {
                            txtCodForPag.setText(strCodForPag);
                        }
                    }
                    break;
                case 2: //B√∫squeda directa por "Descripci√≥n larga".
                    if (vcoForPag.buscar("a1.tx_des", txtForPag.getText()))
                    {
                        txtCodForPag.setText(vcoForPag.getValueAt(1));
                        txtForPag.setText(vcoForPag.getValueAt(2));
                    }
                    else
                    {
                        vcoForPag.setCampoBusqueda(1);
                        vcoForPag.setCriterio1(11);
                        vcoForPag.cargarDatos();
                        vcoForPag.setVisible(true);
                        if (vcoForPag.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodForPag.setText(vcoForPag.getValueAt(1));
                            txtForPag.setText(vcoForPag.getValueAt(2));
                        }
                        else
                        {
                            txtForPag.setText(strDesCodForPag);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    public void BuscarCiudad(String campo, String strBusqueda, int tipo) 
    {
        vcoCiu.setTitle("Listado de Ciudades");
        if (vcoCiu.buscar(campo, strBusqueda)) 
        {
            txtCodCiu.setText(vcoCiu.getValueAt(1));
            txtDesCiu.setText(vcoCiu.getValueAt(2));
        }
        else 
        {
            vcoCiu.setCampoBusqueda(tipo);
            vcoCiu.setCriterio1(11); 
            vcoCiu.cargarDatos();
            vcoCiu.show();
            if (vcoCiu.getSelectedButton() == vcoCiu.INT_BUT_ACE) 
            {
                txtCodCiu.setText(vcoCiu.getValueAt(1));
                txtDesCiu.setText(vcoCiu.getValueAt(2));
            } 
            else 
            {
                txtCodCiu.setText(strCodCiu);
                txtDesCiu.setText(strCiudad);
            }
        } 
    }
    
    
private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            //Obbtener los permisos del usuario.
//            objPerUsr=new ZafPerUsr(objZafParSis);
//            //Obtener los locales por Usuario y Programa.
            objLocPrgUsr=new ZafLocPrgUsr(objZafParSis);
            //T√≠tulo de la Ventana.
            String strAux=objZafParSis.getNombreMenu();
            this.setTitle(strAux + " v0.1");
            lblTit.setText(strAux);
            //Configurar objetos.
            
            //Configurar las ZafVenCon.
            configurarVenConVendedor();
            configurarVenConVendedorFil();
            configurarVenConForPag();
            configurarVenConClientes();
            configurarVenConLoc();
            configurarVenConCiudad();
            Configurartabla();
            
            //agregarColTblDat();

        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }  


    private void exitForm(javax.swing.event.InternalFrameEvent evt) {                          
        String strTit, strMsg;
        strTit="Mensaje del sistema Zafiro";
        strMsg="¬øEst√° seguro que desea cerrar este programa?";
        if (javax.swing.JOptionPane.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAsi;
    private javax.swing.ButtonGroup btnGrp;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCiuCon;
    private javax.swing.JButton butCliCon;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butForPag;
    private javax.swing.JButton butGua;
    private javax.swing.JButton butLoc;
    private javax.swing.JButton butVen;
    private javax.swing.JButton butVenCon;
    private javax.swing.JCheckBox chkCliNoVen;
    private javax.swing.JCheckBox chkCliVenAct;
    private javax.swing.JCheckBox chkCliVenIna;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblDir;
    private javax.swing.JLabel lblMotDev;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblPrv;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JRadioButton optTodCli;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panCen;
    private javax.swing.JPanel panDatTabGen;
    private javax.swing.JPanel panGenSol;
    private javax.swing.JPanel panGenTabGen;
    private javax.swing.JPanel panNor;
    private javax.swing.JPanel panTabGenCen;
    private javax.swing.JPanel panTabGenNor;
    private javax.swing.JPanel panTabGenNorCab;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane scrollTbl;
    private javax.swing.JTabbedPane tabGen;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodCiu;
    private javax.swing.JTextField txtCodCli;
    private javax.swing.JTextField txtCodForPag;
    private javax.swing.JTextField txtCodLoc;
    private javax.swing.JTextField txtCodVen;
    private javax.swing.JTextField txtDesCiu;
    private javax.swing.JTextField txtForPag;
    private javax.swing.JTextField txtLoc;
    private javax.swing.JTextField txtNomCli;
    private javax.swing.JTextField txtNomVen;
    private javax.swing.JTextField txtVenCod;
    private javax.swing.JTextField txtVenNom;
    // End of variables declaration//GEN-END:variables


    private boolean cargarRegistro(){
        boolean blnRes=true;
        String strSQL="";
        try{
            pgrSis.setIndeterminate(true);
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            
            
               con=DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos() );
               if (con!=null)
               {
               
                  
                    //Armar la sentencia SQL.
                    strSQL="";
                    strSQL+=" SELECT distinct a1.co_cli, a1.tx_ide, a1.tx_nom, ciu.tx_deslar as ciudad, usr.tx_nom as vendedor,a2.co_ven";
                    strSQL+=" FROM tbm_cli AS a1";
                    strSQL+=" INNER JOIN tbr_cliLoc AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli)";
                    
                    //if(txtCodCiu.getText()!=null && txtCodCiu.getText().length()>0){
                    //strSQL+=" INNER JOIN tbm_ciu as ciu ON (ciu.co_ciu=a1.co_ciu)";
                    strSQL+=" LEFT JOIN tbm_ciu as ciu ON (ciu.co_ciu=a1.co_ciu)";
                    //}
                    
                    //if(chkCliVenAct.isSelected() || chkCliVenIna.isSelected()){
                    //strSQL+=" INNER JOIN tbm_usr as usr ON (usr.co_usr=a2.co_ven)";
                    strSQL+=" LEFT JOIN tbm_usr as usr ON (usr.co_usr=a2.co_ven) ";
                    //strSQL+=" INNER JOIN tbr_usremp as b ON (usr.co_usr=b.co_usr) ";
                    strSQL+= " LEFT JOIN tbr_usremp as b ON (usr.co_usr=b.co_usr) ";
                    //+ "  b.co_emp=" + objZafParSis.getCodigoEmpresa() + " and b.st_ven='S' and a.st_reg not in ('I') ";"
                        
                    //}
                    strSQL+=" WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa();
                    strSQL+=" AND a2.co_loc=" + txtCodLoc.getText();
                    //strSQL+=" AND b.co_emp= "+objZafParSis.getCodigoEmpresa();
                    
                    if(txtCodCli.getText()!=null && txtCodCli.getText().length()>0){
                        strSQL+=" AND a1.co_cli=" + txtCodCli.getText();
                    }
                    
                    
                    if(txtCodForPag.getText()!=null && txtCodForPag.getText().length()>0){
                        strSQL+=" AND a1.co_forpag=" + txtCodForPag.getText();
                    }
                    
                    if(txtCodCiu.getText()!=null && txtCodCiu.getText().length()>0){
                        strSQL+=" AND a1.co_ciu=" + txtCodCiu.getText();
                    }
                    
                    if(txtVenCod.getText()!=null && txtVenCod.getText().length()>0){
                        strSQL+=" AND a2.co_ven=" + txtVenCod.getText();
                    }
                    
                    if (chkCliNoVen.isSelected()) {
                        if(chkCliVenAct.isSelected()){
                            if(chkCliVenIna.isSelected()){
                                strSQL+=" AND (a2.co_ven is null OR (b.co_emp=" + objZafParSis.getCodigoEmpresa() + " and b.st_ven='S' and usr.st_reg not in ('I')) OR (b.co_emp=" + objZafParSis.getCodigoEmpresa() + " and b.st_ven='S' and usr.st_reg in ('I')))"; 
                            }else{
                                strSQL+=" AND (a2.co_ven is null OR (b.co_emp=" + objZafParSis.getCodigoEmpresa() + " and b.st_ven='S' and usr.st_reg not in ('I')) )";                             
                            }
                        }else if(chkCliVenIna.isSelected()){
                            strSQL+=" AND (a2.co_ven is null OR (b.co_emp=" + objZafParSis.getCodigoEmpresa() + " and b.st_ven='S' and usr.st_reg in ('I')))";                         
                        }else{
                            strSQL+=" AND (a2.co_ven is null )";                         
                        }
                    }else if(chkCliVenAct.isSelected()){
                            if(chkCliVenIna.isSelected()){
                                strSQL+=" AND ((b.co_emp=" + objZafParSis.getCodigoEmpresa() + " and b.st_ven='S' and usr.st_reg not in ('I')) OR (b.co_emp=" + objZafParSis.getCodigoEmpresa() + " and b.st_ven='S' and usr.st_reg in ('I')))"; 
                            }else{
                                strSQL+=" AND ((b.co_emp=" + objZafParSis.getCodigoEmpresa() + " and b.st_ven='S' and usr.st_reg not in ('I')) )";                             
                            }
                    }else if(chkCliVenIna.isSelected()){
                            strSQL+=" AND ( (b.co_emp=" + objZafParSis.getCodigoEmpresa() + " and b.st_ven='S' and usr.st_reg in ('I')))";                     
                    }
                    /*if (chkCliNoVen.isSelected()) {
                        if(!(txtVenCod.getText()!=null && txtVenCod.getText().length()>0)){
                            strSQL+=" AND a2.co_ven is null "; 
                        }                        
                    }
                    
                    if (chkCliVenAct.isSelected()){
                       strSQL+=" AND b.co_emp=" + objZafParSis.getCodigoEmpresa() + " and b.st_ven='S' and a1.st_reg not in ('I')"; 
                    }                    
                    
                    if (chkCliVenIna.isSelected()){
                        strSQL+=" AND b.co_emp=" + objZafParSis.getCodigoEmpresa() + " and b.st_ven='S' and a1.st_reg in ('I')"; 
                    }*/
                    
                    
                    //strSQL+=" AND a1.st_reg='N'";
                    strSQL+=" ORDER BY a1.tx_nom";
                //}
                ////////
                
                java.sql.Statement stm = con.createStatement();
                System.out.println("permisos: " + strSQL);
                java.sql.ResultSet rst = stm.executeQuery(strSQL);
                Vector vecData = new Vector();
                while(rst.next()){
                       java.util.Vector vecReg = new java.util.Vector();
                       vecReg.add(INT_TBL_LINEA, "");
//                       vecReg.add(INT_TBL_CHKALT, false);
                       vecReg.add(INT_TBL_CODCLI, rst.getString("co_cli"));         
                       vecReg.add(INT_TBL_IDECLI, rst.getString("tx_ide"));
                       vecReg.add(INT_TBL_NOMCLI, rst.getString("tx_nom"));                       
                       vecReg.add(INT_TBL_CIUCLI, rst.getString("ciudad"));
                       vecReg.add(INT_TBL_CODVEN, rst.getInt("co_ven"));
                       vecReg.add(INT_TBL_NOMVEN, rst.getString("vendedor")); 
                       vecData.add(vecReg);   
                 }
    
               rst.close();
               rst=null;
               stm.close();
               stm=null;
               con.close();
               con=null;
               
                objTblMod.setData(vecData);
                tblDat.setModel(objTblMod);  
                vecData.clear();
               
               System.out.println("ojo "+tblDat.getRowCount());
               lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");
               blnRes=true;
               
                butCon.setText("Consultar");
                pgrSis.setIndeterminate(false);
               
               }
        }
        catch (java.sql.SQLException e) { 
               objUti.mostrarMsgErr_F1(this, e); 
               blnRes=false;
        }
        catch (Exception e) {  
            objUti.mostrarMsgErr_F1(this, e);   
            blnRes=false;
        }
       return blnRes;
    }
    
private class ZafThreadGUI extends Thread
    {
        @Override
        public void run()
        {  
            try{
            boolean blnRes=false;
             if (txtCodLoc.getText().length()>0){
                butCon.setText("Detener");
                lblMsgSis.setText("Procesando datos...");
                pgrSis.setIndeterminate(true);                 
                if (cargarRegistro()){
                  
                   blnRes=true;
                   tabGen.setSelectedIndex(1);
                   if(tblDat.getRowCount()>0)
                    tblDat.setRowSelectionInterval(0, 0);                   

                 }
              
                if(blnRes==true){
                     //lblMsgSis.setText("Listo");
                     pgrSis.setIndeterminate(false);
                     pgrSis.setValue(0);
                     butCon.setText("Consultar");
                }
                else{
                     lblMsgSis.setText("Error..");
                     pgrSis.setIndeterminate(false);
                     pgrSis.setValue(0);
                     butCon.setText("Consultar");
                }
                /*if (cargarRegistro()){                  
                   blnRes=true;
                   tabGen.setSelectedIndex(1);
                   tblDat.setRowSelectionInterval(0, 0);                   
                 }*/
             }else{
                 mostrarMsgInf("Debe de seleccionar al menos un Local ");
             }
              
//            if(blnRes==true){
//                 //lblMsgSis.setText("Listo");
//                 //pgrSis.setIndeterminate(false);
//                 //pgrSis.setValue(0);
//                 butCon.setText("Consultar");
//
//
//            }
//            else{
//                 //lblMsgSis.setText("Error..");
//                 //pgrSis.setIndeterminate(false);
//                 //pgrSis.setValue(0);
//                 butCon.setText("Consultar");
//            }
 
            }catch(Exception ex){
                ex.printStackTrace();
            }
            objThrGUI=null;
        }
    }    


    private boolean Configurartabla() {
        boolean blnRes = false;
        try {
            //Configurar JTable: Establecer el modelo.
            vecCab.clear();
            vecCab.add(INT_TBL_LINEA, "");
            vecCab.add(INT_TBL_CODCLI, "Cod.Cli.");
            vecCab.add(INT_TBL_IDECLI, "Ide.Cli.");
            vecCab.add(INT_TBL_NOMCLI, "Nom.Cli.");
            vecCab.add(INT_TBL_CIUCLI, "Ciu.Cli.");
            vecCab.add(INT_TBL_CODVEN, "Cod.Ven.");
            vecCab.add(INT_TBL_NOMVEN, "Nom.Ven.");


            objTblMod = new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);

            Color colFonCol;
            colFonCol = new Color(228, 228, 203);

            //Configurar JTable: Establecer tipo de selecci√≥n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            ZafColNumerada zafColNumerada = new ZafColNumerada(tblDat, INT_TBL_LINEA);

            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda = new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);


            //Configurar ZafTblMod: Establecer el color de fondo de las filas incompletas.
            objTblMod.setBackgroundIncompleteRows(objZafParSis.getColorCamposObligatorios());

            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  /**/
            TableColumnModel tcmAux = tblDat.getColumnModel();  /**/

            objTblMod.setColumnDataType(INT_TBL_CODCLI, ZafTblMod.INT_COL_DBL, new Integer(0), null);
            objTblMod.setColumnDataType(INT_TBL_IDECLI, ZafTblMod.INT_COL_DBL, new Integer(0), null);
            objTblMod.setColumnDataType(INT_TBL_NOMCLI, ZafTblMod.INT_COL_STR, new Integer(0), null);
            objTblMod.setColumnDataType(INT_TBL_CIUCLI, ZafTblMod.INT_COL_STR, new Integer(0), null);
            objTblMod.setColumnDataType(INT_TBL_CODVEN, ZafTblMod.INT_COL_DBL, new Integer(0), null);
            objTblMod.setColumnDataType(INT_TBL_NOMVEN, ZafTblMod.INT_COL_STR, new Integer(0), null);

            ZafTblCelRenLbl objTblCelRenLbl = new ZafTblCelRenLbl();
            objTblCelRenLbl.setBackground(objZafParSis.getColorCamposObligatorios());
            objTblCelRenLbl.setHorizontalAlignment(JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(ZafTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objZafParSis.getFormatoNumero(), false, true);


            objTblCelRenLbl = null;


            //Tama√±o de las celdas
            tcmAux.getColumn(INT_TBL_LINEA).setPreferredWidth(25);
            tcmAux.getColumn(INT_TBL_CODCLI).setPreferredWidth(65);
            tcmAux.getColumn(INT_TBL_IDECLI).setPreferredWidth(150);
            tcmAux.getColumn(INT_TBL_NOMCLI).setPreferredWidth(200);
            tcmAux.getColumn(INT_TBL_CIUCLI).setPreferredWidth(150);
            tcmAux.getColumn(INT_TBL_CODVEN).setPreferredWidth(200);
            tcmAux.getColumn(INT_TBL_NOMVEN).setPreferredWidth(200);
            
            ZafTblCelRenLbl2 objTblCelRenLbl2=new ZafTblCelRenLbl2();
            tcmAux.getColumn(INT_TBL_NOMVEN).setCellRenderer(objTblCelRenLbl2);
            //tcmAux.getColumn(INT_TBL_CANMOV).setPreferredWidth(50);

            tblDat.getTableHeader().setReorderingAllowed(false);
            
            ArrayList arlColHid = new ArrayList();
            arlColHid.add("" + INT_TBL_CODVEN);

            objTblMod.setSystemHiddenColumns(arlColHid, tblDat);
            objTblOrd=new ZafTblOrd(tblDat);
            objTblBus=new ZafTblBus(tblDat);
            
            arlColHid = null;
        }catch(Exception ex ){
           ex.printStackTrace();
        }
        blnRes = true;
        return blnRes;
    }

    private class ZafMouMotAda extends MouseMotionAdapter {

        @Override
        public void mouseMoved(MouseEvent evt) {
            int intCol = tblDat.columnAtPoint(evt.getPoint());
            String strMsg = "";
            switch (intCol) {
                
                
                case INT_TBL_LINEA:
                    strMsg = "";
                    break;
                case INT_TBL_CODCLI:
                    strMsg = "C√≥idigo del Cliente.";
                    break;
                case INT_TBL_IDECLI:
                    strMsg = "Identificaci√≥n del cliente.";
                    break;
                case INT_TBL_NOMCLI:
                    strMsg = "Nombre del Cliente.";
                    break;
                case INT_TBL_CIUCLI:
                    strMsg = "Ciudad del cliente.";
                    break;
                case INT_TBL_NOMVEN:
                    strMsg = "Nombre del vendedor.";
                    break;

                default:
                    strMsg = "";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }

    private boolean guardarReg(){
        boolean booRet=false;
        int [] intArrFil=tblDat.getSelectedRows();
        if (txtCodVen.getText().length()>0){ 
            if (mostrarMsgCon("¬øEst√° seguro que desea realizar esta operaci√≥n?")==0)
                {                    
                    if (objTblMod.isDataModelChanged())
                    {
                        if(actualizarDet(intArrFil)){
                            booRet=true;
                            mostrarMsgInf("La operaci√≥n GUARDAR se realiz√≥ con √©xito.");
                        }
                    }else{
                        mostrarMsgInf("No ha realizado ningun cambio que se pueda guardar.");
                    }                                        
                }
        }else{
           mostrarMsgInf("Debe seleccionar un vendedor");
        }
        return booRet;
    }
    
    private int mostrarMsgCon(String strMsg)
    {
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return javax.swing.JOptionPane.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    private void mostrarMsgInf(String strMsg)
    {
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        javax.swing.JOptionPane.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }    
    
    private boolean actualizarDet(int[] intArrReg){
        boolean booRet=false;
        String strUpd="";
        Statement st=null;
        try{
            con=DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            st=con.createStatement();
            String strFecSis = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), objZafParSis.getFormatoFechaHoraBaseDatos());

            int intNumFil = objTblMod.getRowCountTrue();
            for (int i = 0; i < intNumFil; i++) {
                if (objUti.parseString(tblDat.getValueAt(i, 0)).equals("M")) {
            //for(int i=0; i<intArrReg.length; i++){
                //strUpd+="Update tbr_cliloc set co_ven="+txtCodVen.getText()
                        strUpd+="Update tbr_cliloc set co_ven="+tblDat.getValueAt(i, INT_TBL_CODVEN)
                            + ", fe_ultmod='"+strFecSis+"', co_usrmod="+objZafParSis.getCodigoUsuario()
                            + " where co_emp="+objZafParSis.getCodigoEmpresa()+ " and co_loc="+txtCodLoc.getText()+" and co_cli="+tblDat.getValueAt(i, INT_TBL_CODCLI)+";";
                }
            }
            System.out.println("Sentencia Update "+ strUpd);
            int intReg=st.executeUpdate(strUpd);
            /*if(intReg==intArrReg.length){
                System.out.println("REG ACT = REGENVI "+intReg+"="+intArrReg);
                con.commit();
                booRet=true;
            }*/
            con.commit();
            booRet=true;
        }catch(Exception ex){
            ex.printStackTrace();
            try{
                con.rollback();
            }catch(Exception ex2){
                ex2.printStackTrace();
            }
        }
        return booRet;
    }
    
    
    
    
    
    
public class ZafTblCelRenLbl2 extends javax.swing.JLabel implements javax.swing.table.TableCellRenderer
{
    //Constantes:
    public static final int INT_FOR_GEN=0;                      /**Un valor para setTipoFormato: Indica "Formato general".*/
    public static final int INT_FOR_NUM=1;                      /**Un valor para setTipoFormato: Indica "Formato num√©rico".*/
    public static final int INT_FOR_FEC=2;                      /**Un valor para setTipoFormato: Indica "Formato de fechas".*/
    private static final int INT_BEF_REN=0;                     /**Antes de editar: Indica "Before render".*/
    //Variables:
    private Librerias.ZafTblUti.ZafTblMod.ZafTblMod objTblMod;
    private int intTipFor;                                      //Tipo de formato de celda.
    private String strForCel;                                   //Formato de la celda.
    private boolean blnMosCer;                                  //Mostrar cero.
    private boolean blnNegRoj;                                  //Mostrar negativos en rojo.
    private ZafUtil objUti;                                     //Utilidades.
    private ZafConCel objConCel;                                //Configuraci√≥n de la celda.
    private int intFilRen;                                      //Fila a renderizar.
    private int intColRen;                                      //Columna a renderizar.
    protected EventListenerList objEveLisLis=new EventListenerList();

    
    /** Crea una nueva instancia de la clase ZafTblCelRenLbl. */
    public ZafTblCelRenLbl2()
    {
        //Configurar la etiqueta que renderizar√° la celda.
        this.setOpaque(true);
        this.setBorder(new javax.swing.border.EmptyBorder(1,1,1,1));
        //Obtener la configuraci√≥n de la celda.
        objConCel=new ZafConCel();
        objConCel.colPriPla=javax.swing.UIManager.getColor("Table.foreground");
        objConCel.colSegPla=javax.swing.UIManager.getColor("Table.background");
        objConCel.colSelPri=javax.swing.UIManager.getColor("Table.selectionForeground");
        objConCel.colSelSeg=javax.swing.UIManager.getColor("Table.selectionBackground");
        objConCel.borNor=new javax.swing.border.EmptyBorder(1,1,1,1);
//        objConCel.borFoc=javax.swing.UIManager.getBorder("Table.focusCellHighlightBorder");
        objConCel.borFoc=new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 128));
        //Establecer la configuraci√≥n inicial de la clase.
        intTipFor=INT_FOR_GEN;
        strForCel="";
        blnMosCer=true;
        blnNegRoj=false;
        objUti=new ZafUtil();
    }
    
    /**
     * Esta funci√≥n obtiene el componente usado para dibujar la celda. Este m√©todo es
     * usado para configurar el render apropiado antes de dibujar la celda.
     * @return El componente mostrado en la celda.
     */
    public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
    {
        //Guardar la fila y columna renderizada.
        intFilRen=row;
        intColRen=column;
        //Generar evento "beforeRender()".
        fireTblCelRenListener(new ZafTblCelRenEvent(this), INT_BEF_REN);
        java.awt.Color colAux;
        String strAux;
        strAux=(value==null)?"":value.toString();
        //Establecer el color de segundo plano adecuado.
//        if (isSelected)
//        {
//            colAux=objConCel.colSegPla;
//            this.setBackground(objConCel.colSelSeg);
            if(tblDat.getValueAt(row, INT_TBL_LINEA).equals("M")){
                System.out.println("FILA "+row);
                System.out.println("hola "+tblDat.getValueAt(row, INT_TBL_LINEA));
                this.setBackground(Color.green);
            }else{
                this.setBackground(Color.WHITE);
            }
                
//            objConCel.colSegPla=colAux;
//        }
//        else
//        {
//            //Validar que la fila est√© completa.
//            objTblMod=(Librerias.ZafTblUti.ZafTblMod.ZafTblMod)table.getModel();
//            if (objTblMod.isRowComplete(row))
//            {
//                this.setBackground(objConCel.colSegPla);
//            }
//            else
//            {
//                colAux=objConCel.colSegPla;
//                this.setBackground(objTblMod.getBackgroundIncompleteRows());
//                objConCel.colSegPla=colAux;
//            }
//        }
        //Establecer el borde de la celda adecuado.
        /*if (hasFocus)
        {
            this.setBorder(objConCel.borFoc);
        }
        else 
        { 
            this.setBorder(objConCel.borNor); 
        }*/
        //Establecer el tipo de formato de la celda.
        /*switch (intTipFor)
        {
            case INT_FOR_GEN:
                break;
            case INT_FOR_NUM:
                if (objUti.isNumero(strAux))
                {
                    strAux=objUti.formatearNumero(strAux,strForCel,blnMosCer);
                    //Cambiar el color de los n√∫meros negativos a color rojo.
                    if ( (Double.parseDouble(value.toString())<0) && (blnNegRoj==true) )
                    {
                        colAux=objConCel.colPriPla;
                        this.setForeground(java.awt.Color.red);
                        objConCel.colPriPla=colAux;
                    }
                    else
                    {
                        this.setForeground(objConCel.colPriPla);
                    }
                }
                break;
            case INT_FOR_FEC:
                break;
        }*/
        this.setFont(table.getFont());
        this.setText(strAux);
        //colAux=null;*/
        return this;
    }

    /**
     * Esta funci√≥n adiciona el listener que controlar√° los eventos de renderizaci√≥n.
     * @param listener El objeto que implementa los m√©todos de la interface "ZafTblCelRenListener".
     */
    public void addTblCelRenListener(ZafTblCelRenListener listener)
    {
        objEveLisLis.add(ZafTblCelRenListener.class, listener);
    }

    /**
     * Esta funci√≥n remueve el listener que controlar√° los eventos de renderizaci√≥n.
     * @param listener El objeto que implementa los m√©todos de la interface "ZafTblCelRenListener".
     */
    public void removeTblCelRenListener(ZafTblCelRenListener listener)
    {
        objEveLisLis.remove(ZafTblCelRenListener.class, listener);
    }
    
    /**
     * Esta funci√≥n dispara el listener adecuado de acuerdo a los argumentos recibidos.
     * @param evt El objeto "ZafTblCelRenEvent".
     * @param metodo El m√©todo que ser√° invocado.
     * Puede tomar uno de los siguientes valores:
     * <CENTER>
     * <TABLE BORDER=1>
     *     <TR><TD><I>Tipo de campo</I></TD><TD><I>M√©todo</I></TD></TR>
     *     <TR><TD>INT_BEF_REN</TD><TD>Invoca al m√©tod "beforeRender" de la interface.</TD></TR>
     *     <TR><TD>INT_AFT_REN</TD><TD>Invoca al m√©tod "afterRender" de la interface.</TD></TR>
     * </TABLE>
     * </CENTER>
     */
    private void fireTblCelRenListener(ZafTblCelRenEvent evt, int metodo)
    {
        int i;
        Object[] obj=objEveLisLis.getListenerList();
        //Cada listener ocupa 2 elementos:
        //1)Es el listener class.
        //2)Es la instancia del listener.
        for (i=0;i<obj.length;i+=2)
        {
            if (obj[i]==ZafTblCelRenListener.class)
            {
                switch (metodo)
                {
                    case INT_BEF_REN:
                        ((ZafTblCelRenListener)obj[i+1]).beforeRender(evt);
                        break;
                }
            }
        }
    }
    
    /**
     * Esta funci√≥n obtiene la fila a renderizar.
     * @return La fila a renderizar. 
     */
    public int getRowRender()
    {
        return intFilRen;
    }

    /**
     * Esta funci√≥n obtiene la columna a renderizar.
     * @return La columna a renderizar. 
     */
    public int getColumnRender()
    {
        return intColRen;
    }
    
    /**
     * Esta funci√≥n establece el color de primer plano de la celda.
     * @param color El color a aplicar a la celda.
     */
    public void setForeground(java.awt.Color color)
    {
        super.setForeground(color);
        if (objConCel!=null)
            objConCel.colPriPla=color;
    }
    
    /**
     * Esta funci√≥n establece el color de segundo plano de la celda.
     * @param color El color a aplicar a la celda.
     */
    public void setBackground(java.awt.Color color)
    {
        super.setBackground(color);
        if (objConCel!=null)
            objConCel.colSegPla=color;
    }
    
    /**
     * Esta funci√≥n obtiene el tipo de formato aplicado a la celda. Puede retornar
     * los siguientes valores:
     * <UL>
     * <LI>0: Formato general (INT_FOR_GEN).
     * <LI>1: Formato num√©rico (INT_FOR_NUM).
     * <LI>2: Formato de fechas (INT_FOR_FEC).
     * </UL>
     * <BR>Nota.- La opci√≥n predeterminada es formato general (INT_FOR_GEN).
     * @return El tipo de formato aplicado a la celda.
     */
    public int getTipoFormato()
    {
        return intTipFor;
    }
    
    /**
     * Esta funci√≥n establece el tipo de formato de la celda. Una celda puede tener un formato
     * general, un formato para los n√∫meros y otro para las fechas. Por ejemplo, una celda puede
     * tener "2005/07/25" como formato general. Pero se le puede aplicar un formato de fechas y
     * mostrar√≠a "25/Jul/2005" si el patr√≥n aplicado es "dd/MMM/yyyy". Puede tomar
     * los siguientes valores:
     * <UL>
     * <LI>0: Formato general (INT_FOR_GEN).
     * <LI>1: Formato num√©rico (INT_FOR_NUM).
     * <LI>2: Formato de fechas (INT_FOR_FEC).
     * </UL>
     * <BR>Nota.- La opci√≥n predeterminada es formato general (INT_FOR_GEN).
     * @param tipoFormato El tipo de formato de la celda.
     */
    public void setTipoFormato(int tipoFormato)
    {
        intTipFor=tipoFormato;
    }

    /**
     * Esta funci√≥n obtiene el formato num√©rico aplicado a la celda.
     * @return La cadena que contiene el formato num√©rico. Podr√≠a ser "###,###.###", "###.##", "$###,###.##", "\u00a5###,###.###", etc.
     */
    public String getFormatoNumerico()
    {
        return strForCel;
    }
    
    /**
     * Esta funci√≥n establece el formato num√©rico aplicado a la celda.
     * @param formato El formato que se debe aplicar a la celda. Podr√≠a ser "###,###.###", "###.##", "$###,###.##", "\u00a5###,###.###", etc.
     */
    public void setFormatoNumerico(String formato)
    {
        strForCel=formato;
    }
    
    /**
     * Esta funci√≥n establece el formato num√©rico aplicado a la celda.
     * @param formato El formato que se debe aplicar a la celda. Podr√≠a ser "###,###.###", "###.##", "$###,###.##", "\u00a5###,###.###", etc.
     * @param mostrarCero Se aplica si el n√∫mero a formatear es un cero.
     * Puede tomar los siguientes valores:
     * <BR>true: Se mostrar√° el cero formateado.
     * <BR>false: Se mostrar√° una cadena vac√≠a.
     */
    public void setFormatoNumerico(String formato, boolean mostrarCero)
    {
        strForCel=formato;
        blnMosCer=mostrarCero;
    }
    
    /**
     * Esta funci√≥n establece el formato num√©rico aplicado a la celda.
     * @param formato El formato que se debe aplicar a la celda. Podr√≠a ser "###,###.###", "###.##", "$###,###.##", "\u00a5###,###.###", etc.
     * @param mostrarCero Se aplica si el n√∫mero a formatear es un cero.
     * Puede tomar los siguientes valores:
     * <BR>true: Se mostrar√° el cero formateado.
     * <BR>false: Se mostrar√° una cadena vac√≠a.
     * @param negativoRojo Se aplica si el n√∫mero a formatear es negativo.
     * Puede tomar los siguientes valores:
     * <BR>true: Se mostrar√° el n√∫mero de color rojo.
     * <BR>false: Se mostrar√° el n√∫mero de color normal.
     */
    public void setFormatoNumerico(String formato, boolean mostrarCero, boolean negativoRojo)
    {
        strForCel=formato;
        blnMosCer=mostrarCero;
        blnNegRoj=negativoRojo;
    }
    
    /**
     * Esta clase almacena la configuraci√≥n de las celdas. Por ejemplo: colores de primer plano, de segundo plano,
     * colores de selecci√≥n, bordes, etc..
     */
    private class ZafConCel
    {
        public java.awt.Color colPriPla;            //Color de primer plano.
        public java.awt.Color colSegPla;            //Color de segundo plano.
        public java.awt.Color colSelPri;            //Color de selecci√≥n de primer plano.
        public java.awt.Color colSelSeg;            //Color de selecci√≥n de segundo plano.
        public javax.swing.border.Border borNor;    //Borde normal.
        public javax.swing.border.Border borFoc;    //Borde con foco.
    }
    
}
    
    

}
