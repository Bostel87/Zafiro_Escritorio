/*
 *
 * Created on 20 de agosto de 2005, 11:38 PM   
 */
package Ventas.ZafVen13;

import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelEdiButGen.ZafTblCelEdiButGen;
import Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut;
import Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter;
import Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafUtil.ZafUtil;
import Ventas.ZafVen01.ZafVen01;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.sql.*;
import java.util.Vector;
import javax.swing.*;
import javax.swing.table.TableColumnModel;
/** 
 *
 * @author  Javier Ayapata   
 * MODIFICADO EFLORESA 2012-04-30
 * REPORTE DE FACTURAS DE VENTA PENDIENTES DE IMPRESION 
 * 
 */
public class ZafVen13 extends JInternalFrame 
{
    /*final int INT_TBL_LINEA    = 0 ; 
    final int INT_TBL_NOMCLI   = 1 ;
    final int INT_TBL_FECDOC   = 2 ;
    final int INT_TBL_NUMCOT   = 3 ;
    final int INT_TBL_USRVEN   = 4 ;*/
    
    static final int INT_TBL_LINEA    = 0 ; 
    static final int INT_TBL_NOMCLI   = 1 ;
    static final int INT_TBL_FECDOC   = 2 ;
    static final int INT_TBL_NUMCOT   = 3 ;
    static final int INT_TBL_DAT_COD_CLI=4;             //Código del cliente.
    static final int INT_TBL_DAT_NOM_CLI=5;             //Nombre del cliente.
    static final int INT_TBL_DAT_NOM_VEN=6;            //Nombre del vendedor.
    static final int INT_TBL_DAT_COD_EMP=7;            //.
    static final int INT_TBL_DAT_COD_LOC=8;            //.
    static final int INT_TBL_DAT_BUT_DOC=9;            //Botón del documento.    
    
    //Variables generales.
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod;
    private ZafThreadGUI objThrGUI;
    private ZafTblCelRenBut objTblCelRenBut;                    //Render: Presentar JButton en JTable.    
    private ZafTblCelEdiButGen objTblCelEdiButGen;              //Editor: JButton en celda.
    private ZafTblPopMnu objTblPopMnu;
    private ZafMouMotAda objMouMotAda;                          //ToolTipText en TableHeader.
    private ZafTblBus objTblBus;
    private ZafTblOrd objTblOrd;
    //private JOptionPane oppMsg=new JOptionPane();    
    private Connection con;
    private Vector vecCab, vecDat, vecAux;
    private String strNomTable="";
    private String strVersion=" v 1.4";   //  VERSION DEL PROGRAMA  
        
    /** Crea una nueva instancia de la clase ZafIndRpt. */
     public ZafVen13(ZafParSis obj)  {
        initComponents();
        //Inicializar objetos.
        objParSis=obj;
        
        //Inicializar objetos.
        objUti=new ZafUtil();      
    }      
    
     public void Configura_ventana_consulta(){
           if (!configurarFrm())
            exitForm();
    }    
   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDat);

        panFil.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panFil);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        Configura_ventana_consulta();  
       
    }//GEN-LAST:event_formInternalFrameOpened
       
    public boolean validad(){       
        return true;  
    }
          
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acción de acuerdo a la etiqueta del botón ("Consultar" o "Detener").                 
        if (butCon.getText().equals("Consultar")) {            
            if (objThrGUI==null) {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
        }                   
        
    }//GEN-LAST:event_butConActionPerformed
               
    private class ZafThreadGUI extends Thread {
        @Override
        public void run() {  
             boolean blnRes=false;
             butCon.setText("Detener");
             lblMsgSis.setText("Procesando datos...");
              pgrSis.setIndeterminate(true);
         
                if (cargarRegistro()){                  
                   blnRes=true;
                 }
              
                if(blnRes==true){
                     lblMsgSis.setText("Listo");
                     pgrSis.setIndeterminate(false);
                     pgrSis.setValue(0);
                     butCon.setText("Consultar");                                  
                } else{
                     lblMsgSis.setText("Error..");
                     pgrSis.setIndeterminate(false);
                     pgrSis.setValue(0);
                     butCon.setText("Consultar");
                }  
            objThrGUI=null;
    }}                         
      
    private boolean cargarRegistro(){
        boolean blnRes=false;
        String sql="";
        try{
            
               con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos() );
               if (con!=null)
               {
                /*sql="Select a.co_emp, a.co_loc,  b2.tx_nom,  a.fe_doc, a.ne_numcot, b.tx_nom as usr from tbm_cabmovinv as a  " +
                        " left join tbm_usr as b on (b.co_usr=a.co_com)  " +
                        " left join tbm_loc as b2 on (b2.co_emp=a.co_emp and  b2.co_loc=a.co_loc)  " +
                        " where a.co_emp="+objParSis.getCodigoEmpresa()+" and a.co_loc="+objParSis.getCodigoLocal()+"  " +
                        " and a.co_tipdoc=1 and  a.ne_numdoc = 0  and a.st_reg not in('I','E') ";*/
                   
                sql=" select a.co_emp, a.co_loc, a.fe_doc, a.ne_numcot, a.co_cli, a.tx_nomcli, b.co_usr, b.tx_nom, case when position ('(' in b2.tx_nom) = 0 then b2.tx_nom else substr(b2.tx_nom, 1, ( position ('(' in b2.tx_nom) - 1 )) end as local " +
                        " from tbm_cabmovinv as a " +
                        " left join tbm_usr as b on (b.co_usr=a.co_com) " +
                        " left join tbm_loc as b2 on (b2.co_emp=a.co_emp and  b2.co_loc=a.co_loc) " +
                        " where a.co_emp="+objParSis.getCodigoEmpresa()+" and a.co_loc="+objParSis.getCodigoLocal()+" " +
                        " and a.co_tipdoc=1 and a.ne_numdoc = 0 and a.st_reg not in('I','E') " +
                        " order by 3, 4 ";

                System.out.println("ZafVen13.cargarRegistro: " + sql);  
                Statement stm = con.createStatement();
                ResultSet rst = stm.executeQuery(sql);
                Vector vecData = new Vector();
                while(rst.next()){                    
                       /*Vector vecReg = new Vector();
                       vecReg.add(INT_TBL_LINEA, "");
                       vecReg.add(INT_TBL_NOMCLI, rst.getString("tx_nom"));
                       vecReg.add(INT_TBL_FECDOC, rst.getString("fe_doc"));
                       vecReg.add(INT_TBL_NUMCOT, rst.getString("ne_numcot"));
                       vecReg.add(INT_TBL_USRVEN, rst.getString("usr") );*/
                    
                       Vector vecReg = new Vector();
                       vecReg.add(INT_TBL_LINEA, "");
                       vecReg.add(INT_TBL_NOMCLI, rst.getString("local") );
                       vecReg.add(INT_TBL_FECDOC, objUti.formatearFecha(rst.getString("fe_doc"),"yyyy-MM-dd","dd-MM-yyyy"));
                       vecReg.add(INT_TBL_NUMCOT, rst.getString("ne_numcot"));
                       vecReg.add(INT_TBL_DAT_COD_CLI, rst.getString("co_cli") );
                       vecReg.add(INT_TBL_DAT_NOM_CLI, rst.getString("tx_nomcli") );
                       vecReg.add(INT_TBL_DAT_NOM_VEN, rst.getString("tx_nom") );
                       vecReg.add(INT_TBL_DAT_COD_EMP, rst.getString("co_emp") );
                       vecReg.add(INT_TBL_DAT_COD_LOC, rst.getString("co_loc") );
                       vecReg.add(INT_TBL_DAT_BUT_DOC, null );
                       vecData.add(vecReg);   
                 }
                
                 objTblMod.setData(vecData);
                 tblDat.setModel(objTblMod);  
                       
               rst.close();
               rst=null;
               stm.close();
               stm=null;
               con.close();
               con=null;
               blnRes=true;
               
        }}
        catch (SQLException e) { objUti.mostrarMsgErr_F1(this, e);   }
        catch (Exception e) {  objUti.mostrarMsgErr_F1(this, e);   }
       return blnRes;
    } 
    
    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
       // JOptionPane oppMsg=new JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (JOptionPane.showConfirmDialog(this,strMsg,strTit,JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE)==JOptionPane.YES_OPTION) {
            Runtime.getRuntime().gc();
            dispose();
        }
    }//GEN-LAST:event_exitForm

    /** Cerrar la aplicación. */
    private void exitForm() {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables
    
     private ZafTblFilCab objTblFilCab;

        
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {                      
            //Configurar JTable: Establecer el modelo de la tabla.
            vecCab=new Vector(10);  //Almacena las cabeceras
            vecCab.clear();
            /*vecCab.add(INT_TBL_LINEA,"");            
            vecCab.add(INT_TBL_NOMCLI,"Nom.cli");
            vecCab.add(INT_TBL_FECDOC,"Fecha.Doc");            
            vecCab.add(INT_TBL_NUMCOT,"Num.Cot");
            vecCab.add(INT_TBL_USRVEN,"Vendedor");*/
            
            vecCab.add(INT_TBL_LINEA,"");            
            vecCab.add(INT_TBL_NOMCLI,"Empresa");
            vecCab.add(INT_TBL_FECDOC,"Fecha.Doc");            
            vecCab.add(INT_TBL_NUMCOT,"Num.Cot");
            vecCab.add(INT_TBL_DAT_COD_CLI,"Cod. Cli");
            vecCab.add(INT_TBL_DAT_NOM_CLI,"Cliente/Proveedor");                     
            vecCab.add(INT_TBL_DAT_NOM_VEN,"Vendedor");
            vecCab.add(INT_TBL_DAT_COD_EMP,"Cod. Emp.");
            vecCab.add(INT_TBL_DAT_COD_LOC,"Cod. Loc.");
            vecCab.add(INT_TBL_DAT_BUT_DOC,"");
            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            
            //Configurar JTable: Establecer el modelo de la tabla.
            vecDat=new Vector();    //Almacena los datos
            tblDat.setModel(objTblMod);   
            
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);            
            ZafColNumerada zafColNumerada = new ZafColNumerada(tblDat,INT_TBL_LINEA);
            
            //Configurar JTable: Establecer el ancho de las columnas.
            TableColumnModel tcmAux=tblDat.getColumnModel();                              
            
            //Tamaño de las celdas
            /*tcmAux.getColumn(INT_TBL_LINEA).setPreferredWidth(30);         
            tcmAux.getColumn(INT_TBL_NOMCLI).setPreferredWidth(350);
            tcmAux.getColumn(INT_TBL_FECDOC).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_NUMCOT).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_USRVEN).setPreferredWidth(100);*/            
            
            tcmAux.getColumn(INT_TBL_LINEA).setPreferredWidth(30);         
            tcmAux.getColumn(INT_TBL_NOMCLI).setPreferredWidth(110);
            tcmAux.getColumn(INT_TBL_FECDOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_NUMCOT).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(200);
            tcmAux.getColumn(INT_TBL_DAT_NOM_VEN).setPreferredWidth(120);
            tcmAux.getColumn(INT_TBL_DAT_BUT_DOC).setPreferredWidth(20);
            
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_DAT_BUT_DOC).setResizable(false);

            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            
            //Configurar JTable: Ocultar columnas del sistema.
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_EMP, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_LOC, tblDat);
            
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            
            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            //vecAux.add("" + INT_TBL_DAT_NOM_VEN);
            vecAux.add("" + INT_TBL_DAT_BUT_DOC);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;

            //Configurar JTable: Editor de búsqueda.
            objTblBus=new ZafTblBus(tblDat);

            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_LINEA).setCellRenderer(objTblFilCab);
            
            //Configurar JTable: Renderizar celdas.
            objTblCelRenBut=new ZafTblCelRenBut();
            tcmAux.getColumn(INT_TBL_DAT_BUT_DOC).setCellRenderer(objTblCelRenBut);
            objTblCelRenBut=null;
            
            //Configurar JTable: Editor de celdas.
            objTblCelEdiButGen=new ZafTblCelEdiButGen();
            tcmAux.getColumn(INT_TBL_DAT_BUT_DOC).setCellEditor(objTblCelEdiButGen);
            objTblCelEdiButGen.addTableEditorListener(new ZafTableAdapter() {
                @Override
                public void actionPerformed(ZafTableEvent evt) {
                    int intFilSel = tblDat.getSelectedRow();
                    int intColSel = tblDat.getSelectedColumn();
                    if(!(objTblMod.getValueAt(intFilSel, INT_TBL_NUMCOT).toString().equals("") || objTblMod.getValueAt(intFilSel, INT_TBL_NUMCOT).toString().equals("0")))
                        llamarVenCot(objTblMod.getValueAt(intFilSel, INT_TBL_DAT_COD_EMP).toString(),objTblMod.getValueAt(intFilSel, INT_TBL_DAT_COD_LOC).toString(),objTblMod.getValueAt(intFilSel, INT_TBL_NUMCOT).toString());
                    //abrirFrm();
                }
            });

            //Configurar JTable: Modo de operación del JTable.
            objTblMod.setModoOperacion(ZafTblMod.INT_TBL_EDI);
            
            //objTblFilCab=new ZafTblFilCab(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);
            objTblBus=new ZafTblBus(tblDat);
            
            //tblDat.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            //tblDat.getTableHeader().setReorderingAllowed(false);      
            
            tcmAux=null;  
            this.setTitle( objParSis.getNombreMenu() +" "+ strVersion);    
            lblTit.setText(objParSis.getNombreMenu());

            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            //tblDat.getTableHeader().addMouseMotionListener(new ZafMouMotAdaEmp());
            
            objTblFilCab=null;
            objTblOrd=null;
            objTblBus=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);  
        }
        return blnRes;
    }
  
    private void llamarVenCot(String strCodEmp, String strCodLoc, String strCodDoc){
        try{
            ZafVen01 obj1 = new ZafVen01(objParSis, strCodEmp, strCodLoc, strCodDoc );
            this.getParent().add(obj1, JLayeredPane.DEFAULT_LAYER );
            obj1.show();
        }catch(Exception Evt) {
            objUti.mostrarMsgErr_F1(this, Evt);     
        }
    }


    /*private boolean abrirFrm() {
        boolean blnRes=true;
        try {
            if (tblDat.getSelectedColumn()==INT_TBL_DAT_BUT_DOC)
                invocarClase("Ventas.ZafVen01.ZafVen01");
                //invocarClase("Ventas.ZafVen01.ZafVen01_His");
        }catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }*/

    /*private boolean invocarClase(String clase) {
        int intFilSel;
        boolean blnRes=true;
        try{
            //Obtener el constructor de la clase que se va a invocar.
            Class objVen=Class.forName(clase);
            Class objCla[]=new Class[4];
            objCla[0]=objParSis.getClass();
            objCla[1]=new Integer(0).getClass();
            objCla[2]=new Integer(0).getClass();
            objCla[3]=new Integer(0).getClass();
            Constructor objCon=objVen.getConstructor(objCla);
            intFilSel=tblDat.getSelectedRow();
            //Inicializar el constructor que se obtuvo.
            Object objObj[]=new Object[4];
            objObj[0]=objParSis;
            objObj[1]=new Integer(objTblMod.getValueAt(intFilSel,INT_TBL_DAT_COD_EMP).toString());
            objObj[2]=new Integer(objTblMod.getValueAt(intFilSel,INT_TBL_DAT_COD_LOC).toString());
            objObj[3]=new Integer(objTblMod.getValueAt(intFilSel,INT_TBL_NUMCOT).toString());
            JInternalFrame ifrVen;
            ifrVen=(JInternalFrame)objCon.newInstance(objObj);
            this.getParent().add(ifrVen,JLayeredPane.DEFAULT_LAYER);
            ifrVen.setVisible(true);
        }catch (ClassNotFoundException e) {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }catch (NoSuchMethodException e) {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }catch (SecurityException e) {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }catch (InstantiationException e) {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }catch (IllegalAccessException e) {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }catch (IllegalArgumentException e) {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }catch (InvocationTargetException e) {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }*/

    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAdaEmp extends MouseMotionAdapter {
        @Override
        public void mouseMoved(MouseEvent evt) {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol) {
                case INT_TBL_LINEA:
                    strMsg="";
                    break;
                case INT_TBL_NOMCLI:
                    strMsg="Código de la empresa";
                    break;
                case INT_TBL_FECDOC:
                    strMsg="Fecha del documento";
                    break;
                case INT_TBL_NUMCOT:
                    strMsg="Código del documento";
                    break;
                case INT_TBL_DAT_COD_CLI:
                    strMsg="Código del cliente/proveedor";
                    break;
                case INT_TBL_DAT_NOM_CLI:
                    strMsg="Nombre del cliente/proveedor";
                    break;
                case INT_TBL_DAT_NOM_VEN:
                    strMsg="Nombre del vendedor";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends MouseMotionAdapter {
        @Override
        public void mouseMoved(MouseEvent evt) {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol) {
                case INT_TBL_LINEA:
                    strMsg="";
                    break;
                case INT_TBL_NOMCLI:
                    strMsg="Código de la empresa";
                    break;
                case INT_TBL_FECDOC:
                    strMsg="Fecha del documento";
                    break;
                case INT_TBL_NUMCOT:
                    strMsg="Código del documento";
                    break;
                case INT_TBL_DAT_COD_CLI:
                    strMsg="Código del cliente/proveedor";
                    break;
                case INT_TBL_DAT_NOM_CLI:
                    strMsg="Nombre del cliente/proveedor";
                    break;
                case INT_TBL_DAT_NOM_VEN:
                    strMsg="Nombre del vendedor";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }       
}
