/*
 * ZafVen16.java
 *
 * Created on 16 de enero de 2005, 17:10 PM
 */
package Ventas.ZafVen16;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafPerUsr.ZafPerUsr;
import Librerias.ZafSelFec.ZafSelFec;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import java.sql.*;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafVenCon.ZafVenCon;
import java.util.ArrayList;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaGrp;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaColGrp;
import Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut;
import Librerias.ZafTblUti.ZafTblCelEdiButGen.ZafTblCelEdiButGen;
import java.awt.Color;


/**
 *
 * @author  Ingrid Lino
 */
public class ZafVen16 extends javax.swing.JInternalFrame
{
    //Constantes: Columnas del JTable:    
    
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_EMP=1;
    final int INT_TBL_DAT_COD_PRV=2;
    final int INT_TBL_DAT_NOM_PRV=3;
    //PARA LOS DATOS DE LA DEVOLUCION
    final int INT_TBL_DAT_DEV_COD_LOC=4;
    final int INT_TBL_DAT_DEV_COD_TIP_DOC=5;
    final int INT_TBL_DAT_DEV_DES_COR_TIP_DOC=6;
    final int INT_TBL_DAT_DEV_DES_LAR_TIP_DOC=7;
    final int INT_TBL_DAT_DEV_COD_DOC=8;
    final int INT_TBL_DAT_DEV_NUM_DOC=9;
    final int INT_TBL_DAT_DEV_FEC_DOC=10;
    final int INT_TBL_DAT_DEV_VAL_DOC=11;
    final int INT_TBL_DAT_DEV_BUT=12;
    //PARA LOS DATOS DE LA FACTURA
    final int INT_TBL_DAT_FAC_COD_LOC=13;
    final int INT_TBL_DAT_FAC_COD_TIP_DOC=14;
    final int INT_TBL_DAT_FAC_DES_COR_TIP_DOC=15;
    final int INT_TBL_DAT_FAC_DES_LAR_TIP_DOC=16;
    final int INT_TBL_DAT_FAC_COD_DOC=17;
    final int INT_TBL_DAT_FAC_NUM_DOC=18;
    final int INT_TBL_DAT_FAC_FEC_DOC=19;
    final int INT_TBL_DAT_FAC_VAL_DOC=20;
    final int INT_TBL_DAT_FAC_BUT=21;

    final int INT_TBL_DAT_CRU_CHK=22;
    final int INT_TBL_DAT_CRU_BUT=23;
    final int INT_TBL_DAT_CRU_AMB=24;


    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafColNumerada objColNum;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMen� en JTable.
    private ZafThreadGUI objThrGUI;
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private ZafTblFilCab objTblFilCab;
    
    private Vector vecDat, vecCab, vecReg, vecAux;
    private boolean blnCon;                     //true: Continua la ejecuci�n del hilo.
    private ZafTblCelRenLbl objTblCelRenLblDev, objTblCelRenLblFac;
    private ZafTblBus objTblBus;
    
    private ZafMouMotAda objMouMotAda;
    private ZafTblOrd objTblOrd;

    private ZafSelFec objSelFec;

    private String strDesCorTipDoc, strDesLarTipDoc;
    private String strCodPrv, strDesLarPrv;
    private ZafVenCon vcoPrv, vcoTipDoc, vcoLoc;
    private String strCodLoc, strDesLarLoc;

    final int INT_COD_FAC=1;

    private ZafTblCelEdiChk objTblCelEdiChk, objTblCelEdiChkAmb;
    private ZafTblCelRenChk objTblCelRenChk, objTblCelRenChkAmb;


    private ZafTblCelEdiButGen objTblCelEdiButGenDev, objTblCelEdiButGenFac, objTblCelEdiButGenCru;
    private ZafTblCelRenBut    objTblCelRenButDev, objTblCelRenButFac, objTblCelRenButCru;

    private ZafPerUsr objPerUsr;



    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafVen16(ZafParSis obj)
    {
        try{
            initComponents();
            this.objParSis=obj;
            objParSis=(ZafParSis)obj.clone();
            objUti=new ZafUtil();
            objPerUsr=new ZafPerUsr(objParSis);
            if (!configurarFrm())
                exitForm(); 
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }               
        
        
        
        

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        panFecCor = new javax.swing.JPanel();
        panFil = new javax.swing.JPanel();
        optTod = new javax.swing.JRadioButton();
        optFil = new javax.swing.JRadioButton();
        lblTipDoc = new javax.swing.JLabel();
        txtCodTipDoc = new javax.swing.JTextField();
        txtDesCorTipDoc = new javax.swing.JTextField();
        txtDesLarTipDoc = new javax.swing.JTextField();
        butTipDoc = new javax.swing.JButton();
        lblPrv = new javax.swing.JLabel();
        txtCodPrv = new javax.swing.JTextField();
        txtDesLarPrv = new javax.swing.JTextField();
        butPrv = new javax.swing.JButton();
        lblLoc = new javax.swing.JLabel();
        txtCodLoc = new javax.swing.JTextField();
        txtDesLarLoc = new javax.swing.JTextField();
        butLoc = new javax.swing.JButton();
        panRpt = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable() {
            protected javax.swing.table.JTableHeader createDefaultTableHeader()
            {
                return new ZafTblHeaGrp(columnModel);
            }
        };
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        panFecCor.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha del documento"));
        panFecCor.setPreferredSize(new java.awt.Dimension(100, 80));
        panFecCor.setLayout(null);
        jPanel1.add(panFecCor, java.awt.BorderLayout.NORTH);

        panFil.setFont(new java.awt.Font("SansSerif", 1, 12));
        panFil.setPreferredSize(new java.awt.Dimension(0, 200));
        panFil.setLayout(null);

        optTod.setFont(new java.awt.Font("SansSerif", 0, 11));
        optTod.setSelected(true);
        optTod.setText("Todos los documentos");
        optTod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTodActionPerformed(evt);
            }
        });
        panFil.add(optTod);
        optTod.setBounds(0, 4, 400, 14);

        optFil.setFont(new java.awt.Font("SansSerif", 0, 11));
        optFil.setText("Sólo los documentos que cumplan el criterio seleccionado");
        optFil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optFilActionPerformed(evt);
            }
        });
        panFil.add(optFil);
        optFil.setBounds(0, 20, 400, 14);

        lblTipDoc.setText("Tipo de documento:");
        lblTipDoc.setToolTipText("Tipo de documento");
        panFil.add(lblTipDoc);
        lblTipDoc.setBounds(14, 70, 120, 20);
        panFil.add(txtCodTipDoc);
        txtCodTipDoc.setBounds(91, 70, 32, 20);

        txtDesCorTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorTipDocActionPerformed(evt);
            }
        });
        txtDesCorTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusLost(evt);
            }
        });
        panFil.add(txtDesCorTipDoc);
        txtDesCorTipDoc.setBounds(126, 70, 56, 20);

        txtDesLarTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarTipDocActionPerformed(evt);
            }
        });
        txtDesLarTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusLost(evt);
            }
        });
        panFil.add(txtDesLarTipDoc);
        txtDesLarTipDoc.setBounds(182, 70, 264, 20);

        butTipDoc.setText("...");
        butTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butTipDocActionPerformed(evt);
            }
        });
        panFil.add(butTipDoc);
        butTipDoc.setBounds(446, 70, 20, 20);

        lblPrv.setText("Proveedor:");
        lblPrv.setToolTipText("Proveedor");
        panFil.add(lblPrv);
        lblPrv.setBounds(14, 90, 100, 20);

        txtCodPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodPrvActionPerformed(evt);
            }
        });
        txtCodPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusLost(evt);
            }
        });
        panFil.add(txtCodPrv);
        txtCodPrv.setBounds(126, 91, 56, 20);

        txtDesLarPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarPrvActionPerformed(evt);
            }
        });
        txtDesLarPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusLost(evt);
            }
        });
        panFil.add(txtDesLarPrv);
        txtDesLarPrv.setBounds(182, 91, 264, 20);

        butPrv.setText("...");
        butPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrvActionPerformed(evt);
            }
        });
        panFil.add(butPrv);
        butPrv.setBounds(446, 91, 20, 20);

        lblLoc.setText("Local:");
        lblLoc.setToolTipText("Proveedor");
        panFil.add(lblLoc);
        lblLoc.setBounds(14, 48, 100, 20);

        txtCodLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodLocActionPerformed(evt);
            }
        });
        txtCodLoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodLocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodLocFocusLost(evt);
            }
        });
        panFil.add(txtCodLoc);
        txtCodLoc.setBounds(126, 49, 56, 20);

        txtDesLarLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarLocActionPerformed(evt);
            }
        });
        txtDesLarLoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarLocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarLocFocusLost(evt);
            }
        });
        panFil.add(txtDesLarLoc);
        txtDesLarLoc.setBounds(182, 49, 264, 20);

        butLoc.setText("...");
        butLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLocActionPerformed(evt);
            }
        });
        panFil.add(butLoc);
        butLoc.setBounds(446, 49, 20, 20);

        jPanel1.add(panFil, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Filtro", jPanel1);

        panRpt.setLayout(new java.awt.BorderLayout());

        spnDat.setPreferredSize(new java.awt.Dimension(453, 418));

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDat.setViewportView(tblDat);

        panRpt.add(spnDat, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Reporte", panRpt);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setPreferredSize(new java.awt.Dimension(385, 26));
        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents
                   /*Permite obtener un log de la tabla tbm_grpvar
 *
 */    
     
    
    
                        
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acci�n de acuerdo a la etiqueta del bot�n ("Consultar" o "Detener").
        //Realizar acci�n de acuerdo a la etiqueta del bot�n ("Consultar" o "Detener").
        objTblMod.removeAllRows();
        lblMsgSis.setText("");
        if (butCon.getText().equals("Consultar")){
            blnCon=true;
            if (objThrGUI==null){
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }
        }
        else{
            blnCon=false;
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicaci�n. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

private void optTodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTodActionPerformed
    // TODO add your handling code here:
    if(optTod.isSelected()){
        optFil.setSelected(false);
        txtCodLoc.setText("");
        txtDesLarLoc.setText("");
        txtCodTipDoc.setText("");
        txtDesCorTipDoc.setText("");
        txtDesLarTipDoc.setText("");
        txtCodPrv.setText("");
        txtDesLarPrv.setText("");
    }
    else{
        optFil.setSelected(true);
    }
}//GEN-LAST:event_optTodActionPerformed

private void optFilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optFilActionPerformed
    // TODO add your handling code here:
    if(optFil.isSelected()){
        optTod.setSelected(false);
    }
    else
        optTod.setSelected(true);
}//GEN-LAST:event_optFilActionPerformed

private void txtDesCorTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorTipDocActionPerformed
    // TODO add your handling code here:
    txtDesCorTipDoc.transferFocus();
}//GEN-LAST:event_txtDesCorTipDocActionPerformed

private void txtDesCorTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusGained
    // TODO add your handling code here:
        strDesCorTipDoc=txtDesCorTipDoc.getText();
        txtDesCorTipDoc.selectAll();
}//GEN-LAST:event_txtDesCorTipDocFocusGained

private void txtDesCorTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusLost
    // TODO add your handling code here:
        //Validar el contenido de la celda s�lo si ha cambiado.
        if (!txtDesCorTipDoc.getText().equalsIgnoreCase(strDesCorTipDoc))
        {
            if (txtDesCorTipDoc.getText().equals(""))
            {
                txtCodTipDoc.setText("");
                txtDesLarTipDoc.setText("");
            }
            else
            {
                mostrarVenConTipDoc(1);
            }
        }
        else
            txtDesCorTipDoc.setText(strDesCorTipDoc);
}//GEN-LAST:event_txtDesCorTipDocFocusLost

private void txtDesLarTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarTipDocActionPerformed
    // TODO add your handling code here:
    txtDesLarTipDoc.transferFocus();
}//GEN-LAST:event_txtDesLarTipDocActionPerformed

private void txtDesLarTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusGained
    // TODO add your handling code here:
        strDesLarTipDoc=txtDesLarTipDoc.getText();
        txtDesLarTipDoc.selectAll();
}//GEN-LAST:event_txtDesLarTipDocFocusGained

private void txtDesLarTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusLost
    // TODO add your handling code here:
        //Validar el contenido de la celda s�lo si ha cambiado.
        if (!txtDesLarTipDoc.getText().equalsIgnoreCase(strDesLarTipDoc))
        {
            if (txtDesLarTipDoc.getText().equals(""))
            {
                txtCodTipDoc.setText("");
                txtDesCorTipDoc.setText("");
            }
            else
            {
                mostrarVenConTipDoc(2);
            }
        }
        else
            txtDesLarTipDoc.setText(strDesLarTipDoc);
}//GEN-LAST:event_txtDesLarTipDocFocusLost

private void butTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butTipDocActionPerformed
    // TODO add your handling code here:
    mostrarVenConTipDoc(0);
}//GEN-LAST:event_butTipDocActionPerformed

private void txtCodPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodPrvActionPerformed
    // TODO add your handling code here:
    txtCodPrv.transferFocus();
}//GEN-LAST:event_txtCodPrvActionPerformed

private void txtCodPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusGained
    // TODO add your handling code here:
        strCodPrv=txtCodPrv.getText();
        txtCodPrv.selectAll();
}//GEN-LAST:event_txtCodPrvFocusGained

private void txtCodPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusLost
    // TODO add your handling code here:
        //Validar el contenido de la celda s�lo si ha cambiado.
        if (!txtCodPrv.getText().equalsIgnoreCase(strCodPrv))
        {
            if (txtCodPrv.getText().equals(""))
            {
                txtCodPrv.setText("");
                txtDesLarPrv.setText("");
                objTblMod.removeAllRows();
            }
            else
            {
                mostrarVenConPrv(1);
            }
        }
        else
            txtCodPrv.setText(strCodPrv);
}//GEN-LAST:event_txtCodPrvFocusLost

private void txtDesLarPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarPrvActionPerformed
    // TODO add your handling code here:
    txtDesLarPrv.transferFocus();
}//GEN-LAST:event_txtDesLarPrvActionPerformed

private void txtDesLarPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusGained
    // TODO add your handling code here:
        strDesLarPrv=txtDesLarPrv.getText();
        txtDesLarPrv.selectAll();
}//GEN-LAST:event_txtDesLarPrvFocusGained

private void txtDesLarPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusLost
    // TODO add your handling code here:
        //Validar el contenido de la celda s�lo si ha cambiado.
        if (!txtDesLarPrv.getText().equalsIgnoreCase(strDesLarPrv))
        {
            if (txtDesLarPrv.getText().equals(""))
            {
                txtCodPrv.setText("");
                txtDesLarPrv.setText("");
                objTblMod.removeAllRows();
            }
            else
            {
                mostrarVenConPrv(2);
            }
        }
        else
            txtDesLarPrv.setText(strDesLarPrv);
}//GEN-LAST:event_txtDesLarPrvFocusLost

private void butPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrvActionPerformed
    // TODO add your handling code here:
        strCodPrv=txtCodPrv.getText();
        mostrarVenConPrv(0);
}//GEN-LAST:event_butPrvActionPerformed

private void txtCodLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodLocActionPerformed
    // TODO add your handling code here:
    txtCodLoc.transferFocus();
}//GEN-LAST:event_txtCodLocActionPerformed

private void txtCodLocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodLocFocusGained
    // TODO add your handling code here:
        strCodLoc=txtCodLoc.getText();
        txtCodLoc.selectAll();
}//GEN-LAST:event_txtCodLocFocusGained

private void txtCodLocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodLocFocusLost
    // TODO add your handling code here:
        //Validar el contenido de la celda s�lo si ha cambiado.
        if (!txtCodLoc.getText().equalsIgnoreCase(strCodLoc))
        {
            if (txtCodLoc.getText().equals(""))
            {
                txtCodLoc.setText("");
                txtDesLarLoc.setText("");
                objTblMod.removeAllRows();
             }
            else
            {
                mostrarVenConLoc(1);

            }
        }
        else
            txtCodLoc.setText(strCodLoc);
}//GEN-LAST:event_txtCodLocFocusLost

private void txtDesLarLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarLocActionPerformed
    // TODO add your handling code here:
    txtDesLarLoc.transferFocus();
}//GEN-LAST:event_txtDesLarLocActionPerformed

private void txtDesLarLocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarLocFocusGained
    // TODO add your handling code here:
        strDesLarLoc=txtDesLarLoc.getText();
        txtDesLarLoc.selectAll();
}//GEN-LAST:event_txtDesLarLocFocusGained

private void txtDesLarLocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarLocFocusLost
    // TODO add your handling code here:
        //Validar el contenido de la celda s�lo si ha cambiado.
        if (!txtDesLarLoc.getText().equalsIgnoreCase(strDesLarLoc))
        {
            if (txtDesLarLoc.getText().equals(""))
            {
                txtCodLoc.setText("");
                txtDesLarLoc.setText("");
                objTblMod.removeAllRows();
            }
            else
            {
                mostrarVenConLoc(2);
            }
        }
        else
            txtDesLarLoc.setText(strDesLarLoc);
}//GEN-LAST:event_txtDesLarLocFocusLost

private void butLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLocActionPerformed
    // TODO add your handling code here:
        strCodLoc=txtCodLoc.getText();
        mostrarVenConLoc(0);
}//GEN-LAST:event_butLocActionPerformed

    /** Cerrar la aplicaci�n. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butLoc;
    private javax.swing.JButton butPrv;
    private javax.swing.JButton butTipDoc;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblLoc;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblPrv;
    private javax.swing.JLabel lblTipDoc;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optFil;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFecCor;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panRpt;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodLoc;
    private javax.swing.JTextField txtCodPrv;
    private javax.swing.JTextField txtCodTipDoc;
    private javax.swing.JTextField txtDesCorTipDoc;
    private javax.swing.JTextField txtDesLarLoc;
    private javax.swing.JTextField txtDesLarPrv;
    private javax.swing.JTextField txtDesLarTipDoc;
    // End of variables declaration//GEN-END:variables

    

    
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarReg()){
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }            
            //Establecer el foco en el JTable s�lo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }

    
    
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            strAux=objParSis.getNombreMenu() + "v0.1";
            this.setTitle(strAux);
            lblTit.setText(strAux);
                     
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(25);    //Almacena las cabeceras
            vecCab.clear();

            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_EMP,"Cód.Emp.");
            vecCab.add(INT_TBL_DAT_COD_PRV,"Cód.Cli");
            vecCab.add(INT_TBL_DAT_NOM_PRV,"Cliente/Proveedor");
            vecCab.add(INT_TBL_DAT_DEV_COD_LOC,"Cód.Loc.");
            vecCab.add(INT_TBL_DAT_DEV_COD_TIP_DOC,"Cód.Tip.Doc.");
            vecCab.add(INT_TBL_DAT_DEV_DES_COR_TIP_DOC,"Tip.Doc.");
            vecCab.add(INT_TBL_DAT_DEV_DES_LAR_TIP_DOC,"Tipo de documento");
            vecCab.add(INT_TBL_DAT_DEV_COD_DOC,"Cód.Doc.");
            vecCab.add(INT_TBL_DAT_DEV_NUM_DOC,"Núm.Doc.");
            vecCab.add(INT_TBL_DAT_DEV_FEC_DOC,"Fec.Doc.");
            vecCab.add(INT_TBL_DAT_DEV_VAL_DOC,"Val.Doc.");
            vecCab.add(INT_TBL_DAT_DEV_BUT,"");
            vecCab.add(INT_TBL_DAT_FAC_COD_LOC,"Cód.Loc.");
            vecCab.add(INT_TBL_DAT_FAC_COD_TIP_DOC,"Cód.Tip.Doc.");
            vecCab.add(INT_TBL_DAT_FAC_DES_COR_TIP_DOC,"Tip.Doc.");
            vecCab.add(INT_TBL_DAT_FAC_DES_LAR_TIP_DOC,"Tipo de documento");
            vecCab.add(INT_TBL_DAT_FAC_COD_DOC,"Cód.Doc.");
            vecCab.add(INT_TBL_DAT_FAC_NUM_DOC,"Núm.Doc.");
            vecCab.add(INT_TBL_DAT_FAC_FEC_DOC,"Fec.Doc.");
            vecCab.add(INT_TBL_DAT_FAC_VAL_DOC,"Val.Doc.");
            vecCab.add(INT_TBL_DAT_FAC_BUT,"");
            vecCab.add(INT_TBL_DAT_CRU_CHK,"");
            vecCab.add(INT_TBL_DAT_CRU_BUT,"");
            vecCab.add(INT_TBL_DAT_CRU_AMB,"");

            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);            
                          
            //Configurar JTable: Establecer tipo de selecci�n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el men� de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Tama�o de las celdas
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_COD_PRV).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_NOM_PRV).setPreferredWidth(200);
            tcmAux.getColumn(INT_TBL_DAT_DEV_COD_LOC).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_DEV_COD_TIP_DOC).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_DEV_DES_COR_TIP_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_DEV_DES_LAR_TIP_DOC).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_DEV_COD_DOC).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_DEV_NUM_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_DEV_FEC_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_DEV_VAL_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_DEV_BUT).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_FAC_COD_LOC).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_FAC_COD_TIP_DOC).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_FAC_DES_COR_TIP_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_FAC_DES_LAR_TIP_DOC).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_FAC_COD_DOC).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_FAC_NUM_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_FAC_FEC_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_FAC_VAL_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_FAC_BUT).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_CRU_CHK).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_CRU_BUT).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_CRU_AMB).setPreferredWidth(20);

            tblDat.getTableHeader().setReorderingAllowed(false);                        
            objTblBus=new ZafTblBus(tblDat);

            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            objTblOrd=new ZafTblOrd(tblDat);

            //Configurar ZafSelFec:
            objSelFec=new ZafSelFec();
            objSelFec.setCheckBoxVisible(false);
            panFecCor.add(objSelFec);
            objSelFec.setBounds(4, 4, 472, 72);

            configurarVenConTipDoc();
            configurarVenConPrv();
            configurarVenConLoc();

            txtCodTipDoc.setVisible(false);
            txtCodTipDoc.setEditable(false);
            txtCodTipDoc.setEnabled(false);

            //devoluciones
            ZafTblHeaGrp objTblHeaGrpDev=(ZafTblHeaGrp)tblDat.getTableHeader();
            objTblHeaGrpDev.setHeight(16*2);
            ZafTblHeaColGrp objTblHeaColGrpDev=null;
            java.awt.Color colFonColDev;
            colFonColDev=new java.awt.Color(228,228,203);

            //Configurar JTable: Renderizar celdas.
            objTblCelRenLblDev=new ZafTblCelRenLbl();
            objTblCelRenLblDev.setHorizontalAlignment(javax.swing.JLabel.LEFT);
            objTblCelRenLblDev.setTipoFormato(objTblCelRenLblDev.INT_FOR_GEN);
            objTblCelRenLblDev.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            objTblCelRenLblDev.setBackground(colFonColDev);
            tcmAux.getColumn(INT_TBL_DAT_DEV_COD_LOC).setCellRenderer(objTblCelRenLblDev);
            tcmAux.getColumn(INT_TBL_DAT_DEV_COD_TIP_DOC).setCellRenderer(objTblCelRenLblDev);
            tcmAux.getColumn(INT_TBL_DAT_DEV_DES_COR_TIP_DOC).setCellRenderer(objTblCelRenLblDev);
            tcmAux.getColumn(INT_TBL_DAT_DEV_DES_LAR_TIP_DOC).setCellRenderer(objTblCelRenLblDev);
            tcmAux.getColumn(INT_TBL_DAT_DEV_COD_DOC).setCellRenderer(objTblCelRenLblDev);
            tcmAux.getColumn(INT_TBL_DAT_DEV_NUM_DOC).setCellRenderer(objTblCelRenLblDev);
            tcmAux.getColumn(INT_TBL_DAT_DEV_FEC_DOC).setCellRenderer(objTblCelRenLblDev);
            tcmAux.getColumn(INT_TBL_DAT_DEV_VAL_DOC).setCellRenderer(objTblCelRenLblDev);
            tcmAux.getColumn(INT_TBL_DAT_DEV_BUT).setCellRenderer(objTblCelRenLblDev);
//            objTblCelRenLblDev.addTblCelRenListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTblCelRenAdapter() {
//                public void beforeRender(Librerias.ZafTblUti.ZafTblEvt.ZafTblCelRenEvent evt) {
//                    if (objTblMod.getValueAt(objTblCelRenButCru.getRowRender(), INT_TBL_DAT_CRU_CHK)==null){
//                        objTblCelRenLblDev.setForeground(Color.red);
//                    }
//                    else
//                    {
//                       objTblCelRenLblDev.setForeground(java.awt.Color.BLACK);
//                   }
//                }
//            });




            objTblCelRenLblDev=null;

            objTblHeaColGrpDev=new ZafTblHeaColGrp("Devoluciones de Ventas");
            objTblHeaColGrpDev.setHeight(16);
            objTblHeaGrpDev.addColumnGroup(objTblHeaColGrpDev);

            objTblHeaColGrpDev.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_DEV_COD_LOC));
            objTblHeaColGrpDev.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_DEV_COD_TIP_DOC));
            objTblHeaColGrpDev.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_DEV_DES_COR_TIP_DOC));
            objTblHeaColGrpDev.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_DEV_DES_LAR_TIP_DOC));
            objTblHeaColGrpDev.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_DEV_COD_DOC));
            objTblHeaColGrpDev.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_DEV_NUM_DOC));
            objTblHeaColGrpDev.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_DEV_FEC_DOC));
            objTblHeaColGrpDev.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_DEV_VAL_DOC));
            objTblHeaColGrpDev.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_DEV_BUT));


            //factura
            ZafTblHeaGrp objTblHeaGrpFac=(ZafTblHeaGrp)tblDat.getTableHeader();
            objTblHeaGrpFac.setHeight(16*2);
            ZafTblHeaColGrp objTblHeaColGrpFac=null;
            java.awt.Color colFonColFac;
            colFonColFac=new java.awt.Color(255,221,187);

            //Configurar JTable: Renderizar celdas.
            objTblCelRenLblFac=new ZafTblCelRenLbl();
            objTblCelRenLblFac.setHorizontalAlignment(javax.swing.JLabel.LEFT);
            objTblCelRenLblFac.setTipoFormato(objTblCelRenLblFac.INT_FOR_GEN);
            objTblCelRenLblFac.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            objTblCelRenLblFac.setBackground(colFonColFac);
            tcmAux.getColumn(INT_TBL_DAT_FAC_COD_LOC).setCellRenderer(objTblCelRenLblFac);
            tcmAux.getColumn(INT_TBL_DAT_FAC_COD_TIP_DOC).setCellRenderer(objTblCelRenLblFac);
            tcmAux.getColumn(INT_TBL_DAT_FAC_DES_COR_TIP_DOC).setCellRenderer(objTblCelRenLblFac);
            tcmAux.getColumn(INT_TBL_DAT_FAC_DES_LAR_TIP_DOC).setCellRenderer(objTblCelRenLblFac);
            tcmAux.getColumn(INT_TBL_DAT_FAC_COD_DOC).setCellRenderer(objTblCelRenLblFac);
            tcmAux.getColumn(INT_TBL_DAT_FAC_NUM_DOC).setCellRenderer(objTblCelRenLblFac);
            tcmAux.getColumn(INT_TBL_DAT_FAC_FEC_DOC).setCellRenderer(objTblCelRenLblFac);
            tcmAux.getColumn(INT_TBL_DAT_FAC_VAL_DOC).setCellRenderer(objTblCelRenLblFac);
            tcmAux.getColumn(INT_TBL_DAT_FAC_BUT).setCellRenderer(objTblCelRenLblFac);
            objTblCelRenLblFac=null;

            objTblHeaColGrpFac=new ZafTblHeaColGrp("Facturas de Ventas");
            objTblHeaColGrpFac.setHeight(16);
            objTblHeaGrpFac.addColumnGroup(objTblHeaColGrpFac);

            objTblHeaColGrpFac.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_FAC_COD_LOC));
            objTblHeaColGrpFac.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_FAC_COD_TIP_DOC));
            objTblHeaColGrpFac.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_FAC_DES_COR_TIP_DOC));
            objTblHeaColGrpFac.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_FAC_DES_LAR_TIP_DOC));
            objTblHeaColGrpFac.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_FAC_COD_DOC));
            objTblHeaColGrpFac.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_FAC_NUM_DOC));
            objTblHeaColGrpFac.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_FAC_FEC_DOC));
            objTblHeaColGrpFac.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_FAC_VAL_DOC));
            objTblHeaColGrpFac.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_FAC_BUT));


            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk=new ZafTblCelRenChk();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_CHK).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk=null;

            //Configurar JTable: Editor de celdas.
            objTblCelEdiChk=new ZafTblCelEdiChk(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_CHK).setCellEditor(objTblCelEdiChk);


            //Para cargar la ventana de devoluciones
            objTblCelRenButDev=new ZafTblCelRenBut();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DEV_BUT).setCellRenderer(objTblCelRenButDev);
            objTblCelEdiButGenDev=new ZafTblCelEdiButGen();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DEV_BUT).setCellEditor(objTblCelEdiButGenDev);
            objTblCelEdiButGenDev.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFilSel;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFilSel=tblDat.getSelectedRow();



                }
                public void actionPerformed(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    cargarDevolucion(intFilSel);//carga el programa de devoluciones
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
            });

            //Para cargar la ventana de facturas
            objTblCelRenButFac=new ZafTblCelRenBut();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FAC_BUT).setCellRenderer(objTblCelRenButFac);
            objTblCelEdiButGenFac=new ZafTblCelEdiButGen();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FAC_BUT).setCellEditor(objTblCelEdiButGenFac);
            objTblCelEdiButGenFac.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFilSel;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFilSel=tblDat.getSelectedRow();
                    //SE DEBE VALIDAR QUE EXISTAN DATOS EN ESA FILA
                }
                public void actionPerformed(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    cargarFactura(intFilSel);//carga el programa de facturas
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
            });


            //Para cargar la ventana de cruce
            objTblCelRenButCru=new ZafTblCelRenBut();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_BUT).setCellRenderer(objTblCelRenButCru);
            objTblCelRenButCru.addTblCelRenListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTblCelRenAdapter() {
                public void beforeRender(Librerias.ZafTblUti.ZafTblEvt.ZafTblCelRenEvent evt) {
                    if (objTblMod.getValueAt(objTblCelRenButCru.getRowRender(), INT_TBL_DAT_CRU_CHK)==null){
                        objTblCelRenButCru.setText("");
                    }
                    else{
                        objTblCelRenButCru.setText("...");
                    }
                }
            });



            objTblCelEdiButGenCru=new ZafTblCelEdiButGen();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_BUT).setCellEditor(objTblCelEdiButGenCru);
            objTblCelEdiButGenCru.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFilSel;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFilSel=tblDat.getSelectedRow();

                    intFilSel=tblDat.getSelectedRow();
                    if (intFilSel!=-1){
                        if (objTblMod.getValueAt(intFilSel, INT_TBL_DAT_CRU_CHK)==null){
                            objTblCelEdiButGenCru.setCancelarEdicion(true);
                        }
                     }
                    



                }
                public void actionPerformed(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    cargarDatosCruce(intFilSel);//carga un formulario(los n cruces asociados a la devolucion se ven en una tabla
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
            });


            //Configurar JTable: Renderizar celdas.
            objTblCelRenChkAmb=new ZafTblCelRenChk();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_AMB).setCellRenderer(objTblCelRenChkAmb);
            objTblCelRenChkAmb=null;

            //Configurar JTable: Editor de celdas.
            objTblCelEdiChkAmb=new ZafTblCelEdiChk(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_AMB).setCellEditor(objTblCelEdiChkAmb);


            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_DEV_BUT);
            vecAux.add("" + INT_TBL_DAT_FAC_BUT);
            vecAux.add("" + INT_TBL_DAT_CRU_BUT);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;

            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
       
            //Libero los objetos auxiliares.
            tcmAux=null;

            butCon.setEnabled(false);
            butCer.setEnabled(false);

            if(objPerUsr.isOpcionEnabled(850)){
                butCon.setEnabled(true);
            }
            if(objPerUsr.isOpcionEnabled(851)){
                butCer.setEnabled(true);
            }



            //Configurar JTable: Ocultar columnas del sistema.
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_EMP, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_DEV_COD_TIP_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_DEV_COD_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_FAC_COD_TIP_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_FAC_COD_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_CRU_AMB, tblDat);
            

            if(objParSis.getCodigoMenu()==849){
                lblPrv.setText("Clientes");
            }
            else
                lblPrv.setText("Proveedores");




        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    

    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren m�s espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD_EMP:
                    strMsg="Código de la empresa";
                    break;
                case INT_TBL_DAT_COD_PRV:
                    strMsg="Código del cliente/proveedor";
                    break;
                case INT_TBL_DAT_NOM_PRV:
                    strMsg="Nombre del cliente/proveedor";
                    break;
                case INT_TBL_DAT_DEV_COD_LOC:
                    strMsg="Código del local";
                    break;
                case INT_TBL_DAT_DEV_COD_TIP_DOC:
                    strMsg="Código del tipo de documento";
                    break;
                case INT_TBL_DAT_DEV_DES_COR_TIP_DOC:
                    strMsg="Descripción corta del tipo de documento";
                    break;
                case INT_TBL_DAT_DEV_DES_LAR_TIP_DOC:
                    strMsg="Descripción larga del tipo de documento";
                    break;
                case INT_TBL_DAT_DEV_COD_DOC:
                    strMsg="Código del documento";
                    break;
                case INT_TBL_DAT_DEV_NUM_DOC:
                    strMsg="Número del documento";
                    break;
                case INT_TBL_DAT_DEV_FEC_DOC:
                    strMsg="Fecha del documento";
                    break;
                case INT_TBL_DAT_DEV_VAL_DOC:
                    strMsg="Valor del documento";
                    break;
                case INT_TBL_DAT_DEV_BUT:
                    strMsg="Muestra la Devolución de Ventas";
                    break;
                case INT_TBL_DAT_FAC_COD_LOC:
                    strMsg="Código del local";
                    break;
                case INT_TBL_DAT_FAC_COD_TIP_DOC:
                    strMsg="Código del Tipo de Documento";
                    break;
                case INT_TBL_DAT_FAC_DES_COR_TIP_DOC:
                    strMsg="Descripción corta del Tipo de Documento";
                    break;
                case INT_TBL_DAT_FAC_DES_LAR_TIP_DOC:
                    strMsg="Descripción larga del Tipo de Documento";
                    break;
                case INT_TBL_DAT_FAC_COD_DOC:
                    strMsg="Código del documento";
                    break;
                case INT_TBL_DAT_FAC_NUM_DOC:
                    strMsg="Número de documento";
                    break;
                case INT_TBL_DAT_FAC_FEC_DOC:
                    strMsg="Fecha del documento";
                    break;
                case INT_TBL_DAT_FAC_VAL_DOC:
                    strMsg="Valor del documento";
                    break;
                case INT_TBL_DAT_FAC_BUT:
                    strMsg="Muestra la Factura de Ventas";
                    break;
                case INT_TBL_DAT_CRU_CHK:
                    strMsg="Tiene cruces asociados";
                    break;
                case INT_TBL_DAT_CRU_BUT:
                    strMsg="Muestra cuales son los cruces asociados";
                    break;
                default:
                    strMsg="";
                    break;


            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
    

            
            
    /**
     * Esta funci�n muestra un mensaje informativo al usuario. Se podr�a utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
 
    
    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                if(cargarDetReg()){
                }                
                con.close();
                con=null;
            }
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
 
    
    

  
    private boolean cargarDetReg(){
        boolean blnRes=true;
        int i;
        strAux="";
        int intNumReg=0;


        int intCodLocDev=-1;
        int intCodTipDocDev=-1;
        int intCodDocDev=-1;

        int intCodLocFac=-1;
        int intCodTipDocFac=-1;
        int intCodDocFac=-1;


        try{
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");

            if (con!=null){
                if( ! txtCodLoc.getText().toString().equals("")){
                    strAux+=" AND a1.co_loc=" + txtCodLoc.getText() + "";
                }
                if( ! txtCodPrv.getText().toString().equals("")){
                    strAux+=" AND a1.co_cli=" + txtCodPrv.getText() + "";
                }

                switch (objSelFec.getTipoSeleccion()){
                    case 0: //B�squeda por rangos
                        strAux+=" AND (a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        break;
                    case 1: //Fechas menores o iguales que "Hasta".
                        strAux+=" AND (a1.fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        break;
                    case 2: //Fechas mayores o iguales que "Desde".
                        strAux+=" AND (a1.fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        break;
                    case 3: //Todo.
                        break;
                }
                stm=con.createStatement();

                strSQL="";
                strSQL+="SELECT b1.co_empDev, b1.co_locDev, b1.co_tipDocDev, b1.co_docDev, b1.co_cliDev";
                strSQL+=", b1.tx_nomCliDev, b1.tx_desCorTipDocDev, b1.tx_desLarTipDocDev";
                strSQL+=", b1.ne_numDocDev, b1.fe_docDev, b1.nd_totDev, b1.co_locRelDev, b1.co_tipDocRelDev, b1.co_docRelDev";
                strSQL+=", b2.co_empFac, b2.co_locFac, b2.co_tipDocFac, b2.co_docFac, b2.co_cliFac";
                strSQL+=" , b2.tx_nomCliFac, b2.tx_desCorTipDocFac, b2.tx_desLarTipDocFac";
                strSQL+=" , b2.ne_numDocFac, b2.fe_docFac, b2.nd_totFac, b2.co_locRelFac, b2.co_tipDocRelFac, b2.co_docRelFac";
                strSQL+=" ,CASE WHEN b3.co_tipDoc IS NULL THEN 'N' ELSE 'S' END AS st_cru";
                strSQL+=" FROM(";
                strSQL+=" 	SELECT a1.co_emp AS co_empDev, a1.co_loc AS co_locDev, a1.co_tipDoc AS co_tipDocDev";
                strSQL+="	, a1.co_doc AS co_docDev, a1.co_cli AS co_cliDev, a1.tx_nomCli AS tx_nomCliDev";
                strSQL+=" 	, a3.tx_desCor AS tx_desCorTipDocDev, a3.tx_desLar AS tx_desLarTipDocDev";
                strSQL+=" 	, a1.ne_numDoc AS ne_numDocDev, a1.fe_doc AS fe_docDev, a1.nd_tot AS nd_totDev";
                strSQL+=" 	, a2.co_locRel AS co_locRelDev, a2.co_tipDocRel AS co_tipDocRelDev, a2.co_docRel AS co_docRelDev";
                strSQL+=" 	FROM (tbm_cabMovInv AS a1 INNER JOIN tbm_cabTipDoc AS a3 ";
                strSQL+="                 ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                strSQL+=" 	INNER JOIN tbr_cabMovInv AS a2";
                strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipdoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";

                if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                }
                else{
                    strSQL+="   INNER JOIN tbr_cliLoc AS a4";
                    strSQL+="   ON a1.co_emp=a4.co_emp AND a1.co_loc=a4.co_loc AND a1.co_cli=a4.co_cli";
                }

                strSQL+=" 	WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";

                if( ! txtCodTipDoc.getText().toString().equals("")){
                    strSQL+=" AND a1.co_tipDoc=" + txtCodTipDoc.getText() + "";
                }
                else{
                    strSQL+=" 	AND a1.co_tipDoc IN(" + tipoDocPrgUsr() + ")";
                }
                
                strSQL+="" + strAux;
                strSQL+=" 	AND a1.st_reg NOT IN('E','I')";
                if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                    System.out.println("2 si entro");
                }
                else{
                    System.out.println("2 no entro");
                    strSQL+=" 	AND a4.co_loc=" + objParSis.getCodigoLocal() + "";
                }
                strSQL+=" ) AS b1";
                strSQL+=" INNER JOIN(";
                strSQL+=" 	SELECT a1.co_emp AS co_empFac, a1.co_loc AS co_locFac, a1.co_tipDoc AS co_tipDocFac, a1.co_doc AS co_docFac";
                strSQL+=" 	, a1.co_cli AS co_cliFac, a1.tx_nomCli AS tx_nomCliFac, a3.tx_desCor AS tx_desCorTipDocFac, a3.tx_desLar AS tx_desLarTipDocFac";
                strSQL+=" 	, a1.ne_numDoc AS ne_numDocFac, a1.fe_doc AS fe_docFac, a1.nd_tot AS nd_totFac";
                strSQL+=" 	, a2.co_locRel AS co_locRelFac, a2.co_tipDocRel AS co_tipDocRelFac, a2.co_docRel AS co_docRelFac";
                strSQL+=" 	FROM tbm_cabMovInv AS a1";
                strSQL+="	INNER JOIN (tbr_cabMovInv AS a2 INNER JOIN tbm_cabTipDoc AS a3";
                strSQL+="                 ON a2.co_emp=a3.co_emp AND a2.co_locRel=a3.co_loc AND a2.co_tipDocRel=a3.co_tipDoc)";
                strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_locRel AND a1.co_tipdoc=a2.co_tipDocRel AND a1.co_doc=a2.co_docRel";
                strSQL+=" 	WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + " AND a2.co_tipDocRel=" + INT_COD_FAC + "";
                strSQL+="	AND a1.st_reg NOT IN('E','I')";
                strSQL+=" ) AS b2";
                strSQL+=" ON b1.co_empDev=b2.co_empFac AND b1.co_locRelDev=b2.co_locRelFac ";
                strSQL+=" AND b1.co_tipDocRelDev=b2.co_tipDocRelFac AND b1.co_docRelDev=b2.co_docRelFac";
                strSQL+=" LEFT OUTER JOIN(";
                strSQL+="	SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a3.tx_desCor AS tx_desCorTipDoc";
                strSQL+="         , a3.tx_desLar AS tx_desLarTipDoc, a1.ne_numDoc1, a1.fe_doc";
                strSQL+=" 	, a2.co_locPag, a2.co_tipDocPag, a2.co_docPag, a1.st_reg";
                strSQL+=" 	FROM (tbm_cabPag AS a1 INNER JOIN tbm_cabTipDoc AS a3 ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                strSQL+=" 	INNER JOIN tbm_detPag AS a2";
                strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                strSQL+=" 	WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + " AND a1.st_reg NOT IN('E','I')";
                strSQL+=" 	order by a1.co_emp, a1.co_tipDoc, a1.co_doc";
                strSQL+=" ) AS b3";
                strSQL+=" ON b1.co_empDev=b3.co_emp AND b1.co_locDev=b3.co_locPag AND b1.co_tipDocDev=b3.co_tipDocPag AND b1.co_docDev=b3.co_docPag";
                strSQL+=" GROUP BY b1.co_empDev, b1.co_locDev, b1.co_tipDocDev, b1.co_docDev, b1.co_cliDev, b1.tx_nomCliDev, b1.tx_desCorTipDocDev, b1.tx_desLarTipDocDev";
                strSQL+=" , b1.ne_numDocDev, b1.fe_docDev, b1.nd_totDev, b1.co_locRelDev, b1.co_tipDocRelDev, b1.co_docRelDev";
                strSQL+=" , b2.co_empFac, b2.co_locFac, b2.co_tipDocFac, b2.co_docFac, b2.co_cliFac, b2.tx_nomCliFac, b2.tx_desCorTipDocFac, b2.tx_desLarTipDocFac";
                strSQL+=" , b2.ne_numDocFac, b2.fe_docFac, b2.nd_totFac, b2.co_locRelFac, b2.co_tipDocRelFac, b2.co_docRelFac";
                strSQL+=" ,b3.co_tipDoc";
                strSQL+=" ORDER BY b1.ne_numDocDev";
                System.out.println("SQL cargarDetReg: " + strSQL);
                rst=stm.executeQuery(strSQL);

                vecDat.clear();
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
//                pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;

                lblMsgSis.setText("Listo");
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN, "");
                        vecReg.add(INT_TBL_DAT_COD_EMP,             "" + rst.getObject("co_empDev")==null?"":rst.getString("co_empDev"));
                        vecReg.add(INT_TBL_DAT_COD_PRV,             "" + rst.getObject("co_cliDev")==null?"":rst.getString("co_cliDev"));
                        vecReg.add(INT_TBL_DAT_NOM_PRV,             "" + rst.getObject("tx_nomCliDev")==null?"":rst.getString("tx_nomCliDev"));
                        intCodLocDev=rst.getObject("co_locDev")==null?0:rst.getInt("co_locDev");
                        intCodTipDocDev=rst.getObject("co_tipDocDev")==null?0:rst.getInt("co_tipDocDev");
                        intCodDocDev= rst.getObject("co_docDev")==null?0:rst.getInt("co_docDev");

                        intCodLocFac=rst.getObject("co_locFac")==null?0:rst.getInt("co_locFac");
                        intCodTipDocFac=rst.getObject("co_tipDocFac")==null?0:rst.getInt("co_tipDocFac");
                        intCodDocFac=rst.getObject("co_docFac")==null?0:rst.getInt("co_docFac");

                        vecReg.add(INT_TBL_DAT_DEV_COD_LOC,         "" + intCodLocDev);
                        vecReg.add(INT_TBL_DAT_DEV_COD_TIP_DOC,     "" + intCodTipDocDev);
                        vecReg.add(INT_TBL_DAT_DEV_DES_COR_TIP_DOC, "" + rst.getObject("tx_desCorTipDocDev")==null?"":rst.getString("tx_desCorTipDocDev"));
                        vecReg.add(INT_TBL_DAT_DEV_DES_LAR_TIP_DOC, "" + rst.getObject("tx_desLarTipDocDev")==null?"":rst.getString("tx_desLarTipDocDev"));
                        vecReg.add(INT_TBL_DAT_DEV_COD_DOC,         "" + intCodDocDev);
                        vecReg.add(INT_TBL_DAT_DEV_NUM_DOC,         "" + rst.getObject("ne_numDocDev")==null?"":rst.getString("ne_numDocDev"));
                        vecReg.add(INT_TBL_DAT_DEV_FEC_DOC,         "" + rst.getObject("fe_docDev")==null?"":rst.getString("fe_docDev"));
                        vecReg.add(INT_TBL_DAT_DEV_VAL_DOC,         "" + rst.getObject("nd_totDev")==null?"":rst.getString("nd_totDev"));
                        vecReg.add(INT_TBL_DAT_DEV_BUT,             "");
                        vecReg.add(INT_TBL_DAT_FAC_COD_LOC,         "" + intCodLocFac);
                        vecReg.add(INT_TBL_DAT_FAC_COD_TIP_DOC,     "" + intCodTipDocFac);
                        vecReg.add(INT_TBL_DAT_FAC_DES_COR_TIP_DOC, "" + rst.getObject("tx_desCorTipDocFac")==null?"":rst.getString("tx_desCorTipDocFac"));
                        vecReg.add(INT_TBL_DAT_FAC_DES_LAR_TIP_DOC, "" + rst.getObject("tx_desLarTipDocFac")==null?"":rst.getString("tx_desLarTipDocFac"));
                        vecReg.add(INT_TBL_DAT_FAC_COD_DOC,         "" + intCodDocFac);
                        vecReg.add(INT_TBL_DAT_FAC_NUM_DOC,         "" + rst.getObject("ne_numDocFac")==null?"":rst.getString("ne_numDocFac"));
                        vecReg.add(INT_TBL_DAT_FAC_FEC_DOC,         "" + rst.getObject("fe_docFac")==null?"":rst.getString("fe_docFac"));
                        vecReg.add(INT_TBL_DAT_FAC_VAL_DOC,         "" + rst.getObject("nd_totFac")==null?"":rst.getString("nd_totFac"));
                        vecReg.add(INT_TBL_DAT_FAC_BUT,             "");
                        vecReg.add(INT_TBL_DAT_CRU_CHK,             null);
                        vecReg.add(INT_TBL_DAT_CRU_BUT,             "");
                        vecReg.add(INT_TBL_DAT_CRU_AMB,             "");


                        if(rst.getString("st_cru").equals("S")){
                            vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CRU_CHK);
                        }


//                        if(cruceAplicaAmbos(intCodLocDev , intCodTipDocDev , intCodDocDev , intCodLocFac , intCodTipDocFac , intCodDocFac )){
//                            vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CRU_AMB);
//                        }



                        vecDat.add(vecReg);
                        i++;
                        pgrSis.setValue(i);
                        intNumReg=rst.getRow();
                    }
                    else{
                        break;
                    }
                }
                lblMsgSis.setText("Se encontraron " + intNumReg + " registros.");


                rst.close();
                stm.close();
                rst=null;
                stm=null;

                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);



                pgrSis.setValue(0);
                butCon.setText("Consultar");

            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    /**
     * Esta funci�n configura la "Ventana de consulta" que ser� utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConPrv()
    {
        boolean blnRes=true;
        String strTitVenCon="";
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Identificación");
            arlAli.add("Nombre");
            arlAli.add("Dirección");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                strSQL="";
                strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
                strSQL+=" FROM tbm_cli AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                if(objParSis.getCodigoMenu()==849){
                    strSQL+=" AND a1.st_cli='S'";
                    strTitVenCon="Listado de Clientes";
                }
                else{
                    strSQL+=" AND a1.st_prv='S'";
                    strTitVenCon="Listado de Proveedores";
                }

                strSQL+=" ORDER BY a1.tx_nom";
            }
            else{
                strSQL="";
                strSQL+="SELECT a2.co_cli, a2.tx_ide, a2.tx_nom, a2.tx_dir";
                strSQL+=" FROM tbr_cliLoc AS a1 INNER JOIN tbm_cli AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                if(objParSis.getCodigoMenu()==849){
                    strSQL+=" AND a2.st_cli='S'";
                    strTitVenCon="Listado de Clientes";
                }
                else{
                    strSQL+=" AND a2.st_prv='S'";
                    strTitVenCon="Listado de Proveedores";
                }
                strSQL+=" ORDER BY a2.tx_nom";
            }
            //Ocultar columnas.
            int intColOcu[]=new int[1];
            intColOcu[0]=4;
            vcoPrv=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, strTitVenCon, strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoPrv.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funci�n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de b�squeda determina si se debe hacer
     * una b�squeda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se est� buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opci�n que desea utilizar.
     * @param intTipBus El tipo de b�squeda a realizar.
     * @return true: Si no se present� ning�n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConPrv(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoPrv.setCampoBusqueda(2);
                    vcoPrv.show();
                    if (vcoPrv.getSelectedButton()==vcoPrv.INT_BUT_ACE)
                    {
                        txtCodPrv.setText(vcoPrv.getValueAt(1));
                        txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                        objTblMod.removeAllRows();
                    }
                    break;
                case 1: //B�squeda directa por "N�mero de cuenta".
                    if (vcoPrv.buscar("a1.co_cli", txtCodPrv.getText()))
                    {
                        txtCodPrv.setText(vcoPrv.getValueAt(1));
                        txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                        objTblMod.removeAllRows();
                    }
                    else
                    {
                        vcoPrv.setCampoBusqueda(0);
                        vcoPrv.setCriterio1(11);
                        vcoPrv.cargarDatos();
                        vcoPrv.show();
                        if (vcoPrv.getSelectedButton()==vcoPrv.INT_BUT_ACE)
                        {
                            txtCodPrv.setText(vcoPrv.getValueAt(1));
                            txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtCodPrv.setText(strCodPrv);
                        }
                    }
                    break;
                case 2: //B�squeda directa por "Descripci�n larga".
                    if (vcoPrv.buscar("a1.tx_nom", txtDesLarPrv.getText()))
                    {
                        txtCodPrv.setText(vcoPrv.getValueAt(1));
                        txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                        objTblMod.removeAllRows();
                    }
                    else
                    {
                        vcoPrv.setCampoBusqueda(2);
                        vcoPrv.setCriterio1(11);
                        vcoPrv.cargarDatos();
                        vcoPrv.show();
                        if (vcoPrv.getSelectedButton()==vcoPrv.INT_BUT_ACE)
                        {
                            txtCodPrv.setText(vcoPrv.getValueAt(1));
                            txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtDesLarPrv.setText(strDesLarPrv);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci�n configura la "Ventana de consulta" que ser� utilizada para
     * mostrar los "Tipos de documentos".
     */
    private boolean configurarVenConTipDoc()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_tipdoc");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            arlCam.add("a1.ne_ultDoc");
            arlCam.add("a1.tx_natDoc");
            arlCam.add("tblActNumDoc");
            arlCam.add("a2.co_grpTipDoc");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Tip.Doc.");
            arlAli.add("Tipo de documento");
            arlAli.add("Ult.Doc.");
            arlAli.add("Nat.Doc.");
            arlAli.add("Ref.Tbl.Act.");
            arlAli.add("Cod.Grp.Tbl.Tip.Doc.");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            arlAncCol.add("80");
            arlAncCol.add("80");
            arlAncCol.add("80");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            if(objParSis.getCodigoUsuario()==1){
                strSQL="";
                strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar, ";
                strSQL+=" CASE WHEN a2.ne_ultDoc IS NULL THEN a1.ne_ultDoc ELSE a2.ne_ultDoc END AS ne_ultDoc";
                strSQL+=" ,a1.tx_natDoc";
                strSQL+=" ,CASE WHEN a2.ne_ultDoc IS NULL THEN 'L' ELSE 'G' END AS tblActNumDoc, a2.co_grpTipDoc";
                strSQL+=" FROM (tbm_cabTipDoc AS a1 LEFT OUTER JOIN tbm_cabGrpTipDoc AS a2 ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_grpTipDoc=a2.co_grpTipDoc)";
                strSQL+=" INNER JOIN tbr_tipDocPrg AS a3";
                strSQL+=" ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();
                strSQL+=" AND a3.co_mnu=" + objParSis.getCodigoMenu();
                strSQL+=" ORDER BY a1.tx_desCor";
            }
            else{
                strSQL="";
                strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar,";
                strSQL+=" CASE WHEN a2.ne_ultDoc IS NULL THEN a1.ne_ultDoc ELSE a2.ne_ultDoc END AS ne_ultDoc";
                strSQL+=" ,a1.tx_natDoc";
                strSQL+=" ,CASE WHEN a2.ne_ultDoc IS NULL THEN 'L' ELSE 'G' END AS tblActNumDoc, a2.co_grpTipDoc";
                strSQL+=" FROM tbr_tipDocUsr AS a3 inner join  (tbm_cabTipDoc AS a1 LEFT OUTER JOIN tbm_cabGrpTipDoc AS a2 ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_grpTipDoc=a2.co_grpTipDoc)";
                strSQL+=" ON (a1.co_emp=a3.co_emp and a1.co_loc=a3.co_loc and a1.co_tipdoc=a3.co_tipdoc)";
                strSQL+=" WHERE ";
                strSQL+=" a3.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a3.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" AND a3.co_mnu=" + objParSis.getCodigoMenu() + "";
                strSQL+=" AND a3.co_usr=" + objParSis.getCodigoUsuario() + "";
            }


            //Ocultar columnas.
            int intColOcu[]=new int[3];
            intColOcu[0]=7;
            vcoTipDoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de tipos de documentos", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoTipDoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoTipDoc.setConfiguracionColumna(4, javax.swing.JLabel.RIGHT);


        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }




    /**
     * Esta funci�n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de b�squeda determina si se debe hacer
     * una b�squeda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se est� buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opci�n que desea utilizar.
     * @param intTipBus El tipo de b�squeda a realizar.
     * @return true: Si no se present� ning�n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConTipDoc(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoTipDoc.setCampoBusqueda(1);
                    vcoTipDoc.show();
                    if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    break;
                case 1: //B�squeda directa por "Descripci�n corta".
                    if (vcoTipDoc.buscar("a1.tx_desCor", txtDesCorTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(1);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        }
                        else
                        {
                            txtDesCorTipDoc.setText(strDesCorTipDoc);
                        }
                    }
                    break;
                case 2: //B�squeda directa por "Descripci�n larga".
                    if (vcoTipDoc.buscar("a1.tx_desLar", txtDesLarTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(2);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        }
                        else
                        {
                            txtDesLarTipDoc.setText(strDesLarTipDoc);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }




    /**
     * Esta funci�n configura la "Ventana de consulta" que ser� utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConLoc()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_loc");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Nombre");
            arlAli.add("Dirección");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("414");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            if(objParSis.getCodigoUsuario()==1){
                strSQL="";
                strSQL+="SELECT a1.co_loc, a1.tx_nom, a1.tx_dir";
                strSQL+=" FROM tbm_loc AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() +  " AND a1.st_reg NOT IN('I','E')";
                strSQL+=" ORDER BY a1.tx_nom";
            }
            else{
                strSQL="";
                strSQL+="SELECT a1.co_loc, a1.tx_nom, a1.tx_dir";
                strSQL+=" FROM tbm_loc AS a1 INNER JOIN tbr_locusr AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() +  " AND a1.st_reg NOT IN('I','E')";
                strSQL+=" AND a2.st_reg NOT IN('I','E') AND a2.co_usr=" + objParSis.getCodigoUsuario() + "";
                strSQL+=" ORDER BY a1.tx_nom";
            }
            vcoLoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de locales", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoLoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }






    /**
     * Esta funci�n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de b�squeda determina si se debe hacer
     * una b�squeda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se est� buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opci�n que desea utilizar.
     * @param intTipBus El tipo de b�squeda a realizar.
     * @return true: Si no se present� ning�n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConLoc(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoLoc.setCampoBusqueda(2);
                    vcoLoc.show();
                    if (vcoLoc.getSelectedButton()==vcoLoc.INT_BUT_ACE)
                    {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                        objTblMod.removeAllRows();
                    }
                    break;
                case 1: //B�squeda directa por codigo de local".
                    if (vcoLoc.buscar("a1.co_loc", txtCodLoc.getText()))
                    {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                        objTblMod.removeAllRows();
                    }
                    else
                    {
                        vcoLoc.setCampoBusqueda(0);
                        vcoLoc.setCriterio1(11);
                        vcoLoc.cargarDatos();
                        vcoLoc.show();
                        if (vcoLoc.getSelectedButton()==vcoLoc.INT_BUT_ACE)
                        {
                            txtCodLoc.setText(vcoLoc.getValueAt(1));
                            txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtCodLoc.setText(strCodLoc);
                        }
                    }
                    break;
                case 2: //B�squeda directa por "Descripci�n larga".
                    if (vcoLoc.buscar("a1.tx_nom", txtDesLarLoc.getText()))
                    {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                        objTblMod.removeAllRows();
                    }
                    else
                    {
                        vcoLoc.setCampoBusqueda(2);
                        vcoLoc.setCriterio1(11);
                        vcoLoc.cargarDatos();
                        vcoLoc.show();
                        if (vcoLoc.getSelectedButton()==vcoLoc.INT_BUT_ACE)
                        {
                            txtCodLoc.setText(vcoLoc.getValueAt(1));
                            txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtDesLarLoc.setText(strDesLarLoc);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    private String tipoDocPrgUsr(){
        String strTipDocUsr="";
        Statement stmTipDoc;
        ResultSet rstTipDoc;
        String strSQLTipDoc="";
        try{
            if(con!=null){
                stmTipDoc=con.createStatement();
                if(objParSis.getCodigoUsuario()==1){
                    strSQLTipDoc="";
                    strSQLTipDoc+="SELECT co_tipDoc";
                    strSQLTipDoc+=" FROM tbr_tipDocPrg AS a1";
                    strSQLTipDoc+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQLTipDoc+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                    strSQLTipDoc+=" AND a1.co_mnu=" + objParSis.getCodigoMenu() + "";
                }
                else{
                    strSQLTipDoc="";
                    strSQLTipDoc+="SELECT co_tipDoc";
                    strSQLTipDoc+=" FROM tbr_tipDocUsr AS a1";
                    strSQLTipDoc+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQLTipDoc+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                    strSQLTipDoc+=" AND a1.co_mnu=" + objParSis.getCodigoMenu() + "";
                    strSQLTipDoc+=" AND a1.co_usr=" + objParSis.getCodigoUsuario() + "";
                    strSQLTipDoc+="";
                }
                rstTipDoc=stmTipDoc.executeQuery(strSQLTipDoc);
                for(int k=0; rstTipDoc.next(); k++){
                    if(k==0){
                        strTipDocUsr="" + rstTipDoc.getString("co_tipDoc");
                    }
                    else{
                        strTipDocUsr+=", " + rstTipDoc.getString("co_tipDoc");
                    }
                }
                stmTipDoc.close();
                stmTipDoc=null;
                rstTipDoc.close();
                rstTipDoc=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return strTipDocUsr;
    }



    private void cargarDevolucion(int fila){
        int intCodEmp=Integer.parseInt(objTblMod.getValueAt(fila, INT_TBL_DAT_COD_EMP).toString());
        int intCodLoc=Integer.parseInt(objTblMod.getValueAt(fila, INT_TBL_DAT_DEV_COD_LOC).toString());
        int intCodTipDoc=Integer.parseInt(objTblMod.getValueAt(fila, INT_TBL_DAT_DEV_COD_TIP_DOC).toString());
        int intCodDoc=Integer.parseInt(objTblMod.getValueAt(fila, INT_TBL_DAT_DEV_COD_DOC).toString());

        Ventas.ZafVen28.ZafVen28 objVen28=new Ventas.ZafVen28.ZafVen28(objParSis, new Integer(intCodEmp), new Integer(intCodLoc), new Integer(intCodTipDoc), new Integer(intCodDoc));
        this.getParent().add(objVen28,javax.swing.JLayeredPane.DEFAULT_LAYER);
        objVen28.show();
    }

    private void cargarFactura(int fila){
        String strCodEmp=objTblMod.getValueAt(fila, INT_TBL_DAT_COD_EMP).toString();
        String strCodLoc=objTblMod.getValueAt(fila, INT_TBL_DAT_FAC_COD_LOC).toString();
        String strCodTipDoc=objTblMod.getValueAt(fila, INT_TBL_DAT_FAC_COD_TIP_DOC).toString();
        String strCodDoc=objTblMod.getValueAt(fila, INT_TBL_DAT_FAC_COD_DOC).toString();
        int intCodMnu=14;

        Ventas.ZafVen02.ZafVen02 objVen02=new Ventas.ZafVen02.ZafVen02(objParSis, strCodEmp, strCodLoc, strCodTipDoc, strCodDoc, intCodMnu);
        this.getParent().add(objVen02,javax.swing.JLayeredPane.DEFAULT_LAYER);
        objVen02.show();
    }



    private void cargarDatosCruce(int fila){
        int intCodEmp=Integer.parseInt(objTblMod.getValueAt(fila, INT_TBL_DAT_COD_EMP).toString());
        int intCodLoc=Integer.parseInt(objTblMod.getValueAt(fila, INT_TBL_DAT_DEV_COD_LOC).toString());
        int intCodTipDoc=Integer.parseInt(objTblMod.getValueAt(fila, INT_TBL_DAT_DEV_COD_TIP_DOC).toString());
        int intCodDoc=Integer.parseInt(objTblMod.getValueAt(fila, INT_TBL_DAT_DEV_COD_DOC).toString());

        Ventas.ZafVen16.ZafVen16_01 objVen16_01=new Ventas.ZafVen16.ZafVen16_01(objParSis, intCodEmp, intCodLoc, intCodTipDoc, intCodDoc);
        this.getParent().add(objVen16_01,javax.swing.JLayeredPane.DEFAULT_LAYER);
        objVen16_01.show();
    }



    private boolean cruceAplicaAmbos(int codLocDev, int codTipDocDev, int codDocDev, int codLocFac, int codTipDocFac, int codDocFac){
        boolean blnRes=false;
        Statement stmAplAmb;
        ResultSet rstAplAmb;
        try{
            if(con!=null){
                stmAplAmb=con.createStatement();
                strSQL="";
                strSQL+="SELECT b1.co_emp, b1.co_loc, b1.co_tipdoc, b1.co_doc FROM(";
                strSQL+=" 	select a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc";
                strSQL+=" 	from tbm_cabPag AS a1 INNER JOIN tbm_detPag AS a2";
                strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                strSQL+=" 	WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + " AND a2.co_locPag=" + codLocDev + "";
                strSQL+="         AND a2.co_tipDocPag=" + codTipDocDev + " AND a2.co_docPag=" + codDocDev + "";
                strSQL+=" ) AS b1";
                strSQL+=" INNER JOIN(";
                strSQL+=" 	select a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc";
                strSQL+=" 	from tbm_cabPag AS a1 INNER JOIN tbm_detPag AS a2";
                strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                strSQL+=" 	WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + " AND a2.co_locPag=" + codLocFac + "";
                strSQL+="         AND a2.co_tipDocPag=" + codTipDocFac + " AND a2.co_docPag=" + codDocFac + "";
                strSQL+=" ) AS b2";
                strSQL+=" ON b1.co_emp=b2.co_emp AND b1.co_loc=b2.co_loc AND b1.co_tipdoc=b2.co_tipDoc AND b1.co_doc=b2.co_doc";
                strSQL+=" GROUP BY b1.co_emp, b1.co_loc, b1.co_tipdoc, b1.co_doc";
                rstAplAmb=stmAplAmb.executeQuery(strSQL);
                if(rstAplAmb.next()){
                    blnRes=true;
                }
                stmAplAmb.close();
                stmAplAmb=null;
                rstAplAmb.close();
                rstAplAmb=null;
            }

        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;


    }




}