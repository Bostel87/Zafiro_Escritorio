/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ZafVen16_01.java
 *
 * Created on Apr 28, 2010, 10:54:34 AM
 */

package Ventas.ZafVen16;

import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaColGrp;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaGrp;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafUtil.ZafUtil;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut;
import Librerias.ZafTblUti.ZafTblCelEdiButGen.ZafTblCelEdiButGen;


/**
 *
 * @author ilino
 */
public class ZafVen16_01 extends javax.swing.JInternalFrame {

    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafColNumerada objColNum;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMen� en JTable.
    private String strAux;
    private Vector vecDat, vecCab,vecReg, vecAux;
    private ZafTblBus objTblBus;
    private ZafMouMotAda objMouMotAda;
    private ZafTblOrd objTblOrd;
    private ZafTblCelRenLbl objTblCelRenLbl;
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL;


    //PARA LOS DATOS DE LOS CRUCES
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_CRU_COD_LOC=1;
    final int INT_TBL_DAT_CRU_COD_TIP_DOC=2;
    final int INT_TBL_DAT_CRU_DES_COR_TIP_DOC=3;
    final int INT_TBL_DAT_CRU_DES_LAR_TIP_DOC=4;
    final int INT_TBL_DAT_CRU_COD_DOC=5;
    final int INT_TBL_DAT_CRU_NUM_DOC=6;
    final int INT_TBL_DAT_CRU_FEC_DOC=7;
    final int INT_TBL_DAT_CRU_BUT=8;

    private ZafTblCelEdiButGen objTblCelEdiButGenCru;
    private ZafTblCelRenBut    objTblCelRenButCru;





    /** Creates new form ZafVen16_01 */
    public ZafVen16_01(ZafParSis obj, int codigoEmpresa, int codigoLocal, int codigoTipoDocumento, int codigoDocumento) {
        try{
            initComponents();
            this.objParSis=obj;
            objParSis=(ZafParSis)obj.clone();
            objUti=new ZafUtil();
            if (!configurarFrm())
                exitForm();

            if(! cargarDatosCruce(codigoEmpresa, codigoLocal, codigoTipoDocumento, codigoDocumento))
                exitForm();


        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable() {
            protected javax.swing.table.JTableHeader createDefaultTableHeader()
            {
                return new ZafTblHeaGrp(columnModel);
            }
        };
        panBot = new javax.swing.JPanel();
        butCer = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("jLabel1");
        lblTit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel2.add(lblTit, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDat);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCer.setMnemonic('C');
        butCer.setText("Cerrar");
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        jPanel1.add(panBot, java.awt.BorderLayout.PAGE_END);

        jPanel2.add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        // TODO add your handling code here:
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        // TODO add your handling code here:
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCer;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBot;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables



    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            strAux=objParSis.getNombreMenu() + "v0.1";
            this.setTitle(strAux);
            lblTit.setText(strAux);

            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(9);    //Almacena las cabeceras
            vecCab.clear();

            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_CRU_COD_LOC,"Cód.Loc.");
            vecCab.add(INT_TBL_DAT_CRU_COD_TIP_DOC,"Cód.Tip.Doc.");
            vecCab.add(INT_TBL_DAT_CRU_DES_COR_TIP_DOC,"Tip.Doc.");
            vecCab.add(INT_TBL_DAT_CRU_DES_LAR_TIP_DOC,"Tipo de documento");
            vecCab.add(INT_TBL_DAT_CRU_COD_DOC,"Cód.Doc.");
            vecCab.add(INT_TBL_DAT_CRU_NUM_DOC,"Núm.Doc.");
            vecCab.add(INT_TBL_DAT_CRU_FEC_DOC,"Fec.Doc.");
            vecCab.add(INT_TBL_DAT_CRU_BUT,"...");

            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);

            //Configurar JTable: Establecer tipo de selecci�n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el men� de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Tama�o de las celdas
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_CRU_COD_LOC).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_CRU_COD_TIP_DOC).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_CRU_DES_COR_TIP_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_CRU_DES_LAR_TIP_DOC).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_CRU_COD_DOC).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_CRU_NUM_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_CRU_FEC_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_CRU_BUT).setPreferredWidth(30);



            tblDat.getTableHeader().setReorderingAllowed(false);

            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            objTblBus=new ZafTblBus(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);



            //cruces de documentos
            ZafTblHeaGrp objTblHeaGrpCru=(ZafTblHeaGrp)tblDat.getTableHeader();
            objTblHeaGrpCru.setHeight(16*2);
            ZafTblHeaColGrp objTblHeaColGrpCru=null;
            java.awt.Color colFonColCru;
            colFonColCru=new java.awt.Color(228,228,203);

            //Configurar JTable: Renderizar celdas.
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.LEFT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_GEN);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            objTblCelRenLbl.setBackground(colFonColCru);
            tcmAux.getColumn(INT_TBL_DAT_CRU_COD_LOC).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_CRU_COD_TIP_DOC).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_CRU_DES_COR_TIP_DOC).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_CRU_DES_LAR_TIP_DOC).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_CRU_COD_DOC).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_CRU_NUM_DOC).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_CRU_FEC_DOC).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_CRU_BUT).setCellRenderer(objTblCelRenLbl);


            objTblCelRenLbl=null;

            objTblHeaColGrpCru=new ZafTblHeaColGrp("Cruce de documentos");
            objTblHeaColGrpCru.setHeight(16);
            objTblHeaGrpCru.addColumnGroup(objTblHeaColGrpCru);

            objTblHeaColGrpCru.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_COD_LOC));
            objTblHeaColGrpCru.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_COD_TIP_DOC));
            objTblHeaColGrpCru.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_DES_COR_TIP_DOC));
            objTblHeaColGrpCru.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_DES_LAR_TIP_DOC));
            objTblHeaColGrpCru.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_COD_DOC));
            objTblHeaColGrpCru.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_NUM_DOC));
            objTblHeaColGrpCru.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_FEC_DOC));
            objTblHeaColGrpCru.add(tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_BUT));


            //Para cargar la ventana de cruces
            objTblCelRenButCru=new ZafTblCelRenBut();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_BUT).setCellRenderer(objTblCelRenButCru);
            objTblCelEdiButGenCru=new ZafTblCelEdiButGen();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CRU_BUT).setCellEditor(objTblCelEdiButGenCru);
            objTblCelEdiButGenCru.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFilSel;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFilSel=tblDat.getSelectedRow();
                    //SE DEBE VALIDAR QUE EXISTAN DATOS EN ESA FILA
                }
                public void actionPerformed(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    cargarCruceDocumento(intFilSel);//carga el programa de cruce
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
            });


            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_CRU_BUT);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;

            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);

            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_CRU_COD_TIP_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_CRU_COD_DOC, tblDat);





            //Libero los objetos auxiliares.
            tcmAux=null;

        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /** Cerrar la aplicaci�n. */
    private void exitForm()
    {
        dispose();
    }


    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren m�s espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_CRU_COD_LOC:
                    strMsg="Código del local";
                    break;
                case INT_TBL_DAT_CRU_COD_TIP_DOC:
                    strMsg="Código del Tipo de Documento";
                    break;
                case INT_TBL_DAT_CRU_DES_COR_TIP_DOC:
                    strMsg="Descripción corta del Tipo de Documento";
                    break;
                case INT_TBL_DAT_CRU_DES_LAR_TIP_DOC:
                    strMsg="Descripción larga del Tipo de Documento";
                    break;
                case INT_TBL_DAT_CRU_COD_DOC:
                    strMsg="Código del documento";
                    break;
                case INT_TBL_DAT_CRU_NUM_DOC:
                    strMsg="Número de documento";
                    break;
                case INT_TBL_DAT_CRU_FEC_DOC:
                    strMsg="Fecha del documento";
                    break;
                case INT_TBL_DAT_CRU_BUT:
                    strMsg="Muestra del Cruce de Documentos";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }


    private boolean cargarDatosCruce(int intCodEmpresa, int intCodLocal, int intCodTipDoc, int intCodDoc){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+=" SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a3.tx_desCor AS tx_desCorTipDoc";
                strSQL+=" , a3.tx_desLar AS tx_desLarTipDoc, a1.ne_numDoc1, a1.fe_doc";
                strSQL+=" , a2.co_locPag, a2.co_tipDocPag, a2.co_docPag, a1.st_reg	";
                strSQL+=" FROM (tbm_cabPag AS a1 INNER JOIN tbm_cabTipDoc AS a3 ";
                strSQL+=" ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                strSQL+=" INNER JOIN tbm_detPag AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                strSQL+=" WHERE a1.co_emp=" + intCodEmpresa + " AND a2.co_locPag=" + intCodLocal + "";
                strSQL+=" AND a2.co_tipDocPag=" + intCodTipDoc + " AND a2.co_docPag=" + intCodDoc + "";
                strSQL+=" AND a1.st_reg NOT IN('E','I')";
                strSQL+=" order by a1.co_emp, a1.co_tipDoc, a1.co_doc";
                System.out.println("cargarDatosCruce: " + strSQL);
                rst=stm.executeQuery(strSQL);
                while(rst.next()){
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN, "");
                    vecReg.add(INT_TBL_DAT_CRU_COD_LOC,         "" + rst.getObject("co_loc")==null?"":rst.getString("co_loc"));
                    vecReg.add(INT_TBL_DAT_CRU_COD_TIP_DOC,     "" + rst.getObject("co_tipDoc")==null?"":rst.getString("co_tipDoc"));
                    vecReg.add(INT_TBL_DAT_CRU_DES_COR_TIP_DOC, "" + rst.getObject("tx_desCorTipDoc")==null?"":rst.getString("tx_desCorTipDoc"));
                    vecReg.add(INT_TBL_DAT_CRU_DES_LAR_TIP_DOC, "" + rst.getObject("tx_desLarTipDoc")==null?"":rst.getString("tx_desLarTipDoc"));
                    vecReg.add(INT_TBL_DAT_CRU_COD_DOC,         "" + rst.getObject("co_doc")==null?"":rst.getString("co_doc"));
                    vecReg.add(INT_TBL_DAT_CRU_NUM_DOC,         "" + rst.getObject("ne_numDoc1")==null?"":rst.getString("ne_numDoc1"));
                    vecReg.add(INT_TBL_DAT_CRU_FEC_DOC,         "" + rst.getObject("fe_doc")==null?"":rst.getString("fe_doc"));
                    vecReg.add(INT_TBL_DAT_CRU_BUT,             "");
                    vecDat.add(vecReg);
                    //intNumReg=rst.getRow();
                }

                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);


                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
            }


        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }


    private void cargarCruceDocumento(int fila){
        int intCodEmp=objParSis.getCodigoEmpresa();
        int intCodLoc=Integer.parseInt(objTblMod.getValueAt(fila, INT_TBL_DAT_CRU_COD_LOC).toString());
        int intCodTipDoc=Integer.parseInt(objTblMod.getValueAt(fila, INT_TBL_DAT_CRU_COD_TIP_DOC).toString());
        int intCodDoc=Integer.parseInt(objTblMod.getValueAt(fila, INT_TBL_DAT_CRU_COD_DOC).toString());
        int intCodMnu=799;//clientes-programa de cruce de documento del mismo cliente

        CxC.ZafCxC24.ZafCxC24 objCxC24=new CxC.ZafCxC24.ZafCxC24(objParSis, intCodEmp, intCodLoc, intCodTipDoc, intCodDoc, intCodMnu);
        this.getParent().add(objCxC24,javax.swing.JLayeredPane.DEFAULT_LAYER);
        objCxC24.show();
    }


}
