/*  
 *  Created on 31 de Julio de 2007, 10:10 PM
 */  
package Ventas.ZafVen14;
     
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import java.sql.Connection;
import java.sql.DriverManager;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import java.util.Vector;
import java.util.ArrayList;  //*******************
import Librerias.ZafSelFec.ZafSelFec;
import Librerias.ZafVenCon.ZafVenCon; 

import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaGrp;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaColGrp;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;

/**
 *
 * @author  Javier Ayapata
 */
public class ZafVen14 extends javax.swing.JInternalFrame
{
   
    private ZafSelFec objSelFec;
    Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk objTblCelEdiChk;
    private Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt objTblCelEdiTxt;
    private ZafTblCelRenLbl objTblCelRenLbl;

   //Constantes: Columnas del JTable:
    final int INT_TBL_LIN=0;                        //Línea
    final int INT_TBL_NOMBRE =1;                    //Código del item (Sistema).
    final int INT_TBL_SALTCAS=2;                    //Descripción corta de la unidad de medida.
    final int INT_TBL_SALTDIM=3;                    //Stock consolidado.
    final int INT_TBL_SALCTUV=4;                   //Precio de venta 1.
    final int INT_TBL_SALCDIM=5;                   //Precio de venta 1.
    final int INT_TBL_SALDTUV=6;                   //Precio de venta 1.
    final int INT_TBL_SALDCAS=7;                   //Precio de venta 1.

    
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod;
    private ZafThreadGUI objThrGUI;
    private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
    private Connection con;
    private String  strAux;
    private Vector vecDat, vecCab;
   
    ZafVenCon objVenConBodUsr; //*****************
    ZafVenCon objVenConCLi;
    ZafVenCon objVenConVen;
    
    String strCodBod="", strNomBod="";
    String strCodCli="";
    String strDesCli="";
    String strCodVen="";
    String strDesVen="";
    String strVersion=" v 0.3 ";

    private Vector  vecCabOrg;

    
    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafVen14(ZafParSis obj)
    {

        objParSis=obj;
        objTblCelEdiChk = new Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk();
        
        initComponents();
        //Inicializar objetos.

        //Configurar ZafSelFec:
            objSelFec=new ZafSelFec();
            objSelFec.setCheckBoxVisible(true);
            objSelFec.setCheckBoxChecked(true);
            objSelFec.setTitulo("Fecha del documento");
            objSelFec.setCheckBoxVisible(true);
            panCabFec.add(objSelFec);
            objSelFec.setBounds(4, 5, 472, 72);

     
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        panCabFec = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable() {
            protected javax.swing.table.JTableHeader createDefaultTableHeader()
            {
                return new ZafTblHeaGrp(columnModel);
            }
        };
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setLayout(new java.awt.BorderLayout());

        panCabFec.setPreferredSize(new java.awt.Dimension(100, 80));
        panCabFec.setLayout(null);
        panFil.add(panCabFec, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnDat.setViewportView(tblDat);

        jPanel2.add(spnDat, java.awt.BorderLayout.CENTER);

        panFil.add(jPanel2, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Filtro", panFil);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    
    
         
       
    
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
          Configura_ventana_consulta();
         configurarFrm();
        
    }//GEN-LAST:event_formInternalFrameOpened

    
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acción de acuerdo a la etiqueta del botón ("Consultar" o "Detener").
        
       


       
            
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
       
       
    }//GEN-LAST:event_butConActionPerformed

    
       private void MensajeInf(String strMensaje){
        javax.swing.JOptionPane obj =new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        obj.showMessageDialog(this,strMensaje,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    


    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm













 private boolean guardarRecep(){
  boolean blnRes=true;
  java.sql.Connection conn;
  try{
    conn =  java.sql.DriverManager.getConnection(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos());
    if(conn!=null){
     conn.setAutoCommit(false);
  
     if(guardarRecepcion(conn)){
         conn.commit();
     }else conn.rollback();

     conn.close();
     conn=null;
  }}catch(java.sql.SQLException Evt){ blnRes=false; objUti.mostrarMsgErr_F1(this, Evt);  }
    catch(Exception Evt){ blnRes=false; objUti.mostrarMsgErr_F1(this, Evt); }
  return  blnRes;
}


 private boolean guardarRecepcion(java.sql.Connection conn ){
  boolean blnRes=false;
  java.sql.Statement stmLoc;
  String strSql="";
  String strFecSis="";
  try{
    if(conn!=null){
     stmLoc=conn.createStatement();
     strFecSis = objUti.getFechaServidor(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos(),objParSis.getQueryFechaHoraBaseDatos(),objParSis.getFormatoFechaHoraBaseDatos());

 

     stmLoc.close();
     stmLoc=null;
     blnRes=true;
  }}catch(java.sql.SQLException Evt){ blnRes=false; objUti.mostrarMsgErr_F1(this, Evt);  }
    catch(Exception Evt){ blnRes=false; objUti.mostrarMsgErr_F1(this, Evt); }
  return  blnRes;
}





 

        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panCabFec;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables
   
    

 /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux+" v 0.1");
            lblTit.setText(strAux);

            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(8);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_LIN,"");
            vecCab.add(INT_TBL_NOMBRE,"Descripción.");
            vecCab.add(INT_TBL_SALTCAS,"CASTEK");
            vecCab.add(INT_TBL_SALTDIM,"DIMULTI");
            vecCab.add(INT_TBL_SALCTUV,"TUVAL");
            vecCab.add(INT_TBL_SALCDIM,"DIMULTI");
            vecCab.add(INT_TBL_SALDTUV,"TUVAL");
            vecCab.add(INT_TBL_SALDCAS,"CASTEK");


           // vecCab.add(INT_TBL_DAT_TOT_COS,"Total.Costo");
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            new ZafColNumerada(tblDat,INT_TBL_LIN);
            //Configurar JTable: Establecer el menú de contexto.
            new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();

            tcmAux.getColumn(INT_TBL_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_NOMBRE).setPreferredWidth(160);
            tcmAux.getColumn(INT_TBL_SALTCAS).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_SALTDIM).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_SALCTUV).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_SALCDIM).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_SALDTUV).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_SALDCAS).setPreferredWidth(80);



            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Editor de búsqueda.
            new ZafTblBus(tblDat);
            //Configurar JTable: Renderizar celdas.

            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_SALTCAS).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_SALTDIM).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_SALCTUV).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_SALCDIM).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_SALDTUV).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_SALDCAS).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            //Libero los objetos auxiliares.
            new ZafTblOrd(tblDat);

            
             ZafTblHeaGrp objTblHeaGrp=(ZafTblHeaGrp)tblDat.getTableHeader();
             objTblHeaGrp.setHeight(16*2);

              ZafTblHeaColGrp objTblHeaColGrpAmeSur=new ZafTblHeaColGrp("TUVAL");
              objTblHeaColGrpAmeSur.setHeight(16);
                 objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_SALTCAS));
                 objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_SALTDIM));
               objTblHeaGrp.addColumnGroup(objTblHeaColGrpAmeSur);
               objTblHeaColGrpAmeSur=null;

              objTblHeaColGrpAmeSur=new ZafTblHeaColGrp("CASTEK");
              objTblHeaColGrpAmeSur.setHeight(16);
                 objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_SALCTUV));
                 objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_SALCDIM));
               objTblHeaGrp.addColumnGroup(objTblHeaColGrpAmeSur);
               objTblHeaColGrpAmeSur=null;

              objTblHeaColGrpAmeSur=new ZafTblHeaColGrp("DIMULTI");
              objTblHeaColGrpAmeSur.setHeight(16);
                 objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_SALDTUV));
                 objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_SALDCAS));
               objTblHeaGrp.addColumnGroup(objTblHeaColGrpAmeSur);
               objTblHeaColGrpAmeSur=null;

            tcmAux=null;


        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    

     public void setEditable(boolean editable) {
        if (editable==true){
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
        }else{
            objTblMod.setModoOperacion(objTblMod.INT_TBL_NO_EDI);
        }
    }


    
      public void Configura_ventana_consulta(){
        
  
    }
     



private String sqlConFil(){
   String sqlFil="";

       if(objSelFec.isCheckBoxChecked() ){
         switch (objSelFec.getTipoSeleccion())
         {
                    case 0: //Búsqueda por rangos
                        sqlFil+=" AND fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 1: //Fechas menores o iguales que "Hasta".
                        sqlFil+=" AND fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 2: //Fechas mayores o iguales que "Desde".
                        sqlFil+=" AND fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 3: //Todo.
                        break;
        }}
      return sqlFil;
    }



/**
* Esta función permite consultar los registros de acuerdo al criterio seleccionado.
* @return true: Si se pudo consultar los registros.
* <BR>false: En el caso contrario.
*/
private boolean cargarDetReg(String strFil){
 boolean blnRes=true;
 java.sql.Statement stm;
 java.sql.ResultSet rst;
 int intNumTotReg=0;
 String strSql="";
 int intMesDes=-1, intMesHas=-1;
 int intAniDes=0, intAniHas=01;
 int intval=0;
 int intConStb=0;
 StringBuffer stbInsFec;
 try{
    butCon.setText("Detener");
    lblMsgSis.setText("Obteniendo datos...");
    con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
    if (con!=null){
        stm=con.createStatement();
      
        stbInsFec=new StringBuffer();
        vecCabOrg=new Vector();    //Almacena las cabeceras


        if(objSelFec.isCheckBoxChecked() ){
         switch (objSelFec.getTipoSeleccion())
         {
                    case 0: //Búsqueda por rangos
                       intval=1;
                       intMesDes = objUti.getMesFecha(objSelFec.getFechaDesde(),"dd/MM/yyyy","yyyy-MM-dd");
                       intMesHas = objUti.getMesFecha(objSelFec.getFechaHasta(),"dd/MM/yyyy","yyyy-MM-dd");
                       intAniDes = objUti.getMesAnio(objSelFec.getFechaDesde(),"dd/MM/yyyy","yyyy-MM-dd");
                       intAniHas = objUti.getMesAnio(objSelFec.getFechaHasta(),"dd/MM/yyyy","yyyy-MM-dd");
                        break;
                    case 1: //Fechas menores o iguales que "Hasta".
                       intval=3;
                       intAniHas = objUti.getMesAnio(objSelFec.getFechaHasta(),"dd/MM/yyyy","yyyy-MM-dd");
                       intMesHas = objUti.getMesFecha(objSelFec.getFechaHasta(),"dd/MM/yyyy","yyyy-MM-dd");
                       intAniDes=intAniHas;
                        break;
                    case 2: //Fechas mayores o iguales que "Desde".
                       intval=2;
                       intMesDes = objUti.getMesFecha(objSelFec.getFechaDesde(),"dd/MM/yyyy","yyyy-MM-dd");
                       intAniDes = objUti.getMesAnio(objSelFec.getFechaDesde(),"dd/MM/yyyy","yyyy-MM-dd");
                       intAniHas=intAniDes;
                        break;
                    case 3: //Todo.
                        break;
        }}

        System.out.println(""+ intMesDes + " - "+ intAniDes );

        int hasta=0;
        int desde=0;

        if(intval==1){
           hasta=11;
           desde = intMesDes;
        }
        if(intval==2){
           hasta= 11;
           desde = intMesDes; 
        }  
        if(intval==3){
           hasta=intMesHas;
           desde = 0; 
        }  
      
        vecCabOrg.add(INT_TBL_LIN,"");
        vecCabOrg.add(INT_TBL_NOMBRE,"Descripción.");
        int INT_TBL_COLAUT=INT_TBL_NOMBRE;
        int INT_TBL_COLAUTGRP=INT_TBL_NOMBRE;
        int INT_TBL_COLAUTDAT=INT_TBL_NOMBRE;
        int intEstCraTbl=0;

           for(int y=intAniDes; y<=intAniHas; y++){
            if(intval==1){ if(y==intAniHas) hasta = intMesHas; }
             for(int i=desde; i<=hasta; i++){
                     if((i+1)==1) intEstCraTbl=1;
                     if((i+1)==2) intEstCraTbl=1;
                     if((i+1)==3) intEstCraTbl=1;
                     if((i+1)==4) intEstCraTbl=1;
                     if((i+1)==5) intEstCraTbl=1;
                     if((i+1)==6) intEstCraTbl=1;
                     if((i+1)==7) intEstCraTbl=1;
                     if((i+1)==8) intEstCraTbl=1;
                     if((i+1)==9) intEstCraTbl=1;
                     if((i+1)==10) intEstCraTbl=1;
                     if((i+1)==11) intEstCraTbl=1;
                     if((i+1)==12) intEstCraTbl=1;

                    if(intEstCraTbl==1){
                     INT_TBL_COLAUT++; vecCabOrg.add(INT_TBL_COLAUT,"CASTEK");
                     INT_TBL_COLAUT++; vecCabOrg.add(INT_TBL_COLAUT,"DIMULTI");
                     INT_TBL_COLAUT++; vecCabOrg.add(INT_TBL_COLAUT,"TUVAL");
                     INT_TBL_COLAUT++; vecCabOrg.add(INT_TBL_COLAUT,"DIMULTI");
                     INT_TBL_COLAUT++; vecCabOrg.add(INT_TBL_COLAUT,"TUVAL");
                     INT_TBL_COLAUT++; vecCabOrg.add(INT_TBL_COLAUT,"CASTEK");
                     intEstCraTbl=0;
                    }
                   if(intConStb > 0)
                      stbInsFec.append(" UNION ALL ");
                      stbInsFec.append(" SELECT "+y+" as anio, "+(i+1)+" as mes");
                  intConStb=1;
            }
            desde=0; 
            hasta=11; 
          }

        Librerias.ZafTblUti.ZafTblMod.ZafTblMod objTblMod2=new Librerias.ZafTblUti.ZafTblMod.ZafTblMod();
        objTblMod2.setHeader(vecCabOrg);
        tblDat.setModel(objTblMod2);

        tblDat.setRowSelectionAllowed(true);
        tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();


        new ZafTblPopMnu(tblDat);
       

        ZafTblHeaGrp objTblHeaGrp=(ZafTblHeaGrp)tblDat.getTableHeader();
        objTblHeaGrp.setHeight(16*3);


        hasta=0;
        desde=0;

        if(intval==1){
           hasta=11;
           desde = intMesDes;
        }
        if(intval==2){
           hasta= 11;
           desde = intMesDes;
        }
        if(intval==3){
           hasta=intMesHas;
           desde = 0;
        }


        new ZafColNumerada(tblDat,INT_TBL_LIN);

        tcmAux.getColumn(INT_TBL_LIN).setPreferredWidth(30);
        tcmAux.getColumn(INT_TBL_NOMBRE).setPreferredWidth(160);

        for(int i=INT_TBL_COLAUTGRP+1; i<= INT_TBL_COLAUT; i++){
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(i).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;

            tcmAux.getColumn(i).setPreferredWidth(80);
        }

        intEstCraTbl=0;
        String strMes="";
        for(int y=intAniDes; y<=intAniHas; y++){
            if(intval==1){ if(y==intAniHas) hasta = intMesHas; }
             for(int i=desde; i<=hasta; i++){
                     if((i+1)==1) { intEstCraTbl=1; strMes="Enero"+y;  } // vecCabOrg.add("Enero"+y+" ");
                     if((i+1)==2)  { intEstCraTbl=1; strMes="Febrero"+y;  } //  vecCabOrg.add("Febrero"+y+" ");
                     if((i+1)==3)  { intEstCraTbl=1; strMes="Marzo"+y;  } //  vecCabOrg.add("Marzo"+y+" ");
                     if((i+1)==4)  { intEstCraTbl=1; strMes="Abril"+y;  } // vecCabOrg.add("Abril"+y+" ");
                     if((i+1)==5)  { intEstCraTbl=1; strMes="Mayo"+y;  } //  vecCabOrg.add("Mayo"+y+" ");
                     if((i+1)==6)  { intEstCraTbl=1; strMes="Junio"+y;  } //  vecCabOrg.add("Junio"+y+"");
                     if((i+1)==7)  { intEstCraTbl=1; strMes="Julio"+y;  } //  vecCabOrg.add("Julio"+y+" ");
                     if((i+1)==8)  { intEstCraTbl=1; strMes="Agosto"+y;  } //  vecCabOrg.add("Agosto"+y+" ");
                     if((i+1)==9)   { intEstCraTbl=1; strMes="Septiembre"+y;  } // vecCabOrg.add("Septiembre"+y+" ");
                     if((i+1)==10)  { intEstCraTbl=1; strMes="Octubre"+y;  } //  vecCabOrg.add("Octubre"+y+" ");
                     if((i+1)==11)  { intEstCraTbl=1; strMes="Noviembre"+y;  } //  vecCabOrg.add("Noviembre"+y+" ");
                     if((i+1)==12)  { intEstCraTbl=1; strMes="Diciembre"+y;  } //  vecCabOrg.add("Diciembre"+y+"");
                   
                   if(intEstCraTbl==1){
                    ZafTblHeaColGrp  objTblHeaColGrpPri=new ZafTblHeaColGrp( strMes );
                    objTblHeaColGrpPri.setHeight(16);

                         ZafTblHeaColGrp objTblHeaColGrpAmeSur=new ZafTblHeaColGrp("TUVAL");
                         objTblHeaColGrpAmeSur.setHeight(16);
                           INT_TBL_COLAUTGRP++; objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_COLAUTGRP));
                           INT_TBL_COLAUTGRP++; objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_COLAUTGRP));
                         objTblHeaColGrpPri.add(objTblHeaColGrpAmeSur);
                         objTblHeaColGrpAmeSur=null;

                         objTblHeaColGrpAmeSur=new ZafTblHeaColGrp("CASTEK");
                         objTblHeaColGrpAmeSur.setHeight(16);
                           INT_TBL_COLAUTGRP++; objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_COLAUTGRP));
                           INT_TBL_COLAUTGRP++; objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_COLAUTGRP));
                         objTblHeaColGrpPri.add(objTblHeaColGrpAmeSur);
                         objTblHeaColGrpAmeSur=null;

                         objTblHeaColGrpAmeSur=new ZafTblHeaColGrp("DIMULTI");
                         objTblHeaColGrpAmeSur.setHeight(16);
                           INT_TBL_COLAUTGRP++; objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_COLAUTGRP));
                           INT_TBL_COLAUTGRP++; objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_COLAUTGRP));
                         objTblHeaColGrpPri.add(objTblHeaColGrpAmeSur);
                         objTblHeaColGrpAmeSur=null;


                         

                    objTblHeaGrp.addColumnGroup(objTblHeaColGrpPri);
                    objTblHeaColGrpPri=null;
                    intEstCraTbl=0;
                   }

            }
            desde=0;
            hasta=11;
          }

        objTblMod2.setModoOperacion(objTblMod2.INT_TBL_EDI);

        vecDat.clear();

       String strTipDoc1="", strTipDoc2="";
       String strNomDoc="";

      double dblcomCasTuv=0;
      double dblcomDimTuv=0;
      double dlbcomTuvCas=0;
      double dblcomDimCas=0;
      double dblcomTuvDim=0;
      double dblcomCasDim=0;
      int intTipMov=1;

       for(int z=1; z<=4; z++){

         INT_TBL_COLAUTDAT=INT_TBL_NOMBRE;
         
         if(z==1){
            strTipDoc1="2";
            strTipDoc2="128,129,130,131";
            intTipMov=1;
            strNomDoc="(+)Compras";
         }
         if(z==2){
            strTipDoc1="1";
            strTipDoc2="124,125,126,127";
            intTipMov=-1;
            strNomDoc="(-)Ventas";
         }
         if(z==3){
            strTipDoc1="4";
            strTipDoc2=" 136,137,138,139 ";
            intTipMov=-1;
            strNomDoc="(-)Devolución de Compras";
         }
         if(z==4){
            strTipDoc1="3";
            strTipDoc2="132,133,134,135";
            intTipMov=1;
            strNomDoc="(+)Devolución de ventas";
         }





        java.util.Vector vecReg = new java.util.Vector();
        vecReg.add(INT_TBL_LIN, "");
        vecReg.add(INT_TBL_NOMBRE, strNomDoc );

        strSql="SELECT x.anio, x.mes, abs(x1.comCasTuv) as comCasTuv, abs(x2.comDimTuv) as comDimTuv, abs(x3.comTuvCas) as comTuvCas, abs(x4.comDimCas) as comDimCas, abs(x5.comTuvDim) as comTuvDim, abs(x6.comCasDim) as comCasDim  FROM ( " +
        " "+stbInsFec.toString()+" "+
        " ) as x " +
        " LEFT JOIN ( " +
        "           select extract(year from fe_doc) as anio, extract(month from fe_doc) as mes, sum(nd_tot) as comCasTuv from tbm_cabmovinv " +
        "           WHERE co_emp=2  AND ((co_tipdoc in ("+strTipDoc1+") and co_loc=5 ) OR  ( co_tipdoc in ("+strTipDoc2+") and co_loc != 5 )) "+
        "           and  co_cli=2854 "+strFil+" "+
        "           GROUP BY  extract(year from fe_doc), extract(month from fe_doc)        " +
        " ) as x1 ON (x1.anio=x.anio and x1.mes=x.mes)" +
        " LEFT JOIN ( " +
        "           select extract(year from fe_doc) as anio, extract(month from fe_doc) as mes, sum(nd_tot) as comDimTuv from tbm_cabmovinv " +
        "           WHERE co_emp=4 AND ((co_tipdoc in ("+strTipDoc1+") and co_loc=2 ) OR  ( co_tipdoc in ("+strTipDoc2+") and co_loc != 2 ))    " +
        "           and  co_cli=3117 "+strFil+" "+
        "           GROUP BY  extract(year from fe_doc), extract(month from fe_doc)    " +
        " ) as x2 ON (x2.anio=x.anio and x2.mes=x.mes)" +
        " LEFT JOIN ( " +
        "           select extract(year from fe_doc) as anio, extract(month from fe_doc) as mes, sum(nd_tot) as comTuvCas from tbm_cabmovinv " +
        "           WHERE co_emp=1 AND ((co_tipdoc in ("+strTipDoc1+") and co_loc=5 ) OR  ( co_tipdoc in ("+strTipDoc2+") and co_loc != 5 ))    " +
        "           and  co_cli=603 "+strFil+" "+
        "           GROUP BY  extract(year from fe_doc), extract(month from fe_doc)      " +
        " ) as x3 ON (x3.anio=x.anio and x3.mes=x.mes)" +
        " LEFT JOIN ( " +
        "           select extract(year from fe_doc) as anio, extract(month from fe_doc) as mes, sum(nd_tot) as comDimCas from tbm_cabmovinv " +
        "           WHERE co_emp=4 AND ((co_tipdoc in ("+strTipDoc1+") and co_loc=2 ) OR  ( co_tipdoc in ("+strTipDoc2+") and co_loc != 2 ))    " +
        "           and  co_cli=498 "+strFil+" "+
        "           GROUP BY  extract(year from fe_doc), extract(month from fe_doc)  " +
        " ) as x4 ON (x4.anio=x.anio and x4.mes=x.mes)" +
        " LEFT JOIN ( " +
        "           select extract(year from fe_doc) as anio, extract(month from fe_doc) as mes, sum(nd_tot) as comTuvDim from tbm_cabmovinv " +
        "           WHERE co_emp=1 AND ((co_tipdoc in ("+strTipDoc1+") and co_loc=5 ) OR  ( co_tipdoc in ("+strTipDoc2+") and co_loc != 5 ))    " +
        "           and  co_cli=1039 "+strFil+" "+
        "           GROUP BY  extract(year from fe_doc), extract(month from fe_doc)    " +
        " ) as x5 ON (x5.anio=x.anio and x5.mes=x.mes)" +
        " LEFT JOIN ( " +
        "           select extract(year from fe_doc) as anio, extract(month from fe_doc) as mes, sum(nd_tot) as comCasDim from tbm_cabmovinv " +
        "           WHERE co_emp=2 AND ((co_tipdoc in ("+strTipDoc1+") and co_loc=5 ) OR  ( co_tipdoc in ("+strTipDoc2+") and co_loc != 5 ))    " +
        "           and  co_cli=789 "+strFil+" "+
        "           GROUP BY  extract(year from fe_doc), extract(month from fe_doc)    " +
        " ) as x6 ON (x6.anio=x.anio and x6.mes=x.mes) ";

  
      //  System.out.println("-->"+ strSql );
        rst=stm.executeQuery(strSql);
        while (rst.next()){

           INT_TBL_COLAUTDAT++; vecReg.add(INT_TBL_COLAUTDAT, rst.getString("comTuvCas") );
           INT_TBL_COLAUTDAT++; vecReg.add(INT_TBL_COLAUTDAT, rst.getString("comTuvDim") );

           INT_TBL_COLAUTDAT++; vecReg.add(INT_TBL_COLAUTDAT, rst.getString("comCasTuv") );
           INT_TBL_COLAUTDAT++; vecReg.add(INT_TBL_COLAUTDAT, rst.getString("comCasDim") );
           
           INT_TBL_COLAUTDAT++; vecReg.add(INT_TBL_COLAUTDAT, rst.getString("comDimTuv") );
           INT_TBL_COLAUTDAT++; vecReg.add(INT_TBL_COLAUTDAT, rst.getString("comDimCas") );

           dblcomCasTuv += ( rst.getDouble("comTuvCas")*intTipMov);
           dblcomDimTuv += ( rst.getDouble("comTuvDim")*intTipMov);
           dlbcomTuvCas += ( rst.getDouble("comCasTuv")*intTipMov);
           dblcomDimCas += ( rst.getDouble("comCasDim")*intTipMov);
           dblcomTuvDim += ( rst.getDouble("comDimTuv")*intTipMov);
           dblcomCasDim += ( rst.getDouble("comDimCas")*intTipMov);

        }
        rst.close();
        rst=null;

        vecDat.add(vecReg);
    }

     //INT_TBL_COLAUTDAT=INT_TBL_NOMBRE;
     java.util.Vector vecReg = new java.util.Vector();
     vecReg.add(INT_TBL_LIN, "");
     vecReg.add(INT_TBL_NOMBRE, "TOTAL.." );
     for(int i=INT_TBL_NOMBRE+1; i<= INT_TBL_COLAUTDAT; i++ ){
         vecReg.add(i, "0" );
     }

//     INT_TBL_COLAUTDAT++; vecReg.add(INT_TBL_COLAUTDAT, ""+ java.lang.Math.abs(dblcomCasTuv) );
//     INT_TBL_COLAUTDAT++; vecReg.add(INT_TBL_COLAUTDAT, ""+ java.lang.Math.abs(dblcomDimTuv) );
//     INT_TBL_COLAUTDAT++; vecReg.add(INT_TBL_COLAUTDAT, ""+ java.lang.Math.abs(dlbcomTuvCas) );
//     INT_TBL_COLAUTDAT++; vecReg.add(INT_TBL_COLAUTDAT, ""+ java.lang.Math.abs(dblcomDimCas) );
//     INT_TBL_COLAUTDAT++; vecReg.add(INT_TBL_COLAUTDAT, ""+ java.lang.Math.abs( dblcomTuvDim) );
//     INT_TBL_COLAUTDAT++; vecReg.add(INT_TBL_COLAUTDAT, ""+ java.lang.Math.abs(dblcomCasDim) );

     vecDat.add(vecReg);

        stm.close();
        stm=null;
    
   
       

    objTblMod2.setData(vecDat);
    tblDat.setModel(objTblMod2);


    con.close();
    con=null;
    //Asignar vectores al modelo.


    
     for(int i=INT_TBL_NOMBRE+1; i<= INT_TBL_COLAUTDAT; i++ ){
       dblcomCasTuv=0;
       
       for(int x=0; x< tblDat.getRowCount()-1; x++){

         if(x==0) intTipMov=1;
         if(x==1) intTipMov=-1;
         if(x==2) intTipMov=-1;
         if(x==3) intTipMov=1;

         dblcomCasTuv += Double.parseDouble( (tblDat.getValueAt(x, i)==null?"0":tblDat.getValueAt(x, i).toString()) )*intTipMov;

       }
       tblDat.setValueAt(""+dblcomCasTuv, 4, i);
     }



    vecDat.clear();

    butCon.setText("Consultar");
}
}
catch (java.sql.SQLException e)
{
blnRes=false;
objUti.mostrarMsgErr_F1(this, e);
}
catch (Exception e)
{
blnRes=false;
objUti.mostrarMsgErr_F1(this, e);
}
return blnRes;
}






    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podría presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaría informado en todo
     * momento de lo que ocurre. Si se desea hacer ésto es necesario utilizar ésta clase
     * ya que si no sólo se apreciaría los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
    

             if (!cargarDetReg( sqlConFil()))
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
         
            
            //Establecer el foco en el JTable sólo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }
    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_LIN:
                    strMsg="";
                    break;
               
                 
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
}