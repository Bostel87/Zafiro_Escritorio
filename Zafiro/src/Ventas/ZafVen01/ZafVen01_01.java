/*
 * ZafVen01_01.java
 *
 * Created on 9 de marzo de 2006, 9:12
 *
 * v0.1 
 */

package Ventas.ZafVen01;

import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
//import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
//import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
//import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
//import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;

/**
 *
 * @author  Javier Ayapata
 */
public class ZafVen01_01 extends javax.swing.JDialog {
    
    
    //Constantes: Columnas del JTable:
    final int INT_TBL_DAT_LIN=0;                        //Línea
    final int INT_TBL_DAT_COD_DOC=1;                    //Código del documento.
    final int INT_TBL_DAT_NUM_COT=2;                    //Numero de Cotizacion.
    final int INT_TBL_DAT_NUM_DOC=3;                    //Numero del Documento.
    final int INT_TBL_DAT_FEC_DOC=4;                    //Fecha del documento.
    final int INT_TBL_DAT_NOM_CLI=5;                    //Nombre del Cliente.
    final int INT_TBL_DAT_CAN_PRO=6;                    //Cantidad.
    final int INT_TBL_DAT_PRE_UNI=7;                    //Precio Unitario.
    final int INT_TBL_DAT_POR_DES=8;                    //Porcentaje de descuento.
    
    // final int INT_TBL_DAT_CHK_AUT=5;                    //Casilla: Autorizar.
   // final int INT_TBL_DAT_CHK_DEN=6;                    //Casilla: Denegar.
   // final int INT_TBL_DAT_OBS_AUT=7;                    //Observación del que autoriza.
    
    //Variable
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafColNumerada objColNum;
    private ZafTblMod objTblMod;
    private ZafTblEdi objTblEdi;                        //Editor: Editor del JTable.
    
    
  //    private ZafThreadGUI objThrGUI;
   // private ZafTblCelRenLbl objTblCelRenLbl;            //Render: Presentar JLabel en JTable.
   // private ZafTblCelRenChk objTblCelRenChk;            //Render: Presentar JCheckBox en JTable.
  //  private ZafTblCelEdiChk objTblCelEdiChk;            //Editor: JCheckBox en celda.
    private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
   // private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMenú en JTable.
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg;
    private Vector vecAux;
    private boolean blnCon;                             //true: Continua la ejecución del hilo.
    //Variables de la clase.
    private int intCodEmp;                              //Código de la empresa.
    private int intCodLoc;                              //Código del local.
    private int intCodTipDoc;                           //Código del tipo de documento.
    private int intCodMod;                              //Código del Movimiento.
    private String CodAlt;                               // Codigo Alternativo de Item
    private int CodCli;
    
    /** Creates new form ZafVen01_01 */
      
     public ZafVen01_01(java.awt.Frame parent, boolean modal, ZafParSis obj) {
         super(parent, modal);
        initComponents();
        
          //Inicializar objetos.
        objParSis=obj;
        if (!configurarFrm())
            exitForm();
       
        
        intCodMod=1;
       // CodAlt = "020-105I";
        
        
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        PanFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGen = new javax.swing.JPanel();
        panGenCab = new javax.swing.JPanel();
        panGenDet = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCan = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        PanFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("T\u00edtulo");
        PanFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panGen.setLayout(new java.awt.BorderLayout());

        panGenCab.setLayout(null);

        panGenCab.setPreferredSize(new java.awt.Dimension(0, 24));
        panGen.add(panGenCab, java.awt.BorderLayout.NORTH);

        panGenDet.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDat.setViewportView(tblDat);

        panGenDet.add(spnDat, java.awt.BorderLayout.CENTER);

        panGen.add(panGenDet, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panGen);

        PanFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCan.setText("Cancelar");
        butCan.setPreferredSize(new java.awt.Dimension(92, 25));
        butCan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCanActionPerformed(evt);
            }
        });

        panBot.add(butCan);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        PanFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(PanFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-400)/2, 600, 400);
    }//GEN-END:initComponents

    private void butCanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCanActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_butCanActionPerformed
   
    public void cargaTexto(String sql,int Codcli){
        strSQL = sql;
        CodCli = Codcli;
        cargarDetReg();
    }
    
       
    
    
    private void exitForm() 
    {
        dispose();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanFrm;
    private javax.swing.JButton butCan;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panGen;
    private javax.swing.JPanel panGenCab;
    private javax.swing.JPanel panGenDet;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables
 
   
    
    
       private boolean cargarDetReg()
    {
//        int intCodEmp, intCodLoc, intNumTotReg, i;
//        double dblSub, dblIva;
        boolean blnRes=true;
        try
        {
//            butCon.setText("Detener");
//            lblMsgSis.setText("Obteniendo datos...");
            
           // CodAlt = txtcodalt.getText();
            
            intCodEmp=objParSis.getCodigoEmpresa();
            intCodLoc=objParSis.getCodigoLocal();
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();

                //Armar la sentencia SQL.

                
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
//                lblMsgSis.setText("Cargando datos...");
//                pgrSis.setMinimum(0);
//                pgrSis.setMaximum(intNumTotReg);
//                pgrSis.setValue(0);
//                i=0;
                while (rst.next())
                {
//                    if (blnCon)
//                    {
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_COD_DOC,rst.getString("co_doc"));
                        vecReg.add(INT_TBL_DAT_NUM_COT,rst.getString("ne_numcot"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC,rst.getString("ne_numdoc"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC,rst.getString("fe_doc"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI,rst.getString("tx_nomcli"));
                        vecReg.add(INT_TBL_DAT_CAN_PRO,String.valueOf(objUti.redondear(rst.getString("can"),2)));
                        vecReg.add(INT_TBL_DAT_PRE_UNI,String.valueOf(objUti.redondear(rst.getString("nd_preuni"),2)));
                        
                        vecReg.add(INT_TBL_DAT_POR_DES,rst.getString("nd_pordes")+"%");
//                        vecReg.add(INT_TBL_DAT_CHK_AUT,null);
//                        vecReg.add(INT_TBL_DAT_CHK_DEN,null);
//                        vecReg.add(INT_TBL_DAT_OBS_AUT,rst.getString("tx_obs1"));
                        vecDat.add(vecReg);
//                        i++;
//                        pgrSis.setValue(i);
//                    }
//                    else
//                    {
//                        break;
//                    }
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
//                if (intNumTotReg==tblDat.getRowCount())
//                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros.");
//                else
//                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros pero sólo se procesaron " + tblDat.getRowCount() + ".");
//                pgrSis.setValue(0);
//                butCon.setText("Consultar");
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
       /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux);
            lblTit.setText(strAux);
            //Configurar objetos.
//            txtCodTipDoc.setVisible(false);
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(8);   //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_DOC,"Cód.Reg.");
            vecCab.add(INT_TBL_DAT_NUM_COT,"Núm.Cot.");
            vecCab.add(INT_TBL_DAT_NUM_DOC,"Núm.Doc.");
            vecCab.add(INT_TBL_DAT_FEC_DOC,"Fecha");
            vecCab.add(INT_TBL_DAT_NOM_CLI,"Cliente");
            vecCab.add(INT_TBL_DAT_CAN_PRO,"Cantidad");
            vecCab.add(INT_TBL_DAT_PRE_UNI,"Precio");
            vecCab.add(INT_TBL_DAT_POR_DES,"Desc");
            
            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
             tblDat.setRowSelectionAllowed(true);
             tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            //Configurar JTable: Establecer el menú de contexto.
//            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_NUM_COT).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(150);
            tcmAux.getColumn(INT_TBL_DAT_CAN_PRO).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_PRE_UNI).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_POR_DES).setPreferredWidth(50);
            
//////            tcmAux.getColumn(INT_TBL_DAT_BUT_EXP).setPreferredWidth(20);
//            tcmAux.getColumn(INT_TBL_DAT_CHK_AUT).setPreferredWidth(60);
//            tcmAux.getColumn(INT_TBL_DAT_CHK_DEN).setPreferredWidth(60);
//            tcmAux.getColumn(INT_TBL_DAT_OBS_AUT).setPreferredWidth(120);
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
////////            tcmAux.getColumn(INT_TBL_DAT_BUT_EXP).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Ocultar columnas del sistema.
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setMaxWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setMinWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setResizable(false);
            
//////////            tcmAux.getColumn(INT_TBL_DAT_DEL_REG).setWidth(0);
//////////            tcmAux.getColumn(INT_TBL_DAT_DEL_REG).setMaxWidth(0);
//////////            tcmAux.getColumn(INT_TBL_DAT_DEL_REG).setMinWidth(0);
//////////            tcmAux.getColumn(INT_TBL_DAT_DEL_REG).setPreferredWidth(0);
//////////            tcmAux.getColumn(INT_TBL_DAT_DEL_REG).setResizable(false);
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
       //     vecAux.add("" + INT_TBL_DAT_PRE_UNI);
//            vecAux.add("" + INT_TBL_DAT_CHK_AUT);
//            vecAux.add("" + INT_TBL_DAT_CHK_DEN);
//            vecAux.add("" + INT_TBL_DAT_OBS_AUT);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            //Configurar JTable: Editor de la tabla.
            objTblEdi=new ZafTblEdi(tblDat);
            //Configurar JTable: Renderizar celdas.
//            objTblCelRenChk=new ZafTblCelRenChk();
//            tcmAux.getColumn(INT_TBL_DAT_CHK_AUT).setCellRenderer(objTblCelRenChk);
//            tcmAux.getColumn(INT_TBL_DAT_CHK_DEN).setCellRenderer(objTblCelRenChk);
//            objTblCelRenChk=null;
            
            //Configurar JTable: Editor de celdas.
//            objTblCelEdiChk=new ZafTblCelEdiChk(tblDat);
//            tcmAux.getColumn(INT_TBL_DAT_CHK_AUT).setCellEditor(objTblCelEdiChk);
//            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
//                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
//                    if (objTblCelEdiChk.isChecked())
//                    {
////                        objTblMod.setValueAt(objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_VAL_PEN), tblDat.getSelectedRow(), INT_TBL_DAT_ABO_DOC);
//                    }
//                    else
//                    {
////                        objTblMod.setValueAt(null, tblDat.getSelectedRow(), INT_TBL_DAT_ABO_DOC);
//                    }
//                }
//            });
             objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
//            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    
    
      private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_LIN:
                    strMsg="";
                    break;
                    
                 case INT_TBL_DAT_NUM_COT:
                    strMsg="Número de cotización";
                    break;
                
                case INT_TBL_DAT_NUM_DOC:
                    strMsg="Número de documento";
                    break;
                    
                    
                case INT_TBL_DAT_FEC_DOC:
                    strMsg="Fecha del documento";
                    break;
                    
                case INT_TBL_DAT_NOM_CLI:
                    strMsg="Nombre del cliente";
                    break;    
                
                case INT_TBL_DAT_CAN_PRO:
                    strMsg="Cantidad ";
                    break;
                    
                case INT_TBL_DAT_PRE_UNI:
                    strMsg="Precio unitario";
                    break;    
                    
                 case INT_TBL_DAT_POR_DES:
                    strMsg="Porcentaje de descuento";
                    break; 

                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
}
