/*
 *  ZafVen01.java 
 *  "Cotizaciones de Venta"
 *  @author  jayapata 
 */
package Ventas.ZafVen01;

import GenOD.ZafGenOdPryTra;
import Librerias.ZafCfgSer.ZafCfgSer;
import Librerias.ZafCnfDoc.ZafCnfDoc;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafCorEle.ZafCorEle;
import Librerias.ZafDate.ZafDatePicker;
import Librerias.ZafGenFacAut.ZafCalDatFac;
import Librerias.ZafGenFacAut.ZafGenFacAut;
import Librerias.ZafGenFacAut.ZafModDatGenFac;
import Librerias.ZafGetDat.ZafDatItm;
import Librerias.ZafInventario.ZafInvItm;
import Librerias.ZafObtConCen.ZafObtConCen;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafPerUsr.ZafPerUsr;
import Librerias.ZafRptSis.ZafRptSis;
import Librerias.ZafTblUti.ZafTblCelEdiBut.ZafTblCelEdiBut;
import Librerias.ZafTblUti.ZafTblCelEdiButVco.ZafTblCelEdiButVco;
import Librerias.ZafTblUti.ZafTblCelEdiButVco2.ZafTblCelEdiButVco2;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt;
import Librerias.ZafTblUti.ZafTblCelEdiTxtCon.ZafTblCelEdiTxtCon;
import Librerias.ZafTblUti.ZafTblCelEdiTxtVco.ZafTblCelEdiTxtVco;
import Librerias.ZafTblUti.ZafTblCelEdiTxtVco2.ZafTblCelEdiTxtVco2;
import Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafUtil.UltDocPrint;
import Librerias.ZafUtil.ZafCtaCtb_dat;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafVenCon.ZafVenCon;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import Librerias.ZafPulFacEle.ZafPulFacEle;                                     //José Marín 6/Nov/2014
import Librerias.ZafResInv.ZafResInv;
import Librerias.ZafStkInv.ZafStkInv;
import ZafReglas.ZafGenGuiRem;
import ZafReglas.ZafGuiRemDAO;
import ZafReglas.ZafImp;
import ZafReglas.ZafVal;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.math.BigDecimal;
import java.math.RoundingMode;
import net.sf.jasperreports.engine.JasperPrintManager;


public class ZafVen01 extends JInternalFrame {
    //Declaración de Objetos 
    private int intNumFacElec=0;
    private mitoolbar objTooBar;
    private ZafParSis objZafParSis;
    private ZafPulFacEle objPulFacEle;                                          //  José Marín 6/Nov/2014
    private UltDocPrint objUltDocPrint;                                         // Para trabajar con la informacion de tipo de documento
    private ZafInvItm objInvItm;                                                // Para trabajar con la informacion de tipo de documento
    private ZafCorEle objCorEle;
    private ZafObtConCen objObtConCen;
    private ZafUtil objUti;
    private ZafDatePicker txtFecRec;
    private ZafAutPrg objAutPrg;
    private ZafTblCelEdiButVco objTblCelEdiButVcoItm, objTblCelEdiButVcoSolItm; //Editor: JButton en celda.
    private ZafTblCelEdiButVco2 objTblCelEdiBut2Itm;
    private ZafTblMod objTblMod, objTblModPag;
    private ZafTblCelRenLbl objTblCelRenLbl, objTblCelRenLbl2;                                    //Render: Presentar JLabel en JTable.
    private ZafTblCelRenBut objTblCelRenBut;                                    //Render: Presentar JButton en JTable.
    private ZafTblCelEdiTxt objTblCelEdiTxt, objTblCelEdiTxtCom, objTblCelEdiTxtComDescCom, objTblCelEdiTxtNomItm;  //Editor: JTextField en celda.
    private ZafTblCelEdiBut objTblCelEdiBut;                                    //Editor: JButton en celda.
    private ZafTblCelEdiTxtCon objTblCelEdiTxtCon;                              //Editor: JTextField de consulta en celda.
    private ZafTblCelRenChk objTblCelRenChk;                                    //Render: Presentar JButton en JTable.
    private ZafTblCelEdiChk objTblCelEdiChk;                                    //Editor: JButton en celda.
    private ZafTblModLis objTblModLis;
    private ZafMouMotAda objMouMotAda;
    private ZafTblCelEdiTxtVco objTblCelEdiTxtVcoPrv;                           //Editor: JTextField de consulta en celda.
    private ZafTblCelEdiTxtVco2 objTblCelEdiTxtVcoItm;                          //Editor: JTextField de consulta en celda.
    private ZafTblCelEdiTxtVco2 objTblCelEdiTxtVcoItmAlt;                       /*JoséMario 5/Ene/2015  */
    private java.util.Date datFecAux, datFecAuxGuia;                            //Auxiliar: Para almacenar fechas.
    private ArrayList arlRegAniMes, arlDatAniMes;
    private ZafTblPopMnu objTblPopMnu;
    private ZafThreadGUI objThrGUI;
    private ZafRptSis objRptSis, objRptSisVen, objRptSisCom;                   //Reportes del Sistema.
    private ZafVenCon objVenCon;
    private ZafVenCon objVenCon2;
    private ZafVenCon objVenConCli;
    private ZafVenCon objVenConVen;
    private ZafVenCon objVenConDirCli;
    private ZafVenCon objVenConDirCliGia;
    private ZafVenCon objVenConSolItm;
    private ZafVenCon objVenConForPag;
    private ZafVenCon objVenConTarCre;
    private ZafVenCon objVenConTipCre;
    private ZafVenCon objVenConMesCre;
    private ZafVenCon objVenConEmisor;
    //Declaración de Constantes
    private int _INT_ESQ_COM_VEN_COMP = 2;                                        // 1: Esquema Grupo   2: Esquema Empresa
    private String STRCODEMPTRANS = "";
    private String STRCODLOCTRANS = "";
    private String STRCODTIPTRANS = "";
    
    
    
    
    
    
    private String STRCODDOCTRANS = "";
    private String DIRECCION_REPORTE_FACTURA = "";                              //Direccion de Reporte de Factura Normal.
    private String DIRECCION_REPORTE_FACELE = "";                               //Direccion de Reporte de Factura Electrónica.
    private String DIRECCION_REPORTE_COMPRA = "";                               //Direccion de Reporte de Ordenes de Compra.
    private String DIRECCION_REPORTE_GUIAREM = "";
    private String DIRECCION_REPORTE_GUIAREMBOD2 = "";
    private String DIRECCION_REPORTE_GUIAREMBOD2_1 = "";
    //Declaración de Variables
    private String strCodLocSol = null, strCodTipDocSol = null, strCodDocSol = null, strNumCotSol = "";
    private String strImpDirectaOC = "compras";                                   //Nombre de la Impresora de Ordenes de Compra.
    private String strImpDirectaFac = "facturacion";                              //Nombre de la Impresora de Facturas de Venta.          
    private String sSQL, strSQL, strFiltro;                                      //EL filtro de la Consulta actual
    private String dateFecCot;                                                  //Variable que contiene la fecha de cotizacion.
    private String stIvaVen = "S";
    private String strFecSis, strFecSisBase;
    private String strFecModCot = "";
    private String strFecHisCot = "";
    private String GLO_strnomEmp = "";
    private String GLO_strdirEmp = "";
    private String GLO_strArreItm = "";
    private String strNomFuncValPre = "isPreUniVtaValForPagAut";
    private String strCodTipPerCli = "";
    private String strTipPer_emp = "";
    private String strarreglosop[] = new String[10];
    private String strCodPrv, strDesLarPrv;
    private String strCodCom, strDesLarCom;
    private String strBeforeValue, strAfterValue;
    private String strAux, strstReg_glo = "";
    private String strNomBodPtaPar = "";
    private String strDiaMaxFacven = "";
    private String strFecPagMov = "";
    private String strNomBodPrv = "";
    private String strStaVen = "";
    //IP Locales 
    private String strIpLocTuv = "";
    private String strIpLocDim = "";
    private String strIpLocQui = "";
    private String strIpLocMan = "";
    private String strIpLocSTD = "";
    private String strIpLocTuvInm = "";
    private String strIpLocCasInm = "";
    private String strIpLocDimInm = "";
    //Puerto Locales
    private int intPuertoLocTuv = 0;
    private int intPuertoLocDim = 0;
    private int intPuertoLocQui = 0;
    private int intPuertoLocMan = 0;
    private int intPuertoLocSTD = 0;
    private int intPuertoLocTuvInm = 0;
    private int intPuertoLocCasInm = 0;
    private int intPuertoLocDimInm = 0;
    //Calculos Cotización
    private double dblPorIva;                                                  //Porcentaje de Iva para la empresa enviado en ZafParSis
    private double dblTotalCot, dblIvaCot;
    private double dblSubtotalCot;
    private double dblBaseCero, dblBaseIva, dblValorPagar=0.00;
    /*--------------------------------------------------------------------------------*/
    private boolean blnIsComSol=false;// JoséMario 31/May/2016 Compensacion Solidaria 
    private double dblPorComSol=0.00, dblComSol; // JoséMario 31/May/2016 Compensacion Solidaria
    /*--------------------------------------------------------------------------------*/
    
    private double dblPesCfgCli = 0;
    private double dblPesCotizacion = 0;
    private double dblDiaGraCli = 0;
    private double Glo_dlbMaxDes = 0;
    private double Glo_dlbMarUti = 0;
    private double dblMonMaxVenCon = 0;
    private double bldivaEmp = 0;
    //Códigos de Motivos del documento para las retenciones
    private int intCodMotBien = 0;                                                //Bien
    private int intCodMotServ = 0;                                                //Servicio
    private int intCodMotTran = 0;                                                //Transporte
    //Otras Variables
    private int Glo_intCodSec = 0;
    private int intTipForPagCotizacion = 0;    /* JM: Forma de pago guardada en la cotizacion */
    private int intTipForPagCfgCli = 0; /* Forma de pago configurada en el cliente */
    private int intCodEmp = 0;                                                   //Almacena código de empresa
    private int intCodLoc = 0;                                                   //Almacena código de local
    private int intCodCot = 0;                                                    //Almacena código de la cotización
    private int intCodHis = 0;                                                    //Almacena código historico de la cotización.
    private int intValBus = 0;
    private int NumLineas = 0;
    private int intCodBodPre = 0;                                                 //Almacena codigo de bodega predeterminada.
    private int intNumDiaVal = 0;                                                 //Variable que define el numero de dias validos de la cotizacion...
    private int intTipMod = 0;                                                  //Varible que define si es una modificacion
    private int INTCODREGCEN = 0;
    private int INTVERCONCEN = 0;
    private int intNumMaxVenCon = 0;
//    private int INTPARSISCONF = 0;      JM: Comentado el 23/Julio/2019 
    private int intCodMenuOri = 0;
    private int intTipEmpSel = 0;
    private int intMosVenAut = 0;
    private int intCodTipPerEmp;
    private int INTGLONUMOC = 0;
    private int intNumDec = 2;                                                  //Numero de decimales a presentar
    private int int_Num_Dia_Val = 0;
    private boolean blnChangeData = false;
    private boolean BLN_ESTADO = true;
    private boolean blnHayCam = false;                                          //Detecta si se hizo cambios en el documento
    private boolean blnHayCam_glo = false;                                      //Detecta si se hizo cambios en el documento
    private boolean blnHayCam_glo_tbl = false;                                  //Detecta si se hizo cambios en el documento
    private boolean blnHayCam_Pag = false;                                      //Detecta si se hizo cambios en pagos
    private boolean blnLimpiar = true;                                          //Limpiar o no en el metodo clnTextos
    private boolean blnStkEst_Glo = true;
    private boolean blnEstFecVal = false;                                       //Estado de validacion de fecha
    private boolean blnEstEliFilDet = false;                                    //Estado de validacion de fecha
    private boolean blnActTodItmCot = false;
    private final int intarreglonum[] = new int[10];
    private final int intarreglodia[] = new int[10];
    private final int intCanArr[] = new int[1];
    private String strarritmotr[][] = null;
    private LisTextos objlisCambios;                                            //Instancia de clase que detecta cambios
    private Connection conCot;                                                  //Coneccion a la base donde se encuentra la cotizacion
    private Connection conCab = null;                                           //Coneccion a la base donde se encuentra la cotizacion
    private Statement stmCab = null;                                            //Statement para la cotizacion
    private Statement stmCotDet2;                                               //Statement para la cotizacion
    private Statement stmCot;                                                   //Statement para la cotizacion
    private ResultSet rstCotCab2 = null;                                        //Resultset que tendra los datos de la cabecera
    private ResultSet rstCotDet2;                                               //Resultset que tendra los datos del Detalle
    private ResultSet rstCab;                                                   //Resultset que tendra los datos de la cabecera
    private static final int INT_ARL_ANI_CIE = 0;
    private static final int INT_ARL_MES_CIE = 1;
    private static final int INT_ARL_TIP_CIE = 2;
    //Tabla de Detalle Cotización de Venta.
    private static final int INT_TBL_DIACRE = 1;                       //Codigo del item (codigo interno del sistema)
    private static final int INT_TBL_LINEA = 0;                       //Numero de linea de la tabla
    private static final int INT_TBL_ITMALT = 1;                       //Codigo del item alterno
//    private static final int INT_TBL_ITMALTCOD3LET=2;                  // JoséMario 4/Ene/2015 SOLICITADO POR AP Codigo de 3 letras.
   private static final int INT_TBL_BUTITM = 2;                       //Boton para buscar item
    private static final int INT_TBL_BUTSTK = 3;                       //Boton para ver el stock
    private static final int INT_TBL_BUTSOL = 4;                       //Boton para ver solicitud
    private static final int INT_TBL_DESITM = 5;                       //Descripcion del item
    private static final int INT_TBL_UNIDAD = 6;                       //Unidad de medida
    private static final int INT_TBL_CODBOD = 7;                       //Codigo de bodega
    private static final int INT_TBL_BUTBOD = 8;                       //Boton para buscar bodega
    private static final int INT_TBL_TRATOT = 9;                       //Transferencia total
    private static final int INT_TBL_CANMOV = 10;                      //Cantidad del movimiento (venta o compra)
    private static final int INT_TBL_PREUNI = 11;                      //Precio de Venta
    private static final int INT_TBL_PORDES = 12;                      //Porcentaje de descuento
    private static final int INT_TBL_BLNIVA = 13;                       //Boolean Iva
    private static final int INT_TBL_TOTAL = 14;                       //Total de la venta o compra del producto
    
    private static final int INT_TBL_PESTOT = 15;
    
    private static final int INT_TBL_CODITM = 16;                       //Codigo del item
    private static final int INT_TBL_ESTADO = 17;
    private static final int INT_TBL_IVATXT = 18;
    private static final int INT_TBL_PRE_COS = 19;                       //Columna que contiene  precio de compra
    private static final int INT_TBL_DESPRECOM = 20;                       //Columna que contiene  el descuento de precio de compra  nd_porDesPreCom
    private static final int INT_TBL_COD_PRO = 21;                       //Columna que contiene el codigo del proveedor
    private static final int INT_TBL_NOM_PRO = 22;                       //Columna que contiene el Nombre del proveedor
    private static final int INT_TBL_BUT_PRO = 23;                       //Columna que contiene para busqueda del proveedor
    private static final int INT_TBL_BLNPRE = 24;                       //Columna que contiene verdadero si es problema de precio
    private static final int INT_TBL_ITMALT2 = 25;                       //Columna que contiene verdadero si es problema de precio
    private static final int INT_TBL_ITMSER = 26;                       //Columna que contiene SI el item es de servicio S o N
    private static final int INT_TBL_ITMTER = 27;                       //Columna que contiene "S" (el item es terminal L ) "N"  no corresponde a la terminal L
    private static final int INT_TBL_CODBODPRV = 28;
    private static final int INT_TBL_NOMBODPRV = 29;
    private static final int INT_TBL_BUTBODPRV = 30;
    private static final int INT_TBL_MARUTI = 31;                       //Margen de utilidad
    private static final int INT_TBL_IEBODFIS = 32;                       //Estado que dice si ingresa/egresa fisicamente en bodega
    private static final int INT_TBL_MODNOMITM = 33;                       //Nombre del item modificado
    private static final int INT_TBL_COLOCREL = 34;
    private static final int INT_TBL_COTIPDOCREL = 35;
    private static final int INT_TBL_CODOCREL = 36;
    private static final int INT_TBL_COREGREL = 37;
    private static final int INT_TBL_COLOCRELSOL = 38;
    private static final int INT_TBL_COTIPDOCRELSOL = 39;
    private static final int INT_TBL_CODOCRELSOL = 40;
    private static final int INT_TBL_COREGRELSOL = 41;
    private static final int INT_TBL_COLOCRELOC = 42;
    private static final int INT_TBL_COTIPDOCRELOC = 43;
    private static final int INT_TBL_CODOCRELOC = 44;
    private static final int INT_TBL_COREGRELOC = 45;
    private static final int INT_TBL_PRELISITM = 46;
    private static final int INT_TBL_PRELISITM2 = 47;
    private static final int INT_TBL_CANORI = 48;                       //Cantidad de ventas origen
    private static final int INT_TBL_PREORI = 49;                       //Precio de venta origen
    private static final int INT_TBL_DESORI = 50;                       //Descuento de venta origen
    private static final int INT_TBL_DESVENMAX = 51;                       //Maximo descuento de ventas
    private static final int INT_TBL_NUMFILCOMPVEN = 52;                       //Sirve para saber que item se realizara compra venta entre compaÃ±ias
    private static final int INT_TBL_MAXDESCOM = 53;                       //Maximo descuento de compras
    private static final int INT_TBL_DATBODCOM = 54;                       //Dato de las bodegas donde se realiza la compra
    private static final int INT_TBL_CODREGCOT = 55;
    private static final int INT_TBL_CANVENRES = 56;
    private static final int INT_TBL_PREVTARES = 57;
    private static final int INT_TBL_PORDESRES = 58;
    private static final int INT_TBL_CODITMRES = 59;
    private static final int INT_TBL_TIPUNIMED = 60;                       //Tipo de Unidad de Medida E=Entero F=Fraccion.
    private static final int INT_TBL_BLOPREVTA = 61;                       //Bloquea que no se pueda cambiar precio de lista y porcentaje.
    private static final int INT_TBL_DESITMORI = 62;                      //Descripcion del item origen
    private static final int INT_TBL_CLIRETBOD = 63;                      //Item se retira en otra empresa
    private static final int INT_TBL_CANCLIRETBOD = 64;                      //Cantidad Item se retira en otra empresa
    private static final int INT_TBL_CODCTAEGR = 65;
    private static final int INT_TBL_PESITM = 66;
    

    private static final int INT_TBL_ESTRES = 67;                           // JM RESERVAS 30/MARZO/2017
    
    private static final int INT_TBL_COD_EMP_COT_RES = 68;                       // JM RESERVAS 25/JULIO/2017
    private static final int INT_TBL_COD_LOC_COT_RES = 69;                       // JM RESERVAS 25/JULIO/2017
    private static final int INT_TBL_COD_COT_RES = 70;                           // JM RESERVAS 25/JULIO/2017
    private static final int INT_TBL_COD_COT_REG_RES = 71;                           // JM RESERVAS 25/JULIO/2017
    private static final int INT_TBL_CAN_COT_RES = 72;                           // JM RESERVAS 25/JULIO/2017
    
    /* xxxxxxxxxxxxxxxxxxxxx */
    
    //Tabla Forma de Pago
    private static final int INT_TBL_PAGLIN = 0;                                  //Linea de pago
    private static final int INT_TBL_PAGCRE = 1;                                  //Dias de credito
    private static final int INT_TBL_PAGFEC = 2;                                  //Fecha de vencimiento
    private static final int INT_TBL_PAGRET = 3;                                  //Porcentaje de retencion`
    private static final int INT_TBL_PAGMON = 4;                                  //Monto de pago
    private static final int INT_TBL_PAGGRA = 5;                                  //Dias de gracias    
    private static final int INT_TBL_PAGCOD = 6;                                  //Codigo de retencion
    private static final int INT_TBL_PAGSOP = 7;                                  //Soporte de cheque
    private static final int INT_TBL_COMSOL = 8;                                  //Compensacion Solidaria
    
    
    private int intCodCliGrp = 0;
    private JTextArea txtcli_identificacion = new JTextArea();
    private JTextArea txtcli_telefono = new JTextArea();
    private JTextArea txtcli_ciudad = new JTextArea();
    private JTextArea txtEstNomCli = new JTextArea();
    private JTextArea txtsql = new JTextArea();
    private JTextField txtCodForPag = new JTextField();
    private JTextField txtCodForPag2 = new JTextField("");
    private Vector vecLoc, vecEmp;
    private JInternalFrame jfrThis;                                             //Hace referencia a this
    private Connection CONN_GLO, CONN_GLO2;
    private Vector vecForPag, vecForPag2;                                       //Vector que contiene el codigo del pago
    private StringBuffer stbLisItmSolMer = new StringBuffer();
    private StringBuffer stbDocRelEmpLoc;
    private StringBuffer stbDocRelEmpRem;
    private int intDocRelEmpLoc = 0;
    private JTextField txtNumCotAnt = new JTextField();
    private ZafPerUsr objPerUsr;
    private String strCodForPag = "", strDesLarForPag = "", strCodTarCre = "", strNomTarCre = "", strCodTipCre = "", strNomTipCre = "", strCodEmisor = "", strNomEmisor = "", strCodMesCre = "", strNomMesCre = "";
    private double dblPorDesTarCre = 0;
    private JTextField txtCodRedTarCre = new JTextField();
    private JTextField txtTipCre = new JTextField();
    private JTextField txtPorComTarCre = new JTextField();
    private JTextField txtPorDesVenTarCre = new JTextField();
    /* Facturación Electronica: JoséMario Marín 3/OCT/2014 */
    private static final int INT_COD_MNU_FAC = 4;                                 //Facturación Normal.
    private static final int INT_COD_MNU_FAC_SIG_MES = 1612;                      //Facturación siguiente mes.
    private static final int INT_COD_MNU_FAC_ELE = 3965;                          //Facturación Electrónica.   
    private int intCodTipDocFacEle = 0;                                           //Almacena TipoDoc con el cuál se guardará la factura.
    private int intCodLocInm;
    
    /*  <<< intCodTipDocFacEle >>>>
     *  Varible Global: Almacena Tipo de Documento a utilizar dependiendo del menu por el cual se ingrese a facturar.
     *  co_mnu=4    => Cotizacion de venta Normal -->> (intCodTipDocFacEle = 1 FACVEN); 
     *  co_mnu=3965 => Cotizacion de venta (Facturación Electronica)-->> (intCodTipDocFacEle = 228 FACVENE); 
     */

    
    /* Versión Cotizaciones de Venta */
    public final String strVer = "v 29.07";  
    private String strTit = "Mensaje del Sistema Zafiro";
    private final int intCodMnuRepVta = 14;
    private final int intCodMnuOrdCom = 45;
    private final int intTipRptVta = 1;
    private final int intTipRptOrdCom = 1;
    private boolean isLinux = false;
    //Se agrega para enviar al pulso que genera la autorizacion el string con los campos de la factura 
    private String strFacEle="";
    private boolean cliret=false;
    private String strODxConf="";
    private String strEmpComVen="";
    private String strEmpTransf="";  
    private boolean blnSolTraInv=false;
    private ZafStkInv objStkInv;
    private boolean blnBtnInmAct=false;
    private double dblIvaVen;
    private ArrayList arlDatSolTra;
    private GenOD.ZafGenOdPryTra objGenOD;
    private ZafGenFacAut objGenFacAut;
    private ZafCalDatFac objCalDatFac;
    private int intCodEmpOD,intCodLocOD,intCodTipDocOD,intCodDocOD; 
    
            
        
     /**
     * Función que permite obtener el nombre del campo que se desea actualizar
     * @param indiceNombreCampo 
     *          <HTML>
     *              <BR>  0: Actualiza en campo "nd_stkAct"
     *              <BR>  1: Actualiza en campo "nd_canPerIng"
     *              <BR>  2: Actualiza en campo "nd_canPerEgr"
     *              <BR>  3: Actualiza en campo "nd_canBodIng"
     *              <BR>  4: Actualiza en campo "nd_canBodEgr"
     *              <BR>  5: Actualiza en campo "nd_canDesIng"
     *              <BR>  6: Actualiza en campo "nd_canDesEgr"
     *              <BR>  7: Actualiza en campo "nd_canTra"
     *              <BR>  8: Actualiza en campo "nd_canRev"
     *              <BR>  9: Actualiza en campo "nd_canRes"
     *              <BR> 10: Actualiza en campo "nd_canDis"
     *          </HTML>
     * @return true: Si se pudo obtener el nombre del campo
     * <BR> false: Caso contrario
     */
    final int INT_ARL_STK_INV_STK_ACT=0;  // nd_stkAct
    final int INT_ARL_STK_INV_NOM_CAM_ACT=1;
    final int INT_ARL_STK_INV_NOM_CAM_ACT_2=2;
    final int INT_ARL_STK_INV_CAN_ING_BOD=3;  // nd_canBodIng --> transferencia afectar ingreso 
    final int INT_ARL_STK_INV_CAN_EGR_BOD=4;  // nd_canBodEgr --> transferencia afectar egreso
    final int INT_ARL_STK_INV_CAN_DES_ENT_BOD=5;
    final int INT_ARL_STK_INV_CAN_DES_ENT_CLI=6;
    final int INT_ARL_STK_INV_CAN_TRA=7;
    final int INT_ARL_STK_INV_CAN_REV=8;
    final int INT_ARL_STK_INV_CAN_RES=9;
    final int INT_ARL_STK_INV_CAN_DIS=10;  // nd_canDis
    final int INT_ARL_STK_INV_CAN_RES_VEN=11; // Cantidad en reserva de venta 
    
    /*Solo cuando se factura de Inmaconsa*/
    final int INT_ARL_COT_VEN_COD_EMP=0;
    final int INT_ARL_COT_VEN_COD_LOC=1;
    final int INT_ARL_COT_VEN_COD_TIP_DOC=2;
    final int INT_ARL_COT_VEN_COD_DOC=3;
    final int INT_ARL_COT_VEN_COD_BOD_EGR=4;

    private ZafCnfDoc objCnfDoc;
    private ZafCfgSer objCfgSer;
    private int intCodSer=16;// Impresiones mateo
    
    //** Variables contingencia Tony**//
    private boolean ctrl = false;
    private String keyHit = "";
    private boolean booFormatA4=false;
    private boolean booFormatA5=true;
    private StringBuffer sb=new StringBuffer("");
    private int intCont=0;
    
    private ZafResInv objResInv;  /* JM 7/Agosto/2017 */
    private ZafModDatGenFac objModDatGenFac;
    
    private ZafDatItm objDatItm;
    
    /**
     * Creates new form ZafVen01 (*1)
     */
    public ZafVen01(ZafParSis obj) {
        try {
            //Tony contingencia
            KeyboardFocusManager.getCurrentKeyboardFocusManager()
                    .addKeyEventDispatcher(new KeyEventDispatcher() {
                        @Override
                        public boolean dispatchKeyEvent(KeyEvent e) {

                            if (e.getKeyCode() == KeyEvent.VK_CONTROL) {
                                ctrl = true;
                            } else if (e.getKeyCode() == KeyEvent.VK_H) {
                                keyHit = KeyEvent.getKeyText(e.getKeyCode());
                            } else {
                                sb = new StringBuffer("");
                            }
                            if (ctrl) {
                                sb.append("ctrl ");
                            }
                            sb.append(keyHit);
                            //System.out.println(sb.toString());
                            ctrl = false;
                            keyHit = "";
                            if (intCont == 0) {
                                if (!sb.toString().startsWith("c")) {
                                    sb = new StringBuffer("");
                                }
                                if (sb.toString().contains("ctrl") && sb.toString().contains("H")) {
                                    intCont++;
                                    sb = new StringBuffer("");
                                    if (booFormatA5) {
                                        sb = new StringBuffer("");
                                        mostrarMsg("Se cambió a formato A4.");
                                        booFormatA4 = true;
                                        booFormatA5 = false;
                                        intCont = 0;
                                    } else {
                                        sb = new StringBuffer("");
                                        mostrarMsg("Se cambió a formato A5.");
                                        booFormatA4 = false;
                                        booFormatA5 = true;
                                        intCont = 0;
                                    }
                                }
                            } 
                            else {
                                sb = new StringBuffer("");
                            }

                            //System.out.println("Got key event!");
                            return false;
                        }
                    });//Tony contingencia
            
            this.objZafParSis = (ZafParSis) obj.clone();
            objUti = new ZafUtil();
            this.setTitle(objZafParSis.getNombreMenu() + strVer);
            jfrThis = this;
            objInvItm = new ZafInvItm(this, objZafParSis);
            objObtConCen = new ZafObtConCen(objZafParSis);
            objGenOD = new GenOD.ZafGenOdPryTra();
            objStkInv = new Librerias.ZafStkInv.ZafStkInv(objZafParSis);
            INTCODREGCEN = objObtConCen.intCodReg;
            objGenFacAut = new ZafGenFacAut(objZafParSis,this);
            objCnfDoc = new Librerias.ZafCnfDoc.ZafCnfDoc(objZafParSis,null);
            objResInv = new Librerias.ZafResInv.ZafResInv(objZafParSis, this);
            objModDatGenFac = new Librerias.ZafGenFacAut.ZafModDatGenFac(objZafParSis, jfrThis);
            objDatItm = new Librerias.ZafGetDat.ZafDatItm(objZafParSis, jfrThis);  /* JM: (19/Feb/2018) Modificacion obligatoria del nombre del item  */
            initComponents();
             
            txtMesGra.setVisible(false);
            abrirCon();                   //Realiza la conexión con la BD Global.

            /* JM 29/Jun/2018  */
            txtVenCod.setEditable(false);
            txtVenNom.setEditable(false);
            butVenCon.setEnabled(false);
            /* JM 29/Jun/2018  */
            
            
            
            
            /* Permisos de Usuario para Ver Botón "Facturar" */
            objPerUsr = new ZafPerUsr(this.objZafParSis);
            if (!(objZafParSis.getCodigoUsuario() == 1)) {
                if (objZafParSis.getCodigoMenu() == 4){ //Cotizaciones de Venta...
                    if (!objPerUsr.isOpcionEnabled(2502)) {
                        butMakeFactura.setVisible(false);
                    }
                }
                if (objZafParSis.getCodigoMenu() == 1612){//Cotizaciones de Venta (Siguiente Mes...)
                    if (!objPerUsr.isOpcionEnabled(2503)) {
                        butMakeFactura.setVisible(false);
                    }
                }
                if (objZafParSis.getCodigoMenu() == 3965){ //Cotizaciones de Venta(Facturación Electrónica...)
                    if (!objPerUsr.isOpcionEnabled(3975)) {
                        butMakeFactura.setVisible(false);
                    }
                }
            }

 
            butCopyInmaconsa.setVisible(true);
 
            
            /* Tipos de Documentos "Facturación Electrónica": José Marín M 3/Oct/2014 */
            if (objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC || objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC_SIG_MES) {
                intCodTipDocFacEle = 1;
            } else if (objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC_ELE) //Cotizaciones de Venta (Facturación Electrónica)
            {
                intCodTipDocFacEle = 228;
            }

            arlDatAniMes = new ArrayList();
            txtNomCliVar.setVisible(false);
            intCodEmp = objZafParSis.getCodigoEmpresa();
            intCodLoc = objZafParSis.getCodigoLocal();
            objAutPrg = new ZafAutPrg(this);
           
            
            objCfgSer = new ZafCfgSer(objZafParSis);
            objCfgSer.cargaDatosIpHostServicios(0, intCodSer); 

            objUltDocPrint = new UltDocPrint(objZafParSis);
            objRptSis = new ZafRptSis(JOptionPane.getFrameForComponent(this), true, objZafParSis);
            objRptSisVen = new ZafRptSis(JOptionPane.getFrameForComponent(this), true, objZafParSis);
            objRptSisCom = new ZafRptSis(JOptionPane.getFrameForComponent(this), true, objZafParSis);

            tblDat.addKeyListener(new KeyAdapter() {
                @Override
                public void keyPressed(KeyEvent evt) {
                    if (KeyEvent.VK_F8 == evt.getKeyCode()) {
                        int a = tblDat.getSelectedRow();
                        if (tblDat.getValueAt(a, INT_TBL_ITMALT) != null) {
                            String ItmALt = tblDat.getValueAt(a, INT_TBL_CODITM).toString();
                            int CodCli;
                            if (txtCliCod.getText().equalsIgnoreCase("")) {
                                CodCli = 0;
                            } else {
                                CodCli = Integer.parseInt(txtCliCod.getText());
                            }
                            LlamrVentana(ItmALt, CodCli);
                        }
                    }
                }
            });

            strFecSis = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), objZafParSis.getFormatoFechaHoraBaseDatos());
            strFecSisBase = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), objZafParSis.getFormatoFechaBaseDatos());

            txtFecDoc = new ZafDatePicker(((JFrame) jfrThis.getParent()), "d/m/y");
            txtFecDoc.setPreferredSize(new Dimension(70, 20));
            txtFecDoc.setText(strFecSis);
            panCotGenNor.add(txtFecDoc);
            txtFecDoc.setBounds(100, 44, 100, 20);

            txtFecRec = new ZafDatePicker(((JFrame) jfrThis.getParent()), "d/m/y");
            txtFecRec.setPreferredSize(new Dimension(70, 20));
            txtFecRec.setText("");
            panCotGenNor.add(txtFecRec);
            txtFecRec.setBounds(304, 44, 100, 20);

            datFecAux = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos());
            java.util.Date dateObj = datFecAux;
            Calendar calObj = Calendar.getInstance();
            calObj.setTime(dateObj);
            txtFecDoc.setText(calObj.get(Calendar.DAY_OF_MONTH), calObj.get(Calendar.MONTH) + 1, calObj.get(Calendar.YEAR));

            //Nombres de los tabs
            tabCotCom.setTitleAt(0, "General");
            tabCotCom.setTitleAt(1, "Forma de pago");
            objTooBar = new mitoolbar(this);

            vecForPag = new Vector();
            vecForPag2 = new Vector();
            txtNomEmiTar.setBackground(objZafParSis.getColorCamposSistema());
            txtNomEmiTar.setEditable(true);
            /*JoséMario 19/Oct/2015*/
            txtPesKgr.setBackground(objZafParSis.getColorCamposSistema());
            txtCliDirGui.setBackground(objZafParSis.getColorCamposObligatorios());
            
            /* JM: Agregado para hacer obligatorio el numero de pedido */
            tx_numped.setBackground(objZafParSis.getColorCamposObligatorios()); 
            tx_numped.setText("0");
            this.getContentPane().add(objTooBar, "South");
            pack();

            //<editor-fold defaultstate="collapsed" desc="/* Verifica si equipo es Linux o Windows. */ ">
            // if(System.getProperty("os.name").equals("Linux"))
            // {
            // DIRECCION_REPORTE2="//zafiro//reportes_impresos//RptFacVta.jrxml";
            // DIRECCION_REPORTE_OC="//zafiro//reportes_impresos//RptOrdComAut.jrxml";
            // DIRECCION_REPORTE_GUIAREM="//zafiro//reportes_impresos//RptGuiRemAut.jrxml";
            // }
            // else 
            // {
            // DIRECCION_REPORTE2="C://zafiro//reportes_impresos//RptFacVta.jrxml";
            // DIRECCION_REPORTE_OC="C://zafiro//reportes_impresos//RptOrdComAut.jrxml";
            // DIRECCION_REPORTE_GUIAREM="C://zafiro//reportes_impresos//RptGuiRemAut.jrxml";
            // }
            //</editor-fold>

            /* Dando tamano preferido para Scroll de txaObs1 para que al hacer grande la pantalla
             NO se altere el formulario y se vea bonito  */
            spnObs1.setPreferredSize(new Dimension(350, 30));
            objUti.verDecimalesEnTabla(tblPag, 4, intNumDec);
            addListenerCambio();
            ZafColNumerada zafColNumerada = new ZafColNumerada(tblPag, 0);
            tblPag.getModel().addTableModelListener(new LisCambioTbl());
            setRutaReporteAutomaticos();                                        //Se Asigna las Rutas de los Reportes a Usarse.                
            cargarTipEmp();
            /* JoseMario 13/Ene/2016 Comentado   cargarIpPuertoGuiaEmp();  */
            getObtenerDiaValCot();
//            cargarTipParSis();    JM: Comentado el 23/Julio/2019
            FormaRetencion(CONN_GLO);
            
            rdoNA.setEnabled(false);
            rdoInicio.setEnabled(false);
            rdoFinal.setEnabled(false);
            intCodMenuOri = objZafParSis.getCodigoMenu();
                                          
            objUti.desactivarCom(this);
        } catch (CloneNotSupportedException e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }

    /**
     * Creates new form ZafVen01 (*2)
     */
    public ZafVen01(ZafParSis obj, String codEmp, String codLoc, String codCot) {
        this(obj);
        intCodEmp = Integer.parseInt(codEmp);                                   //Almacena código de empresa
        intCodLoc = Integer.parseInt(codLoc);                                   //Almacena código de local
        intCodCot = Integer.parseInt(codCot);                                   //Almacena código de la cotización
        intValBus = 6;
        
        txtCot.setText(String.valueOf(intCodCot));
        
        this.getContentPane().remove(objTooBar);

        /* Tipos de Documentos "Facturación Electrónica": José Marín M 3/Oct/2014 */
        if (objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC || objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC_SIG_MES) {
            intCodTipDocFacEle = 1;
        } else if (objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC_ELE) //Cotizaciones de Venta (Facturación Electrónica)
        {
            intCodTipDocFacEle = 228;
        }

        /* Botón Copiar Inmaconsa: JoseMarin 6/Jun/2016 */
//        if (objZafParSis.getCodigoEmpresa() == 2 && objZafParSis.getCodigoLocal() == 4)   
//        {
//            butCopyInmaconsa.setVisible(false);
//        } 
//        else 
//        {
            butCopyInmaconsa.setVisible(true);
//        }
        
 
        
        rdoNA.setEnabled(false);
        rdoInicio.setEnabled(false);
        rdoFinal.setEnabled(false);
            
        /*JoséMario 19/Oct/2015*/
        txtPesKgr.setBackground(objZafParSis.getColorCamposSistema());
        txtCliDirGui.setBackground(objZafParSis.getColorCamposObligatorios());
        
        /* JM: Agregado para hacer obligatorio el numero de pedido */
        tx_numped.setBackground(objZafParSis.getColorCamposObligatorios()); 
        tx_numped.setText("0");
        /* JM 29/Jun/2018  */
        txtVenCod.setEditable(false);
        txtVenNom.setEditable(false);
        butVenCon.setEnabled(false);
        /* JM 29/Jun/2018  */
            
             
    }

    

    /**
     * Creates new form ZafVen01 (*3)
     */
    public ZafVen01(Librerias.ZafParSis.ZafParSis objZafParSis, ArrayList arrayDat, int intCodCoti, int intTipo) {
        this(objZafParSis);
        int intVal = 0;

        if (intTipo == 0) {
            for (int k = 0; k < arrayDat.size(); k++) {
                if (intVal > 0) {
                    stbLisItmSolMer.append(" UNION ALL ");
                }
                stbLisItmSolMer.append("SELECT " + objUti.getIntValueAt(arrayDat, k, 0) + " AS coemp ," + objUti.getIntValueAt(arrayDat, k, 1) + " as coloc,"
                        + " " + objUti.getIntValueAt(arrayDat, k, 2) + " as cotipdoc, " + objUti.getIntValueAt(arrayDat, k, 3) + " as codoc, "
                        + " " + objUti.getIntValueAt(arrayDat, k, 4) + " as coreg ");
                intVal = 1;
            }
            intValBus = 3;
        } else {
            intCodCot = intCodCoti;
            intValBus = 4;
        }
        /* Tipos de Documentos "Facturación Electrónica": José Marín M 3/Oct/2014 */
        if (objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC || objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC_SIG_MES) {
            intCodTipDocFacEle = 1;
        } else if (objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC_ELE) //Cotizaciones de Venta (Facturación Electrónica)
        {
            intCodTipDocFacEle = 228;
        }
        /*JoséMario 19/Oct/2015*/
            txtPesKgr.setBackground(objZafParSis.getColorCamposSistema());
            txtCliDirGui.setBackground(objZafParSis.getColorCamposObligatorios());
            
            /* JM: Agregado para hacer obligatorio el numero de pedido */
            tx_numped.setBackground(objZafParSis.getColorCamposObligatorios()); 
            tx_numped.setText("0");
//        if(objZafParSis.getCodigoUsuario()==1){
//            btnReservas.setVisible(true);
//        }else{
//            btnReservas.setVisible(false);
//        }

        /* JM 29/Jun/2018  */
        txtVenCod.setEditable(false);
        txtVenNom.setEditable(false);
        butVenCon.setEnabled(false);
        /* JM 29/Jun/2018  */
            
    }

    /* Refresco Datos */
    public void __refrescaDatos(StringBuffer stbSolMer) {
        try {
            abrirCon();
            int intGenPag = 0;
            if (CONN_GLO != null) {
                /* Facturación Electronica: José Marín M. 3/Oct/2014 */
                String strAux = ",CASE "
                        + "WHEN ( (trim(SUBSTR (UPPER(tx_codalt), length(tx_codalt) ,1))  IN ("
                        + " SELECT UPPER(trim(tx_cad))  FROM tbm_reginv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                        + " AND co_tipdoc=" + intCodTipDocFacEle + " AND co_usr=" + objZafParSis.getCodigoUsuario() + " AND st_reg='A' AND st_tipmov='C' "
                        + " ))) THEN 'S' "
                        + ""
                        + " WHEN ( (trim(SUBSTR (UPPER(tx_codalt), length(tx_codalt) ,1))  IN ("
                        + " SELECT UPPER(trim(tx_cad))  FROM tbm_reginv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                        + " AND co_tipdoc=" + intCodTipDocFacEle + " AND co_usr=" + objZafParSis.getCodigoUsuario() + " AND st_reg='A' AND st_tipmov='I' "
                        + " ))) THEN 'I' "
                        + " ELSE 'N' END  as isterL ";

                String strAux2 = " , CASE WHEN ( (trim(SUBSTR (UPPER(a.tx_codalt), length(a.tx_codalt) ,1)) IN ( "
                        + " SELECT  UPPER(trim(a1.tx_cad))  FROM tbr_bodloc as a "
                        + " inner join tbm_reginvmernuningegrfisbod as a1 ON(a1.co_emp=a.co_Emp and a1.co_bod=a.co_bod) "
                        + " WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and a1.st_reg='A' and  a.st_reg='P' ))) "
                        + " THEN 'S' ELSE 'N' END AS proconf  ";

                /* José Marín M 17/Dic/2013 */
                sSQL = "select coloc, cotipdoc, codoc, coreg, "
                        + " cli.co_cli, cli.tx_nom as nomcli,  CASE WHEN cotCab.tx_dirCliFac IS NULL THEN cli.tx_dir ELSE cotCab.tx_dirCliFac END as tx_dir /* DIRECCION FACTURA cli.tx_dir */ , "
                        + " cotCab.tx_dirCliGuiRem /*GUIA DE REMISION*/ ,"
                        + " cli.nd_maxdes, cli.nd_maruti, cli.tx_tel, cli.tx_ide, ciu.tx_desLar, cli.co_ven, ven.tx_nom as vendedor,"
                        + " "
                        + " cli.co_tipper,  b.ne_tipforpag,  b.nd_pes, cli.ne_diagra, cli.co_forpag , b.tx_des, cli.st_ivaven, cli.st_peringnomclicotven , "
                        + " a.co_itm, a.tx_codalt, a.tx_codalt as tx_codalt2, a.tx_nomitm, var.tx_descor, x1.co_bod, (x1.nd_cantotegr-(x1.nd_cantoting+x1.nd_cannuning)) as nd_can, "
                        + " a.nd_prevta1 as nd_preuni, a.st_ivaven, 0 as nd_pordes, 0 as nd_precom, null as co_prv,0 as nd_pordesprecom, 'N' as st_traauttot, "
                        + " a.st_permodnomitmven, a.st_ser, null as tx_nom , a.nd_maruti as marutiitm, var.tx_tipunimed, a.nd_pesItmKgr  "
                        + strAux + " "
                        + strAux2 + " "
                        + " , CASE WHEN inv.tx_codAlt2 IS NULL THEN '' ELSE inv.tx_codAlt2 END as tx_codLet"
                        
                        + " from ( " + stbSolMer + " "
                        + /*" SELECT 1 AS coemp, 4 as coloc, 149 as cotipdoc, 2 as codoc, 1 as coreg " + " union all " + " SELECT 1 AS coemp, 4 as coloc, 149 as cotipdoc, 2 as codoc, 2 as coreg " +*/ " ) as x "
                        + " inner join tbm_detsolsaltemmer as x1 on ( "
                        + "  x1.co_emp=x.coemp and x1.co_loc=x.coloc and  x1.co_tipdoc=x.cotipdoc and x1.co_doc=x.codoc and x1.co_reg=x.coreg ) "
                        + " inner join tbm_cabsolsaltemmer as x2 on ( "
                        + " x2.co_emp=x.coemp and x2.co_loc=x.coloc and  x2.co_tipdoc=x.cotipdoc and x2.co_doc=x.codoc ) "
                        + " left join tbm_cli as cli on (cli.co_emp=x2.co_emp and cli.co_cli=x2.co_cli) "
                        + " LEFT JOIN tbm_Ciu as ciu on(ciu.co_Ciu=cli.co_ciu) "
                        + " LEFT JOIN tbm_usr as ven on (ven.co_usr = cli.co_ven) "
                        + " left join tbm_cabforpag as b on (b.co_emp=cli.co_emp and b.co_forpag=cli.co_forpag) "
                        + " inner join tbm_inv as a on(a.co_emp=x1.co_emp and a.co_itm=x1.co_itm) "
                        + " LEFT outer join tbm_var as var on (var.co_reg = a.co_uni) ";

                java.sql.Statement stmCab = CONN_GLO.createStatement();
                //System.out.println("RefrescarDatos.Cabecera: " + sSQL);
                java.sql.ResultSet rst = stmCab.executeQuery(sSQL);
                double dblCan = 0, dblPre = 0, dblPorDes = 0, dblValDes = 0, dblTotal = 0;
                java.sql.Statement stmAux;
                stmAux = CONN_GLO.createStatement();
                String strUnidad = "", strCodAlt = "", strSer = "", strTer = "";
                Vector vecData = new Vector();
                int inttratot = 0;
                for (int i = 0; rst.next(); i++) {
                    if (i == 0) {
                        if (!(rst.getString("co_cli") == null)) {
                            intGenPag = 1;
                            //intCodCliGrp = objUti.getIntValueAt(arlDatCotVen, intIndiceCotVen, INT_CON_COT_VEN_COD_CLI);
                            intCodCliGrp = rst.getInt("co_cli");
                            txtCliCod.setText(rst.getString("co_cli"));
                            txtCliNom.setText(rst.getString("nomcli"));
                            txtCliDir.setText(rst.getString("tx_dir"));
                            txtCliDirGui.setText(rst.getString("tx_dirCliGuiRem")); //José Marín M 17/Dic/2013
                            Glo_dlbMaxDes = Double.parseDouble(rst.getString("nd_maxdes"));
                            Glo_dlbMarUti = Double.parseDouble(rst.getString("nd_maruti"));
                            txtcli_telefono.setText(rst.getString("tx_tel"));
                            txtcli_identificacion.setText(rst.getString("tx_ide"));
                            txtcli_ciudad.setText(rst.getString("tx_desLar"));
//                            txtVenCod.setText(rst.getString("co_ven"));
//                            txtVenNom.setText(rst.getString("vendedor"));
                            getVendedorAsignado(objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(),rst.getInt("co_cli") );
                            strCodTipPerCli = rst.getString("co_tipper");
                            intTipForPagCfgCli = Integer.parseInt(rst.getString("ne_tipforpag"));
                            
//                            dblPesCfgCli = Double.parseDouble(rst.getString("nd_pes"));
                            if(rst.getString("nd_pes")==null || rst.getString("nd_pes").equals("")){
                                dblPesCfgCli = 50000.00;
                            }
                            else{
                                dblPesCfgCli = rst.getDouble("nd_pes");  // JM SOLUCION xD
                            }
                            
                            dblDiaGraCli = Double.parseDouble(rst.getString("ne_diagra"));
                            txtCodForPag.setText(rst.getString("co_forpag"));
                            //txtCodForPag2.setText( rst.getString("co_forpag") );
                            txtNomForPag.setText(rst.getString("tx_des"));
                            stIvaVen = rst.getString("st_ivaven");
                            txtEstNomCli.setText(rst.getString("st_peringnomclicotven"));
                            intTipForPagCotizacion = intTipForPagCfgCli;
                            txtCodigoFormaPago.setText(txtCodForPag.getText());
                            dblPesCotizacion = dblPesCfgCli;
                            txtNomCliVar.setVisible((rst.getString("st_peringnomclicotven").equals("S") ? true : false));
                        }
                    }
                    java.util.Vector vecReg = new java.util.Vector();
                    strCodAlt = (rst.getString("tx_codalt") == null ? "" : rst.getString("tx_codalt"));
                    strUnidad = (rst.getString("tx_descor") == null ? "" : rst.getString("tx_descor"));
                    strSer = (rst.getString("st_ser") == null ? "" : rst.getString("st_ser"));
                    strTer = (rst.getString("isterl") == null ? "" : rst.getString("isterl"));
                    if (inttratot == 0) {
                        if (rst.getString("st_traauttot").equals("S")) {
                            // chkSolTraTot.setSelected(true);
                            masInformacion(true);
                            inttratot = 1;
                        }
                    }

                    vecReg.add(INT_TBL_LINEA, "");
                    vecReg.add(INT_TBL_ITMALT, strCodAlt);
//                    vecReg.add(INT_TBL_ITMALTCOD3LET,rst.getString("tx_codLet"));
                    vecReg.add(INT_TBL_BUTITM, "");
                    vecReg.add(INT_TBL_BUTSTK, "");
                    vecReg.add(INT_TBL_BUTSOL, "");
                    vecReg.add(INT_TBL_DESITM, rst.getString("tx_nomitm"));
                    vecReg.add(INT_TBL_UNIDAD, strUnidad);
                    vecReg.add(INT_TBL_CODBOD, new Integer(rst.getInt("co_bod")));
                    vecReg.add(INT_TBL_BUTBOD, "");
                    vecReg.add(INT_TBL_TRATOT, (rst.getString("st_traauttot").equals("S")) ? true : false);
                    vecReg.add(INT_TBL_CANMOV, new Double(rst.getDouble("nd_can")));
                    vecReg.add(INT_TBL_PREUNI, new Double(rst.getDouble("nd_preuni")));
                    vecReg.add(INT_TBL_PORDES, new Double(rst.getDouble("nd_pordes")));
                    String strIva = rst.getString("st_ivaven");
                    Boolean blnIva;
                    if (stIvaVen.equals("N")) {
                        blnIva = false;
                    } else {
                        blnIva = (strIva.equals("S")) ? true : false;
                    }

                    vecReg.add(INT_TBL_BLNIVA, blnIva);
                    dblCan = rst.getDouble("nd_can");
                    dblPre = rst.getDouble("nd_preuni");
                    dblPorDes = rst.getDouble("nd_pordes");
                    dblValDes = ((dblCan * dblPre) == 0) ? 0 : ((dblCan * dblPre) * (dblPorDes / 100));
                    dblTotal = (dblCan * dblPre) - dblValDes;
                    dblTotal = objUti.redondear(dblTotal, intNumDec);
                    System.out.println("__refrescaDatos dblValDes // " + dblValDes);
                    System.out.println("__refrescaDatos dblPre // " + dblPre);
                    System.out.println("__refrescaDatos dblTotal // " + dblTotal);

                    vecReg.add(INT_TBL_TOTAL, new Double(dblTotal));
                    vecReg.add(INT_TBL_PESTOT, "" /*rst.getString("nd_pesTot")*/);
                    vecReg.add(INT_TBL_CODITM, rst.getString("co_itm"));
                    vecReg.add(INT_TBL_ESTADO, "E");
                    vecReg.add(INT_TBL_IVATXT, strIva);
                    vecReg.add(INT_TBL_PRE_COS, new Double(rst.getDouble("nd_precom")));            //Columna que contiene  precio de compra
                    vecReg.add(INT_TBL_DESPRECOM, new Double(rst.getDouble("nd_pordesprecom")));
                    vecReg.add(INT_TBL_COD_PRO, rst.getString("co_prv"));                           //Columna que contiene el codigo del proveedor

                    strCodAlt = (rst.getString("tx_nom") == null ? "" : rst.getString("tx_nom"));
                    vecReg.add(INT_TBL_NOM_PRO, strCodAlt);                                         //Columna que contiene el Nombre del proveedor
                    vecReg.add(INT_TBL_BUT_PRO, "");                                                  //Columna que contiene para busqueda del proveedor
                    vecReg.add(INT_TBL_BLNPRE, "");
                    vecReg.add(INT_TBL_ITMALT2, rst.getString("tx_codLet"));// JoseMario 17/Junio/2016
                    vecReg.add(INT_TBL_ITMSER, strSer);
                    vecReg.add(INT_TBL_ITMTER, strTer);

                    vecReg.add(INT_TBL_CODBODPRV, "");
                    vecReg.add(INT_TBL_NOMBODPRV, "");
                    vecReg.add(INT_TBL_BUTBODPRV, "");

                    vecReg.add(INT_TBL_MARUTI, rst.getString("marutiitm"));
                    vecReg.add(INT_TBL_IEBODFIS, rst.getString("proconf"));
                    vecReg.add(INT_TBL_MODNOMITM, rst.getString("st_permodnomitmven"));
                    vecReg.add(INT_TBL_COLOCREL, rst.getString("coloc"));
                    vecReg.add(INT_TBL_COTIPDOCREL, rst.getString("cotipdoc"));
                    vecReg.add(INT_TBL_CODOCREL, rst.getString("codoc"));
                    vecReg.add(INT_TBL_COREGREL, rst.getString("coreg"));

                    vecReg.add(INT_TBL_COLOCRELSOL, null);
                    vecReg.add(INT_TBL_COTIPDOCRELSOL, null);
                    vecReg.add(INT_TBL_CODOCRELSOL, null);
                    vecReg.add(INT_TBL_COREGRELSOL, null);
                    vecReg.add(INT_TBL_COLOCRELOC, null);
                    vecReg.add(INT_TBL_COTIPDOCRELOC, null);
                    vecReg.add(INT_TBL_CODOCRELOC, null);
                    vecReg.add(INT_TBL_COREGRELOC, null);
                    vecReg.add(INT_TBL_PRELISITM, null);

                    vecReg.add(INT_TBL_PRELISITM2, null);
                    vecReg.add(INT_TBL_CANORI, null);
                    vecReg.add(INT_TBL_PREORI, null);
                    vecReg.add(INT_TBL_DESORI, null);
                    vecReg.add(INT_TBL_DESVENMAX, null);
                    vecReg.add(INT_TBL_NUMFILCOMPVEN, null);
                    vecReg.add(INT_TBL_MAXDESCOM, null);
                    vecReg.add(INT_TBL_DATBODCOM, null);
                    vecReg.add(INT_TBL_CODREGCOT, null);

                    vecReg.add(INT_TBL_CANVENRES, new Double(rst.getDouble("nd_can")));
                    vecReg.add(INT_TBL_PREVTARES, new Double(rst.getDouble("nd_preuni")));
                    vecReg.add(INT_TBL_PORDESRES, new Double(rst.getDouble("nd_pordes")));
                    vecReg.add(INT_TBL_CODITMRES, rst.getString("co_itm"));
                    vecReg.add(INT_TBL_TIPUNIMED, rst.getString("tx_tipunimed"));

                    vecReg.add(INT_TBL_CLIRETBOD, null);
                    vecReg.add(INT_TBL_CANCLIRETBOD, null);

                    vecReg.add(INT_TBL_CODCTAEGR, null);
                    vecReg.add(INT_TBL_PESITM, rst.getString("nd_pesItmKgr"));  /* José Marín - 21/Oct/2015 */
                    /* JM Reservas 1/Agosto/2017 */
                    vecReg.add(INT_TBL_ESTRES, null);  /* JM reservas */
                    vecReg.add(INT_TBL_COD_EMP_COT_RES,null); 
                    vecReg.add(INT_TBL_COD_LOC_COT_RES,null); 
                    vecReg.add(INT_TBL_COD_COT_RES,null); 
                    vecReg.add(INT_TBL_COD_COT_REG_RES,null);
                    
                    vecReg.add(INT_TBL_CAN_COT_RES,null); 
                    /* JM Reservas 1/Agosto/2017 */
                    vecData.add(vecReg);

                }
                objTblMod.setData(vecData);
                tblDat.setModel(objTblMod);
                //stmAux.close();
                rst.close();
                calculaTot();
                lblCotNumDes.setText("Cotización No. " + txtCot.getText() + " (" + txtCliNom.getText() + ") ");
                lblIva.setText("IVA " + dblPorIva + "%");

                if (intGenPag == 1) {
                    CalculoPago();
                    calculaPag();
                    calcularTotPesDoc();   /* José Marín - 21/Oct/2015 */
                }

  
                stmAux.close();
                stmCab.close();
            }
            CerrarCon();
            objTblMod.setDataModelChanged(false);
            blnHayCam = false;
        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
    }

    /**
     * Creates new form ZafVen01 (*4)
     */
    public ZafVen01(Librerias.ZafParSis.ZafParSis objZafParSis, Integer CodEmp, Integer CodLoc, Integer CodCot) {
        this(objZafParSis);
        intCodEmp = CodEmp.intValue();
        intCodLoc = CodLoc.intValue();
        intCodCot = CodCot.intValue();
        intValBus = 6;
        intTipEmpSel = 1;
        /*JoséMario 19/Oct/2015*/
        txtPesKgr.setBackground(objZafParSis.getColorCamposSistema());
        txtCliDirGui.setBackground(objZafParSis.getColorCamposObligatorios());
        
        /* JM: Agregado para hacer obligatorio el numero de pedido */
        tx_numped.setBackground(objZafParSis.getColorCamposObligatorios()); 
             
        /* Tipos de Documentos "Facturación Electrónica": José Marín M 3/Oct/2014 */
        if (objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC || objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC_SIG_MES) {
            intCodTipDocFacEle = 1;
        } else if (objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC_ELE) //Cotizaciones de Venta (Facturación Electrónica)
        {
            intCodTipDocFacEle = 228;
        }

 
        butCopyInmaconsa.setVisible(true);
 
        rdoNA.setEnabled(false);
        rdoInicio.setEnabled(false);
        rdoFinal.setEnabled(false);
        this.setLocation(5, 20);
         
    }

    /**
     * Creates new form ZafVen01 (*5)
     */
    public ZafVen01(Librerias.ZafParSis.ZafParSis objZafParSis, Integer CodEmp, Integer CodLoc, Integer CodCot, int intVal) {
        this(objZafParSis);
        intCodEmp = CodEmp.intValue();
        intCodLoc = CodLoc.intValue();
        intCodCot = CodCot.intValue();
        intValBus = intVal;
        intTipEmpSel = 1;

        /* Tipos de Documentos "Facturación Electrónica": José Marín M 3/Oct/2014 */
        if (objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC || objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC_SIG_MES) {
            intCodTipDocFacEle = 1;
        } else if (objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC_ELE) //Cotizaciones de Venta (Facturación Electrónica)
        {
            intCodTipDocFacEle = 228;
        }


        butCopyInmaconsa.setVisible(true);
         
        /*JoséMario 19/Oct/2015*/
        rdoNA.setEnabled(false);
        rdoInicio.setEnabled(false);
        rdoFinal.setEnabled(false);
        
        
        txtPesKgr.setBackground(objZafParSis.getColorCamposSistema());
        txtCliDirGui.setBackground(objZafParSis.getColorCamposObligatorios());
        
        /* JM: Agregado para hacer obligatorio el numero de pedido */
        tx_numped.setBackground(objZafParSis.getColorCamposObligatorios()); 
         
    }

    /**
     * Creates new form ZafVen01 (*5)
     */
    public ZafVen01(Librerias.ZafParSis.ZafParSis objZafParSis, Integer CodEmp, Integer CodLoc, Integer CodCot, Integer CodHis, int intVal) {
        this(objZafParSis);
        intCodEmp = CodEmp.intValue();
        intCodLoc = CodLoc.intValue();
        intCodCot = CodCot.intValue();
        intCodHis = CodHis.intValue();
        intValBus = intVal;
        intTipEmpSel = 1;

        /* Tipos de Documentos "Facturación Electrónica": José Marín M 3/Oct/2014 */
        if (objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC || objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC_SIG_MES) {
            intCodTipDocFacEle = 1;
        } else if (objZafParSis.getCodigoMenu() == INT_COD_MNU_FAC_ELE) //Cotizaciones de Venta (Facturación Electrónica)
        {
            intCodTipDocFacEle = 228;
        }

 
        butCopyInmaconsa.setVisible(true);
 
        rdoNA.setEnabled(false);
        rdoInicio.setEnabled(false);
        rdoFinal.setEnabled(false);
        /*JoséMario 19/Oct/2015*/
        
      
        txtPesKgr.setBackground(objZafParSis.getColorCamposSistema());
        txtCliDirGui.setBackground(objZafParSis.getColorCamposObligatorios());
        
        /* JM: Agregado para hacer obligatorio el numero de pedido */
        tx_numped.setBackground(objZafParSis.getColorCamposObligatorios()); 
         
        
    }

    private class RenderDecimales extends JLabel implements TableCellRenderer {

        int intNumDecimales = 0;

        public RenderDecimales(int intNumDecimales) {
            this.intNumDecimales = intNumDecimales;
            setHorizontalAlignment(JLabel.RIGHT);
            setOpaque(true);
            setBackground(new Color(255, 255, 255));
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            try {
                double dblSubPro = Double.parseDouble((value == null) ? "0" : "" + value);
                ZafUtil objutil = new ZafUtil();
                if (isSelected) {
                    setBorder(new LineBorder(UIManager.getDefaults().getColor("Button.focus"), 1));
                } else {
                    setBorder(null);
                }
                this.setText("" + objutil.redondeo(dblSubPro, intNumDecimales));
                this.setFont(new Font("SansSerif", 0, 11));
                this.setOpaque(true);
                setBackground(new Color(201, 223, 245));
                setForeground(new Color(0, 0, 0));

                if (tblDat.getValueAt(row, INT_TBL_BLNPRE) != null) {
                    if ((tblDat.getValueAt(row, INT_TBL_BLNPRE).toString().equals("true"))) {
                        this.setOpaque(true);
                        setBackground(new Color(0, 0, 0));
                        setForeground(new Color(255, 255, 255));
                        setFont(new Font("MS Sans Serif", 1, 18));
                    }
                }
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(jfrThis, e);
                tblDat.setValueAt("0", row, column);
            }
            return this;
        }
    }

    private boolean FormaRetencion(java.sql.Connection conTmp) {
        boolean blnRes = false;
        java.sql.Statement stmTmp;
        java.sql.ResultSet rst;
        try {
            if (conTmp != null) {
                stmTmp = conTmp.createStatement();
                String sql = "SELECT tx_tipmot, co_mot FROM tbm_motdoc WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND tx_tipmot in ('B','S','T') ";
                rst = stmTmp.executeQuery(sql);
                while (rst.next()) {
                    //intCodMotDoc = rst.getInt(1);
                    if (rst.getString("tx_tipmot").equals("B")) {
                        intCodMotBien = rst.getInt("co_mot");
                    } else if (rst.getString("tx_tipmot").equals("S")) {
                        intCodMotServ = rst.getInt("co_mot");
                    } else if (rst.getString("tx_tipmot").equals("T")) {
                        intCodMotTran = rst.getInt("co_mot");
                    }
                    blnRes = true;
                }
                rst.close();
                stmTmp.close();
                rst = null;
                stmTmp = null;
            }
        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return blnRes;
    }
 
  /**
    * Permite obtener dia de validez de la cotizacion
    */
    private void getObtenerDiaValCot() {
        Statement stmLoc;
        ResultSet rstLoc;
        String strSql = "";
        try {
            if (CONN_GLO != null) {
                stmLoc = CONN_GLO.createStatement();

                strSql = "SELECT ne_diavalcotven FROM tbm_loc WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_loc=" + objZafParSis.getCodigoLocal() + " ";
                rstLoc = stmLoc.executeQuery(strSql);
                if (rstLoc.next()) {
                    int_Num_Dia_Val = rstLoc.getInt("ne_diavalcotven");
                }
                rstLoc.close();
                stmLoc.close();
                rstLoc = null;
                stmLoc = null;
            }
        } 
        catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } 
        catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
    }

    /**
     * Permite cargar datos de la empresa en variables
     */
    
    private ZafCtaCtb_dat objZafCtaCtb_dat;
    
    private void cargarTipEmp() {
        Statement stmTipEmp;
        ResultSet rstEmp;
        String sSql;
        java.sql.Connection conLoc;
        try {
            conLoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if(conLoc!=null){
                stmTipEmp = conLoc.createStatement();
                sSql = "select b.co_tipper , b.tx_descor , round(a.nd_ivaVen,2) as porIva , bod.co_bod, a1.tx_dir, a1.tx_nom as nombod  FROM  tbm_emp as a "
                        + " left join tbm_tipper as b on(b.co_emp=a.co_emp and b.co_tipper=a.co_tipper)"
                        + " left join tbr_bodloc as bod on(bod.co_emp=a.co_emp and bod.co_loc=" + objZafParSis.getCodigoLocal() + " and bod.st_reg='P')  "
                        + " inner join tbm_bod as a1 on (a1.co_emp=bod.co_emp and a1.co_bod=bod.co_bod ) "
                        + " where a.co_emp=" + objZafParSis.getCodigoEmpresa();
                rstEmp = stmTipEmp.executeQuery(sSql);
                if (rstEmp.next()) {
                    strTipPer_emp = rstEmp.getString("tx_descor");
                    intCodBodPre = rstEmp.getInt("co_bod");
                    intCodTipPerEmp = rstEmp.getInt("co_tipper");
                    strNomBodPtaPar = rstEmp.getString("tx_dir");
                    strNomBodPrv = rstEmp.getString("nombod");
                }                
                objZafCtaCtb_dat = new ZafCtaCtb_dat(objZafParSis,objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intCodTipDocFacEle);
                bldivaEmp=objZafCtaCtb_dat.getPorIvaVen();
                dblPorComSol=objZafCtaCtb_dat.getPorComSol();
                objZafCtaCtb_dat = null;
                dblPorIva=bldivaEmp;
                dblIvaVen=dblPorIva;
                System.out.println("-IVA " + dblPorIva);
                System.out.println("-COMPEN " + dblPorComSol);
                lblIva.setText("IVA " + dblPorIva + "%");  // JoseMario 6/Jun/2016               
                rstEmp.close();
                stmTipEmp.close();
                stmTipEmp = null;
                rstEmp = null;
                conLoc.close();
                conLoc=null;
                
            }
        } 
        catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } 
        catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
    }

    /* 
     *Permite Asignar la Dirección de los reportes.
     *///KEMADO
    private void setRutaReporteAutomaticos() //Rose
    {
        if (objZafParSis.getCodigoEmpresa() == 1) // Tuval
        {
            DIRECCION_REPORTE_FACTURA      = "//Zafiro/Reportes/Ventas/ZafVen02/Tuval/ZafRptVen02.jasper";
            //DIRECCION_REPORTE_COMPRA      = "//Zafiro/Reportes/Compras/ZafCom02/Tuval/ZafRptCom02.jasper";
            DIRECCION_REPORTE_FACELE        = "//Zafiro/Reportes/Ventas/ZafVen02/ZafRptVen02.jasper";
            DIRECCION_REPORTE_COMPRA        = "//Zafiro/Reportes/Compras/ZafCom02/ZafRptCom02.jasper";
            DIRECCION_REPORTE_GUIAREM       = "//Zafiro/Reportes/Compras/ZafCom23/Tuval/ZafRptCom23.jasper";
            DIRECCION_REPORTE_GUIAREMBOD2   = "//Zafiro/Reportes/Compras/ZafCom23/Tuval/ZafRptCom23_01.jasper";
            DIRECCION_REPORTE_GUIAREMBOD2_1 = "//Zafiro/Reportes/Compras/ZafCom23/Tuval/ZafRptCom23_02.jasper";
        } 
        else if ((objZafParSis.getCodigoEmpresa() == 2) && (objZafParSis.getCodigoLocal() == 1)) // Castek - Quito
        {
            DIRECCION_REPORTE_FACTURA       = "//Zafiro/Reportes/Ventas/ZafVen02/Castek/Quito/ZafRptVen02.jasper";
            //DIRECCION_REPORTE_COMPRA      = "//Zafiro/Reportes/Compras/ZafCom02/Castek/Quito/ZafRptCom02.jasper";
            DIRECCION_REPORTE_FACELE        = "//Zafiro/Reportes/Ventas/ZafVen02/ZafRptVen02.jasper";
            DIRECCION_REPORTE_COMPRA        = "//Zafiro/Reportes/Compras/ZafCom02/ZafRptCom02.jasper";
            DIRECCION_REPORTE_GUIAREM       = "//Zafiro/Reportes/Compras/ZafCom23/Castek/Quito/ZafRptCom23.jasper";
            DIRECCION_REPORTE_GUIAREMBOD2   = "//Zafiro/Reportes/Compras/ZafCom23/Castek/Quito/ZafRptCom23_01.jasper";
        } 
        else if ((objZafParSis.getCodigoEmpresa() == 2) && (objZafParSis.getCodigoLocal() == 4)) // Castek - Manta
        {
            DIRECCION_REPORTE_FACTURA       = "//Zafiro/Reportes/Ventas/ZafVen02/Castek/Manta/ZafRptVen02.jasper";
            //DIRECCION_REPORTE_COMPRA      = "//Zafiro/Reportes/Compras/ZafCom02/Castek/Manta/ZafRptCom02.jasper";
            DIRECCION_REPORTE_FACELE        = "//Zafiro/Reportes/Ventas/ZafVen02/ZafRptVen02.jasper";
            DIRECCION_REPORTE_COMPRA        = "//Zafiro/Reportes/Compras/ZafCom02/ZafRptCom02.jasper";
            DIRECCION_REPORTE_GUIAREM       = "//Zafiro/Reportes/Compras/ZafCom23/Castek/Manta/ZafRptCom23.jasper";
            DIRECCION_REPORTE_GUIAREMBOD2   = "//Zafiro/Reportes/Compras/ZafCom23/Castek/Manta/ZafRptCom23_01.jasper";
        } 
        else if ((objZafParSis.getCodigoEmpresa() == 2) && (objZafParSis.getCodigoLocal() == 6)) // Castek - Sto Domingo
        {
            DIRECCION_REPORTE_FACTURA       = "//Zafiro/Reportes/Ventas/ZafVen02/Castek/SantoDomingo/ZafRptVen02.jasper";
            //DIRECCION_REPORTE_COMPRA      = "//Zafiro/Reportes/Compras/ZafCom02/Castek/SantoDomingo/ZafRptCom02.jasper";
            DIRECCION_REPORTE_FACELE        = "//Zafiro/Reportes/Ventas/ZafVen02/ZafRptVen02.jasper";
            DIRECCION_REPORTE_COMPRA        = "//Zafiro/Reportes/Compras/ZafCom02/ZafRptCom02.jasper";
            DIRECCION_REPORTE_GUIAREM       = "//Zafiro/Reportes/Compras/ZafCom23/Castek/SantoDomingo/ZafRptCom23.jasper";
            DIRECCION_REPORTE_GUIAREMBOD2   = "//Zafiro/Reportes/Compras/ZafCom23/Castek/SantoDomingo/ZafRptCom23_01.jasper";
        } 
        else if ((objZafParSis.getCodigoEmpresa() == 2) && (objZafParSis.getCodigoLocal() == 10)) // Castek - Cuenca: JoséMario Marín M. 3/Oct/2014
        {
            DIRECCION_REPORTE_FACTURA       = "//Zafiro/Reportes/Ventas/ZafVen02/Castek/Cuenca/ZafRptVen02.jasper";
            //DIRECCION_REPORTE_COMPRA      = "//Zafiro/Reportes/Compras/ZafCom02/Castek/Cuenca/ZafRptCom02.jasper";
            DIRECCION_REPORTE_FACELE        = "//Zafiro/Reportes/Ventas/ZafVen02/ZafRptVen02.jasper";
            DIRECCION_REPORTE_COMPRA        = "//Zafiro/Reportes/Compras/ZafCom02/ZafRptCom02.jasper";
            DIRECCION_REPORTE_GUIAREM       = "//Zafiro/Reportes/Compras/ZafCom23/Castek/Cuenca/ZafRptCom23.jasper";
            DIRECCION_REPORTE_GUIAREMBOD2   = "//Zafiro/Reportes/Compras/ZafCom23/Castek/Cuenca/ZafRptCom23_01.jasper";
        }
        if (objZafParSis.getCodigoEmpresa() == 4) 
        {
            DIRECCION_REPORTE_FACTURA       = "//Zafiro/Reportes/Ventas/ZafVen02/Dimulti/ZafRptVen02.jasper";
            //DIRECCION_REPORTE_COMPRA      = "//Zafiro/Reportes/Compras/ZafCom02/Dimulti/ZafRptCom02.jasper";
            DIRECCION_REPORTE_FACELE        = "//Zafiro/Reportes/Ventas/ZafVen02/ZafRptVen02.jasper";
            DIRECCION_REPORTE_COMPRA        = "//Zafiro/Reportes/Compras/ZafCom02/ZafRptCom02.jasper";
            DIRECCION_REPORTE_GUIAREM       = "//Zafiro/Reportes/Compras/ZafCom23/Dimulti/ZafRptCom23.jasper";
            DIRECCION_REPORTE_GUIAREMBOD2   = "//Zafiro/Reportes/Compras/ZafCom23/Dimulti/ZafRptCom23_01.jasper";
        }
    }
    
     
//    
//    JM: Comentado el 23/Julio/2019
//    private void cargarTipParSis() {
//        Statement stmTipEmp;
//        ResultSet rstEmp;
//        String sSql;
//        try {
//            if (CONN_GLO != null) {
//                stmTipEmp = CONN_GLO.createStatement();
//
//                sSql = "select round(nd_par1) from tbm_parsis as a "
//                        + " inner join tbr_paremp as b on (b.co_par=a.co_par) "
//                        + " where a.ne_mod=1 and b.co_emp=" + objZafParSis.getCodigoEmpresa();
//
//                rstEmp = stmTipEmp.executeQuery(sSql);
//                if (rstEmp.next()) {
//                    INTPARSISCONF = rstEmp.getInt(1);
//                }
//
//                rstEmp.close();
//                stmTipEmp.close();
//                stmTipEmp = null;
//                rstEmp = null;
//            }
//        } catch (SQLException Evt) {
//            objUti.mostrarMsgErr_F1(jfrThis, Evt);
//        } catch (Exception Evt) {
//            objUti.mostrarMsgErr_F1(jfrThis, Evt);
//        }
//    }

    /**
     * Permite saber la bodega predeterminada
     *
     * @return el codigo de la bodega que es de tipo integer
     */
    private int getBodPrede() {
        java.sql.Statement stmInv;   //Statement para el recosteo
        java.sql.ResultSet rstInv;   //Resultset que tendra los datos de la existencia y el valor de la Existencia
        int intBodPre = 0;
        String sSQLBod;
        try {
            if (CONN_GLO != null) {
                stmInv = CONN_GLO.createStatement();

                sSQLBod = " select co_bod   "
                        + " from tbr_bodloc "
                        + " where           "
                        + " co_emp =        " + objZafParSis.getCodigoEmpresa() + " and "
                        + " co_loc =        " + objZafParSis.getCodigoLocal() + " and "
                        + " st_reg ='P'";

                rstInv = stmInv.executeQuery(sSQLBod);
                if (rstInv.next()) {
                    intBodPre = rstInv.getInt("co_bod");
                }

                rstInv.close();
                stmInv.close();
                rstInv = null;
                stmInv = null;
            }
        } catch (java.sql.SQLException Evt) {
            return -1;
        } catch (Exception Evt) {
            return -1;
        }
        return intBodPre;
    }

    /**
     * Permite abrir coneccion local
     */
    private void abrirCon() {
        try {
            CONN_GLO = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
        } 
        catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
    }
    
    private void abrirCon2() {
        try {
            CONN_GLO2 = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            CONN_GLO2.setAutoCommit(false);
        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
    }    

    /**
     * Permite cerrar coneccion local
     */
    public void CerrarCon() {
        try {
            CONN_GLO.close();
            CONN_GLO = null;
        } 
        catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
    }
    
        public void CerrarCon2() {
        try {
            CONN_GLO2.close();
            CONN_GLO2 = null;
        } 
        catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
    }
    
    

    /**
     * Permite obtener numero de lineas para facturar
     */
    public void ObtenerNumLineas() {
        /* Numero de Lineas Imprimibles: Facturación Electrónica: José Mario M. 3/Oct/2014*/
        String sql = "select ne_numlin from tbm_cabtipdoc where co_tipdoc=" + intCodTipDocFacEle + " and co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_loc=" + objZafParSis.getCodigoLocal();
        try {
            if (CONN_GLO != null) {
                java.sql.Statement stm = CONN_GLO.createStatement();
                java.sql.ResultSet rst = stm.executeQuery(sql);

                if (rst.next()) {
                    NumLineas = rst.getInt(1);
                }
                rst.close();
                stm.close();
                rst = null;
                stm = null;
            }
        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
    }

    /**
     * Carga configuraciones de ventanas de consultas
     */
    public void ConfiguraVenCon() {
        configurarVenConProducto();
        configurarVenConProveedor();
        configurarVenConClientes();
        configurarVenConVendedor();
        configurarVenConDirCli();
        configurarVenConDirCliGia();
        configurarVenConSolItm();
        configurarVentanaConsultaFormaPago();
        configurarVentanaConsultaTarjetaCredito();
        //configurarVentanaConsultaTipoCredito();
        //configurarVentanaConsultaEmisor();
        //configurarVentanaConsultaMesesCredito();
        deshabilitarCamposTarCre();
    }

    private boolean configurarVenConVendedor() {
        boolean blnRes = true;
        try {
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("a.co_usr");
            arlCam.add("a.tx_nom");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("Código");
            arlAli.add("Nombre.");
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("70");
            arlAncCol.add("470");
            //Armar la sentencia SQL.
            String strSQL = "";
            strSQL =" select a.co_usr, a.tx_nom  ";
            strSQL+=" from tbr_usremp as b";
            strSQL+=" inner join tbm_usr as a on (a.co_usr=b.co_usr) ";
            strSQL+=" INNER JOIN tbr_locUsr as a1 ON (b.co_emp=a1.co_emp AND a.co_usr=a1.co_usr)";
            strSQL+=" where b.co_emp=" + objZafParSis.getCodigoEmpresa() + "  AND a1.co_loc="+objZafParSis.getCodigoLocal();
            strSQL+="        and b.st_ven='S' and a.st_reg not in ('I') AND a1.st_reg IN ('A','P')"; 
            strSQL+=" order by a.tx_nom ";
            System.out.println("Configurar Vendedores.... " + strSQL);
            strSQL+=" ";   objVenConVen = new ZafVenCon(JOptionPane.getFrameForComponent(this), objZafParSis, objZafParSis.getNombreMenu(), strSQL, arlCam, arlAli, arlAncCol);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;
            //Configurar columnas.
            objVenConVen.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean configurarVenConClientes() {
        boolean blnRes = true;
        try {
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("a.co_cli");
            arlCam.add("a.tx_nom");
            arlCam.add("a.tx_dir");
            arlCam.add("a.tx_tel");
            arlCam.add("a.tx_ide");
            arlCam.add("a.tx_tipper");
            arlCam.add("a.nd_maxdes");
            arlCam.add("a.nd_maruti");
            arlCam.add("a.tx_desLar");
            arlCam.add("a.co_ven");
            arlCam.add("a.vendedor");
            arlCam.add("a.co_tipper");
            arlCam.add("a.ne_tipforpag");
            arlCam.add("a.nd_pes");
            arlCam.add("a.ne_diagra");
            arlCam.add("a.co_forpag");
            arlCam.add("a.tx_des");
            arlCam.add("a.st_ivaven");
            arlCam.add("a.st_peringnomclicotven");
            arlCam.add("a.ne_diamesmaxemifacven");
            arlCam.add("a.st_reg");
            arlCam.add("a.tx_corEle");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("Código");
            arlAli.add("Nom.Cli.");
            arlAli.add("Dirección");
            arlAli.add("Telefono");
            arlAli.add("RUC/CI");
            arlAli.add("Tipo");
            arlAli.add("Desc");
            arlAli.add("Utili");
            arlAli.add("Ciudad");
            arlAli.add("co_vende");
            arlAli.add("Vendedor");
            arlAli.add("CoDTipPer");
            arlAli.add("TipoForPag");
            arlAli.add("Peso");
            arlAli.add("D.Gracias");
            arlAli.add("CodForPag");
            arlAli.add("Descri");
            arlAli.add("IvaVen");
            arlAli.add("EstNomCli");
            arlAli.add("DiaMaxFacVen");
            arlAli.add("StaVen");
            arlAli.add("Correo");
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("170");
            arlAncCol.add("160");
            arlAncCol.add("80");
            arlAncCol.add("80");
            arlAncCol.add("20");
            arlAncCol.add("20");
            arlAncCol.add("30");
            arlAncCol.add("20");
            arlAncCol.add("40");
            arlAncCol.add("20");
            arlAncCol.add("30");
            arlAncCol.add("30");
            arlAncCol.add("20");
            arlAncCol.add("20");
            arlAncCol.add("40");
            arlAncCol.add("20");
            arlAncCol.add("20");
            arlAncCol.add("20");
            arlAncCol.add("20");
            arlAncCol.add("20");
            arlAncCol.add("170");//22 tx_corEle
            //Armar la sentencia SQL.
            String strSQL;
            strSQL = "SELECT co_cli, tx_nom, tx_dir, tx_tel, tx_ide, tx_tipper, nd_maxdes, nd_maruti , tx_desLar , co_ven, vendedor , co_tipper,"
                    + "  ne_tipforpag,  nd_pes , ne_diagra , co_forpag , tx_des, st_ivaven , st_peringnomclicotven, ne_diamesmaxemifacven, st_reg, tx_corEle  "
                    + " FROM ( "
                    + " select a.co_cli, a.tx_nom, a.tx_dir, a.tx_tel, a.tx_ide, a.tx_tipper, a.nd_maxdes, a.nd_maruti , ciu.tx_desLar , a.co_ven, ven.tx_nom as vendedor , ven.st_reg, a.co_tipper "
                    + " , b.ne_tipforpag,  b.nd_pes, a.ne_diagra, a.co_forpag , b.tx_des, a.st_ivaven, a.st_peringnomclicotven, a.ne_diamesmaxemifacven, a.tx_corEle FROM tbr_cliloc AS a1 "
                    + " INNER JOIN tbm_cli as a ON (a.co_emp=a1.co_emp and a.co_cli=a1.co_cli)   "
                    + " LEFT JOIN tbm_Ciu as ciu on(ciu.co_Ciu=a.co_ciu)  "
                    + " LEFT JOIN tbm_usr as ven on (ven.co_usr = a.co_ven)"
                    + " left join tbm_cabforpag as b on (b.co_emp=a.co_emp and b.co_forpag=a.co_forpag) "
                    + " WHERE a1.co_emp =" + objZafParSis.getCodigoEmpresa() + " and a1.co_loc = " + objZafParSis.getCodigoLocal() + " and a.st_reg IN('A','N')  and a.st_cli='S' order by a.tx_nom  "
                    + ") AS a";
            //Ocultar columnas.
            int intColOcu[] = new int[16];
            intColOcu[0] = 6;
            intColOcu[1] = 7;
            intColOcu[2] = 8;
            intColOcu[3] = 9;
            intColOcu[4] = 10;
            intColOcu[5] = 11;
            intColOcu[6] = 12;
            intColOcu[7] = 13;
            intColOcu[8] = 14;
            intColOcu[9] = 15;
            intColOcu[10] = 16;
            intColOcu[11] = 17;
            intColOcu[12] = 18;
            intColOcu[13] = 19;
            intColOcu[14] = 20;
            intColOcu[15] = 21;
            objVenConCli = new ZafVenCon(JOptionPane.getFrameForComponent(this), objZafParSis, objZafParSis.getNombreMenu(), strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;
            //Configurar columnas.
            objVenConCli.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        } 
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean configurarVenConDirCli() {
        boolean blnRes = true;
        try {
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("a.co_cli");
            arlCam.add("a.tx_dir");
            arlCam.add("a.tx_tel1");
            arlCam.add("a.tx_tel2");
            arlCam.add("a.tx_tel3");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("Código");
            arlAli.add("Dirección");
            arlAli.add("Telefóno1");
            arlAli.add("Telefóno2");
            arlAli.add("Telefóno3");
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("45");
            arlAncCol.add("300");
            arlAncCol.add("70");
            arlAncCol.add("70");
            arlAncCol.add("70");
            //Armar la sentencia SQL.
            String strSQL = "";
            strSQL = "SELECT a.co_cli, a.tx_dir, a.tx_tel1, a.tx_tel2, a.tx_tel3  FROM  tbm_dircli as a WHERE  a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_cli=0 ";
            objVenConDirCli = new ZafVenCon(JOptionPane.getFrameForComponent(this), objZafParSis, objZafParSis.getNombreMenu(), strSQL, arlCam, arlAli, arlAncCol);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean configurarVenConDirCliGia() {
        boolean blnRes = true;
        try {
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("a.co_cli");
            arlCam.add("a.tx_dir");
            arlCam.add("a.tx_tel1");
            arlCam.add("a.tx_tel2");
            arlCam.add("a.tx_tel3");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("Código");
            arlAli.add("Dirección");
            arlAli.add("Telefóno1");
            arlAli.add("Telefóno2");
            arlAli.add("Telefóno3");
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("45");
            arlAncCol.add("300");
            arlAncCol.add("70");
            arlAncCol.add("70");
            arlAncCol.add("70");
            //Armar la sentencia SQL.
            String strSQL = "";
            strSQL = "SELECT a.co_cli, a.tx_dir, a.tx_tel1, a.tx_tel2, a.tx_tel3  FROM  tbm_dircli as a WHERE  a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_cli=0 ";
            objVenConDirCliGia = new ZafVenCon(JOptionPane.getFrameForComponent(this), objZafParSis, objZafParSis.getNombreMenu(), strSQL, arlCam, arlAli, arlAncCol);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean configurarVenConProveedor() {
        boolean blnRes = true;
        try {
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.nd_maxdescom");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("Nom.Prv.");
            arlAli.add("Dirección");
            arlAli.add("Código");
            arlAli.add("RUC/CI");
            arlAli.add("MAX/DESC");
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("190");
            arlAncCol.add("220");
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("50");
            //Armar la sentencia SQL.
            String strSQL = "";
            strSQL += "select a1.tx_nom,a1.tx_dir,a1.co_cli,a1.tx_ide, a1.nd_maxdescom FROM "
                    + " tbr_cliloc AS a "
                    + " INNER JOIN tbm_cli as a1 ON (a1.co_emp=a.co_emp and a1.co_cli=a.co_cli)   "
                    + " where a1.st_reg in('A','N')  AND   a1.st_prv = 'S' and a.co_emp=" + objZafParSis.getCodigoEmpresa() + " AND "
                    + " a.co_loc=" + objZafParSis.getCodigoLocal() + " AND a1.co_empGrp IS  NULL order by a1.tx_nom";
            objVenCon = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objZafParSis, objZafParSis.getNombreMenu(), strSQL, arlCam, arlAli, arlAncCol);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;  

        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean configurarVenConSolItm() {
        boolean blnRes = true;
        try {
            ArrayList arlCam = new ArrayList();
            arlCam.add("a7.tx_codAlt");
            arlCam.add("a7.tx_codAlt2");
            arlCam.add("a7.tx_nomItm");
            arlCam.add("a7.nd_stkAct");
            arlCam.add("a7.nd_stkActcen");
            arlCam.add("a7.nd_preVta1");
            arlCam.add("a7.st_ivaVen");
            arlCam.add("a7.tx_descor");
            arlCam.add("a7.st_ser");
            arlCam.add("a7.isterL");
            arlCam.add("a7.co_itm");
            arlCam.add("a7.nd_maruti");
            arlCam.add("a7.proconf");
            arlCam.add("a7.st_permodnomitmven");
            arlCam.add("a7.co_loc");
            arlCam.add("a7.co_tipDoc");
            arlCam.add("a7.co_doc");
            arlCam.add("a7.co_reg");

            ArrayList arlAli = new ArrayList();
            arlAli.add("Cód.Tuv.");
            arlAli.add("Cód.Loc.");
            arlAli.add("Nombre");
            arlAli.add("Stock");
            arlAli.add("StkCen");
            arlAli.add("Precio");
            arlAli.add("Iva.");
            arlAli.add("Uni.");
            arlAli.add("Ser.");
            arlAli.add("st_Ter");
            arlAli.add("Cód.Sis.");
            arlAli.add("Mar.Uti.");
            arlAli.add("I/E.Bod.Fis.");
            arlAli.add("Mod.Itm");
            arlAli.add("Cód.loc.");
            arlAli.add("Cód.tipdoc.");
            arlAli.add("Cod.Doc");
            arlAli.add("Cod.Reg");

            ArrayList arlAncCol = new ArrayList();

            //Armar la sentencia SQL.  
            String Str_Sql = "";

            String strAux2 = " , CASE WHEN ( (trim(SUBSTR (UPPER(b2.tx_codalt), length(b2.tx_codalt) ,1)) IN ( ";
            strAux2+=" SELECT  UPPER(trim(x1.tx_cad))  FROM tbr_bodloc as a ";
            strAux2+=" inner join tbm_reginvmernuningegrfisbod as x1 ON(x1.co_emp=a.co_Emp and x1.co_bod=a.co_bod) ";
            strAux2+=" WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and x1.st_reg='A' and   a.st_reg='P' ))) ";
            strAux2+=" THEN 'S' ELSE 'N' END AS proconf  ";

            Str_Sql = "SELECT *  ";
            Str_Sql+=" FROM(  \n";
            Str_Sql+="       SELECT a1.co_loc,  a1.co_tipDoc, a1.co_doc, b1.co_reg,b2.co_itm, b2.tx_codAlt, b2.tx_codAlt as tx_codAlt2,  \n";
            Str_Sql+="              b2.tx_nomItm, (b1.nd_canTotEgr - (b1.nd_canTotIng+b1.nd_canNunIng)) AS nd_stkAct, ";
            Str_Sql+="              0 as nd_stkActcen, b2.nd_preVta1, b2.st_ivaVen, var.tx_descor,\n";
            Str_Sql+="              b2.st_ser, 'N' as isterL,  b2.nd_maruti, b2.st_permodnomitmven ";
            Str_Sql+="  " + strAux2 + "  FROM ( tbm_cabSolSalTemMer AS a1 ";
            
            Str_Sql+=" \n";
            Str_Sql+=" INNER JOIN (tbm_detSolSalTemMer AS b1 ";
            Str_Sql+=" INNER JOIN tbm_inv AS b2  ON b1.co_emp=b2.co_emp AND b1.co_itm=b2.co_itm) ";
            Str_Sql+=" ON a1.co_emp=b1.co_emp AND a1.co_loc=b1.co_loc AND a1.co_tipDoc=b1.co_tipDoc AND a1.co_doc=b1.co_doc ) ";
            Str_Sql+=" left outer join tbm_var as var on (b2.co_uni=var.co_reg and var.co_grp=5 ) ";
            Str_Sql+=" LEFT OUTER JOIN tbm_cli AS a3  ON (a1.co_emp=a3.co_emp AND a1.co_cli=a3.co_cli AND a3.st_reg='A') ";
            Str_Sql+=" LEFT OUTER JOIN tbm_usr AS a4  ON (a1.co_usrSol=a4.co_usr AND a4.st_reg='A') ";
            Str_Sql+=" WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa() + " AND a1.co_loc=" + objZafParSis.getCodigoLocal() + " AND a1.co_mnu IN(2039,2049) AND a1.st_aut IN('A') AND a1.st_reg='A' ";
            Str_Sql+=" AND a1.st_conTotMerEgr='S' AND a1.st_conTotMerIng='N' ";
            Str_Sql+=" AND (b1.nd_canTotEgr - (b1.nd_canTotIng+b1.nd_canNunIng)>0) ) as a7 ";
 
            //co_mnu = 2039 "Solicitud de salida temporal de mercadería para exposición..." .... José Marin 
            //co_mnu = 2049 "Solicitud de salida temporal de mercadería para demostración..."... José Marín 

            arlAncCol.add("80");
            arlAncCol.add("75");
            arlAncCol.add("200");
            arlAncCol.add("55");
            arlAncCol.add("50");
            arlAncCol.add("55");
            arlAncCol.add("30");
            arlAncCol.add("46");
            arlAncCol.add("33");
            arlAncCol.add("47");
            arlAncCol.add("40");
            arlAncCol.add("40");

            int intColOcu[] = new int[9];
            intColOcu[0] = 5;
            intColOcu[1] = 9;
            intColOcu[2] = 10;
            intColOcu[3] = 11;
            intColOcu[4] = 12;
            intColOcu[5] = 15;
            intColOcu[6] = 16;
            intColOcu[7] = 17;
            intColOcu[8] = 18;
            objVenConSolItm = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objZafParSis, objZafParSis.getNombreMenu(), Str_Sql, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;

            objVenConSolItm.setConfiguracionColumna(4, javax.swing.JLabel.RIGHT, ZafVenCon.INT_FOR_NUM, objZafParSis.getFormatoNumero(), false, true);
            objVenConSolItm.setConfiguracionColumna(5, javax.swing.JLabel.RIGHT, ZafVenCon.INT_FOR_NUM, objZafParSis.getFormatoNumero(), false, true);
            objVenConSolItm.setConfiguracionColumna(6, javax.swing.JLabel.RIGHT, ZafVenCon.INT_FOR_NUM, objZafParSis.getFormatoNumero(), false, true);
            objVenConSolItm.setConfiguracionColumna(7, javax.swing.JLabel.CENTER);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean configurarVenConProducto() {
        boolean blnRes = true;
        try {
            ArrayList arlCam = new ArrayList();
            arlCam.add("a7.tx_codAlt");
            arlCam.add("a7.tx_codAlt3Letras");
            arlCam.add("a7.tx_nomItm");
            arlCam.add("a7.nd_canDis");         /* JoseMario 12/Mayo/2016 */
            arlCam.add("a7.nd_canDisInm");      /* JoseMario 12/Mayo/2016 */
            arlCam.add("a7.nd_preVta1");
            arlCam.add("a7.st_ivaVen");
            arlCam.add("a7.tx_descor");
            arlCam.add("a7.st_ser");
            arlCam.add("a7.isterL");
            arlCam.add("a7.co_itm");
            arlCam.add("a7.nd_maruti");
            arlCam.add("a7.proconf");
            arlCam.add("a7.st_permodnomitmven");
            arlCam.add("a7.nd_pesitmkgr");
            arlCam.add("a7.tx_tipunimed");
            arlCam.add("a7.st_blqprevta");
            arlCam.add("a7.nd_caningbod");
            arlCam.add("a7.co_ctaegr");
            arlCam.add("a7.tx_codAlt3Letras"); /*JoséMario 4/Ene/2016*/
            arlCam.add("a7.nd_stkAct");         /*JoséMario 12/May/2016*/
            arlCam.add("a7.nd_stkActInm");      /*JoséMario 12/May/2016*/

            ArrayList arlAli = new ArrayList();
            arlAli.add("Cód.Tuv.");//1
            arlAli.add("Cód.Loc.");//2
            arlAli.add("Nombre");//3
            arlAli.add("Disponible");//4
            arlAli.add("Dis.Inmaconsa");//5<<<<<<<<<<<
            arlAli.add("Precio");//6
            arlAli.add("Iva.");//7
            arlAli.add("Uni.");//8
            arlAli.add("Servicio.");//9
            arlAli.add("st_Ter");//10
            arlAli.add("Cód.Sis.");//11
            arlAli.add("Mar.Uti.");//12
            arlAli.add("I/E.Bod.Fis.");//13
            arlAli.add("Mod.Itm");//14
            arlAli.add("Peso.Kgr");//15  <<<<<<<<<<<<<<
            arlAli.add("Tip.Uni.Med");//16
            arlAli.add("BloqPreVta");//17
            arlAli.add("Disponible");//18
            arlAli.add("Cód.Cta.Egr.");//19
            arlAli.add("Cód.Let.");//20
            arlAli.add("Stock_act");//21<< NO MOSTRAR
            arlAli.add("Inmaconsa_act");//22<<<<<<<<<<<
            

            ArrayList arlAncCol = new ArrayList();

            //Armar la sentencia SQL.  
            String Str_Sql = "";
            Str_Sql = objInvItm.getSqlInvVen();
            System.out.println("..... JOTA ....... \n" + objInvItm.getSqlInvVen());

            if (objZafParSis.getCodigoEmpresa() == 2 || objZafParSis.getCodigoEmpresa() == 4) {
                arlAncCol.add("75");//1
                arlAncCol.add("75");//2
                arlAncCol.add("200");//3
                arlAncCol.add("50");//4
                arlAncCol.add("50");//5
                arlAncCol.add("50");//6
                arlAncCol.add("25");//7
                arlAncCol.add("33");//8
                arlAncCol.add("70");//9
                arlAncCol.add("47");//10
                arlAncCol.add("40");//11
                arlAncCol.add("40");//12
                arlAncCol.add("30");//13
                arlAncCol.add("30");//14
                arlAncCol.add("30");//15
                arlAncCol.add("50");//16
                arlAncCol.add("30");//17

                int intColOcu[] = new int[11];
                intColOcu[0] = 8;
                //intColOcu[1]=9;
                intColOcu[1] = 10;
                intColOcu[2] = 11;
                intColOcu[3] = 12;
                intColOcu[4] = 13;
                intColOcu[5] = 14;
                intColOcu[6] = 16;
                intColOcu[7] = 17;
                intColOcu[8] = 19;
                intColOcu[9] = 21;
                intColOcu[10] = 22;

                objVenCon2 = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objZafParSis, objZafParSis.getNombreMenu(), Str_Sql, arlCam, arlAli, arlAncCol, intColOcu);
            } else {
                arlAncCol.add("80");
                arlAncCol.add("75");
                arlAncCol.add("200");
                arlAncCol.add("55");
                arlAncCol.add("50");
                arlAncCol.add("55");
                arlAncCol.add("30");
                arlAncCol.add("46");
                arlAncCol.add("70");
                arlAncCol.add("47");
                arlAncCol.add("40");
                arlAncCol.add("40");
                arlAncCol.add("30");
                arlAncCol.add("30");
                arlAncCol.add("30");
                arlAncCol.add("30");
                arlAncCol.add("30");

                int intColOcu[] = new int[12];
//                intColOcu[0] = 5;  
                //intColOcu[1]=9;
                intColOcu[1] = 10;
                intColOcu[2] = 11;
                intColOcu[3] = 12;
                intColOcu[4] = 13;
                intColOcu[5] = 14;
                intColOcu[6] = 2;
                intColOcu[7] = 16;
                intColOcu[8] = 17;
                intColOcu[9] = 19;
                intColOcu[10] = 21;//ndstkAct
                intColOcu[11] = 22;

                objVenCon2 = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objZafParSis, objZafParSis.getNombreMenu(), Str_Sql, arlCam, arlAli, arlAncCol, intColOcu);
            }
            arlCam = null;
            arlAli = null;
            arlAncCol = null;

            objVenCon2.setConfiguracionColumna(4, javax.swing.JLabel.RIGHT, ZafVenCon.INT_FOR_NUM, objZafParSis.getFormatoNumero(), false, true);
            objVenCon2.setConfiguracionColumna(5, javax.swing.JLabel.RIGHT, ZafVenCon.INT_FOR_NUM, objZafParSis.getFormatoNumero(), false, true);
            objVenCon2.setConfiguracionColumna(6, javax.swing.JLabel.RIGHT, ZafVenCon.INT_FOR_NUM, objZafParSis.getFormatoNumero(), false, true);
            objVenCon2.setConfiguracionColumna(15, javax.swing.JLabel.RIGHT, ZafVenCon.INT_FOR_NUM, objZafParSis.getFormatoNumero(), false, true);
            objVenCon2.setConfiguracionColumna(18, javax.swing.JLabel.RIGHT, ZafVenCon.INT_FOR_NUM, objZafParSis.getFormatoNumero(), false, true);
            objVenCon2.setConfiguracionColumna(7, javax.swing.JLabel.CENTER);
        } 
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
 
    
    
    private boolean configurarVentanaConsultaFormaPago() {
        boolean blnRes = false;
        try {
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("co_forpag");
            arlCam.add("tx_des");
            arlCam.add("ne_tipforpag");
            arlCam.add("nd_pes");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("Cód.For.Pag");
            arlAli.add("Descripción");
            arlAli.add("Tip.Pag");
            arlAli.add("Tip.Pes");
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("80");
            arlAncCol.add("350");
            arlAncCol.add("0");
            arlAncCol.add("0");
            //Armar la sentencia SQL.
            String strSQL = "";
            strSQL += "SELECT co_forpag, tx_des, ne_tipforpag, nd_pes FROM tbm_cabForPag Where co_emp = " + objZafParSis.getCodigoEmpresa() + " and st_reg not in ('I','E') order by co_forpag";
            //Ocultar columnas.
            int intColOcu[] = new int[2];
            intColOcu[0] = 3;
            intColOcu[1] = 4;
            objVenConForPag = new ZafVenCon(JOptionPane.getFrameForComponent(this), objZafParSis, objZafParSis.getNombreMenu(), strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;
            //Configurar columnas.
            objVenConForPag.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        } 
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }

        return blnRes;
    }

    private boolean mostrarVenConFormaPago(int intTipBus) {
        boolean blnRes = true;
        try {
            switch (intTipBus) {
                case 0: //Mostrar la ventana de consulta.
                    objVenConForPag.setCampoBusqueda(0);
                    objVenConForPag.setVisible(true);
                    if (objVenConForPag.getSelectedButton() == ZafVenCon.INT_BUT_ACE) {
                        txtCodForPag.setText(objVenConForPag.getValueAt(1));
                        txtNomForPag.setText(objVenConForPag.getValueAt(2));
                        txtCodigoFormaPago.setText(objVenConForPag.getValueAt(1));
                        intTipForPagCotizacion = Integer.parseInt(objVenConForPag.getValueAt(3));
                        //dblPesCotizacion = Double.parseDouble(objVenConForPag.getValueAt(4));
//                        dblPesCotizacion = objUti.parseDouble(objVenConForPag.getValueAt(4)); // JM 8/Feb/2018
                        
                        if(objVenConForPag.getValueAt(4)==null || objVenConForPag.getValueAt(4).toString().equals("")){
                            dblPesCotizacion = 50000.00;
                        }
                        else{
                            dblPesCotizacion = objUti.parseDouble(objVenConForPag.getValueAt(4));  // JM SOLUCION xD
                        }
                        
                        if (intTipForPagCotizacion == 4) {
                            habilitarCamposTarCre();
                        } else {
                            deshabilitarCamposTarCre();
//                            calculaDescuento();
// JM: 6/Sep/2018: Se quita que se cambie el porcentaje de descuanto al cambiar la forma de pago

                            CalculoPago();
                        }
                    }
                    break;

                case 1: //Búsqueda directa por "Código".
                    if (objVenConForPag.buscar("co_forpag", txtCodigoFormaPago.getText())) {
                        Boolean blnRenova;
                        if (txtCodigoFormaPago.isEditable()) {
                            blnRenova = true;
                        } else {
                            blnRenova = false;
                        }

                        txtCodForPag.setText(objVenConForPag.getValueAt(1));
                        txtNomForPag.setText(objVenConForPag.getValueAt(2));
                        txtCodigoFormaPago.setText(objVenConForPag.getValueAt(1));
                        intTipForPagCotizacion = Integer.parseInt(objVenConForPag.getValueAt(3));
                        //dblPesCotizacion = Double.parseDouble(objVenConForPag.getValueAt(4));
//                        dblPesCotizacion = objUti.parseDouble(objVenConForPag.getValueAt(4));  // JM 8/Feb/2018
                        if(objVenConForPag.getValueAt(4)==null || objVenConForPag.getValueAt(4).toString().equals("")){
                            dblPesCotizacion = 50000.00;
                        }
                        else{
                            dblPesCotizacion = objUti.parseDouble(objVenConForPag.getValueAt(4));  // JM SOLUCION xD
                        }
                        
                        if (intTipForPagCotizacion == 4) {
                            habilitarCamposTarCre();
                        } else {
                            deshabilitarCamposTarCre();
                            if (blnRenova) {
//                                calculaDescuento();
// JM: 6/Sep/2018: Se quita que se cambie el porcentaje de descuanto al cambiar la forma de pago
                            }
                            CalculoPago();
                        }
                    } else {
                        objVenConForPag.setCampoBusqueda(0);
                        objVenConForPag.setCriterio1(11);
                        objVenConForPag.cargarDatos();
                        objVenConForPag.setVisible(true);
                        if (objVenConForPag.getSelectedButton() == ZafVenCon.INT_BUT_ACE) {
                            txtCodForPag.setText(objVenConForPag.getValueAt(1));
                            txtNomForPag.setText(objVenConForPag.getValueAt(2));
                            txtCodigoFormaPago.setText(objVenConForPag.getValueAt(1));
                            intTipForPagCotizacion = Integer.parseInt(objVenConForPag.getValueAt(3));
                            //dblPesCotizacion = Double.parseDouble(objVenConForPag.getValueAt(4));
//                            dblPesCotizacion = objUti.parseDouble(objVenConForPag.getValueAt(4));
                            if(objVenConForPag.getValueAt(4)==null || objVenConForPag.getValueAt(4).toString().equals("")){
                                dblPesCotizacion = 50000.00;
                            }
                            else{
                                dblPesCotizacion = objUti.parseDouble(objVenConForPag.getValueAt(4));  // JM SOLUCION xD
                            }
                            if (intTipForPagCotizacion == 4) {
                                habilitarCamposTarCre();
                            } else {
                                deshabilitarCamposTarCre();
//                                calculaDescuento();
                                // JM: 6/Sep/2018: Se quita que se cambie el porcentaje de descuanto al cambiar la forma de pago
                                CalculoPago();
                            }
                        } else {
                            txtCodForPag.setText(strCodForPag);
                        }

                    }
                    break;

                case 2:
                    break;

                case 3: //Búsqueda directa por "Descripción larga".
                    if (objVenConForPag.buscar("tx_des", txtNomForPag.getText())) {
                        txtCodForPag.setText(objVenConForPag.getValueAt(1));
                        txtNomForPag.setText(objVenConForPag.getValueAt(2));
                        txtCodigoFormaPago.setText(objVenConForPag.getValueAt(1));
                        intTipForPagCotizacion = Integer.parseInt(objVenConForPag.getValueAt(3));
                        //dblPesCotizacion = Double.parseDouble(objVenConForPag.getValueAt(4));
//                        dblPesCotizacion = objUti.parseDouble(objVenConForPag.getValueAt(4));
                        if(objVenConForPag.getValueAt(4)==null || objVenConForPag.getValueAt(4).toString().equals("")){
                            dblPesCotizacion = 50000.00;
                        }
                        else{
                            dblPesCotizacion = objUti.parseDouble(objVenConForPag.getValueAt(4));  // JM SOLUCION xD
                        }
                        
                        if (intTipForPagCotizacion == 4) {
                            habilitarCamposTarCre();
                        } else {
                            deshabilitarCamposTarCre();
//                            calculaDescuento();
// JM: 6/Sep/2018: Se quita que se cambie el porcentaje de descuanto al cambiar la forma de pago
                            CalculoPago();
                        }
                    } else {
                        objVenConForPag.setCampoBusqueda(1);
                        objVenConForPag.setCriterio1(11);
                        objVenConForPag.cargarDatos();
                        objVenConForPag.setVisible(true);
                        if (objVenConForPag.getSelectedButton() == ZafVenCon.INT_BUT_ACE) {
                            txtCodForPag.setText(objVenConForPag.getValueAt(1));
                            txtNomForPag.setText(objVenConForPag.getValueAt(2));
                            txtCodigoFormaPago.setText(objVenConForPag.getValueAt(1));
                            intTipForPagCotizacion = Integer.parseInt(objVenConForPag.getValueAt(3));
                            //dblPesCotizacion = Double.parseDouble(objVenConForPag.getValueAt(4));
//                            dblPesCotizacion = objUti.parseDouble(objVenConForPag.getValueAt(4));
                            if(objVenConForPag.getValueAt(4)==null || objVenConForPag.getValueAt(4).toString().equals("")){
                                dblPesCotizacion = 50000.00;
                            }
                            else{
                                dblPesCotizacion = objUti.parseDouble(objVenConForPag.getValueAt(4));  // JM SOLUCION xD
                            }

                            if (intTipForPagCotizacion == 4) {
                                habilitarCamposTarCre();
                            } else {
                                deshabilitarCamposTarCre();
//                                calculaDescuento();
// JM: 6/Sep/2018: Se quita que se cambie el porcentaje de descuanto al cambiar la forma de pago
                                CalculoPago();
                            }
                        } else {
                            txtNomForPag.setText(strDesLarForPag);
                        }
                    }
                    break;
            }
        } 
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean configurarVentanaConsultaTarjetaCredito() {
        boolean blnRes = false;
        try {
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("co_redTarCre");
            arlCam.add("tx_nomRedTarCre");
            arlCam.add("co_tipCre");
            arlCam.add("tx_desLar");
            arlCam.add("tx_emiTarCre");
            arlCam.add("nd_porDesVen");
            arlCam.add("ne_mesGra");
            arlCam.add("nd_porCom");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("Cód.Red.Tar.Cré.");      // no se muestra 
            arlAli.add("Nom.Red.Tar.Cré.");
            arlAli.add("Cod.Tip.Cré.");          //3
            arlAli.add("Tip.Cré.");              //4
            arlAli.add("Emi.Tar.Cré.");          //5
            arlAli.add("% Des.");                //6
            arlAli.add("Mes.Gra.");              //7
            arlAli.add("Por.Com.");              //8
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("40");
            arlAncCol.add("60");
            arlAncCol.add("40");
            arlAncCol.add("300");
            arlAncCol.add("300");
            arlAncCol.add("40");
            arlAncCol.add("40");
            arlAncCol.add("40");
            //Armar la sentencia SQL.
            String strSQL = "";
            strSQL += " SELECT a1.co_redTarCre,a2.tx_desLar as tx_nomRedTarCre ,a1.co_tipCre,a1.tx_desLar,a1.tx_emiTarCre, a1.tx_tipCre,a1.nd_porDesVen, a1.ne_mesGra, a1.nd_porCom ";
            strSQL += " FROM tbm_tipCreRedTarCre as a1";
            strSQL += " INNER JOIN tbm_redTarCre as a2 ON (a1.co_redTarCre=a2.co_redTarCre)";
            strSQL += " WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa();
            strSQL += " AND a1.st_reg='A' AND a2.st_reg='A'";
            strSQL += " ";
            //Ocultar columnas.
            int intColOcu[] = new int[4];
            intColOcu[0] = 1;                          //co_redTarCre
            intColOcu[1] = 2;                          //tx_nomRedTarCre
            intColOcu[2] = 7;                          //ne_mesGra
            intColOcu[3] = 8;                          //nd_porCom
            objVenConTarCre = new ZafVenCon(JOptionPane.getFrameForComponent(this), objZafParSis, objZafParSis.getNombreMenu(), strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;

            //Configurar columnas.
            objVenConTarCre.setConfiguracionColumna(3, javax.swing.JLabel.RIGHT);
            objVenConTarCre.setConfiguracionColumna(4, javax.swing.JLabel.LEFT);
            objVenConTarCre.setConfiguracionColumna(5, javax.swing.JLabel.LEFT);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean mostrarVenConTarjetaCredito(int intTipBus) {
        boolean blnRes = true;
        try {
            switch (intTipBus) {
                case 0: //Mostrar la ventana de consulta.
                    objVenConTarCre.setCampoBusqueda(0);
                    objVenConTarCre.setVisible(true);
                    if (objVenConTarCre.getSelectedButton() == ZafVenCon.INT_BUT_ACE) {
                        txtCodTarCre.setText(objVenConTarCre.getValueAt(3));
                        txtNomTarCre.setText(objVenConTarCre.getValueAt(4));
                        txtNomEmiTar.setText(objVenConTarCre.getValueAt(5));
                        txtMesGra.setText(objVenConTarCre.getValueAt(7));   /// MESES DE GRACIA
                        dblPorDesTarCre = objUti.redondear(objUti.parseDouble(objVenConTarCre.getValueAt(6)), 2);
                        txtPorDesVenTarCre.setText(String.valueOf(dblPorDesTarCre));
                        txtPorComTarCre.setText(objVenConTarCre.getValueAt(8));
                    }
                    break;

                case 1: //Búsqueda directa por "Código".
                    if (objVenConTarCre.buscar("co_tipCre", txtCodTarCre.getText())) {
                        txtCodTarCre.setText(objVenConTarCre.getValueAt(3));
                        txtNomTarCre.setText(objVenConTarCre.getValueAt(4));
                        txtNomEmiTar.setText(objVenConTarCre.getValueAt(5));
                        txtMesGra.setText(objVenConTarCre.getValueAt(7));
                        dblPorDesTarCre = objUti.redondear(objUti.parseDouble(objVenConTarCre.getValueAt(6)), 2);
                        txtPorDesVenTarCre.setText(String.valueOf(dblPorDesTarCre));
                        txtPorComTarCre.setText(objVenConTarCre.getValueAt(8));
                    } else {
                        objVenConTarCre.setCampoBusqueda(0);
                        objVenConTarCre.setCriterio1(11);
                        objVenConTarCre.cargarDatos();
                        objVenConTarCre.setVisible(true);
                        if (objVenConTarCre.getSelectedButton() == ZafVenCon.INT_BUT_ACE) {
                            txtCodTarCre.setText(objVenConTarCre.getValueAt(3));
                            txtNomTarCre.setText(objVenConTarCre.getValueAt(4));
                            txtNomEmiTar.setText(objVenConTarCre.getValueAt(5));
                            txtMesGra.setText(objVenConTarCre.getValueAt(7));
                            dblPorDesTarCre = objUti.redondear(objUti.parseDouble(objVenConTarCre.getValueAt(6)), 2);
                            txtPorDesVenTarCre.setText(String.valueOf(dblPorDesTarCre));
                            txtPorComTarCre.setText(objVenConTarCre.getValueAt(8));
                        } else {
                            txtCodTarCre.setText(strCodTarCre);
                        }
                    }
                    break;
            }
            calculaDescuento();
        } 
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private void habilitarCamposTarCre() 
    {
        this.txtCodTarCre.setEnabled(true);
        this.txtNomTarCre.setEnabled(true);
        this.butConTarCre.setEnabled(true);
        //this.txtNomEmiTar.setEnabled(true);
        //this.txtCodRedTarCre.setText("");
        //this.txtTipCre.setText("");
        //this.txtPorComTarCre.setText("");
        //this.txtPorDesVenTarCre.setText("");
        //this.txtMesGra.setEnabled(true);        
    }

    private void deshabilitarCamposTarCre() 
    {
        this.txtCodTarCre.setEnabled(false);
        txtCodTarCre.setText("");
        this.txtNomTarCre.setEnabled(false);
        txtNomTarCre.setText("");
        this.butConTarCre.setEnabled(false);
        this.txtNomEmiTar.setEditable(false);
        txtNomEmiTar.setText("");
        this.txtCodRedTarCre.setText("");
        this.txtTipCre.setText("");
        this.txtMesGra.setEnabled(false);
        txtMesGra.setText("");
        this.dblPorDesTarCre = 0;
        this.txtPorComTarCre.setText("");
        this.txtPorDesVenTarCre.setText("");
    }

    public void calculaDescuento() 
    {
        double dblPorDesCli = Glo_dlbMaxDes;
        if (intTipForPagCotizacion == 4) 
        {
            for (int i = 0; i < tblDat.getRowCount(); i++) {
                if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                    tblDat.setValueAt("" + objUti.redondear(dblPorDesTarCre, 2), i, INT_TBL_PORDES);
                }
            }
        } 
        else 
        {
            for (int i = 0; i < tblDat.getRowCount(); i++) {
                if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                    tblDat.setValueAt("" + objUti.redondear(dblPorDesCli, 2), i, INT_TBL_PORDES);
                }
            }
        }
        calculaSubTotTodLosItm();
    }

    /**
     * Muestra una ventana donde presenta un historial de la venta del item
     * escojido
     *
     * @param codalt codigo alterno del item
     * @param codcli codigo del cliente
     */
    public void LlamrVentana(String codalt, int codcli)
    {
        Ventas.ZafVen01.ZafVen01_01 obj1 = new Ventas.ZafVen01.ZafVen01_01(javax.swing.JOptionPane.getFrameForComponent(this), true, objZafParSis);
        String strSQL = "";
        int intCodMod = 1;
        strSQL += "select distinct(b.co_doc),a.ne_numcot,a.ne_numdoc,a.tx_nomcli,a.fe_doc,b.co_tipdoc, ( b.nd_can * -1 ) as can, b.nd_preuni,b.nd_pordes";
        strSQL += " from tbm_detmovinv as b,tbm_cabmovinv as a,tbm_cabtipdoc as x";
        strSQL += " where";
        strSQL += " x.ne_mod=" + intCodMod + " and b.co_tipdoc = x.co_tipdoc  and ";
        strSQL += " b.co_itmact= '" + codalt + "' and b.co_emp=" + objZafParSis.getCodigoEmpresa() + " "; // and b.co_loc= "+ objZafParSis.getCodigoLocal();
        strSQL += " and a.co_doc = b.co_doc and a.co_emp = b.co_emp and a.co_loc=b.co_loc and a.co_tipdoc = b.co_tipdoc ";
        strSQL += " and a.st_reg IN ('A','R','D','C','F') ";

        if (codcli != 0)
        {
            strSQL += " and  a.co_cli = " + codcli;
        }

        strSQL += " order by a.fe_doc";
        obj1.cargaTexto(strSQL, codcli);
        obj1.show();
        obj1.dispose();
        obj1 = null;
    }

    /**
     * Configura la tabla de pago
     *
     * @return true si OK 
     * @return false si hay algun error
     */
    private boolean configurarTablaPago() 
    {
        boolean blnRes = false;
        try 
        {
            //Almacena cabeceras
            Vector vecCabPAg = new Vector();                           
            vecCabPAg.clear();
            vecCabPAg.add(INT_TBL_PAGLIN, "");
            vecCabPAg.add(INT_TBL_PAGCRE, "Días.Crédito");
            vecCabPAg.add(INT_TBL_PAGFEC, "Fec.Vencimiento");
            vecCabPAg.add(INT_TBL_PAGRET, "%Retención");
            vecCabPAg.add(INT_TBL_PAGMON, "Monto");
            vecCabPAg.add(INT_TBL_PAGGRA, "Días.Gracia");
            vecCabPAg.add(INT_TBL_PAGCOD, "Cod.Ret");
            vecCabPAg.add(INT_TBL_PAGSOP, "Tx_Sop");
            vecCabPAg.add(INT_TBL_COMSOL, "Compensacion"); // JM 7/Feb/2017
            objTblModPag = new ZafTblMod();
            objTblModPag.setHeader(vecCabPAg);

            tblPag.setModel(objTblModPag);
            tblPag.setRowSelectionAllowed(true);
            tblPag.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            ZafColNumerada zafColNumerada = new ZafColNumerada(tblPag, INT_TBL_PAGLIN);

            objTblModPag.setColumnDataType(INT_TBL_PAGCRE, ZafTblMod.INT_COL_DBL, new Integer(0), null);
            objTblModPag.setColumnDataType(INT_TBL_PAGRET, ZafTblMod.INT_COL_DBL, new Integer(0), null);
            objTblModPag.setColumnDataType(INT_TBL_PAGMON, ZafTblMod.INT_COL_DBL, new Integer(0), null);
            objTblModPag.setColumnDataType(INT_TBL_PAGGRA, ZafTblMod.INT_COL_DBL, new Integer(0), null);

            tblPag.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            TableColumnModel tcmAux = tblPag.getColumnModel();
            //Configurar JTable: Establecer el ancho de las columnas.
            //Tamaño de las celdas
            tcmAux.getColumn(INT_TBL_PAGLIN).setPreferredWidth(25);
            tcmAux.getColumn(INT_TBL_PAGCRE).setPreferredWidth(90);
            tcmAux.getColumn(INT_TBL_PAGFEC).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_PAGRET).setPreferredWidth(90);
            tcmAux.getColumn(INT_TBL_PAGMON).setPreferredWidth(90);
            tcmAux.getColumn(INT_TBL_PAGGRA).setPreferredWidth(90);
            tcmAux.getColumn(INT_TBL_PAGCOD).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_PAGSOP).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_COMSOL).setPreferredWidth(60);
            

            tblPag.getTableHeader().setReorderingAllowed(false);
            tcmAux = null;

        } 
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean Configurartabla() 
    {
        boolean blnRes = false;
        try {
            dblPorIva = bldivaEmp;
            lblIva.setText("IVA " + dblPorIva + "%");

            //Configurar JTable: Establecer el modelo.
            //Almacena los datos
            Vector vecDat = new Vector();   
            //Almacena las cabeceras
            Vector vecCab = new Vector();    
            vecCab.clear();
            vecCab.add(INT_TBL_LINEA, "");
            vecCab.add(INT_TBL_ITMALT, "Cod. Item");
//            vecCab.add(INT_TBL_ITMALTCOD3LET,"Cód.Let.");
            vecCab.add(INT_TBL_BUTITM, "..");
            vecCab.add(INT_TBL_BUTSTK, "..");
            vecCab.add(INT_TBL_BUTSOL, "..");
            vecCab.add(INT_TBL_DESITM, "Descripcion");
            vecCab.add(INT_TBL_UNIDAD, "Unidad");
            vecCab.add(INT_TBL_CODBOD, "Bodega");
            vecCab.add(INT_TBL_BUTBOD, "..");
            vecCab.add(INT_TBL_TRATOT, "Tranf.Tot.");
            vecCab.add(INT_TBL_CANMOV, "Cantidad");
            vecCab.add(INT_TBL_PREUNI, "Precio");
            vecCab.add(INT_TBL_PORDES, "%Desc");
            vecCab.add(INT_TBL_BLNIVA, "IVA");
            vecCab.add(INT_TBL_TOTAL, "Total");
            vecCab.add(INT_TBL_PESTOT, "Pes.Tot.");   /* José Marín - 20/Oct/2015 */
            vecCab.add(INT_TBL_CODITM, "coditm");
            vecCab.add(INT_TBL_ESTADO, "estado");
            vecCab.add(INT_TBL_IVATXT, "ivatxt");
            vecCab.add(INT_TBL_PRE_COS, "Pre.Com.");                            //Columna que contiene  precio de compra
            vecCab.add(INT_TBL_DESPRECOM, " %Desc.");
            vecCab.add(INT_TBL_COD_PRO, "Cod.prv.");                            //Columna que contiene el codigo del proveedor
            vecCab.add(INT_TBL_NOM_PRO, "Proveedor");                           //Columna que contiene el Nombre del proveedor
            vecCab.add(INT_TBL_BUT_PRO, "..");
            vecCab.add(INT_TBL_BLNPRE, "blnpre");
            vecCab.add(INT_TBL_ITMALT2, "ItmAlt2");
            vecCab.add(INT_TBL_ITMSER, "Itm.SER.");
            vecCab.add(INT_TBL_ITMTER, " isTerL");
            vecCab.add(INT_TBL_CODBODPRV, "Cód.Bod");
            vecCab.add(INT_TBL_NOMBODPRV, "Nom.Bod");
            vecCab.add(INT_TBL_BUTBODPRV, "");
            vecCab.add(INT_TBL_MARUTI, "Mar.Uti.");
            vecCab.add(INT_TBL_IEBODFIS, "IE.Fis.Bod");
            vecCab.add(INT_TBL_MODNOMITM, "Mod.Nom.Itm");
            vecCab.add(INT_TBL_COLOCREL, "Cod.Loc.Rel");
            vecCab.add(INT_TBL_COTIPDOCREL, "Tip.Doc.Rel");
            vecCab.add(INT_TBL_CODOCREL, "Cod.Doc.Rel");
            vecCab.add(INT_TBL_COREGREL, "Cod.Reg.Rel");
            vecCab.add(INT_TBL_COLOCRELSOL, "Cod.Loc.Rel");
            vecCab.add(INT_TBL_COTIPDOCRELSOL, "Tip.Doc.Rel");
            vecCab.add(INT_TBL_CODOCRELSOL, "Cod.Doc.Rel");
            vecCab.add(INT_TBL_COREGRELSOL, "Cod.Reg.Rel");
            vecCab.add(INT_TBL_COLOCRELOC, "Cod.Loc.Rel");
            vecCab.add(INT_TBL_COTIPDOCRELOC, "Tip.Doc.Rel");
            vecCab.add(INT_TBL_CODOCRELOC, "Cod.Doc.Rel");
            vecCab.add(INT_TBL_COREGRELOC, "Cod.Reg.Rel");
            vecCab.add(INT_TBL_PRELISITM, "Pre.Lis.Itm");
            vecCab.add(INT_TBL_PRELISITM2, "Pre.Lis.Itm2");
            vecCab.add(INT_TBL_CANORI, "");
            vecCab.add(INT_TBL_PREORI, "");
            vecCab.add(INT_TBL_DESORI, "");
            vecCab.add(INT_TBL_DESVENMAX, "Por.Des.Ven.MAx");
            vecCab.add(INT_TBL_NUMFILCOMPVEN, "");
            vecCab.add(INT_TBL_MAXDESCOM, "MaxDesCom");
            vecCab.add(INT_TBL_DATBODCOM, "datCom");
            vecCab.add(INT_TBL_CODREGCOT, "CodReg");
            vecCab.add(INT_TBL_CANVENRES, "CANVENRES");
            vecCab.add(INT_TBL_PREVTARES, "PREVTARES");
            vecCab.add(INT_TBL_PORDESRES, "PORDESRES");
            vecCab.add(INT_TBL_CODITMRES, "CODITMRES");
            vecCab.add(INT_TBL_TIPUNIMED, "TIPUNIMED");
            vecCab.add(INT_TBL_BLOPREVTA, "Blo.Pre.Vta");
            vecCab.add(INT_TBL_DESITMORI, "Des.Itm.");
            vecCab.add(INT_TBL_CLIRETBOD, "Item ret otr bod");
            vecCab.add(INT_TBL_CANCLIRETBOD, "can Itm ret bod");
            vecCab.add(INT_TBL_CODCTAEGR, "Cód.Cta.Egr.");
            vecCab.add(INT_TBL_PESITM, "Pes.Itm."); /* José Marín 2015/Oct/21 */
            vecCab.add(INT_TBL_ESTRES,"Est.Res.");  /* JoseMario 2017/Mar/16 Estado de reserva */
            
            /* JM Reservas 1/Agosto/2017 */
            vecCab.add(INT_TBL_COD_EMP_COT_RES,"JM:Cod.Emp.Cot.Res.");   
            vecCab.add(INT_TBL_COD_LOC_COT_RES,"JM:Cod.Loc.Cot.Res.");   
            vecCab.add(INT_TBL_COD_COT_RES,"JM:Cod.Cot.Res.");  
            vecCab.add(INT_TBL_COD_COT_REG_RES,"JM:Cod.Reg.Cot.Res.");  
            
            vecCab.add(INT_TBL_CAN_COT_RES,"JM:Cant.Res.");   
            /* JM Reservas 1/Agosto/2017 */

            objTblMod = new ZafTblMod();  // ---- 
            
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            ZafColNumerada zafColNumerada = new ZafColNumerada(tblDat, INT_TBL_LINEA);

            objTblMod.setColumnDataType(INT_TBL_CANMOV, ZafTblMod.INT_COL_DBL, new Integer(0), null);
            objTblMod.setColumnDataType(INT_TBL_PREUNI, ZafTblMod.INT_COL_DBL, new Integer(0), null);
            objTblMod.setColumnDataType(INT_TBL_PORDES, ZafTblMod.INT_COL_DBL, new Integer(0), null);
            objTblMod.setColumnDataType(INT_TBL_TOTAL, ZafTblMod.INT_COL_DBL, new Integer(0), null);
            objTblMod.setColumnDataType(INT_TBL_PESTOT, ZafTblMod.INT_COL_DBL, new Integer(0), null);  /* José Marín - 21/Oct/2015 */
            objTblMod.setColumnDataType(INT_TBL_PRE_COS, ZafTblMod.INT_COL_DBL, new Integer(0), null);
            objTblMod.setColumnDataType(INT_TBL_DESPRECOM, ZafTblMod.INT_COL_DBL, new Integer(0), null);
            objTblMod.setColumnDataType(INT_TBL_PESITM, ZafTblMod.INT_COL_DBL, new Integer(0), null);  /* José Marín - 21-Oct-2015 */
            //Configurar ZafTblMod: Establecer las columnas obligatorias.
            ArrayList arlAux = new ArrayList();
            arlAux.add("" + INT_TBL_ITMALT);
            arlAux.add("" + INT_TBL_CODBOD);
            arlAux.add("" + INT_TBL_CANMOV);
            objTblMod.setColumnasObligatorias(arlAux);
            arlAux = null;
            
            //Configurar ZafTblMod: Establecer el color de fondo de las filas incompletas.
            objTblMod.setBackgroundIncompleteRows(objZafParSis.getColorCamposObligatorios());  

            //Configurar JTable: Establecer el menú de contexto.
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            TableColumnModel tcmAux = tblDat.getColumnModel();
            //Configurar JTable: Establecer el ancho de las columnas.

            //Tamaño de las celdas
            tcmAux.getColumn(INT_TBL_LINEA).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_ITMALT).setPreferredWidth(80);
//            tcmAux.getColumn(INT_TBL_ITMALTCOD3LET).setPreferredWidth(40);  /* JoséMario 4/Ene/2015 */
            tcmAux.getColumn(INT_TBL_BUTITM).setPreferredWidth(10);
            tcmAux.getColumn(INT_TBL_BUTSTK).setPreferredWidth(10);
            tcmAux.getColumn(INT_TBL_BUTSOL).setPreferredWidth(10);
            tcmAux.getColumn(INT_TBL_DESITM).setPreferredWidth(220);
            tcmAux.getColumn(INT_TBL_UNIDAD).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_BUTBOD).setPreferredWidth(10);
            tcmAux.getColumn(INT_TBL_TRATOT).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_CANMOV).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_PREUNI).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_PORDES).setPreferredWidth(55);
            tcmAux.getColumn(INT_TBL_BLNIVA).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_TOTAL).setPreferredWidth(55);
            
            tcmAux.getColumn(INT_TBL_PESTOT).setPreferredWidth(55);  /* José Marín - 20/Oct/2015 */
            
            tcmAux.getColumn(INT_TBL_PRE_COS).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DESPRECOM).setPreferredWidth(55);
            tcmAux.getColumn(INT_TBL_NOM_PRO).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_BUT_PRO).setPreferredWidth(10);
            tcmAux.getColumn(INT_TBL_BUTBODPRV).setPreferredWidth(10);
            tcmAux.getColumn(INT_TBL_PESITM).setPreferredWidth(10);
             tcmAux.getColumn(INT_TBL_ESTRES).setPreferredWidth(10); /* JM RESERVAS 30/Marzo/2017 */
            
             
            /* JM Reservas 1/Agosto/2017 */
            tcmAux.getColumn(INT_TBL_COD_EMP_COT_RES).setPreferredWidth(10);
            tcmAux.getColumn(INT_TBL_COD_LOC_COT_RES).setPreferredWidth(10);
            tcmAux.getColumn(INT_TBL_COD_COT_RES).setPreferredWidth(10);
            tcmAux.getColumn(INT_TBL_COD_COT_REG_RES).setPreferredWidth(10);
            tcmAux.getColumn(INT_TBL_CAN_COT_RES).setPreferredWidth(10);
            /* JM Reservas 1/Agosto/2017 */
            
            /* Columnas que van a ser ocultas */
            ArrayList arlColHid = new ArrayList();
            arlColHid.add("" + INT_TBL_TRATOT);
            arlColHid.add("" + INT_TBL_CODBOD);
            arlColHid.add("" + INT_TBL_BUTBOD);
            arlColHid.add("" + INT_TBL_CODITM);
            arlColHid.add("" + INT_TBL_IVATXT);
            arlColHid.add("" + INT_TBL_COD_PRO);
            arlColHid.add("" + INT_TBL_BLNPRE);
            arlColHid.add("" + INT_TBL_ESTADO);
            arlColHid.add("" + INT_TBL_ITMALT2);
            arlColHid.add("" + INT_TBL_ITMSER);
            arlColHid.add("" + INT_TBL_ITMTER);
            arlColHid.add("" + INT_TBL_CODBODPRV);
            arlColHid.add("" + INT_TBL_IEBODFIS);
            arlColHid.add("" + INT_TBL_MODNOMITM);
            arlColHid.add("" + INT_TBL_COLOCREL);
            arlColHid.add("" + INT_TBL_COTIPDOCREL);
            arlColHid.add("" + INT_TBL_CODOCREL);
            arlColHid.add("" + INT_TBL_COREGREL);
            arlColHid.add("" + INT_TBL_COLOCRELSOL);
            arlColHid.add("" + INT_TBL_COTIPDOCRELSOL);
            arlColHid.add("" + INT_TBL_CODOCRELSOL);
            arlColHid.add("" + INT_TBL_COREGRELSOL);
            arlColHid.add("" + INT_TBL_COLOCRELOC);
            arlColHid.add("" + INT_TBL_COTIPDOCRELOC);
            arlColHid.add("" + INT_TBL_CODOCRELOC);
            arlColHid.add("" + INT_TBL_COREGRELOC);
            if (objZafParSis.getCodigoUsuario() != 90)                          //Ocultar columna para usuarios distintos apaulson
            {
                arlColHid.add("" + INT_TBL_PRELISITM);
            }
            arlColHid.add("" + INT_TBL_PRELISITM2);
            arlColHid.add("" + INT_TBL_CANORI);
            arlColHid.add("" + INT_TBL_PREORI);
            arlColHid.add("" + INT_TBL_DESORI);
            arlColHid.add("" + INT_TBL_DESVENMAX);
            arlColHid.add("" + INT_TBL_MAXDESCOM);
            arlColHid.add("" + INT_TBL_NUMFILCOMPVEN);
            arlColHid.add("" + INT_TBL_DATBODCOM);
            arlColHid.add("" + INT_TBL_CODREGCOT);
            arlColHid.add("" + INT_TBL_CANVENRES);
            arlColHid.add("" + INT_TBL_PREVTARES);
            arlColHid.add("" + INT_TBL_PORDESRES);
            arlColHid.add("" + INT_TBL_CODITMRES);
            arlColHid.add("" + INT_TBL_TIPUNIMED);
            arlColHid.add("" + INT_TBL_BLOPREVTA);
            arlColHid.add("" + INT_TBL_DESITMORI);
            arlColHid.add("" + INT_TBL_CLIRETBOD);
            arlColHid.add("" + INT_TBL_CANCLIRETBOD);
            arlColHid.add("" + INT_TBL_CODCTAEGR);

            if (!((intValBus == 3) || (intValBus == 4))) 
            {
                arlColHid.add("" + INT_TBL_BUTSOL);
            }
            if (_INT_ESQ_COM_VEN_COMP == 1) 
            {
                arlColHid.add("" + INT_TBL_BUTSTK);
            }
//            arlColHid.add("" + INT_TBL_PESITM);  /* José Marín - 21/Oct/2015 */
            arlColHid.add(""+INT_TBL_ESTRES); /* JoseMario 30/Mar/2017 */
            
            /* JM Reservas 1/Agosto/2017 */
            arlColHid.add(""+INT_TBL_COD_EMP_COT_RES);
            arlColHid.add(""+INT_TBL_COD_LOC_COT_RES);
            arlColHid.add(""+INT_TBL_COD_COT_RES);
            arlColHid.add(""+INT_TBL_COD_COT_REG_RES);
            arlColHid.add(""+INT_TBL_CAN_COT_RES);
            /* JM Reservas 1/Agosto/2017 */
            
            objTblMod.setSystemHiddenColumns(arlColHid, tblDat);
            arlColHid = null;
            tblDat.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            tblDat.getTableHeader().setReorderingAllowed(false);
            objMouMotAda = new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            
            //Configurar JTable: Establecer columnas editables.
            Vector vecAux = new Vector();
            vecAux.add("" + INT_TBL_ITMALT);
//            vecAux.add("" + INT_TBL_ITMALTCOD3LET);  /* JoséMario 4/Ene/2015 */
            vecAux.add("" + INT_TBL_BUTITM);
            vecAux.add("" + INT_TBL_BUTSTK);
            vecAux.add("" + INT_TBL_BUTSOL);
            vecAux.add("" + INT_TBL_CODBOD);
            vecAux.add("" + INT_TBL_BUTBOD);
            vecAux.add("" + INT_TBL_TRATOT);
            vecAux.add("" + INT_TBL_CANMOV);
            vecAux.add("" + INT_TBL_PREUNI);
            vecAux.add("" + INT_TBL_PORDES);
            vecAux.add("" + INT_TBL_DESPRECOM);
            vecAux.add("" + INT_TBL_PRE_COS);
            vecAux.add("" + INT_TBL_NOM_PRO);
            vecAux.add("" + INT_TBL_BUT_PRO);
            vecAux.add("" + INT_TBL_DESITM);
            vecAux.add("" + INT_TBL_BUTBODPRV);

            objTblMod.setColumnasEditables(vecAux);
            vecAux = null;
            //Configurar JTable: Editor de la tabla.
            ZafTblEdi zafTblEdi = new ZafTblEdi(tblDat);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk = new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_BLNIVA).setCellRenderer(objTblCelRenChk);
            tcmAux.getColumn(INT_TBL_TRATOT).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk = null;

            objTblCelEdiChk = new ZafTblCelEdiChk();
            tcmAux.getColumn(INT_TBL_BLNIVA).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                @Override
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    int intNumFil = tblDat.getSelectedRow();

                    blnChangeData = false;
                    if (tblDat.getValueAt(intNumFil, INT_TBL_BLNIVA) != null) {
                        strBeforeValue = tblDat.getValueAt(intNumFil, INT_TBL_BLNIVA).toString();
                    }

                    if (tblDat.getValueAt(intNumFil, INT_TBL_ESTADO) == null) {
                        tblDat.setValueAt("V", intNumFil, INT_TBL_ESTADO);
                    }
                }

                @Override
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    int intNumFil = tblDat.getSelectedRow();
                    if (tblDat.getValueAt(intNumFil, INT_TBL_BLNIVA) != null) {
                        strAfterValue = tblDat.getValueAt(intNumFil, INT_TBL_BLNIVA).toString();
                    }

                    if ((tblDat.getValueAt(intNumFil, INT_TBL_ESTADO).toString().equals("M") || tblDat.getValueAt(intNumFil, INT_TBL_ESTADO).toString().equals("E")) && tblDat.getValueAt(intNumFil, INT_TBL_ITMALT) == null) {
                        tblDat.setValueAt("D", intNumFil, INT_TBL_ESTADO);
                    } else if (tblDat.getValueAt(intNumFil, INT_TBL_ESTADO).toString().equals("V")) {
                        if (tblDat.getValueAt(intNumFil, INT_TBL_ITMALT) != null) {
                            tblDat.setValueAt("N", intNumFil, INT_TBL_ESTADO);
                        }
                    } else if (tblDat.getValueAt(intNumFil, INT_TBL_ESTADO).toString().equals("N")) {
                        if (tblDat.getValueAt(intNumFil, INT_TBL_ITMALT) == null) {
                            tblDat.setValueAt("V", intNumFil, INT_TBL_ESTADO);
                        }
                    } else if (tblDat.getValueAt(intNumFil, INT_TBL_ESTADO).toString().equals("E") || tblDat.getValueAt(intNumFil, INT_TBL_ESTADO).toString().equals("D")) {
                        tblDat.setValueAt("M", intNumFil, INT_TBL_ESTADO);
                    }

                    if (!tblDat.getValueAt(intNumFil, INT_TBL_ESTADO).toString().equals("V") && !(strBeforeValue.equals(strAfterValue)) && !blnChangeData) {
                        calculaSubTot();
                        blnChangeData = true;
                    }
                }
            });


            objTblCelRenLbl2 = new Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl();
            tcmAux.getColumn(INT_TBL_ITMALT).setCellRenderer(objTblCelRenLbl2);
//            tcmAux.getColumn(INT_TBL_ITMALTCOD3LET).setCellRenderer(objTblCelRenLbl2);
            tcmAux.getColumn(INT_TBL_DESITM).setCellRenderer(objTblCelRenLbl2);
            tcmAux.getColumn(INT_TBL_UNIDAD).setCellRenderer(objTblCelRenLbl2);
            objTblCelRenLbl2 = null;


            objTblCelEdiTxtNomItm = new Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt(tblDat);
            tcmAux.getColumn(INT_TBL_DESITM).setCellEditor(objTblCelEdiTxtNomItm);
            objTblCelEdiTxtNomItm.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                @Override
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) 
                {
                    /* int intNumFil = tblDat.getSelectedRow();
                     if(intNumFil >= 0 ) {
                     blnChangeData = false;
                     String strTipTer = ((tblDat.getValueAt(intNumFil, INT_TBL_MODNOMITM)==null)?"":tblDat.getValueAt(intNumFil, INT_TBL_MODNOMITM).toString());
                        
                     if(!(strTipTer.trim().equals("S"))) {
                     objTblCelEdiTxtNomItm.setCancelarEdicion(true);
                     }}
                     */
                }

                @Override
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) 
                {
                    /*  int intNumFil = tblDat.getSelectedRow();
                     if(intNumFil >= 0 ) {
                     blnChangeData = false;
                     String strTipTer = ((tblDat.getValueAt(intNumFil, INT_TBL_MODNOMITM)==null)?"":tblDat.getValueAt(intNumFil, INT_TBL_MODNOMITM).toString());
                        
                     if(!(strTipTer.trim().equals("S"))) {
                     objTblCelEdiTxtNomItm.setCancelarEdicion(true);
                     }}
                     */
                }
            });

            objTblCelRenLbl = new Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl();
            objTblCelRenLbl.setBackground(objZafParSis.getColorCamposObligatorios());
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(ZafTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico("######", true, true);
            tcmAux.getColumn(INT_TBL_CODBOD).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl = null;
            
            objTblCelRenLbl = new Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl();
            objTblCelRenLbl.setBackground(objZafParSis.getColorCamposObligatorios());
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(ZafTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objZafParSis.getFormatoNumero(), true, true);
            tcmAux.getColumn(INT_TBL_CANMOV).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_PORDES).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_PREUNI).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_PRE_COS).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DESPRECOM).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_TOTAL).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_PESTOT).setCellRenderer(objTblCelRenLbl);            
            objTblCelRenLbl = null;

            objTblCelRenBut = new Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut();
            tcmAux.getColumn(INT_TBL_BUT_PRO).setCellRenderer(objTblCelRenBut);
            tcmAux.getColumn(INT_TBL_BUTITM).setCellRenderer(objTblCelRenBut);
            tcmAux.getColumn(INT_TBL_BUTSTK).setCellRenderer(objTblCelRenBut);
            tcmAux.getColumn(INT_TBL_BUTSOL).setCellRenderer(objTblCelRenBut);
            objTblCelRenBut = null;
            
            //Configurar JTable: Editor de celdas.
            //Armar la sentencia SQL.
            String strSQL = "";
            strSQL = " select distinct bod.co_bod, bod.tx_nom from tbm_bod as bod left outer join tbr_bodLoc as bodloc on ( bod.co_emp = bodloc.co_emp and bod.co_bod = bodloc.co_bod) where bod.co_emp = " + objZafParSis.getCodigoEmpresa()
                   + " and bodloc.co_loc = " + objZafParSis.getCodigoLocal();
            int intColVenBod[] = new int[1];
            intColVenBod[0] = 1;
            int intColTblBod[] = new int[1];
            intColTblBod[0] = INT_TBL_CODBOD;
            objTblCelEdiTxtCon = new Librerias.ZafTblUti.ZafTblCelEdiTxtCon.ZafTblCelEdiTxtCon("Listado Bodega", tblDat, objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), strSQL, "tbm_bod.co_bod, tbm_bod.tx_nom", "Codigo,Nombre", intColVenBod, intColTblBod);
            objTblCelEdiTxtCon.setIndiceCampoBusqueda(0);
            objTblCelEdiTxtCon.setCampoBusqueda("bod.co_bod", ZafTblCelEdiTxtCon.INT_CAM_NUM);
            objTblCelEdiTxtCon.setIndiceTipoBusqueda(2);
            tcmAux.getColumn(INT_TBL_CODBOD).setCellEditor(objTblCelEdiTxtCon);
            objTblCelEdiTxtCon = null;
            objTblCelEdiBut = new Librerias.ZafTblUti.ZafTblCelEdiBut.ZafTblCelEdiBut("Listado Bodega", tblDat, objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), strSQL, "tbm_bod.co_bod, tbm_bod.tx_nom", "Codigo,Nombre", intColVenBod, intColTblBod);
            tcmAux.getColumn(INT_TBL_BUTBOD).setCellEditor(objTblCelEdiBut);
            objTblCelEdiBut = null;
            intColVenBod = null;
            intColTblBod = null;

            int intColVen3[] = new int[3];
            intColVen3[0] = 3;
            intColVen3[1] = 1;
            intColVen3[2] = 5;
            int intColTbl3[] = new int[3];
            intColTbl3[0] = INT_TBL_COD_PRO;
            intColTbl3[1] = INT_TBL_NOM_PRO;
            intColTbl3[2] = INT_TBL_MAXDESCOM;
            
            /* ************************************************************************************ */
            objTblCelEdiTxtVcoPrv = new ZafTblCelEdiTxtVco(tblDat, objVenCon, intColVen3, intColTbl3); 
            tcmAux.getColumn(INT_TBL_NOM_PRO).setCellEditor(objTblCelEdiTxtVcoPrv);  
            objTblCelEdiTxtVcoPrv.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {  
                @Override
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    int intNumFil = tblDat.getSelectedRow();
                    if (intNumFil >= 0) {
                        blnChangeData = false;
                        String strTipTer = ((tblDat.getValueAt(intNumFil, INT_TBL_ITMTER) == null) ? "" : tblDat.getValueAt(intNumFil, INT_TBL_ITMTER).toString());

                        if (!(strTipTer.trim().equals("S"))) {
                            objTblCelEdiTxtVcoPrv.setCancelarEdicion(true);
                        }
                    }

                }

                @Override
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {

                    int intNumFil = tblDat.getSelectedRow();
                    if (intNumFil >= 0) {
                        blnChangeData = false;
                        String strTipTer = ((tblDat.getValueAt(intNumFil, INT_TBL_ITMTER) == null) ? "" : tblDat.getValueAt(intNumFil, INT_TBL_ITMTER).toString());

                        if (!(strTipTer.trim().equals("S"))) {
                            objTblCelEdiTxtVcoPrv.setCancelarEdicion(true);
                        }
                    }

                }
            });

            ButFndPrv butFndPrv = new ButFndPrv(tblDat, INT_TBL_BUT_PRO); 
 

            /* ************************************************************************************ */
            objTblCelEdiBut2Itm = new ZafTblCelEdiButVco2(tblDat);
            tcmAux.getColumn(INT_TBL_BUTSTK).setCellEditor(objTblCelEdiBut2Itm);
            objTblCelEdiBut2Itm.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                @Override
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {

                    int intNumFil = tblDat.getSelectedRow();
                    if (intNumFil >= 0) 
                    {
                        blnChangeData = false;
                        
                        String strCodItm = ((tblDat.getValueAt(intNumFil, INT_TBL_CODITM) == null) ? "" : tblDat.getValueAt(intNumFil, INT_TBL_CODITM).toString());
                        llamarVentanaStkEmp(strCodItm);
                         
                    }

                }
            });
            //  objTblCelEdiBut2Itm=null;                                 

            vecLoc = new java.util.Vector();
            vecEmp = new java.util.Vector();

            
            int intColVen2[] = new int[19];
            intColVen2[0]  = 1;
            intColVen2[1]  = 3;
            intColVen2[2]  = 6;
            intColVen2[3]  = 11;
            intColVen2[4]  = 7;
            intColVen2[5]  = 8;
            intColVen2[6]  = 2;
            intColVen2[7]  = 9;
            intColVen2[8]  = 10;
            intColVen2[9]  = 12;
            intColVen2[10] = 13;
            intColVen2[11] = 14;
            intColVen2[12] = 6;
            intColVen2[13] = 6;
            intColVen2[14] = 16;
            intColVen2[15] = 17;
            intColVen2[16] = 3;
            intColVen2[17] = 19;
            intColVen2[18] = 15;

            int intColTbl2[] = new int[19];
            intColTbl2[0]  = INT_TBL_ITMALT;
            intColTbl2[1]  = INT_TBL_DESITM;
            intColTbl2[2]  = INT_TBL_PREUNI;
            intColTbl2[3]  = INT_TBL_CODITM;
            intColTbl2[4]  = INT_TBL_IVATXT;
            intColTbl2[5]  = INT_TBL_UNIDAD;
            intColTbl2[6]  = INT_TBL_ITMALT2;//<===
            intColTbl2[7]  = INT_TBL_ITMSER;
            intColTbl2[8]  = INT_TBL_ITMTER;
            intColTbl2[9]  = INT_TBL_MARUTI;
            intColTbl2[10] = INT_TBL_IEBODFIS;
            intColTbl2[11] = INT_TBL_MODNOMITM;
            intColTbl2[12] = INT_TBL_PRELISITM;
            intColTbl2[13] = INT_TBL_PRELISITM2;
            intColTbl2[14] = INT_TBL_TIPUNIMED;
            intColTbl2[15] = INT_TBL_BLOPREVTA;
            intColTbl2[16] = INT_TBL_DESITMORI;
            intColTbl2[17] = INT_TBL_CODCTAEGR;
            intColTbl2[18] = INT_TBL_PESITM;
            
            //jutita  2017/Sep/18
            /* ************************************************************************************ */
            objTblCelEdiTxtVcoItm = new ZafTblCelEdiTxtVco2(tblDat, objVenCon2, intColVen2, intColTbl2, objZafParSis);  
            tcmAux.getColumn(INT_TBL_ITMALT).setCellEditor(objTblCelEdiTxtVcoItm);
            objTblCelEdiTxtVcoItm.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                @Override
                public void beforeConsultar(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    objVenCon2.setCampoBusqueda(0);
                    objVenCon2.setCriterio1(11);
                    blnChangeData = false;
                }

                @Override
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                     objTblMod.setValueAt(intCodBodPre, tblDat.getSelectedRow(), INT_TBL_CODBOD);
                    if(!objTblMod.isRowEmpty(tblDat.getSelectedRow())){
                        if (objTblCelEdiTxtVcoItm.isConsultaAceptada()) {
//                            eventoVenCon();
                            if (controlJota(tblDat.getSelectedRow())) { /*JM*/
                                Mensaje("ESTE ITEM YA ESTA AGREGADO EN LA COTIZACIÓN. ");
                                int i, intFilSel[];

                                intFilSel = tblDat.getSelectedRows();
                                for (i = 0; i < intFilSel.length; i++) {
                                    objTblMod.removeRow(intFilSel[i] - i);
                                }
                                intFilSel = null;

                            } else {
                                eventoVenCon();
                            }
                        }
                    }
                }
            });
             
            /* ************************************************************************************ */
            
            // ButFndItm ObjFndItm = new ButFndItm(tblDat, INT_TBL_BUTITM);   
            objTblCelEdiButVcoItm = new ZafTblCelEdiButVco(tblDat, objVenCon2, intColVen2, intColTbl2);
            tcmAux.getColumn(INT_TBL_BUTITM).setCellEditor(objTblCelEdiButVcoItm);
            objTblCelEdiButVcoItm.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                @Override
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if (objTblCelEdiButVcoItm.isConsultaAceptada()) {
//                        eventoVenCon();
                        if (controlJota(tblDat.getSelectedRow())) { /*JM Validacion del mismo item*/
                            System.out.println("CONTROL");
                            Mensaje("ESTE ITEM YA ESTA AGREGADO EN LA COTIZACIÓN. ");
                            int i, intFilSel[];

                            intFilSel = tblDat.getSelectedRows();
                            for (i = 0; i < intFilSel.length; i++) {
                                objTblMod.removeRow(intFilSel[i] - i);
                            }
                            intFilSel = null;

                        } else {
                            eventoVenCon();
                        }
                    }
                    
                
                }
            });
            
            
            
/*************************************************************************************************************************************** */
          

            int intColVenSol[] = new int[18];
            intColVenSol[0] = 1;
            intColVenSol[1] = 3;
            intColVenSol[2] = 6;
            intColVenSol[3] = 11;
            intColVenSol[4] = 7;
            intColVenSol[5] = 8;
            intColVenSol[6] = 2;
            intColVenSol[7] = 9;
            intColVenSol[8] = 10;
            intColVenSol[9] = 12;
            intColVenSol[10] = 13;
            intColVenSol[11] = 14;
            intColVenSol[12] = 15;
            intColVenSol[13] = 16;
            intColVenSol[14] = 17;
            intColVenSol[15] = 18;
            intColVenSol[16] = 4;
            intColVenSol[17] = 3;

            int intColTblSol[] = new int[18];
            intColTblSol[0] = INT_TBL_ITMALT;
            intColTblSol[1] = INT_TBL_DESITM;
            intColTblSol[2] = INT_TBL_PREUNI;
            intColTblSol[3] = INT_TBL_CODITM;
            intColTblSol[4] = INT_TBL_IVATXT;
            intColTblSol[5] = INT_TBL_UNIDAD;
            intColTblSol[6] = INT_TBL_ITMALT2;
            intColTblSol[7] = INT_TBL_ITMSER;
            intColTblSol[8] = INT_TBL_ITMTER;
            intColTblSol[9] = INT_TBL_MARUTI;
            intColTblSol[10] = INT_TBL_IEBODFIS;
            intColTblSol[11] = INT_TBL_MODNOMITM;
            intColTblSol[12] = INT_TBL_COLOCREL;
            intColTblSol[13] = INT_TBL_COTIPDOCREL;
            intColTblSol[14] = INT_TBL_CODOCREL;
            intColTblSol[15] = INT_TBL_COREGREL;
            intColTblSol[16] = INT_TBL_CANMOV;
            intColTblSol[17] = INT_TBL_DESITMORI;

            
             
            
            
            objTblCelEdiButVcoSolItm = new ZafTblCelEdiButVco(tblDat, objVenConSolItm, intColVenSol, intColTblSol);
            tcmAux.getColumn(INT_TBL_BUTSOL).setCellEditor(objTblCelEdiButVcoSolItm);
            objTblCelEdiButVcoSolItm.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                @Override
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if (objTblCelEdiButVcoSolItm.isConsultaAceptada()) {
                        eventoVenCon();
                    }
                }
            });
            intColVen2 = null;
            intColTbl2 = null;
            intColVenSol = null;
            intColTblSol = null;
            intColVen3 = null;
            intColTbl3 = null;

            /* ************************************************************************************ */
            objTblCelEdiTxt = new Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt(tblDat);
            tcmAux.getColumn(INT_TBL_CANMOV).setCellEditor(objTblCelEdiTxt);
            tcmAux.getColumn(INT_TBL_PREUNI).setCellEditor(objTblCelEdiTxt);
            tcmAux.getColumn(INT_TBL_PREUNI).setCellRenderer(new RenderDecimales(intNumDec));
            tcmAux.getColumn(INT_TBL_PORDES).setCellEditor(objTblCelEdiTxt);
            objTblCelEdiTxt.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                double dblCantidad=0.00;
                boolean blnIsItmRes=false;
                int intNumFil=-1;
                @Override
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intNumFil = tblDat.getSelectedRow();
//                    System.out.println("BEFORE EDIT!!! " + intNumFil);
                    blnChangeData = false;
                    String strBloPre = "";
                    if (tblDat.getValueAt(intNumFil, tblDat.getSelectedColumn()) != null) {
                        strBeforeValue = tblDat.getValueAt(intNumFil, tblDat.getSelectedColumn()).toString();
                    } else {
                        strBeforeValue = "";
                    }

                    if (tblDat.getValueAt(intNumFil, INT_TBL_ESTADO) == null) {
//                        System.out.println("INT_TBL_ESTADO NULO!!!");
                        tblDat.setValueAt("V", intNumFil, INT_TBL_ESTADO);
                    }

                    if (tblDat.getSelectedColumn() == INT_TBL_PREUNI) {
                        strBloPre = objInvItm.getStringDatoValidado(tblDat.getValueAt(intNumFil, INT_TBL_BLOPREVTA));
                        if (strBloPre.equals("S")) {
                            objTblCelEdiTxt.setCancelarEdicion(true);
                        }
                    }
                    if (tblDat.getSelectedColumn() == INT_TBL_PORDES) {
                        strBloPre = objInvItm.getStringDatoValidado(tblDat.getValueAt(intNumFil, INT_TBL_BLOPREVTA));
                        if (strBloPre.equals("S")) {
                            objTblCelEdiTxt.setCancelarEdicion(true);
                        }
                    }
                    if (tblDat.getSelectedColumn() == INT_TBL_CANMOV) {
                        if(tblDat.getValueAt(intNumFil,INT_TBL_CANMOV)!=null ){
                            if(tblDat.getValueAt(intNumFil,INT_TBL_CANMOV).toString().length()>0){
                                dblCantidad=objUti.redondear(tblDat.getValueAt(intNumFil,INT_TBL_CANMOV).toString(), 4 );
                                blnIsItmRes = isItmRes(intNumFil);
                            }
                        }
                    }
                }

                @Override
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    //int intNumFil = tblDat.getSelectedRow();
//                    System.out.println("AFTER EDIT " + intNumFil);
//                    System.out.println("AFTER EDIT " + tblDat.getValueAt(intNumFil, INT_TBL_ITMALT));
                    tblDat.setValueAt(null, intNumFil, INT_TBL_BLNPRE);

                    if (tblDat.getValueAt(intNumFil, tblDat.getSelectedColumn()) != null) {
                        strAfterValue = tblDat.getValueAt(intNumFil, tblDat.getSelectedColumn()).toString();
                    } else {
                        strAfterValue = "";
                    }
                     
                    if ((tblDat.getValueAt(intNumFil, INT_TBL_ESTADO).toString().equals("M") || tblDat.getValueAt(intNumFil, INT_TBL_ESTADO).toString().equals("E")) && tblDat.getValueAt(intNumFil, INT_TBL_ITMALT) == null) {
                        tblDat.setValueAt("D", intNumFil, INT_TBL_ESTADO);
                    } else if (tblDat.getValueAt(intNumFil, INT_TBL_ESTADO).toString().equals("V")) {
                        if (tblDat.getValueAt(intNumFil, INT_TBL_ITMALT) != null) {
                            tblDat.setValueAt("N", intNumFil, INT_TBL_ESTADO);
                        }
                    } else if (tblDat.getValueAt(intNumFil, INT_TBL_ESTADO).toString().equals("N")) {
                        if (tblDat.getValueAt(intNumFil, INT_TBL_ITMALT) == null) {
                            tblDat.setValueAt("V", intNumFil, INT_TBL_ESTADO);
                        }
                    } else if (tblDat.getValueAt(intNumFil, INT_TBL_ESTADO).toString().equals("E") || tblDat.getValueAt(intNumFil, INT_TBL_ESTADO).toString().equals("D")) {
                        tblDat.setValueAt("M", intNumFil, INT_TBL_ESTADO);
                    }
                     
                   
                    

                    if (tblDat.getValueAt(intNumFil, tblDat.getSelectedColumn()) == null || tblDat.getValueAt(intNumFil, tblDat.getSelectedColumn()).equals("")) {
                        tblDat.setValueAt("0", intNumFil, tblDat.getSelectedColumn());
                    }
                    if (tblDat.getSelectedColumn() == INT_TBL_PORDES) {
                        if (strAfterValue.equals("")) {
                            strAfterValue = "0.00";
                        }
                        if (Double.parseDouble(strAfterValue) > 100 || Double.parseDouble(strAfterValue) < 0) {
                            MensajeInf("Error! Porcentaje de Descuento ");
                            tblDat.setValueAt(strBeforeValue, intNumFil, INT_TBL_PORDES);
                        }
                        if (intTipForPagCotizacion == 4) {
                            calculaSubTot2();
                        }
                    }
                    blnChangeData = true;
                    
                    
                    if (tblDat.getSelectedColumn() == INT_TBL_CANMOV) {
                        if(blnIsItmRes){
                            MensajeInf("LOS ITEMS TOMADOS DE UNA RESERVA NO SE PUEDEN MODIFICAR ");
                            tblDat.setValueAt(dblCantidad, intNumFil, INT_TBL_CANMOV);
                        }
                        else{
                            double dlbCanIng = objUti.redondear(tblDat.getValueAt(intNumFil, INT_TBL_CANMOV).toString(), 4);
                            String strTipUniMed = objInvItm.getStringDatoValidado(tblDat.getValueAt(intNumFil, INT_TBL_TIPUNIMED));
                            if (strTipUniMed.equals("E")) {
                                double dlbResVal = objInvItm.Truncar(objUti.redondear(tblDat.getValueAt(intNumFil, INT_TBL_CANMOV).toString(), 4), 0);
                                dlbResVal = objUti.redondear((dlbCanIng - dlbResVal), 4);
                                if (dlbResVal > 0) {
                                    MensajeInf("SOLO SE PERMITE INGRESAR VALORES ENTEROS ");
                                    tblDat.setValueAt("0", intNumFil, INT_TBL_CANMOV);
                                }
                            }
                        }
 
                    }
                    

                    
                    calculaSubTot(intNumFil);
                    if (intTipForPagCotizacion == 4) {
                        calculaSubTot2();
                    }
                    
                }
            });
            
            /* ************************************************************************************ */
            objTblCelEdiTxtCom = new Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt(tblDat);
            tcmAux.getColumn(INT_TBL_PRE_COS).setCellEditor(objTblCelEdiTxtCom);
            objTblCelEdiTxtCom.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                @Override
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    int intNumFil = tblDat.getSelectedRow();
                    if (intNumFil >= 0) {
                        blnChangeData = false;
                        String strTipTer = ((tblDat.getValueAt(intNumFil, INT_TBL_ITMTER) == null) ? "" : tblDat.getValueAt(intNumFil, INT_TBL_ITMTER).toString());

                        if (!(strTipTer.trim().equals("S"))) {
                            objTblCelEdiTxtCom.setCancelarEdicion(true);
                        }
                    }
                }

                @Override
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    int intNumFil = tblDat.getSelectedRow();
                    if (intNumFil >= 0) {
                        blnChangeData = false;
                        String strTipTer = ((tblDat.getValueAt(intNumFil, INT_TBL_ITMTER) == null) ? "" : tblDat.getValueAt(intNumFil, INT_TBL_ITMTER).toString());

                        if (!(strTipTer.trim().equals("S"))) {
                            objTblCelEdiTxtCom.setCancelarEdicion(true);
                        }
                    }

                }
            });

            /* ************************************************************************************ */
            objTblCelEdiTxtComDescCom = new Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt(tblDat);
            tcmAux.getColumn(INT_TBL_DESPRECOM).setCellEditor(objTblCelEdiTxtComDescCom);
            objTblCelEdiTxtComDescCom.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                @Override
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    int intNumFil = tblDat.getSelectedRow();
                    if (intNumFil >= 0) {
                        blnChangeData = false;
                        String strTipTer = ((tblDat.getValueAt(intNumFil, INT_TBL_ITMTER) == null) ? "" : tblDat.getValueAt(intNumFil, INT_TBL_ITMTER).toString());

                        strBeforeValue = objInvItm.getIntDatoValidado(tblDat.getValueAt(intNumFil, INT_TBL_DESPRECOM));

                        if (!(strTipTer.trim().equals("S"))) {
                            objTblCelEdiTxtComDescCom.setCancelarEdicion(true);
                        }
                    }
                }

                @Override
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    int intNumFil = tblDat.getSelectedRow();
                    if (intNumFil >= 0) {
                        blnChangeData = false;
                        String strTipTer = ((tblDat.getValueAt(intNumFil, INT_TBL_ITMTER) == null) ? "" : tblDat.getValueAt(intNumFil, INT_TBL_ITMTER).toString());

                        if (!(strTipTer.trim().equals("S"))) {
                            objTblCelEdiTxtComDescCom.setCancelarEdicion(true);
                        } else {

                            double dlbDesCom = Double.parseDouble(objInvItm.getIntDatoValidado(tblDat.getValueAt(intNumFil, INT_TBL_DESPRECOM)));
                            double dlbMaxDesCom = Double.parseDouble(objInvItm.getIntDatoValidado(tblDat.getValueAt(intNumFil, INT_TBL_MAXDESCOM)));

                            if (dlbDesCom > dlbMaxDesCom) {
                                MensajeInf("Error! Ha sobrepasado el máximo Porcentaje de Descuento de asignado al proveedor. ");
                                tblDat.setValueAt(strBeforeValue, intNumFil, INT_TBL_DESPRECOM);
                            }
                        }
                    }
                }
            });

            /* ************************************************************************************ */
            Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut objTblCelRenBut = new Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut();
            tcmAux.getColumn(INT_TBL_BUTBODPRV).setCellRenderer(objTblCelRenBut);
            objTblCelRenBut = null;
            ButBod butBod = new ButBod(tblDat, INT_TBL_BUTBODPRV);

            //Libero los objetos auxiliares.
            tcmAux = null;
            setEditable(false);
            //Configurar JTable: Centrar columnas.
            objTblPopMnu = new Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu(tblDat);

            objTblPopMnu.addTblPopMnuListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTblPopMnuAdapter() 
            {
                @Override
                public void beforeClick(Librerias.ZafTblUti.ZafTblEvt.ZafTblPopMnuEvent evt) {
                    if (objTblPopMnu.isClickEliminarFila()) {
                        if (!verificaSelEli()) 
                        {
                            //MensajeInf("NO SE PUEDE ELIMINAR. HAY DATOS QUE YA ESTAN PROCESADOS ");
                            //objTblPopMnu.cancelarClick();
                            blnEstEliFilDet = true;
                        }
                    }
                }

                @Override
                public void afterClick(Librerias.ZafTblUti.ZafTblEvt.ZafTblPopMnuEvent evt) {
                    if (objTblPopMnu.isClickInsertarFila()) {
                        //Escriba aquí el código que se debe realizar luego de insertar la fila.
                        //System.out.println("afterClick: isClickInsertarFila");
                    } else if (objTblPopMnu.isClickEliminarFila()) {
                        //System.out.println("afterClick: isClickEliminarFila");
                        //javax.swing.JOptionPane.showMessageDialog(null, "Las filas se eliminaron con éxito.");
                    }
                }
            });

            //Configurar JTable: Detectar cambios de valores en las celdas.
            objTblModLis = new ZafTblModLis();
            objTblMod.addTableModelListener(objTblModLis);

            CerrarCon();

            blnRes = true;
        } 
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    /**
     * 
     * @param indice
     * @return 
     */
    private boolean isItmRes(int indice){
        boolean blnRes=false;
//        java.sql.Connection conLoc;
//        java.sql.Statement stmLoc;
//        java.sql.ResultSet rstLoc;
        char chrEst;
//        String strSql;
        try{
            chrEst = objTooBar.getEstado();
            switch(chrEst){
                case 'n': /*INSERTAR*/
                    if(tblDat.getValueAt(indice,INT_TBL_ESTRES)!=null ){
                        if(tblDat.getValueAt(indice,INT_TBL_ESTRES).toString().length()>0){
                            if(tblDat.getValueAt(indice,INT_TBL_ESTRES).toString().equals("S")){
                                blnRes=true;
                            }
                        }
                    }
                     
                    break;
 
            }
            
        }
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Verifica si ya tiene aplicado algun valor al registro antes de eliminar
     * de la fila
     *
     * @return true si se puede eliminar false no se puede eliminar
     */
    private boolean verificaSelEli() 
    {
        boolean blnRes = true;
        String strEstApl = "";
        try
        {
            int intFilSel[];
            int intFil = 0;
            intFilSel = tblDat.getSelectedRows();

            for (int i = 0; i < intFilSel.length; i++) 
            {
                intFil = intFilSel[i] - i;
                strEstApl = (tblDat.getValueAt(intFil, INT_TBL_CODREGCOT) == null ? "" : (tblDat.getValueAt(intFil, INT_TBL_CODREGCOT).equals("") ? "" : tblDat.getValueAt(intFil, INT_TBL_CODREGCOT).toString()));
                if ((!strEstApl.equals(""))) 
                {
                    blnRes = false;
                    break;
                }
            }
            intFilSel = null;

        } 
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Clase que presentara un listado de las bodegas que tenga acceso el
     * usuario para el ingreso de la mercaderia.
     */
    private class ButBod extends Librerias.ZafTableColBut.ZafTableColBut_uni {

        public ButBod(javax.swing.JTable tbl, int intIdx) {
            super(tbl, intIdx, "Bodega donde ingresa la Mercaderia.");
        }

        @Override
        public void butCLick()
        {
            int intCol = tblDat.getSelectedRow();
            String strTipTer = ((tblDat.getValueAt(intCol, INT_TBL_ITMTER) == null) ? "" : tblDat.getValueAt(intCol, INT_TBL_ITMTER).toString());

            if (!(strTipTer.trim().equals("S")))
            {
                objTblCelEdiTxtVcoPrv.setCancelarEdicion(true);
            } 
            else 
            {
                llamarVentanaFac(intCol);
            }

        }
    }

    private void llamarVentanaFac(int intCol){
        String strSql = "";
        if (objZafParSis.getCodigoUsuario() == 1) 
        {
            strSql = "SELECT a.co_bod, a1.tx_nom FROM tbr_bodloc as a "
                    + " INNER JOIN  tbm_bod AS a1 ON (a1.co_emp=a.co_emp AND a1.co_bod=a.co_bod) "
                    + " WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " AND a.co_loc=" + objZafParSis.getCodigoLocal() + " "; //AND  a.st_reg='P' ";
        } 
        else 
        {
            strSql = " SELECT a.co_bod, a1.tx_nom FROM tbr_bodlocprgusr as a "
                    + " INNER JOIN  tbm_bod AS a1 ON (a1.co_emp=a.co_emp AND a1.co_bod=a.co_bod) "
                    + " WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and a.co_mnu=4 and a.co_usr=" + objZafParSis.getCodigoUsuario() + " ";
        }

        Ventas.ZafVen11.ZafVen11_02 obj = new Ventas.ZafVen11.ZafVen11_02(javax.swing.JOptionPane.getFrameForComponent(this), true, objZafParSis, strSql);
        obj.show();

        if (obj.acepta()) 
        {
            tblDat.setValueAt(obj.GetCamSel(1), intCol, INT_TBL_CODBODPRV);
            tblDat.setValueAt(obj.GetCamSel(2), intCol, INT_TBL_NOMBODPRV);


            if (tblDat.getValueAt(intCol, INT_TBL_CODBODPRV).toString().equals(tblDat.getValueAt(intCol, INT_TBL_CODBOD).toString())) {
                tblDat.setValueAt("S", intCol, INT_TBL_IEBODFIS);
            } else {
                tblDat.setValueAt("N", intCol, INT_TBL_IEBODFIS);
            }
        }
        obj.dispose();
        obj = null;
    }
 

    /**
     * Validacion para el mismo item
     * @param FilSel
     * @return 
     * 
     */
    
    private boolean controlJota(int FilSel){
        boolean blnRes = false;
        for (int i = 0; i < tblDat.getRowCount(); i++){
            if (tblDat.getValueAt(i, INT_TBL_CODITM) != null){
                if (i != FilSel){
                    if (tblDat.getValueAt(i, INT_TBL_CODITM).toString().equals(tblDat.getValueAt(FilSel, INT_TBL_CODITM).toString())){
                        blnRes = true;
                    }
                }
            }
        }
        return blnRes;
    }
    
    
    
    private class ButStkEmp extends Librerias.ZafTableColBut.ZafTableColBut 
    {
        public ButStkEmp(javax.swing.JTable tbl, int intIdx) 
        {
            super(tbl, intIdx);
        }

        @Override
        public void butCLick() 
        {
            int intNumFil = tblDat.getSelectedRow();
            if (intNumFil >= 0) {
                blnChangeData = false;

                String strCodItm = ((tblDat.getValueAt(intNumFil, INT_TBL_CODITM) == null) ? "" : tblDat.getValueAt(intNumFil, INT_TBL_CODITM).toString());
                llamarVentanaStkEmp(strCodItm);

                if (objTblMod.isDataModelChanged() == false)
                {
                    blnStkEst_Glo = objTblMod.isDataModelChanged();
                }

                if (blnStkEst_Glo == false) 
                {
                    objTblMod.setDataModelChanged(false);
                }
             // objTblMod.setDataModelChanged(false);
             // blnHayCam_glo=false;
             // blnHayCam_glo_tbl=false; 
             // blnHayCam_Pag=false;                
            }
        }
    }

    /**
     * Aqui presenta el stock que hay en todas las bodegas del item que se ha
     * escojido
     *
     * @param strCodItm codigo del item
     */
    private void llamarVentanaStkEmp(String strCodItm){
        java.sql.Connection conn;
        try {
            conn = java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if (conn != null) {
                if (!strCodItm.equals("")) {
                    Ventas.ZafVen01.ZafVen01_07 obj1 = new Ventas.ZafVen01.ZafVen01_07(javax.swing.JOptionPane.getFrameForComponent(this), false, objZafParSis, strCodItm, conn, INTCODREGCEN);
                    obj1.show();
                } else {
                    Mensaje("AGREGE UN ITEM EN LA COTIZACIÓN. ");
                }
                conn.close();
                conn = null;
            }
        } 
        catch (java.sql.SQLException ex) {
            objUti.mostrarMsgErr_F1(jfrThis, ex);
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(jfrThis, e);
        }
    }
 
    
    /**
     * Esta funcion es llamada cuando se ha elejido un item y carga en la tabla
     */
    private void eventoVenCon() 
    {
        int intNumFil = tblDat.getSelectedRow();
        if (tblDat.getValueAt(intNumFil, INT_TBL_ITMALT) != null) 
        {
            strAfterValue = tblDat.getValueAt(intNumFil, INT_TBL_ITMALT).toString();
        } 
        else 
        {
            strAfterValue = "";
        }

        String strValpre = "0.00";
        strValpre = tblDat.getValueAt(intNumFil, INT_TBL_PREUNI).toString();
        if (tblDat.getValueAt(intNumFil, INT_TBL_PREUNI).equals("")) {
            strValpre = "0";
        }
        if (tblDat.getValueAt(intNumFil, INT_TBL_PREUNI) == null) {
            strValpre = "0";
        }
        tblDat.setValueAt(strValpre, intNumFil, INT_TBL_PREUNI);
        tblDat.setValueAt(false, intNumFil, INT_TBL_TRATOT);
        String strBloPre = objInvItm.getStringDatoValidado(tblDat.getValueAt(intNumFil, INT_TBL_BLOPREVTA));

        if (tblDat.getValueAt(intNumFil, INT_TBL_CANMOV) == null) 
        {
            tblDat.setValueAt(new Double("0.00"), intNumFil, INT_TBL_CANMOV);
        }
        if (tblDat.getValueAt(intNumFil, INT_TBL_PRE_COS) == null) 
        {
            tblDat.setValueAt(new Double("0.00"), intNumFil, INT_TBL_PRE_COS);
        }
        if (tblDat.getValueAt(intNumFil, INT_TBL_PORDES) == null) 
        {
            tblDat.setValueAt("" + Glo_dlbMaxDes, intNumFil, INT_TBL_PORDES);
        }

        tblDat.setValueAt(null, intNumFil, INT_TBL_BLNPRE);
        String strIva = ((tblDat.getValueAt(intNumFil, INT_TBL_IVATXT) == null ? "S" : (tblDat.getValueAt(intNumFil, INT_TBL_IVATXT).toString().equals("") ? "S" : tblDat.getValueAt(intNumFil, INT_TBL_IVATXT).toString())));
        if (strIva.equals("S")) {
            if (stIvaVen.equals("N")) {
                tblDat.setValueAt(false, intNumFil, INT_TBL_BLNIVA);
            } else {
                tblDat.setValueAt(true, intNumFil, INT_TBL_BLNIVA);
            }
        } else {
            tblDat.setValueAt(false, intNumFil, INT_TBL_BLNIVA);
        }


        tblDat.setValueAt(new Integer(intCodBodPre), intNumFil, INT_TBL_CODBODPRV);
        tblDat.setValueAt(strNomBodPrv, intNumFil, INT_TBL_NOMBODPRV);

        if (!(tblDat.getValueAt(intNumFil, INT_TBL_ITMTER).toString().trim().equalsIgnoreCase("S"))) {
            tblDat.setValueAt(new Double("0.00"), intNumFil, INT_TBL_PRE_COS);
            tblDat.setValueAt(new Double("0.00"), intNumFil, INT_TBL_DESPRECOM);
            tblDat.setValueAt(null, intNumFil, INT_TBL_COD_PRO);
            tblDat.setValueAt(null, intNumFil, INT_TBL_NOM_PRO);

            tblDat.setValueAt(null, intNumFil, INT_TBL_CODBODPRV);
            tblDat.setValueAt(null, intNumFil, INT_TBL_NOMBODPRV);
        }


        tblDat.setValueAt(new Integer(intCodBodPre), intNumFil, INT_TBL_CODBOD);



        if (tblDat.getValueAt(0, INT_TBL_PORDES) != null) {
            tblDat.setValueAt(tblDat.getValueAt(0, INT_TBL_PORDES), intNumFil, INT_TBL_PORDES);
        }
        if (strBloPre.equals("S")) {
            tblDat.setValueAt("0.00", intNumFil, INT_TBL_PORDES);
        }


        String strTipUniMed = objInvItm.getStringDatoValidado(tblDat.getValueAt(intNumFil, INT_TBL_TIPUNIMED));
        if (strTipUniMed.equals("E")) {
            double dlbCanIng = objUti.redondear(tblDat.getValueAt(intNumFil, INT_TBL_CANMOV).toString(), 4);
            if (dlbCanIng > 0) {
                double dlbResVal = objInvItm.Truncar(objUti.redondear(tblDat.getValueAt(intNumFil, INT_TBL_CANMOV).toString(), 4), 0);
                dlbResVal = objUti.redondear((dlbCanIng - dlbResVal), 4);
                if (dlbResVal > 0) {
                    MensajeInf("SOLO SE PERMITE INGRESAR VALORES ENTEROS ");
                    tblDat.setValueAt("0", intNumFil, INT_TBL_CANMOV);
                }
            }
        }
      
        calculaSubTot();
        tblDat.repaint();
        tblDat.requestFocus();
        tblDat.editCellAt(intNumFil, INT_TBL_CANMOV);
    }
     
    
    public void setEditable(boolean editable) {
        if (editable == true) {
            objTblMod.setModoOperacion(ZafTblMod.INT_TBL_INS);

        } else {
            objTblMod.setModoOperacion(ZafTblMod.INT_TBL_NO_EDI);
        }
    }

    /**
     * Se encarga de calcular el total de la tabla y asu vez presenta el total
     * final y calcula la forma de pago
     */
    public void calculaSubTot() {
        double dblCan, dblDes, dblCosto, dblTotal = 0.00, dblPre = 0.00, dblValDes = 0.00;
        double dblPesCfgCli, dblPesTot=0.00;
        int intFilSel = tblDat.getSelectedRow();
        dblCan = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_CANMOV) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_CANMOV).toString())));
        dblPre = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PREUNI) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PREUNI).toString())));
        dblDes = objUti.redondear(Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PORDES).toString()))), 2);
//        dblValDes = ((dblCan * dblPre) == 0) ? 0 : ((dblCan * dblPre) * (dblDes / 100));
//        dblTotal = objUti.redondear((dblCan * dblPre) - dblValDes, intNumDec);
        /* JM : Ahora con BigDecimal 22/Marzo/2017 */
        BigDecimal bgdCanItm;
        BigDecimal bgdPreItm;
        BigDecimal bgdValDesItm;
        BigDecimal bgdPorDesItm;
        BigDecimal bgdTotItm=BigDecimal.ZERO;
          
        bgdCanItm=BigDecimal.valueOf(dblCan) ;
        bgdPreItm=BigDecimal.valueOf(dblPre) ;
        bgdPorDesItm=BigDecimal.valueOf(dblDes) ;
        
        //DESCUENTO
        bgdValDesItm = bgdPorDesItm.multiply((bgdCanItm.multiply(bgdPreItm))); 
        bgdValDesItm = bgdValDesItm.divide(new BigDecimal("100"),objZafParSis.getDecimalesBaseDatos(),BigDecimal.ROUND_HALF_UP);
        ///TOTAL
        System.out.println("bgdValDesItm " + bgdValDesItm);
        System.out.println("Calcular bgdTotItm " + (bgdCanItm.multiply(bgdPreItm)).subtract(bgdValDesItm));
        bgdTotItm=objUti.redondearBigDecimal((bgdCanItm.multiply(bgdPreItm)).subtract(bgdValDesItm), objZafParSis.getDecimalesMostrar());    
        dblTotal = bgdTotItm.doubleValue();
         
        /*  José Marín - 21/Oct/2015 */
        dblPesCfgCli = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PESITM) == null)? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PESITM).toString())));
        dblPesTot = dblPesCfgCli * dblCan;
        dblPesTot = objUti.redondear(dblPesTot, 3);
        dblPesTot = objUti.redondear(dblPesTot, 2);
        tblDat.setValueAt(dblPesTot + "", intFilSel, INT_TBL_PESTOT);
        /*  José Marín - 21/Oct/2015 */
        tblDat.setValueAt(dblTotal + "", intFilSel, INT_TBL_TOTAL);
        calculaTot();
        calculaPag();
        calcularTotPesDoc();  /* José Marín - 20/Oct/2015 */
    }

    public void calculaSubTot2() {
        double dblCan, dblDes, dblCosto, dblTotal = 0.00, dblPre = 0.00, dblValDes = 0.00;
        double dblPorDesReal = 0, dblPreLis = 0;
        double dblValDesTarCre = 0, dblTotalTarCre = 0, dblPorDesRealTarCre = 0;
        int intColActPre = 0, intFilSel = tblDat.getSelectedRow();
        /*boolean blnActPreDes=objTooBar.getValidaVigencia();
         if(blnActPreDes) intColActPre=INT_TBL_PRELISITM2;
         else intColActPre=INT_TBL_PRELISITM; */

        dblCan = objUti.redondear(Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_CANMOV) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_CANMOV).toString()))), 2);
        dblPre = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PREUNI) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PREUNI).toString())));
        dblDes = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PORDES).toString())));
        dblPreLis =  Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PRELISITM) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PRELISITM).toString()))) ;

//        dblValDes = objUti.redondear(((dblCan * dblPre) == 0) ? 0 : ((dblCan * dblPre) * (dblDes / 100)), intNumDec);
//        dblTotal = (dblCan * dblPre) - dblValDes;
//        dblTotal = objUti.redondear(dblTotal, intNumDec);
        
         /* JM : Ahora con BigDecimal 22/Marzo/2017 */
        BigDecimal bgdCanItm;
        BigDecimal bgdPreItm;
        BigDecimal bgdValDesItm;
        BigDecimal bgdPorDesItm;
        BigDecimal bgdTotItm=BigDecimal.ZERO;
          
        bgdCanItm=BigDecimal.valueOf(dblCan) ;
        bgdPreItm=BigDecimal.valueOf(dblPre) ;
        bgdPorDesItm=BigDecimal.valueOf(dblDes) ;
        
        //DESCUENTO
        bgdValDesItm = bgdPorDesItm.multiply((bgdCanItm.multiply(bgdPreItm))); 
        bgdValDesItm = bgdValDesItm.divide(new BigDecimal("100"),objZafParSis.getDecimalesBaseDatos(),BigDecimal.ROUND_HALF_UP);

        ///TOTAL
        bgdTotItm=objUti.redondearBigDecimal((bgdCanItm.multiply(bgdPreItm)).subtract(bgdValDesItm), objZafParSis.getDecimalesMostrar());    
        dblTotal = bgdTotItm.doubleValue();
        
        dblPorDesReal = objUti.redondear(((dblTotal - dblPreLis) / ((dblPreLis == 0) ? 1 : dblPreLis)), intNumDec);

        /*  José Marín - 21/Oct/2015 */
        double dblPesCfgCli, dblPesTot=0.00;
        dblPesCfgCli = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PESITM) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PESITM).toString())));
        dblPesTot = dblPesCfgCli * dblCan;
         
        dblPesTot = objUti.redondear(dblPesTot, intNumDec);
        tblDat.setValueAt(dblPesTot + "", intFilSel, INT_TBL_PESTOT);
        /*  José Marín - 21/Oct/2015 */
        dblValDesTarCre = objUti.redondear(((dblCan * dblPreLis) == 0) ? 0 : ((dblCan * dblPreLis) * (dblPorDesTarCre / 100)), intNumDec);
        dblTotalTarCre = (dblCan * dblPreLis) - dblValDesTarCre;
        
        dblTotalTarCre = objUti.redondear(dblTotalTarCre, intNumDec);
        dblPorDesRealTarCre = objUti.redondear(((dblTotalTarCre - dblPreLis) / ((dblPreLis == 0) ? 1 : dblPreLis)), intNumDec);
        dblPorDesReal = Math.abs(dblPorDesReal);
        dblPorDesRealTarCre = Math.abs(dblPorDesRealTarCre);

        calcularTotPesDoc();  /* José Marín - 20/Oct/2015 */
        if (dblPorDesReal < dblPorDesRealTarCre) {
            MensajeInf("No puede exceder el porcentaje de descuento asignado a la tarjeta");
            calculaDescuento();
        }
    }
     
    /**
     * verifica si el item lleva iva o no
     *
     * @param conn coneccion de la base
     */
    private void verificaIvaItm(java.sql.Connection conn) {
        try {
            if (stIvaVen.equals("S")) {
                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                        if (tblDat.getValueAt(i, INT_TBL_BLNIVA) == null) {
                            if (getIvaItm(conn, objZafParSis.getCodigoEmpresa(), tblDat.getValueAt(i, INT_TBL_CODITM).toString())) {
                                tblDat.setValueAt("S", i, INT_TBL_IVATXT);
                                tblDat.setValueAt(true, i, INT_TBL_BLNIVA);
                            }
                        } else if (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("")) {
                            if (getIvaItm(conn, objZafParSis.getCodigoEmpresa(), tblDat.getValueAt(i, INT_TBL_CODITM).toString())) {
                                tblDat.setValueAt("S", i, INT_TBL_IVATXT);
                                tblDat.setValueAt(true, i, INT_TBL_BLNIVA);
                            }
                        } else if (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("false")) {
                            if (getIvaItm(conn, objZafParSis.getCodigoEmpresa(), tblDat.getValueAt(i, INT_TBL_CODITM).toString())) {
                                tblDat.setValueAt("S", i, INT_TBL_IVATXT);
                                tblDat.setValueAt(true, i, INT_TBL_BLNIVA);
                            }
                        }
                    }
                }
            }
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(this, Evt);
        }
    }

    
    /**
     * Solicitar Reserva de Mercaderia: 
     *  Solo las cotizaciones activas sin proceso de facturar o anuladas pueden ser reservadas, 
     *  
     *      A=Activo;I=Anulado;P=Pendiente por autorizar;U=Autorizado;D=Denegado;
     *      E=En proceso de facturar;L=Listo para facturar;F=Facturada
     * @return 
     */              
 
    
    private boolean solicitarReserva(){
        java.sql.Connection conLoc;
        boolean blnRes=false;
        String strEstRes="",strEstReg="";
        int intTemCodMnu;
        try {
            strEstRes=revisaEstadoReservaCotizacion(objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText()));
            strEstReg=revisaEstadoCotizacion(objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText()));
            if(strEstReg.equals("A") || strEstReg.equals("P") || strEstReg.equals("U")  ){
                if(strEstRes.equals("N")){
                    conLoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                    if(conLoc!=null){
                        intTemCodMnu=objZafParSis.getCodigoMenu();
                        objZafParSis.setCodigoMenu(4142);// Solicitudes de Reserva de Inventario
                        Ventas.ZafVen42.ZafVen42 objVen42 = new Ventas.ZafVen42.ZafVen42(javax.swing.JOptionPane.getFrameForComponent(this),objZafParSis);
                        if(objVen42.cargarRegCot(conLoc, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText())   ) ){
                            this.getParent().add(objVen42, javax.swing.JLayeredPane.DEFAULT_LAYER);
                            objVen42.show();
                        }else{
                            MensajeInf("Ha ocurrido un error al reservar. ");
                        }
                        conLoc.close();
                        conLoc=null;
                        objZafParSis.setCodigoMenu(intTemCodMnu);
                    }
                }
                else{
                    MensajeInf("Esta cotizacion ya esta reserva. ");
                }
            }
            else if (strEstReg.equals("I")){
                MensajeInf("Esta cotizacion, no puede ser reservada. Se encuentra Anulada ");
            }
            else if (strEstReg.equals("F")){
                MensajeInf("Esta cotizacion, no puede ser reservada. Se encuentra Facturada ");
            }
            else if (strEstReg.equals("E")){
                MensajeInf("Esta cotizacion, no puede ser reservada. Se encuentra en proceso de transferencias ");
            }
        }
        catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return blnRes;
    }
    
    
    
    private String revisaEstadoReservaCotizacion(int CodEmp, int CodLoc, int CodCot){
        java.sql.Connection conLoc;
        java.sql.ResultSet rstLoc;
        java.sql.Statement stmLoc;
        String strCadena="", strEst="";
        try {
            conLoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if(conLoc!=null){
                stmLoc = conLoc.createStatement();
                strCadena="";
                strCadena+=" SELECT CASE WHEN st_solResInv IS NULL THEN 'N' ELSE 'S' END as st_solResInv,co_emp,co_loc,co_cot FROM tbm_cabCotVen WHERE co_emp="+CodEmp;
                strCadena+=" AND co_loc="+CodLoc+" AND co_cot="+CodCot;
                System.out.println("revisaEstadoReservaCotizacion: "+strCadena);
                rstLoc = stmLoc.executeQuery(strCadena);
                if(rstLoc.next()){
                    strEst= rstLoc.getString("st_solResInv");
                }
                rstLoc.close();
                rstLoc=null;
                stmLoc.close();
                stmLoc=null;
            }
            conLoc.close();
            conLoc=null;
        }
        catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return strEst;
    }
    
    
    private String revisaEstadoCotizacion(int CodEmp, int CodLoc, int CodCot){
        java.sql.Connection conLoc;
        java.sql.ResultSet rstLoc;
        java.sql.Statement stmLoc;
        
        String strCadena="", strEst="";
        try {
            conLoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if(conLoc!=null){
                stmLoc = conLoc.createStatement();
                strCadena="";
                strCadena+=" SELECT st_reg,co_emp,co_loc,co_cot FROM tbm_cabCotVen WHERE co_emp="+CodEmp;
                strCadena+=" AND co_loc="+CodLoc+" AND co_cot="+CodCot;
                System.out.println("revisaEstadoCotizacion: "+strCadena);
                rstLoc = stmLoc.executeQuery(strCadena);
                if(rstLoc.next()){
                    strEst= rstLoc.getString("st_reg");
                }
                rstLoc.close();
                rstLoc=null;
                stmLoc.close();
                stmLoc=null;
            }
            conLoc.close();
            conLoc=null;
        }
        catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return strEst;
    }
    
    
    private ArrayList arlDatItmRes;
    private boolean blnManRes=false;
    
    private boolean llamaVentanaReservas(){
        boolean blnRes=false;
        try{
            ZafVen01_42 objVen01_42 = new ZafVen01_42(javax.swing.JOptionPane.getFrameForComponent(this), objZafParSis,intCodEmp,intCodLoc,Integer.parseInt(txtCliCod.getText()));
            objVen01_42.show();
            if (objVen01_42.acepta()) {
                arlDatItmRes = objVen01_42.getArlDatRes();
                if(!arlDatItmRes.isEmpty()){
                    if(cargarDatosEnTablaCotizacion()){
                        blnManRes=true;
                        blnRes=true;
                    }
                }
            }
            else{blnRes = false;}
            objVen01_42 = null;
        }
        catch (Exception e) {
            objUti.mostrarMsgErr_F1(jfrThis, e);
        }
        return blnRes;
    }
    
    private boolean llamarVentanaODReservadas(int CodEmp, int CodLoc, int CodCot){
        boolean blnRes=true;
        try{
            ZafVen01_42_OD obj1 = new  ZafVen01_42_OD(objZafParSis,this, CodEmp,CodLoc,CodCot );
            this.getParent().add(obj1, javax.swing.JLayeredPane.DEFAULT_LAYER);
            obj1.show();
        }
        catch (Exception e) {
            objUti.mostrarMsgErr_F1(jfrThis, e);
            blnRes=false;
        }
        return blnRes;
    }
    
      
     /*Datos para enviar al ZafVen01 */
   private final int INT_CON_LINEA=0;                       //Numero de linea de la tabla
   private final int  INT_CON_CODEMP=1;
   private final int  INT_CON_CODLOC=2;
   private final int  INT_CON_CODCOT=3;
   private final int  INT_CON_CODREGCOT=4;
   private final int  INT_CON_ITMALT=5;                     //Codigo del item alterno
   private final int  INT_CON_DESITM=6;
   private final int  INT_CON_PREUNI=7;
   private final int  INT_CON_CODITM=8;
   private final int  INT_CON_IVATXT=9;
   private final int  INT_CON_UNIDAD=10;
   private final int  INT_CON_ITMALT2=11; 
   private final int  INT_CON_ITMSER=12;
   private final int  INT_CON_ITMTER=13;
   private final int  INT_CON_MARUTI=14;
   private final int  INT_CON_IEBODFIS=15;
   private final int  INT_CON_MODNOMITM=16;
   private final int  INT_CON_PRELISITM=17;
   private final int  INT_CON_PRELISITM2=18;
   private final int  INT_CON_TIPUNIMED=19;
   private final int  INT_CON_BLOPREVTA=20;
   private final int  INT_CON_DESITMORI=21;
   private final int  INT_CON_CODCTAEGR=22;
   private final int  INT_CON_PESITM=23;
   private final int  INT_CON_CANRES=24;
   private final int  INT_CON_CANRESUTI=25;
   private final int  INT_CON_CAN=26;
   
   
   
   private boolean cargarDatosEnTablaCotizacion(){
       boolean blnRes=false;
       try{
           //Limpiar la tabla de cotizaciones
           objTblMod.removeAllRows();
           System.out.println("cargarDatosEnTablaCotizacion: " + arlDatItmRes.toString());
           for(int i=0;i<arlDatItmRes.size();i++){
               objTblMod.setValueAt("" , i, INT_TBL_LINEA);
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_ITMALT)  , i, INT_TBL_ITMALT);
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_DESITM)  , i, INT_TBL_DESITM); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_PREUNI)  , i, INT_TBL_PREUNI); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_CODITM)  , i, INT_TBL_CODITM); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_IVATXT)  , i, INT_TBL_IVATXT); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_UNIDAD)  , i, INT_TBL_UNIDAD); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_ITMALT2)  , i, INT_TBL_ITMALT2); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_ITMSER)  , i, INT_TBL_ITMSER); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_ITMTER)  , i, INT_TBL_ITMTER); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_MARUTI)  , i, INT_TBL_MARUTI); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_IEBODFIS)  , i, INT_TBL_IEBODFIS); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_MODNOMITM)  , i, INT_TBL_MODNOMITM); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_PRELISITM)  , i, INT_TBL_PRELISITM); // DEBO ACTUALIZAR PRECIO DE LISTA??? JM
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_PRELISITM2)  , i, INT_TBL_PRELISITM2); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_TIPUNIMED)  , i, INT_TBL_TIPUNIMED); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_BLOPREVTA)  , i, INT_TBL_BLOPREVTA); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_DESITMORI)  , i, INT_TBL_DESITMORI); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_CODCTAEGR)  , i, INT_TBL_CODCTAEGR); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_PESITM)  , i, INT_TBL_PESITM); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_CAN)  , i, INT_TBL_CANMOV); 
               objTblMod.setValueAt("S", i, INT_TBL_ESTRES);
               /* JM Reservas 1/Agosto/2017 */
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_CODEMP)  , i, INT_TBL_COD_EMP_COT_RES); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_CODLOC)  , i, INT_TBL_COD_LOC_COT_RES); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_CODCOT)  , i, INT_TBL_COD_COT_RES); 
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_CODREGCOT)  , i, INT_TBL_COD_COT_REG_RES); 
               
               
               objTblMod.setValueAt(objUti.getStringValueAt(arlDatItmRes, i, INT_CON_CAN)  , i, INT_TBL_CAN_COT_RES); 
               /* JM Reservas 1/Agosto/2017 */
               objTblMod.setValueAt(intCodBodPre, i, INT_TBL_CODBOD);
               if(!objTblMod.isRowEmpty(i)){
                    eventoVenCon(i);
               }
               objTblMod.insertRow();
           }
           blnRes=true;
       }
       catch (Exception e) {
            objUti.mostrarMsgErr_F1(jfrThis, e);
            blnRes=false;
        }
        return blnRes;
   }
   
    /**
     * Esta funcion es llamada cuando se ha elejido un item y carga en la tabla
     */
    private void eventoVenCon(int intNumFil) 
    {
//        int intNumFil = tblDat.getSelectedRow();
        if (tblDat.getValueAt(intNumFil, INT_TBL_ITMALT) != null) 
        {
            strAfterValue = tblDat.getValueAt(intNumFil, INT_TBL_ITMALT).toString();
        } 
        else 
        {
            strAfterValue = "";
        }

        String strValpre = "0.00";
        strValpre = tblDat.getValueAt(intNumFil, INT_TBL_PREUNI).toString();
        if (tblDat.getValueAt(intNumFil, INT_TBL_PREUNI).equals("")) {
            strValpre = "0";
        }
        if (tblDat.getValueAt(intNumFil, INT_TBL_PREUNI) == null) {
            strValpre = "0";
        }
        tblDat.setValueAt(strValpre, intNumFil, INT_TBL_PREUNI);
        tblDat.setValueAt(false, intNumFil, INT_TBL_TRATOT);
        String strBloPre = objInvItm.getStringDatoValidado(tblDat.getValueAt(intNumFil, INT_TBL_BLOPREVTA));

        if (tblDat.getValueAt(intNumFil, INT_TBL_CANMOV) == null) 
        {
            tblDat.setValueAt(new Double("0.00"), intNumFil, INT_TBL_CANMOV);
        }
        if (tblDat.getValueAt(intNumFil, INT_TBL_PRE_COS) == null) 
        {
            tblDat.setValueAt(new Double("0.00"), intNumFil, INT_TBL_PRE_COS);
        }
        if (tblDat.getValueAt(intNumFil, INT_TBL_PORDES) == null) 
        {
            tblDat.setValueAt("" + Glo_dlbMaxDes, intNumFil, INT_TBL_PORDES);
        }

        tblDat.setValueAt(null, intNumFil, INT_TBL_BLNPRE);
        String strIva = ((tblDat.getValueAt(intNumFil, INT_TBL_IVATXT) == null ? "S" : (tblDat.getValueAt(intNumFil, INT_TBL_IVATXT).toString().equals("") ? "S" : tblDat.getValueAt(intNumFil, INT_TBL_IVATXT).toString())));
        if (strIva.equals("S")) {
            if (stIvaVen.equals("N")) {
                tblDat.setValueAt(false, intNumFil, INT_TBL_BLNIVA);
            } else {
                tblDat.setValueAt(true, intNumFil, INT_TBL_BLNIVA);
            }
        } else {
            tblDat.setValueAt(false, intNumFil, INT_TBL_BLNIVA);
        }


        tblDat.setValueAt(new Integer(intCodBodPre), intNumFil, INT_TBL_CODBODPRV);
        tblDat.setValueAt(strNomBodPrv, intNumFil, INT_TBL_NOMBODPRV);

        if (!(tblDat.getValueAt(intNumFil, INT_TBL_ITMTER).toString().trim().equalsIgnoreCase("S"))) {
            tblDat.setValueAt(new Double("0.00"), intNumFil, INT_TBL_PRE_COS);
            tblDat.setValueAt(new Double("0.00"), intNumFil, INT_TBL_DESPRECOM);
            tblDat.setValueAt(null, intNumFil, INT_TBL_COD_PRO);
            tblDat.setValueAt(null, intNumFil, INT_TBL_NOM_PRO);

            tblDat.setValueAt(null, intNumFil, INT_TBL_CODBODPRV);
            tblDat.setValueAt(null, intNumFil, INT_TBL_NOMBODPRV);
        }


        tblDat.setValueAt(new Integer(intCodBodPre), intNumFil, INT_TBL_CODBOD);



        if (tblDat.getValueAt(0, INT_TBL_PORDES) != null) {
            tblDat.setValueAt(tblDat.getValueAt(0, INT_TBL_PORDES), intNumFil, INT_TBL_PORDES);
        }
        if (strBloPre.equals("S")) {
            tblDat.setValueAt("0.00", intNumFil, INT_TBL_PORDES);
        }


        String strTipUniMed = objInvItm.getStringDatoValidado(tblDat.getValueAt(intNumFil, INT_TBL_TIPUNIMED));
        if (strTipUniMed.equals("E")) {
            double dlbCanIng = objUti.redondear(tblDat.getValueAt(intNumFil, INT_TBL_CANMOV).toString(), 4);
            if (dlbCanIng > 0) {
                double dlbResVal = objInvItm.Truncar(objUti.redondear(tblDat.getValueAt(intNumFil, INT_TBL_CANMOV).toString(), 4), 0);
                dlbResVal = objUti.redondear((dlbCanIng - dlbResVal), 4);
                if (dlbResVal > 0) {
                    MensajeInf("SOLO SE PERMITE INGRESAR VALORES ENTEROS ");
                    tblDat.setValueAt("0", intNumFil, INT_TBL_CANMOV);
                }
            }
        }
//        System.out.println("eventoVenCon");
        calculaSubTot(intNumFil);
        tblDat.repaint();
        tblDat.requestFocus();
//        tblDat.editCellAt(intNumFil, INT_TBL_CANMOV);
    }
    
    /**
     * Se encarga de calcular el total de la tabla y asu vez presenta el total
     * final y calcula la forma de pago
     */
    public void calculaSubTot(int intFilSel) {
        double dblCan, dblDes, dblCosto, dblTotal = 0.00, dblPre = 0.00, dblValDes = 0.00;
        double dblPesCfgCli, dblPesTot=0.00;
         
        dblCan = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_CANMOV) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_CANMOV).toString())));
        dblPre = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PREUNI) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PREUNI).toString())));
        dblDes = objUti.redondear(Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PORDES).toString()))), 2);
        dblValDes = ((dblCan * dblPre) == 0) ? 0 : ((dblCan * dblPre) * (dblDes / 100));
        dblTotal = (dblCan * dblPre) - dblValDes;
        dblTotal = objUti.redondear(dblTotal, intNumDec);
        /*  José Marín - 21/Oct/2015 */
        dblPesCfgCli = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PESITM) == null)? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PESITM).toString())));
        dblPesTot = dblPesCfgCli * dblCan;
        dblPesTot = objUti.redondear(dblPesTot, 3);
        dblPesTot = objUti.redondear(dblPesTot, 2);
        tblDat.setValueAt(dblPesTot + "", intFilSel, INT_TBL_PESTOT);
        /*  José Marín - 21/Oct/2015 */
        tblDat.setValueAt(dblTotal + "", intFilSel, INT_TBL_TOTAL);
        calculaTot();
        calculaPag();
        calcularTotPesDoc();  /* José Marín - 20/Oct/2015 */
    }
    
    /* RESERVAS 2017/Marzo/16 JoseMario */
    
    
    
    
    
    private boolean getIvaItm(java.sql.Connection conn, int intCodEmp, String strCodItm) {
        boolean blnRes = false;
        java.sql.ResultSet rstLoc;
        java.sql.Statement stmLoc;
        String strSql = "";
        try {
            if (conn != null) {
                stmLoc = conn.createStatement();
                strSql = "SELECT st_ivaven FROM tbm_inv AS a WHERE a.co_emp=" + intCodEmp + " AND a.co_itm=" + strCodItm + " AND st_ivaven='S' ";
                rstLoc = stmLoc.executeQuery(strSql);
                if (rstLoc.next()) {
                    blnRes = true;
                }
                rstLoc.close();
                rstLoc = null;
                stmLoc.close();
                stmLoc = null;
            }
        } catch (java.sql.SQLException Evt) {
            blnRes = true;
            objUti.mostrarMsgErr_F1(this, Evt);
        } catch (Exception Evt) {
            blnRes = true;
            objUti.mostrarMsgErr_F1(this, Evt);
        }
        return blnRes;
    }

    //****************************************************************
    public void calculaSubTotTodLosItm() {
        String strIva = "S";
        double dblCan, dblDes, dblCosto, dblTotal = 0.00, dblPre = 0.00, dblValDes = 0.00;
        double dblSub = 0, dblIva = 0, dblDes2 = 0, dblTmp = 0, dblSub2 = 0, dblCom=0, dblIvaCero=0;
        int intFilSel = 0;  //tblDat.getSelectedRow();
        BigDecimal bgdCanItm;
        BigDecimal bgdPreItm;
        BigDecimal bgdValDesItm;
        BigDecimal bgdPorDesItm;
        BigDecimal bgdTotItm=BigDecimal.ZERO;
        for (int intNumFil = 0; intNumFil < tblDat.getRowCount(); intNumFil++) {
            if (tblDat.getValueAt(intNumFil, INT_TBL_CODITM) != null) {
                intFilSel = intNumFil;
                dblCan = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_CANMOV) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_CANMOV).toString())));
                dblPre = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PREUNI) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PREUNI).toString())));
                dblDes = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PORDES).toString())));
//                dblValDes = ((dblCan * dblPre) == 0) ? 0 : ((dblCan * dblPre) * (dblDes / 100));
//                dblTotal = (dblCan * dblPre) - dblValDes;
//                dblTotal = objUti.redondear(dblTotal, intNumDec);
                 
            /* JM : Ahora con BigDecimal 22/Marzo/2017 */
               

               bgdCanItm=BigDecimal.valueOf(dblCan) ;
               bgdPreItm=BigDecimal.valueOf(dblPre) ;
               bgdPorDesItm=BigDecimal.valueOf(dblDes) ;

               //DESCUENTO
               bgdValDesItm = bgdPorDesItm.multiply((bgdCanItm.multiply(bgdPreItm))); 
                bgdValDesItm = bgdValDesItm.divide(new BigDecimal("100"),objZafParSis.getDecimalesBaseDatos(),BigDecimal.ROUND_HALF_UP);
               ///TOTAL
               bgdTotItm=objUti.redondearBigDecimal((bgdCanItm.multiply(bgdPreItm)).subtract(bgdValDesItm), objZafParSis.getDecimalesMostrar());    
               dblTotal = bgdTotItm.doubleValue();
                tblDat.setValueAt(dblTotal + "", intFilSel, INT_TBL_TOTAL);

                dblSub2 = ((tblDat.getValueAt(intFilSel, INT_TBL_TOTAL) == null || tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString().equals("")) ? 0 : Double.parseDouble(tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString()));
                dblSub = dblSub + objUti.redondear(dblSub2, intNumDec);

                strIva = ((tblDat.getValueAt(intFilSel, INT_TBL_BLNIVA) == null ? "S" : (tblDat.getValueAt(intFilSel, INT_TBL_BLNIVA).toString().equals("") ? "S" : tblDat.getValueAt(intFilSel, INT_TBL_BLNIVA).toString().equals("true") ? "S" : "N")));
                if (strIva.equals("S")) {
                    dblTmp = ((tblDat.getValueAt(intFilSel, INT_TBL_TOTAL) == null || tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString().equals("")) ? 0 : Double.parseDouble(tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString()));
//                    dblIva = dblIva + (((dblTmp * dblPorIva) == 0) ? 0 : (dblTmp * dblPorIva) / 100);
//                    dblCom = dblCom + (((dblTmp * dblPorComSol) == 0) ? 0 : (dblTmp * dblPorComSol) / 100);
                    System.out.println("calculaSubTotTodLosItm dblTmp + " + dblTmp);
                    dblIva = dblTmp+dblIva;
                    dblCom = dblTmp+dblCom;
                    
                    
                } else {
                    dblTmp = ((tblDat.getValueAt(intFilSel, INT_TBL_TOTAL) == null || tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString().equals("")) ? 0 : Double.parseDouble(tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString()));
                    dblIva = dblIva + 0;
                    dblCom = dblCom + 0;
                    dblIvaCero = dblTmp + dblIvaCero;
                }
                /*  José Marín - 21/Oct/2015 */
                double dblPesCfgCli, dblPesTot=0.00;
                dblPesCfgCli = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PESITM) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PESITM).toString())));
                dblPesTot = dblPesCfgCli * dblCan;

                dblPesTot = objUti.redondear(dblPesTot, 3);
                dblPesTot = objUti.redondear(dblPesTot, 2);

                tblDat.setValueAt(dblPesTot + "", intFilSel, INT_TBL_PESTOT);
                /*  José Marín - 21/Oct/2015 */
            }
        }

 
        dblBaseCero = objUti.redondear(dblIvaCero, objZafParSis.getDecimalesMostrar());
        dblBaseIva = objUti.redondear(dblIva, objZafParSis.getDecimalesMostrar());
        dblSubtotalCot= objUti.redondear(dblBaseCero+dblBaseIva, objZafParSis.getDecimalesMostrar()) ;
        
        dblIvaCot = objUti.redondear((dblBaseIva*dblPorIva)/100, objZafParSis.getDecimalesMostrar());
        dblComSol = objUti.redondear((dblBaseIva*dblPorComSol)/100, objZafParSis.getDecimalesMostrar());
         /* JM Temporal 23/Mar/2017 */
        if(objZafParSis.getCodigoEmpresa()==2 && objZafParSis.getCodigoLocal()==4){
            double dblTemp = objUti.redondear(dblSubtotalCot*(dblPorComSol/100),2);
            if( dblTemp != dblComSol){
                dblComSol = dblTemp;
            }
        }
        if(blnIsComSol && dblPorIva==14.00){
            dblTotalCot = objUti.redondear((dblSubtotalCot + dblIvaCot), objZafParSis.getDecimalesMostrar()) ; 
            dblValorPagar = objUti.redondear(dblTotalCot - dblComSol, objZafParSis.getDecimalesMostrar()) ;
        }else{
            dblTotalCot = objUti.redondear( dblSubtotalCot + dblIvaCot, objZafParSis.getDecimalesMostrar()); 
        }
        
 
        
        txtBas0.setText(""+dblBaseCero);
        txtSubIva.setText(""+dblBaseIva);
        txtSub.setText(""+dblSubtotalCot);
        txtIva.setText(""+dblIvaCot);       
        txtTot.setText(""+dblTotalCot);
        txtComSol.setText(""+dblComSol );
        if(dblValorPagar>0){
            txtValPag.setText(""+dblValorPagar); 
        }else{
           txtValPag.setText(""+dblTotalCot); 
        }
        
        ////////////////////////////////////////////////////////////////
        calcularTotPesDoc(); /* José Marín - 20/Oct/2015 */
        /////////////////////////////////////////////////////////////

        calculaPag();
    }

    public void calculaSubTotTodLosItm2() {
        String strIva = "S";
        double dblCan, dblDes, dblCosto, dblTotal = 0.00, dblPre = 0.00, dblValDes = 0.00;
        double dblSub = 0, dblIva = 0, dblDes2 = 0, dblTmp = 0, dblSub2 = 0,dblCom=0,dblIvaCero=0.00;
        int intFilSel = 0;
        BigDecimal bgdCanItm;
        BigDecimal bgdPreItm;
        BigDecimal bgdValDesItm;
        BigDecimal bgdPorDesItm;
        BigDecimal bgdTotItm=BigDecimal.ZERO;
        for (int intNumFil = 0; intNumFil < tblDat.getRowCount(); intNumFil++) {
            if (tblDat.getValueAt(intNumFil, INT_TBL_CODITM) != null) {
                intFilSel = intNumFil;
                dblCan = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_CANMOV) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_CANMOV).toString())));
                dblPre = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PREUNI) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PREUNI).toString())));
                dblDes = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PORDES).toString())));
//                dblValDes = ((dblCan * dblPre) == 0) ? 0 : ((dblCan * dblPre) * (dblDes / 100));
//                dblTotal = (dblCan * dblPre) - dblValDes;
               
                 /* JM : Ahora con BigDecimal 22/Marzo/2017 */
               

               bgdCanItm=BigDecimal.valueOf(dblCan) ;
               bgdPreItm=BigDecimal.valueOf(dblPre) ;
               bgdPorDesItm=BigDecimal.valueOf(dblDes) ;

               //DESCUENTO
               bgdValDesItm = bgdPorDesItm.multiply((bgdCanItm.multiply(bgdPreItm))); 
                bgdValDesItm = bgdValDesItm.divide(new BigDecimal("100"),objZafParSis.getDecimalesBaseDatos(),BigDecimal.ROUND_HALF_UP);
               ///TOTAL
               bgdTotItm=objUti.redondearBigDecimal((bgdCanItm.multiply(bgdPreItm)).subtract(bgdValDesItm), objZafParSis.getDecimalesMostrar());    
               dblTotal = bgdTotItm.doubleValue();
                
                
                dblTotal = objUti.redondear(dblTotal, intNumDec);
                tblDat.setValueAt(dblTotal + "", intFilSel, INT_TBL_TOTAL);
                 

                dblSub2 = ((tblDat.getValueAt(intFilSel, INT_TBL_TOTAL) == null || tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString().equals("")) ? 0 : Double.parseDouble(tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString()));
                dblSub = dblSub + objUti.redondear(dblSub2, intNumDec);

                strIva = ((tblDat.getValueAt(intFilSel, INT_TBL_BLNIVA) == null ? "S" : (tblDat.getValueAt(intFilSel, INT_TBL_BLNIVA).toString().equals("") ? "S" : tblDat.getValueAt(intFilSel, INT_TBL_BLNIVA).toString().equals("true") ? "S" : "N")));
                if (strIva.equals("S")) {
                    dblTmp = ((tblDat.getValueAt(intFilSel, INT_TBL_TOTAL) == null || tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString().equals("")) ? 0 : Double.parseDouble(tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString()));
//                    dblIva = dblIva + (((dblTmp * dblPorIva) == 0) ? 0 : (dblTmp * dblPorIva) / 100);
//                    dblCom = dblCom + (((dblTmp * dblPorComSol) == 0) ? 0 : (dblTmp * dblPorComSol) / 100);
                    System.out.println("calculaSubTotTodLosItm2 dblTmp + " + dblTmp);
                    dblIva = dblTmp+dblIva;
                    dblCom = dblTmp+dblCom;
                } else {
                    dblTmp = ((tblDat.getValueAt(intFilSel, INT_TBL_TOTAL) == null || tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString().equals("")) ? 0 : Double.parseDouble(tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString()));
                    dblIva = dblIva + 0;
                    dblCom = dblCom + 0;
                    dblIvaCero = dblTmp + dblIvaCero;
                }
                
                /*  José Marín - 21/Oct/2015 */
                double dblPesCfgCli, dblPesTot=0.00;
                dblPesCfgCli = Double.parseDouble(((tblDat.getValueAt(intFilSel, INT_TBL_PESITM) == null) ? "0" : (tblDat.getValueAt(intFilSel, INT_TBL_PESITM).toString())));
                dblPesTot = dblPesCfgCli * dblCan;

                dblPesTot = objUti.redondear(dblPesTot, 3);
                dblPesTot = objUti.redondear(dblPesTot, 2);

                tblDat.setValueAt(dblPesTot + "", intFilSel, INT_TBL_PESTOT);
                /*  José Marín - 21/Oct/2015 */
                
            }
        }
        
        
        dblBaseCero = objUti.redondear(dblIvaCero, objZafParSis.getDecimalesMostrar());
        dblBaseIva = objUti.redondear(dblIva, objZafParSis.getDecimalesMostrar());
        dblSubtotalCot= objUti.redondear(dblBaseCero+dblBaseIva, objZafParSis.getDecimalesMostrar()) ;
        dblIvaCot = objUti.redondear((dblBaseIva*dblPorIva)/100, objZafParSis.getDecimalesMostrar());
        dblComSol = objUti.redondear((dblBaseIva*dblPorComSol)/100, objZafParSis.getDecimalesMostrar());
         /* JM Temporal 23/Mar/2017 */
        if(objZafParSis.getCodigoEmpresa()==2 && objZafParSis.getCodigoLocal()==4){
            double dblTemp = objUti.redondear(dblSubtotalCot*(dblPorComSol/100),2);
            if( dblTemp != dblComSol){
                dblComSol = dblTemp;
            }
        }
        
        if(blnIsComSol && dblPorIva==14.00){
            dblTotalCot = objUti.redondear((dblSubtotalCot + dblIvaCot), objZafParSis.getDecimalesMostrar()) ; 
            dblValorPagar = objUti.redondear(dblTotalCot - dblComSol, objZafParSis.getDecimalesMostrar()) ;
        }else{
            dblTotalCot = objUti.redondear( dblSubtotalCot + dblIvaCot, objZafParSis.getDecimalesMostrar()); 
        }
         
        
        
        txtBas0.setText(""+dblBaseCero);
        txtSubIva.setText(""+dblBaseIva);
        txtSub.setText(""+dblSubtotalCot);
        txtIva.setText(""+dblIvaCot);       
        txtTot.setText(""+dblTotalCot);
        txtComSol.setText(""+dblComSol );
        if(dblValorPagar>0){
            txtValPag.setText(""+dblValorPagar); 
        }else{
           txtValPag.setText(""+dblTotalCot); 
        }
        
       
        calcularTotPesDoc(); /* José Marín - 20/Oct/2015 */
        calculaPag();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        grpInsFac = new javax.swing.ButtonGroup();
        lblCotNumDes = new javax.swing.JLabel();
        tabCotCom = new javax.swing.JTabbedPane();
        panCotGen = new javax.swing.JPanel();
        panCotGenNor = new javax.swing.JPanel();
        butVisOc = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblFecDoc1 = new javax.swing.JLabel();
        txtCot = new javax.swing.JTextField();
        lblAte1 = new javax.swing.JLabel();
        tx_numped = new javax.swing.JTextField();
        lblFecDoc = new javax.swing.JLabel();
        lblCom = new javax.swing.JLabel();
        lblAte = new javax.swing.JLabel();
        txtVenCod = new javax.swing.JTextField();
        txtVenNom = new javax.swing.JTextField();
        txtAte = new javax.swing.JTextField();
        butVenCon = new javax.swing.JButton();
        lblPrv = new javax.swing.JLabel();
        lblDir = new javax.swing.JLabel();
        txtCliCod = new javax.swing.JTextField();
        txtCliDir = new javax.swing.JTextField();
        txtCliNom = new javax.swing.JTextField();
        butCliCon = new javax.swing.JButton();
        butDirCliCon = new javax.swing.JButton();
        txtNomCliVar = new javax.swing.JTextField();
        butCopyCot = new javax.swing.JButton();
        butMakeFactura = new javax.swing.JButton();
        lblDirGui = new javax.swing.JLabel();
        txtCliDirGui = new javax.swing.JTextField();
        butDirCliConGui = new javax.swing.JButton();
        butCopyInmaconsa = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtPesKgr = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        rdoNA = new javax.swing.JRadioButton();
        rdoInicio = new javax.swing.JRadioButton();
        rdoFinal = new javax.swing.JRadioButton();
        btnSolRes = new javax.swing.JButton();
        btnReservas = new javax.swing.JButton();
        btnODRes = new javax.swing.JButton();
        spnCon = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panCotGenSur = new javax.swing.JPanel();
        panCotGenSurCen = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        lblObs2 = new javax.swing.JLabel();
        spnObs1 = new javax.swing.JScrollPane();
        txaObs1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        lblObs1 = new javax.swing.JLabel();
        spnObs2 = new javax.swing.JScrollPane();
        txaObs2 = new javax.swing.JTextArea();
        panCotGenSurEst = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtBas0 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtSubIva = new javax.swing.JTextField();
        lblSubTot = new javax.swing.JLabel();
        txtSub = new javax.swing.JTextField();
        lblIva = new javax.swing.JLabel();
        txtIva = new javax.swing.JTextField();
        lblTot = new javax.swing.JLabel();
        txtTot = new javax.swing.JTextField();
        lblComSol = new javax.swing.JLabel();
        txtComSol = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtValPag = new javax.swing.JTextField();
        panCotForPag = new javax.swing.JPanel();
        panCotForPagNor = new javax.swing.JPanel();
        lblForPag = new javax.swing.JLabel();
        txtCodigoFormaPago = new javax.swing.JTextField();
        txtNomForPag = new javax.swing.JTextField();
        butConForPag = new javax.swing.JButton();
        lblTarCre = new javax.swing.JLabel();
        txtCodTarCre = new javax.swing.JTextField();
        txtNomTarCre = new javax.swing.JTextField();
        butConTarCre = new javax.swing.JButton();
        lblEmiTar = new javax.swing.JLabel();
        txtNomEmiTar = new javax.swing.JTextField();
        txtMesGra = new javax.swing.JTextField();
        panCotForPagCen = new javax.swing.JPanel();
        spnForPag = new javax.swing.JScrollPane();
        tblPag = new javax.swing.JTable();

        jLabel3.setText("jLabel3");

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setPreferredSize(new java.awt.Dimension(700, 550));
        setRequestFocusEnabled(false);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                CerrarVentana(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        lblCotNumDes.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
        lblCotNumDes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCotNumDes.setText("Cotizaciones");
        getContentPane().add(lblCotNumDes, java.awt.BorderLayout.NORTH);

        tabCotCom.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tabCotCom.setName("General"); // NOI18N

        panCotGen.setLayout(new java.awt.BorderLayout());

        panCotGenNor.setPreferredSize(new java.awt.Dimension(800, 128));
        panCotGenNor.setLayout(null);

        butVisOc.setText("Vista"); // NOI18N
        butVisOc.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        butVisOc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butVisOcActionPerformed(evt);
            }
        });
        panCotGenNor.add(butVisOc);
        butVisOc.setBounds(594, 4, 70, 20);

        jLabel1.setText("No. de cotización:"); // NOI18N
        panCotGenNor.add(jLabel1);
        jLabel1.setBounds(0, 24, 100, 20);

        lblFecDoc1.setText("Fecha del documento:"); // NOI18N
        lblFecDoc1.setToolTipText("Fecha del documento");
        lblFecDoc1.setPreferredSize(new java.awt.Dimension(110, 15));
        panCotGenNor.add(lblFecDoc1);
        lblFecDoc1.setBounds(0, 44, 100, 20);

        txtCot.setBackground(objZafParSis.getColorCamposSistema()
        );
        objZafParSis.getColorCamposObligatorios();
        txtCot.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCot.setMaximumSize(null);
        txtCot.setPreferredSize(new java.awt.Dimension(70, 20));
        txtCot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCotActionPerformed(evt);
            }
        });
        txtCot.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCotKeyPressed(evt);
            }
        });
        panCotGenNor.add(txtCot);
        txtCot.setBounds(100, 24, 100, 20);

        lblAte1.setText("No. de pedido:"); // NOI18N
        lblAte1.setPreferredSize(new java.awt.Dimension(100, 15));
        panCotGenNor.add(lblAte1);
        lblAte1.setBounds(204, 24, 100, 20);

        tx_numped.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        panCotGenNor.add(tx_numped);
        tx_numped.setBounds(304, 24, 100, 20);

        lblFecDoc.setText("Recordatorio:"); // NOI18N
        lblFecDoc.setToolTipText("Fecha de recordatorio");
        lblFecDoc.setPreferredSize(new java.awt.Dimension(110, 15));
        panCotGenNor.add(lblFecDoc);
        lblFecDoc.setBounds(204, 44, 100, 20);

        lblCom.setText("Vendedor:"); // NOI18N
        lblCom.setPreferredSize(new java.awt.Dimension(100, 15));
        panCotGenNor.add(lblCom);
        lblCom.setBounds(408, 24, 68, 20);

        lblAte.setText("Atención:"); // NOI18N
        lblAte.setPreferredSize(new java.awt.Dimension(100, 15));
        panCotGenNor.add(lblAte);
        lblAte.setBounds(408, 44, 68, 20);

        txtVenCod.setBackground(objZafParSis.getColorCamposObligatorios());
        txtVenCod.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtVenCod.setMinimumSize(new java.awt.Dimension(0, 0));
        txtVenCod.setPreferredSize(new java.awt.Dimension(25, 20));
        txtVenCod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVenCodActionPerformed(evt);
            }
        });
        txtVenCod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtVenCodFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtVenCodFocusLost(evt);
            }
        });
        panCotGenNor.add(txtVenCod);
        txtVenCod.setBounds(476, 24, 32, 20);

        txtVenNom.setBackground(objZafParSis.getColorCamposObligatorios());
        txtVenNom.setPreferredSize(new java.awt.Dimension(100, 20));
        txtVenNom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVenNomActionPerformed(evt);
            }
        });
        txtVenNom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtVenNomFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtVenNomFocusLost(evt);
            }
        });
        panCotGenNor.add(txtVenNom);
        txtVenNom.setBounds(508, 24, 156, 20);
        panCotGenNor.add(txtAte);
        txtAte.setBounds(476, 44, 188, 20);

        butVenCon.setText("..."); // NOI18N
        butVenCon.setPreferredSize(new java.awt.Dimension(20, 20));
        butVenCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butVenConActionPerformed(evt);
            }
        });
        panCotGenNor.add(butVenCon);
        butVenCon.setBounds(664, 24, 20, 20);

        lblPrv.setText("Cliente:"); // NOI18N
        panCotGenNor.add(lblPrv);
        lblPrv.setBounds(0, 64, 100, 20);

        lblDir.setText("Dirección Fact:"); // NOI18N
        panCotGenNor.add(lblDir);
        lblDir.setBounds(0, 84, 100, 20);

        txtCliCod.setBackground(objZafParSis.getColorCamposObligatorios());
        txtCliCod.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtCliCod.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCliCod.setMinimumSize(new java.awt.Dimension(0, 0));
        txtCliCod.setPreferredSize(new java.awt.Dimension(25, 20));
        txtCliCod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCliCodActionPerformed(evt);
            }
        });
        txtCliCod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCliCodFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCliCodFocusLost(evt);
            }
        });
        panCotGenNor.add(txtCliCod);
        txtCliCod.setBounds(100, 64, 40, 20);

        txtCliDir.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtCliDir.setPreferredSize(new java.awt.Dimension(70, 20));
        txtCliDir.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtCliDirCaretUpdate(evt);
            }
        });
        txtCliDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCliDirActionPerformed(evt);
            }
        });
        panCotGenNor.add(txtCliDir);
        txtCliDir.setBounds(100, 84, 340, 20);

        txtCliNom.setBackground(objZafParSis.getColorCamposObligatorios());
        txtCliNom.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtCliNom.setPreferredSize(new java.awt.Dimension(100, 20));
        txtCliNom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCliNomFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCliNomFocusLost(evt);
            }
        });
        txtCliNom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCliNomActionPerformed(evt);
            }
        });
        txtCliNom.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                txtCliNomVetoableChange(evt);
            }
        });
        panCotGenNor.add(txtCliNom);
        txtCliNom.setBounds(140, 64, 300, 20);

        butCliCon.setText("..."); // NOI18N
        butCliCon.setPreferredSize(new java.awt.Dimension(20, 20));
        butCliCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCliConActionPerformed(evt);
            }
        });
        panCotGenNor.add(butCliCon);
        butCliCon.setBounds(440, 64, 20, 20);

        butDirCliCon.setText("..."); // NOI18N
        butDirCliCon.setPreferredSize(new java.awt.Dimension(20, 20));
        butDirCliCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDirCliConActionPerformed(evt);
            }
        });
        panCotGenNor.add(butDirCliCon);
        butDirCliCon.setBounds(440, 84, 20, 20);
        panCotGenNor.add(txtNomCliVar);
        txtNomCliVar.setBounds(464, 64, 12, 20);

        butCopyCot.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        butCopyCot.setText("Copiar"); // NOI18N
        butCopyCot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCopyCotActionPerformed(evt);
            }
        });
        panCotGenNor.add(butCopyCot);
        butCopyCot.setBounds(460, 84, 64, 20);

        butMakeFactura.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        butMakeFactura.setText("Facturar"); // NOI18N
        butMakeFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butMakeFacturaActionPerformed(evt);
            }
        });
        panCotGenNor.add(butMakeFactura);
        butMakeFactura.setBounds(609, 84, 72, 20);

        lblDirGui.setText("Dirección Guia:"); // NOI18N
        panCotGenNor.add(lblDirGui);
        lblDirGui.setBounds(0, 105, 100, 20);

        txtCliDirGui.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtCliDirGui.setPreferredSize(new java.awt.Dimension(70, 20));
        txtCliDirGui.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtCliDirGuiCaretUpdate(evt);
            }
        });
        txtCliDirGui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCliDirGuiActionPerformed(evt);
            }
        });
        panCotGenNor.add(txtCliDirGui);
        txtCliDirGui.setBounds(100, 105, 340, 20);

        butDirCliConGui.setText("..."); // NOI18N
        butDirCliConGui.setPreferredSize(new java.awt.Dimension(20, 20));
        butDirCliConGui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDirCliConGuiActionPerformed(evt);
            }
        });
        panCotGenNor.add(butDirCliConGui);
        butDirCliConGui.setBounds(440, 105, 20, 20);

        butCopyInmaconsa.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        butCopyInmaconsa.setText("Inmaconsa"); // NOI18N
        butCopyInmaconsa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCopyInmaconsaActionPerformed(evt);
            }
        });
        panCotGenNor.add(butCopyInmaconsa);
        butCopyInmaconsa.setBounds(523, 84, 87, 20);
        butCopyInmaconsa.getAccessibleContext().setAccessibleName("btnCopInm");

        jLabel2.setText("Peso Kg:");
        panCotGenNor.add(jLabel2);
        jLabel2.setBounds(480, 65, 60, 14);
        panCotGenNor.add(txtPesKgr);
        txtPesKgr.setBounds(559, 64, 100, 20);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel4.setText("Emitir factura al:");
        panCotGenNor.add(jLabel4);
        jLabel4.setBounds(462, 110, 80, 13);

        grpInsFac.add(rdoNA);
        rdoNA.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdoNA.setSelected(true);
        rdoNA.setText("NA");
        rdoNA.setEnabled(false);
        panCotGenNor.add(rdoNA);
        rdoNA.setBounds(540, 105, 40, 21);

        grpInsFac.add(rdoInicio);
        rdoInicio.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdoInicio.setText("Inicio");
        rdoInicio.setEnabled(false);
        panCotGenNor.add(rdoInicio);
        rdoInicio.setBounds(584, 105, 50, 21);

        grpInsFac.add(rdoFinal);
        rdoFinal.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdoFinal.setText("Final");
        rdoFinal.setEnabled(false);
        panCotGenNor.add(rdoFinal);
        rdoFinal.setBounds(632, 105, 50, 21);

        btnSolRes.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnSolRes.setText("Sol.Res.");
        btnSolRes.setToolTipText("Solicitar reserva de la cotizacion.");
        btnSolRes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSolResActionPerformed(evt);
            }
        });
        panCotGenNor.add(btnSolRes);
        btnSolRes.setBounds(2, 4, 80, 20);

        btnReservas.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnReservas.setText("Reservas");
        btnReservas.setToolTipText("Consultar los Items reservados para un cliente.");
        btnReservas.setOpaque(false);
        btnReservas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReservasActionPerformed(evt);
            }
        });
        panCotGenNor.add(btnReservas);
        btnReservas.setBounds(512, 4, 80, 20);

        btnODRes.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnODRes.setText("OD Res.");
        btnODRes.setToolTipText("Muestra la OD del Egreso por Reserva.");
        btnODRes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnODResActionPerformed(evt);
            }
        });
        panCotGenNor.add(btnODRes);
        btnODRes.setBounds(83, 4, 80, 20);

        panCotGen.add(panCotGenNor, java.awt.BorderLayout.NORTH);

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Linea", "Codigo", "...", "Descripción", "Unidad", "Cantidad", "Precio", "%Desc", "Iva", "Total", "Codigo", "Pre.Com", "Cod.prv", "proveedor", "...", "BLVPRE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Double.class, java.lang.Short.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false, true, true, true, true, false, false, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblDat.setCellSelectionEnabled(true);
        spnCon.setViewportView(tblDat);

        panCotGen.add(spnCon, java.awt.BorderLayout.CENTER);

        panCotGenSur.setPreferredSize(new java.awt.Dimension(430, 99));
        panCotGenSur.setLayout(new java.awt.BorderLayout());

        panCotGenSurCen.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.GridLayout(2, 1));

        jPanel4.setLayout(new java.awt.BorderLayout());

        lblObs2.setText("Observación 1:"); // NOI18N
        lblObs2.setPreferredSize(new java.awt.Dimension(100, 14));
        jPanel4.add(lblObs2, java.awt.BorderLayout.WEST);

        txaObs1.setLineWrap(true);
        spnObs1.setViewportView(txaObs1);

        jPanel4.add(spnObs1, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel4);

        jPanel3.setPreferredSize(new java.awt.Dimension(250, 25));
        jPanel3.setLayout(new java.awt.BorderLayout());

        lblObs1.setText("Observación 2:"); // NOI18N
        lblObs1.setPreferredSize(new java.awt.Dimension(100, 14));
        jPanel3.add(lblObs1, java.awt.BorderLayout.WEST);

        txaObs2.setLineWrap(true);
        spnObs2.setViewportView(txaObs2);

        jPanel3.add(spnObs2, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel3);

        panCotGenSurCen.add(jPanel5, java.awt.BorderLayout.CENTER);

        panCotGenSur.add(panCotGenSurCen, java.awt.BorderLayout.CENTER);

        panCotGenSurEst.setLayout(new java.awt.GridLayout(7, 2));

        jLabel5.setText("Sub Base 0:");
        panCotGenSurEst.add(jLabel5);

        txtBas0.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panCotGenSurEst.add(txtBas0);

        jLabel6.setText("Sub Iva:");
        panCotGenSurEst.add(jLabel6);

        txtSubIva.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panCotGenSurEst.add(txtSubIva);

        lblSubTot.setText("Sub.Tot. sin Imp:"); // NOI18N
        lblSubTot.setPreferredSize(new java.awt.Dimension(90, 14));
        panCotGenSurEst.add(lblSubTot);

        txtSub.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panCotGenSurEst.add(txtSub);

        lblIva.setText("IVA:"); // NOI18N
        lblIva.setPreferredSize(new java.awt.Dimension(60, 14));
        panCotGenSurEst.add(lblIva);

        txtIva.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panCotGenSurEst.add(txtIva);

        lblTot.setText("Total:"); // NOI18N
        lblTot.setPreferredSize(new java.awt.Dimension(60, 14));
        panCotGenSurEst.add(lblTot);

        txtTot.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txtTot.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panCotGenSurEst.add(txtTot);

        lblComSol.setText("Compensación(-):");
        panCotGenSurEst.add(lblComSol);

        txtComSol.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panCotGenSurEst.add(txtComSol);

        jLabel7.setText("Valor a pagar:");
        panCotGenSurEst.add(jLabel7);

        txtValPag.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panCotGenSurEst.add(txtValPag);

        panCotGenSur.add(panCotGenSurEst, java.awt.BorderLayout.EAST);

        panCotGen.add(panCotGenSur, java.awt.BorderLayout.SOUTH);

        tabCotCom.addTab("tab1", panCotGen);

        panCotForPag.setLayout(new java.awt.BorderLayout());

        panCotForPagNor.setPreferredSize(new java.awt.Dimension(249, 75));
        panCotForPagNor.setLayout(null);

        lblForPag.setText("Forma de pago:"); // NOI18N
        panCotForPagNor.add(lblForPag);
        lblForPag.setBounds(4, 4, 180, 20);

        txtCodigoFormaPago.setBackground(objZafParSis.getColorCamposObligatorios());
        txtCodigoFormaPago.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCodigoFormaPago.setPreferredSize(new java.awt.Dimension(180, 21));
        txtCodigoFormaPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoFormaPagoActionPerformed(evt);
            }
        });
        txtCodigoFormaPago.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodigoFormaPagoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodigoFormaPagoFocusLost(evt);
            }
        });
        panCotForPagNor.add(txtCodigoFormaPago);
        txtCodigoFormaPago.setBounds(184, 4, 60, 20);

        txtNomForPag.setBackground(objZafParSis.getColorCamposObligatorios());
        txtNomForPag.setPreferredSize(new java.awt.Dimension(180, 21));
        txtNomForPag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomForPagActionPerformed(evt);
            }
        });
        txtNomForPag.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomForPagFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomForPagFocusLost(evt);
            }
        });
        panCotForPagNor.add(txtNomForPag);
        txtNomForPag.setBounds(244, 4, 400, 20);

        butConForPag.setText("..."); // NOI18N
        butConForPag.setPreferredSize(new java.awt.Dimension(20, 20));
        butConForPag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConForPagActionPerformed(evt);
            }
        });
        panCotForPagNor.add(butConForPag);
        butConForPag.setBounds(645, 4, 20, 20);

        lblTarCre.setText("Tarjeta de crédito/débito:"); // NOI18N
        panCotForPagNor.add(lblTarCre);
        lblTarCre.setBounds(4, 24, 180, 20);

        txtCodTarCre.setBackground(objZafParSis.getColorCamposObligatorios());
        txtCodTarCre.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCodTarCre.setPreferredSize(new java.awt.Dimension(180, 21));
        txtCodTarCre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodTarCreActionPerformed(evt);
            }
        });
        txtCodTarCre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodTarCreFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodTarCreFocusLost(evt);
            }
        });
        panCotForPagNor.add(txtCodTarCre);
        txtCodTarCre.setBounds(184, 24, 60, 20);

        txtNomTarCre.setBackground(objZafParSis.getColorCamposObligatorios());
        txtNomTarCre.setPreferredSize(new java.awt.Dimension(180, 21));
        txtNomTarCre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomTarCreActionPerformed(evt);
            }
        });
        txtNomTarCre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomTarCreFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomTarCreFocusLost(evt);
            }
        });
        panCotForPagNor.add(txtNomTarCre);
        txtNomTarCre.setBounds(244, 24, 400, 20);

        butConTarCre.setText("..."); // NOI18N
        butConTarCre.setPreferredSize(new java.awt.Dimension(20, 20));
        butConTarCre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConTarCreActionPerformed(evt);
            }
        });
        panCotForPagNor.add(butConTarCre);
        butConTarCre.setBounds(645, 24, 20, 20);

        lblEmiTar.setText("Emisor de la tarjeta:"); // NOI18N
        panCotForPagNor.add(lblEmiTar);
        lblEmiTar.setBounds(4, 45, 180, 20);

        txtNomEmiTar.setBackground(objZafParSis.getColorCamposObligatorios());
        txtNomEmiTar.setPreferredSize(new java.awt.Dimension(180, 21));
        txtNomEmiTar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomEmiTarActionPerformed(evt);
            }
        });
        txtNomEmiTar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomEmiTarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomEmiTarFocusLost(evt);
            }
        });
        panCotForPagNor.add(txtNomEmiTar);
        txtNomEmiTar.setBounds(184, 45, 460, 20);

        txtMesGra.setBackground(objZafParSis.getColorCamposObligatorios());
        txtMesGra.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMesGra.setEnabled(false);
        txtMesGra.setPreferredSize(new java.awt.Dimension(180, 21));
        panCotForPagNor.add(txtMesGra);
        txtMesGra.setBounds(170, 40, 10, 20);

        panCotForPag.add(panCotForPagNor, java.awt.BorderLayout.NORTH);

        panCotForPagCen.setPreferredSize(new java.awt.Dimension(249, 50));
        panCotForPagCen.setLayout(new java.awt.BorderLayout());

        spnForPag.setPreferredSize(new java.awt.Dimension(453, 100));

        tblPag.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                " Línea", "Dias de crédito", "Fecha de Vencimiento", "%Retención", "Monto de Pago", "Días de gracia", "Codret", "tx_sop"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPag.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblPag.setColumnSelectionAllowed(true);
        spnForPag.setViewportView(tblPag);

        panCotForPagCen.add(spnForPag, java.awt.BorderLayout.CENTER);

        panCotForPag.add(panCotForPagCen, java.awt.BorderLayout.CENTER);

        tabCotCom.addTab("tab2", panCotForPag);

        getContentPane().add(tabCotCom, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-550)/2, 700, 550);
    }// </editor-fold>//GEN-END:initComponents

    private void butConForPagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConForPagActionPerformed
        // TODO add your handling code here:
        /*Ventas.ZafVen01.ZafVen01_04 obj = new  Ventas.ZafVen01.ZafVen01_04(javax.swing.JOptionPane.getFrameForComponent(this), true, objZafParSis);
        
         int codcli=Integer.parseInt((((txtCliCod.getText()==null) || (txtCliCod.getText().equalsIgnoreCase("")))?"0":txtCliCod.getText()));
         obj.SetvalCodCli(codcli);
        
         obj.show();
         if(obj.acepta()){
         txtCodForPag.setText(obj.GetCamSel(1));
         txtNomForPag.setText(obj.GetCamSel(2));
            
         txtCodigoFormaPago.setText(obj.GetCamSel(1));
            
         intTipForPagCotizacion = Integer.parseInt(obj.GetCamSel(3));
         dblPesCotizacion = Double.parseDouble(obj.GetCamSel(4));
              
            
         blnHayCam=true;
         CalculoPago();
            
         }*/
//        System.out.println("ZafVen01.butConForPagActionPerformed");
        mostrarVenConFormaPago(0);
        blnHayCam = true;
        if (intTipForPagCotizacion == 4) {
            habilitarCamposTarCre();
        } else {
            deshabilitarCamposTarCre();
            //CalculoPago();            
        }
        CalculoPago();

    }//GEN-LAST:event_butConForPagActionPerformed

    
       private boolean validarSolicitudTransferencia(){
        boolean blnRes = false;
        String strCadena = "", strMsg;
        java.sql.Connection conLoc;
        java.sql.Statement stmLoc,stmLocAux;
        java.sql.ResultSet rstLoc,rstLocAux;
        try {
            conLoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            stmLoc = conLoc.createStatement();
            strCadena = "";
            strCadena += " SELECT a1.co_emp, a1.co_loc, a1.co_cot, a2.co_seg";
            strCadena += " FROM tbm_cabCotVen as a1 ";
            strCadena += " INNER JOIN tbm_cabSegMovInv as a2 ON (a1.co_emp=a2.co_empRelCabCotVen AND " ;
            strCadena += "                                       a1.co_loc=a2.co_locRelCabCotVen AND a1.co_cot=a2.co_cotRelCabCotVen)" ;
            strCadena += " WHERE a1.co_emp="+objZafParSis.getCodigoEmpresa()+" and a1.co_loc="+objZafParSis.getCodigoLocal()+" and a1.co_cot="+txtCot.getText();
            System.out.println("validarSolicitudTransferencia: " + strCadena);
            rstLoc = stmLoc.executeQuery(strCadena);
            if (rstLoc.next()) {
                stmLocAux = conLoc.createStatement();
                strCadena = "";
                strCadena += " SELECT A1.CO_EMP, A1.CO_LOC, A1.NE_NUMDOC";
                strCadena += " FROM TBM_CABMOVINV AS A1 ";
                strCadena += " INNER JOIN TBM_CABCOTVEN AS A2 ON (A1.NE_NUMCOT= A2.CO_COT AND A1.CO_EMP=A2.CO_EMP AND A1.CO_LOC=A2.CO_LOC) " ;
                strCadena += " WHERE A2.CO_EMP="+objZafParSis.getCodigoEmpresa()+" AND A2.CO_LOC="+objZafParSis.getCodigoLocal()+" AND A2.CO_COT="+txtCot.getText();
                rstLocAux = stmLocAux.executeQuery(strCadena);
                if (rstLocAux.next()) {
                    blnRes = false;
                    strMsg = "<html> Se ha generado con exito la factura. <BR>";
                    strMsg += " Número: "+ rstLocAux.getString("ne_numDoc") +". <html>";
                    JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                }else{
                    blnRes = false;
                    strMsg = "<html> La cotización que desea facturar esta en proceso de transferencia. <BR>";
                    strMsg += "Cuando toda la mercaderia llegue a su destino se generara la Factura. <html>";
                    JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                }
                    
            }
            else{
                blnRes = true;
            }
            rstLoc.close();
            rstLoc = null;
            stmLoc.close();
            stmLoc = null;
            conLoc.close();
            conLoc = null;
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
       
       private boolean verificaCantidadesReservadasDisponibles(int CodEmp,int CodLoc,int CodCot){
            boolean blnRes=true;
            java.sql.Connection conLoc;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strAux, strItem="",strMsg="";
            try{
                conLoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                if(conLoc!=null){
                    if(objResInv.cotizacionVieneDeReservas(conLoc, CodEmp, CodLoc, CodCot)){
                        stmLoc = conLoc.createStatement();
                        strAux="";
                        strAux+=" SELECT a2.tx_codAlt, a4.co_emp, a4.co_loc, a4.co_cot, a4.co_reg, a4.nd_can, a4.nd_canFac, \n";    
                        strAux+="        a4.nd_canCan, CASE WHEN a4.nd_canPenFac IS NULL THEN 0 ELSE a4.nd_canPenFac END as nd_canPenFac, \n";
                        strAux+="        a4.nd_valFac,a4.nd_valCan,a4.nd_canAutRes,  \n";
                        strAux+="        CASE WHEN a4.nd_can >= (CASE WHEN a4.nd_canCan IS NULL THEN 0 ELSE a4.nd_canCan END + ";
                        strAux+="        CASE WHEN a4.nd_canFac IS NULL THEN 0 ELSE a4.nd_canFac END) THEN 'S' ELSE 'N' END AS estado ";           
                        strAux+=" FROM tbm_cabCotVen AS a1  \n";
                        strAux+=" INNER JOIN tbm_detCotVen AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_cot=a2.co_cot) \n";
                        strAux+=" INNER JOIN tbr_detCotVen AS a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND \n";
                        strAux+="                                    a2.co_cot=a3.co_cot AND a2.co_reg=a3.co_reg) \n";
                        strAux+=" INNER JOIN tbm_detCotVen AS a4 ON (a3.co_empRel=a4.co_emp AND a3.co_locRel=a4.co_loc AND \n";
                        strAux+="                                    a3.co_cotRel=a4.co_cot AND a3.co_regRel=a4.co_reg) \n";
                        strAux+=" WHERE a1.co_emp="+CodEmp+" and a1.co_loc="+CodLoc+" and a1.co_cot="+CodCot+" \n";
                        System.out.println("verificaCantidadesReservadasDisponibles: " + strAux);
                        rstLoc = stmLoc.executeQuery(strAux);
                        while(rstLoc.next()){
                            if(rstLoc.getString("estado").equals("N")){
                                blnRes=false;
                                strItem+="<tr><td>" +  rstLoc.getString("tx_codAlt") + " </td>";
                                strItem+=" <td>" + objUti.redondear(rstLoc.getString("nd_canPenFac"), objZafParSis.getDecimalesMostrar())  + " </td>";
                                strItem+=" <td>" + objUti.redondear(rstLoc.getString("nd_can"), objZafParSis.getDecimalesMostrar()) + " </td> ";
                                strItem+=" </tr> ";
                            }
                        }
                        if(!blnRes){
                            strMsg="<html> La Cotización posee Items con cantidades insuficientes. <BR><BR>" ;// CAMBIA
                            strMsg+=" <table BORDER=1><tr><td> ITEM </td> <td> Pendiente </td><td> Can.Sol. </td>";
                            strMsg+=""+ strItem + "    ";
                            strMsg+=" </table><BR>";
                            strMsg+="No se puede realizar esta operación. <html>";
                            System.out.println(strMsg);
                            String strTit="Mensaje del sistema Zafiro";
                            JOptionPane.showMessageDialog(this, strMsg, strTit, JOptionPane.ERROR_MESSAGE);
                        }
                        stmLoc.close();
                        rstLoc.close();
                        stmLoc=null;
                        rstLoc=null;
		    }
                    conLoc.close();
                    conLoc=null;
                }
            }
            catch (java.sql.SQLException e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
       }
       
       /**
        * 
        * @return 
        */
       
       private boolean cotizacionEstaReservada(){
        boolean blnRes = false;
        String strCadena = "", strMsg;
        java.sql.Connection conLoc;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;
        try {
            conLoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            stmLoc = conLoc.createStatement();
            strCadena = "";
            strCadena += " SELECT a1.co_emp, a1.co_loc, a1.co_cot  ";
            strCadena += " FROM tbm_cabCotVen as a1 ";
            strCadena += " WHERE a1.co_emp="+objZafParSis.getCodigoEmpresa()+" AND a1.co_loc="+objZafParSis.getCodigoLocal()+" AND a1.co_cot="+txtCot.getText()+" AND ";
            strCadena += "       a1.st_solResInv IS NOT NULL ";
            System.out.println("cotizacionEstaReservada: " + strCadena);
            rstLoc = stmLoc.executeQuery(strCadena);
            if (rstLoc.next()) {
                 blnRes = false;
                strMsg = "<html> La cotización esta en proceso de Reserva. <html> ";
                JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                blnRes = true;
            }
            rstLoc.close();
            rstLoc = null;
            stmLoc.close();
            stmLoc = null;
            conLoc.close();
            conLoc = null;
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private void CalculoPago() {
        try {
            java.sql.Connection conPag = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if (conPag != null) {
                if (!txtCodForPag.getText().equals("")) {
                    String sSQL2 = "SELECT A1.ne_numPag, A2.ne_diaCre, A2.st_sop "
                            + " FROM tbm_cabForPag as A1, tbm_detForPag as A2 " + // Tablas enlas cuales se trabajara y sus respectivos alias
                            " Where A1.co_forPag = " + txtCodForPag.getText() +// Clausulas Where para las tablas maestras
                            "       and A2.co_forPag = A1.co_forPag " + // Consultando en la empresa en la ke se esta trabajando
                            "       and A1.co_emp = " + intCodEmp + // Consultando en la empresa en la ke se esta trabajando
                            "       and A2.co_emp = A1.co_emp " + // Consultando en la empresa en la ke se esta trabajando
                            "       order by A2.co_reg ";// Consultando en el local en el ke se esta trabajando

                    String sSQL3 = "SELECT count(A2.ne_diaCre) as c "
                            + " FROM tbm_cabForPag as A1, tbm_detForPag as A2 " + // Tablas enlas cuales se trabajara y sus respectivos alias
                            " Where A1.co_forPag = " + txtCodForPag.getText() +// Clausulas Where para las tablas maestras
                            "       and A2.co_forPag = A1.co_forPag " + // Consultando en la empresa en la ke se esta trabajando
                            "       and A1.co_emp = " + intCodEmp + // Consultando en la empresa en la ke se esta trabajando
                            "       and A2.co_emp = A1.co_emp ";  // Consultando en la empresa en la ke se esta trabajando

                    Statement stmDoc2 = conPag.createStatement();

                    ResultSet rstDocCab2 = stmDoc2.executeQuery(sSQL3);
                    rstDocCab2.next();
                    intCanArr[0] = rstDocCab2.getInt(1);

                    stmDoc2 = conPag.createStatement();
                    rstDocCab2 = stmDoc2.executeQuery(sSQL2);
                    int x = 0;
                    while (rstDocCab2.next()) {
                        intarreglodia[x] = rstDocCab2.getInt(2);
                        intarreglonum[x] = rstDocCab2.getInt(1);
                        strarreglosop[x] = rstDocCab2.getString("st_sop");
                        x++;
                    }
                    conPag.close();
                    conPag = null;
                }
            }
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        calculaPag();
    }

    private void CalculoPago2() {
        try {
//            System.out.println("ZafVen01.CalculoPago2");
            java.sql.Connection conPag = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if (conPag != null) {

                String sSQL2 = "SELECT A1.ne_numPag, A2.ne_diaCre, A2.st_sop "
                        + " FROM tbm_cabForPag as A1, tbm_detForPag as A2 " + // Tablas enlas cuales se trabajara y sus respectivos alias
                        " Where A1.co_forPag = " + txtCodForPag.getText() +// Clausulas Where para las tablas maestras
                        "       and A2.co_forPag = A1.co_forPag " + // Consultando en la empresa en la ke se esta trabajando
                        "       and A1.co_emp = " + intCodEmp + // Consultando en la empresa en la ke se esta trabajando
                        "       and A2.co_emp = A1.co_emp " + // Consultando en la empresa en la ke se esta trabajando
                        "       order by A2.co_reg ";// Consultando en el local en el ke se esta trabajando

                String sSQL3 = "SELECT count(A2.ne_diaCre) as c "
                        + " FROM tbm_cabForPag as A1, tbm_detForPag as A2 " + // Tablas enlas cuales se trabajara y sus respectivos alias
                        " Where A1.co_forPag = " + txtCodForPag.getText() +// Clausulas Where para las tablas maestras
                        "       and A2.co_forPag = A1.co_forPag " + // Consultando en la empresa en la ke se esta trabajando
                        "       and A1.co_emp = " + intCodEmp + // Consultando en la empresa en la ke se esta trabajando
                        "       and A2.co_emp = A1.co_emp ";  // Consultando en la empresa en la ke se esta trabajando

                Statement stmDoc2 = conPag.createStatement();
                ResultSet rstDocCab2 = stmDoc2.executeQuery(sSQL3);
                rstDocCab2.next();
                intCanArr[0] = rstDocCab2.getInt(1);

                stmDoc2 = conPag.createStatement();
                rstDocCab2 = stmDoc2.executeQuery(sSQL2);
                int x = 0;
                while (rstDocCab2.next()) {
                    intarreglodia[x] = rstDocCab2.getInt(2);
                    intarreglonum[x] = rstDocCab2.getInt(1);
                    strarreglosop[x] = rstDocCab2.getString("st_sop");
                    x++;
                }
                rstDocCab2.close();
                rstDocCab2 = null;
                conPag.close();
                conPag = null;
            }
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
    }

    
    private boolean validarItemsCotizacion(){
        boolean blnRes = true;
        try{            
            for (int i = 0; i < tblDat.getRowCount(); i++){
                for(int R=i;R<tblDat.getRowCount();R++){
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null){
                        if (i != R){
                            if (tblDat.getValueAt(i, INT_TBL_CODITM).toString().equals(tblDat.getValueAt(R, INT_TBL_CODITM).toString())){
                                blnRes = false;
                            }
                        }
                    }
                }
            }
        }
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Validacion solicitada por contabilidad, al cliente consumidor final no se le puede vender mas de 200 dolares.
     * VALIDACION TEMPORAL, hasta poder identificar el cliente como consumidor final
     * JM 22/Ene/2018
     * @return 
     */
    
    private boolean validacionConsumidorFinal200() {
        boolean blnRes = true;
        String  strMsg;
        try {
            if(txtCliNom.getText().equals("CONSUMIDOR FINAL")){
                if(Double.parseDouble(txtTot.getText())>200){
                    blnRes = false;
                    strMsg = "<html> Al cliente <FONT COLOR=\"blue\">CONSUMIDOR FINAL</FONT>  no se le puede Facturar mas de 200 Dolares. <BR>";
                    strMsg += "Por favor registre el cliente en el sistema para poder proceder con la venta. <html>";
                    JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                } else {
                    blnRes = true;
                }
            }
        }  
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean validarDocEle() {
        boolean blnRes = false;
        String strCadena = "", strMsg;
        java.sql.Connection conLoc;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;
        try {
            conLoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            stmLoc = conLoc.createStatement();
            strCadena = "";
            strCadena += " SELECT co_cli, st_reg, st_proCorEleFacEle FROM tbm_cli WHERE co_emp=" + objZafParSis.getCodigoEmpresa();
            strCadena += " AND co_cli=" + txtCliCod.getText();
//            System.out.println("validarDocEle " + strCadena);
            rstLoc = stmLoc.executeQuery(strCadena);
            if (rstLoc.next()) {
                if (rstLoc.getString("st_proCorEleFacEle") == null || rstLoc.getString("st_proCorEleFacEle").equals("")) {
                    blnRes = false;
                    strMsg = "<html> El cliente no tiene asignado un correo electrónico para enviarle el documento electrónico. <BR>";
                    strMsg += "Por favor envielo al Departamento de Cobranzas para que proporcione su correo electrónico. <html>";
                    JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                } else {
                    blnRes = true;
                }
            }
            rstLoc.close();
            rstLoc = null;
            stmLoc.close();
            stmLoc = null;
            conLoc.close();
            conLoc = null;
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    /* JoséMarín - 6/Feb/2015 */

    private boolean validarCliente() {
        boolean blnRes = false;
        String strCadena = "", strMsg;
        java.sql.Connection conLoc;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;
        try {
            conLoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            stmLoc = conLoc.createStatement();
            strCadena = "";
            strCadena += " SELECT co_cli, st_reg, fe_ultMod FROM tbm_cli WHERE co_emp=" + objZafParSis.getCodigoEmpresa();
            strCadena += " AND co_cli=" + txtCliCod.getText() + " AND fe_ultMod<'2014-10-01'";
//            System.out.println("validarDocEle " + strCadena);
            rstLoc = stmLoc.executeQuery(strCadena);
            if (rstLoc.next()) {
                blnRes = false;
                strMsg = "<html> El cliente necesita actualización de datos. <BR>";
                strMsg += "Por favor envielo al Departamento de Cobranzas para actualización. <html>";
                JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
            } else {
                blnRes = true;
            }
            rstLoc.close();
            rstLoc = null;
            stmLoc.close();
            stmLoc = null;
            
            /* JM: 13/Marzo/2019 */
            if (!verificaEstCliPrv(conLoc)) {
                blnRes = false;
            }
             /* JM: 13/Marzo/2019 */
            
            conLoc.close();
            conLoc = null;
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
         * Aqui se verifica si el cliente y proveedor estan dados de alto por el
         * respectivas personas
         *
         * @param conn conecion de la base
         * @return true: si esta todo bien
         * @return false: si necesita ser dado de alta
         */
        private boolean verificaEstCliPrv(java.sql.Connection conn) {
            boolean blnRes = true;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strSql = "";
            String strMesj = "";
            String strMesjCli = "";
            String strMesjPrv = "";
            try {
//      System.out.println("ZafVen01.verificarEstCliPrv");

                if (conn != null) {
                    stmLoc = conn.createStatement();

                    strSql = "SELECT x.co_cli, x.co_prv, a3.st_reg as stcli, a4.st_reg as stprv, a3.st_cli, a4.st_prv, a3.tx_nom as nomcli "
                            + ",a4.tx_nom as nomprv FROM ("
                            + " select a.co_Emp, a.co_cot, a.co_cli, a1.co_prv from tbm_cabcotven as a"
                            + " inner join tbm_detcotven as a1 on(a1.co_emp=a.co_emp and a1.co_loc=a.co_loc and a1.co_cot=a.co_cot) "
                            + " where a.co_Emp=" + objZafParSis.getCodigoEmpresa() + " AND a.co_Loc=" + objZafParSis.getCodigoLocal() + " "
                            + " AND a.co_cot=" + txtCot.getText() + " ) as x "
                            + " inner join tbm_cli as a3 on (a3.co_emp=x.co_emp and  a3.co_cli=x.co_cli) "
                            + " left join tbm_cli as a4 on (a4.co_emp=x.co_emp and  a4.co_cli=x.co_prv) ";
                    rstLoc = stmLoc.executeQuery(strSql);
                    while (rstLoc.next()) {
                        if (rstLoc.getInt("co_cli") != 0) {
                            if (rstLoc.getString("stcli").equals("N")) {
                                strMesjCli = "<html>LOS DATOS DEL CLIENTE:  <FONT COLOR=\"blue\"> " + rstLoc.getString("nomcli") + " </font>  TIENE QUE SER REVISADO.</html>";
                                blnRes = false;
                            }
                        }
                        if (rstLoc.getInt("co_prv") != 0) {
                            if (rstLoc.getString("stprv").equals("N")) {
                                strMesjPrv += "<html>LOS DATOS DEL PROVEEDOR: <FONT COLOR=\"blue\"> " + rstLoc.getString("nomprv") + "</font>  TIENE QUE SER REVISADO.</html>\n";
                                blnRes = false;
                            }
                        }
                    }
                    if (!blnRes) {
                        strMesj = strMesjCli + "\n" + strMesjPrv;
                        mostrarMsg(strMesj);
                    }
                    rstLoc.close();
                    rstLoc = null;
                    stmLoc.close();
                    stmLoc = null;
                }
            } catch (java.sql.SQLException e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

    private int estadoCotFac(java.sql.Connection connLoc, int intCodEmp, int intCodLoc, int intTipdocFac, int intCodCot) {
        int intTip = 0;
        try {
            if (_getCotFacturado(connLoc, intCodEmp, intCodLoc, intCodCot)) { //SI APARECE EN tbm_cabCotVen 
                intTip = 2;  // ESTA FACTURADA, Y POSEE NUMERO DE FACTURA 
            } 
            else {
                intTip = 1; // NO ESTA FACTURADO
            }

        } catch (Exception e) {
            intTip = 0;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return intTip;
    }
    int INTCODDOCFAC = 0;
 

    private boolean _getCotFacturado(java.sql.Connection connLoc, int intCodEmp, int intCodLoc, int intCodCot) {
        boolean blnRes = false;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;
        String strSql = "";
        try {
            stmLoc = connLoc.createStatement();
            strSql = "select st_reg from  tbm_cabcotven "
                    + " where co_emp=" + intCodEmp + " and co_loc=" + intCodLoc + " and co_cot=" + intCodCot + " and st_reg='F' ";
            rstLoc = stmLoc.executeQuery(strSql);
            if (rstLoc.next()) {
                blnRes = true;
            }
            rstLoc.close();
            rstLoc = null;

            stmLoc.close();
            stmLoc = null;

        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private int _controlNuevoFactura(java.sql.Connection connRem, int intCodEmp, int intCodLoc, int intTipdocFac, int intCodDocFac) {
        int intEstCont = 0;
        //String strTit="", strMsg2="";
        String strMsg2 = "";
        try {
//      System.out.println("zafVen01._controlNuevoFactura");
            //JOptionPane oppMsg = new JOptionPane();
            Librerias.ZafVentas.ZafVentas01 objVentas = new Librerias.ZafVentas.ZafVentas01(jfrThis, objZafParSis);
            if (objVentas._getVerificaExisDocIng(connRem, intCodEmp, intCodLoc, intTipdocFac, intCodDocFac)) {
                if (!objVentas._getVerificaDocPendConf(connRem, intCodEmp, intCodLoc, intTipdocFac, intCodDocFac)) {
                    if (objVentas._getExisCanNunRec(connRem, intCodEmp, intCodLoc, intTipdocFac, intCodDocFac)) {
                        //strTit="Mensaje del sistema Zafiro";
                        strMsg2 = "Los siguientes items tienen faltante: \n\n " + objVentas.StrItmFal + "\n"
                                + "[SI] ¿Desea generar una nueva factura por lo que llego ?"
                                + "\n[NO] ¿Desea generar por todo ?";

                        int intEst = JOptionPane.showConfirmDialog(jfrThis, strMsg2, strTit, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                        if (intEst == 0) {
                            System.out.println(" Si ");
                            intEstCont = 2;  // SE ANULA LA FACTURA ACTUAL  Y SE GENERA NUEVA FACTURA POR LA MERCADERIA QUE LLEGO

                        } else if (intEst == 1) {
                            System.out.println(" No ");
                            intEstCont = 1;  // 3       IMPRIME POR TODO
                        } else {
                            intEstCont = 0;  // NO HACE NADA 
                        }

                    } else {
                        // no existe faltante y paso normal
                        intEstCont = 1;
                    }


                } else {
                    if ((objZafParSis.getCodigoEmpresa() == 2)) //  MensajeInf("EXISTE DOCUMENTO DE INGRESO QUE NO ESTAN CONFIRMADO AUN \n TIENE QUE ESTAR CONFIRMADO PARA PODER IMPRIMIR LA FACTURA..");
                    {
                        intEstCont = 1; //  IMPRIME NORMAL
                    }                     //0  no hace nada
                }


            } else {
                // no existe documento de ingreso y sigue paso normal
                intEstCont = 1;
            }


        } catch (Exception e) {
            intEstCont = 0;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return intEstCont;
    }

    public boolean facturar() {
        boolean blnRes = false;
        boolean booRes=false;
        //int intTipdocFac=1;
        int intTip = 0;
        /**
         * intEstTip 0= no hace nada 1= paso normal de facturar 2= anula la
         * factura vieja y genera nueva factura por la mercaderia que llego 3 =
         * solo anula la factura y regresa mercadeira que no llego
         */
        try {
            abrirCon();
            if (CONN_GLO != null) {
                CONN_GLO.setAutoCommit(false);
                intTip = estadoCotFac(CONN_GLO, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intCodTipDocFacEle, Integer.parseInt((txtCot.getText().equals("") ? "0" : txtCot.getText())));
            
                CerrarCon();
                
                if (intTip == 1) {   //1= no esta facturado
                   booRes = generaFactura();
                }
                if (intTip == 2) //2= la factura ya esta impreso
                {
                    MensajeInf("La cotización ya esta facturado.\n No es posible facturar una cotización facturada. ");
                }

                //nuevo Ingrid
                //enviarPulsoGenerarOrdenDespacho();

               if(intCodTipDocFacEle==228 && booRes){ // José Marín M. 6/Nov2014 // SOLO CON FACVENE 
                    enviarPulsoFacturacionElectronica();
                }
        
             //***************************************************************************************************************************************
             System.out.println("impresion de variable intNumFacElec: "+intNumFacElec);
            
        
        //***************************************************************************************************************************************
        ZafGenGuiRem objZafGuiRem=new ZafGenGuiRem();// objeto que maneja la generación de las guias de remisión
         //String[] strODxCnf=strODxConf.split("-");//CONTIENE LOS VALORES DE LA CLAVE DE LA ORDEN DE DESPACHO.
        /*Aqui agregar validacion para escoger que empresa es la que va a ejecutar el servicio*/
      
        
         ZafGuiRemDAO daoGuiRem= new ZafGuiRemDAO();        
         abrirCon2();
         ZafGenOdPryTra objGenOD=new ZafGenOdPryTra();
         String[] strODxCnf=objGenOD.obtenerOdLocal(CONN_GLO2, intCodEmpOD, intCodLocOD, intCodTipDocOD, intCodDocOD);//CONTIENE LOS VALORES DE LA CLAVE DE LA ORDEN DE DESPACHO.
 
         int intForPag =daoGuiRem.verificarTipCred(CONN_GLO2, objZafParSis.getCodigoEmpresa(), Integer.parseInt(txtCodigoFormaPago.getText()));
         
         ZafImp oz=new ZafImp(intCodEmp, objZafParSis.getCodigoLocal(), intCodTipDocFacEle, intNumFacElec,Integer.parseInt(txtCodigoFormaPago.getText()),Integer.parseInt(txtCliCod.getText()));
         ZafVal valMet=new ZafVal(oz);
         boolean booDiaGraNorm = valMet.consultarDiGraCli(CONN_GLO2);
         boolean booDiaGraChq  = valMet.consultarDiGraCliChq(CONN_GLO2);
         
         boolean booFpgChq= valMet.consultarForPagChq(CONN_GLO2, Integer.parseInt(txtCodigoFormaPago.getText()), objZafParSis.getCodigoEmpresa());
         
         CerrarCon2();
         
         if(booRes && strODxCnf!=null && strODxCnf.length >0 && strODxCnf[0]!="" && strODxCnf[0]!= null && (intForPag==1 || booDiaGraNorm || (booDiaGraChq && booFpgChq))){         
            abrirCon2();
            objGenOD.generarTermL(CONN_GLO2, intCodEmpOD, intCodLocOD, intCodTipDocOD, intCodDocOD);
            CerrarCon2();
        } 
         
            intCodEmpOD=0;
            intCodLocOD=0;
            intCodTipDocOD=0;
            intCodDocOD=0;            

            }
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    // José Marín M. 6/Nov/2014 // Facturación Electronica
    private void enviarPulsoFacturacionElectronica() {
        objPulFacEle = new ZafPulFacEle();
        objPulFacEle.iniciar();
        System.out.println(" PULSO::::::  enviarPulsoFacturacionElectronica  ");
    }
    // José Marín M. 6/Nov/2014 // Facturación Electronica

    private void enviarPulsoGuiaElectronica() {
        objPulFacEle = new ZafPulFacEle();
        objPulFacEle.iniciarConGui(6012);
        System.out.println(" PULSO::::::  enviarPulsoGuiaElectronica  ");
    }

//si
    public boolean ImprimeNormal(int intCodEmp, int intCodLoc, int intTipdocFac, int intCodDocFac) {
        boolean blnRes = false;
        try {
            abrirCon();
            if (CONN_GLO != null) {
                 
                imprimeFacturaPasoNormal(CONN_GLO, CONN_GLO, intCodEmp, intCodLoc, intTipdocFac, intCodDocFac);
                 
                CerrarCon();

            }
        } 
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    public boolean ImprimeDirecto(int intCodEmp, int intCodLoc, int intTipdocFac, int intCodDocFac) {
        boolean blnRes = false;
        try {
            abrirCon();
            if (CONN_GLO != null) {
                imprimeFacturaDirecto(CONN_GLO, CONN_GLO, intCodEmp, intCodLoc, intTipdocFac, intCodDocFac);
                CerrarCon();
            }
        } 
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    public boolean imprimeFacturaDirecto(java.sql.Connection conn, java.sql.Connection connRemota, int intCodEmp, int intCodLoc, int intTipdocFac, int intCodDocFac) {
        boolean blnRes = false;
        java.sql.Statement stmLoc, stmLocIns;
        java.sql.ResultSet rstLoc02;
        String strSql = "", strSqlIns = "";
        String strEstCreGuia = "S";
        //String strTit, strMsg2;
        String strMsg2;
        String strDatdocoriguirem = "";
        int intNumDoc = 0;
        int intTipdocGuia = 102;
        int intNumDocGuia = 0;
        int intImpGuia = 0;
        int intCodDocGuia = 0;
        try {
//      System.out.println("ZafVen01.imprimeFacturaDirecto");

            if (conn != null) {

                stmLoc = conn.createStatement();
                stmLocIns = connRemota.createStatement();

                intNumDoc = 0;
                //JOptionPane oppMsg = new JOptionPane();

                strstReg_glo = "F";
                //strTit="Mensaje del sistema Zafiro";

                //********************************************************************
                strSql = "SELECT CASE WHEN (ne_ultDoc+1) IS NULL THEN 1 ELSE (ne_ultDoc+1) END AS ultnum, st_predoc, tx_descor FROM tbm_cabTipDoc where "
                        + " co_emp = " + intCodEmp + " and co_loc=" + intCodLoc + " and co_tipDoc =" + intTipdocFac;
                rstLoc02 = stmLocIns.executeQuery(strSql);
                if (rstLoc02.next()) {
                    intNumDoc = rstLoc02.getInt("ultnum");
                    strDatdocoriguirem = "" + rstLoc02.getString("tx_descor") + "-" + rstLoc02.getString("ultnum");
                }
                rstLoc02.close();
                rstLoc02 = null;


                strSqlIns = " UPDATE tbm_cabTipDoc SET ne_ultDoc=" + intNumDoc + " WHERE "
                        + " co_emp=" + intCodEmp + " and co_loc=" + intCodLoc + " and co_tipDoc =" + intTipdocFac + " ; ";

                strSqlIns += " ; update tbm_pagmovinv set fe_ven=fe_ven + "
                        + " ( select  current_date-fe_doc  from  tbm_cabmovinv where co_emp=" + intCodEmp + " and co_loc=" + intCodLoc + " and co_tipdoc=" + intTipdocFac + " and co_doc=" + intCodDocFac + " ) "
                        + " where co_emp=" + intCodEmp + " and co_loc=" + intCodLoc + " and co_tipdoc=" + intTipdocFac + " and co_doc=" + intCodDocFac;


                strSqlIns += " ;  UPDATE tbm_cabmovinv set fe_doc=current_date, co_mnu=" + objZafParSis.getCodigoMenu() + " ,  ne_numdoc=" + intNumDoc + ",ne_numgui=" + intNumDocGuia + ",st_reg='A', st_imp='S'   where co_emp=" + intCodEmp + " and co_loc=" + intCodLoc + " and co_tipdoc=" + intTipdocFac + " and co_doc=" + intCodDocFac;
                strSqlIns += " ; UPDATE tbm_cabdia set fe_dia=current_date ,tx_numdia='" + intNumDoc + "'  where co_emp=" + intCodEmp + " and co_loc=" + intCodLoc + " and co_tipdoc=" + intTipdocFac + " and co_dia=" + intCodDocFac;


                stmLocIns.executeUpdate(strSqlIns);


                strSql = "SELECT distinct(co_doc) as codoc from tbm_detguirem where co_emprel=" + intCodEmp + " "
                        + " and co_locrel=" + intCodLoc + " and co_tipdocrel=" + intTipdocFac + " and co_docrel=" + intCodDocFac + " ";
                intCodDocGuia = getCodigoMaxDoc(conn, strSql);


                if (objTooBar.impGuiaRem(connRemota, intCodEmp, intCodLoc, intTipdocGuia, intCodDocGuia)) {
                    intImpGuia = 1;
                }


                if (strEstCreGuia.equals("S")) {
                    String strDatAct = " ,st_aut='P' ";
                    if (intImpGuia == 0) {
                        //strDatAct =" ,st_aut=null , st_imp='S', ne_numdoc="+intNumDocGuia+" ";
                        strDatAct = " ,st_aut=null ,st_imp='N',  ne_numdoc=0 ";
                    }

                    strSqlIns = " ; UPDATE tbm_cabguirem SET fe_doc=current_date, tx_datdocoriguirem='" + strDatdocoriguirem + "' " + strDatAct + " "
                            + " WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_loc=" + objZafParSis.getCodigoLocal() + " and co_tipdoc=" + intTipdocGuia + " and co_doc =" + intCodDocGuia + " ";
                    stmLocIns.executeUpdate(strSqlIns);
                }




                //**********************************************************************

                ZafVen01.creaFac objCreaFac = new ZafVen01.creaFac();
                objCreaFac.impresionFactura(connRemota, 1, intCodDocFac);
                //objCreaFac.impresionFactura(intTipRptVta, 1, intCodDocFac);

                if (strEstCreGuia.equals("S")) {
                    if (intImpGuia == 0) {
                        //                      ZafVen01.creaFac objCreaGuia = new ZafVen01.creaFac();
                        //                      objCreaGuia.impresionGuiRem(connRemota, intTipdocGuia, intCodDocGuia );
                        //                      objCreaGuia=null;
                    }
                }

                strMsg2 = "La Factura se le asigno el siguiente numero : " + intNumDoc;
                JOptionPane.showMessageDialog(jfrThis, strMsg2, strTit, JOptionPane.INFORMATION_MESSAGE);

                objCreaFac = null;

                intNumFacElec=intNumDoc;
//                    //nuevo Ingrid
//                    enviarPulsoGenerarOrdenDespacho();
//                    System.out.println("imprimeFacturaDirecto");

                //***********************************************************

                stmLoc.close();
                stmLoc = null;
                stmLocIns.close();
                stmLocIns = null;


            }
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * MODIFICADO EFLORESA 2012-06-29 PREFACTURAS QUE SE IMPRIMEN POR LA OPCION
     * DE COTIZACION DEL SIGUIENTE MES SE LE ASIGNA FECHA DEL SIGUIENTE MES
     *///si
    public boolean imprimeFacturaPasoNormal(java.sql.Connection conn, java.sql.Connection connRemota, int intCodEmp, int intCodLoc, int intTipdocFac, int intCodDocFac) {
        boolean blnRes = false;
        java.sql.Statement stmLoc, stmLocIns;
        java.sql.ResultSet rstLoc, rstLoc01, rstLoc02;
        String strSql = "", strSqlIns = "";
        String strEstCreGuia = "S";
        //String strTit, strMsg2;
        String strMsg2;
        String strDatdocoriguirem = "";
        int intNumDoc = 0;
        int intTipdocGuia = 102;
        int intNumDocGuia = 0;
        int intImpGuia = 0;
        int intCodDocGuia = 0;
        String strFeDoc = "";
        try {
//      System.out.println("ZafVen01.imprimeFacturaPasoNormal");

            if (conn != null) {
                stmLoc = conn.createStatement();
                stmLocIns = connRemota.createStatement();
                intNumDoc = 0;
                //JOptionPane oppMsg = new JOptionPane();
                strstReg_glo = "F";
                //strTit="Mensaje del sistema Zafiro";
                strMsg2 = "La factura no fue Impresa anteriormente   \n   Desea Imprimir la Factura   ";
                if (JOptionPane.showConfirmDialog(jfrThis, strMsg2, strTit, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == 0) {

                    //********************************************************************
                    strSql = "SELECT CASE WHEN (ne_ultDoc+1) IS NULL THEN 1 ELSE (ne_ultDoc+1) END AS ultnum, st_predoc, tx_descor FROM tbm_cabTipDoc where "
                            + " co_emp = " + intCodEmp + " and co_loc=" + intCodLoc + " and co_tipDoc =" + intTipdocFac;
                    rstLoc02 = stmLocIns.executeQuery(strSql);
                    if (rstLoc02.next()) {
                        intNumDoc = rstLoc02.getInt("ultnum");
                        strDatdocoriguirem = "" + rstLoc02.getString("tx_descor") + "-" + rstLoc02.getString("ultnum");
                    }
                    rstLoc02.close();
                    rstLoc02 = null;


                    strSqlIns = " UPDATE tbm_cabTipDoc SET ne_ultDoc=" + intNumDoc + " WHERE "
                            + " co_emp=" + intCodEmp + " and co_loc=" + intCodLoc + " and co_tipDoc =" + intTipdocFac + " ; ";
                    // FACTURACION ELECTRONICA -  JoséMario Marín M. 3/Oct/2014
                    if (intCodMenuOri == 1612) {  // 1612= COTIZACIONES DE VENTA SIGUIENTE MES
                        ZafVen01.creaFac zafCreaFac = new ZafVen01.creaFac();
                        strFeDoc = zafCreaFac.FechaPriDiaMes(connRemota);
                        zafCreaFac = null;
                        strFeDoc = " " + objUti.codificar(strFeDoc) + " ";
                    } else {
                        strFeDoc = " current_date ";
                    }

                    /*strSqlIns += " ; update tbm_pagmovinv set fe_ven=fe_ven + " +
                     " ( select  current_date-fe_doc  from  tbm_cabmovinv where co_emp="+intCodEmp+" and co_loc="+intCodLoc+" and co_tipdoc="+intTipdocFac+" and co_doc="+intCodDocFac+" ) " +
                     " where co_emp="+intCodEmp+" and co_loc="+intCodLoc+" and co_tipdoc="+intTipdocFac+" and co_doc="+intCodDocFac;*/
                    //strSqlIns +=  " ;  UPDATE tbm_cabmovinv set fe_doc=current_date, co_mnu=14,  ne_numdoc="+intNumDoc+",ne_numgui="+intNumDocGuia+",st_reg='A', st_imp='S'   where co_emp="+intCodEmp+" and co_loc="+intCodLoc+" and co_tipdoc="+intTipdocFac+" and co_doc="+intCodDocFac;
                    //strSqlIns += " ; UPDATE tbm_cabdia set fe_dia=current_date ,tx_numdia='"+intNumDoc+"'  where co_emp="+intCodEmp+" and co_loc="+intCodLoc+" and co_tipdoc="+intTipdocFac+" and co_dia="+intCodDocFac;

                    strSqlIns += " ; update tbm_pagmovinv set fe_ven=fe_ven + "
                            + " ( select " + strFeDoc + "-fe_doc  from  tbm_cabmovinv where co_emp=" + intCodEmp + " and co_loc=" + intCodLoc + " and co_tipdoc=" + intTipdocFac + " and co_doc=" + intCodDocFac + " ) "
                            + " where co_emp=" + intCodEmp + " and co_loc=" + intCodLoc + " and co_tipdoc=" + intTipdocFac + " and co_doc=" + intCodDocFac;

                    strSqlIns += "; UPDATE tbm_cabmovinv set fe_doc=" + strFeDoc + ", co_mnu=" + objZafParSis.getCodigoMenu();
                    strSqlIns += " ,ne_numdoc=" + intNumDoc + ",ne_numgui=" + intNumDocGuia + ",st_reg='A', st_imp='S'   where co_emp=" + intCodEmp;
                    strSqlIns += " and co_loc=" + intCodLoc + " and co_tipdoc=" + intTipdocFac + " and co_doc=" + intCodDocFac;

                    strSqlIns += "; UPDATE tbm_cabdia set fe_dia=" + strFeDoc + " ,tx_numdia='" + intNumDoc + "'  where co_emp=" + intCodEmp;
                    strSqlIns += " and co_loc=" + intCodLoc + " and co_tipdoc=" + intTipdocFac + " and co_dia=" + intCodDocFac;
                    stmLocIns.executeUpdate(strSqlIns);


                    strSql = "SELECT distinct(co_doc) as codoc from tbm_detguirem where co_emprel=" + intCodEmp + " "
                            + " and co_locrel=" + intCodLoc + " and co_tipdocrel=" + intTipdocFac + " and co_docrel=" + intCodDocFac + " ";
                    intCodDocGuia = getCodigoMaxDoc(conn, strSql);


                    if (objTooBar.impGuiaRem(connRemota, intCodEmp, intCodLoc, intTipdocGuia, intCodDocGuia)) {
                        intImpGuia = 1;
                    }

                    if (strEstCreGuia.equals("S")) {
                        String strDatAct = " ,st_aut='P' ";
                        if (intImpGuia == 0) {
                            //strDatAct =" ,st_aut=null , st_imp='S', ne_numdoc="+intNumDocGuia+" ";
                            strDatAct = " ,st_aut=null ,st_imp='N',  ne_numdoc=0 ";
                        }

                        strSqlIns = " ; UPDATE tbm_cabguirem SET fe_doc=current_date, tx_datdocoriguirem='" + strDatdocoriguirem + "' " + strDatAct + " "
                                + " WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_loc=" + objZafParSis.getCodigoLocal() + " and co_tipdoc=" + intTipdocGuia + " and co_doc =" + intCodDocGuia + " ";

                        stmLocIns.executeUpdate(strSqlIns);
                    }


                    //**********************************************************************

                    ZafVen01.creaFac objCreaFac = new ZafVen01.creaFac();
                    objCreaFac.impresionFactura(connRemota, intTipdocFac, intCodDocFac); // Facturación Electronica 13/Oct/2014
                    //objCreaFac.impresionFactura(intTipRptVta, 1, intCodDocFac);

                    if (strEstCreGuia.equals("S")) {
                        if (intImpGuia == 0) {
                        }
                    }

                    strMsg2 = "La Factura se le asigno el siguiente numero : " + intNumDoc;
                    JOptionPane.showMessageDialog(jfrThis, strMsg2, strTit, JOptionPane.INFORMATION_MESSAGE);
                    intNumFacElec=intNumDoc;
                    objCreaFac = null;
//                    //nuevo Ingrid
//                    enviarPulsoGenerarOrdenDespacho();
//                    System.out.println("imprimeFacturaPasoNormal");
                }


                //***********************************************************


                rstLoc01 = null;

                stmLoc.close();
                stmLoc = null;
                stmLocIns.close();
                stmLocIns = null;


            }
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * 
     * @return 
     */
    

    private boolean generaFactura() {
        int intValFac = 1;
        boolean booRes=false;
        try {
            abrirCon();
//            if (intCodMenuOri == 1612) {  // "Cotizaciones de venta (Siguiente mes)..."
//                if (!validacionfechaFac(CONN_GLO)) {
//                    MensajeInf("NO ES POSIBLE FACTURAR TIENE QUE SER 5 DIAS ANTES DE TERMINAR EL MES. ");
//                    intValFac = 0;
//                }
//                if (!FechaPriDiaMes(CONN_GLO)) {
//                    MensajeInf("NO ES POSIBLE FACTURAR TIENE QUE SER DEL MISMO AÑO EN CURSO. ");
//                    intValFac = 0;
//                }
//            } else {   // "Cotizaciones de venta..." o  Facturacion Electronica
                if (!_getVerificaDiaFac(CONN_GLO)) {
                    intValFac = 0;
                }

                if (!_getVerificaAnioDiaFac(CONN_GLO)) {
                    MensajeInf("NO ES POSIBLE FACTURAR TIENE QUE SER DEL MISMO AÑO EN CURSO. ");
                    intValFac = 0;
                }
                /* Facturar Sin Numero De cotizacion cargado */
                if(!(txtCot.getText().length()>0)){
                    MensajeInf("NO ES POSIBLE FACTURAR...  FAVOR RECARGAR LOS DATOS ");
                    intValFac = 0;
                }
                
//            }
            

            if (intValFac == 1) {  //J
                blnHayCam_glo = blnHayCam;
                blnHayCam_glo_tbl = objTblMod.isDataModelChanged();

                if (validaCamFac()) { /* Validaciones Previas Facturacion Jota */

                    verificaIvaItm(CONN_GLO);

                    calculaSubTotTodLosItm();
                    if (blnHayCam_glo_tbl == false) {
                        objTblMod.setDataModelChanged(false);
                    }
                   booRes= objTooBar.insertaCotToFac(CONN_GLO);  // JOTA o.o
                }
            }


            CerrarCon();
        } catch (Exception evt) {
            objUti.mostrarMsgErr_F1(jfrThis, evt);
        }
		 return booRes;
    }

    /**
     * permite saber si se puede facturar en el mismo año
     *
     * @param conTmp coneccion de la base
     * @return true si se puede facturar false no se puede facturar
     */
    private boolean _getVerificaAnioDiaFac(java.sql.Connection conTmp) {
        boolean blnRes = false;
        String sql = "";
        java.sql.Statement stmTmp;
        java.sql.ResultSet rst;
        try {
            if (conTmp != null) {
                stmTmp = conTmp.createStatement();
               if (!strFecPagMov.equals("")) {
                    sql = "select * from( "
                            + " select extract(year from date('" + strFecPagMov + "')) as fe1, extract(year from current_date) as fe2 ) as x where fe1=fe2 ";
                    rst = stmTmp.executeQuery(sql);
                    if (rst.next()) {
                        blnRes = true;
                    }
                    rst.close();
                    rst = null;
                } else {
                    blnRes = true;
                }

                stmTmp.close();
                stmTmp = null;
            }
        } catch (SQLException Evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return blnRes;
    }

    /**
     * permite saber el primer dia del siguiente mes para poder facturar, solo
     * es llamado de cotizacion del siguiente mes
     *
     * @param conTmp coneccion de la base
     * @return true si todo esta correcto false si hay algun problema
     */
    private boolean _getVerificaDiaFac(java.sql.Connection conTmp) {
        boolean blnRes = true;
        String sql = "";
        java.sql.Statement stmTmp;
        java.sql.ResultSet rst;
        try {
            if (conTmp != null) {
                stmTmp = conTmp.createStatement();
                strFecPagMov = "";
                sql = "SELECT *,  extract(day from fecha) as diahoyCal   from ( "
                        + " select *, (7-(numdiasem-ne_diaSemEmiFacven)) as sdia,  current_date+(7-(numdiasem-ne_diaSemEmiFacven)) as  fecha     from ( "
                        + "   select case when  ne_diamesmaxemifacven is null then 'N' else   case when  ne_diamesmaxemifacven in (0) then 'N' else 'S' end end as estDia "
                        + "   ,case when  ne_diaSemEmiFacven is null then 'N' else   case when  ne_diaSemEmiFacven in (0) then 'N' else 'S' end end as estSem "
                        + "   ,case extract(dow from current_date) when 1 then 1 when 2 then 2 when 3 then 3 when 4 then 4 when 5 then 5 when 6 then 6  else 7 end as numdiasem "
                        + "   ,ne_diamesmaxemifacven, ne_diaSemEmiFacven, extract(day from current_date) as diahoy   from tbm_cli where  co_emp=" + objZafParSis.getCodigoEmpresa() + "  and co_cli= " + txtCliCod.getText() + " "
                        + "   ) as x  "
                        + "   ) as x ";

                rst = stmTmp.executeQuery(sql);
                if (rst.next()) {

                    if (rst.getString("estsem").equals("S")) {
                        if (rst.getString("estDia").equals("S")) {
                            if (rst.getInt("diahoyCal") < rst.getInt("ne_diamesmaxemifacven")) {
                                strFecPagMov = rst.getString("fecha");
                                datFecAux = rst.getDate("fecha");
                                blnRes = msnConf(strFecPagMov);
                            } else {
                                strFecPagMov = getSigDiaSemFac(conTmp); //  Sig Mes
                                blnRes = msnConf(strFecPagMov);
                            }
                        } else {
                            strFecPagMov = rst.getString("fecha");
                            datFecAux = rst.getDate("fecha");
                            blnRes = msnConf(strFecPagMov);;
                        }
                    } else {
                        if (rst.getString("estDia").equals("S")) {
                            if (rst.getInt("diahoy") <= rst.getInt("ne_diamesmaxemifacven")) {
                                //  si puede fact
                                blnRes = true;
                            } else {
                                // factu sig mes
                                MensajeInf("NO ES POSIBLE FACTURAR SOLO PERMITE FACTURAR HASTA LOS DIAS " + rst.getInt("ne_diamesmaxemifacven") + " DE CADA MES \n TIENE QUE FACTURAR POR LA OPCION COTIZACION DEL SIGUIENTE MES ");
                                blnRes = false;
                            }
                        } else {
                            //  si puede fact
                            blnRes = true;

                        }
                    }


                }
                rst.close();
                rst = null;
                stmTmp.close();
                stmTmp = null;
            }
        } catch (SQLException Evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return blnRes;
    }

    /**
     * EFLORESA 2012-07-16 COTIZACIONES DE VENTA DEL SIGUIENTE MES: PERMITIR LA
     * FACTURACION A CLIENTES QUE TIENEN FECHA MAXIMA DE EMISION DE FACTURA
     */
    private boolean verificaDiaFac(Connection conn) {
        boolean blnRes = true;
        String sql = "";
        PreparedStatement pstLoc;
        ResultSet rstLoc;

        sql = " select *,  extract(day from fecha) as diahoyCal from ( "
                + " select *, (7-(numdiasem-ne_diaSemEmiFacven)) as sdia, current_date+(7-(numdiasem-ne_diaSemEmiFacven)) as fecha from ( "
                + " select case when  ne_diamesmaxemifacven is null then 'N' else case when  ne_diamesmaxemifacven in (0) then 'N' else 'S' end end as estDia, "
                + " case when  ne_diaSemEmiFacven is null then 'N' else case when  ne_diaSemEmiFacven in (0) then 'N' else 'S' end end as estSem, "
                + " case extract(dow from current_date) when 1 then 1 when 2 then 2 when 3 then 3 when 4 then 4 when 5 then 5 when 6 then 6  else 7 end as numdiasem, "
                + " ne_diamesmaxemifacven, ne_diaSemEmiFacven, extract(day from current_date) as diahoy "
                + " from tbm_cli "
                + " where co_emp=" + objZafParSis.getCodigoEmpresa() + " "
                + " and co_cli= " + txtCliCod.getText() + " "
                + " ) as x "
                + " ) as x ";
        try {
            if (conn != null) {
                pstLoc = conn.prepareStatement(sql);
                rstLoc = pstLoc.executeQuery();
                if (rstLoc.next()) {
                    if (rstLoc.getString("estDia").equals("S")) {
                        if (rstLoc.getInt("diahoy") > rstLoc.getInt("ne_diamesmaxemifacven")) {
                            blnRes = true;
                        } else {
                            blnRes = false;
                        }
                    } else {
                        blnRes = false;
                    }
                }
                if (rstLoc != null) {
                    rstLoc.close();
                }
                rstLoc = null;
                if (pstLoc != null) {
                    pstLoc.close();
                }
                pstLoc = null;
            }
        } catch (SQLException Evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return blnRes;
    }

    /**
     * muestra mensaje de confirmacion
     *
     * @param strFecha dato de la fecha
     * @return true si esta correcto false por no
     */
    private boolean msnConf(String strFecha) {
        boolean blnRes = false;
        //JOptionPane oppMsg = new JOptionPane();
        //String strTit="Mensaje del sistema Zafiro";
        String strMsg2 = "SE FACTURARA CON FECHA " + strFecha + " \n DESEA CONTINUAR..   ";

        if (JOptionPane.showConfirmDialog(jfrThis, strMsg2, strTit, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == 0) {
            blnRes = true;
        }

        return blnRes;
    }

    private String getSigDiaSemFac(java.sql.Connection conTmp) {
        String strFecha = "";
        String sql = "";
        java.sql.Statement stmTmp;
        java.sql.ResultSet rst;
        try {
            if (conTmp != null) {
                stmTmp = conTmp.createStatement();
                sql = " select * from ( "
                        + " select ne_diaSemEmiFacven,  case when  ne_diaSemEmiFacven is null then 'N' else   case when  ne_diaSemEmiFacven in (0) then 'N' else 'S' end end as est,  "
                        + "   case ne_diaSemEmiFacven "
                        + "     when 1 then 'Lunes' "
                        + "     when 2 then 'Martes' "
                        + "     when 3 then 'Miercoles' "
                        + "     when 4 then 'Jueves' "
                        + "     when 5 then 'Viernes' "
                        + "     when 6 then 'Sabado' "
                        + "     when 7 then 'Domingo' "
                        + "     end  as dia "
                        + "   from tbm_cli where  co_emp=" + objZafParSis.getCodigoEmpresa() + "  and co_cli= " + txtCliCod.getText() + " "
                        + "   ) as x "
                        + "    left join ( "
                        + "   select * from( "
                        + "   select *,  case extract(dow from fecha) "
                        + "                      when 1 then 1 "
                        + "                      when 2 then 2 "
                        + "                      when 3 then 3 "
                        + "                       when 4 then 4 "
                        + "                      when 5 then 5 "
                        + "                      when 6 then 6 "
                        + "                      else 7  end as dia2 "
                        + "    from( "
                        + "   select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 01)  as fecha "
                        + "   union all "
                        + "   select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 02)  as fecha "
                        + "   union all "
                        + "   select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 03)  as fecha "
                        + "   union all "
                        + "   select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 04)  as fecha "
                        + "   union all "
                        + "   select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 05)  as fecha "
                        + "   union all "
                        + "   select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 06)  as fecha "
                        + "   union all "
                        + "   select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 07)  as fecha "
                        + "   ) as x "
                        + "   ) as x "
                        + "   ) as x1  on  x1.dia2=x.ne_diaSemEmiFacven ";


                rst = stmTmp.executeQuery(sql);
                if (rst.next()) {
                    if (rst.getString("est").equals("S")) {
                        MensajeInf("SE FACTURARA CON FECHA DEL DIA PRIMER " + rst.getString("dia") + " DEL SIGUIENTE MES. ");
                        strFecha = rst.getString("fecha");
                        strFecPagMov = rst.getString("fecha");
                        datFecAux = rst.getDate("fecha");
                    }
                }
                rst.close();
                rst = null;
                stmTmp.close();
                stmTmp = null;
            }
        } catch (SQLException Evt) {
            strFecha = "";
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            strFecha = "";
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return strFecha;
    }

    private boolean FechaPriDiaMes(java.sql.Connection conTmp) {
        boolean blnRes = false;
        String sql = "";
        java.sql.Statement stmTmp;
        java.sql.ResultSet rst;
        try {
            sql = "select * from ( "
                    + " select extract(year from fecha) as fe1, extract(year from current_date) as fe2  from ( "
                    + " SELECT min(fecha) as fecha FROM ("
                    + "   select  fecha, "
                    + "   case extract(dow from fecha) "
                    + "   when 1 then 1  "
                    + "   when 2 then 2  "
                    + "   when 3 then 3  "
                    + "   when 4 then 4  "
                    + "   when 5 then 5  "
                    + "   when 6 then 6  "
                    + "   else 0   "
                    + "   end as dia,  "
                    + " ( "
                    + "     select count(fe_dia) from tbm_loc as a  "
                    + "     inner join tbm_calciu as b on (b.co_ciu=a.co_ciu) "
                    + "     where a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and b.fe_dia=fecha and b.tx_tipdia = 'F' "
                    + " ) as xx "
                    + " FROM ( "
                    + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 01)  as fecha union all  "
                    + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 02)  as fecha union all  "
                    + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 03)  as fecha union all  "
                    + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 04)  as fecha union all  "
                    + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 05)  as fecha union all  "
                    + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 06)  as fecha union all  "
                    + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 07)  as fecha union all  "
                    + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 08)  as fecha union all  "
                    + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 09)  as fecha union all  "
                    + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 10)  as fecha            "
                    + " )  as x "
                    + " ) as y   where  y.dia!=0 and xx=0"
                    + ""
                    + " ) as x ) as  x  where fe1 = fe2 ";
//            System.out.println("ZafVen01.FechaPriDiaMes: === " + sql);
            if (conTmp != null) {
                stmTmp = conTmp.createStatement();
                rst = stmTmp.executeQuery(sql);
                if (rst.next()) {
                    blnRes = true;
                }
                rst.close();
                stmTmp.close();
                stmTmp = null;
                rst = null;
            }
        } catch (SQLException Evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return blnRes;
    }

    public boolean validacionfechaFac(java.sql.Connection conn) {
        boolean blnRes = false;
        String sql = "";
        java.sql.Statement stm;
        java.sql.ResultSet rst;
        try {
            if (conn != null) {
                sql = " SELECT * FROM ( "
                        + "         select  (date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 01)-1) - current_date  as fecha  "
                        + "  ) as x WHERE x.fecha <= 5 ";
                stm = conn.createStatement();
                rst = stm.executeQuery(sql);
                if (rst.next()) {
                    blnRes = true;
                } else {
                    blnRes = verificaDiaFac(conn);
                }
                rst.close();
                stm.close();
                rst = null;
                stm = null;
            }
        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return blnRes;
    }


// _NUEVO_ESQUEMA_COMP_Y_VENT_COMP
    private boolean realizaOrdComAut(java.sql.Connection conLoc,  int intTipDoc, int intCodDoc) {
        boolean blnRes = true;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc, rstLoc01;
        int intCodCot = Integer.parseInt(txtCot.getText());
        int intSer = 0;
        int intValStock = 0;
        int intCodPrv = 0;
        double dblCan = 0;
        String item = "";
        StringBuffer stb;
        String stritem = "", strcodalt = "", strCodBod = "", strTraTot = "";
        String strSql = "";
        try {
            if (conLoc != null) {
                stmLoc = conLoc.createStatement();

                stb = new StringBuffer();
                INTGLONUMOC = 0;

                for (int intRowVal = 0; intRowVal < tblDat.getRowCount(); intRowVal++) {
                    if (tblDat.getValueAt(intRowVal, INT_TBL_CODITM) != null) {
                        if (tblDat.getValueAt(intRowVal, INT_TBL_ITMSER).toString().equalsIgnoreCase("N")) {   // SI NO ES DE SERVICIO
                            if (tblDat.getValueAt(intRowVal, INT_TBL_ITMTER).toString().equalsIgnoreCase("N")) {
                                stritem = tblDat.getValueAt(intRowVal, INT_TBL_CODITM).toString();
                                strcodalt = tblDat.getValueAt(intRowVal, INT_TBL_ITMALT).toString();
                                strCodBod = tblDat.getValueAt(intRowVal, INT_TBL_CODBOD).toString();
                                dblCan = Double.parseDouble(tblDat.getValueAt(intRowVal, INT_TBL_CANMOV).toString());
                                if (intSer > 0) {
                                    stb.append(" UNION ALL ");
                                }
                                stb.append("SELECT (SUM(a2.nd_canDis)- " + dblCan + ") AS nd_canDis," + stritem + " as coitm, '" + strcodalt + "' as codalt"
                                        + " FROM tbm_invBod AS a2 "
                                        + " WHERE a2.co_emp=" + objZafParSis.getCodigoEmpresa() + " AND a2.co_itm=" + stritem + " and a2.co_bod=" + strCodBod + " ");
                                intSer = 1;
                            }
                        }
                    }
                }

                if (intSer == 1) {
                    strSql = "select coitm, codalt from (" + stb.toString() + ") as x where nd_canDis<0";
                     
                    System.out.println("realizaOrdComAut (2) " + strSql);
                    rstLoc = stmLoc.executeQuery(strSql);
                     
                    while (rstLoc.next()) {
                        item = item + " \n " + rstLoc.getString(2);
                        intValStock = 1;
                    }
                    rstLoc.close();
                    rstLoc = null;
                }

                if (intValStock == 1) {
                    //JOptionPane obj =new JOptionPane();
                    //String strTit, strMsg;
                    String strMsg;
                    //strTit="Mensaje del sistema Zafiro";
                    strMsg = "<< No Hay stock " + item + "\n Estos items no cumple la terminal para la compra   >> ";
                    JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                    stmLoc.close();
                    stmLoc = null;
                    return false;
                }


                /**
                 * ***************************************** REALIZA ORDEN DE
                 * COMPRA **********************************************
                 */
                String strAux = ",CASE WHEN ("
                        + " (trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1))  IN ("
                        + " SELECT UPPER(trim(tx_cad))  FROM tbm_reginv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                        + " AND co_tipdoc=" + intCodTipDocFacEle + " AND co_usr=" + objZafParSis.getCodigoUsuario() + " AND st_reg='A' AND st_tipmov='C' "
                        + " ))) THEN 'S' ELSE 'N' END  as isterL";

                strSql = "SELECT distinct(co_prv) from ("
                        + " SELECT a.co_itm, a.nd_can, a.co_prv"; 
                strSql += strAux;
                strSql += " FROM tbm_detcotven AS a "
                        + "INNER JOIN tbm_inv as inv ON (inv.co_emp=a.co_emp AND inv.co_itm=a.co_itm) "
                        + "WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and a.co_cot=" + intCodCot + " "
                        + " And co_prv in ( "
                        + " SELECT  distinct(co_prv) FROM tbm_detcotven WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_loc=" + objZafParSis.getCodigoLocal() + " and co_cot=" + intCodCot + " and co_prv<>0 "
                        + " )) AS x where x.isterl='S' ";
                rstLoc = stmLoc.executeQuery(strSql);
                while (rstLoc.next()) {
                    intCodPrv = rstLoc.getInt(1);
                    Ventas.ZafVen01.ZafVen01_OC obj1 = new Ventas.ZafVen01.ZafVen01_OC(javax.swing.JOptionPane.getFrameForComponent(this), true, objZafParSis, intCodCot, intCodPrv, 45, txtVenCod.getText(), txtVenNom.getText(), conLoc, intTipDoc, intCodDoc, INTCODREGCEN, 0,blnSolTraInv);
                    obj1.show();
                    if (obj1.acepta()) {
                        
                        obj1.dispose();
                        obj1 = null;
                        blnRes = false;
                        break;
                    } else {
                        if (intDocRelEmpLoc == 1) {
                            stbDocRelEmpLoc.append(" UNION ALL ");
                        }
                        stbDocRelEmpLoc.append(obj1.stbDocRelEmp.toString());
                        intDocRelEmpLoc = 1;

                    }
                    obj1.dispose();
                    obj1 = null;
                    INTGLONUMOC++;
                }
 
                if(isExisteCodL(conLoc,objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intCodCot )){
                    blnIsGenOC = true;
                }else{
                    blnIsGenOC = false;
                }
                
                rstLoc.close();
                rstLoc = null;
                stmLoc.close();
                stmLoc = null;
                stb = null;

            }
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes = false;
        }
        return blnRes;
    }
    
    
    /**
     * 
     * @param conn
     * @param intCodEmp
     * @param intCodLoc
     * @param intCodCot
     * @return 
     */
    boolean cotizacionNecesitaIrAlFinal(java.sql.Connection conExt, int CodEmp, int CodLoc, int CodCot){
        boolean blnRes=false;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;
        try{
            if(conExt!=null){
                stmLoc=conExt.createStatement();
                strSQL="";
                strSQL+=" SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc ,a1.tx_tipMov \n";
                strSQL+=" FROM tbm_cabMovInv as a1  \n";
                strSQL+=" INNER JOIN tbm_cabSegMovInv as a2 ON (a1.co_emp=a2.co_empRelCabMovInv AND a1.co_loc=a2.co_locRelCabMovInv AND \n";
                strSQL+="                                       a1.co_tipDoc=a2.co_tipDocRelCabMovInv AND a1.co_doc=a2.co_docRelCabMovInv)  \n";
                strSQL+=" INNER JOIN ( \n";
                strSQL+="               SELECT a1.co_seg  \n";
                strSQL+="               FROM tbm_cabSegMovInv as a1  \n";
                strSQL+="               INNER JOIN tbm_cabCotVen as a2 ON (a1.co_empRelCabCotVen=a2.co_emp AND a1.co_locRelCabCotVen=a2.co_loc AND  \n";
                strSQL+="                                                   a1.co_cotRelCabCotVen=a2.co_cot)    \n";
                strSQL+="               WHERE a2.co_emp="+CodEmp+" AND a2.co_loc="+CodLoc+" AND a2.co_cot="+CodCot+" \n";
                strSQL+=" ) AS a3 ON (a2.co_seg=a3.co_seg) \n";
                strSQL+=" where a1.tx_tipMov = 'V'   \n";
                strSQL+=" \n";
                rstLoc = stmLoc.executeQuery(strSQL);
                if(rstLoc.next()){
                    blnRes=true;
                }
                rstLoc.close();
                rstLoc=null;
                stmLoc.close();
                stmLoc=null;
            }
        }
        catch (SQLException Evt) {
            blnRes = false;
            System.err.println("ERROR " + Evt.toString());
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } 
        catch (Exception Evt) {
            blnRes = false;
            System.err.println("ERROR " + Evt.toString());
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return blnRes;
    }
    

     private boolean isExisteCodL(java.sql.Connection conn, int intCodEmp, int intCodLoc, int intCodCot){
            boolean blnRes=false;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strCadena;
            try{
                stmLoc=conn.createStatement();
                strCadena="";
                strCadena+=" SELECT a1.co_itm ";
                strCadena+=" FROM tbm_detCotVen as a1  ";
                strCadena+=" INNER JOIN tbm_inv as a2 on (a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm)";
                strCadena+=" WHERE a1.co_emp="+intCodEmp+" AND a1.co_loc="+intCodLoc+" AND ";
                strCadena+="       a1.co_cot="+intCodCot+" AND a1.tx_codAlt like '%L' AND a2.st_ser='N' ";
                System.out.println("isExiteCodL " + strCadena);
                rstLoc = stmLoc.executeQuery(strCadena);
                if (rstLoc.next()) {
                   blnRes=true;
                }
                stmLoc.close();
                stmLoc=null;
                rstLoc.close();
                rstLoc=null;
            }
            catch (SQLException Evt) {
                blnRes = false;
                System.err.println("ERROR " + Evt.toString());
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } 
            catch (Exception Evt) {
                blnRes = false;
                System.err.println("ERROR " + Evt.toString());
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }
    
    private boolean blnIsGenOC=false;
  
 
    
    private boolean realizaComVenCompAut(java.sql.Connection conLoc,  int intTipDoc, int intCodDoc) {
        boolean blnRes = true;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc, rstLoc01;
        int intCodCot = Integer.parseInt(txtCot.getText());
        int intSer = 0;
        int intValStock = 0;
        int intCodPrv = 0;
        double dblCan = 0;
        String item = "";
        StringBuffer stb;
        String stritem = "", strcodalt = "", strCodBod = "", strTraTot = "";
        String strSql = "";
        try {

            arlDatSolTra = new ArrayList();
            if (conLoc != null) {
                
                stmLoc = conLoc.createStatement();
                INTGLONUMOC = 0;


                /**
                 * ***************************************** REALIZA CONPORAS Y
                 * VENTAS ENTRE COMPAÑIAS **************************************************
                 */
                if (objZafParSis.getCodigoEmpresa() == 1 || objZafParSis.getCodigoEmpresa() == 2 || objZafParSis.getCodigoEmpresa() == 4) {
                    stb = new StringBuffer();
                    intSer = 0;
                    for (int intRowVal = 0; intRowVal < tblDat.getRowCount(); intRowVal++) {
                        if (tblDat.getValueAt(intRowVal, INT_TBL_CODITM) != null) {
                            if (tblDat.getValueAt(intRowVal, INT_TBL_ITMSER).toString().equalsIgnoreCase("N")) {   // SI NO ES DE SERVICIO
                                if (tblDat.getValueAt(intRowVal, INT_TBL_ITMTER).toString().equalsIgnoreCase("I")) {
                                    stritem = tblDat.getValueAt(intRowVal, INT_TBL_CODITM).toString();
                                    strcodalt = tblDat.getValueAt(intRowVal, INT_TBL_ITMALT).toString();
                                    strTraTot = (tblDat.getValueAt(intRowVal, INT_TBL_TRATOT).toString().equals("true") ? "S" : "N");
                                    strCodBod = tblDat.getValueAt(intRowVal, INT_TBL_CODBOD).toString();
                                    
                                     
                                    
                                    dblCan = Double.parseDouble(tblDat.getValueAt(intRowVal, INT_TBL_CANMOV).toString());
                                    if (intSer > 0) {
                                        stb.append(" UNION ALL ");
                                    }
                                    stb.append("SELECT " + objZafParSis.getCodigoEmpresa() + " AS co_emp, " + strCodBod + " as co_bod,  " + dblCan + " AS can ," + stritem + " as coitm , text '" + strTraTot + "' as esttra ");
                                    intSer = 1;
                                }
                            }
                        }
                    }
                    

                    if (intSer == 1) {
                        strSql = "SELECT * FROM ( "
                                + " select x.coitm, (a1.nd_canDis - x.can) as can from ( "
                                + " select co_emp, co_bod, coitm,   sum(can) as can from ( "
                                + " " + stb.toString() + ""
                                + " ) as x group by co_emp, co_bod, coitm  "
                                + " ) as x "
                                + " INNER JOIN tbm_invBod as a1 ON(a1.co_emp=x.co_emp and a1.co_bod=x.co_bod and a1.co_itm=x.coitm) "
                                + " ) AS x /*WHERE x.can < 0*/ "; // José Marín 3/Sep/2014 -- PARA EL MISMO PUNTO FACTURACION 
                        System.out.println("ZafVen01.realizarComVenCompAut (1): " + strSql); 
                        rstLoc = stmLoc.executeQuery(strSql);

                        marcarDatComVenComp(conLoc, strSql);   
                        objTblMod.setDataModelChanged(false);
                        blnHayCam_glo = false;
                        blnHayCam_glo_tbl = false;
                        blnHayCam_Pag = false;

                        if (rstLoc.next()) {  // SI ENCUENTRA ALGO 

                            strAux = ",CASE WHEN ("
                                    + " (trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1))  IN ("
                                    + " SELECT UPPER(trim(tx_cad))  FROM tbm_reginv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                                    + " AND co_tipdoc=" + intCodTipDocFacEle + " AND co_usr=" + objZafParSis.getCodigoUsuario() + " AND st_reg='A' AND st_tipmov='I' "
                                    + " ))) THEN 'S' ELSE 'N' END  as isterL";

                            strSql = "SELECT count(*) from ("
                                    + " SELECT a.co_itm, a.nd_can, a.co_prv";
                            strSql += strAux;
                            strSql += " FROM tbm_detcotven AS a "
                                    + "INNER JOIN tbm_inv as inv ON (inv.co_emp=a.co_emp AND inv.co_itm=a.co_itm) "
                                    + "WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and a.co_cot=" + intCodCot + " "
                                    + " ) AS x where x.isterl='S' ";
                            System.out.println("ZafVen01.realizarComVenCompAut (2): \n" + strSql);
                            rstLoc01 = stmLoc.executeQuery(strSql);
                            ZafVen01_06 obj1 = new ZafVen01_06(JOptionPane.getFrameForComponent(this), true, objZafParSis, intCodCot, conLoc, INTCODREGCEN, this, intCodTipDocFacEle);
                            while (rstLoc01.next()) {
                                if (rstLoc01.getInt(1) > 0) {  // José Marín M.  COMPRA ENTRE EMPRESAS
                                    obj1.show();
                                    if (obj1.acepta()) {
                                        stbDocRelEmpRem = obj1.stbDocRelEmp;
                                        /*Agregado para el nuevo servicio 1 cuando se realizan transferencias o compras ventas entre empresas */
                                        strEmpComVen= obj1.getStrEmpCompVen();
                                        strEmpTransf=obj1.getStrEmpTrans();
                                       /*Agregado para el nuevo servicio 1 cuando se realizan transferencias o compras ventas entre empresas */                
					cliret=obj1.isBlnCliRet();
                                        blnRes = true;
                                        break;
                                    } else {
                                        blnRes = false;
                                    }
//                                    obj1.dispose();
//                                    obj1 = null;
                                    INTGLONUMOC++;
                                }
                            }
                            
                            obj1.dispose();
                            obj1 = null;
                            rstLoc01.close();
                            rstLoc01 = null;
                        }
                        rstLoc.close();
                        rstLoc = null;
                    }
                }
                /**
                 * ************************************************************************************************************
                 */
                stmLoc.close();
                stmLoc = null;
                stb = null;

            }
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes = false;
        }
        return blnRes;
    }
    
    private int intCodSeg;
    private String strMomGenFac;
    
    private boolean isSolTraInv(java.sql.Connection con){
        java.sql.Statement stmLoc,stmLoc01;
        java.sql.ResultSet rstLoc,rstLoc01;
        String strCadena;
        boolean blnRes=true;
        try{
            if(con!=null){
                stmLoc = con.createStatement();
                stmLoc01= con.createStatement();
                strCadena="";
                strCadena+=" SELECT * FROM tbm_cabSegMovInv where co_empRelCabCotVen="+objZafParSis.getCodigoEmpresa();
                strCadena+=" AND co_locRelCabCotVen="+objZafParSis.getCodigoLocal()+" AND co_cotRelCabCotVen="+txtCot.getText();
                System.out.println("isSolTraInv: " + strCadena);
                rstLoc=stmLoc.executeQuery(strCadena);
                if(rstLoc.next()){
                    intCodSeg=rstLoc.getInt("co_seg");
                    ArrayList arlRegSolTra;
                    strCadena=" SELECT co_empRelCabSolTraInv, co_locRelCabSolTraInv, co_tipDocRelCabSolTraInv, co_docRelCabSolTraInv  \n";
                    strCadena+=" FROM tbm_cabSegMovInv  \n";
                    strCadena+=" WHERE co_seg="+rstLoc.getInt("co_seg")+" AND co_empRelCabSolTraInv IS NOT NULL \n";
                    System.out.println("isSolTraInv 2: " + strCadena);
                    rstLoc01=stmLoc01.executeQuery(strCadena);
                    if(rstLoc01.next()){ // TIENE UNA SOLICITUD
                        blnSolTraInv=true;
                        arlRegSolTra = new ArrayList();
                        arlRegSolTra.add(rstLoc01.getInt("co_empRelCabSolTraInv"));
                        arlRegSolTra.add(rstLoc01.getInt("co_locRelCabSolTraInv"));
                        arlRegSolTra.add(rstLoc01.getInt("co_tipDocRelCabSolTraInv"));
                        arlRegSolTra.add(rstLoc01.getInt("co_docRelCabSolTraInv"));
                        arlDatSolTra.add(arlRegSolTra);
                    }
                    
                    rstLoc01.close();
                    rstLoc01=null;
                    stmLoc01.close();
                    stmLoc01=null;
                }
                
                if(isExisteCodL(con,objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText())  ) && 
                        intCodBodPre==15 || 
                        cotizacionNecesitaIrAlFinal(con, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText()) ) ){
                    strCadena=" UPDATE tbm_cabCotVen SET tx_momGenFac='F'  WHERE co_emp="+objZafParSis.getCodigoEmpresa();
                    strCadena+=" AND co_loc="+objZafParSis.getCodigoLocal()+" AND co_cot="+txtCot.getText();
                    System.out.println("intCodBodPre isSolTraInv: " + strCadena);
                    stmLoc.executeUpdate(strCadena);
                }
                
                strCadena=" SELECT tx_momGenFac FROM tbm_cabCotVen WHERE co_emp="+objZafParSis.getCodigoEmpresa();
                strCadena+=" AND co_loc="+objZafParSis.getCodigoLocal()+" AND co_cot="+txtCot.getText();
                System.out.println("isSolTraInv: " + strCadena);
                rstLoc=stmLoc.executeQuery(strCadena);
                if(rstLoc.next()){
                    strMomGenFac = rstLoc.getString("tx_momGenFac")==null?"":rstLoc.getString("tx_momGenFac");  // P PRINCIPIO F FINAL '' INMACONSA o Normal  
                }
                rstLoc.close();
                rstLoc=null;
                stmLoc.close();
                stmLoc=null;
            }
        }
        catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(this, Evt);
            blnRes=false;
        }
        return blnRes;
    }


    private void marcarDatComVenComp(java.sql.Connection conn, String strSql) {
        String Sql = "", strAux = "";
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;

        try {
            if (conn != null) {
                stmLoc = conn.createStatement();

                strAux = " CASE WHEN ("
                        + " (trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1))  IN ("
                        + " SELECT UPPER(trim(tx_cad))  FROM tbm_reginv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                        + " AND co_tipdoc=" + intCodTipDocFacEle + " AND co_usr=" + objZafParSis.getCodigoUsuario() + " AND st_reg='A' AND st_tipmov='I' "
                        + " ))) THEN 'S' ELSE 'N' END  as isterL ";

                Sql = "select " + strAux + " , coitm  from (  " + strSql + " ) AS x "
                        + " INNER JOIN tbm_inv as inv ON (inv.co_emp=" + objZafParSis.getCodigoEmpresa() + " AND inv.co_itm=x.coitm)  ";
//                System.out.println("ZafVen01.marcarDatComVenComp: " + Sql);
                rstLoc = stmLoc.executeQuery(Sql);
                while (rstLoc.next()) {
                    verificaCompVenItm(rstLoc.getString("coitm"));
                }
                rstLoc.close();
                rstLoc = null;
                stmLoc.close();
                stmLoc = null;

            }
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
        }

    }

    private void verificaCompVenItm(String strItm) {
        try {
            if (stIvaVen.equals("S")) {
                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                        if (tblDat.getValueAt(i, INT_TBL_CODITM).toString().equals(strItm)) {
                            tblDat.setValueAt("1", i, INT_TBL_NUMFILCOMPVEN);
                        }
                    }
                }
            }
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(this, Evt);
        }
    }

    private void limpiarCompVenItm() {
        try {
            if (stIvaVen.equals("S")) {
                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                        tblDat.setValueAt(null, i, INT_TBL_NUMFILCOMPVEN);
                    }
                }
            }
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(this, Evt);
        }
    }

    /**
     * Esta Funcion permite realizar ordenes de compra de manera automatica esta
     * funcion llama a la clase ZafVen01_OC que es la que se presenta con los
     * datos cargados que va a permitir que el usuario presione Guardar y luego
     * de guardar continuara con el proceso de facturacion que luego se manda a
     * imprimir la factura.
     *
     * @param conLoc : recive la coneccion de la base local
     * @parem conRem : recive la coneccion de la base remota
     * @param intTipDoc : recive el tipo de documento
     * @param intCodDoc : recive codigo del documento
     */
    private boolean realizaOrdComVisPre(java.sql.Connection conLoc, java.sql.Connection conRem, int intTipDoc, int intCodDoc) {
        int intCodCot = Integer.parseInt(txtCot.getText());
        String sql = "";
        boolean blnRes = true;
       try {
            if (conLoc != null) {
                //*****************************************************************************
                java.sql.Statement stm = conLoc.createStatement();
                java.sql.Statement stm_det = conLoc.createStatement();
                //******************************************************************************
                StringBuffer stb = new StringBuffer();
                int intSer = 0;
                double dblCan = 0;
                for (int intRowVal = 0; intRowVal < tblDat.getRowCount(); intRowVal++) {
                    String stritem = "", strcodalt = "";
                    if (tblDat.getValueAt(intRowVal, INT_TBL_CODITM) != null) {
                        if (tblDat.getValueAt(intRowVal, INT_TBL_ITMSER).toString().equalsIgnoreCase("N")) {   // SI NO ES DE SERVICIO
                            if (tblDat.getValueAt(intRowVal, INT_TBL_ITMTER).toString().equalsIgnoreCase("N")) {
                                stritem = tblDat.getValueAt(intRowVal, INT_TBL_CODITM).toString();
                                strcodalt = tblDat.getValueAt(intRowVal, INT_TBL_ITMALT).toString();

                                dblCan = Double.parseDouble(tblDat.getValueAt(intRowVal, INT_TBL_CANMOV).toString());
                                if (intSer > 0) {
                                    stb.append(" UNION ALL ");
                                }
                                stb.append("SELECT (SUM(a2.nd_canDis)- " + dblCan + ") AS nd_canDis," + stritem + " as coitm, '" + strcodalt + "' as codalt"
                                        + " FROM tbm_equInv AS a1 INNER JOIN tbm_invBod AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm)"
                                        + " INNER JOIN tbr_bodEmp AS a3 ON (a2.co_emp=a3.co_empPer AND a2.co_bod=a3.co_bodPer)"
                                        + " WHERE a3.co_emp=" + objZafParSis.getCodigoEmpresa() + " AND a3.co_loc=" + objZafParSis.getCodigoLocal() + " AND a1.co_itmMae=(SELECT co_itmMae FROM tbm_equInv"
                                        + " WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_itm=" + stritem + ")");
                                intSer = 1;
                            }
                        }
                    }
                }

                int intValStock = 0;
                String item = "";
                java.sql.ResultSet rst2;

                if (intSer == 1) {
                    String sql2 = "select coitm, codalt from (" + stb.toString() + ") as x where nd_canDist<0";
                    rst2 = stm.executeQuery(sql2);
                    while (rst2.next()) {
                        item = item + " \n " + rst2.getString(2);
                        intValStock = 1;
                    }
                }
                if (intValStock == 1) {
                    //JOptionPane obj = JOptionPane();
                    //String strTit, strMsg;
                    String strMsg;
                    //strTit="Mensaje del sistema Zafiro";
                    strMsg = "<< No Hay stock " + item + "\n Estos items no cumple la terminal para la compra   >> ";
                    JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                    return false;
                }

                //********************************************************************************************************************

                INTGLONUMOC = 0;

                int intCodPrv = 0;
                int intTipo = 0;
                int x = 0;


                //*******************************************  REALIZA ORDEN DE COMPRA ***************************************************/
                String strAux = ",CASE WHEN ("
                        + " (trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1))  IN ("
                        + " SELECT UPPER(trim(tx_cad))  FROM tbm_reginv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                        + " AND co_tipdoc=" + intCodTipDocFacEle + " AND co_usr=" + objZafParSis.getCodigoUsuario() + " AND st_reg='A' AND st_tipmov='C' "
                        + " ))) THEN 'S' ELSE 'N' END  as isterL";
                //FATURACION ELECTRONICA - José Marín M 3/Oct/2014

                sql = "SELECT distinct(co_prv) from ("
                        + " SELECT a.co_itm, a.nd_can, a.co_prv";
                sql += strAux;
                sql += " FROM tbm_detcotven AS a "
                        + "INNER JOIN tbm_inv as inv ON (inv.co_emp=a.co_emp AND inv.co_itm=a.co_itm) "
                        + "WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and a.co_cot=" + intCodCot + " "
                        + " And co_prv in ( "
                        + " SELECT  distinct(co_prv) FROM tbm_detcotven WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_loc=" + objZafParSis.getCodigoLocal() + " and co_cot=" + intCodCot + " and co_prv<>0 "
                        + " )) AS x where x.isterl='S' ";

                stm = conLoc.createStatement();
                rst2 = stm.executeQuery(sql);
                while (rst2.next()) {

                    intCodPrv = rst2.getInt(1);
                    Ventas.ZafVen01.ZafVen01_OC obj1 = new Ventas.ZafVen01.ZafVen01_OC(javax.swing.JOptionPane.getFrameForComponent(this), true, objZafParSis, intCodCot, intCodPrv, 45, txtVenCod.getText(), txtVenNom.getText(), conLoc, intTipDoc, intCodDoc, INTCODREGCEN, 1,false);
                    obj1.show();


                    obj1.dispose();
                    obj1 = null;
                    x++;
                    INTGLONUMOC++;
                }
                //**********************************************************************************************************************/
                //*******************************************  REALIZA TRANSFERENCIA ***************************************************/

                stb = null;
            }
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes = false;
        }
        return blnRes;
    }

    private boolean actualizarPrecioLista() {
        boolean blnRes = true;
        String strEstApl = "";
        double dblPreVtaAct = 0;
        try {
            for (int i = 0; i < tblDat.getRowCount(); i++) {
                if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                    strEstApl = (tblDat.getValueAt(i, INT_TBL_CODREGCOT) == null ? "" : (tblDat.getValueAt(i, INT_TBL_CODREGCOT).equals("") ? "" : tblDat.getValueAt(i, INT_TBL_CODREGCOT).toString()));
                    if ((!strEstApl.equals(""))) {
                        dblPreVtaAct = getPreVta(CONN_GLO, objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)));
                        tblDat.setValueAt("" + dblPreVtaAct, i, INT_TBL_PRELISITM);
                        tblDat.setValueAt("" + dblPreVtaAct, i, INT_TBL_PRELISITM2);
                    }
                }
            }

        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private double getPreVta(java.sql.Connection conn, String strCodItm) {
        double dblPreUni = 0;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;
        String strSql = "";
        try {
            if (conn != null) {
                stmLoc = conn.createStatement();
                strSql = " SELECT nd_prevta1 FROM tbm_inv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_itm=" + strCodItm;
                rstLoc = stmLoc.executeQuery(strSql);
                if (rstLoc.next()) {
                    dblPreUni = rstLoc.getDouble("nd_prevta1");
                }
                rstLoc.close();
                rstLoc = null;
                stmLoc.close();
                stmLoc = null;

            }
        } catch (java.sql.SQLException Evt) {
            objUti.mostrarMsgErr_F1(this, Evt);
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(this, Evt);
        }
        return dblPreUni;
    }

    private void borrarSolRel() {
        for (int i = 0; i < tblDat.getRowCount(); i++) {
            if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {

                if (!(tblDat.getValueAt(i, INT_TBL_COTIPDOCRELOC) == null)) {
                    tblDat.setValueAt("S", i, INT_TBL_ITMTER);
                }

                tblDat.setValueAt(null, i, INT_TBL_COLOCREL);
                tblDat.setValueAt(null, i, INT_TBL_COTIPDOCREL);
                tblDat.setValueAt(null, i, INT_TBL_CODOCREL);
                tblDat.setValueAt(null, i, INT_TBL_COREGREL);

                tblDat.setValueAt(null, i, INT_TBL_COLOCRELSOL);
                tblDat.setValueAt(null, i, INT_TBL_COTIPDOCRELSOL);
                tblDat.setValueAt(null, i, INT_TBL_CODOCRELSOL);
                tblDat.setValueAt(null, i, INT_TBL_COREGRELSOL);
                tblDat.setValueAt(null, i, INT_TBL_COLOCRELOC);
                tblDat.setValueAt(null, i, INT_TBL_COTIPDOCRELOC);
                tblDat.setValueAt(null, i, INT_TBL_CODOCRELOC);
                tblDat.setValueAt(null, i, INT_TBL_COREGRELOC);

                tblDat.setValueAt(tblDat.getValueAt(i, INT_TBL_PRELISITM2), i, INT_TBL_PRELISITM);


            }
        }
    }
    

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        ConfiguraVenCon();
        Configurartabla();
        configurarTablaPago();

        if (intValBus == 6) {
            txtCot.setText("" + intCodCot);
            _consultar(FilSql());
            objTooBar.setEstado('w');
        }

        if (intValBus == 2) {
            txtCot.setText("" + intCodCot);
            consultarHis(new Integer(intCodEmp), new Integer(intCodLoc), new Integer(intCodHis));
            objTooBar.setEstado('w');
        }

        if (intValBus == 3) {
            txtFecDoc.setHoy();
            objTooBar.setEstado('n');
            blnLimpiar = true;
            this.__refrescaDatos(stbLisItmSolMer);
        }

        if (intValBus == 4) {
            txtCot.setText("" + intCodCot);
            txtFecDoc.setText("");
            objTooBar.consultar();
            objTooBar.setEstado('w');
        }
        
        /* JM: Temporal mientres no estemos listos con Java 8 29/Marzo/2017 */
//        System.out.println("JOTA Version Java: " +  System.getProperty("java.version")); 
//        if(!System.getProperty("java.version").startsWith("1.6")){
//            mostrarMsg("Solicite a Su Administrador de Sistema la revision de la version de su Java..  " + System.getProperty("java.version"));
//            dispose();
//        }

        if(objZafParSis.getCodigoMenu()==3965){
            if(!isVersionActualizada()){
                mostrarMsg("Su version del sistema no es la adecuada para poder continuar, actualice el sistema e intente nuevamente..");
                dispose();
            }  
        }
              
    }//GEN-LAST:event_formInternalFrameOpened

    /**
     * JM 22/Oct/2018
     * 
     * Nuevo metodo para validar si la version de Facturacion esta actualizada 
     * 
     * 
     * NOTA: al modifical cualquiera de las clases que genera factura esta clase deberia actualizarse para
     * comprobar que siempre el area de venta este actualizada
     * @return 
     */
    
    private boolean isVersionActualizada(){
        java.sql.Connection conLoc;
        java.sql.ResultSet rstLoc;
        java.sql.Statement stmLoc;
        boolean blnRes=false;
        try{
            conLoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if(conLoc!=null){
                stmLoc = conLoc.createStatement();
                strSQL="";
                strSQL+=" SELECT co_mnuSis, tx_ver, tx_nomMnu FROM tbm_verMnuSis where co_mnuSis="+objZafParSis.getCodigoMenu();
                rstLoc = stmLoc.executeQuery(strSQL);
                if(rstLoc.next()){
                    System.out.println("Version " + strVer);
                    System.out.println("tx_ver " + rstLoc.getString("tx_ver"));
                    
                    if(strVer.equals(rstLoc.getString("tx_ver"))){
                        blnRes=true;
                    }
                }
                rstLoc.close();
                rstLoc=null;
                stmLoc.close();
                stmLoc=null;
                conLoc.close();
                conLoc=null;
            }
            
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    
    
    private void formInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameIconified
        // TODO add your handling code here:
    }//GEN-LAST:event_formInternalFrameIconified

    private void CerrarVentana(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_CerrarVentana
        // TODO add your handling code here:
        String strMsg = "¿Está Seguro que desea cerrar este programa?";
        //JOptionPane oppMsg=new JOptionPane();
        //String strTit;
        //strTit="Mensaje del sistema Zafiro";
        if (JOptionPane.showConfirmDialog(this, strMsg, strTit, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == 0) {
            objInvItm = null;
            cerrarObj();
            //System.gc();
            Runtime.getRuntime().gc();
            dispose();
        }
    }//GEN-LAST:event_CerrarVentana

    public void cerrarObj() {
        try {
            objVenCon2.dispose(); //***
            objVenCon2 = null;  //****
            objVenConVen.dispose();
            objVenConVen = null;
            objVenConCli.dispose();
            objVenConCli = null;
            objUti = null;
            objTooBar = null;
            objAutPrg = null;
            objlisCambios = null;
            objZafParSis = null;
            txtFecDoc = null;
            objTblCelEdiTxtVcoPrv = null;
            objTblCelEdiTxtVcoItm = null;
            objTblCelEdiTxtVcoItmAlt = null;
            objUltDocPrint = null;

        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }

    private void formInternalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameDeactivated
        // TODO add your handling code here:
    }//GEN-LAST:event_formInternalFrameDeactivated

    public void BuscarCliente(String campo, String strBusqueda, int tipo) {
        objVenConCli.setTitle("Listado de Clientes");
//System.out.println("ZafVen01.BuscarCliente");

        String strSql = "";
        if (getVolFac()) {

            strSql = "SELECT co_cli, tx_nom, tx_dir, tx_tel, tx_ide, tx_tipper, nd_maxdes, nd_maruti, tx_desLar, co_ven, vendedor, co_tipper,"
                    + "  ne_tipforpag,  nd_pes , ne_diagra , co_forpag , tx_des, st_ivaven , st_peringnomclicotven, ne_diamesmaxemifacven, st_reg, tx_corEle "
                    + " FROM ( "
                    + " select a.co_cli, a.tx_nom, a.tx_dir, a.tx_tel, a.tx_ide, a.tx_tipper, a.nd_maxdes, a.nd_maruti , ciu.tx_desLar , a.co_ven, ven.tx_nom as vendedor, ven.st_reg, a.co_tipper "
                    + " , b.ne_tipforpag,  b.nd_pes, a.ne_diagra, a.co_forpag , b.tx_des, a.st_ivaven, a.st_peringnomclicotven, a.ne_diamesmaxemifacven, a.tx_corEle FROM tbr_cliloc AS a1 "
                    + " INNER JOIN tbm_cli as a ON (a.co_emp=a1.co_emp and a.co_cli=a1.co_cli)   "
                    + " LEFT JOIN tbm_Ciu as ciu on(ciu.co_Ciu=a.co_ciu)  "
                    + " LEFT JOIN tbm_usr as ven on (ven.co_usr = a.co_ven)"
                    + " left join tbm_cabforpag as b on (b.co_emp=a.co_emp and b.co_forpag=a.co_forpag) "
                    + " WHERE a1.co_emp =" + objZafParSis.getCodigoEmpresa() + " and a1.co_loc = " + objZafParSis.getCodigoLocal() + " and a.st_reg IN('A','N')  and a.st_cli='S' "
                    + ""
                    + "    and case when (select co_grp from tbm_cli where co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_cli=" + intCodCliGrp + ") is null then "
                    + "  a.co_cli=" + intCodCliGrp + " "
                    + "   else  co_grp in ( select co_grp from tbm_cli where co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_cli=" + intCodCliGrp + " ) end  "
                    + " "
                    + " order by a.tx_nom  "
                    + ") AS a";

        } else {
            strSql = "SELECT co_cli, tx_nom, tx_dir, tx_tel, tx_ide, tx_tipper, nd_maxdes, nd_maruti, tx_desLar, co_ven, vendedor, co_tipper,"
                    + "  ne_tipforpag,  nd_pes , ne_diagra , co_forpag , tx_des, st_ivaven , st_peringnomclicotven, ne_diamesmaxemifacven, st_reg, tx_corEle  "
                    + " FROM ( "
                    + " select a.co_cli, a.tx_nom, a.tx_dir, a.tx_tel, a.tx_ide, a.tx_tipper, a.nd_maxdes, a.nd_maruti , ciu.tx_desLar , a.co_ven, ven.tx_nom as vendedor, ven.st_reg, a.co_tipper "
                    + " , b.ne_tipforpag,  b.nd_pes, a.ne_diagra, a.co_forpag , b.tx_des, a.st_ivaven, a.st_peringnomclicotven, a.ne_diamesmaxemifacven, a.tx_corEle FROM tbr_cliloc AS a1 "
                    + " INNER JOIN tbm_cli as a ON (a.co_emp=a1.co_emp and a.co_cli=a1.co_cli)   "
                    + " LEFT JOIN tbm_Ciu as ciu on(ciu.co_Ciu=a.co_ciu)  "
                    + " LEFT JOIN tbm_usr as ven on (ven.co_usr = a.co_ven)"
                    + " left join tbm_cabforpag as b on (b.co_emp=a.co_emp and b.co_forpag=a.co_forpag) "
                    + " WHERE a1.co_emp =" + objZafParSis.getCodigoEmpresa() + " and a1.co_loc = " + objZafParSis.getCodigoLocal() + " and a.st_reg IN('A','N')  and a.st_cli='S' "
                    + " order by a.tx_nom  "
                    + ") AS a";
        }
        System.out.println("BuscarCliente: " + strSql);
        objVenConCli.setSentenciaSQL(strSql);

        if (objVenConCli.buscar(campo, strBusqueda)) {
            txtCliCod.setText(objVenConCli.getValueAt(1));
            txtCliNom.setText(objVenConCli.getValueAt(2));
            txtCliDir.setText(objVenConCli.getValueAt(3));
            //////////// José Marín -- José Marín: ahora el vendedor debe elegir a donde va la guia
            txtCliDirGui.setText("");
            ////////////
            //  strTipPer_glo = objVenConCli.getValueAt(6);
            Glo_dlbMaxDes = Double.parseDouble(objVenConCli.getValueAt(7));
            Glo_dlbMarUti = Double.parseDouble(objVenConCli.getValueAt(8));
            txtcli_telefono.setText(objVenConCli.getValueAt(4));
            txtcli_identificacion.setText(objVenConCli.getValueAt(5));
            txtcli_ciudad.setText(objVenConCli.getValueAt(9));
//          txtVenCod.setText(objVenConCli.getValueAt(10));
//          txtVenNom.setText(objVenConCli.getValueAt(11));
            strCodTipPerCli = objVenConCli.getValueAt(12);
            intTipForPagCfgCli = Integer.parseInt(objVenConCli.getValueAt(13));
            System.out.println("db " +  objVenConCli.getValueAt(14).toString() );
            if(objVenConCli.getValueAt(14)==null || objVenConCli.getValueAt(14).toString().equals("")){
                dblPesCfgCli = 50000.00;
            }
            else{
                dblPesCfgCli = Double.parseDouble(objVenConCli.getValueAt(14));  // JM SOLUCION xD
            }
             
            dblDiaGraCli = Double.parseDouble(objVenConCli.getValueAt(15));

            txtCodForPag.setText(objVenConCli.getValueAt(16));
            txtCodigoFormaPago.setText(txtCodForPag.getText());
            txtNomForPag.setText(objVenConCli.getValueAt(17));
            stIvaVen = objVenConCli.getValueAt(18);
            txtEstNomCli.setText(objVenConCli.getValueAt(19));
            intTipForPagCotizacion = intTipForPagCfgCli;
//            dblPesCotizacion = dblPesCfgCli;


            txtNomCliVar.setVisible((objVenConCli.getValueAt(19).equals("S") ? true : false));
            strDiaMaxFacven = objVenConCli.getValueAt(20);
            strStaVen = objVenConCli.getValueAt(21);
 

            if(!getVendedorAsignado(objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), Integer.parseInt(txtCliCod.getText())) ){
                MensajeInf("Cliente no posee un vendedor asignado, favor comunicarse con sistema, antes de facturar.... ");
            }

            verificaIvaCli(stIvaVen);

            if (intTipForPagCotizacion == 4) {
                habilitarCamposTarCre();
            } else {
                deshabilitarCamposTarCre();
            }
            
           //JM 6/Sep/2018: Se agrega que se modifique el descuento cuando se cambia el cliente.
            calculaDescuento();
            
            
            CalculoPago();

            calculaPag();
 

        } else {
            objVenConCli.setCampoBusqueda(tipo);
            objVenConCli.cargarDatos();
            objVenConCli.show();
            if (objVenConCli.getSelectedButton() == ZafVenCon.INT_BUT_ACE) {
                txtCliCod.setText(objVenConCli.getValueAt(1));
                txtCliNom.setText(objVenConCli.getValueAt(2));
                txtCliDir.setText(objVenConCli.getValueAt(3));

                //////José Marín -- JM ahora el cliente debe elegir a hacia donde se dirige la guia
                txtCliDirGui.setText("");
                ////////


                //  strTipPer_glo = objVenConCli.getValueAt(6);
                Glo_dlbMaxDes = Double.parseDouble(objVenConCli.getValueAt(7));
                Glo_dlbMarUti = Double.parseDouble(objVenConCli.getValueAt(8));
                txtcli_telefono.setText(objVenConCli.getValueAt(4));
                txtcli_identificacion.setText(objVenConCli.getValueAt(5));
                txtcli_ciudad.setText(objVenConCli.getValueAt(9));
//                txtVenCod.setText(objVenConCli.getValueAt(10));
//                txtVenNom.setText(objVenConCli.getValueAt(11));
                strCodTipPerCli = objVenConCli.getValueAt(12);
                intTipForPagCfgCli = Integer.parseInt(objVenConCli.getValueAt(13));
//                dblPesCfgCli = Double.parseDouble(objVenConCli.getValueAt(14));
                if(objVenConCli.getValueAt(14)==null || objVenConCli.getValueAt(14).toString().equals("")){
                    dblPesCfgCli = 50000.00;
                }
                else{
                    dblPesCfgCli = Double.parseDouble(objVenConCli.getValueAt(14));  // JM SOLUCION xD
                }
                dblDiaGraCli = Double.parseDouble(objVenConCli.getValueAt(15));

                txtCodForPag.setText(objVenConCli.getValueAt(16));
                txtCodigoFormaPago.setText(txtCodForPag.getText());
                txtNomForPag.setText(objVenConCli.getValueAt(17));
                stIvaVen = objVenConCli.getValueAt(18);
                txtEstNomCli.setText(objVenConCli.getValueAt(19));
                intTipForPagCotizacion = intTipForPagCfgCli;
//                dblPesCotizacion = dblPesCfgCli;

                txtNomCliVar.setVisible((objVenConCli.getValueAt(19).equals("S") ? true : false));
                strDiaMaxFacven = objVenConCli.getValueAt(20);
                strStaVen = objVenConCli.getValueAt(21);

                
                if(!getVendedorAsignado(objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), Integer.parseInt(txtCliCod.getText()) )){
                    MensajeInf("Cliente no posee un vendedor asignado, favor comunicarse con sistema, antes de facturar.... ");
                }
 
                verificaIvaCli(stIvaVen);

                if (intTipForPagCotizacion == 4) {
                    habilitarCamposTarCre();
                } else {
                    deshabilitarCamposTarCre();
                }

                //JM 6/Sep/2018: Se agrega que se modifique el descuento cuando se cambia el cliente.
                calculaDescuento();
                
                
                CalculoPago();
                calculaPag();
                //objZafTblForPag.ConfiguraDatPagCalculaPag(objZafParSis.getCodigoEmpresa() , dblTotalCot, objVenConCli.getValueAt(16), objVenConCli.getValueAt(17), txtFecDoc.getText(), Integer.parseInt(strCodTipPerCli), stIvaVen );
//                llamarVenAut();                //ventana de autorizaciones 
            } else {
                txtCliCod.setText(strCodPrv);
                txtCliNom.setText(strDesLarPrv);
            }
        }
    }

    /*
     * Agrega el listener para detectar que hubo algun cambio en la caja de texto
     */
    private void addListenerCambio() {
        objlisCambios = new LisTextos();
        //Cabecera
        txtCot.setText("");
        txtCot.getDocument().addDocumentListener(objlisCambios);
        txtCliCod.getDocument().addDocumentListener(objlisCambios);
        txtCliNom.getDocument().addDocumentListener(objlisCambios);
        //  txtCliDir.getDocument().addDocumentListener(objlisCambios);
        txtVenCod.getDocument().addDocumentListener(objlisCambios);
        txtVenNom.getDocument().addDocumentListener(objlisCambios);
        // txtAte.getDocument().addDocumentListener(objlisCambios);

        //Pie de pagina
        // txaObs1.getDocument().addDocumentListener(objlisCambios);
        // txaObs2.getDocument().addDocumentListener(objlisCambios);

    }

    /*
     * Clase de tipo documenet listener para detectar los cambios en
     * los textcomponent
     */
    class LisTextos implements DocumentListener {

        @Override
        public void changedUpdate(DocumentEvent e) {
            blnHayCam = true;
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            blnHayCam = true;
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            blnHayCam = true;
        }
    }

    class LisCambioTbl implements TableModelListener {

        @Override
        public void tableChanged(TableModelEvent e) {

            if (objTblMod.isDataModelChanged()) {
                calculaTot();
            }

        }
    }
 
    
    /**
     * Nuevo metodo JM, para obtener el vendedor asignado a cada cliente
     * @param conExt
     * @param CodEmp
     * @param CodLoc
     * @param CodCli
     * @return 
     */
    
    private boolean getVendedorAsignado(int CodEmp, int CodLoc, int CodCli){
        boolean blnRes=false;
        java.sql.Connection conLoc;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;
        try {
            conLoc=DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());; 
            if(conLoc!=null){
                stmLoc = conLoc.createStatement();
                strSQL="";
                strSQL+=" SELECT a2.co_emp, a2.co_loc, a2.co_cli, a1.tx_nom as tx_nomCli, a3.co_usr, a3.tx_nom as tx_nomVen  \n";
                strSQL+=" FROM tbm_cli as a1  \n";
                strSQL+=" INNER JOIN tbr_cliLoc as a2 ON (a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli) \n";
                strSQL+=" INNER JOIN tbm_usr as a3 ON (a2.co_ven=a3.co_usr) \n";
                strSQL+=" WHERE a2.co_emp="+CodEmp+" and a2.co_loc="+CodLoc+" AND a1.co_cli="+CodCli+" \n";
                System.out.println("getVendedorAsignado: "+strSQL);
                rstLoc = stmLoc.executeQuery(strSQL);
                if(rstLoc.next()){
                    txtVenCod.setText(rstLoc.getString("co_usr"));
                    txtVenNom.setText(rstLoc.getString("tx_nomVen"));
                }
                rstLoc.close();
                rstLoc=null;
                stmLoc.close();
                stmLoc=null;
                conLoc.close();
                conLoc=null;
                blnRes=true;
            }
        }
        catch (SQLException Evt) {
            blnRes=false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
             
        }
        catch (Exception Evt) {
            blnRes=false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return blnRes;
    }
    
    

    private boolean getVolFac() {
        boolean blnRes = false;
        try {
//       System.out.println("ZafVen01.getVolFac");

            for (int i = 0; i < tblDat.getRowCount(); i++) {
                if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {

                    if (!objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_COLOCRELSOL)).equals("")) {
                        if (!objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_COTIPDOCRELSOL)).equals("")) {
                            if (!objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_CODOCRELSOL)).equals("")) {
                                if (!objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_COREGRELSOL)).equals("")) {

                                    blnRes = true;

                                }
                            }
                        }
                    }

                }
            }

        } catch (Exception Evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return blnRes;
    }

    private void verificaIvaCli(String stIvaVen) {
//       System.out.println("ZafVen01.verificaIvaCli");

        if (stIvaVen.equals("S")) {
            for (int i = 0; i < tblDat.getRowCount(); i++) {
                if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                    tblDat.setValueAt("S", i, INT_TBL_IVATXT);
                    tblDat.setValueAt(true, i, INT_TBL_BLNIVA);
                }
            }
        }
    }


    private void butConTarCreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConTarCreActionPerformed
        mostrarVenConTarjetaCredito(0);
    }//GEN-LAST:event_butConTarCreActionPerformed

    private void txtCodigoFormaPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoFormaPagoActionPerformed
        txtCodigoFormaPago.transferFocus();
    }//GEN-LAST:event_txtCodigoFormaPagoActionPerformed

    private void txtNomForPagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomForPagActionPerformed
        txtNomForPag.transferFocus();
    }//GEN-LAST:event_txtNomForPagActionPerformed

    private void txtCodigoFormaPagoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodigoFormaPagoFocusGained
        strCodForPag = txtCodigoFormaPago.getText();
        txtCodigoFormaPago.selectAll();
    }//GEN-LAST:event_txtCodigoFormaPagoFocusGained

    private void txtCodigoFormaPagoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodigoFormaPagoFocusLost
        if (txtCodigoFormaPago.getText().equals("")) {
            txtCodigoFormaPago.setText("");
            txtNomForPag.setText("");
        } else {
            mostrarVenConFormaPago(1);
        }

        CalculoPago();

    }//GEN-LAST:event_txtCodigoFormaPagoFocusLost

    private void txtNomForPagFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomForPagFocusGained
        strDesLarForPag = txtNomForPag.getText();
        txtNomForPag.selectAll();
    }//GEN-LAST:event_txtNomForPagFocusGained

    private void txtNomForPagFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomForPagFocusLost
        if (txtNomForPag.getText().equals("")) {
            txtCodigoFormaPago.setText("");
            txtNomForPag.setText("");
        } else if (txtCodigoFormaPago.getText().equals("")) {
            mostrarVenConFormaPago(3);
        }

        CalculoPago();

    }//GEN-LAST:event_txtNomForPagFocusLost

    private void txtCodTarCreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodTarCreActionPerformed
        txtCodTarCre.transferFocus();
    }//GEN-LAST:event_txtCodTarCreActionPerformed

    private void txtNomTarCreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomTarCreActionPerformed
        txtNomTarCre.transferFocus();
    }//GEN-LAST:event_txtNomTarCreActionPerformed

    private void txtCodTarCreFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodTarCreFocusGained
        strCodTarCre = txtCodTarCre.getText();
        txtCodTarCre.selectAll();
    }//GEN-LAST:event_txtCodTarCreFocusGained

    private void txtCodTarCreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodTarCreFocusLost
        if (txtCodTarCre.getText().equals("")) {
            txtCodTarCre.setText("");
            txtNomTarCre.setText("");
        } else {
            mostrarVenConTarjetaCredito(1);
        }
    }//GEN-LAST:event_txtCodTarCreFocusLost

    private void txtNomTarCreFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomTarCreFocusGained
        strNomTarCre = txtNomTarCre.getText();
        txtNomTarCre.selectAll();
    }//GEN-LAST:event_txtNomTarCreFocusGained

    private void txtNomTarCreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomTarCreFocusLost
        if (txtNomTarCre.getText().equals("")) {
            txtCodTarCre.setText("");
            txtNomTarCre.setText("");
        }
    }//GEN-LAST:event_txtNomTarCreFocusLost

    private void txtNomEmiTarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomEmiTarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomEmiTarActionPerformed

    private void txtNomEmiTarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomEmiTarFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomEmiTarFocusGained

    private void txtNomEmiTarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomEmiTarFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomEmiTarFocusLost

    private void butCopyInmaconsaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCopyInmaconsaActionPerformed
        // TODO add your handling code here:
        //        System.out.println("guardarInmaconsa ");
        butCopyInmaconsa.setEnabled(false);
        String strMsg2 = "¿Está Seguro que desea guardar esta cotización en Inmaconsa?";
        if (JOptionPane.showConfirmDialog(jfrThis, strMsg2, strTit, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == 0) {
            blnBtnInmAct=true;
            copiarInmaconsa();
        }
    }//GEN-LAST:event_butCopyInmaconsaActionPerformed

    
    /**
     * 
     * @return 
     */
      
    private boolean copiarInmaconsa(){
        boolean blnRes=true;
        try{
            abrirCon();
            if (!validaCampos()) {
                CerrarCon();
                return false;
            }
            cargarTipEmp();
            calculaTot();
            actualizarPrecioLista();  
            CerrarCon();
            if(!validaDatosDescuento()){
                return false;
            }
            
            if(guardarInmaconsa()){
                System.out.println("guardarOk");
            }
            
        }
        catch (Exception e) {
            objUti.mostrarMsgErr_F1(jfrThis, e);
            blnRes=false;
        }
        
        return blnRes;
    }
    
    
    /**
         * Revisa si algun item tiene el descuento modificado y pregunta si se desea guardar de esa manera
         * @return 
         */
        
        private boolean validaDatosDescuento(){
            boolean blnRes=true, blnEncuentra=false;
            String strMsg, strAux="";
            try{
                double dblPorDesCli = Glo_dlbMaxDes;
                if (intTipForPagCotizacion == 4){
                    for (int i = 0; i < tblDat.getRowCount(); i++) {
                        if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                            if(Double.parseDouble(tblDat.getValueAt(i, INT_TBL_PORDES).toString())!=dblPorDesTarCre){
                                strAux+=getDatosMostrar(i);
                                blnEncuentra=true;
                            }
 
                        }
                    }
                } 
                else 
                {
                    for (int i = 0; i < tblDat.getRowCount(); i++) {
                        if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                            if(Double.parseDouble(tblDat.getValueAt(i, INT_TBL_PORDES).toString())!=dblPorDesCli){
                                strAux+=getDatosMostrar(i);
                                blnEncuentra=true;
                            }
 
                        }
                    }
                } 
                if(blnEncuentra){
                    blnRes=false;
                    strMsg="<html> La Cotización posee Items con  <FONT COLOR=\"red\">DESCUENTOS MODIFICADOS</FONT>. <BR>" ;// CAMBIA
                    if (intTipForPagCotizacion == 4){
                        strMsg+=" Descuento configurado: " + dblPorDesTarCre; 
                    }
                    else{
                        strMsg+=" Descuento configurado: " + dblPorDesCli; 
                    }
                    strMsg+=" <BR>"; 
                    strMsg+=" <table BORDER=1><tr><td> Línea </td><td> Cód.Alt. </td> <td> Precio </td><td> Desc. </td><td> Total </td> </tr>";
                    strMsg+=""+ strAux + "    ";
                    strMsg+=" </table><BR>";
                    strMsg+="Esta seguro que desea realizar esta operación? <html>";
                    System.out.println(strMsg);
                    String strTit="Mensaje del sistema Zafiro";
                    if (JOptionPane.showConfirmDialog(this, strMsg, strTit, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == 0) {
                        blnRes=true;
                    }
                }
                
            }
            catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
                blnRes=false;
            }
            return blnRes;
        }
        
        
        private String getDatosMostrar(int row){
            String strRes="";
            try{
                strRes+="<tr><td> "+(row+1)+" </td><td>"+tblDat.getValueAt(row, INT_TBL_ITMALT).toString()+"</td><td>"+tblDat.getValueAt(row, INT_TBL_PREUNI).toString()+"";
                strRes+="</td><td>"+tblDat.getValueAt(row, INT_TBL_PORDES).toString()+"</td><td>"+tblDat.getValueAt(row, INT_TBL_TOTAL).toString()+"</td> </tr>";
            }
            catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
            return strRes;
        }
    
    
    
    
    private void butDirCliConGuiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDirCliConGuiActionPerformed
        cargarListadoDireccionGuias();
    }//GEN-LAST:event_butDirCliConGuiActionPerformed

    private void txtCliDirGuiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCliDirGuiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCliDirGuiActionPerformed

    private void txtCliDirGuiCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtCliDirGuiCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCliDirGuiCaretUpdate

    private void butMakeFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butMakeFacturaActionPerformed
        //        System.out.println("ZafVen01.butMakeFactura " + objZafParSis.getCodigoMenu());
        blnSolTraInv=false;
        if (intCodTipDocFacEle == 1) {
            facturar();
        } else if (intCodTipDocFacEle == 228) {
            abrirCon();
            cargarTipEmp();
            calculaTot();
            //actualizarPrecioLista();
            CerrarCon();/*JoseMario 7/Jun/2016*/
           
            if(validacionesAntesFacturar()){
                
                    facturar();
                 
            }
            

        }
    }//GEN-LAST:event_butMakeFacturaActionPerformed

    
    private boolean validacionesAntesFacturar(){
        boolean blnRes=true;
         if(!validarCliente()) {
            blnRes=false;
        }
        if(!validarDocEle()) {
            blnRes=false;
        }
        if(!validarSolicitudTransferencia()){
            blnRes=false;
        }
        if(!cotizacionEstaReservada()){
            blnRes=false;     
        }
        if(!verificaCantidadesReservadasDisponibles(objZafParSis.getCodigoEmpresa(),objZafParSis.getCodigoLocal(),
                                                    Integer.parseInt(txtCot.getText()) )){
            blnRes=false;
        }
        if(!validacionConsumidorFinal200()){
            blnRes=false;
        }
        return blnRes;
    }
    
    private boolean validacionCodigosL(){
        boolean blnRes=false;
        
        String strMsg;
        try{
            int intCodCot = Integer.parseInt(txtCot.getText());
            if(objDatItm.verificarCodigosL(intCodEmp, intCodLoc,intCodCot)){
                if(objDatItm.marcarItemsOcupados(intCodEmp, intCodLoc, intCodCot)){
                    blnRes=true;
                }
            }
            else{
                if(objDatItm.modificaItemTerminalOcupado(intCodEmp, intCodLoc, intCodCot)){
                    if(cargarItemsModificados(intCodEmp, intCodLoc, intCodCot)){
                        blnRes=true;
                    }
                    else{
                        strMsg = "<html> Ocurrio un error no se pudo modificar los Items. <BR>";
                        strMsg += "Si el problema persiste comunicarse con su Administrador de sistema. JM <html>";
                        JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                else{
                    blnRes = false;
                    strMsg = "<html> Ocurrio un error no se pudo modificar los Items. <BR>";
                    strMsg += "Si el problema persiste comunicarse con su Administrador de sistema. JM <html>";
                    JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
        catch(Exception  Evt){ 
            objUti.mostrarMsgErr_F1(this, Evt);
            blnRes=false;
        }
        return blnRes;
    }
    
    
    
    private boolean cargarItemsModificados(int CodEmp, int CodLoc, int CodCot){
        boolean blnRes=true;
        java.sql.Connection conLoc;
        java.sql.ResultSet rstLoc;
        java.sql.Statement stmLoc;
        int i=1;
        try{
            conLoc=DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());; 
            if(conLoc!=null){
                stmLoc = conLoc.createStatement();
                strSQL="";
                strSQL+=" SELECT a2.co_emp, a2.co_loc, a2.co_cot, a2.co_reg, a2.co_itm, a2.tx_codAlt, a2.tx_codAlt2, a2.tx_nomItm  \n";
                strSQL+=" FROM tbm_cabCotVen as a1  \n";
                strSQL+=" INNER JOIN tbm_detCotVen as a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_cot=a2.co_cot)  \n";
                strSQL+=" WHERE a1.co_emp="+CodEmp+" AND a1.co_loc="+CodLoc+" AND a1.co_cot="+CodCot+" AND LENGTH(a2.tx_codALt) = 4 AND a2.tx_codAlt like '%L'   \n";
                strSQL+=" ORDER BY a2.co_emp, a2.co_loc, a2.co_cot, a2.co_reg ";
                rstLoc = stmLoc.executeQuery(strSQL);
                while(rstLoc.next()){
                    i = rstLoc.getInt("co_reg") - 1;
                    if(objTblMod.getValueAt(i, INT_TBL_DESITM).toString().equals(rstLoc.getString("tx_nomItm"))  ){
                        if( !(objTblMod.getValueAt(i, INT_TBL_ITMALT).toString().equals(rstLoc.getString("tx_codAlt"))) ){
//                            System.out.println("CAmbia " + objTblMod.getValueAt(i, INT_TBL_ITMALT).toString() ) ;
//                            System.out.println("PARA SER " + rstLoc.getString("tx_codAlt") ) ;
                            objTblMod.setValueAt( rstLoc.getString("co_itm") , i, INT_TBL_CODITM); 
                            objTblMod.setValueAt( rstLoc.getString("tx_codAlt") , i, INT_TBL_ITMALT); 
                            objTblMod.setValueAt( rstLoc.getString("tx_codAlt2") , i, INT_TBL_ITMALT2);
                        }
                    }
                }
                rstLoc.close();
                rstLoc=null;
                stmLoc.close();
                stmLoc=null;
                conLoc.close();
                conLoc=null;
            }
        }
        catch (SQLException Evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, Evt);
        }
        catch(Exception  Evt){ 
            objUti.mostrarMsgErr_F1(this, Evt);
            blnRes=false;
        }
        return blnRes;
    }
    
    
    
    private boolean validacionesAntesSolicitarReserva(){
        boolean blnRes=true;
         if(!validarCliente()) {
            blnRes=false;
        }
         
        
         
        if(!validarDocEle()) {
            blnRes=false;
        }
        
        if(!validacionConsumidorFinal200()){
            blnRes=false;
        }
        return blnRes;
    }
    
    
    
    private void butCopyCotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCopyCotActionPerformed
        // TODO add your handling code here:
        //        System.out.println("ZafVen01.butCopyCot");

        txtNumCotAnt.setText(txtCot.getText());

        blnEstFecVal = false;
        blnEstEliFilDet = false;
        objTooBar.cierraConnections();
        blnLimpiar = false;
        txtCot.setText("");
        txtFecDoc.setHoy();
        objTooBar.setEstado('n');
        blnLimpiar = true;
        strCodLocSol = null;
        strCodTipDocSol = null;
        strCodDocSol = null;
        strNumCotSol = "";
        /* JM 25/Jul/2017 */
        btnReservas.setEnabled(false);
        /* JM 25/Jul/2017 */

        deshabilitarCamposTarCre();

        borrarSolRel();

        abrirCon();
        cargarTipEmp();
        calculaTot();
        actualizarPrecioLista();
        CerrarCon();
        
        
         
        
    }//GEN-LAST:event_butCopyCotActionPerformed

    private void butDirCliConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDirCliConActionPerformed
        // TODO add your handling code here:

        objVenConDirCli.setTitle("Listado de Direcciones de Clientes ");
        objVenConDirCli.setSentenciaSQL("select co_cli, tx_dir, tx_tel1, tx_tel2, tx_tel3 from tbm_dircli where co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_cli=" + (txtCliCod.getText().equals("") ? "0" : txtCliCod.getText()));
        objVenConDirCli.setCampoBusqueda(1);
        objVenConDirCli.cargarDatos();
        objVenConDirCli.show();
        if (objVenConDirCli.getSelectedButton() == ZafVenCon.INT_BUT_ACE) {
            txtCliDir.setText(objVenConDirCli.getValueAt(2));
            txtcli_telefono.setText(objVenConDirCli.getValueAt(3).trim() + " " + objVenConDirCli.getValueAt(4).trim() + " " + objVenConDirCli.getValueAt(5).trim());
        }

    }//GEN-LAST:event_butDirCliConActionPerformed

    private void butCliConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCliConActionPerformed

        objVenConCli.setTitle("Listado de Clientes");
        String strSql = "";
        if (getVolFac()) {

            strSql = "SELECT co_cli, tx_nom, tx_dir, tx_tel, tx_ide, tx_tipper, nd_maxdes, nd_maruti, tx_desLar, co_ven, vendedor, co_tipper,"
            + "  ne_tipforpag,  nd_pes , ne_diagra , co_forpag , tx_des, st_ivaven , st_peringnomclicotven, ne_diamesmaxemifacven, st_reg, tx_corEle  "
            + " FROM ( "
            + " select a.co_cli, a.tx_nom, a.tx_dir, a.tx_tel, a.tx_ide, a.tx_tipper, a.nd_maxdes, a.nd_maruti , ciu.tx_desLar , a.co_ven, ven.tx_nom as vendedor, ven.st_reg, a.co_tipper "
            + " , b.ne_tipforpag,  b.nd_pes, a.ne_diagra, a.co_forpag , b.tx_des, a.st_ivaven, a.st_peringnomclicotven, a.ne_diamesmaxemifacven, a.tx_corE0le FROM tbr_cliloc AS a1 "
            + " INNER JOIN tbm_cli as a ON (a.co_emp=a1.co_emp and a.co_cli=a1.co_cli)   "
            + " LEFT JOIN tbm_Ciu as ciu on(ciu.co_Ciu=a.co_ciu)  "
            + " LEFT JOIN tbm_usr as ven on (ven.co_usr = a.co_ven)"
            + " left join tbm_cabforpag as b on (b.co_emp=a.co_emp and b.co_forpag=a.co_forpag) "
            + " WHERE a1.co_emp =" + objZafParSis.getCodigoEmpresa() + " and a1.co_loc = " + objZafParSis.getCodigoLocal() + " and a.st_reg IN('A','N')  and a.st_cli='S' "
            + ""
            + "    and case when (select co_grp from tbm_cli where co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_cli=" + intCodCliGrp + ") is null then "
            + "  a.co_cli=" + intCodCliGrp + " "
            + "   else  co_grp in ( select co_grp from tbm_cli where co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_cli=" + intCodCliGrp + " ) end  "
            + " "
            + " order by a.tx_nom  "
            + ") AS a";

        } else {
            strSql = "SELECT co_cli, tx_nom, tx_dir, tx_tel, tx_ide, tx_tipper, nd_maxdes, nd_maruti , tx_desLar , co_ven, vendedor , co_tipper,"
            + "  ne_tipforpag,  nd_pes , ne_diagra , co_forpag , tx_des, st_ivaven , st_peringnomclicotven, ne_diamesmaxemifacven, st_reg, tx_corEle  "
            + " FROM ( "
            + " select a.co_cli, a.tx_nom, a.tx_dir, a.tx_tel, a.tx_ide, a.tx_tipper, a.nd_maxdes, a.nd_maruti , ciu.tx_desLar , a1.co_ven, ven.tx_nom as vendedor , ven.st_reg, a.co_tipper "
            + " , b.ne_tipforpag,  b.nd_pes, a.ne_diagra, a.co_forpag , b.tx_des, a.st_ivaven, a.st_peringnomclicotven, a.ne_diamesmaxemifacven, a.tx_corEle "
            + " FROM tbr_cliloc AS a1 "
            + " INNER JOIN tbm_cli as a ON (a.co_emp=a1.co_emp and a.co_cli=a1.co_cli)   "
            + " LEFT JOIN tbm_Ciu as ciu on(ciu.co_Ciu=a.co_ciu)  "
            + " LEFT JOIN tbm_usr as ven on (ven.co_usr = a1.co_ven)"
            + " left join tbm_cabforpag as b on (b.co_emp=a.co_emp and b.co_forpag=a.co_forpag) "
            + " WHERE a1.co_emp =" + objZafParSis.getCodigoEmpresa() + " and a1.co_loc = " + objZafParSis.getCodigoLocal() + " and a.st_reg IN('A','N')  and a.st_cli='S' "
            + " order by a.tx_nom  "
            + ") AS a";
        }
        System.out.println("CLIENTES: " + strSql);
        objVenConCli.setSentenciaSQL(strSql);
        objVenConCli.setCampoBusqueda(1);
        objVenConCli.show();
        if (objVenConCli.getSelectedButton() == ZafVenCon.INT_BUT_ACE) {
            txtCliCod.setText(objVenConCli.getValueAt(1));
            txtCliNom.setText(objVenConCli.getValueAt(2));
            txtCliDir.setText(objVenConCli.getValueAt(3));

            ///
            //José Marín M 18/Dic/2013 // JM: ahora el vendedor debe elegir donde enviar
            txtCliDirGui.setText(""); // solo para llenar se puede cambiar
            // *********************

            //  strTipPer_glo = objVenConCli.getValueAt(6);
            Glo_dlbMaxDes = Double.parseDouble(objVenConCli.getValueAt(7));

            Glo_dlbMarUti = Double.parseDouble(objVenConCli.getValueAt(8));
            txtcli_telefono.setText(objVenConCli.getValueAt(4));
            txtcli_identificacion.setText(objVenConCli.getValueAt(5));
            txtcli_ciudad.setText(objVenConCli.getValueAt(9));
            //            txtVenCod.setText(objVenConCli.getValueAt(10));
            //            txtVenNom.setText(objVenConCli.getValueAt(11));
            strCodTipPerCli = objVenConCli.getValueAt(12);
            intTipForPagCfgCli = Integer.parseInt(objVenConCli.getValueAt(13));
            
//            dblPesCfgCli = Double.parseDouble(objVenConCli.getValueAt(14));
            if(objVenConCli.getValueAt(14)==null || objVenConCli.getValueAt(14).toString().equals("")){
                dblPesCfgCli = 50000.00;
            }
            else{
                dblPesCfgCli = Double.parseDouble(objVenConCli.getValueAt(14));  // JM SOLUCION xD
            }
            dblDiaGraCli = Double.parseDouble(objVenConCli.getValueAt(15));
            txtCodForPag.setText(objVenConCli.getValueAt(16));
            txtCodigoFormaPago.setText(txtCodForPag.getText());
            txtNomForPag.setText(objVenConCli.getValueAt(17));
            stIvaVen = objVenConCli.getValueAt(18);
            txtEstNomCli.setText(objVenConCli.getValueAt(19));
            intTipForPagCotizacion = intTipForPagCfgCli;
//            dblPesCotizacion = dblPesCfgCli;

            txtNomCliVar.setVisible((objVenConCli.getValueAt(19).equals("S") ? true : false));

            strDiaMaxFacven = objVenConCli.getValueAt(20);
            strStaVen = objVenConCli.getValueAt(21);

//            if (strStaVen.equals("A")) {
//                txtVenCod.setText(objVenConCli.getValueAt(10));
//                txtVenNom.setText(objVenConCli.getValueAt(11));
//            } else {
//                BuscarVendedor("a.co_usr", "" + objZafParSis.getCodigoUsuario(), 0);
//            }
            
            if(!getVendedorAsignado(objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), Integer.parseInt(txtCliCod.getText() ) ) ){
                MensajeInf("Cliente no posee un vendedor asignado, favor comunicarse con sistema, antes de facturar.... ");
            }


            verificaIvaCli(stIvaVen);

            if (intTipForPagCotizacion == 4) {  //SE PAGA CON TARJETA DE CREDITO José Marín
                habilitarCamposTarCre();
                
            } else {
                deshabilitarCamposTarCre();
            }
            //JM 6/Sep/2018: Se modifica que cuando se cambie el cliente se modifique el porcentaje de descuento
            calculaDescuento();
            
            CalculoPago();

            calculaPag();

            //llamarVenAut();

            //objZafTblForPag.ConfiguraDatPagCalculaPag(objZafParSis.getCodigoEmpresa() , dblTotalCot, objVenConCli.getValueAt(16), objVenConCli.getValueAt(17), txtFecDoc.getText(), Integer.parseInt(strCodTipPerCli), stIvaVen  );

        }

    }//GEN-LAST:event_butCliConActionPerformed

    private void txtCliNomVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_txtCliNomVetoableChange
        // Prueba
    }//GEN-LAST:event_txtCliNomVetoableChange

    private void txtCliNomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCliNomActionPerformed
        txtCliNom.transferFocus();
    }//GEN-LAST:event_txtCliNomActionPerformed

    private void txtCliNomFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCliNomFocusLost
        // TODO add your handling code here:
        if (!txtCliNom.getText().equalsIgnoreCase(strDesLarPrv)) {
            if (txtCliNom.getText().equals("")) {
                txtCliCod.setText("");
                txtCliNom.setText("");
                stIvaVen = "S";
                verificaIvaCli(stIvaVen);
            } else {
                BuscarCliente("a.tx_nom", txtCliNom.getText(), 1);
            }
        } else {
            txtCliNom.setText(strDesLarPrv);
        }
    }//GEN-LAST:event_txtCliNomFocusLost

    private void txtCliNomFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCliNomFocusGained
        // TODO add your handling code here:
        strDesLarPrv = txtCliNom.getText();
        txtCliNom.selectAll();
    }//GEN-LAST:event_txtCliNomFocusGained

    private void txtCliDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCliDirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCliDirActionPerformed

    private void txtCliDirCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtCliDirCaretUpdate

    }//GEN-LAST:event_txtCliDirCaretUpdate

    private void txtCliCodFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCliCodFocusLost
        if (!txtCliCod.getText().equalsIgnoreCase(strCodPrv)) {
            if (txtCliCod.getText().equals("")) {
                txtCliCod.setText("");
                txtCliNom.setText("");
                stIvaVen = "S";
                verificaIvaCli(stIvaVen);
            } else {
                BuscarCliente("a.co_cli", txtCliCod.getText(), 0);
            }
        } else {
            txtCliCod.setText(strCodPrv);
        }
        
    }//GEN-LAST:event_txtCliCodFocusLost

    private void txtCliCodFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCliCodFocusGained
        // TODO add your handling code here:
        strCodPrv = txtCliCod.getText();
        txtCliCod.selectAll();
    }//GEN-LAST:event_txtCliCodFocusGained

    private void txtCliCodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCliCodActionPerformed
        txtCliCod.transferFocus();
    }//GEN-LAST:event_txtCliCodActionPerformed

    private void butVenConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butVenConActionPerformed
//        BuscarVendedor("a.co_usr", "", 0);
    }//GEN-LAST:event_butVenConActionPerformed

    private void txtVenNomFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVenNomFocusLost
        // TODO add your handling code here:
        if (!txtVenNom.getText().equalsIgnoreCase(strDesLarCom)) {
            if (txtVenNom.getText().equals("")) {
                txtVenCod.setText("");
                txtVenNom.setText("");
            } else {
//                BuscarVendedor("a.tx_nom", txtVenNom.getText(), 1);
            }
        } else {
            txtVenNom.setText(strDesLarCom);
        }
    }//GEN-LAST:event_txtVenNomFocusLost

    private void txtVenNomFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVenNomFocusGained
        // TODO add your handling code here:
        strDesLarCom = txtVenNom.getText();
        txtVenNom.selectAll();
    }//GEN-LAST:event_txtVenNomFocusGained

    private void txtVenNomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVenNomActionPerformed
        txtVenNom.transferFocus();
    }//GEN-LAST:event_txtVenNomActionPerformed

    private void txtVenCodFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVenCodFocusLost

        if (!txtVenCod.getText().equalsIgnoreCase(strCodCom)) {
            if (txtVenCod.getText().equals("")) {
                txtVenCod.setText("");
                txtVenNom.setText("");
            } else {
//                BuscarVendedor("a.co_usr", txtVenCod.getText(), 0);
            }
        } else {
            txtVenCod.setText(strCodCom);
        }

    }//GEN-LAST:event_txtVenCodFocusLost

    private void txtVenCodFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtVenCodFocusGained
        // TODO add your handling code here:
        strCodCom = txtVenCod.getText();
        txtVenCod.selectAll();
    }//GEN-LAST:event_txtVenCodFocusGained

    private void txtVenCodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVenCodActionPerformed
        txtVenCod.transferFocus();
    }//GEN-LAST:event_txtVenCodActionPerformed

    private void txtCotKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCotKeyPressed
        // TODO add your handling code here:
        if (java.awt.event.KeyEvent.VK_ENTER == evt.getKeyCode()) {
            objTooBar.consultar();
            objTooBar.setEstado('w');
        }
    }//GEN-LAST:event_txtCotKeyPressed

    private void txtCotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCotActionPerformed

    private void butVisOcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butVisOcActionPerformed
        // TODO add your handling code here:
        java.sql.Connection connVis;
        try {
            if (txtCot.getText().equals("")) {
                MensajeInf("NO ES POSIBLE MOSTRAR VISTA PREVIA DE LA ORDEN DE COMPRA\nGUARDE LA COTIZACION E INTENTE NUEVAMENTE. ");
            } else {
                connVis = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                realizaOrdComVisPre(connVis, connVis, 1, 1);
                connVis.close();
                connVis = null;
            }
        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }

    }//GEN-LAST:event_butVisOcActionPerformed

    private void btnSolResActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSolResActionPerformed
        // TODO add your handling code here:
        if(validacionesAntesSolicitarReserva()){
            if (mostrarMsgCon("¿Está seguro que desea solicitar la reservación esta cotización?")==0){
                solicitarReserva();
            }
        }        
    }//GEN-LAST:event_btnSolResActionPerformed

    private void btnReservasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReservasActionPerformed
    /* RESERVAS 19/Abril/2017  */
        txtCliCod.setEnabled(false);txtCliNom.setEnabled(false);butCliCon.setEnabled(false);
        if(txtCliCod.getText().length()>0){
            if(!llamaVentanaReservas()){
                System.out.println("ERROR");
            }
        }else{
            System.out.println("Necesita seleccionar un cliente");
             MensajeInf("Es Necesario seleccionar un cliente. ");
        }
    }//GEN-LAST:event_btnReservasActionPerformed

    private void btnODResActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnODResActionPerformed
        // TODO add your handling code here:
        if(txtCot.getText().length()>0){
            if(!llamarVentanaODReservadas(objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(),Integer.parseInt(txtCot.getText()))){
                
            }
        }
        else{
            MensajeInf("Es Necesario Cargar una Cotizacion. ");
        }
    }//GEN-LAST:event_btnODResActionPerformed

    private boolean cargarListadoDireccionGuias(){
        boolean blnRes=true;
        String strSqlDirGui;
        try{
            strSqlDirGui="";
            strSqlDirGui+=" SELECT a.co_cli, a.tx_dir,'' as tx_tel1,'' as tx_tel2,'' as tx_tel3  \n";
            strSqlDirGui+=" FROM ( \n";
            strSqlDirGui+="     SELECT a1.co_cli, a1.tx_dir \n";
            strSqlDirGui+="     FROM tbm_cli a1\n";
            strSqlDirGui+="     WHERE a1.co_emp=  " + objZafParSis.getCodigoEmpresa() + " and a1.co_cli=" + (txtCliCod.getText().equals("") ? "0" : txtCliCod.getText());
            strSqlDirGui+="     UNION ALL \n";
            strSqlDirGui+="     select a1.co_cli, a1.tx_dir \n";
            strSqlDirGui+="     from tbm_dirCli as a1 ";
            strSqlDirGui+="     WHERE a1.co_emp=  " + objZafParSis.getCodigoEmpresa() + " and a1.co_cli=" + (txtCliCod.getText().equals("") ? "0" : txtCliCod.getText());
            strSqlDirGui+=") as a ";
            strSqlDirGui+=" GROUP BY a.co_cli, a.tx_dir";
//            System.out.println("DIRECCIONES GUIA: " + strSqlDirGui);
            objVenConDirCliGia.setTitle("Listado de Direcciones de Clientes ");
            objVenConDirCliGia.setSentenciaSQL(strSqlDirGui);
            objVenConDirCliGia.setCampoBusqueda(1);
            objVenConDirCliGia.cargarDatos();
            objVenConDirCliGia.show();
            if (objVenConDirCliGia.getSelectedButton() == ZafVenCon.INT_BUT_ACE) {
                txtCliDirGui.setText(objVenConDirCliGia.getValueAt(2));
            }
        }
        catch (Exception e) {
            objUti.mostrarMsgErr_F1(jfrThis, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    
//     
//    public boolean generaFacCom() {
//        boolean blnRes = false;
//        java.sql.Connection conn;
//        try {
//            conn = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
//            if (conn != null) {
//                conn.setAutoCommit(false);
//
//                if (generaFacVen(conn)) {
//                    conn.commit();
//                } else {
//                    conn.rollback();
//                }
//
//                conn.close();
//                conn = null;
//                blnRes = true;
//            }
//        } catch (java.sql.SQLException ex) {
//            blnRes = false;
//            objUti.mostrarMsgErr_F1(jfrThis, ex);
//        } catch (Exception e) {
//            blnRes = false;
//            objUti.mostrarMsgErr_F1(jfrThis, e);
//        }
//        return blnRes;
//    }

    private int getUltNumDoc(java.sql.Connection conn, int intCodTipDocFacEle) {
        int intUltNumDoc = 0;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;
        String strSql = "";
        try {
//      System.out.println("ZafVen01.getUltNumDoc");

            if (conn != null) {
                stmLoc = conn.createStatement();

                strSql = "SELECT CASE WHEN (ne_ultdoc+1) IS NULL THEN 1 ELSE (ne_ultdoc+1) END AS numdoc FROM tbm_cabtipdoc WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " AND co_tipdoc=" + intCodTipDocFacEle;
                rstLoc = stmLoc.executeQuery(strSql);
                if (rstLoc.next()) {
                    intUltNumDoc = rstLoc.getInt("numdoc");
                }

                rstLoc.close();
                rstLoc = null;
                stmLoc.close();
                stmLoc = null;

            }
        } catch (java.sql.SQLException ex) {
            objUti.mostrarMsgErr_F1(jfrThis, ex);
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(jfrThis, e);
        }
        return intUltNumDoc;
    }
  
  
    private void masInformacion(boolean blnMostrar) {

        if (!blnMostrar) {
            for (int i = 0; i < tblDat.getRowCount(); i++) {
                //if(tblDat.getValueAt(i, INT_TBL_CODITM) != null){
                tblDat.setValueAt(false, i, INT_TBL_TRATOT);
            }//}
        }

        if (blnMostrar) {
            MostrarCol(INT_TBL_TRATOT);
        } else {
            ocultaCol(INT_TBL_TRATOT);
        }
    }

    private void MostrarCol(int intCol) {
        tblDat.getColumnModel().getColumn(intCol).setWidth(30);
        tblDat.getColumnModel().getColumn(intCol).setMaxWidth(30);
        tblDat.getColumnModel().getColumn(intCol).setMinWidth(30);
        tblDat.getColumnModel().getColumn(intCol).setPreferredWidth(30);
        tblDat.getColumnModel().getColumn(intCol).setResizable(false);
    }

    private void ocultaCol(int intCol) {
        tblDat.getColumnModel().getColumn(intCol).setWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setMaxWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setMinWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setPreferredWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setResizable(false);
    }
 
    private void cargarForPagCli() {
        try {
 

            conCot = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            String sql = " SELECT b.co_forpag, b.tx_des, b.ne_tipforpag, b.nd_pes FROM tbm_cabForPag as b "
                    + " WHERE b.co_emp=" + objZafParSis.getCodigoEmpresa() + " and b.st_reg='P'";
            java.sql.Statement stmCot = conCot.createStatement();
            java.sql.ResultSet rst = stmCot.executeQuery(sql);
            if (rst.next()) {
                txtCodForPag.setText("" + rst.getString("co_forpag"));
                txtNomForPag.setText("" + rst.getString("tx_des"));

                intTipForPagCotizacion = rst.getInt("ne_tipforpag");
//                dblPesCotizacion = rst.getDouble("nd_pes");
                
                if(rst.getString("nd_pes")==null || rst.getString("nd_pes").equals("")){
                    dblPesCotizacion = 50000.00;
                }
                else{
                    dblPesCotizacion = rst.getDouble("nd_pes");  // JM SOLUCION xD
                }

                txtCodigoFormaPago.setText(txtCodForPag.getText());

                CalculoPago();

            } else {
                txtCodForPag.setText("");
                txtNomForPag.setText("");
                txtCodigoFormaPago.setText(txtCodForPag.getText());
            }

            conCot.close();
            conCot = null;
            stmCot.close();
            stmCot = null;
            rst.close();
            rst = null;
        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
    }

    /*
     * Obtiene el Iva que se debe cobrar en la empresa actual
     */
    public double getIva() {
        double dblIvaActual = 0;
        try {
//            System.out.println("ZafVen01.getIva");

            if (CONN_GLO != null) {
                stmCot = CONN_GLO.createStatement();
                sSQL = "SELECT round(nd_ivaVen,2) as porIva from tbm_emp "
                        + "where co_emp = " + objZafParSis.getCodigoEmpresa();  //<== Verificando que seleccione la empresa actual
                ResultSet rstIva = stmCot.executeQuery(sSQL);
                if (rstIva.next()) {
                    dblIvaActual = rstIva.getDouble("porIva");
                }
                rstIva.close();
                stmCot.close();
                rstIva = null;
                stmCot = null;
            }
        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return dblIvaActual;
    }

    public void noEditable(boolean blnEditable) {
        java.awt.Color colBack = txtCot.getBackground();

        txtCot.setEditable(blnEditable);
        txtCot.setBackground(colBack);

        colBack = txtSub.getBackground();

        //txtNomForPag.setEditable(blnEditable);

        /*  JoseMario 30/Ene/2017 */
        txtBas0.setEditable(blnEditable);
        txtBas0.setBackground(colBack);
        txtSubIva.setEditable(blnEditable);
        txtSubIva.setBackground(colBack);
        txtValPag.setEditable(blnEditable);
        txtValPag.setBackground(colBack);
        /*  JoseMario 30/Ene/2017 */
        
        txtSub.setEditable(blnEditable);
        txtSub.setBackground(colBack);

        txtPesKgr.setEditable(blnEditable);
        txtPesKgr.setBackground(colBack);
        
        txtIva.setEditable(blnEditable);
        txtIva.setBackground(colBack);

        txtComSol.setEditable(blnEditable);
        txtComSol.setBackground(colBack); // JoseMario 6/Jun/2016 
        
        txtTot.setEditable(blnEditable);
        txtTot.setBackground(colBack);

        txtCliDir.setEditable(blnEditable);
        txtCliDir.setBackground(colBack);

        //José Marín 17/Dic/2013
        txtCliDirGui.setEditable(blnEditable);
        txtCliDirGui.setBackground(colBack);
        //José Marín 17/Dic/
        
//        /* JM: Agregado para hacer obligatorio el numero de pedido */
//        tx_numped.setEditable(blnEditable);
//        tx_numped.setBackground(colBack);
        //José Marín M 19/Oct/2015
        txtPesKgr.setEditable(blnEditable);
        txtPesKgr.setBackground(colBack);
        
        /* JM 25/Jul/2017 */
        btnReservas.setEnabled(false);
        /* JM 25/Jul/2017 */

    }

    public void clnTextos() {
        if (blnLimpiar) {
            //Cabecera
            txtCot.setText("");
            txtCliCod.setText("");
            txtCliNom.setText("");
            txtCliDir.setText("");
            
            //José Marín 17/Dic/2013
            txtCliDirGui.setText("");
            //José Marín 19/Oct/2015
            txtPesKgr.setText("");
            
             

            txtFecDoc.setText("");
            txtVenCod.setText("");
            txtVenNom.setText("");
            txtAte.setText("");
            tx_numped.setText("0");
            strCodPrv = "";
            strDesLarPrv = "";
            strCodCom = "";
            strDesLarCom = "";
            stIvaVen = "S";
            txtFecRec.setText("");

            //Detalle
            objTblMod.removeAllRows();

            //objZafTblForPag.limpliarTblPag();

            //Pie de pagina
            txaObs1.setText("");
            txaObs2.setText("");
            txtSub.setText("0");
            txtIva.setText("0");
            txtComSol.setText("0"); /* JoseMario 31/May/2016 */
            txtTot.setText("0");
            txtPesKgr.setText("");  /* José Marín - 20/Oct/2015 */
            txtCodigoFormaPago.setText("");
            /*  JoseMario 30/Ene/2017 */
            txtBas0.setText("0");         
            txtSubIva.setText("0");
            txtValPag.setText("0");
            /*  JoseMario 30/Ene/2017 */
            
        
            lblCotNumDes.setText("Cotizaciones");

            txtNomCliVar.setVisible(false);

            //Detalle  de PAGOS
            objTblModPag.removeAllRows();

            //Tarjeta de Credito.
            deshabilitarCamposTarCre();
        }
    }
    StringBuffer strBufItmTbl;
    boolean blnEstBufTbl = false;

    public void calculaTot() {
//          System.out.println("ZafVen01.calculaTot");

        double dblSub = 0, dblIva = 0, dblDes = 0, dblTmp = 0, dblSub2 = 0, dblCom=0,dblIvaCero=0.00;
        String strIva = "S";
        int intFilSel = 0;

        strBufItmTbl = new StringBuffer();
        blnEstBufTbl = false;

        for (int i = 0; i < tblDat.getRowCount(); i++) {
            if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                intFilSel = i;
                dblSub2 = ((tblDat.getValueAt(i, INT_TBL_TOTAL) == null || tblDat.getValueAt(i, INT_TBL_TOTAL).toString().equals("")) ? 0 : Double.parseDouble(tblDat.getValueAt(i, INT_TBL_TOTAL).toString()));
                dblSub = dblSub + objUti.redondear(dblSub2, intNumDec);
                strIva = ((tblDat.getValueAt(intFilSel, INT_TBL_BLNIVA) == null ? "S" : (tblDat.getValueAt(intFilSel, INT_TBL_BLNIVA).toString().equals("") ? "S" : tblDat.getValueAt(intFilSel, INT_TBL_BLNIVA).toString().equals("true") ? "S" : "N")));
                if (strIva.equals("S")) {
                    dblTmp = ((tblDat.getValueAt(intFilSel, INT_TBL_TOTAL) == null || tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString().equals("")) ? 0 : Double.parseDouble(tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString()));
                   //                    dblIva = dblIva + (((dblTmp * dblPorIva) == 0) ? 0 : (dblTmp * dblPorIva) / 100);
//                    dblCom = dblCom + (((dblTmp * dblPorComSol) == 0) ? 0 : (dblTmp * dblPorComSol) / 100);
                    System.out.println("calculaTot dblTmp + " + dblTmp);
                    dblIva = dblTmp+dblIva;
                    System.out.println("calculaTot dblIva + " + dblIva);
                    dblCom = dblTmp+dblCom;
                } else {
                    dblTmp = ((tblDat.getValueAt(intFilSel, INT_TBL_TOTAL) == null || tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString().equals("")) ? 0 : Double.parseDouble(tblDat.getValueAt(intFilSel, INT_TBL_TOTAL).toString()));
                    dblIva = dblIva + 0;
                    System.out.println("calculaTot dblIva + " + dblIva);
                    dblCom = dblCom + 0;
                    dblIvaCero = dblTmp + dblIvaCero;
                }

                if(blnEstBufTbl) {
                    strBufItmTbl.append(" UNION ALL ");
                }
                strBufItmTbl.append("SELECT " + objZafParSis.getCodigoEmpresa() + " as co_emp, " + tblDat.getValueAt(i, INT_TBL_CODITM).toString() + " as co_itm  "
                        + " ,'" + strIva + "' as iva  ," + tblDat.getValueAt(i, INT_TBL_TOTAL).toString() + " as  total ");
                blnEstBufTbl = true;
            }
        }

        /////////////////////////////////////////////////////////////
        
        dblBaseCero = objUti.redondear(dblIvaCero, objZafParSis.getDecimalesMostrar());
        dblBaseIva = objUti.redondear(dblIva, objZafParSis.getDecimalesMostrar());
        
        dblSubtotalCot= objUti.redondear( (dblBaseCero+dblBaseIva), objZafParSis.getDecimalesMostrar());
        dblIvaCot = objUti.redondear((dblBaseIva*dblPorIva)/100, objZafParSis.getDecimalesMostrar());
        dblComSol = objUti.redondear((dblBaseIva*dblPorComSol)/100, objZafParSis.getDecimalesMostrar());
         /* JM Temporal 23/Mar/2017 */
        if(objZafParSis.getCodigoEmpresa()==2 && objZafParSis.getCodigoLocal()==4){
            double dblTemp = objUti.redondear(dblSubtotalCot*(dblPorComSol/100),2);
            if( dblTemp != dblComSol){
                dblComSol = dblTemp;
            }
        }
        
        if(blnIsComSol && dblPorIva==14.00){
            dblTotalCot = objUti.redondear((dblSubtotalCot + dblIvaCot), objZafParSis.getDecimalesMostrar()) ; 
            dblValorPagar = objUti.redondear(dblTotalCot - dblComSol, objZafParSis.getDecimalesMostrar()) ;
        }else{
            dblTotalCot = objUti.redondear( dblSubtotalCot + dblIvaCot, objZafParSis.getDecimalesMostrar()); 
        }
 
        
        txtBas0.setText(""+dblBaseCero);
        txtSubIva.setText(""+dblBaseIva);
        txtSub.setText(""+dblSubtotalCot);
        txtIva.setText(""+dblIvaCot);       
        txtTot.setText(""+dblTotalCot);
        txtComSol.setText(""+dblComSol );
        if(dblValorPagar>0){
            txtValPag.setText(""+dblValorPagar); 
        }else{
           txtValPag.setText(""+dblTotalCot); 
        }
        
        calcularTotPesDoc(); /* José Marín - 20/Oct/2015 */
        
        /////////////////////////////////////////////////////////////

        blnEstBufTbl = false;
        strBufItmTbl = null;

    }

    public String getUnidad(String int_co_itm) {
        String strDesUni = "";
        try {
//            System.out.println("ZafVen01.getUnidad");

            if (CONN_GLO != null) {
                java.sql.Statement stmUni = CONN_GLO.createStatement();
                String sSQL = "SELECT var.tx_descor from tbm_inv as inv "
                        + " inner join tbm_var as var on (inv.co_uni = var.co_reg) "
                        + " where inv.co_emp = " + objZafParSis.getCodigoEmpresa() + " and "
                        + "   var.co_grp = 5  and inv.co_itm = " + int_co_itm;
                java.sql.ResultSet rstUni = stmUni.executeQuery(sSQL);
                if (rstUni.next()) {
                    strDesUni = (rstUni.getString("tx_descor") == null) ? "" : rstUni.getString("tx_descor");
                }
                rstUni.close();
                stmUni.close();
                rstUni = null;
                stmUni = null;
            }
        } catch (java.sql.SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return strDesUni + "";
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return strDesUni + "";
        }
        return strDesUni;
    }

    public void refrescaDatos() {
        try {
            BigDecimal bgdCanItm;
            BigDecimal bgdPreItm;
            BigDecimal bgdValDesItm;
            BigDecimal bgdPorDesItm;
            BigDecimal bgdTotItm=BigDecimal.ZERO;

            int intNumCot = 0;
            if (CONN_GLO != null) {
                 
                String strAux = ",CASE "
                        + " WHEN ((trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1))  IN ("
                        + " SELECT UPPER(trim(tx_cad))  FROM tbm_reginv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                        + " AND co_tipdoc=" + intCodTipDocFacEle + " AND co_usr=" + objZafParSis.getCodigoUsuario() + " AND st_reg='A' AND st_tipmov='C' "
                        + " ))) THEN 'S' "
                        + ""
                        + " WHEN ((trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1))  IN ("
                        + " SELECT UPPER(trim(tx_cad))  FROM tbm_reginv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                        + " AND co_tipdoc=" + intCodTipDocFacEle + " AND co_usr=" + objZafParSis.getCodigoUsuario() + " AND st_reg='A' AND st_tipmov='I' "
                        + " ))) THEN 'I' "
                        + "ELSE 'N' END  as isterL";

                String strAux2 = " , CASE WHEN ( (trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1)) IN ( "
                        + " SELECT  UPPER(trim(a1.tx_cad))  FROM tbr_bodloc as a "
                        + " inner join tbm_reginvmernuningegrfisbod as a1 ON(a1.co_emp=a.co_Emp and a1.co_bod=a.co_bod) "
                        + " WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and a1.st_reg='A' and   a.st_reg='P' ))) "
                        + " THEN 'S' ELSE 'N' END AS proconf  ";

                sSQL = "SELECT detcot.co_reg, detcot.co_locrelsoldevven,detcot.co_tipdocrelsoldevven,detcot.co_DOCrelsoldevven,detcot.co_regrelsoldevven, "
                        + " a2.co_locrel as colococ, a2.co_tipdocrel as cotipdococ, a2.co_docrel as codococ, a2.co_regrel as coregoc,"
                        + " detcot.tx_nomitm, detcot.co_bod ,detcot.nd_can ,detcot.nd_preuni ,detcot.nd_pordes ,detcot.st_ivaven "
                        + ",detcot.nd_can ,detcot.nd_preuni ,detcot.nd_pordes ,detcot.co_itm ,detcot.nd_precom ,detcot.co_prv ,detcot.tx_codalt2 "
                        + ",detcot.tx_codalt , detcot.nd_pordesprecom, detcot.st_traauttot,   var.tx_descor , inv.st_ser , inv.st_permodnomitmven, cli.tx_nom, cli.nd_maxdescom, inv.nd_maruti "
                        + " ,detcot.co_locrelsolsaltemmer, detcot.co_tipdocrelsolsaltemmer, detcot.co_docrelsolsaltemmer, detcot.co_regrelsolsaltemmer "
                        + " ,detcot.co_locrelsoldevven, detcot.co_tipdocrelsoldevven, detcot.co_docrelsoldevven, detcot.nd_preunivenlis, "
                        + " inv.nd_prevta1, detcot.nd_pordesvenmax,  detcot.co_bodcom, bod.tx_nom as nombodprv, var.tx_tipunimed,   "
                        + " detcot.co_regrelsoldevven, inv.st_blqprevta, inv.tx_nomitm as nomitmori, inv.co_ctaegr,Round(detCot.nd_can*inv.nd_pesItmKgr,2) as nd_pesTot, inv.nd_pesItmKgr, CASE WHEN inv.tx_codAlt2 IS NULL THEN '' ELSE inv.tx_codAlt2 END as tx_codLet ";
                sSQL += strAux;
                sSQL += strAux2;
                sSQL += " FROM tbm_detcotven as detcot "
                        + " LEFT  JOIN tbm_detsoldevven AS a1 on (a1.co_emp=detcot.co_emp and a1.co_loc=detcot.co_locrelsoldevven and a1.co_tipdoc=detcot.co_tipdocrelsoldevven "
                        + " and a1.co_doc=detcot.co_docrelsoldevven and a1.co_reg=detcot.co_regrelsoldevven ) "
                        + " left join tbr_detmovinv as a2 ON(a2.co_emp=a1.co_emp and a2.co_loc=a1.co_locrel and a2.co_tipdoc=a1.co_tipdocrel and a2.co_doc=a1.co_docrel "
                        + " and a2.co_reg=a1.co_regrel and a2.co_tipdocrel=2 ) "
                        + " LEFT outer join tbm_inv as inv on (detcot.co_emp = inv.co_emp and detcot.co_itm = inv.co_itm) "
                        + " LEFT outer join tbm_var as var on (inv.co_uni = var.co_reg)"
                        + " LEFT JOIN tbm_cli as cli on(cli.co_emp=detcot.co_emp and cli.co_cli=detcot.co_prv)"
                        + " LEFT JOIN tbm_bod as bod on(bod.co_emp=detcot.co_emp and bod.co_bod=detcot.co_bodcom)"
                        + " WHERE detcot.co_emp=" + objUti.getIntValueAt(arlDatCotVen, intIndiceCotVen, INT_CON_COT_VEN_COD_EMP) + " and detcot.co_loc=" + objUti.getIntValueAt(arlDatCotVen, intIndiceCotVen, INT_CON_COT_VEN_COD_LOC) + " "
                        + " and detcot.co_cot=" + objUti.getIntValueAt(arlDatCotVen, intIndiceCotVen, INT_CON_COT_VEN_COD_COT) + " order by detcot.co_reg";

                System.out.println("ZafVen01.refrescaDatos!!!!!: " + sSQL);

                java.sql.Statement stmCab = CONN_GLO.createStatement();
                java.sql.ResultSet rst = stmCab.executeQuery(sSQL);
                double dblCan = 0, dblPre = 0, dblPorDes = 0, dblValDes = 0, dblTotal = 0;

                java.sql.Statement stmAux;
                java.sql.ResultSet rstAux;
                stmAux = CONN_GLO.createStatement();
                String strUnidad = "", strCodAlt = "", strSer = "", strTer = "", strMarUti = "";
                Vector vecData = new Vector();
                int inttratot = 0;

                for (int i = 0; rst.next(); i++) {
                    java.util.Vector vecReg = new java.util.Vector();

                    strCodAlt = (rst.getString("tx_codalt") == null ? "" : rst.getString("tx_codalt"));
                    strUnidad = (rst.getString("tx_descor") == null ? "" : rst.getString("tx_descor"));
                    strSer = (rst.getString("st_ser") == null ? "" : rst.getString("st_ser"));

                    if (!(rst.getString("cotipdococ") == null)) {
                        strTer = "N";
                    } else {
                        strTer = (rst.getString("isterl") == null ? "" : rst.getString("isterl"));
                    }

                    strMarUti = (rst.getString("nd_maruti") == null ? "" : rst.getString("nd_maruti"));

                    if (inttratot == 0) {
                        if (rst.getString("st_traauttot").equals("S")) {
                            //  chkSolTraTot.setSelected(true);
                            masInformacion(true);
                            inttratot = 1;
                        }
                    }

                    vecReg.add(INT_TBL_LINEA, "");
                    vecReg.add(INT_TBL_ITMALT, strCodAlt);
//                    vecReg.add(INT_TBL_ITMALTCOD3LET,rst.getString("tx_codLet"));
                    vecReg.add(INT_TBL_BUTITM, "");
                    vecReg.add(INT_TBL_BUTSTK, "");
                    vecReg.add(INT_TBL_BUTSOL, "");
                    vecReg.add(INT_TBL_DESITM, rst.getString("tx_nomitm"));
                    vecReg.add(INT_TBL_UNIDAD, strUnidad);
                    vecReg.add(INT_TBL_CODBOD, new Integer(rst.getInt("co_bod")));
                    vecReg.add(INT_TBL_BUTBOD, "");
                    vecReg.add(INT_TBL_TRATOT, (rst.getString("st_traauttot").equals("S")) ? true : false);
                    vecReg.add(INT_TBL_CANMOV, new Double(rst.getDouble("nd_can")));
                    vecReg.add(INT_TBL_PREUNI, new Double(rst.getDouble("nd_preuni")));
                    vecReg.add(INT_TBL_PORDES, new Double(rst.getDouble("nd_pordes")));
                    String strIva = rst.getString("st_ivaven");
                    Boolean blnIva;
                    if (stIvaVen.equals("N")) {
                        blnIva = false;
                    } else {
                        blnIva = (strIva.equals("S")) ? true : false;
                    }

                    vecReg.add(INT_TBL_BLNIVA, blnIva);
                    dblCan = rst.getDouble("nd_can");
                    dblPre = rst.getDouble("nd_preuni");
                    dblPorDes = rst.getDouble("nd_pordes");
 
                    
                     /* JM : Ahora con BigDecimal 22/Marzo/2017 */
               

                    bgdCanItm=BigDecimal.valueOf(dblCan) ;
                    bgdPreItm=BigDecimal.valueOf(dblPre) ;
                    bgdPorDesItm=BigDecimal.valueOf(dblPorDes) ;

                    //DESCUENTO
                    bgdValDesItm = bgdPorDesItm.multiply((bgdCanItm.multiply(bgdPreItm))); 
                    bgdValDesItm = bgdValDesItm.divide(new BigDecimal("100"),objZafParSis.getDecimalesBaseDatos(),BigDecimal.ROUND_HALF_UP);
                    ///TOTAL
                    bgdTotItm=objUti.redondearBigDecimal((bgdCanItm.multiply(bgdPreItm)).subtract(bgdValDesItm), objZafParSis.getDecimalesMostrar());    
                    dblTotal = bgdTotItm.doubleValue();

                    vecReg.add(INT_TBL_TOTAL, new Double(dblTotal));
                    vecReg.add(INT_TBL_PESTOT, rst.getString("nd_pesTot"));
                    vecReg.add(INT_TBL_CODITM, rst.getString("co_itm"));
                    vecReg.add(INT_TBL_ESTADO, "E");
                    vecReg.add(INT_TBL_IVATXT, strIva);
                    vecReg.add(INT_TBL_PRE_COS, new Double(rst.getDouble("nd_precom")));            //Columna que contiene  precio de compra
                    vecReg.add(INT_TBL_DESPRECOM, new Double(rst.getDouble("nd_pordesprecom")));
                    vecReg.add(INT_TBL_COD_PRO, rst.getString("co_prv"));            //Columna que contiene el codigo del proveedor
                    strCodAlt = (rst.getString("tx_nom") == null ? "" : rst.getString("tx_nom"));
                    vecReg.add(INT_TBL_NOM_PRO, strCodAlt);
                    vecReg.add(INT_TBL_BUT_PRO, "");
                    vecReg.add(INT_TBL_BLNPRE, "");

                    vecReg.add(INT_TBL_ITMALT2, rst.getString("tx_codLet"));
                    vecReg.add(INT_TBL_ITMSER, strSer);
                    vecReg.add(INT_TBL_ITMTER, strTer);

                    vecReg.add(INT_TBL_CODBODPRV, rst.getString("co_bodcom"));
                    vecReg.add(INT_TBL_NOMBODPRV, rst.getString("nombodprv"));
                    vecReg.add(INT_TBL_BUTBODPRV, "");

                    vecReg.add(INT_TBL_MARUTI, strMarUti);

                    if (rst.getString("co_bodcom") != null) {

                        if (rst.getInt("co_bodcom") == rst.getInt("co_bod")) {
                            vecReg.add(INT_TBL_IEBODFIS, rst.getString("proconf"));
                        } else {
                            vecReg.add(INT_TBL_IEBODFIS, "N");
                        }

                    } else {
                        vecReg.add(INT_TBL_IEBODFIS, rst.getString("proconf"));
                    }

                    vecReg.add(INT_TBL_MODNOMITM, rst.getString("st_permodnomitmven"));

                    vecReg.add(INT_TBL_COLOCREL, rst.getString("co_locrelsolsaltemmer"));
                    vecReg.add(INT_TBL_COTIPDOCREL, rst.getString("co_tipdocrelsolsaltemmer"));
                    vecReg.add(INT_TBL_CODOCREL, rst.getString("co_docrelsolsaltemmer"));
                    vecReg.add(INT_TBL_COREGREL, rst.getString("co_regrelsolsaltemmer"));

                    vecReg.add(INT_TBL_COLOCRELSOL, rst.getString("co_locrelsoldevven"));
                    vecReg.add(INT_TBL_COTIPDOCRELSOL, rst.getString("co_tipdocrelsoldevven"));
                    vecReg.add(INT_TBL_CODOCRELSOL, rst.getString("co_docrelsoldevven"));
                    vecReg.add(INT_TBL_COREGRELSOL, rst.getString("co_regrelsoldevven"));
                    vecReg.add(INT_TBL_COLOCRELOC, rst.getString("colococ"));
                    vecReg.add(INT_TBL_COTIPDOCRELOC, rst.getString("cotipdococ"));
                    vecReg.add(INT_TBL_CODOCRELOC, rst.getString("codococ"));
                    vecReg.add(INT_TBL_COREGRELOC, rst.getString("coregoc"));
                    vecReg.add(INT_TBL_PRELISITM, rst.getString("nd_preunivenlis"));

                    vecReg.add(INT_TBL_PRELISITM2, rst.getString("nd_prevta1"));
                    vecReg.add(INT_TBL_CANORI, new Double(rst.getDouble("nd_can")));
                    vecReg.add(INT_TBL_PREORI, new Double(rst.getDouble("nd_preuni")));
                    vecReg.add(INT_TBL_DESORI, new Double(rst.getDouble("nd_pordes")));
                    vecReg.add(INT_TBL_DESVENMAX, rst.getString("nd_pordesvenmax"));
                    vecReg.add(INT_TBL_NUMFILCOMPVEN, null);
                    vecReg.add(INT_TBL_MAXDESCOM, rst.getString("nd_maxdescom"));
                    vecReg.add(INT_TBL_DATBODCOM, null);
                    vecReg.add(INT_TBL_CODREGCOT, rst.getString("co_reg"));

                    vecReg.add(INT_TBL_CANVENRES, new Double(rst.getDouble("nd_can")));
                    vecReg.add(INT_TBL_PREVTARES, new Double(rst.getDouble("nd_preuni")));
                    vecReg.add(INT_TBL_PORDESRES, new Double(rst.getDouble("nd_pordes")));
                    vecReg.add(INT_TBL_CODITMRES, rst.getString("co_itm"));
                    vecReg.add(INT_TBL_TIPUNIMED, rst.getString("tx_tipunimed"));
                    vecReg.add(INT_TBL_BLOPREVTA, rst.getString("st_blqprevta"));
                    vecReg.add(INT_TBL_DESITMORI, rst.getString("nomitmori"));

                    vecReg.add(INT_TBL_CLIRETBOD, null);
                    vecReg.add(INT_TBL_CANCLIRETBOD, null);

                    vecReg.add(INT_TBL_CODCTAEGR, rst.getString("co_ctaegr"));
                    vecReg.add(INT_TBL_PESITM, rst.getString("nd_pesItmKgr"));
                    
                    vecReg.add(INT_TBL_ESTRES, null);

                    vecReg.add(INT_TBL_COD_EMP_COT_RES, null);
                    vecReg.add(INT_TBL_COD_LOC_COT_RES, null);
                    vecReg.add(INT_TBL_COD_COT_RES, null);
                    vecReg.add(INT_TBL_COD_COT_REG_RES, null);
                    vecReg.add(INT_TBL_CAN_COT_RES, null);
                    
                    vecData.add(vecReg);
                }
                objTblMod.setData(vecData);
                tblDat.setModel(objTblMod);
                rst.close();
                calculaTot();
                lblCotNumDes.setText("Cotización No. " + txtCot.getText() + " (" + txtCliNom.getText() + ") ");
                lblIva.setText("IVA " + dblPorIva + "%");

                /**
                 * CARGANDO DATOS DEL TAB FORMA DE PAGO.
                 */
                //String strCo_ForPag = (rstCab.getString("co_forPag") == null) ? "" : rstCab.getString("co_forPag");
                String strCo_ForPag = String.valueOf(objUti.getIntValueAt(arlDatCotVen, intIndiceCotVen, INT_CON_COT_VEN_COD_FOR_PAG));

                //************cargarDetPag(CONN_GLO, vecEmp.elementAt(empresa.getSelectedIndex()).toString(), vecLoc.elementAt(local.getSelectedIndex()).toString(), rstCab.getString("co_cot")  );

                txtCodForPag.setText("" + strCo_ForPag);
                txtCodForPag2.setText("" + strCo_ForPag);
                txtNomForPag.setText("" + objUti.getStringValueAt(arlDatCotVen, intIndiceCotVen, INT_CON_COT_VEN_FOR_PAG_DES));

                txtCodigoFormaPago.setText(txtCodForPag.getText());

                CalculoPago2();

                calculaPag();

                //objZafTblForPag.ConfiguraDatPagCalculaPag(objZafParSis.getCodigoEmpresa() , dblTotalCot, strCo_ForPag, rstCab.getString("tx_des"), txtFecDoc.getText(), Integer.parseInt(strCodTipPerCli), stIvaVen  );

                /**
                 * VERIFICANDO SI SE ENCUENTRA EN ESTADO ANULADO.
                 */
                String strStatus =  objUti.getStringValueAt(arlDatCotVen, intIndiceCotVen, INT_CON_COT_VEN_ST_REG);
                if (strStatus.equals("I")) {
                    lblCotNumDes.setText(lblCotNumDes.getText() + "#ANULADO#");
                    objUti.desactivarCom(jfrThis);
                } else {
                    if (objTooBar.getEstado() == 'm') {
                        objUti.activarCom(jfrThis);
                        noEditable(false);
                    }
                }
                stmAux.close();
                stmCab.close();

            }
            objTblMod.setDataModelChanged(false);
            blnHayCam = false;

        } catch (SQLException Evt) { //fin Try
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }

    }

    private boolean cargarDetPag(java.sql.Connection conn, String strCodEmp, String strCodLoc, String strCodCot) {
        boolean blnRes = false;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;
        String strSql = "";
        try {

            stmLoc = conn.createStatement();
            Vector vecData = new Vector();
            strSql = "SELECT ne_diacre, fe_ven, nd_porret, mo_pag, ne_diagra , co_tipret  FROM tbm_pagCotven "
                    + " WHERE co_emp=" + strCodEmp + " AND co_loc=" + strCodLoc + " AND co_cot=" + strCodCot + " ORDER BY co_reg";
//            System.out.println("ZafVen01.cargarDetPag " + strSql);
            rstLoc = stmLoc.executeQuery(strSql);

            while (rstLoc.next()) {
                java.util.Vector vecReg = new java.util.Vector();
                vecReg.add(INT_TBL_PAGLIN, "");
                vecReg.add(INT_TBL_PAGCRE, rstLoc.getString("ne_diacre"));
                vecReg.add(INT_TBL_PAGFEC, rstLoc.getString("fe_ven"));
                vecReg.add(INT_TBL_PAGRET, objUti.redondear(rstLoc.getString("nd_porret"), 2));
                vecReg.add(INT_TBL_PAGMON, objUti.redondear(rstLoc.getString("mo_pag"), 2));
                vecReg.add(INT_TBL_PAGGRA, rstLoc.getString("ne_diagra"));
                vecReg.add(INT_TBL_PAGCOD, rstLoc.getString("co_tipret"));
                vecReg.add(INT_TBL_PAGSOP, "");
                vecReg.add(INT_TBL_COMSOL, "");
                vecData.add(vecReg);
            }
            objTblModPag.setData(vecData);
            tblPag.setModel(objTblModPag);
            vecData = null;
            rstLoc.close();
            rstLoc = null;
            stmLoc.close();
            stmLoc = null;
            blnRes = true;
        } catch (SQLException Evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(jfrThis, evt);
        }
        return blnRes;
    }

    public void refrescaDatosLoc() {
        try {
 
            BigDecimal bgdCanItm;
            BigDecimal bgdPreItm;
            BigDecimal bgdValDesItm;
            BigDecimal bgdPorDesItm;
            BigDecimal bgdTotItm=BigDecimal.ZERO;
            int intNumCot = 0;
            if (CONN_GLO != null) {

                //FATURACION ELECTRONICA - José Marín M 3/Oct/2014
                String strAux = ",CASE "
                        + " WHEN ((trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1))  IN ("
                        + " SELECT UPPER(trim(tx_cad))  FROM tbm_reginv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                        + " AND co_tipdoc=" + intCodTipDocFacEle + " AND co_usr=" + objZafParSis.getCodigoUsuario() + " AND st_reg='A' AND st_tipmov='C' "
                        + " ))) THEN 'S' "
                        + ""
                        + " WHEN ((trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1))  IN ("
                        + " SELECT UPPER(trim(tx_cad))  FROM tbm_reginv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                        + " AND co_tipdoc=" + intCodTipDocFacEle + " AND co_usr=" + objZafParSis.getCodigoUsuario() + " AND st_reg='A' AND st_tipmov='I' "
                        + " ))) THEN 'I' "
                        + " ELSE 'N' END  as isterL";


                sSQL = "SELECT detcot.tx_nomitm, detcot.co_bod ,detcot.nd_can ,detcot.nd_preuni ,detcot.nd_pordes ,detcot.st_ivaven "
                        + ",detcot.nd_can ,detcot.nd_preuni ,detcot.nd_pordes ,detcot.co_itm ,detcot.nd_precom ,detcot.co_prv ,detcot.tx_codalt2 "
                        + ",detcot.tx_codalt , detcot.nd_pordesprecom, detcot.st_traauttot,  var.tx_descor , inv.st_ser , cli.tx_nom, inv.st_blqprevta, inv.tx_nomitm as nomitmori ";

                sSQL += strAux;
                sSQL += " ,ROUND(detCot.nd_can*inv.nd_pesItmKgr,2) as nd_pesTot, inv.nd_pesItmKgr, CASE WHEN inv.tx_codAlt2 IS NULL THEN '' ELSE inv.tx_codAlt2 END as tx_codLet  " ;
                sSQL += " FROM tbm_detcotven as detcot "
                        + " LEFT outer join tbm_inv as inv on (detcot.co_emp = inv.co_emp and detcot.co_itm = inv.co_itm) "
                        + " LEFT outer join tbm_var as var on (inv.co_uni = var.co_reg)"
                        + " LEFT JOIN tbm_cli as cli on(cli.co_emp=detcot.co_emp and cli.co_cli=detcot.co_prv)"
                        + " WHERE detcot.co_emp=" + objZafParSis.getCodigoEmpresa() + " and detcot.co_loc=1 "
                        + " and detcot.co_cot=" + rstCab.getInt("co_cot") + " order by detcot.co_reg";


                java.sql.Statement stmCab = CONN_GLO.createStatement();
                java.sql.ResultSet rst = stmCab.executeQuery(sSQL);
                double dblCan = 0, dblPre = 0, dblPorDes = 0, dblValDes = 0, dblTotal = 0;

                java.sql.Statement stmAux;
                java.sql.ResultSet rstAux;
                stmAux = CONN_GLO.createStatement();
                String strUnidad = "", strCodAlt = "", strSer = "", strTer = "";
                Vector vecData = new Vector();
                int inttratot = 0;
                for (int i = 0; rst.next(); i++) {
                    Vector vecReg = new Vector();

                    strCodAlt = (rst.getString("tx_codalt") == null ? "" : rst.getString("tx_codalt"));
                    strUnidad = (rst.getString("tx_descor") == null ? "" : rst.getString("tx_descor"));
                    strSer = (rst.getString("st_ser") == null ? "" : rst.getString("st_ser"));
                    strTer = (rst.getString("isterl") == null ? "" : rst.getString("isterl"));


                    if (inttratot == 0) {
                        if (rst.getString("st_traauttot").equals("S")) {
                            //  chkSolTraTot.setSelected(true);
                            masInformacion(true);
                            inttratot = 1;
                        }
                    }

                    vecReg.add(INT_TBL_LINEA, "");
                    vecReg.add(INT_TBL_ITMALT, strCodAlt);
                    vecReg.add(INT_TBL_BUTITM, "");
                    vecReg.add(INT_TBL_BUTSTK, "");
                    vecReg.add(INT_TBL_BUTSOL, "");
                    vecReg.add(INT_TBL_DESITM, rst.getString("tx_nomitm"));
                    vecReg.add(INT_TBL_UNIDAD, strUnidad);
                    vecReg.add(INT_TBL_CODBOD, new Integer(rst.getInt("co_bod")));
                    vecReg.add(INT_TBL_BUTBOD, "");
                    vecReg.add(INT_TBL_TRATOT, (rst.getString("st_traauttot").equals("S") ? true : false));
                    vecReg.add(INT_TBL_CANMOV, new Double(rst.getDouble("nd_can")));
                    vecReg.add(INT_TBL_PREUNI, new Double(rst.getDouble("nd_preuni")));
                    vecReg.add(INT_TBL_PORDES, new Double(rst.getDouble("nd_pordes")));
                    String strIva = rst.getString("st_ivaven");
                    Boolean blnIva;
                    if (stIvaVen.equals("N")) {
                        blnIva = false;
                    } else {
                        blnIva = strIva.equals("S") ? true : false;
                    }

                    vecReg.add(INT_TBL_BLNIVA, blnIva);
                    dblCan = rst.getDouble("nd_can");
                    dblPre = rst.getDouble("nd_preuni");
                    dblPorDes = rst.getDouble("nd_pordes");

//                    dblValDes = ((dblCan * dblPre) == 0) ? 0 : ((dblCan * dblPre) * (dblPorDes / 100));
//                    dblTotal = (dblCan * dblPre) - dblValDes;
//                    dblTotal = objUti.redondear(dblTotal, 3);
//                    dblTotal = objUti.redondear(dblTotal, 2);
                     /* JM : Ahora con BigDecimal 22/Marzo/2017 */
               

                    bgdCanItm=BigDecimal.valueOf(dblCan) ;
                    bgdPreItm=BigDecimal.valueOf(dblPre) ;
                    bgdPorDesItm=BigDecimal.valueOf(dblPorDes) ;

                    //DESCUENTO
                    bgdValDesItm = bgdPorDesItm.multiply((bgdCanItm.multiply(bgdPreItm))); 
                    bgdValDesItm = bgdValDesItm.divide(new BigDecimal("100"),objZafParSis.getDecimalesBaseDatos(),BigDecimal.ROUND_HALF_UP);
                    ///TOTAL
                    bgdTotItm=objUti.redondearBigDecimal((bgdCanItm.multiply(bgdPreItm)).subtract(bgdValDesItm), objZafParSis.getDecimalesMostrar());    
                    dblTotal = bgdTotItm.doubleValue();

                    vecReg.add(INT_TBL_TOTAL, new Double(dblTotal));
                    vecReg.add(INT_TBL_PESTOT, rst.getString("nd_pesTot"));
                    
                    vecReg.add(INT_TBL_CODITM, rst.getString("co_itm"));
                    vecReg.add(INT_TBL_ESTADO, "E");
                    vecReg.add(INT_TBL_IVATXT, strIva);
                    vecReg.add(INT_TBL_PRE_COS, new Double(rst.getDouble("nd_precom")));            //Columna que contiene  precio de compra
                    vecReg.add(INT_TBL_DESPRECOM, new Double(rst.getDouble("nd_pordesprecom")));
                    vecReg.add(INT_TBL_COD_PRO, rst.getString("co_prv"));            //Columna que contiene el codigo del proveedor
                    strCodAlt = (rst.getString("tx_nom") == null ? "" : rst.getString("tx_nom"));
                    vecReg.add(INT_TBL_NOM_PRO, strCodAlt);
                    vecReg.add(INT_TBL_BUT_PRO, "");
                    vecReg.add(INT_TBL_BLNPRE, "");

                    vecReg.add(INT_TBL_ITMALT2, rst.getString("tx_codLet"));
                    vecReg.add(INT_TBL_ITMSER, strSer);

                    vecReg.add(INT_TBL_ITMTER, strTer);

                    vecReg.add(INT_TBL_BLOPREVTA, rst.getString("st_blqprevta"));
                    vecReg.add(INT_TBL_DESITMORI, rst.getString("nomitmori"));
                    vecReg.add(INT_TBL_PESITM, rst.getString("nd_pesItmKgr"));
                    vecReg.add(INT_TBL_ESTRES,null);
                    
                    vecReg.add(INT_TBL_COD_EMP_COT_RES, null);
                    vecReg.add(INT_TBL_COD_LOC_COT_RES, null);
                    vecReg.add(INT_TBL_COD_COT_RES, null);
                    vecReg.add(INT_TBL_COD_COT_REG_RES, null);
                    vecReg.add(INT_TBL_CAN_COT_RES, null);

                    vecData.add(vecReg);
                }
                objTblMod.setData(vecData);
                tblDat.setModel(objTblMod);
                rst.close();
                calculaPag();
                lblCotNumDes.setText("Cotización No. " + txtCot.getText() + " (" + txtCliNom.getText() + ") ");
                lblIva.setText("IVA " + dblPorIva + "%");


                /*
                 * CARGANDO DATOS DEL TAB FORMA DE PAGO
                 */

                String strCo_ForPag = (rstCab.getString("co_forPag") == null) ? "" : rstCab.getString("co_forPag");

                cargarDetPag(CONN_GLO, String.valueOf(objZafParSis.getCodigoEmpresa()), "1", rstCab.getString("co_cot"));
                /*        
                 sSQL  = "Select ne_diacre, fe_ven, nd_porret, mo_pag, ne_diagra , co_tipret  from tbm_pagCotven where " +
                 " co_emp = " + objZafParSis.getCodigoEmpresa() + " and " +
                 " co_loc = 1  and " +
                 " co_cot = "+rstCab.getInt("co_cot")+" order by co_reg";
                
                 rst = stmAux.executeQuery(sSQL);
                 int i=0;
                 javax.swing.table.DefaultTableModel modTbl = ((javax.swing.table.DefaultTableModel)tblPag.getModel());
                 modTbl.setRowCount(0);
                
                 while(rst.next()){
                    
                 ((javax.swing.table.DefaultTableModel)tblPag.getModel()).addRow(new java.util.Vector());
                    
                 tblPag.setValueAt(new Integer(rst.getInt(1)) , i, 1);
                 tblPag.setValueAt( rst.getString(2), i, 2);
                 tblPag.setValueAt( rst.getString(3), i, 3);
                 tblPag.setValueAt( new Double(rst.getString(4)) , i, 4);
                 tblPag.setValueAt(new Integer(rst.getInt(5)),  i, 5);
                 tblPag.setValueAt(new Integer(rst.getInt("co_tipret")),  i, 6);
                 i++;
                 }
                
                 */

                txtCodForPag.setText("" + strCo_ForPag);
                txtCodForPag2.setText("" + strCo_ForPag);

                txtCodigoFormaPago.setText(txtCodForPag.getText());

                txtNomForPag.setText("" + rstCab.getString("tx_des"));

                CalculoPago2();



                /*
                 * VERIFICANDO SI SE ENCUENTRA EN ESTADO ANULADO
                 */
                String strStatus = rstCab.getString("st_reg");
                if (strStatus.equals("I")) {
                    lblCotNumDes.setText(lblCotNumDes.getText() + "#ANULADO#");
                    objUti.desactivarCom(jfrThis);
                } else {
                    if (objTooBar.getEstado() == 'm') {
                        objUti.activarCom(jfrThis);
                        noEditable(false);
                    }
                }
                stmAux.close();
                stmCab.close();

            }
            objTblMod.setDataModelChanged(false);
            blnHayCam = false;

        }//fin Try
        catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);

        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }

    }

    public void refrescaDatoshis(Integer CodEmp, Integer CodLoc) {
        try {
            BigDecimal bgdCanItm;
            BigDecimal bgdPreItm;
            BigDecimal bgdValDesItm;
            BigDecimal bgdPorDesItm;
            BigDecimal bgdTotItm=BigDecimal.ZERO;

            int intNumCot = 0;
            if (CONN_GLO != null) {
                //FATURACION ELECTRONICA - José Marín M 3/Oct/2014
                String strAux = ",CASE WHEN ("
                        + " (trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1))  IN ("
                        + " SELECT UPPER(trim(tx_cad))  FROM tbm_reginv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                        + " AND co_tipdoc=" + intCodTipDocFacEle + " AND co_usr=" + objZafParSis.getCodigoUsuario() + " AND st_reg='A' "
                        + " ))) THEN 'S' ELSE 'N' END  as isterL";

                String strAux2 = " , CASE WHEN ( (trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1)) IN ( "
                        + " SELECT  UPPER(trim(a1.tx_cad))  FROM tbr_bodloc as a "
                        + " inner join tbm_reginvmernuningegrfisbod as a1 ON(a1.co_emp=a.co_Emp and a1.co_bod=a.co_bod) "
                        + " WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and a1.st_reg='A' and  a.st_reg='P' ))) "
                        + " THEN 'S' ELSE 'N' END AS proconf  ";


                sSQL = "SELECT var.tx_tipunimed, detcot.tx_nomitm, detcot.co_bod ,detcot.nd_can ,detcot.nd_preuni ,detcot.nd_pordes ,detcot.st_ivaven "
                        + ",detcot.nd_can ,detcot.nd_preuni ,detcot.nd_pordes ,detcot.co_itm ,detcot.nd_precom ,detcot.co_prv ,detcot.tx_codalt2 "
                        + ",detcot.tx_codalt , detcot.nd_pordesprecom, detcot.st_traauttot,  var.tx_descor, inv.st_permodnomitmven, inv.st_ser , cli.tx_nom";

                sSQL += strAux;
                sSQL += strAux2;
                sSQL += " , ROUND(detcot.nd_can*inv.nd_pesItmKgr,2) as nd_pesTot, inv_nd_pesItmKgr, CASE WHEN inv.tx_codAlt2 IS NULL THEN '' ELSE inv.tx_codAlt2 END as tx_codLet  ";  /* José Marín - 21/Oct/2015 */
                sSQL += " FROM tbh_detcotven as detcot "
                        + " LEFT outer join tbm_inv as inv on (detcot.co_emp = inv.co_emp and detcot.co_itm = inv.co_itm) "
                        + " LEFT outer join tbm_var as var on (inv.co_uni = var.co_reg)"
                        + " LEFT JOIN tbm_cli as cli on(cli.co_emp=detcot.co_emp and cli.co_cli=detcot.co_prv)"
                        + " WHERE detcot.co_emp=" + CodEmp + " and detcot.co_loc=" + CodLoc + " "
                        + " and detcot.co_cot=" + rstCab.getInt("co_cot") + "  and detcot.co_his=" + rstCab.getInt("co_his") + " order by detcot.co_reg";


                java.sql.Statement stmCab = CONN_GLO.createStatement();
                java.sql.ResultSet rst = stmCab.executeQuery(sSQL);
                double dblCan = 0, dblPre = 0, dblPorDes = 0, dblValDes = 0, dblTotal = 0;

                java.sql.Statement stmAux;
                java.sql.ResultSet rstAux;
                stmAux = CONN_GLO.createStatement();
                String strUnidad = "", strCodAlt = "", strSer = "", strTer = "";
                Vector vecData = new Vector();
                int inttratot = 0;
                for (int i = 0; rst.next(); i++) {
                    java.util.Vector vecReg = new java.util.Vector();

                    strCodAlt = (rst.getString("tx_codalt") == null ? "" : rst.getString("tx_codalt"));
                    strUnidad = (rst.getString("tx_descor") == null ? "" : rst.getString("tx_descor"));
                    strSer = (rst.getString("st_ser") == null ? "" : rst.getString("st_ser"));
                    strTer = (rst.getString("isterl") == null ? "" : rst.getString("isterl"));


                    if (inttratot == 0) {
                        if (rst.getString("st_traauttot").equals("S")) {
                            //  chkSolTraTot.setSelected(true);
                            masInformacion(true);
                            inttratot = 1;
                        }
                    }


                    vecReg.add(INT_TBL_LINEA, "");
                    vecReg.add(INT_TBL_ITMALT, strCodAlt);
//                    vecReg.add(INT_TBL_ITMALTCOD3LET,"");
                    vecReg.add(INT_TBL_BUTITM, "");
                    vecReg.add(INT_TBL_BUTSTK, "");
                    vecReg.add(INT_TBL_BUTSOL, "");
                    vecReg.add(INT_TBL_DESITM, rst.getString("tx_nomitm"));
                    vecReg.add(INT_TBL_UNIDAD, strUnidad);
                    vecReg.add(INT_TBL_CODBOD, new Integer(rst.getInt("co_bod")));
                    vecReg.add(INT_TBL_BUTBOD, "");
                    vecReg.add(INT_TBL_TRATOT, rst.getString("st_traauttot").equals("S") ? true : false);
                    vecReg.add(INT_TBL_CANMOV, new Double(rst.getDouble("nd_can")));
                    vecReg.add(INT_TBL_PREUNI, new Double(rst.getDouble("nd_preuni")));
                    vecReg.add(INT_TBL_PORDES, new Double(rst.getDouble("nd_pordes")));
                    String strIva = rst.getString("st_ivaven");
                    Boolean blnIva;
                    if (stIvaVen.equals("N")) {
                        blnIva = false;
                    } else {
                        blnIva = strIva.equals("S") ? true : false;
                    }

                    vecReg.add(INT_TBL_BLNIVA, blnIva);
                    dblCan = rst.getDouble("nd_can");
                    dblPre = rst.getDouble("nd_preuni");
                    dblPorDes = rst.getDouble("nd_pordes");

//                    dblValDes = ((dblCan * dblPre) == 0) ? 0 : ((dblCan * dblPre) * (dblPorDes / 100));
//                    dblTotal = (dblCan * dblPre) - dblValDes;
//                    dblTotal = objUti.redondear(dblTotal, 3);
//                    dblTotal = objUti.redondear(dblTotal, 2);
                     /* JM : Ahora con BigDecimal 22/Marzo/2017 */
               

                    bgdCanItm=BigDecimal.valueOf(dblCan) ;
                    bgdPreItm=BigDecimal.valueOf(dblPre) ;
                    bgdPorDesItm=BigDecimal.valueOf(dblPorDes) ;

                    //DESCUENTO
                    bgdValDesItm = bgdPorDesItm.multiply((bgdCanItm.multiply(bgdPreItm))); 
                    bgdValDesItm = bgdValDesItm.divide(new BigDecimal("100"),objZafParSis.getDecimalesBaseDatos(),BigDecimal.ROUND_HALF_UP);
                    ///TOTAL
                    bgdTotItm=objUti.redondearBigDecimal((bgdCanItm.multiply(bgdPreItm)).subtract(bgdValDesItm), objZafParSis.getDecimalesMostrar());    
                    dblTotal = bgdTotItm.doubleValue();

                    vecReg.add(INT_TBL_TOTAL, new Double(dblTotal));
                    vecReg.add(INT_TBL_PESTOT, rst.getString("nd_pesTot"));
                    
                    vecReg.add(INT_TBL_CODITM, rst.getString("co_itm"));
                    vecReg.add(INT_TBL_ESTADO, "E");
                    vecReg.add(INT_TBL_IVATXT, strIva);
                    vecReg.add(INT_TBL_PRE_COS, new Double(rst.getDouble("nd_precom")));            //Columna que contiene  precio de compra

                    vecReg.add(INT_TBL_DESPRECOM, new Double(rst.getDouble("nd_pordesprecom")));

                    vecReg.add(INT_TBL_COD_PRO, rst.getString("co_prv"));            //Columna que contiene el codigo del proveedor

                    strCodAlt = (rst.getString("tx_nom") == null ? "" : rst.getString("tx_nom"));

                    vecReg.add(INT_TBL_NOM_PRO, strCodAlt);            //Columna que contiene el Nombre del proveedor
                    vecReg.add(INT_TBL_BUT_PRO, "");               //Columna que contiene para busqueda del proveedor
                    vecReg.add(INT_TBL_BLNPRE, "");
                    vecReg.add(INT_TBL_ITMALT2, rst.getString("tx_codLet"));
                    vecReg.add(INT_TBL_ITMSER, strSer);
                    vecReg.add(INT_TBL_ITMTER, strTer);


                    vecReg.add(INT_TBL_CODBODPRV, "");
                    vecReg.add(INT_TBL_NOMBODPRV, "");
                    vecReg.add(INT_TBL_BUTBODPRV, "");

                    vecReg.add(INT_TBL_MARUTI, "");
                    vecReg.add(INT_TBL_IEBODFIS, rst.getString("proconf"));
                    vecReg.add(INT_TBL_MODNOMITM, rst.getString("st_permodnomitmven"));
                    vecReg.add(INT_TBL_COLOCREL, "");
                    vecReg.add(INT_TBL_COTIPDOCREL, "");
                    vecReg.add(INT_TBL_CODOCREL, "");
                    vecReg.add(INT_TBL_COREGREL, "");

                    vecReg.add(INT_TBL_COLOCRELSOL, "");
                    vecReg.add(INT_TBL_COTIPDOCRELSOL, "");
                    vecReg.add(INT_TBL_CODOCRELSOL, "");
                    vecReg.add(INT_TBL_COREGRELSOL, "");
                    vecReg.add(INT_TBL_COLOCRELOC, null);
                    vecReg.add(INT_TBL_COTIPDOCRELOC, null);
                    vecReg.add(INT_TBL_CODOCRELOC, null);
                    vecReg.add(INT_TBL_COREGRELOC, null);
                    vecReg.add(INT_TBL_PRELISITM, null);

                    vecReg.add(INT_TBL_PRELISITM2, null);
                    vecReg.add(INT_TBL_CANORI, null);
                    vecReg.add(INT_TBL_PREORI, null);
                    vecReg.add(INT_TBL_DESORI, null);
                    vecReg.add(INT_TBL_DESVENMAX, null);
                    vecReg.add(INT_TBL_NUMFILCOMPVEN, null);
                    vecReg.add(INT_TBL_MAXDESCOM, null);
                    vecReg.add(INT_TBL_DATBODCOM, null);
                    vecReg.add(INT_TBL_CODREGCOT, null);


                    vecReg.add(INT_TBL_CANVENRES, new Double(rst.getDouble("nd_can")));
                    vecReg.add(INT_TBL_PREVTARES, new Double(rst.getDouble("nd_preuni")));
                    vecReg.add(INT_TBL_PORDESRES, new Double(rst.getDouble("nd_pordes")));
                    vecReg.add(INT_TBL_CODITMRES, rst.getString("co_itm"));
                    vecReg.add(INT_TBL_TIPUNIMED, rst.getString("tx_tipunimed"));

                    vecReg.add(INT_TBL_BLOPREVTA, null);
                    vecReg.add(INT_TBL_DESITMORI, null);

                    vecReg.add(INT_TBL_CLIRETBOD, null);
                    vecReg.add(INT_TBL_CANCLIRETBOD, null);

                    vecReg.add(INT_TBL_CODCTAEGR, null);
                    vecReg.add(INT_TBL_PESITM, rst.getString("nd_pesItmKgr"));
                    vecReg.add(INT_TBL_ESTRES,"");
                    vecReg.add(INT_TBL_COD_EMP_COT_RES, null);
                    vecReg.add(INT_TBL_COD_LOC_COT_RES, null);
                    vecReg.add(INT_TBL_COD_COT_RES, null);
                    vecReg.add(INT_TBL_COD_COT_REG_RES, null);
                    
                    vecReg.add(INT_TBL_CAN_COT_RES, null);
                    vecData.add(vecReg);
                }
                objTblMod.setData(vecData);
                tblDat.setModel(objTblMod);
                //stmAux.close();
                rst.close();
                calculaTot();
                lblCotNumDes.setText("Cotización No. " + txtCot.getText() + " (" + txtCliNom.getText() + ") ");
                lblIva.setText("IVA " + dblPorIva + "%");

                /*
                 * CARGANDO DATOS DEL TAB FORMA DE PAGO
                 */

                String strCo_ForPag = (rstCab.getString("co_forPag") == null) ? "" : rstCab.getString("co_forPag");

                cargarDetPag(CONN_GLO, String.valueOf(CodEmp), String.valueOf(CodLoc), rstCab.getString("co_cot"));
                /*
                 //Extrayendo los datos del detalle respectivo a ESTE PAGO
                 sSQL  = "Select ne_diacre, fe_ven, nd_porret, mo_pag, ne_diagra  from tbh_pagCotven where " +
                 " co_emp = " + CodEmp + " and " +
                 " co_loc = " + CodLoc   + " and " +
                 " co_cot = "+rstCab.getInt("co_cot")+" and co_his="+rstCab.getInt("co_his")+" order by co_reg";
                
                 rst = stmAux.executeQuery(sSQL);
                 int i=0;
                 javax.swing.table.DefaultTableModel modTbl = ((javax.swing.table.DefaultTableModel)tblPag.getModel());
                 modTbl.setRowCount(0);
                
                 while(rst.next()){
                    
                    
                 ((javax.swing.table.DefaultTableModel)tblPag.getModel()).addRow(new java.util.Vector());
                    
                 tblPag.setValueAt(new Integer(rst.getInt(1)) , i, 1);
                 tblPag.setValueAt( rst.getString(2), i, 2);
                 tblPag.setValueAt( rst.getString(3), i, 3);
                 tblPag.setValueAt( new Double(rst.getString(4)) , i, 4);
                 tblPag.setValueAt(new Integer(rst.getInt(5)),  i, 5);
                    
                 i++;
                 }
                
                 */
                /*
                 * LLenando el combo de descripciones de pagos
                 *
                 */

                txtCodForPag.setText("" + strCo_ForPag);
                txtCodForPag2.setText("" + strCo_ForPag);

                txtCodigoFormaPago.setText(txtCodForPag.getText());

                txtNomForPag.setText("" + rstCab.getString("tx_des"));

                /*
                 * VERIFICANDO SI SE ENCUENTRA EN ESTADO ANULADO
                 */
                String strStatus = rstCab.getString("st_reg");
                if (strStatus.equals("I")) {
                    lblCotNumDes.setText(lblCotNumDes.getText() + "#ANULADO#");
                    objUti.desactivarCom(jfrThis);
                } else {
                    if (objTooBar.getEstado() == 'm') {
                        objUti.activarCom(jfrThis);
                        noEditable(false);
                    }
                }
                stmAux.close();
                stmCab.close();

            }
            objTblMod.setDataModelChanged(false);
            blnHayCam = false;

        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }

    }

    public void refrescaDatos2(Integer CodEmp, Integer CodLoc) {
        try {
            BigDecimal bgdCanItm;
            BigDecimal bgdPreItm;
            BigDecimal bgdValDesItm;
            BigDecimal bgdPorDesItm;
            BigDecimal bgdTotItm=BigDecimal.ZERO;

            int intNumCot = 0;
            if (CONN_GLO != null) {
                //FATURACION ELECTRONICA - José Marín M 3/Oct/2014
                String strAux = ",CASE WHEN ("
                        + " (trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1))  IN ("
                        + " SELECT UPPER(trim(tx_cad))  FROM tbm_reginv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                        + " AND co_tipdoc=" + intCodTipDocFacEle + " AND co_usr=" + objZafParSis.getCodigoUsuario() + " AND st_reg='A' "
                        + " ))) THEN 'S' ELSE 'N' END  as isterL";

                String strAux2 = " , CASE WHEN ( (trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1)) IN ( "
                        + " SELECT  UPPER(trim(a1.tx_cad))  FROM tbr_bodloc as a "
                        + " inner join tbm_reginvmernuningegrfisbod as a1 ON(a1.co_emp=a.co_Emp and a1.co_bod=a.co_bod) "
                        + " WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and a1.st_reg='A' and  a.st_reg='P' ))) "
                        + " THEN 'S' ELSE 'N' END AS proconf  ";

                sSQL = "SELECT var.tx_tipunimed, detcot.tx_nomitm, detcot.co_bod ,detcot.nd_can ,detcot.nd_preuni ,detcot.nd_pordes ,detcot.st_ivaven "
                        + ",detcot.nd_can ,detcot.nd_preuni ,detcot.nd_pordes ,detcot.co_itm ,detcot.nd_precom ,detcot.co_prv ,detcot.tx_codalt2 "
                        + ",detcot.tx_codalt , detcot.nd_pordesprecom, detcot.st_traauttot,   var.tx_descor , inv.st_permodnomitmven, inv.st_ser , cli.tx_nom";

                sSQL += strAux;
                sSQL += strAux2;
                sSQL += " , ROUND(detCot.nd_can*inv.nd_pesItmKgr,2) as nd_pesTot, inv.nd_pesItmKgr, CASE WHEN inv.tx_codAlt2 IS NULL THEN '' ELSE inv.tx_codAlt2 END as tx_codLet ";  /* JoséMario 5/Ene/2016 */
                sSQL += " FROM tbm_detcotven as detcot "
                        + " LEFT outer join tbm_inv as inv on (detcot.co_emp = inv.co_emp and detcot.co_itm = inv.co_itm) "
                        + " LEFT outer join tbm_var as var on (inv.co_uni = var.co_reg)"
                        + " LEFT JOIN tbm_cli as cli on(cli.co_emp=detcot.co_emp and cli.co_cli=detcot.co_prv)"
                        + " WHERE detcot.co_emp=" + CodEmp + " and detcot.co_loc=" + CodLoc + " "
                        + " and detcot.co_cot=" + rstCab.getInt("co_cot") + " order by detcot.co_reg";


                java.sql.Statement stmCab = CONN_GLO.createStatement();
                java.sql.ResultSet rst = stmCab.executeQuery(sSQL);
                double dblCan = 0, dblPre = 0, dblPorDes = 0, dblValDes = 0, dblTotal = 0;

                java.sql.Statement stmAux;
                java.sql.ResultSet rstAux;
                stmAux = CONN_GLO.createStatement();
                String strUnidad = "", strCodAlt = "", strSer = "", strTer = "";
                Vector vecData = new Vector();
                int inttratot = 0;
                for (int i = 0; rst.next(); i++) {
                    java.util.Vector vecReg = new java.util.Vector();

                    strCodAlt = (rst.getString("tx_codalt") == null ? "" : rst.getString("tx_codalt"));
                    strUnidad = (rst.getString("tx_descor") == null ? "" : rst.getString("tx_descor"));
                    strSer = (rst.getString("st_ser") == null ? "" : rst.getString("st_ser"));
                    strTer = (rst.getString("isterl") == null ? "" : rst.getString("isterl"));


                    if (inttratot == 0) {
                        if (rst.getString("st_traauttot").equals("S")) {
                            //   chkSolTraTot.setSelected(true);
                            masInformacion(true);
                            inttratot = 1;
                        }
                    }


                    vecReg.add(INT_TBL_LINEA, "");
                    vecReg.add(INT_TBL_ITMALT, strCodAlt);
//                    vecReg.add(INT_TBL_ITMALTCOD3LET, rst.getString("tx_codLet"));
                    vecReg.add(INT_TBL_BUTITM, "");
                    vecReg.add(INT_TBL_BUTSTK, "");
                    vecReg.add(INT_TBL_BUTSOL, "");
                    vecReg.add(INT_TBL_DESITM, rst.getString("tx_nomitm"));
                    vecReg.add(INT_TBL_UNIDAD, strUnidad);
                    vecReg.add(INT_TBL_CODBOD, new Integer(rst.getInt("co_bod")));
                    vecReg.add(INT_TBL_BUTBOD, "");
                    vecReg.add(INT_TBL_TRATOT, (rst.getString("st_traauttot").equals("S")) ? true : false);
                    vecReg.add(INT_TBL_CANMOV, new Double(rst.getDouble("nd_can")));
                    vecReg.add(INT_TBL_PREUNI, new Double(rst.getDouble("nd_preuni")));
                    vecReg.add(INT_TBL_PORDES, new Double(rst.getDouble("nd_pordes")));
                    String strIva = rst.getString("st_ivaven");
                    Boolean blnIva;
                    if (stIvaVen.equals("N")) {
                        blnIva = false;
                    } else {
                        blnIva = (strIva.equals("S")) ? true : false;
                    }

                    vecReg.add(INT_TBL_BLNIVA, blnIva);
                    dblCan = rst.getDouble("nd_can");
                    dblPre = rst.getDouble("nd_preuni");
                    dblPorDes = rst.getDouble("nd_pordes");

//                    dblValDes = ((dblCan * dblPre) == 0) ? 0 : ((dblCan * dblPre) * (dblPorDes / 100));
//                    dblTotal = (dblCan * dblPre) - dblValDes;
//                    dblTotal = objUti.redondear(dblTotal, 3);
//                    dblTotal = objUti.redondear(dblTotal, 2);
                     /* JM : Ahora con BigDecimal 22/Marzo/2017 */
               

                    bgdCanItm=BigDecimal.valueOf(dblCan) ;
                    bgdPreItm=BigDecimal.valueOf(dblPre) ;
                    bgdPorDesItm=BigDecimal.valueOf(dblPorDes) ;

                    //DESCUENTO
                    bgdValDesItm = bgdPorDesItm.multiply((bgdCanItm.multiply(bgdPreItm))); 
                    bgdValDesItm = bgdValDesItm.divide(new BigDecimal("100"),objZafParSis.getDecimalesBaseDatos(),BigDecimal.ROUND_HALF_UP);
                    ///TOTAL
                    bgdTotItm=objUti.redondearBigDecimal((bgdCanItm.multiply(bgdPreItm)).subtract(bgdValDesItm), objZafParSis.getDecimalesMostrar());    
                    dblTotal = bgdTotItm.doubleValue();

                    vecReg.add(INT_TBL_TOTAL, new Double(dblTotal));
                    vecReg.add(INT_TBL_PESTOT, rst.getString("nd_pesTot"));/* José Marín - 20/Oct/2015 */
                    vecReg.add(INT_TBL_CODITM, rst.getString("co_itm"));
                    vecReg.add(INT_TBL_ESTADO, "E");
                    vecReg.add(INT_TBL_IVATXT, strIva);
                    vecReg.add(INT_TBL_PRE_COS, new Double(rst.getDouble("nd_precom")));            //Columna que contiene  precio de compra
                    vecReg.add(INT_TBL_DESPRECOM, new Double(rst.getDouble("nd_pordesprecom")));
                    vecReg.add(INT_TBL_COD_PRO, rst.getString("co_prv"));            //Columna que contiene el codigo del proveedor

                    strCodAlt = (rst.getString("tx_nom") == null ? "" : rst.getString("tx_nom"));

                    vecReg.add(INT_TBL_NOM_PRO, strCodAlt);            //Columna que contiene el Nombre del proveedor
                    vecReg.add(INT_TBL_BUT_PRO, "");               //Columna que contiene para busqueda del proveedor
                    vecReg.add(INT_TBL_BLNPRE, "");
                    vecReg.add(INT_TBL_ITMALT2, rst.getString("tx_codLet"));
                    vecReg.add(INT_TBL_ITMSER, strSer);
                    vecReg.add(INT_TBL_ITMTER, strTer);


                    vecReg.add(INT_TBL_CODBODPRV, "");
                    vecReg.add(INT_TBL_NOMBODPRV, "");
                    vecReg.add(INT_TBL_BUTBODPRV, "");

                    vecReg.add(INT_TBL_MARUTI, "");
                    vecReg.add(INT_TBL_IEBODFIS, rst.getString("proconf"));
                    vecReg.add(INT_TBL_MODNOMITM, rst.getString("st_permodnomitmven"));
                    vecReg.add(INT_TBL_COLOCREL, "");
                    vecReg.add(INT_TBL_COTIPDOCREL, "");
                    vecReg.add(INT_TBL_CODOCREL, "");
                    vecReg.add(INT_TBL_COREGREL, "");
                    vecReg.add(INT_TBL_COLOCRELSOL, "");
                    vecReg.add(INT_TBL_COTIPDOCRELSOL, "");
                    vecReg.add(INT_TBL_CODOCRELSOL, "");
                    vecReg.add(INT_TBL_COREGRELSOL, "");
                    vecReg.add(INT_TBL_COLOCRELOC, null);
                    vecReg.add(INT_TBL_COTIPDOCRELOC, null);
                    vecReg.add(INT_TBL_CODOCRELOC, null);
                    vecReg.add(INT_TBL_COREGRELOC, null);
                    vecReg.add(INT_TBL_PRELISITM, null);

                    vecReg.add(INT_TBL_PRELISITM2, null);
                    vecReg.add(INT_TBL_CANORI, null);
                    vecReg.add(INT_TBL_PREORI, null);
                    vecReg.add(INT_TBL_DESORI, null);
                    vecReg.add(INT_TBL_DESVENMAX, null);
                    vecReg.add(INT_TBL_NUMFILCOMPVEN, null);
                    vecReg.add(INT_TBL_MAXDESCOM, null);
                    vecReg.add(INT_TBL_DATBODCOM, null);
                    vecReg.add(INT_TBL_CODREGCOT, null);

                    vecReg.add(INT_TBL_CANVENRES, new Double(rst.getDouble("nd_can")));
                    vecReg.add(INT_TBL_PREVTARES, new Double(rst.getDouble("nd_preuni")));
                    vecReg.add(INT_TBL_PORDESRES, new Double(rst.getDouble("nd_pordes")));
                    vecReg.add(INT_TBL_CODITMRES, rst.getString("co_itm"));
                    vecReg.add(INT_TBL_TIPUNIMED, rst.getString("tx_tipunimed"));

                    vecReg.add(INT_TBL_BLOPREVTA, null);
                    vecReg.add(INT_TBL_DESITMORI, null);

                    vecReg.add(INT_TBL_CLIRETBOD, null);
                    vecReg.add(INT_TBL_CANCLIRETBOD, null);

                    vecReg.add(INT_TBL_CODCTAEGR, null);
                    vecReg.add(INT_TBL_PESITM, "nd_pesItmKgr");
                    vecReg.add(INT_TBL_ESTRES,null); /* JM RESERVAS 30/Marzo/2017 */
                    vecReg.add(INT_TBL_COD_EMP_COT_RES, null);
                    vecReg.add(INT_TBL_COD_LOC_COT_RES, null);
                    vecReg.add(INT_TBL_COD_COT_RES, null);
                    vecReg.add(INT_TBL_COD_COT_REG_RES, null);
                    
                    vecReg.add(INT_TBL_CAN_COT_RES, null);
                    vecData.add(vecReg);
                }
                objTblMod.setData(vecData);
                tblDat.setModel(objTblMod);
                //stmAux.close();
                rst.close();
                calculaTot();
                lblCotNumDes.setText("Cotización No. " + txtCot.getText() + " (" + txtCliNom.getText() + ") ");
                lblIva.setText("IVA " + dblPorIva + "%");


                /*
                 * CARGANDO DATOS DEL TAB FORMA DE PAGO
                 */

                String strCo_ForPag = (rstCab.getString("co_forPag") == null) ? "" : rstCab.getString("co_forPag");

                cargarDetPag(CONN_GLO, String.valueOf(CodEmp), String.valueOf(CodLoc), rstCab.getString("co_cot"));

                /* 
                 //Extrayendo los datos del detalle respectivo a ESTE PAGO
                 sSQL  = "Select ne_diacre, fe_ven, nd_porret, mo_pag, ne_diagra  from tbm_pagCotven where " +
                 " co_emp = " + CodEmp + " and " +
                 " co_loc = " + CodLoc   + " and " +
                 " co_cot = "+rstCab.getInt("co_cot")+" order by co_reg";
                
                 rst = stmAux.executeQuery(sSQL);
                 int i=0;
                 javax.swing.table.DefaultTableModel modTbl = ((javax.swing.table.DefaultTableModel)tblPag.getModel());
                 modTbl.setRowCount(0);
                
                 while(rst.next()){
                    
                    
                 ((javax.swing.table.DefaultTableModel)tblPag.getModel()).addRow(new java.util.Vector());
                    
                 tblPag.setValueAt(new Integer(rst.getInt(1)) , i, 1);
                 tblPag.setValueAt( rst.getString(2), i, 2);
                 tblPag.setValueAt( rst.getString(3), i, 3);
                 tblPag.setValueAt( new Double(rst.getString(4)) , i, 4);
                 tblPag.setValueAt(new Integer(rst.getInt(5)),  i, 5);
                    
                 i++;
                 }
                
                 */

                /*
                 * LLenando el combo de descripciones de pagos
                 *
                 */

                txtCodForPag.setText("" + strCo_ForPag);
                txtCodForPag2.setText("" + strCo_ForPag);

                txtCodigoFormaPago.setText(txtCodForPag.getText());

                txtNomForPag.setText("" + rstCab.getString("tx_des"));



                /*
                 * VERIFICANDO SI SE ENCUENTRA EN ESTADO ANULADO
                 */
                String strStatus = rstCab.getString("st_reg");
                if (strStatus.equals("I")) {
                    lblCotNumDes.setText(lblCotNumDes.getText() + "#ANULADO#");
                    objUti.desactivarCom(jfrThis);
                } else {
                    if (objTooBar.getEstado() == 'm') {
                        objUti.activarCom(jfrThis);
                        noEditable(false);
                    }
                }
                stmAux.close();
                stmCab.close();

            }
            objTblMod.setDataModelChanged(false);
            blnHayCam = false;

        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }

    }

    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las
     * opciones Si, No y Cancelar. El usuario es quien determina lo que debe
     * hacer el sistema seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg) {
        //JOptionPane oppMsg=new JOptionPane();
        //String strTit="Mensaje del sistema Zafiro";
        return JOptionPane.showConfirmDialog(this, strMsg, strTit, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los
     * objTooBars de tipo texto para poder determinar si su contenido a cambiado
     * o no.
     */
    private boolean isRegPro() {
        boolean blnRes = true;
        String strAux = "¿Desea guardar los cambios efectuados a éste registro?\n";
        strAux += "Si no guarda los cambios perderá toda la información que no haya guardado.";
        switch (mostrarMsgCon(strAux)) {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado()) {
                    case 'n': //Insertar
                        blnRes = objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes = objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                objTblMod.setDataModelChanged(false);
                blnHayCam = false;
                blnRes = true;
                break;
            case 2: //CANCEL_OPTION
                blnRes = false;
                break;
        }
        return blnRes;
    }

    /**
     * Esta función permite cargar el registro seleccionado.
     *
     * @return true: Si se pudo cargar el registro. <BR>false: En el caso
     * contrario.
     */
    private boolean cargarReg() {
        boolean blnRes = true;
//        System.out.println("ZafVen01.cargarReg");

        try {
            if (cargarCabReg()) {
                refrescaDatos();
                 
            } else {
                MensajeInf("Error al cargar registro");
                objTblMod.setDataModelChanged(false);
                blnHayCam = false;
            }
        } catch (Exception e) {
            blnRes = false;
        }
        return blnRes;
    }

//    private boolean cargarRegLoc() {
//        boolean blnRes = true;
////        System.out.println("ZafVen01.cargarRegLoc");
//
//        try {
//            if (cargarCabRegLoc()) {
//                refrescaDatosLoc();
//            } else {
//                MensajeInf("Error al cargar registro");
//                objTblMod.setDataModelChanged(false);
//                blnHayCam = false;
//            }
//        } catch (Exception e) {
//            blnRes = false;
//        }
//        return blnRes;
//    }

    private boolean cargarReghis(Integer CodEmp, Integer CodLoc) {
        boolean blnRes = true;
//        System.out.println("ZafVen01.cargarResHis");

        try {

            if (cargarCabReg()) {
                refrescaDatoshis(CodEmp, CodLoc);
            } else {
                MensajeInf("Error al cargar registro");
                objTblMod.setDataModelChanged(false);
                blnHayCam = false;
            }

        } catch (Exception e) {
            blnRes = false;
        }
        return blnRes;
    }

    private boolean cargarReg2(Integer CodEmp, Integer CodLoc) {
        boolean blnRes = true;
        try {

            if (cargarCabReg()) {
                refrescaDatos2(CodEmp, CodLoc);
            } else {
                MensajeInf("Error al cargar registro");
                objTblMod.setDataModelChanged(false);
                blnHayCam = false;
            }

        } catch (Exception e) {
            blnRes = false;
        }
        return blnRes;
    }

    private boolean cargarCabReg() {
        boolean blnRes = true;
        int intPosRel, intTipForPar = 0;
        String strSql = "";
        Connection con = null;
        Statement stm = null;
        ResultSet rst = null;
        try {
//            System.out.println("ZafVen01.cargarCabReg");

            con = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if (con != null) {
                con.setAutoCommit(false);
                stm = con.createStatement();
//                intTipForPar = rstCab.getInt("ne_tipforpag");
                intTipForPar = objUti.getIntValueAt(arlDatCotVen, intIndiceCotVen, INT_CON_COT_VEN_COD_FOR_PAG);
                strSql = "SELECT CotCab.fe_procon, CotCab.co_locrelsoldevven,  CotCab.co_tipdocrelsoldevven, CotCab.co_docrelsoldevven  , "
                        + " CotCab.co_emp,CotCab.co_loc,cli.co_cli, cli.tx_nom as nomcli,  "
                        + //<== Campos con los datos del CLiente para la cabecera
                        //////////////////////////////////////////////////
                        // " cli.tx_dir as dircli,"+   // José Marín M. 17/Dic/2013
                        " CASE WHEN cotCab.tx_dirCliFac IS NULL THEN cli.tx_dir ELSE cotCab.tx_dirCliFac END as dircli /* DIRECCION FACTURA  */," + //José Marín M. 17/Dic/2013 
                        " cotCab.tx_dirCliGuiRem /*GUIA DE REMISION*/ ,"
                        + //    José Marín M. 17/Dic/2013 
                        /////////////////////////////////////////////////////    
                        " Usr.co_usr as co_ven, Usr.tx_nom as nomcom, " + //<==Campos con los datos del Vendedor para poner en cabecera
                        " CotCab.co_cot, CotCab.fe_cot, CotCab.tx_ate,  " + //<==Campos que aparecen en la parte superior del 1er Tab
                        " CotCab.co_forPag, " + //<==Campos que aparecen en la parte superior del 2do Tab
                        " CotCab.tx_obs1, CotCab.tx_obs2, CotCab.nd_sub, CotCab.nd_porIva, CotCab.nd_valDes, " + //<==Campos que aparecen en la parte Inferior del 1er Tab
                        " CotCab.st_reg , forpag.tx_des "
                        + " , CotCab.ne_val , CotCab.st_regrep  ,Cli.tx_tipper, Cli.nd_maxdes, Cli.nd_maruti, Cli.tx_tel, Cli.tx_ide , ciu.tx_desLar  "
                        + " ,Cli.co_tipper , CotCab.tx_numped , forpag.ne_tipforpag , forpag.nd_pes, forpagCli.ne_tipforpag as ne_tipforpagcli , forpagCli.nd_pes as nd_pescli "
                        + " ,Cli.ne_diagra, Cli.st_ivaven, CotCab.tx_nomcli, cli.st_peringnomclicotven, CotCab.tx_momGenFac ";
                if (intTipForPar == 4) {
//                    strSql+=", CotCab.co_tarCre, a1.tx_deslar as nomTarCre, CotCab.co_redTarCre, a2.tx_deslar as nomRedTarCre, "
//                            + " CotCab.co_tipCre, a3.tx_deslar as nomTipCre, a3.tx_tipcre, a3.ne_mesgra, a3.nd_pordesven, "
//                            + " CotCab.co_emiTarCre, a4.tx_deslar as nomEmiTar, CotCab.ne_mesCre, a3.ne_mesgra ";
                    strSql += ", CotCab.co_tipCre, a1.tx_desLar as nomTarCre, a1.tx_deslar as nomRedTarCre, ";
                    strSql += " a3.tx_desLar as nomTipCre, a3.tx_tipCre, a3.ne_mesGra, a3.nd_porDesVen, ";
                    strSql += " a3.tx_emiTarCre as nomEmiTar, a3.ne_mesCre";
                }

                strSql += " FROM tbm_cabCotven as CotCab "
                        + " left outer join  tbm_cli as Cli on (cotcab.co_emp = cli.co_emp and cotcab.co_cli = cli.co_cli) "
                        + " left outer join tbm_cabForPag as forpagCli on (forpagCli.co_emp=Cli.co_emp and forpagCli.co_forpag = Cli.co_forPag )  "
                        + " LEFT JOIN tbm_Ciu as ciu on(ciu.co_Ciu=Cli.co_ciu)  "
                        + " left outer join tbm_usr as Usr on (Usr.co_usr = CotCab.co_ven ) " + // Tablas enlas cuales se trabajara y sus respectivos alias
                        " left outer join tbm_cabForPag as forpag on (forpag.co_emp=CotCab.co_emp and forpag.co_forpag = CotCab.co_forPag )  ";
                if (intTipForPar == 4) {
                    strSql += " left outer join tbm_tipCreRedTarCre as a3 on (a3.co_emp=CotCab.co_emp AND a3.co_tipcre=CotCab.co_tipCre ) ";
                    strSql += " left outer join tbm_redTarCre as a1 on (a3.co_redTarCre=a1.co_redTarCre ) ";
                    //  strSql+=" left outer join tbm_var as a4 on (a4.co_reg=CotCab.co_emiTarCre) " ;
                }
                strSql += " where CotCab.co_emp = " + objUti.getIntValueAt(arlDatCotVen, intIndiceCotVen, INT_CON_COT_VEN_COD_EMP) + // Consultando en la empresa en la ke se esta trabajando
                        " and CotCab.co_loc = " + objUti.getIntValueAt(arlDatCotVen, intIndiceCotVen, INT_CON_COT_VEN_COD_LOC)
                        + " and CotCab.co_cot=" + objUti.getIntValueAt(arlDatCotVen, intIndiceCotVen, INT_CON_COT_VEN_COD_COT)
                        + " ";
                System.out.println("ZafVen01.cargarCabReg: \n" + strSql);
                rst = stm.executeQuery(strSql);
                if (rst.next()) {
                    strCodLocSol = rst.getString("co_locrelsoldevven");
                    strCodTipDocSol = rst.getString("co_tipdocrelsoldevven");
                    strCodDocSol = rst.getString("co_docrelsoldevven");
                    txtCot.setText(rst.getString("co_cot"));
                    intCodCliGrp = rst.getInt("co_cli");
                    txtCliCod.setText(((rst.getString("co_cli") == null) ? "" : rst.getString("co_cli")));
                    txtCliNom.setText(((rst.getString("nomcli") == null) ? "" : rst.getString("nomcli")));
                    txtCliDir.setText(((rst.getString("dircli") == null) ? "" : rst.getString("dircli")));
                    //José Marín 17/Dic/2013
                    txtCliDirGui.setText(((rst.getString("tx_dirCliGuiRem") == null) ? "" : rst.getString("tx_dirCliGuiRem")));
                    //José Marín 17/Dic/2013
                    txtNomCliVar.setText(((rst.getString("tx_nomcli") == null) ? "" : rst.getString("tx_nomcli")));
                    txtNomCliVar.setVisible(((rst.getString("st_peringnomclicotven").toString().equals("S") ? true : false)));
                    //chkSolTraTot.setSelected(false);
                    masInformacion(false);
                    txtcli_telefono.setText(rst.getString("tx_tel"));
                    txtcli_identificacion.setText(rst.getString("tx_ide"));
                    txtcli_ciudad.setText(rst.getString("tx_desLar"));
                    tx_numped.setText(rst.getString("tx_numped"));
                    Glo_dlbMaxDes = rst.getDouble("nd_maxdes");
                    Glo_dlbMarUti = rst.getDouble("nd_maruti");
                    strCodTipPerCli = rst.getString("co_tipper");
                    stIvaVen = rst.getString("st_ivaven");
                    intTipForPagCfgCli = Integer.parseInt(rst.getString("ne_tipforpagcli"));
                    dblPesCfgCli = Double.parseDouble(((rst.getString("nd_pescli") == null || rst.getString("nd_pescli").equals("")) ? "0" : rst.getString("nd_pescli")));
                    dblDiaGraCli = Double.parseDouble(((rst.getString("ne_diagra") == null) ? "0" : rst.getString("ne_diagra")));
                    intTipForPagCotizacion = Integer.parseInt(rst.getString("ne_tipforpag"));
                    
                    
                    dblPesCotizacion = Double.parseDouble(((rst.getString("nd_pes") == null) ? "0" : rst.getString("nd_pes")));
                    intNumDiaVal = rst.getInt("ne_val");
                    dateFecCot = objUti.formatearFecha(rst.getDate("fe_cot"), "dd/MM/yyyy");
                    intTipMod = 2;
                    if (rst.getDate("fe_cot") == null) {
                        txtFecDoc.setText("");
                    } else {
                        java.util.Date dateObj = rst.getDate("fe_cot");
                        java.util.Calendar calObj = java.util.Calendar.getInstance();
                        calObj.setTime(dateObj);
                        txtFecDoc.setText(calObj.get(Calendar.DAY_OF_MONTH), calObj.get(Calendar.MONTH) + 1, calObj.get(Calendar.YEAR));
                    }
                    if (rst.getDate("fe_procon") == null) {
                        txtFecRec.setText("");
                    } else {
                        java.util.Date dateObj = rst.getDate("fe_procon");
                        java.util.Calendar calObj = java.util.Calendar.getInstance();
                        calObj.setTime(dateObj);
                        txtFecRec.setText(calObj.get(Calendar.DAY_OF_MONTH), calObj.get(Calendar.MONTH) + 1, calObj.get(Calendar.YEAR));
                    }
//                    txtVenCod.setText(((rst.getString("co_ven") == null) ? "" : rst.getString("co_ven")));
//                    txtVenNom.setText(((rst.getString("nomcom") == null) ? "" : rst.getString("nomcom")));
                    getVendedorAsignado(objUti.getIntValueAt(arlDatCotVen, intIndiceCotVen, INT_CON_COT_VEN_COD_EMP),objUti.getIntValueAt(arlDatCotVen, intIndiceCotVen, INT_CON_COT_VEN_COD_LOC), rst.getInt("co_cli") );
                    txtAte.setText(((rst.getString("tx_ate") == null) ? "" : rst.getString("tx_ate")));
                    double dblSub = ((rst.getString("nd_sub") == null) ? 0 : objUti.redondear(rst.getDouble("nd_sub"), objZafParSis.getDecimalesMostrar()));
                    txtSub.setText("" + dblSub);
                    
                    dblPorIva = rst.getDouble("nd_porIva"); // PORCENTAJE DEL DOCUMENTO
                    bldivaEmp = rst.getDouble("nd_porIva"); // JoseMario 6/Jun/2016
                    
                    calcularTotPesDoc(); /* José Marín - 20/Oct/2015 */
                    //Pie de pagina
                    txaObs1.setText(((rst.getString("tx_obs1") == null) ? "" : rst.getString("tx_obs1")));
                    txaObs2.setText(((rst.getString("tx_obs2") == null) ? "" : rst.getString("tx_obs2")));
                    strAux = rst.getString("st_reg");
                    strstReg_glo = strAux;
                    if (strAux.equals("A")) {
                        strAux = "Activo";
                    } else if (strAux.equals("I")) {
                        strAux = "Anulado";
                    } else {
                        strAux = "Otro";
                    }
                    
                    /* JoseMario 1/Jul/2016  */
                    if(rst.getString("tx_momGenFac")==null){
                        rdoNA.setSelected(true);
                        rdoInicio.setSelected(false);
                        rdoFinal.setSelected(false);
                    }
                    else if(rst.getString("tx_momGenFac").equals("P")){
                        rdoNA.setSelected(false);
                        rdoInicio.setSelected(true);
                        rdoFinal.setSelected(false);
                    }else if(rst.getString("tx_momGenFac").equals("F")){
                        rdoNA.setSelected(false);
                        rdoInicio.setSelected(false);
                        rdoFinal.setSelected(true);
                    }
                    /* JoseMario 1/Jul/2016  */
                    

                    txtCodigoFormaPago.setText(String.valueOf(intTipForPagCfgCli));
                    txtNomForPag.setText(rst.getString("tx_des"));
                    txtCodForPag.setText(txtCodigoFormaPago.getText());

                    /**
                     * TARJETAS DE CREDITO
                     */
                    if (intTipForPar == 4) {
                        txtCodTarCre.setText(rst.getString("co_tipCre"));
                        txtNomTarCre.setText(rst.getString("nomTipCre"));  //"Medianet->Visa, Mastercard->Diferido sin intereses->1 mes de gracia"

//                        txtCodRedTarCre.setText(rst.getString("co_redTarCre"));

                        txtTipCre.setText(rst.getString("tx_tipcre"));
                        dblPorDesTarCre = objUti.redondear(objUti.parseDouble((rst.getString("nd_pordesven") == null) ? "0" : rst.getString("nd_pordesven")), 2);

                        txtNomEmiTar.setText(rst.getString("nomEmiTar"));  // "Internacional, Bolivariano, Produbanco, Amazonas, Machala, Mutualista Azuay, Unibanco"

                        txtMesGra.setText(rst.getString("ne_mesgra"));
                        txtPorComTarCre.setText("");
                        txtPorDesVenTarCre.setText("");
                    } else {
                        txtCodTarCre.setText("");
                        txtNomTarCre.setText("");
                        txtCodRedTarCre.setText("");

                        txtTipCre.setText("");
                        dblPorDesTarCre = 0;

                        txtNomEmiTar.setText("");

                        txtMesGra.setText("");

                        txtPorComTarCre.setText("");
                        txtPorDesVenTarCre.setText("");
                    }

                    blnRes = true;
                }

                objTooBar.setEstadoRegistro(strAux);
//                intPosRel = rstCab.getRow();
                
                intPosRel = intIndiceCotVen+1;
                
               // rstCab.last();
                objTooBar.setPosicionRelativa("" + intPosRel + " / " + (arlDatCotVen.size()) );
               // rstCab.absolute(intPosRel);

                blnHayCam = false;

            }
           

        } catch (SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } finally {
            try {
                if (rst != null) {
                    rst.close();
                }
                rst = null;

                if (stm != null) {
                    stm.close();
                }
                stm = null;

                if (con != null) {
                    con.close();
                }
                con = null;
            } catch (Throwable e) {
                e.printStackTrace();
            }
        }
        return blnRes;
    }
 

    public class mitoolbar extends ZafToolBar {

        public mitoolbar(JInternalFrame jfrThis) {
            super(jfrThis, objZafParSis);
        }

        @Override
        public boolean anular() {
            strAux = objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado")) {
                MensajeInf("El documento está ELIMINADO.\nNo es posible anular un documento eliminado.");
                return false;
            }
            if (strAux.equals("Anulado")) {
                MensajeInf("El documento ya está ANULADO.\nNo es posible anular un documento anulado.");
                return false;
            }
            if(isTransferenciaInventario()){
                MensajeInf("El documento está en proceso de Transferencia de Inventario.\nNo es posible anular un documento en proceso de Transferencia.");
                return false;
            } 
            



            abrirCon();
            if (estadoFacCotVen("anular")) {
                CerrarCon();
                return false;
            }
            if (!anularReg()) {
                CerrarCon();
                return false;
            }
            CerrarCon();
            objTooBar.setEstadoRegistro("Anulado");
            blnHayCam = false;
            return true;
        }

        @Override
        public void clickAceptar() {
            setEstadoBotonMakeFac();
            validacionesMovimiento();
        }

        @Override
        public void clickAnterior() {
            try {
                abrirCon();
                // <editor-fold defaultstate="collapsed" desc=" /* José Marín: RstCab Deprecate 29/Agosto/2016*/ ">
//                if (rstCab != null) {
//                    if (!rstCab.isFirst()) {
//                        if (blnHayCam) {
//                            if (isRegPro()) {
//                                rstCab.previous();
//                                cargarReg();
//                            }
//                        } else {
//                            rstCab.previous();
//                            cargarReg();
//                        }
//                    }
//                }
//</editor-fold>
                if(arlDatCotVen.size()>0){
                    if(intIndiceCotVen>0){
                        if (blnHayCam) {
                            if (isRegPro()) {
                                intIndiceCotVen--;
                                cargarReg();
                            }
                        }
                        else {
                            intIndiceCotVen--;
                            cargarReg();
                        }
                    }
                }

                CerrarCon();
                validacionesMovimiento();
            } 
//            catch (java.sql.SQLException e) {
//                objUti.mostrarMsgErr_F1(this, e);
//            } 
            catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        @Override
        public void clickAnular() {
            noEditable(false);

        }

        @Override
        public void clickConsultar() {
            txtVenCod.setEnabled(true);
            setEditable(false);
            butMakeFactura.setEnabled(true);
            butCopyCot.setEnabled(true);
            butCopyInmaconsa.setEnabled(true); //JoséMarín 6/Feb/2015 
            butVisOc.setEnabled(true);
            noEditable(false);
            txtCot.setEditable(true);
            blnHayCam = false;
            rdoNA.setEnabled(false);
            rdoInicio.setEnabled(false);
            rdoFinal.setEnabled(false);
            /*JoséMario 19/Oct/2015*/
            txtPesKgr.setBackground(objZafParSis.getColorCamposSistema());
            txtCliDirGui.setBackground(objZafParSis.getColorCamposObligatorios());
            
            tx_numped.setBackground(objZafParSis.getColorCamposObligatorios());
            
            /* JM 9/Sep/2017 */
            btnSolRes.setEnabled(true);
            btnODRes.setEnabled(true);
            btnReservas.setEnabled(false);
            /* JM 9/Sep/2017 */
        
             
        }

        @Override
        public void clickEliminar() {
            noEditable(false);
            blnHayCam = false;
        }

        @Override
        public void clickFin() {
            try {
                abrirCon();
                
// <editor-fold defaultstate="collapsed" desc=" /* José Marín: rstCab 29/Agosto/2016 */ ">
//                if (rstCab != null) {
//                    if (!rstCab.isLast()) {
//                        if (blnHayCam) {
//                            if (isRegPro()) {
//                                rstCab.last();
//                                cargarReg();
//                            }
//                        } else {
//                            rstCab.last();
//                            cargarReg();
//                        }
//                    }
//                }
//</editor-fold>
                if(arlDatCotVen.size()>0){
                    if(intIndiceCotVen<arlDatCotVen.size()-1){
                        if (blnHayCam) {
                            if (isRegPro()) {
                                intIndiceCotVen=arlDatCotVen.size()-1;
                                cargarReg();
                            }
                        }
                        else {
                            intIndiceCotVen=arlDatCotVen.size()-1;
                            cargarReg();
                        }
                    }
                }
                
                CerrarCon();
                validacionesMovimiento();
            } 
//            catch (java.sql.SQLException e) {
//                objUti.mostrarMsgErr_F1(this, e);
//            } 
            catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        @Override
        public void clickInicio() {
            try {
                abrirCon();
                // <editor-fold defaultstate="collapsed" desc=" /* José Marín: rstCab 29/Agosto/2016 */ ">
//                if (rstCab != null) {
//                    if (!rstCab.isFirst()) {
//                        if (blnHayCam) {
//                            if (isRegPro()) {
//                                rstCab.first();
//                                cargarReg();
//                            }
//                        } else {
//                            rstCab.first();
//                            cargarReg();
//                        }
//                    }
//                }
                //</editor-fold>
                
                if(arlDatCotVen.size()>0){
                    if(intIndiceCotVen>0){
                        if (blnHayCam) {
                            if (isRegPro()) {
                                intIndiceCotVen=0;
                                cargarReg();
                            }
                        }
                        else {
                            intIndiceCotVen=0;
                            cargarReg();
                        }
                    }
                }
                CerrarCon();
                validacionesMovimiento();
                
            } 
//            catch (java.sql.SQLException e) {
//                objUti.mostrarMsgErr_F1(this, e);
//            } 
            catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        @Override
        public void clickInsertar() {
            try {
                intMosVenAut = 1;

                blnEstEliFilDet = false;
                blnEstFecVal = false;
                
                

                if (objTblMod.isDataModelChanged()) {

                    isRegPro();
                }
                if (rstCab != null) {
                    rstCab.close();
                    stmCab.close();

                    rstCab = null;
                    stmCab = null;

                }
                clnTextos();
                txtCodForPag2.setText("");
                noEditable(false);

                datFecAux = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos());
                java.util.Date dateObj = datFecAux;
                java.util.Calendar calObj = java.util.Calendar.getInstance();
                calObj.setTime(dateObj);
                txtFecDoc.setText(calObj.get(java.util.Calendar.DAY_OF_MONTH),
                        calObj.get(java.util.Calendar.MONTH) + 1,
                        calObj.get(java.util.Calendar.YEAR));
                //txtFecDoc.setHoy();
                
                cargarTipEmp();// JoseMario 6/Jun/2016
                cargarForPagCli();

                setEstadoBotonMakeFac();

                setEditable(true);
                objTblMod.setModoOperacion(ZafTblMod.INT_TBL_INS);
                objTblMod.setDataModelChanged(false);

                //deshabilitarCamposTarCre();
                /*JoséMario 19/Oct/2015*/
                txtPesKgr.setBackground(objZafParSis.getColorCamposSistema());
                txtCliDirGui.setBackground(objZafParSis.getColorCamposObligatorios());
                
                tx_numped.setBackground(objZafParSis.getColorCamposObligatorios());
                tx_numped.setText("0");
                blnHayCam = false;
                txtFecDoc.setEnabled(true);
//                System.out.println("clickInsertar iva " + dblPorIva);
//                lblIva.setText("IVA " + dblPorIva + "%");  // JoseMario 6/Jun/2016 
                
                /* JM 25/Jul/2017 */
                txtCliCod.setEnabled(true);txtCliNom.setEnabled(true);butCliCon.setEnabled(true);
                btnReservas.setEnabled(true);               
                /* JM 25/Jul/2017 */
                
                /* JM 29/Jun/2018  */
                txtVenCod.setEditable(false);
                txtVenNom.setEditable(false);
                butVenCon.setEnabled(false);
                /* JM 29/Jun/2018  */
        
                
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void setEstadoBotonMakeFac() {
            switch (getEstado()) {
                case 'l'://Estado 0 => Listo
                    break;
                case 'x'://Estado click modificar
                    butCopyCot.setEnabled(false);
                    butCopyInmaconsa.setEnabled(false); //JoséMarín 6/Feb/2015 
                    butMakeFactura.setEnabled(false);
                    butVisOc.setEnabled(false);
                    rdoNA.setEnabled(false);
                    rdoInicio.setEnabled(false);
                    rdoFinal.setEnabled(false);
                    /* JM 22/Jun/2017 */
                    btnSolRes.setEnabled(false);
                    btnODRes.setEnabled(false);
                    btnReservas.setEnabled(false);
                    /* JM 22/Jun/2017 */

                    break;
                case 'c'://Estado Consultar
                    butCopyCot.setEnabled(false);
                    butCopyInmaconsa.setEnabled(false); //JoséMarín 6/Feb/2015 
                    butMakeFactura.setEnabled(false);
                    butVisOc.setEnabled(false);
                    rdoNA.setEnabled(false);
                    rdoInicio.setEnabled(false);
                    rdoFinal.setEnabled(false);
                    /* JM 22/Jun/2017 */
                    btnSolRes.setEnabled(true);
                    btnODRes.setEnabled(true);
                    btnReservas.setEnabled(false);
                    /* JM 22/Jun/2017 */

                    break;
                case 'y':  // Modo Eliminar (Previo).
                    butCopyCot.setEnabled(false);
                    butCopyInmaconsa.setEnabled(false); //JoséMarín 6/Feb/2015 
                    butMakeFactura.setEnabled(false);
                    butVisOc.setEnabled(false);
                    rdoNA.setEnabled(false);
                    rdoInicio.setEnabled(false);
                    rdoFinal.setEnabled(false);
                    /* JM 22/Jun/2017 */
                    btnSolRes.setEnabled(false);
                    btnODRes.setEnabled(false);
                    btnReservas.setEnabled(false);
                    /* JM 22/Jun/2017 */

                    break;
                case 'z':
                    butCopyCot.setEnabled(false);
                    butCopyInmaconsa.setEnabled(false); //JoséMarín 6/Feb/2015 
                    butMakeFactura.setEnabled(false);
                    butVisOc.setEnabled(false);
                    rdoNA.setEnabled(false);
                    rdoInicio.setEnabled(false);
                    rdoFinal.setEnabled(false);
                    /* JM 22/Jun/2017 */
                    btnSolRes.setEnabled(false);
                    btnODRes.setEnabled(false);
                    btnReservas.setEnabled(false);
                    /* JM 22/Jun/2017 */

                    break;
                default:
                    butCopyCot.setEnabled(false);
                    butCopyInmaconsa.setEnabled(false); //JoséMarín 6/Feb/2015 
                    butMakeFactura.setEnabled(false);
                    butVisOc.setEnabled(false);
                    rdoNA.setEnabled(false);
                    rdoInicio.setEnabled(false);
                    rdoFinal.setEnabled(false);
                    /* JM 22/Jun/2017 */
                    btnSolRes.setEnabled(false);
                    btnODRes.setEnabled(false);
                    btnReservas.setEnabled(false);
                    /* JM 22/Jun/2017 */

                    break;

            }
        }

        @Override
        public void clickSiguiente() {
            try {
                abrirCon();
                // <editor-fold defaultstate="collapsed" desc=" /* José Marín: Antes Cambio forma de trabajar rstCab 29/Agosto/2016 */ ">
//                if (rstCab != null) {
//                    if (!rstCab.isLast()) {
//                        if (blnHayCam || objTblMod.isDataModelChanged()) {
//                            if (isRegPro()) {
//                                rstCab.next();
//                                cargarReg();
//                            }
//                        } else {
//                            rstCab.next();
//                            cargarReg();
//                        }
//                    }
//                }
//</editor-fold>

                if(arlDatCotVen.size()>0){
                    if(intIndiceCotVen < arlDatCotVen.size()-1){
                        if (blnHayCam || objTblMod.isDataModelChanged()) {
                            if (isRegPro()) {
                                intIndiceCotVen++;
                                cargarReg();
                            }
                        }
                        else {
                            intIndiceCotVen++;
                            cargarReg();;
                        }
                    }
                }

                CerrarCon();
                validacionesMovimiento();
            } 
//            catch (java.sql.SQLException e) {
//                objUti.mostrarMsgErr_F1(this, e);
//            } 
            catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        @Override
        public boolean eliminar() {
            try {
                strAux = objTooBar.getEstadoRegistro();
                if (strAux.equals("Eliminado")) {
                    MensajeInf("El documento ya está ELIMINADO.\nNo es posible eliminar un documento eliminado.");
                    return false;
                }

                abrirCon();

                if (estadoFacCotVen("eliminar")) {
                    CerrarCon();
                    return false;
                }
                if (!eliminarReg()) {
                    CerrarCon();
                    return false;
                }

                objTooBar.setEstadoRegistro("Eliminado");
                clnTextos();
                CerrarCon();

                blnHayCam = false;
            } catch (Exception e) {
                return true;
            }
            return true;
        }

        @Override
        public boolean insertar() {
            strstReg_glo = "";
            try {
                abrirCon();
                if (!validaCampos()) {
                    CerrarCon();
                    return false;
                }
                cargarTipEmp();
                calculaTot();
                actualizarPrecioLista();// JOTA 7/Jun/2016
                
                if(!validaDatosDescuento()){
                    return false;
                }
                
                if (!insertarReg()) {
                    CerrarCon();
                    return false;
                } else {
                    recargarDetCot(CONN_GLO, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), txtCot.getText());
                }
                CerrarCon();
                blnHayCam = false;
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
            return true;
        }
        
        /**
         * Revisa si algun item tiene el descuento modificado y pregunta si se desea guardar de esa manera
         * @return 
         */
        
        private boolean validaDatosDescuento(){
            boolean blnRes=true, blnEncuentra=false;
            String strMsg, strAux="";
            try{
                double dblPorDesCli = Glo_dlbMaxDes;
                if (intTipForPagCotizacion == 4) 
                {
                    for (int i = 0; i < tblDat.getRowCount(); i++) {
                        if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                            if(Double.parseDouble(tblDat.getValueAt(i, INT_TBL_PORDES).toString())!=dblPorDesTarCre){
                                strAux+=getDatosMostrar(i);
                                blnEncuentra=true;
                            }
 
                        }
                    }
                } 
                else 
                {
                    for (int i = 0; i < tblDat.getRowCount(); i++) {
                        if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                            if(Double.parseDouble(tblDat.getValueAt(i, INT_TBL_PORDES).toString())!=dblPorDesCli){
                                strAux+=getDatosMostrar(i);
                                blnEncuentra=true;
                            }
 
                        }
                    }
                } 
                if(blnEncuentra){
                    blnRes=false;
                    strMsg="<html> La Cotización posee Items con  <FONT COLOR=\"red\">DESCUENTOS MODIFICADOS</FONT>. <BR>" ;// CAMBIA
                    if (intTipForPagCotizacion == 4){
                        strMsg+=" Descuento configurado: " + dblPorDesTarCre; 
                    }
                    else{
                        strMsg+=" Descuento configurado: " + dblPorDesCli; 
                    }
                    strMsg+=" <BR>"; 
                    strMsg+=" <table BORDER=1><tr><td> Línea </td><td> Cód.Alt. </td> <td> Precio </td><td> Desc. </td><td> Total </td> </tr>";
                    strMsg+=""+ strAux + "    ";
                    strMsg+=" </table><BR>";
                    strMsg+="Esta seguro que desea realizar esta operación? <html>";
                    System.out.println(strMsg);
                    String strTit="Mensaje del sistema Zafiro";
                    if (JOptionPane.showConfirmDialog(this, strMsg, strTit, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == 0) {
                        blnRes=true;
                    }
                }
                
            }
            catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
                blnRes=false;
            }
            return blnRes;
        }
        
        
        private String getDatosMostrar(int row){
            String strRes="";
            try{
                strRes+="<tr><td> "+(row+1)+" </td><td>"+tblDat.getValueAt(row, INT_TBL_ITMALT).toString()+"</td><td>"+tblDat.getValueAt(row, INT_TBL_PREUNI).toString()+"";
                strRes+="</td><td>"+tblDat.getValueAt(row, INT_TBL_PORDES).toString()+"</td><td>"+tblDat.getValueAt(row, INT_TBL_TOTAL).toString()+"</td> </tr>";
            }
            catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
            return strRes;
        }
        
        
        

        public boolean estadoFacCotVen(String strMsg) {
            boolean blnRes = false;
            try {
//                System.out.println("ZafVen01.estadoFacCotVen");
                if (CONN_GLO != null) {
                    String sql = "select  st_reg  from tbm_cabcotven "
                            + "where  co_emp = " + objZafParSis.getCodigoEmpresa() + " and  "
                            + "co_loc = " + objZafParSis.getCodigoLocal() + " and  "
                            + "co_cot = " + ((txtCot.getText().equals("")) ? "0" : txtCot.getText());
                    java.sql.Statement stm = CONN_GLO.createStatement();
                    java.sql.ResultSet rst = stm.executeQuery(sql);
                    if (rst.next()) {
                        if (rst.getString(1).trim().equals("F")) {
                            MensajeInf("La Cotización Ya esta Facturado.\nNo es posible " + strMsg + " una Cotización Facturado.");
                            return true;
                        } else {
                            return false;
                        }
                    }
                    stm.close();
                    stm = null;
                    rst.close();
                    rst = null;
                }
            } catch (java.sql.SQLException e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        private boolean impGuiaRem(java.sql.Connection conn, int intCodEmp, int intCodLoc, int intCodTipDocGuiRem, int intCodDoc) {
            boolean blnRes = false;

            if (_getVerificarPagCont(conn, intCodEmp, intCodLoc, intCodTipDocGuiRem, intCodDoc)) {
                // objlbl.setText("Pago Pendiente (Venta de Contado )");
                blnRes = true;
            } else if (_getVerificarPagChq(conn, intCodEmp, intCodLoc, intCodTipDocGuiRem, intCodDoc)) {
                // objlbl.setText("Cheque Pendiente (Cheque a Fecha )");
                blnRes = true;
            }
            return blnRes;
        }

        private boolean _getVerificarPagCont(java.sql.Connection conn, int intCodEmp, int intCodLoc, int intCodTipDocGuiRem, int intCodDoc) {
            boolean blnRes = false;
            String strSql = "";
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            try {
//      System.out.println("ZafVen01._getVerificarPagCont");

                if (conn != null) {
                    stmLoc = conn.createStatement();

                    strSql = "select  a1.co_doc from ( "
                            + " select co_emprel, co_locrel, co_tipdocrel, co_docrel  from tbm_detguirem "
                            + " where  co_emp=" + intCodEmp + " and co_loc=" + intCodLoc + " and co_tipdoc=" + intCodTipDocGuiRem + " and co_doc=" + intCodDoc + "  "
                            + " group by co_emprel, co_locrel, co_tipdocrel, co_docrel  "
                            + " ) as a "
                            + " inner join tbm_pagmovinv as a1 on (a1.co_emp=a.co_emprel and a1.co_loc=a.co_locrel and a1.co_tipdoc=a.co_tipdocrel and a1.co_doc=a.co_docrel) "
                            + " WHERE a1.st_reg in ('A','C') "
                            + " AND (a1.nd_porret=0 or a1.nd_porret is null ) and (a1.ne_diacre=0 or a1.ne_diacre is null)  AND (a1.nd_abo+a1.mo_pag) < 0  ";
                    rstLoc = stmLoc.executeQuery(strSql);
                    if (rstLoc.next()) {
                        blnRes = true;
                    }
                    rstLoc.close();
                    rstLoc = null;
                    stmLoc.close();
                    stmLoc = null;
                }
            } catch (java.sql.SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }

        private boolean _getVerificarPagChq(java.sql.Connection conn, int intCodEmp, int intCodLoc, int intCodTipDocFacEle, int intCodDoc) {
            boolean blnRes = false;
            String strSql = "";
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            try {
                if (conn != null) {
                    stmLoc = conn.createStatement();
//                    System.out.println("ZafVen01._getVerificarPagChq");

                    strSql = "select  a1.co_doc from ( "
                            + " select co_emprel, co_locrel, co_tipdocrel, co_docrel  from tbm_detguirem "
                            + " where  co_emp=" + intCodEmp + " and co_loc=" + intCodLoc + " and co_tipdoc=" + intCodTipDocFacEle + " and co_doc=" + intCodDoc + "  "
                            + " group by co_emprel, co_locrel, co_tipdocrel, co_docrel  "
                            + " ) as a "
                            + " inner join tbm_cabmovinv as a1 on (a1.co_emp=a.co_emprel and a1.co_loc=a.co_locrel and a1.co_tipdoc=a.co_tipdocrel and a1.co_doc=a.co_docrel) "
                            + " INNER JOIN tbm_pagMovInv AS a2 ON (a2.co_emp=a1.co_emp AND a2.co_loc=a1.co_loc AND a2.co_tipDoc=a1.co_tipDoc AND a2.co_doc=a1.co_doc) "
                            + " INNER JOIN tbm_cli AS cli ON (cli.co_emp=a1.co_emp and cli.co_cli=a1.co_cli)  "
                            + " WHERE a1.st_reg NOT IN ('I','E') AND a2.st_reg IN ('A','C') AND a2.st_sop='S' "
                            + " AND CASE WHEN (a2.mo_pag+a2.nd_abo) < 0 THEN  a2.st_entsop='N' END  AND a1.fe_doc+cli.ne_diagrachqfec <= " + objZafParSis.getFuncionFechaHoraBaseDatos() + " ";
                    rstLoc = stmLoc.executeQuery(strSql);
                    if (rstLoc.next()) {
                        blnRes = true;
                    }
                    rstLoc.close();
                    rstLoc = null;
                    stmLoc.close();
                    stmLoc = null;
                }
            } catch (java.sql.SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }

        public boolean EstadoCotizacionFacturado(String strMsg, java.sql.Connection conn) {
            boolean blnRes = false;
            try {
                if (conn != null) {
                    blnRes = EstadoFacturado2(conn, strMsg);
                }
            } 
            catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }
        

        public boolean EstadoFacturado(String strMsg, java.sql.Connection conn) {
            boolean blnRes = false;
            try {
                if (conn != null) {
                    blnRes = EstadoFacturado2(conn, strMsg);
                }
            } 
            catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        public boolean EstadoFacturado2(java.sql.Connection conn, String strMsg) {
            boolean blnRes = false;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            try {
                if (conn != null) {
                    stmLoc = conn.createStatement();
                    strSql = "select  st_reg ,case when (co_locrelsoldevven is null and co_tipdocrelsoldevven is null and co_docrelsoldevven is null) then 'S' else 'N' end as estguia "
                            + " from tbm_cabcotven "
                            + "where  co_emp = " + objZafParSis.getCodigoEmpresa() + " and  "
                            + "co_loc = " + objZafParSis.getCodigoLocal() + " and  "
                            + "co_cot = " + ((txtCot.getText().equals("")) ? "0" : txtCot.getText());
                    rstLoc = stmLoc.executeQuery(strSql);
                    if (rstLoc.next()) {
                        if (rstLoc.getString("st_reg").trim().equals("F")) {
                            MensajeInf("La Cotización Ya esta Facturado.\nNo es posible " + strMsg + " una Cotización Facturado.");
                            return false;
                        } else {
                            return false;
                        }
                    }
                    rstLoc.close();
                    rstLoc = null;
                    stmLoc.close();
                    stmLoc = null;
                }
            } 
            catch (java.sql.SQLException e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            } 
            catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        private boolean getVerficarCamDetCot() {
            boolean blnRes = true;
            String strEstApl = "";
            double dblValAct = 0;
            double dblValOri = 0;
            try {
                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                        strEstApl = (tblDat.getValueAt(i, INT_TBL_CODREGCOT) == null ? "" : (tblDat.getValueAt(i, INT_TBL_CODREGCOT).equals("") ? "" : tblDat.getValueAt(i, INT_TBL_CODREGCOT).toString()));
                        if ((!strEstApl.equals(""))) {


                            if (objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)).equals(objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITMRES)))) {

                                dblValAct = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_CANMOV)), 4);
                                dblValOri = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_CANVENRES)), 4);
                                if (dblValAct == dblValOri) {

                                    dblValAct = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PREUNI)), 4);
                                    dblValOri = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PREVTARES)), 4);
                                    if (dblValAct == dblValOri) {

                                        dblValAct = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PORDES)), 4);
                                        dblValOri = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PORDESRES)), 4);
                                        if (dblValAct == dblValOri) {
                                            blnRes = true;

                                        } else {
                                            blnRes = false;
                                            break;
                                        }
                                    } else {
                                        blnRes = false;
                                        break;
                                    }
                                } else {
                                    blnRes = false;
                                    break;
                                }

                            } else {
                                blnRes = false;
                                break;
                            }


                        }
                    }
                }

// System.out.println("-getVerficarCamDetCot-->  "+blnRes );


            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        private boolean actualizarPrecioLista() {
            boolean blnRes = true;
            String strEstApl = "";
            double dblValAct = 0;
            double dblValOri = 0;
            double dblPreVtaAct = 0;
            try {
//System.out.println("ZafVen01.actualizarPrecioLista");

                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                        strEstApl = (tblDat.getValueAt(i, INT_TBL_CODREGCOT) == null ? "" : (tblDat.getValueAt(i, INT_TBL_CODREGCOT).equals("") ? "" : tblDat.getValueAt(i, INT_TBL_CODREGCOT).toString()));
                        if ((!strEstApl.equals(""))) {

//          dblValAct = objUti.redondear( objInvItm.getIntDatoValidado( tblDat.getValueAt(i, INT_TBL_CANMOV) ) , 4);
//          dblValOri = objUti.redondear( objInvItm.getIntDatoValidado( tblDat.getValueAt(i, INT_TBL_CANVENRES) ) , 4);
//          if( dblValAct != dblValOri ){

                            dblPreVtaAct = getPreVta(CONN_GLO, objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)));
                            tblDat.setValueAt("" + dblPreVtaAct, i, INT_TBL_PRELISITM);
                            tblDat.setValueAt("" + dblPreVtaAct, i, INT_TBL_PRELISITM2);

//          }else{
//                dblValAct = objUti.redondear( objInvItm.getIntDatoValidado( tblDat.getValueAt(i, INT_TBL_PREUNI) ) , 4);
//                dblValOri = objUti.redondear( objInvItm.getIntDatoValidado( tblDat.getValueAt(i, INT_TBL_PREVTARES) ) , 4);
//                if( dblValAct != dblValOri ){
//                    
//                     dblPreVtaAct=getPreVta(CONN_GLO, objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)) );
//                     tblDat.setValueAt( ""+dblPreVtaAct, i, INT_TBL_PRELISITM );
//                     tblDat.setValueAt( ""+dblPreVtaAct, i, INT_TBL_PRELISITM2 );
//
//                }else{
//                     dblValAct = objUti.redondear( objInvItm.getIntDatoValidado( tblDat.getValueAt(i, INT_TBL_PORDES) ) , 4);
//                     dblValOri = objUti.redondear( objInvItm.getIntDatoValidado( tblDat.getValueAt(i, INT_TBL_PORDESRES) ) , 4);
//                     if( dblValAct == dblValOri ){
//                             dblPreVtaAct=getPreVta(CONN_GLO, objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)) );
//                             tblDat.setValueAt( ""+dblPreVtaAct, i, INT_TBL_PRELISITM );
//                             tblDat.setValueAt( ""+dblPreVtaAct, i, INT_TBL_PRELISITM2 );
//                     }
//                }
//          }



                        }
                    }
                }

            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        private boolean actualizarPrecioListaItem() {
            boolean blnRes = true;
            String strEstApl = "";
            double dblValAct = 0;
            double dblValOri = 0;
            double dblPreVtaAct = 0;
            double dblPreUni = 0;
            double dblPorDes = 0;
            try {
//System.out.println("ZafVen01.actualizarPrecioListaItem");

                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                        strEstApl = (tblDat.getValueAt(i, INT_TBL_CODREGCOT) == null ? "" : (tblDat.getValueAt(i, INT_TBL_CODREGCOT).equals("") ? "" : tblDat.getValueAt(i, INT_TBL_CODREGCOT).toString()));
                        if ((!strEstApl.equals(""))) {

                            dblValAct = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_CANMOV)), 4);
                            dblValOri = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_CANVENRES)), 4);
                            if (dblValAct != dblValOri) {

                                dblPreVtaAct = getPreVta(CONN_GLO, objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)));
                                tblDat.setValueAt("" + dblPreVtaAct, i, INT_TBL_PRELISITM);
                                tblDat.setValueAt("" + dblPreVtaAct, i, INT_TBL_PRELISITM2);

                            } else {
                                dblValAct = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PREUNI)), 4);
                                dblValOri = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PREVTARES)), 4);
                                if (dblValAct != dblValOri) {

                                    dblPreVtaAct = getPreVta(CONN_GLO, objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)));
                                    tblDat.setValueAt("" + dblPreVtaAct, i, INT_TBL_PRELISITM);
                                    tblDat.setValueAt("" + dblPreVtaAct, i, INT_TBL_PRELISITM2);

                                } else {
                                    dblValAct = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PORDES)), 4);
                                    dblValOri = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PORDESRES)), 4);
                                    if (dblValAct != dblValOri) {
                                        dblPreVtaAct = getPreVta(CONN_GLO, objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)));
                                        tblDat.setValueAt("" + dblPreVtaAct, i, INT_TBL_PRELISITM);
                                        tblDat.setValueAt("" + dblPreVtaAct, i, INT_TBL_PRELISITM2);
                                    } else {

                                        /**
                                         * ***************************************
                                         */
                                        dblPreUni = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PREUNI)), 4);
                                        dblPorDes = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PORDES)), 4);
                                        dblValAct = objUti.redondear((dblPreUni - (dblPreUni * (dblPorDes / 100))), 4);

                                        dblPreUni = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PRELISITM)), 4);
                                        dblPorDes = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_DESVENMAX)), 4);
                                        dblValOri = objUti.redondear((dblPreUni - (dblPreUni * (dblPorDes / 100))), 4);

                                        if (dblValAct < dblValOri) {
                                            blnActTodItmCot = true;
                                            break;
                                        }

                                        /**
                                         * ***************************************
                                         */
                                    }
                                }
                            }
                        }
                    }
                }

            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

    private double getPreVta(java.sql.Connection conn, String strCodItm) {
        double dblPreUni = 0;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;
        String strSql = "";
        try {
            if (conn != null) {
                stmLoc = conn.createStatement();

                strSql = " SELECT nd_prevta1 FROM tbm_inv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_itm=" + strCodItm;
                rstLoc = stmLoc.executeQuery(strSql);
                if (rstLoc.next()) {
                    dblPreUni = rstLoc.getDouble("nd_prevta1");
                }
                rstLoc.close();
                rstLoc = null;
                stmLoc.close();
                stmLoc = null;
            }
        } 
        catch (java.sql.SQLException Evt) {
            objUti.mostrarMsgErr_F1(this, Evt);
        } 
        catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(this, Evt);
        }
        return dblPreUni;
    }
        
        
        public boolean _getDiaValCotVen() {
            boolean blnRes = false;
            Statement stmLoc;
            ResultSet rstLoc;
            String strSql = "", strEstReg = "";
            try {
                if (CONN_GLO != null) {
                    stmLoc = CONN_GLO.createStatement();
                    if (!txtCot.getText().equals("")) {
                        strSql = "SELECT st_reg, current_date, fe_val ,case when  current_date > fe_val then 'S' else 'N' end as estVal "
                                + " FROM tbm_cabcotven WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                                + " AND co_cot= " + txtCot.getText();
                        rstLoc = stmLoc.executeQuery(strSql);
                        if (rstLoc.next()) {
                            strEstReg = (rstLoc.getString("st_reg") == null) ? "A" : rstLoc.getString("st_reg");
                            if (!strEstReg.equals("U")) {  // dias de validez de cotizacion, no volver a comprobar si la cotizacion esta autorizada.
                                if (rstLoc.getString("estVal").equals("S")) {
                                    blnRes = true;
                                }
                            }
                        }
                        rstLoc.close();
                        rstLoc = null;
                    }
                    stmLoc.close();
                    stmLoc = null;
                }
            } 
            catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(jfrThis, e);
            } 
            catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }

        @Override
        public boolean modificar() {
            if(isTransferenciaInventario()){
                MensajeInf("El documento está en proceso de Transferencia de Inventario.\nNo es posible modificar un documento en proceso de Transferencia.");
                return false;
            }  
            
            if(!validaDatosDescuento()){
                return false;
            }
            
            if(isCotizacionConReservas()){
                MensajeInf("El documento posee items con reservas de Inventario.\nNo es posible modificar un documento con Reservas.");
                return false;
            }
            
            blnActTodItmCot = false;
            strAux = objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado")) {
                MensajeInf("El documento está ELIMINADO.\nNo es posible modificar un documento eliminado.");
                return false;
            }
            
            if (strAux.equals("Anulado")) {
                MensajeInf("El documento está ANULADO.\nNo es posible modificar un documento anulado.");
                return false;
            }
            
            if (!validaCampos()) {
                CerrarCon();
                return false;
            }
            

            abrirCon();

            if (estadoFacCotVen("modificar")) {
                CerrarCon();
                return false;
            }

            blnEstFecVal = !getVerficarCamDetCot();


            if (blnEstFecVal) {
                actualizarPrecioListaItem();
            }


            if (blnActTodItmCot) {
                actualizarPrecioLista();
            }


            if (_getDiaValCotVen()) {
                blnEstFecVal = true;
                actualizarPrecioLista();
            }


            if (!validaCampos()) {
                CerrarCon();
                return false;
            }
            guardar_Historicos_Cot();
            
            if (!actualizarReg()) {
                if (CONN_GLO != null) {
                    System.out.println("8-No es nula");
                } else {
                    System.out.println("8-Si es nula");
                }

                CerrarCon();
                if (blnHayCam_glo_tbl == false) {
                    objTblMod.setDataModelChanged(false);
                }
                return false;
            } else {
                recargarDetCot(CONN_GLO, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), txtCot.getText());

                if (CONN_GLO != null) {
                    System.out.println("9-No es nula");
                } else {
                    System.out.println("9-Si es nula");
                }

            }

            CerrarCon();

            objTblMod.setDataModelChanged(false);

            blnHayCam = false;
            return BLN_ESTADO;
        }

        public boolean modificar_res() {
//            System.out.println("ZafVen01.modificar_res");

            strAux = objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado")) {
                MensajeInf("El documento está ELIMINADO.\nNo es posible modificar un documento eliminado.");
                return false;
            }
            if (strAux.equals("Anulado")) {
                MensajeInf("El documento está ANULADO.\nNo es posible modificar un documento anulado.");
                return false;
            }

            abrirCon();


            if (estadoFacCotVen("modificar")) {
                CerrarCon();
                return false;
            }


            if (!validaCampos()) {
                CerrarCon();
                return false;
            }


            if (!actualizarReg()) {
                CerrarCon();
                if (blnHayCam_glo_tbl == false) {
                    objTblMod.setDataModelChanged(false);
                }
                return false;
            }
            objTblMod.setDataModelChanged(false);
            CerrarCon();

            blnHayCam = false;
            return true;
        }

        @Override
        public boolean cancelar() {
            boolean blnRes = true;
            try {
//                System.out.println("ZafVen01.cancelar");

                intMosVenAut = 0;

                if (blnHayCam || objTblMod.isDataModelChanged()) {
                    if (objTooBar.getEstado() == 'n' || objTooBar.getEstado() == 'm') {
                        if (!isRegPro()) {
                            return false;
                        }
                    }
                }
                if (rstCab != null) {
                    rstCab.close();
                    if (stmCab != null) {
                        stmCab.close();
                        stmCab = null;
                    }
                    rstCab = null;

                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
            clnTextos();
            blnHayCam = false;
            return blnRes;
        }

        @Override
        public boolean aceptar() {
            return true;
        }

        @Override
        public boolean afterAceptar() {
            return true;
        }

        @Override
        public boolean afterAnular() {
            return true;
        }

        @Override
        public boolean afterCancelar() {
            objTblMod.setDataModelChanged(false);
            blnHayCam = false;
            return true;
        }

        @Override
        public boolean afterConsultar() {
            butMakeFactura.setEnabled(true);
            butCopyCot.setEnabled(true);
            butCopyInmaconsa.setEnabled(true); //JoséMarín 6/Feb/2015 
            rdoNA.setEnabled(false);
            rdoInicio.setEnabled(false);
            rdoFinal.setEnabled(false);
            butVisOc.setEnabled(true);
            /* JM 22/Jun/2017 */
            btnODRes.setEnabled(true);
            btnSolRes.setEnabled(true);
            btnReservas.setEnabled(false);
            /* JM 22/Jun/2017 */
            validacionesMovimiento();

            return true;
        }

        @Override
        public boolean afterEliminar() {
            return true;
        }

        @Override
        public boolean afterImprimir() {
            return true;
        }

        @Override
        public boolean afterInsertar() {
            this.setEstado('w');
            butCopyCot.setEnabled(true);
            butCopyInmaconsa.setEnabled(true); //JoséMarín 6/Feb/2015 
            butMakeFactura.setEnabled(true);
            butVisOc.setEnabled(true);
            objTblMod.initRowsState();
            rdoNA.setEnabled(false);
            rdoInicio.setEnabled(false);
            rdoFinal.setEnabled(false);
            blnHayCam = false;
            intMosVenAut = 0;
            intMosVenAut = 0;
            /* JM 22/Jun/2017 */
            btnSolRes.setEnabled(true);
            btnODRes.setEnabled(true);
            btnReservas.setEnabled(true);
            /* JM 22/Jun/2017 */

            return true;
        }

        @Override
        public boolean afterModificar() {
            objTblMod.clearDataSavedBeforeRemoveRow();
            blnHayCam = false;
            this.setEstado('w');
            butCopyCot.setEnabled(true);
            butCopyInmaconsa.setEnabled(true); //JoséMarín 6/Feb/2015 
            butMakeFactura.setEnabled(true);
            butVisOc.setEnabled(true);
            objTblMod.initRowsState();
            rdoNA.setEnabled(false);
            rdoInicio.setEnabled(false);
            rdoFinal.setEnabled(false);
            /* JM 22/Jun/2017 */
            btnSolRes.setEnabled(true);
            btnODRes.setEnabled(false);
            btnReservas.setEnabled(false);
            /* JM 22/Jun/2017 */

            blnHayCam = false;
            return true;
        }

        @Override
        public boolean afterVistaPreliminar() {
            return true;
        }

        
        private boolean isTransferenciaInventario(){
            boolean blnRes=false;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            java.sql.Connection conLoc;
            String strCadena="";
            try{
                conLoc=DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                if (conLoc != null) {
                    stmLoc = conLoc.createStatement();
                    strCadena="";
                    strCadena+=" SELECT a1.co_seg \n";
                    strCadena+=" FROM tbm_cabSegMovInv as a1 \n";
                    strCadena+=" where a1.co_empRelCabCotVen="+objZafParSis.getCodigoEmpresa()+" and a1.co_locRelCabCotVen="+objZafParSis.getCodigoLocal()+" and \n";
                    strCadena+="       a1.co_cotRelCabCotVen="+txtCot.getText()+" \n";
                    rstLoc=stmLoc.executeQuery(strCadena);
                    if(rstLoc.next()){
                        blnRes=true;
                    }
                    rstLoc.close();
                    stmLoc.close();
                    rstLoc=null;
                    stmLoc=null;
                }
                conLoc.close();
                conLoc=null;
            } catch (SQLException Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnRes=false;
            }
            catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnRes=false;
            }
            return blnRes;
        }
              
        private boolean isCotizacionConReservas(){
            boolean blnRes=false;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            java.sql.Connection conLoc;
            String strCadena="";
            try{
                conLoc=DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                if (conLoc != null) {
                    stmLoc = conLoc.createStatement();
                    strCadena="";
                    strCadena+=" SELECT a1.co_emp \n";
                    strCadena+=" FROM tbm_cabCotVen as a1 \n";
                    strCadena+=" INNER JOIN tbr_cabCotVen as a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_cot=a2.co_cot) ";
                    strCadena+=" WHERE a1.co_emp="+objZafParSis.getCodigoEmpresa()+" and a1.co_loc="+objZafParSis.getCodigoLocal()+" and \n";
                    strCadena+="       a1.co_cot="+txtCot.getText()+" AND a2.tx_tipRel='R' \n";
                    rstLoc=stmLoc.executeQuery(strCadena);
                    if(rstLoc.next()){
                        blnRes=true;
                    }
                    rstLoc.close();
                    stmLoc.close();
                    rstLoc=null;
                    stmLoc=null;
                }
                conLoc.close();
                conLoc=null;
            } catch (SQLException Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnRes=false;
            }
            catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnRes=false;
            }
            return blnRes;
        }
        
        
              
        /**
         * Aqui se verifica si el cliente y proveedor estan dados de alto por el
         * respectivas personas
         *
         * @param conn conecion de la base
         * @return true: si esta todo bien
         * @return false: si necesita ser dado de alta
         */
        private boolean verificaEstCliPrv(java.sql.Connection conn) {
            boolean blnRes = true;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strSql = "";
            String strMesj = "";
            String strMesjCli = "";
            String strMesjPrv = "";
            try {
//      System.out.println("ZafVen01.verificarEstCliPrv");

                if (conn != null) {
                    stmLoc = conn.createStatement();

                    strSql = "SELECT x.co_cli, x.co_prv, a3.st_reg as stcli, a4.st_reg as stprv, a3.st_cli, a4.st_prv, a3.tx_nom as nomcli "
                            + ",a4.tx_nom as nomprv FROM ("
                            + " select a.co_Emp, a.co_cot, a.co_cli, a1.co_prv from tbm_cabcotven as a"
                            + " inner join tbm_detcotven as a1 on(a1.co_emp=a.co_emp and a1.co_loc=a.co_loc and a1.co_cot=a.co_cot) "
                            + " where a.co_Emp=" + objZafParSis.getCodigoEmpresa() + " AND a.co_Loc=" + objZafParSis.getCodigoLocal() + " "
                            + " AND a.co_cot=" + txtCot.getText() + " ) as x "
                            + " inner join tbm_cli as a3 on (a3.co_emp=x.co_emp and  a3.co_cli=x.co_cli) "
                            + " left join tbm_cli as a4 on (a4.co_emp=x.co_emp and  a4.co_cli=x.co_prv) ";
//          System.out.println(" verificaEstCliPrv: "+ strSql);
                    rstLoc = stmLoc.executeQuery(strSql);
                    while (rstLoc.next()) {
                        if (rstLoc.getInt("co_cli") != 0) {
                            if (rstLoc.getString("stcli").equals("N")) {
                                strMesjCli = "<html>LOS DATOS DEL CLIENTE:  <FONT COLOR=\"blue\"> " + rstLoc.getString("nomcli") + " </font>  TIENE QUE SER REVISADO.</html>";
                                blnRes = false;
                            }
                        }
                        if (rstLoc.getInt("co_prv") != 0) {
                            if (rstLoc.getString("stprv").equals("N")) {
                                strMesjPrv += "<html>LOS DATOS DEL PROVEEDOR: <FONT COLOR=\"blue\"> " + rstLoc.getString("nomprv") + "</font>  TIENE QUE SER REVISADO.</html>\n";
                                blnRes = false;
                            }
                        }
                    }
                    if (!blnRes) {
                        strMesj = strMesjCli + "\n" + strMesjPrv;
                        mostrarMsg(strMesj);
                    }
                    rstLoc.close();
                    rstLoc = null;
                    stmLoc.close();
                    stmLoc = null;
                }
            } catch (java.sql.SQLException e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        /**
         * Aqui se verifica si el cliente y proveedor estan dados de alto por el
         * respectivas personas
         *
         * @param conn conecion de la base
         * @return true: si esta todo bien
         * @return false: si necesita ser dado de alta
         */
        private boolean verificaEstCli(java.sql.Connection conn) {
            boolean blnRes = true;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strSql = "";
            String strMesj = "";
            String strMesjCli = "";
            String strMesjPrv = "";
            try {
//      System.out.println("ZafVen01.verificaEstCli");

                if (conn != null) {
                    stmLoc = conn.createStatement();

                    strSql = "SELECT st_reg as stcli FROM tbm_cli where co_Emp=" + objZafParSis.getCodigoEmpresa() + " and co_cli=" + txtCliCod.getText() + " ";
//          System.out.println(" verificaEstCli:  " + strSql);
                    rstLoc = stmLoc.executeQuery(strSql);
                    while (rstLoc.next()) {
                        if (rstLoc.getString("stcli").equals("N")) {
                            strMesjCli = "<html>LOS DATOS DEL CLIENTE:  <FONT COLOR=\"blue\"> " + txtCliNom.getText() + " </font>  TIENE QUE SER REVISADO.</html>";
                            blnRes = false;
                        }
                    }
                    if (!blnRes) {
                        strMesj = strMesjCli + "\n" + strMesjPrv;
                        mostrarMsg(strMesj);
                    }
                    rstLoc.close();
                    rstLoc = null;
                    stmLoc.close();
                    stmLoc = null;
                }
            } catch (java.sql.SQLException e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }
        
        
        
        private void insertaDetalleDespacho(String txtCod,String txtVehRet,String txtChoRet){
            java.sql.Statement stmLoc;
            java.sql.Connection conLoc;
            String strCadena="";
            try{
                conLoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                if(conLoc!=null){
                    stmLoc=conLoc.createStatement();
                    strCadena+=" UPDATE tbm_cabCotVen SET co_forRet="+objUti.codificar(txtCod,0)+", tx_vehRet="+objUti.codificar(txtVehRet, 0);
                    strCadena+=" , tx_choRet="+objUti.codificar(txtChoRet,0)+"  \n";
                    strCadena+=" WHERE co_emp="+objZafParSis.getCodigoEmpresa()+" AND co_loc="+objZafParSis.getCodigoLocal()+" \n";
                    strCadena+="       AND co_cot="+txtCot.getText()+"; \n";
                    System.out.println("Actualiza cotizacion Forma de retiro: \n" + strCadena);
                    stmLoc.executeUpdate(strCadena);
                    stmLoc.close();
                    stmLoc=null;
                }
                conLoc.close();
                conLoc=null;
            }
            catch(java.sql.SQLException Evt){ 
                objUti.mostrarMsgErr_F1(null, Evt); 
            }
            catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(null, Evt);  
            }
        }

        private boolean verificaNumLinFac(java.sql.Connection conn, int intCodEmp, int intCodLoc, int intCodTipDocFacEle) {
            boolean blnRes = false;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strSql = "";
            int intNumLinCot = 0;
            try {
//     System.out.println("ZafVen01.verificaNumLinFac");

                stmLoc = conn.createStatement();

                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                        intNumLinCot++;
                    }
                }

                strSql = "SELECT ne_numlin FROM tbm_cabTipDoc WHERE co_emp=" + intCodEmp + " AND co_loc=" + intCodLoc + " AND co_tipDoc=" + intCodTipDocFacEle + " and ne_numlin >= " + intNumLinCot;
                System.out.println(" verificaNumLinFac:  " + strSql);
                rstLoc = stmLoc.executeQuery(strSql);
                if (rstLoc.next()) {
                    blnRes = true;
                }
                rstLoc.close();
                rstLoc = null;

                if (!blnRes) {
                    mostrarMsg("HA SOBREPASADO EL NÚMERO DE LÍNEAS PARA LA FACTURA.");
                }


                stmLoc.close();
                stmLoc = null;
            } catch (java.sql.SQLException e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        public boolean insertaCotToFac(java.sql.Connection conModCot) {
            boolean blnRes = false;
            calculaPag();
            try {
                System.out.println("ZafVen01.insertaCotToFac xD");

                if (conModCot != null) {
                    int EstAut = 0;
                    blnHayCam_Pag = false;
                    blnActTodItmCot = false;

                    blnEstFecVal = !getVerficarCamDetCot();

                    if (blnEstFecVal) {
                        actualizarPrecioListaItem();
                    }

                    if (blnActTodItmCot) {
                        actualizarPrecioLista();
                    }



                    if (_getDiaValCotVen()) {
                        blnHayCam_glo = true;
                        blnEstFecVal = true;
                        actualizarPrecioLista();
                    }

                    if (!verificaEstCliPrv(conModCot)) {
                        return false;
                    }

                    if (!verificaEstCli(conModCot)) {
                        return false;
                    }

                    //      FACTURACION ELECTRONICA - José Marín M 3/Oct/2014
                    
                    if (!verificaNumLinFac(conModCot, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intCodTipDocFacEle)) {
                        return false;
                    }
                    
                    



                    if (!txtCodForPag2.getText().equals("")) {
                        if (!(txtCodForPag2.getText().equals(txtCodForPag.getText().trim()))) {
                            blnHayCam_Pag = true;
                        }
                    }

                    //     -ZafAut-  
                    //
                    //     * 1 Todo Ok .... se puede grabar el documento correctamente
                    //     * 2 Solicita autorizacion
                    //     * 3 Cancela la grabacion.. El usuario no quiere hacer ninguna accion.
                    //            

                    EstAut = 1;
                    if (blnHayCam_glo == true || blnHayCam_glo_tbl == true || blnHayCam_Pag == true) {
                        EstAut = objAutPrg.checkCtls(conModCot);
                    } else {
                        EstAut = objAutPrg.checkCtlsCot("tbm_cabautcotven", "tbm_detautcotven", Integer.parseInt(txtCot.getText()), conModCot);
                    }
                    switch (EstAut) {
                        case 1: // Todo Correcto

                            limpiarCompVenItm();
                            objTblMod.setDataModelChanged(false);
                            blnHayCam_glo = false;
                            blnHayCam_glo_tbl = false;
                            blnHayCam_Pag = false;


                            String strMsg2 = "¿Está Seguro que desea Facturar?";
                            //JOptionPane oppMsg2=new JOptionPane();
                            //String strTit2="Mensaje del sistema Zafiro";
                            if (JOptionPane.showConfirmDialog(jfrThis, strMsg2, strTit, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == 1) {
                                return true;
                            }
                            /* JoseMario 26/Ene/2016 -- MaElena  */
                            if(isLocalPrincipal()){
                                Ventas.ZafVen01.ZafVen01_03 obj = new Ventas.ZafVen01.ZafVen01_03(JOptionPane.getFrameForComponent(this), true, objZafParSis, true);
                                obj.show();
                                if (obj.acepta()) {
                                    txtCod.setText(obj.GetCamSel(1));
                                    txtDes.setText(obj.GetCamSel(2));
                                    txtVehRet.setText(obj.GetCamSel(3));
                                    txtChoRet.setText(obj.GetCamSel(4));
                                } else {
                                    return true;
                                }
                                obj.dispose();
                                obj = null;
                            }
                            else{
                                Ventas.ZafVen01.ZafVen01_03 obj = new Ventas.ZafVen01.ZafVen01_03(JOptionPane.getFrameForComponent(this), true, objZafParSis);
                                obj.show();
                                if (obj.acepta()) {
                                    txtCod.setText(obj.GetCamSel(1));
                                    txtDes.setText(obj.GetCamSel(2));
                                    txtVehRet.setText(obj.GetCamSel(3));
                                    txtChoRet.setText(obj.GetCamSel(4));
                                } else {
                                    return true;
                                }
                                obj.dispose();
                                obj = null;
                            }
                            
                            insertaDetalleDespacho(txtCod.getText(),txtVehRet.getText(),txtChoRet.getText());

                            if (blnHayCam_glo == true || blnHayCam_glo_tbl == true || blnHayCam_Pag == true) {
                                guardar_Historicos_Cot();
                            }
 

//                            if(blnHayCam_glo){
                            conModCot.setAutoCommit(false);
                            if (modificarCab(conModCot, false, "A")) {
                                if (modificarDet(conModCot)) {
                                    if (modificarPag(conModCot)) {
                                        if(objResInv.cotizacionVieneDeReservas(conModCot, objZafParSis.getCodigoEmpresa(), 
                                                                                   objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText()) )){
                                            blnManRes=true;
                                            if(proyectoReservasInventarioModificando(conModCot,  Integer.parseInt(txtCot.getText())) ){
                                                recargarDetCot(conModCot, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), txtCot.getText());
                                                conModCot.commit();
                                                ZafVen01.creaFac objCreaFac = new ZafVen01.creaFac();
                                                if (objCreaFac.insertar(conModCot)) {
                                                    blnRes = true;
                                                    if (intCodMenuOri == 1612) { // "Cotizaciones de venta (Siguiente mes)..." José Marín 7/Oct/2014
                                                        cerrarObj();
                                                        //System.gc();
                                                        Runtime.getRuntime().gc();
                                                        dispose();
                                                    }
                                                } else {
                                                    conModCot.rollback();
                                                }
                                            }
                                        }
                                        else{
                                            blnManRes=false;
                                            recargarDetCot(conModCot, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), txtCot.getText());
                                            conModCot.commit();
                                            ZafVen01.creaFac objCreaFac = new ZafVen01.creaFac();
                                            if (objCreaFac.insertar(conModCot)) {
                                                blnRes = true;
                                                if (intCodMenuOri == 1612) { // "Cotizaciones de venta (Siguiente mes)..." José Marín 7/Oct/2014
                                                    cerrarObj();
                                                    //System.gc();
                                                    Runtime.getRuntime().gc();
                                                    dispose();
                                                }
                                            } else {
                                                conModCot.rollback();
                                            }
                                        }
                                        
                                    } else {
                                        conModCot.rollback();
                                    }
                                } else {
                                    conModCot.rollback();
                                }
                            } else {
                                conModCot.rollback();
                            }
                            if (!blnRes) {
                                //JOptionPane oppMsg = new JOptionPane();
                                String strMsg;
                                //strTit="Mensaje del sistema Zafiro";
                                strMsg = "No se puede crear una factura ";
                                JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                            }
                            break;

                        case 2: //Solicita autorizacion
                            conModCot.setAutoCommit(false);

                            if (blnHayCam_glo == true || blnHayCam_glo_tbl == true || blnHayCam_Pag == true) {
                                blnHayCam = blnHayCam_glo;

                                guardar_Historicos_Cot();


                                if (modificarCab(conModCot, true, "P")) {
                                    if (modificarDet(conModCot)) {
                                        if (modificarPag(conModCot)) {
                                            if(objResInv.cotizacionVieneDeReservas(conModCot, objZafParSis.getCodigoEmpresa(), 
                                                                                   objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText()) )){
                                                blnManRes=true;
                                                if(proyectoReservasInventarioModificando(conModCot,  Integer.parseInt(txtCot.getText())) ){
                                                    recargarDetCot(conModCot, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), txtCot.getText());
                                                    int intCods[] = {objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText())};
                                                    if (objAutPrg.insertarCabDetAut(conModCot, intCods, 3)) {
                                                        conModCot.commit();
                                                        blnHayCam = false;
                                                        if (!txtCodForPag2.getText().equals("")) {
                                                            if (!(txtCodForPag2.getText().equals(txtCodForPag.getText().trim()))) {
                                                                txtCodForPag2.setText(txtCodForPag.getText().trim());
                                                            }
                                                        }
                                                        objTblMod.setDataModelChanged(false);
                                                                                                        //blnRes = true;
                                                        blnRes = false;

                                                    } else {
                                                        conModCot.rollback();
                                                    }
                                                }
                                            }
                                            else{
                                                blnManRes=false;
                                                recargarDetCot(conModCot, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), txtCot.getText());
                                                int intCods[] = {objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText())};
                                                if (objAutPrg.insertarCabDetAut(conModCot, intCods, 3)) {
                                                    conModCot.commit();
                                                    blnHayCam = false;
                                                    if (!txtCodForPag2.getText().equals("")) {
                                                        if (!(txtCodForPag2.getText().equals(txtCodForPag.getText().trim()))) {
                                                            txtCodForPag2.setText(txtCodForPag.getText().trim());
                                                        }
                                                    }
                                                    objTblMod.setDataModelChanged(false);
                                                    blnRes = false;
                                                } else {
                                                    conModCot.rollback();
                                                }
                                            }
                                            
                                        } else {
                                            conModCot.rollback();
                                        }
                                    } else {
                                        conModCot.rollback();
                                    }
                                } else {
                                    conModCot.rollback();
                                }

                            } else {
                                System.out.println("else else else else ");
                                blnHayCam = blnHayCam_glo;
                                int intCods[] = {objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText())};
                                if (modificarCab(conModCot, false, "P")) {
                                    //***************************************

                                    java.sql.PreparedStatement pstInsPagCot = conModCot.prepareStatement(txtsql.getText());
                                    pstInsPagCot.executeUpdate();
                                    txtsql.setText("");
                                    pstInsPagCot.close();
                                    pstInsPagCot = null;
                                    if (objAutPrg.insertarCabDetAut_aut(conModCot, intCods, 3)) {
                                        conModCot.commit();
                                        blnHayCam = false;
                                        objTblMod.setDataModelChanged(false);
										//blnRes = true;
                                        blnRes = false;

                                    } else {
                                        conModCot.rollback();
                                    }
                                } else {
                                    conModCot.rollback();
                                }
                            }

                            //OptionPane oppMsg = new JOptionPane();
                            //String strTit, strMsg;
                            String strMsg;
                            //strTit="Mensaje del sistema Zafiro";
                            strMsg = "No se puede crear una factura, Necesita autorización para esta cotización";
                            JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                            break;
                    }
                }
            } catch (java.sql.SQLException e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        public boolean PreVtaMenorPreUni() {
            boolean blnRes = true;
            int INT_TBL_COITM = 17;
            int INT_TBL_PREVEN = 11;
            double dblPreUsr, dblPreUniItm, dblDescDigitado, dblDescAsignado = Glo_dlbMaxDes; // getDesCli(txtCliCod.getText());
            double dblMinimo, dblValorVenta, dblCostoItm = 0, dblPorDesCom = 0, dblPorGanancia = Glo_dlbMarUti; // getMarUti(txtCliCod.getText());
            System.out.println("GANANCIA " + dblPorGanancia);
            int intCoItm;
            double dblMarUtiItm = 0;
            try {
                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                        if (!(tblDat.getValueAt(i, INT_TBL_ITMSER).toString().equalsIgnoreCase("S"))) {
                  /*PRECIO*/dblPreUsr = objUti.redondeo(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PREUNI) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_PREUNI).toString()))), 6);
      /*MARGEN DE UTILIDAD*/dblMarUtiItm = objUti.redondear(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_MARUTI) == null || tblDat.getValueAt(i, INT_TBL_MARUTI).equals("")) ? "0" : (tblDat.getValueAt(i, INT_TBL_MARUTI).toString()))), 2);
                            ///*******************
                            if (tblDat.getValueAt(i, INT_TBL_ITMTER) != null) {
                                if (tblDat.getValueAt(i, INT_TBL_ITMTER).toString().trim().equalsIgnoreCase("S")) { ///ENTRO AKI SIENDO L
                                    dblPreUniItm = 0;
                                } else {
                                    dblPreUniItm = getPreUni(i, objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)));
                                }

                            } else {
                                dblPreUniItm = getPreUni(i, objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)));
                            }

                            ///*******************
                /*%DESC*/   dblDescDigitado = objUti.redondeo(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_PORDES).toString()))), 2);
/*PRECIO-DESCUENTO (en caso de tenerlo)*/        
                            dblValorVenta = (dblDescDigitado != 0) ? (dblPreUsr - (dblPreUsr * dblDescDigitado / 100)) : dblPreUsr;
                            int intTipPre = 0;
                            if (dblPreUniItm != 0) {  
                                dblMinimo = (dblDescAsignado != 0) ? (dblPreUniItm - (dblPreUniItm * dblDescAsignado / 100)) : dblPreUniItm;
                                intTipPre = 1;
                            } else {/* Si no tiene precio... por ser compra local o servicio ????? */
                                double dblStkAct = 0;
                                ///*******************
                                if (tblDat.getValueAt(i, INT_TBL_ITMTER) != null) {
                                    if (tblDat.getValueAt(i, INT_TBL_ITMTER).toString().trim().equalsIgnoreCase("S")) {
                                        dblStkAct = 0;
                                    } else {
                                        dblStkAct = getStkAct((tblDat.getValueAt(i, INT_TBL_CODITM) == null) ? "" : tblDat.getValueAt(i, INT_TBL_CODITM).toString());
                                    }
                                } else {
                                    dblStkAct = getStkAct((tblDat.getValueAt(i, INT_TBL_CODITM) == null) ? "" : tblDat.getValueAt(i, INT_TBL_CODITM).toString());
                                }
                                //*******************



                                if (!(tblDat.getValueAt(i, INT_TBL_ITMTER).toString().trim().equalsIgnoreCase("S"))) // if(dblStkAct != 0)
                                {
                                    dblCostoItm = getCosUni((tblDat.getValueAt(i, INT_TBL_CODITM) == null) ? "" : tblDat.getValueAt(i, INT_TBL_CODITM).toString());
                                } else {/*L*/
                                    if (tblDat.getValueAt(i, INT_TBL_PRE_COS) == null) {
                                        dblCostoItm = 0.00;
                                    } else {
                                        /*valor por el que se compra el item*/          
                                        dblCostoItm = Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PRE_COS).toString().equals("")) ? "0" : tblDat.getValueAt(i, INT_TBL_PRE_COS).toString()));
                                    }
                                    /*VALOR DE DESCUENTO EN COMPRA */
                                    if (tblDat.getValueAt(i, INT_TBL_DESPRECOM) == null) {
                                        dblPorDesCom = 0.00;
                                    } else {
                                        dblPorDesCom = Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_DESPRECOM).toString().equals("")) ? "0" : tblDat.getValueAt(i, INT_TBL_DESPRECOM).toString()));
                                    }

                                        /*COSTO DEL ITEM - EL DESCUENTO DEL COSTO*/
                                    dblCostoItm = objUti.redondear((dblCostoItm - (dblCostoItm * (dblPorDesCom / 100))), objZafParSis.getDecimalesBaseDatos());
                                }
// COSTO DEL ITME * 0.25
                                dblMinimo = dblCostoItm * dblPorGanancia;
                                dblMinimo = dblCostoItm + ((dblMinimo == 0) ? 0 : (dblMinimo / 100));//minimo PRECIO A VENDER!!! (con el descuento gloval 25%)
                            }
/*PRECIO-DESCUENTO (en caso de tenerlo)*/ 
                            dblValorVenta = objUti.redondear(dblValorVenta, 3);
                            dblMinimo = objUti.redondear(dblMinimo, 3);

                            //     = (1 - ( 2 / 2.25) 
                            double dblPor = (1 - (dblCostoItm / dblValorVenta)) * 100;
                            dblPor = objUti.redondear(dblPor, 3);

                            /*JoséMario  11/Agos/2015 */
                            double dblMas;
                            dblMas=dblPreUniItm*0.05; /* 16/Sep/2015 JoséMario */
                            dblMas=dblPreUniItm+dblMas; 
                            double dblMenos;
                            dblMenos=dblPreUniItm*0.05;  /* 16/Sep/2015 JoséMario  Solicitado por Werner Campoverde */
                            dblMenos=dblPreUniItm-dblMenos; 
                            if (intTipPre == 1) {
                                if(dblPreUniItm <= 0 ){
                                    blnRes = false;
                                    //tblDat.setValueAt("true",i,INT_TBL_BLNPRE);
                                    tblDat.setValueAt(true, i, INT_TBL_BLNPRE);
                                    System.out.println(" J ..True..Nuevo precio negativo o Cero ");
                                }
                                if (dblValorVenta < dblMinimo) {
                                    blnRes = false;
                                    //tblDat.setValueAt("true",i,INT_TBL_BLNPRE);
                                    tblDat.setValueAt(true, i, INT_TBL_BLNPRE);
                                    System.out.println(" 1 ..True........... ");
                                }
                                // 13.61 > 13.89
                                if (dblPreUsr > dblMas) {  // PRECIO NO MAYOR DEL 5% 
                                    blnRes = false;
                                    //tblDat.setValueAt(new Boolean(true),i,INT_TBL_BLNPRE); //
                                    tblDat.setValueAt("true", i, INT_TBL_BLNPRE); //INT_TBL_BLNPRE: 
                                    System.out.println(" 2 ..True........... ");
                                }
                                //   13.61  < 13.34
                                if (dblPreUsr < dblMenos) {  // PRECIO NO MENOR DEL 5% 
                                    blnRes = false;
                                    //tblDat.setValueAt(new Boolean(true),i,INT_TBL_BLNPRE); //
                                    tblDat.setValueAt("true", i, INT_TBL_BLNPRE); //INT_TBL_BLNPRE: 
                                    System.out.println(" 3 ..True........... ");
                                }
                            } else {
                                if (dblPor < dblMarUtiItm) {
                                    blnRes = false;
                                    //tblDat.setValueAt("true",i,INT_TBL_BLNPRE);
                                    // System.out.println(" 2 ..True........... ");

                                    tblDat.setValueAt(true, i, INT_TBL_BLNPRE);
                                    System.out.println(" 4 ..True........... ");
                                }
                            }


                        }
                    }
                }
                /* 
                    JM: Agregado el 23/Julio/2019 se encontro que para guardar la cotizacion debia 
                        controlar no solo el precio de los items sino tambien la forma de pago 
                        que esta en la cotizacion 
                */
                if (blnRes) {
                    blnRes = isUsrForPag();
                }

            } 
            catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }

            return blnRes;
        }
        
        
        /*
        
         *control; controla si el cliente tiene la forma de pago asignado que se ha selecciono
         */
        public boolean isUsrForPag() {   // ESQUEMA NUEVO DE VALIDACION DE FORMA DE PAGO
            boolean blnisCieCreRet = true;
            try{
                System.out.println("intTipForPagCfgCli " + intTipForPagCfgCli);
                System.out.println("intTipForPagCotizacion " + intTipForPagCotizacion);
                System.out.println("dblPesCfgCli " + dblPesCfgCli);
                System.out.println("dblPesCotizacion " + dblPesCotizacion);
                if (intTipForPagCfgCli != intTipForPagCotizacion) {
                    if (dblPesCfgCli < dblPesCotizacion) {
                        blnisCieCreRet = false;
                    } 
                }
                
            }  
            catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnisCieCreRet;
        }

        private double getCosUni(String int_co_itm) {
            double dblPreUni = 0;
            try {
                if (CONN_GLO != null) {
                    java.sql.Statement stmUni = CONN_GLO.createStatement();
                    String sSQL = "  SELECT a1.nd_cosUni FROM tbm_inv AS a1"
                            + " INNER JOIN tbm_equInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm)"
                            + " WHERE a2.co_emp=" + objZafParSis.getCodigoEmpresaGrupo() + " AND a2.co_itmMae=(SELECT co_itmMae FROM tbm_equInv WHERE co_emp= " + objZafParSis.getCodigoEmpresa() + " AND co_itm=" + int_co_itm + ")";
                    java.sql.ResultSet rstUni = stmUni.executeQuery(sSQL);
                    if (rstUni.next()) {
                        dblPreUni = rstUni.getDouble("nd_cosuni");
                    }
                    rstUni.close();
                    stmUni.close();
                    rstUni = null;
                    stmUni = null;
                }
            } catch (java.sql.SQLException Evt) {
                return dblPreUni;
            } catch (Exception Evt) {
                return dblPreUni;
            }
            return dblPreUni;
        }

      /**
       * Inserta la Cotizacion de Inventario
       * @return 
       */
        
        public boolean insertarReg() {
            boolean blnRes = false;
            String Estado = "A";
            int ESTPRE = 0;
            int Est = 0;

            verificaIvaItm(CONN_GLO);

            calculaSubTotTodLosItm();

            try {
                if (CONN_GLO != null) {
                    CONN_GLO.setAutoCommit(false);
                    dblPorIva = bldivaEmp;

                    int intNumCot = getUltCoDoc(CONN_GLO);
                    if (!PreVtaMenorPreUni()) {
                        ESTPRE = 1;
                    }

                    txtsql.setText("");


                    if (ESTPRE == 1) {
                        Est = objAutPrg.checkCtls(CONN_GLO);
                    }


                    System.out.println("INSERTAR COTIZACION Est" + Est);
                    if (Est == 0) {
                        if (intNumCot != -1) {
                            int intValor = objAutPrg.checkCtls_2(CONN_GLO);
                            if (insertarCab(CONN_GLO, intNumCot, false, Estado)) {
                                if (insertarDet(CONN_GLO, intNumCot)) {
                                    if (insertDetPag(intNumCot, CONN_GLO)) {
                                        int intCods[] = {objZafParSis.getCodigoLocal(), intNumCot};
                                        if (objAutPrg.insertarCabDetAut_2(CONN_GLO, intCods, 3, intValor)) {
                                            if(proyectoReservasInventario(CONN_GLO,intNumCot)){
                                                CONN_GLO.commit();
                                                blnRes = true;
                                                txtCot.setText(intNumCot + "");
                                                strCodLocSol = null;
                                                strCodTipDocSol = null;
                                                strCodDocSol = null;
                                                strNumCotSol = "";
                                                ObtenerFecNunVal(CONN_GLO, intNumCot);  //*******

                                                //String strTit, strMsg;
                                                String strMsg;
                                                //strTit="Mensaje del sistema Zafiro";
                                                strMsg = "¿Desea imprimir la cotizacion?";
                                                //JOptionPane obj =new JOptionPane();
                                                if (JOptionPane.showConfirmDialog(jfrThis, strMsg, strTit, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) == 0) {
                                                    imprimir();
                                                }
                                            }
                                            
                                        } else {
                                            CONN_GLO.rollback();
                                        }
                                    } else {
                                        CONN_GLO.rollback();
                                    }
                                } else {
                                    CONN_GLO.rollback();
                                }
                            } else {
                                CONN_GLO.rollback();
                            }
                        } else {
                            CONN_GLO.rollback();
                        }
                    }


                    if (Est == 2) {  ///************
                        System.out.println("INSERTAR COTIZACION Est" + Est);
                        Estado = "P";
                        if (intNumCot != -1) {
                            if (insertarCab(CONN_GLO, intNumCot, false, Estado)) {
                                if (insertarDet(CONN_GLO, intNumCot)) {
                                    if (insertDetPag(intNumCot, CONN_GLO)) {
                                        int intCods[] = {objZafParSis.getCodigoLocal(), intNumCot};
                                        if (objAutPrg.insertarCabDetAut(CONN_GLO, intCods, 3)) {
                                            if(proyectoReservasInventario(CONN_GLO,intNumCot)){
                                                CONN_GLO.commit();
                                                blnRes = true;
                                                txtCot.setText(intNumCot + "");
                                                ObtenerFecNunVal(CONN_GLO, intNumCot);  //*******
                                            }
                                        } else {
                                            CONN_GLO.rollback();
                                        }
                                    } else {
                                        CONN_GLO.rollback();
                                    }
                                } else {
                                    CONN_GLO.rollback();
                                }
                            } else {
                                CONN_GLO.rollback();
                            }
                        } else {
                            CONN_GLO.rollback();
                        }

                    }

                }  ///*********
            } catch (SQLException Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                return false;
            } catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                return false;
            }
            return blnRes;
        }
        
        /**
         * Metodo para solicitar una cotizacion use items que estan reservados
         * @param conExt
         * @param CodCot
         * @return 
         */
        
        private boolean proyectoReservasInventario(java.sql.Connection conExt, int CodCot){
            boolean blnRes=true;
            int intCodEmpCot, intCodLocCot,intCodCotTmp=-1;
            int intCodEmpRelResInv, intCodLocRelResInv, intCodCotRelResInv, intCodRegCotRelResInv;
            try{
                if(conExt!=null){
                    System.out.println("proyectoReservasInventario.blnManRes: " + blnManRes);
                     
                    if(blnManRes){
                        intCodEmpCot = objZafParSis.getCodigoEmpresa();
                        intCodLocCot = objZafParSis.getCodigoLocal();
                        System.out.println("MANEJA RESERVAS >>>>> xD");
                        for (int i = 0; i < tblDat.getRowCount(); i++) {
                            if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                                if(tblDat.getValueAt(i, INT_TBL_COD_COT_RES)!=null){
                                    intCodEmpRelResInv = Integer.parseInt(tblDat.getValueAt(i, INT_TBL_COD_EMP_COT_RES).toString());
                                    intCodLocRelResInv = Integer.parseInt(tblDat.getValueAt(i, INT_TBL_COD_LOC_COT_RES).toString());
                                    intCodCotRelResInv = Integer.parseInt(tblDat.getValueAt(i, INT_TBL_COD_COT_RES).toString());
                                    intCodRegCotRelResInv = Integer.parseInt(tblDat.getValueAt(i, INT_TBL_COD_COT_REG_RES).toString());
                                    if(intCodCotTmp==-1){
                                        if(objResInv.insertarTbr_cabCotVen(conExt, intCodEmpCot, intCodLocCot, CodCot, 
                                                                            intCodEmpRelResInv, intCodLocRelResInv, intCodCotRelResInv)){
                                            if(objResInv.insertarTbr_detCotVen(conExt, intCodEmpCot, intCodLocCot, CodCot, (i+1), 
                                                                                     intCodEmpRelResInv, intCodLocRelResInv, intCodCotRelResInv, intCodRegCotRelResInv)){
                                            }else{blnRes=false;}
                                        }else{blnRes=false;}
                                        intCodCotTmp = Integer.parseInt(tblDat.getValueAt(i, INT_TBL_COD_COT_RES).toString());
                                    }
                                    else{
                                        if(intCodCotTmp != Integer.parseInt(tblDat.getValueAt(i, INT_TBL_COD_COT_RES).toString()) ){
                                            if(objResInv.insertarTbr_cabCotVen(conExt, intCodEmpCot, intCodLocCot, CodCot, 
                                                                                intCodEmpRelResInv, intCodLocRelResInv, intCodCotRelResInv)){
                                                if(objResInv.insertarTbr_detCotVen(conExt, intCodEmpCot, intCodLocCot, CodCot, (i+1), 
                                                                                         intCodEmpRelResInv, intCodLocRelResInv, intCodCotRelResInv, intCodRegCotRelResInv)){
                                                }else{blnRes=false;}
                                            }else{blnRes=false;}
                                            intCodCotTmp = Integer.parseInt(tblDat.getValueAt(i, INT_TBL_COD_COT_RES).toString());
                                        }
                                        else{
                                            if(objResInv.insertarTbr_detCotVen(conExt, intCodEmpCot, intCodLocCot, CodCot, (i+1), 
                                                                                     intCodEmpRelResInv, intCodLocRelResInv, intCodCotRelResInv, intCodRegCotRelResInv)){
                                            }else{blnRes=false;}
                                        }
                                    }
                                }
                            }
                        }  // <>><><> FIN DEL FOR xD
                        blnManRes=false;
                    }
                }
                
            }
             catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnRes=false;
            }
            
            return blnRes;
        }
        private String strSql;
        
        /**
         * Metodo para solicitar una cotizacion use items que estan reservados
         * @param conExt
         * @param CodCot
         * @return 
         */
        
        private boolean proyectoReservasInventarioModificando(java.sql.Connection conExt, int CodCot){
            boolean blnRes=true;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            int intCodEmpCot, intCodLocCot,intCodCotReg=-1;
            int intCodEmpRelResInv, intCodLocRelResInv, intCodCotRelResInv, intCodRegCotRelResInv;
            try{
                if(conExt!=null){
                    stmLoc = conExt.createStatement();
                    System.out.println("proyectoReservasInventarioModificando.blnManRes: " + blnManRes);
                     
                    if(blnManRes){
                        intCodEmpCot = objZafParSis.getCodigoEmpresa();
                        intCodLocCot = objZafParSis.getCodigoLocal();
                        strSql="";
                        strSql+=" SELECT * FROM tbt_detCotVen WHERE ";
                        strSql+=" co_emp="+intCodEmpCot+" and co_loc="+intCodLocCot+" AND co_cot="+CodCot +" and tx_tiprel='R' ";
                        rstLoc = stmLoc.executeQuery(strSql);
                        while(rstLoc.next()){
                            System.out.println("MANEJA RESERVAS >>>>> xD");
                            intCodCotReg  = rstLoc.getInt("co_reg");
                            intCodEmpRelResInv =  rstLoc.getInt("co_empRel");
                            intCodLocRelResInv = rstLoc.getInt("co_locRel");
                            intCodCotRelResInv = rstLoc.getInt("co_cotRel");
                            intCodRegCotRelResInv = rstLoc.getInt("co_regRel");
                            if(objResInv.insertarTbr_detCotVen(conExt, intCodEmpCot, intCodLocCot, CodCot, intCodCotReg, 
                                                                 intCodEmpRelResInv, intCodLocRelResInv, intCodCotRelResInv, intCodRegCotRelResInv)){
                                if(objResInv.modificaCantidadesReservadas(conExt, intCodEmpCot, intCodLocCot, CodCot, intCodCotReg,
                                                                          intCodEmpRelResInv, intCodLocRelResInv, intCodCotRelResInv, intCodRegCotRelResInv)){
                                    System.out.println("MODIFICA RESERVAS OK!!! xD ");
                                }else{blnRes=false;}
                            }else{blnRes=false;}
                        }
                        rstLoc.close();
                        rstLoc=null;
                        blnManRes=false;
                    }
                    stmLoc.close();
                    stmLoc=null;
                }
                
            }
             catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnRes=false;
            }
            
            return blnRes;
        }

        /////////////////////////////////////*********************************/////////////////////////////////////////
        public void recargarDetCot(java.sql.Connection conn, int intCodEmp, int intCodLoc, String strCodCot) {
            java.sql.Statement stmLoc;
            java.sql.ResultSet rst;
            String strSql = "";
            String strUnidad = "", strCodAlt = "", strSer = "", strTer = "", strMarUti = "";
            double dblCan = 0, dblPre = 0, dblPorDes = 0, dblValDes = 0, dblTotal = 0;
            int inttratot = 0;
            BigDecimal bgdCanItm;
            BigDecimal bgdPreItm;
            BigDecimal bgdValDesItm;
            BigDecimal bgdPorDesItm;
            BigDecimal bgdTotItm=BigDecimal.ZERO;
            try {
                if (conn != null) {
                    stmLoc = conn.createStatement();
                    Vector vecData = new Vector();
                    //FATURACION ELECTRONICA - José Marín M 3/Oct/2014
                    String strAux = ",CASE "
                            + " WHEN ((trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1))  IN ("
                            + " SELECT UPPER(trim(tx_cad))  FROM tbm_reginv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                            + " AND co_tipdoc=" + intCodTipDocFacEle + " AND co_usr=" + objZafParSis.getCodigoUsuario() + " AND st_reg='A' AND st_tipmov='C' "
                            + " ))) THEN 'S' "
                            + ""
                            + " WHEN ((trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1))  IN ("
                            + " SELECT UPPER(trim(tx_cad))  FROM tbm_reginv WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                            + " AND co_tipdoc=" + intCodTipDocFacEle + " AND co_usr=" + objZafParSis.getCodigoUsuario() + " AND st_reg='A' AND st_tipmov='I' "
                            + " ))) THEN 'I' "
                            + "ELSE 'N' END  as isterL";

                    String strAux2 = " , CASE WHEN ( (trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1)) IN ( "
                            + " SELECT  UPPER(trim(a1.tx_cad))  FROM tbr_bodloc as a "
                            + " inner join tbm_reginvmernuningegrfisbod as a1 ON(a1.co_emp=a.co_Emp and a1.co_bod=a.co_bod) "
                            + " WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and a1.st_reg='A' and   a.st_reg='P' ))) "
                            + " THEN 'S' ELSE 'N' END AS proconf  ";




                    strSql = "SELECT detcot.co_reg, detcot.co_locrelsoldevven,detcot.co_tipdocrelsoldevven,detcot.co_DOCrelsoldevven,detcot.co_regrelsoldevven, "
                            + " a2.co_locrel as colococ, a2.co_tipdocrel as cotipdococ, a2.co_docrel as codococ, a2.co_regrel as coregoc,"
                            + " detcot.tx_nomitm, detcot.co_bod ,detcot.nd_can ,detcot.nd_preuni ,detcot.nd_pordes ,detcot.st_ivaven "
                            + ",detcot.nd_can ,detcot.nd_preuni ,detcot.nd_pordes ,detcot.co_itm ,detcot.nd_precom ,detcot.co_prv ,detcot.tx_codalt2 "
                            + ",detcot.tx_codalt , detcot.nd_pordesprecom, detcot.st_traauttot,   var.tx_descor , inv.st_ser , inv.st_permodnomitmven, cli.tx_nom, inv.nd_maruti "
                            + " ,detcot.co_locrelsolsaltemmer, detcot.co_tipdocrelsolsaltemmer, detcot.co_docrelsolsaltemmer, detcot.co_regrelsolsaltemmer "
                            + " ,detcot.co_locrelsoldevven, detcot.co_tipdocrelsoldevven, detcot.co_docrelsoldevven, detcot.nd_preunivenlis, "
                            + " inv.nd_prevta1, detcot.nd_pordesvenmax, detcot.co_bodcom, bod.tx_nom as nombodprv, "
                            + " detcot.co_regrelsoldevven, var.tx_tipunimed, inv.st_blqprevta, inv.tx_nomitm as nomitmori, inv.co_ctaegr ";
                    strSql += strAux;
                    strSql += strAux2;
                    strSql +="  ,Round(detCot.nd_can*inv.nd_pesItmKgr,2) as nd_pesTot,CASE WHEN inv.nd_pesItmKgr IS NULL THEN 0 ELSE inv.nd_pesItmKgr END as nd_pesItmKgr, CASE WHEN inv.tx_codAlt2 IS NULL THEN '' ELSE inv.tx_codAlt2 END as tx_codLet \n";
                    
                    strSql += " FROM tbm_detcotven as detcot "
                            + " LEFT  JOIN tbm_detsoldevven AS a1 on (a1.co_emp=detcot.co_emp and a1.co_loc=detcot.co_locrelsoldevven and a1.co_tipdoc=detcot.co_tipdocrelsoldevven "
                            + " and a1.co_doc=detcot.co_docrelsoldevven and a1.co_reg=detcot.co_regrelsoldevven ) "
                            + " left join tbr_detmovinv as a2 ON(a2.co_emp=a1.co_emp and a2.co_loc=a1.co_locrel and a2.co_tipdoc=a1.co_tipdocrel and a2.co_doc=a1.co_docrel "
                            + " and a2.co_reg=a1.co_regrel and a2.co_tipdocrel=2 ) "
                            + " LEFT outer join tbm_inv as inv on (detcot.co_emp = inv.co_emp and detcot.co_itm = inv.co_itm) "
                            + " LEFT outer join tbm_var as var on (inv.co_uni = var.co_reg)"
                            + " LEFT JOIN tbm_cli as cli on(cli.co_emp=detcot.co_emp and cli.co_cli=detcot.co_prv)"
                            + " LEFT JOIN tbm_bod as bod on(bod.co_emp=detcot.co_emp and bod.co_bod=detcot.co_bodcom)"
                            + " WHERE detcot.co_emp=" + intCodEmp + " and detcot.co_loc=" + intCodLoc + " "
                            + " and detcot.co_cot=" + strCodCot + " order by detcot.co_reg";
                    System.out.println("strSql: "+strSql);
                    rst = stmLoc.executeQuery(strSql);
                    for (int i = 0; rst.next(); i++) {
                        java.util.Vector vecReg = new java.util.Vector();

                        strCodAlt = (rst.getString("tx_codalt") == null ? "" : rst.getString("tx_codalt"));
                        strUnidad = (rst.getString("tx_descor") == null ? "" : rst.getString("tx_descor"));
                        strSer = (rst.getString("st_ser") == null ? "" : rst.getString("st_ser"));
                        if (!(rst.getString("cotipdococ") == null)) {
                            strTer = "N";
                        } else {
                            strTer = (rst.getString("isterl") == null ? "" : rst.getString("isterl"));
                        }

                        strMarUti = (rst.getString("nd_maruti") == null ? "" : rst.getString("nd_maruti"));
                        if (inttratot == 0) {
                            if (rst.getString("st_traauttot").equals("S")) {
                                // chkSolTraTot.setSelected(true);
                                masInformacion(true);
                                inttratot = 1;
                            }
                        }

                        vecReg.add(INT_TBL_LINEA, "");
                        vecReg.add(INT_TBL_ITMALT, strCodAlt);
//                        vecReg.add(INT_TBL_ITMALTCOD3LET, rst.getString("tx_codLet"));  /*JoséMario 5/Ene/2016 */
                        vecReg.add(INT_TBL_BUTITM, "");
                        vecReg.add(INT_TBL_BUTSTK, "");
                        vecReg.add(INT_TBL_BUTSOL, "");
                        vecReg.add(INT_TBL_DESITM, rst.getString("tx_nomitm"));
                        vecReg.add(INT_TBL_UNIDAD, strUnidad);
                        vecReg.add(INT_TBL_CODBOD, new Integer(rst.getInt("co_bod")));
                        vecReg.add(INT_TBL_BUTBOD, "");
                        vecReg.add(INT_TBL_TRATOT, rst.getString("st_traauttot").equals("S") ? true : false);
                        vecReg.add(INT_TBL_CANMOV, new Double(rst.getDouble("nd_can")));
                        vecReg.add(INT_TBL_PREUNI, new Double(rst.getDouble("nd_preuni")));
                        vecReg.add(INT_TBL_PORDES, new Double(rst.getDouble("nd_pordes")));
                        String strIva = rst.getString("st_ivaven");
                        Boolean blnIva;
                        if (stIvaVen.equals("N")) {
                            blnIva = false;
                        } else {
                            blnIva = strIva.equals("S") ? true : false;
                        }

                        vecReg.add(INT_TBL_BLNIVA, blnIva);
                        dblCan = rst.getDouble("nd_can");
                        dblPre = rst.getDouble("nd_preuni");
                        dblPorDes = rst.getDouble("nd_pordes");

//                        dblValDes = ((dblCan * dblPre) == 0) ? 0 : ((dblCan * dblPre) * (dblPorDes / 100));
//                        dblTotal = (dblCan * dblPre) - dblValDes;
//                        dblTotal = objUti.redondear(dblTotal, 3);
//                        dblTotal = objUti.redondear(dblTotal, 2);
                         /* JM : Ahora con BigDecimal 22/Marzo/2017 */
               

                        bgdCanItm=BigDecimal.valueOf(dblCan) ;
                        bgdPreItm=BigDecimal.valueOf(dblPre) ;
                        bgdPorDesItm=BigDecimal.valueOf(dblPorDes) ;

                        //DESCUENTO
                        bgdValDesItm = bgdPorDesItm.multiply((bgdCanItm.multiply(bgdPreItm))); 
                        bgdValDesItm = bgdValDesItm.divide(new BigDecimal("100"),objZafParSis.getDecimalesBaseDatos(),BigDecimal.ROUND_HALF_UP);
                        ///TOTAL
                        bgdTotItm=objUti.redondearBigDecimal((bgdCanItm.multiply(bgdPreItm)).subtract(bgdValDesItm), objZafParSis.getDecimalesMostrar());    
                        dblTotal = bgdTotItm.doubleValue();

                        vecReg.add(INT_TBL_TOTAL, new Double(dblTotal));
                        vecReg.add(INT_TBL_PESTOT, rst.getString("nd_pesTot"));
                        
                        vecReg.add(INT_TBL_CODITM, rst.getString("co_itm"));
                        vecReg.add(INT_TBL_ESTADO, "E");
                        vecReg.add(INT_TBL_IVATXT, strIva);
                        vecReg.add(INT_TBL_PRE_COS, new Double(rst.getDouble("nd_precom")));            //Columna que contiene  precio de compra
                        vecReg.add(INT_TBL_DESPRECOM, new Double(rst.getDouble("nd_pordesprecom")));
                        vecReg.add(INT_TBL_COD_PRO, rst.getString("co_prv"));            //Columna que contiene el codigo del proveedor
                        strCodAlt = (rst.getString("tx_nom") == null ? "" : rst.getString("tx_nom"));
                        vecReg.add(INT_TBL_NOM_PRO, strCodAlt);
                        vecReg.add(INT_TBL_BUT_PRO, "");
                        vecReg.add(INT_TBL_BLNPRE, "");

                        vecReg.add(INT_TBL_ITMALT2, rst.getString("tx_codLet"));
                        vecReg.add(INT_TBL_ITMSER, strSer);
                        vecReg.add(INT_TBL_ITMTER, strTer);

                        vecReg.add(INT_TBL_CODBODPRV, rst.getString("co_bodcom"));
                        vecReg.add(INT_TBL_NOMBODPRV, rst.getString("nombodprv"));
                        vecReg.add(INT_TBL_BUTBODPRV, "");

                        vecReg.add(INT_TBL_MARUTI, strMarUti);


                        if (rst.getString("co_bodcom") != null) {

                            if (rst.getInt("co_bodcom") == rst.getInt("co_bod")) {
                                vecReg.add(INT_TBL_IEBODFIS, rst.getString("proconf"));
                            } else {
                                vecReg.add(INT_TBL_IEBODFIS, "N");
                            }

                        } else {
                            vecReg.add(INT_TBL_IEBODFIS, rst.getString("proconf"));
                        }

                        // vecReg.add(INT_TBL_IEBODFIS, rst.getString("proconf") );


                        vecReg.add(INT_TBL_MODNOMITM, rst.getString("st_permodnomitmven"));
                        vecReg.add(INT_TBL_COLOCREL, rst.getString("co_locrelsolsaltemmer"));
                        vecReg.add(INT_TBL_COTIPDOCREL, rst.getString("co_tipdocrelsolsaltemmer"));
                        vecReg.add(INT_TBL_CODOCREL, rst.getString("co_docrelsolsaltemmer"));
                        vecReg.add(INT_TBL_COREGREL, rst.getString("co_regrelsolsaltemmer"));
                        vecReg.add(INT_TBL_COLOCRELSOL, rst.getString("co_locrelsoldevven"));
                        vecReg.add(INT_TBL_COTIPDOCRELSOL, rst.getString("co_tipdocrelsoldevven"));
                        vecReg.add(INT_TBL_CODOCRELSOL, rst.getString("co_docrelsoldevven"));
                        vecReg.add(INT_TBL_COREGRELSOL, rst.getString("co_regrelsoldevven"));
                        vecReg.add(INT_TBL_COLOCRELOC, rst.getString("colococ"));
                        vecReg.add(INT_TBL_COTIPDOCRELOC, rst.getString("cotipdococ"));
                        vecReg.add(INT_TBL_CODOCRELOC, rst.getString("codococ"));
                        vecReg.add(INT_TBL_COREGRELOC, rst.getString("coregoc"));
                        vecReg.add(INT_TBL_PRELISITM, rst.getString("nd_preunivenlis"));
                        vecReg.add(INT_TBL_PRELISITM2, rst.getString("nd_prevta1"));
                        vecReg.add(INT_TBL_CANORI, new Double(rst.getDouble("nd_can")));
                        vecReg.add(INT_TBL_PREORI, new Double(rst.getDouble("nd_preuni")));
                        vecReg.add(INT_TBL_DESORI, new Double(rst.getDouble("nd_pordes")));
                        vecReg.add(INT_TBL_DESVENMAX, rst.getString("nd_pordesvenmax"));
                        vecReg.add(INT_TBL_NUMFILCOMPVEN, null);
                        vecReg.add(INT_TBL_MAXDESCOM, null);
                        vecReg.add(INT_TBL_DATBODCOM, null);
                        vecReg.add(INT_TBL_CODREGCOT, rst.getString("co_reg"));

                        vecReg.add(INT_TBL_CANVENRES, new Double(rst.getDouble("nd_can")));
                        vecReg.add(INT_TBL_PREVTARES, new Double(rst.getDouble("nd_preuni")));
                        vecReg.add(INT_TBL_PORDESRES, new Double(rst.getDouble("nd_pordes")));
                        vecReg.add(INT_TBL_CODITMRES, rst.getString("co_itm"));
                        vecReg.add(INT_TBL_TIPUNIMED, rst.getString("tx_tipunimed"));
                        vecReg.add(INT_TBL_BLOPREVTA, rst.getString("st_blqprevta"));
                        vecReg.add(INT_TBL_DESITMORI, rst.getString("nomitmori"));

                        vecReg.add(INT_TBL_CLIRETBOD, null);
                        vecReg.add(INT_TBL_CANCLIRETBOD, null);

                        vecReg.add(INT_TBL_CODCTAEGR, rst.getString("co_ctaegr"));
                        vecReg.add(INT_TBL_PESITM, rst.getString("nd_pesItmKgr"));
                        vecReg.add(INT_TBL_ESTRES, null);
                        vecReg.add(INT_TBL_COD_EMP_COT_RES, null);
                        vecReg.add(INT_TBL_COD_LOC_COT_RES, null);
                        vecReg.add(INT_TBL_COD_COT_RES, null);
                        vecReg.add(INT_TBL_COD_COT_REG_RES, null);
                        vecReg.add(INT_TBL_CAN_COT_RES, null);

                        vecData.add(vecReg);
                    }
                    calcularTotPesDoc();
                    objTblMod.setData(vecData);
                    tblDat.setModel(objTblMod);
                    rst.close();
                    rst = null;
                    stmLoc.close();
                    stmLoc = null;


                    objTblMod.setDataModelChanged(false);
                    blnHayCam = false;

                }
            } catch (SQLException Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }

        }

        /////////////////////////////////////*********************************/////////////////////////////////////////
        private void ObtenerFecNunVal(java.sql.Connection conIns, int intNumDoc) {
            try {
//                System.out.println("ZafVen01.ObtenerFecNumVal");

                String sqlCab = "select ne_val,fe_cot from tbm_cabCotVen where "
                        + " co_emp=" + objZafParSis.getCodigoEmpresa() + " and "
                        + " co_loc=" + objZafParSis.getCodigoLocal() + " and  "
                        + " co_cot=" + intNumDoc;

                java.sql.Statement stmF;
                java.sql.ResultSet rstF;
                stmF = conIns.createStatement();
                rstF = stmF.executeQuery(sqlCab);
                if (rstF.next()) {
                    intNumDiaVal = rstF.getInt("ne_val");
                    dateFecCot = objUti.formatearFecha(rstF.getDate("fe_cot"), "dd/MM/yyyy");
                    intTipMod = 2;
                }
                rstF.close();
                stmF.close();
                stmF = null;
                rstF = null;
            } catch (java.sql.SQLException e) {

                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {

                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        private boolean insertarCab(java.sql.Connection conIns, int intNumDoc, boolean blnSolAut, String Estado) {
            boolean blnRes = false;
            String strdocconmersaldemdebfac = "N";
            String strSql = "";
            try {
//                System.out.println("ZafVen01.insertarCab");

                String strFechaRec = "";

                String strFecSis = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), objZafParSis.getFormatoFechaHoraBaseDatos());
                String strFecDoc = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), objZafParSis.getFormatoFechaBaseDatos());

                try {
                    strFechaRec = "'#" + txtFecRec.getFecha("/", "y/m/d") + "#'";
                } catch (Exception Evt) {
                    strFechaRec = null;
                }


                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                        if (tblDat.getValueAt(i, INT_TBL_COLOCREL) != null) {
                            if (tblDat.getValueAt(i, INT_TBL_COTIPDOCREL) != null) {
                                if (tblDat.getValueAt(i, INT_TBL_CODOCREL) != null) {
                                    strdocconmersaldemdebfac = "S";
//                         System.out.println("insertarCab " + strSql);
                                    strSql = "UPDATE tbm_cabsolsaltemmer SET st_facmersaldem='S' WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND "
                                            + " co_loc=" + tblDat.getValueAt(i, INT_TBL_COLOCREL) + " and co_tipdoc=" + tblDat.getValueAt(i, INT_TBL_COTIPDOCREL) + " AND "
                                            + " co_doc=" + tblDat.getValueAt(i, INT_TBL_CODOCREL);
                                    txtsql.append(strSql + "; \n");

                                }
                            }
                        }
                    }
                }
                
//                /* JM Temporal 23/Mar/2017 */
//                if(objZafParSis.getCodigoEmpresa()==2 && objZafParSis.getCodigoLocal()==4){
//                    double dblTemp = objUti.redondear(dblSubtotalCot*(dblPorComSol/100),2);
//                    if( dblTemp != dblComSol){
//                        dblComSol = dblTemp;
//                    }
//                }
                


                String sqlCab = "INSERT INTO  tbm_cabCotVen ";
                sqlCab+="(co_emp, co_loc, co_cot, "; //CAMPOS PrimayKey
                sqlCab+=" fe_cot, fe_procon,";//Fecha de la cotizacion
                sqlCab+=" co_cli, co_ven, tx_ate, ";//<==Campos que aparecen en la parte superior del 1er Tab
                sqlCab+=" tx_obs1, tx_obs2, nd_sub, nd_valiva,  ";//<==Campos que aparecen en la parte inferior del 1er Tab
                /* JoseMario 30/Ene/2016 */
                sqlCab+=" nd_valComSol,nd_subIvaCer,nd_subIvaGra,nd_porComSol,";
               /* JoseMario 30/Ene/2016 */
                     
                sqlCab+=" nd_tot, nd_porIva,";
                sqlCab+=" co_forPag, fe_ing, fe_ultmod, co_usring ,co_usrmod, st_reg, ne_val,tx_numped ";
                sqlCab+=" , tx_nomcli, co_locrelsoldevven,  co_tipdocrelsoldevven, co_docrelsoldevven, st_docconmersaldemdebfac, fe_val, tx_dirCliFac, tx_dirCliGuiRem ";
                if (intTipForPagCotizacion == 4) {
                    sqlCab += " ,co_tipCre ";
                }
                sqlCab += " ) ";
                sqlCab+="VALUES ( ";
                sqlCab+=objZafParSis.getCodigoEmpresa() + ", ";
                sqlCab+=objZafParSis.getCodigoLocal() + ", ";
                sqlCab+=intNumDoc + ", '";
                sqlCab+=strFecDoc + "', " + strFechaRec + ", ";
                sqlCab+=txtCliCod.getText() + ",   ";
                sqlCab+=txtVenCod.getText() + ",  '";
                sqlCab+= /*txtAte.getText()    + "', '" +;
                sqlCab+= txaObs1.getText()   + "', '" +*/ txtAte.getText() + "',  ";
                sqlCab+=objUti.codificar(txaObs1.getText()) + ", ";
                sqlCab+=objUti.codificar(txtNumCotAnt.getText() + " " + txaObs2.getText()) + ",  ";
                sqlCab+=dblSubtotalCot + ",   ";
                sqlCab+=Double.parseDouble(txtIva.getText()) + ", ";
                /* JoseMario 30/Ene/2016 */
                sqlCab+=dblComSol + ","+(dblBaseCero*-1)+","+(dblBaseIva*-1)+","+dblPorComSol+",";
                /* JoseMario 30/Ene/2016 */
                sqlCab+=Double.parseDouble(txtTot.getText()) + ",  ";
                sqlCab+=dblPorIva + " , ";
                sqlCab+=txtCodForPag.getText() + ",'" + strFecSis + "', '" + strFecSis + "', ";
                sqlCab+=objZafParSis.getCodigoUsuario() + " , ";
                sqlCab+=objZafParSis.getCodigoUsuario() + " , ";
                sqlCab+=((blnSolAut) ? "'P'" : "'" + Estado + "'") + "," + int_Num_Dia_Val + ",'" + tx_numped.getText() + "', ";
                sqlCab+="'" + txtNomCliVar.getText() + "', " + strCodLocSol + ", " + strCodTipDocSol + ", " + strCodDocSol + ",'" + strdocconmersaldemdebfac + "', (current_date + " + int_Num_Dia_Val + ") ,";
                 ////////////// José Marín M 
                sqlCab+=objUti.codificar(txtCliDir.getText()) + ", " + objUti.codificar(txtCliDirGui.getText());
                //////////////////////////////////////
                if (intTipForPagCotizacion == 4) {
                    sqlCab += " ," + objUti.codificar(txtCodTarCre.getText()) + " ";
                }
                sqlCab += "  ) ";
                txtsql.append(sqlCab + "; \n");
               // System.out.println("COTIZACION!!!"  + sqlCab);
                strFecModCot = strFecDoc;
                java.util.Date dateObj = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos());
                Calendar calObj = Calendar.getInstance();
                calObj.setTime(dateObj);
                txtFecDoc.setText(calObj.get(Calendar.DAY_OF_MONTH), calObj.get(Calendar.MONTH) + 1, calObj.get(Calendar.YEAR));
                
                
                blnRes = true;
                
            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        public boolean getValidaVigencia() {
            boolean blnRes = true;
            try {
//      System.out.println("ZafVen01.getValidaVigencia");

                String FecAux = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), "yyyy/MM/dd");
                ZafDatePicker objDate = new ZafDatePicker(new JFrame(), "d/m/y");
                Calendar objFec = Calendar.getInstance();
                ZafDatePicker dtePckPag = new ZafDatePicker(new JFrame(), "d/m/y");
                int fecDoc[] = txtFecDoc.getFecha(dateFecCot);
                if (fecDoc != null) {
                    objFec.set(Calendar.DAY_OF_MONTH, fecDoc[0]);
                    objFec.set(Calendar.MONTH, fecDoc[1] - 1);
                    objFec.set(Calendar.YEAR, fecDoc[2]);
                }
                Calendar objFecPagActual = Calendar.getInstance();
                objFecPagActual.setTime(objFec.getTime());
                objFecPagActual.add(Calendar.DATE, intNumDiaVal);
                dtePckPag.setAnio(objFecPagActual.get(Calendar.YEAR));
                dtePckPag.setMes(objFecPagActual.get(Calendar.MONTH) + 1);
                dtePckPag.setDia(objFecPagActual.get(Calendar.DAY_OF_MONTH));
                String fecha = objUti.formatearFecha(dtePckPag.getText(), "dd/MM/yyyy", "yyyy/MM/dd");
                java.util.Date fe1 = objUti.parseDate(fecha, "yyyy/MM/dd");
                java.util.Date fe2 = objUti.parseDate(FecAux, "yyyy/MM/dd");
                if (fe1.equals(fe2)) {
                    blnRes = false;
                } else if (fe1.after(fe2)) {
                    blnRes = false;
                } else {
                    blnRes = true;
                }


            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        private boolean insertarDetMod(java.sql.Connection conInsCot, int intNumDoc) {
            boolean blnRes = false;
            boolean blnActPreDes = false;
            double dlbSumTot1 = 0, dlbSumTot2 = 0;
            int intColActPre = 0;
            String strAux;
            BigDecimal bgdCanItm;
            BigDecimal bgdPreItm;
            BigDecimal bgdValDesItm;
            BigDecimal bgdPorDesItm;
            BigDecimal bgdTotItm=BigDecimal.ZERO;
            try {
                int Co_Bod = intCodBodPre;  // getBodPrede();
                StringBuffer stb = new StringBuffer(); //VARIABLE TIPO BUFFER
                double dblCan=0,dblPre=0,dblDes=0,dblValDes=0,dblTotal=0;
                blnActPreDes = getValidaVigencia();

                if (blnActPreDes) {
                    intColActPre = INT_TBL_PRELISITM2;
                } else {
                    intColActPre = INT_TBL_PRELISITM;
                }

                String strQry = "INSERT INTO  tbm_detCotVen (co_emp, co_loc, co_cot, co_reg," + //CAMPOS PrimayKey
                        " co_itm, tx_codalt,tx_codalt2, tx_nomItm, " +//<==Campos que aparecen en la parte superior del 1er Tab
                        " co_bod, nd_can, nd_preUni, nd_porDes, st_ivaVen " +//<==Campos que aparecen en la parte inferior del 1er Tab
                        " ,co_prv,nd_precom ,  nd_pordesprecom, st_traauttot, co_locrelsolsaltemmer, co_tipdocrelsolsaltemmer, co_docrelsolsaltemmer, "
                        + " co_regrelsolsaltemmer"
                        + " ,co_locrelsoldevven, co_tipdocrelsoldevven, co_docrelsoldevven, co_regrelsoldevven "
                        + " ,nd_preunivenlis, nd_pordesvenmax, co_bodcom, nd_porIva, nd_basImpIvaCer, nd_basImpIvaGra, nd_canPenFac  ) ";

                int intest = 0;
                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {

                        double dlbSum1 = 0;
                        dlbSum1 += objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_CANMOV)), 6);
                        dlbSum1 += objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PREUNI)), 6);
                        dlbSum1 += objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PORDES)), 6);
                        dlbSumTot1 += dlbSum1;

                        double dlbSum2 = 0;
                        dlbSum2 += objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_CANORI)), 6);
                        dlbSum2 += objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PREORI)), 6);
                        dlbSum2 += objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_DESORI)), 6);
                        dlbSumTot2 += dlbSum2;

                        
                        dblCan = Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_CANMOV) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_CANMOV).toString())));
                        dblPre = Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PREUNI) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_PREUNI).toString())));
                        dblDes = objUti.redondear(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_PORDES).toString()))), 2);
//                        dblValDes = ((dblCan * dblPre) == 0) ? 0 : ((dblCan * dblPre) * (dblDes / 100));
//                        dblTotal = (dblCan * dblPre) - dblValDes;
//                        dblTotal = objUti.redondear(dblTotal, intNumDec);
                         /* JM : Ahora con BigDecimal 22/Marzo/2017 */
               

                        bgdCanItm=BigDecimal.valueOf(dblCan) ;
                        bgdPreItm=BigDecimal.valueOf(dblPre) ;
                        bgdPorDesItm=BigDecimal.valueOf(dblDes) ;

                        //DESCUENTO
                        bgdValDesItm = bgdPorDesItm.multiply((bgdCanItm.multiply(bgdPreItm))); 
                        bgdValDesItm = bgdValDesItm.divide(new BigDecimal("100"),objZafParSis.getDecimalesBaseDatos(),BigDecimal.ROUND_HALF_UP);
                        ///TOTAL
                        bgdTotItm=objUti.redondearBigDecimal((bgdCanItm.multiply(bgdPreItm)).subtract(bgdValDesItm), objZafParSis.getDecimalesMostrar());    
                        dblTotal = bgdTotItm.doubleValue();

                        strAux= " " + strQry + " SELECT " + objZafParSis.getCodigoEmpresa() + "," + objZafParSis.getCodigoLocal() + "," + intNumDoc + "," + (i + 1) + ", ";
                        strAux+= tblDat.getValueAt(i, INT_TBL_CODITM) + ",'" + tblDat.getValueAt(i, INT_TBL_ITMALT) + "','" + tblDat.getValueAt(i, INT_TBL_ITMALT2);
                        strAux+= "'," + objUti.codificar(tblDat.getValueAt(i, INT_TBL_DESITM)) + ",";
                        strAux+= Co_Bod + "," + tblDat.getValueAt(i, INT_TBL_CANMOV) + ",";
                        strAux+= Double.parseDouble((tblDat.getValueAt(i, INT_TBL_PREUNI) == null) ? "0" : tblDat.getValueAt(i, INT_TBL_PREUNI).toString()) + ",";
                        strAux+= objUti.redondeo(Double.parseDouble((tblDat.getValueAt(i, INT_TBL_PORDES) == null) ? "0" : tblDat.getValueAt(i, INT_TBL_PORDES).toString()), 6) + ",'";
                        strAux+= ((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? "S" : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? "S" : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? "S" : "N")))) + "',";
                        strAux+= ((tblDat.getValueAt(i, INT_TBL_COD_PRO) == null) ? null : (tblDat.getValueAt(i, INT_TBL_COD_PRO).toString().equals("") ? null : tblDat.getValueAt(i, INT_TBL_COD_PRO).toString())) + ",";
                        strAux+= objUti.redondeo(Double.parseDouble((tblDat.getValueAt(i, INT_TBL_PRE_COS) == null) ? "0" : tblDat.getValueAt(i, INT_TBL_PRE_COS).toString()), 6) + " , ";
                        strAux+= objUti.redondeo(Double.parseDouble((tblDat.getValueAt(i, INT_TBL_DESPRECOM) == null || tblDat.getValueAt(i, INT_TBL_DESPRECOM).equals("")) ? "0" : tblDat.getValueAt(i, INT_TBL_DESPRECOM).toString()), 6) + " , '";
                        strAux+= ((tblDat.getValueAt(i, INT_TBL_TRATOT).toString().equals("true")) ? "S" : "N") + "',";
                        strAux+= "" + tblDat.getValueAt(i, INT_TBL_COLOCREL) + "," + tblDat.getValueAt(i, INT_TBL_COTIPDOCREL) + "," + tblDat.getValueAt(i, INT_TBL_CODOCREL) + ",";
                        strAux+= " " + tblDat.getValueAt(i, INT_TBL_COREGREL) + "  ";
                        strAux+= " ," + tblDat.getValueAt(i, INT_TBL_COLOCRELSOL) + "," + tblDat.getValueAt(i, INT_TBL_COTIPDOCRELSOL) + "," + tblDat.getValueAt(i, INT_TBL_CODOCRELSOL) + ",";
                        strAux+= " " + tblDat.getValueAt(i, INT_TBL_COREGRELSOL) + ", ";
                        strAux+= (dlbSum1 == dlbSum2 ? objInvItm.getIntDatoValidado(tblDat.getValueAt(i, intColActPre)) : objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PRELISITM2))) + ", ";
                        strAux+= " " + objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_DESVENMAX)) + ",   ";
                        strAux+= " " + ((tblDat.getValueAt(i, INT_TBL_CODBODPRV) == null) ? null : (tblDat.getValueAt(i, INT_TBL_CODBODPRV).toString().equals("") ? null : tblDat.getValueAt(i, INT_TBL_CODBODPRV).toString())) + ", ";
                        strAux+= ((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? dblPorIva : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? dblPorIva : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? dblPorIva : 0)))) + ",";
                        strAux+= ((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? 0 : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? 0 : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? 0 :dblTotal)))) + ",";
                        strAux+= ((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? dblTotal : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? dblTotal : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? dblTotal : 0)))) + "";
                        strAux+=" ," + tblDat.getValueAt(i, INT_TBL_CANMOV);
                        strAux+=";";
                        
                        
                        stb.append(strAux);
                        ////////////
                        ///Jose Marín 26/Dic/2013
                        System.out.println(" JOSE MARIO tbm_detCotVen :::  "+stb.toString());

                        /////////

 
                        intest = 1;
                    }
                }

                if (intest == 1) {
                    txtsql.append(stb.toString() + "; \n");
                    if (dlbSumTot1 != dlbSumTot2) {

                        strQry = " UPDATE  tbm_detCotVen SET nd_pordesvenmax=" + Glo_dlbMaxDes + " "
                                + " WHERE CO_EMP=" + objZafParSis.getCodigoEmpresa() + "  AND CO_LOC=" + objZafParSis.getCodigoLocal() + "  AND CO_COT=" + intNumDoc;
                        txtsql.append(strQry + "; \n");
                    } else {
                        if (blnActPreDes) {
                            strQry = " UPDATE  tbm_detCotVen SET nd_pordesvenmax=" + Glo_dlbMaxDes + " "
                                    + " WHERE CO_EMP=" + objZafParSis.getCodigoEmpresa() + "  AND CO_LOC=" + objZafParSis.getCodigoLocal() + "  AND CO_COT=" + intNumDoc;
                            txtsql.append(strQry + "; \n");
                        }
                    }
                }

                stb = null;
                blnRes = true;
            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        private boolean insertarDet(java.sql.Connection conInsCot, int intNumDoc) {
            boolean blnRes = false;
            try {
                int Co_Bod = getBodPrede();
                StringBuffer stb = new StringBuffer(); //VARIABLE TIPO BUFFER
                String strAux="";
                double dblCan=0,dblPre=0,dblDes=0,dblValDes=0,dblTotal=0;
                BigDecimal bgdCanItm;
            BigDecimal bgdPreItm;
            BigDecimal bgdValDesItm;
            BigDecimal bgdPorDesItm;
            BigDecimal bgdTotItm=BigDecimal.ZERO;
                System.out.println("Inserta Cotizacion");
                String strQry = "INSERT INTO  tbm_detCotVen (co_emp, co_loc, co_cot, co_reg," + //CAMPOS PrimayKey
                        " co_itm, tx_codalt,tx_codalt2, tx_nomItm, " +//<==Campos que aparecen en la parte superior del 1er Tab
                        " co_bod, nd_can, nd_preUni, nd_porDes, st_ivaVen " +//<==Campos que aparecen en la parte inferior del 1er Tab
                        " ,co_prv,nd_precom ,  nd_pordesprecom, st_traauttot, co_locrelsolsaltemmer, co_tipdocrelsolsaltemmer, co_docrelsolsaltemmer, "
                        + " co_regrelsolsaltemmer"
                        + " ,co_locrelsoldevven, co_tipdocrelsoldevven, co_docrelsoldevven, co_regrelsoldevven "
                        + " ,nd_preunivenlis, nd_pordesvenmax, co_bodcom,nd_porIva,nd_basImpIvaCer, nd_basImpIvaGra , nd_canPenFac ) ";

                int intest = 0;
                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {

                        dblCan = Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_CANMOV) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_CANMOV).toString())));
                        dblPre = Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PREUNI) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_PREUNI).toString())));
                        dblDes = objUti.redondear(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_PORDES).toString()))), 2);
//                        dblValDes = ((dblCan * dblPre) == 0) ? 0 : ((dblCan * dblPre) * (dblDes / 100));     
//                        dblTotal = (dblCan * dblPre) - dblValDes;
//                        dblTotal = objUti.redondear(dblTotal, intNumDec);
                          /* JM : Ahora con BigDecimal 22/Marzo/2017 */
               

                        bgdCanItm=BigDecimal.valueOf(dblCan) ;
                        bgdPreItm=BigDecimal.valueOf(dblPre) ;
                        bgdPorDesItm=BigDecimal.valueOf(dblDes) ;

                        //DESCUENTO
                        bgdValDesItm = bgdPorDesItm.multiply((bgdCanItm.multiply(bgdPreItm))); 
                         bgdValDesItm = bgdValDesItm.divide(new BigDecimal("100"),objZafParSis.getDecimalesBaseDatos(),BigDecimal.ROUND_HALF_UP);
                        ///TOTAL
                        bgdTotItm=objUti.redondearBigDecimal((bgdCanItm.multiply(bgdPreItm)).subtract(bgdValDesItm), objZafParSis.getDecimalesMostrar());    
                        dblTotal = bgdTotItm.doubleValue();
                         
                        
                        strAux=" " + strQry + " SELECT " + objZafParSis.getCodigoEmpresa() + "," + objZafParSis.getCodigoLocal() + "," + intNumDoc + "," + (i + 1) + ", ";
                        strAux+=tblDat.getValueAt(i, INT_TBL_CODITM) + ",'" + tblDat.getValueAt(i, INT_TBL_ITMALT) + "','" + tblDat.getValueAt(i, INT_TBL_ITMALT2);
                        strAux+="'," + objUti.codificar(tblDat.getValueAt(i, INT_TBL_DESITM)) + ",";
                        strAux+=Co_Bod + "," + tblDat.getValueAt(i, INT_TBL_CANMOV) + ",";
                        strAux+=Double.parseDouble((tblDat.getValueAt(i, INT_TBL_PREUNI) == null) ? "0" : tblDat.getValueAt(i, INT_TBL_PREUNI).toString()) + ",";
                        strAux+=objUti.redondeo(Double.parseDouble((tblDat.getValueAt(i, INT_TBL_PORDES) == null) ? "0" : tblDat.getValueAt(i, INT_TBL_PORDES).toString()), 6) + ",'";
                        strAux+=((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? "S" : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? "S" : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? "S" : "N")))) + "',";
                        strAux+=((tblDat.getValueAt(i, INT_TBL_COD_PRO) == null) ? null : (tblDat.getValueAt(i, INT_TBL_COD_PRO).toString().equals("") ? null : tblDat.getValueAt(i, INT_TBL_COD_PRO).toString())) + ",";
                        strAux+=objUti.redondeo(Double.parseDouble((tblDat.getValueAt(i, INT_TBL_PRE_COS) == null) ? "0" : tblDat.getValueAt(i, INT_TBL_PRE_COS).toString()), 6) + " , ";
                        strAux+=objUti.redondeo(Double.parseDouble((tblDat.getValueAt(i, INT_TBL_DESPRECOM) == null || tblDat.getValueAt(i, INT_TBL_DESPRECOM).equals("")) ? "0" : tblDat.getValueAt(i, INT_TBL_DESPRECOM).toString()), 6) + " , '";
                        strAux+=((tblDat.getValueAt(i, INT_TBL_TRATOT).toString().equals("true")) ? "S" : "N") + "',";
                        strAux+="" + tblDat.getValueAt(i, INT_TBL_COLOCREL) + "," + tblDat.getValueAt(i, INT_TBL_COTIPDOCREL) + "," + tblDat.getValueAt(i, INT_TBL_CODOCREL) + ",";
                        strAux+=" " + tblDat.getValueAt(i, INT_TBL_COREGREL) + "  ";
                        strAux+=" ," + tblDat.getValueAt(i, INT_TBL_COLOCRELSOL) + "," + tblDat.getValueAt(i, INT_TBL_COTIPDOCRELSOL) + "," + tblDat.getValueAt(i, INT_TBL_CODOCRELSOL) + ",";
                        strAux+=" " + tblDat.getValueAt(i, INT_TBL_COREGRELSOL) + ", ";
                        strAux+=objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PRELISITM)) + ", " + Glo_dlbMaxDes + ",  ";
                        strAux+=" " + ((tblDat.getValueAt(i, INT_TBL_CODBODPRV) == null) ? null : (tblDat.getValueAt(i, INT_TBL_CODBODPRV).toString().equals("") ? null : tblDat.getValueAt(i, INT_TBL_CODBODPRV).toString())) + ", ";
                        strAux+= ((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? dblPorIva : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? dblPorIva : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? dblPorIva : 0)))) + ",";
                        strAux+= ((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? 0 : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? 0 : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? 0 :(dblTotal*-1))))) + ",";
                        strAux+= ((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? (dblTotal*-1) : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? (dblTotal*-1) : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? (dblTotal*-1) : 0)))) + "";
                        strAux+="," + tblDat.getValueAt(i, INT_TBL_CANMOV);
                        strAux+=" ; ";
                        stb.append(strAux);

                        intest = 1;
                        
                        tblDat.setValueAt("" + (i + 1), i, INT_TBL_CODREGCOT);

                    }
                }
                System.out.println("ZafVen01.insertarDet: \n" + stb.toString());
                if (intest == 1) {
                    txtsql.append(stb.toString() + "; \n");
                }

                stb = null;
                blnRes = true;
            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        private boolean insertDetPag(int intNumDoc, java.sql.Connection conn) {
            boolean blnRes = false;
            java.sql.Statement stmLoc;
            String strSql = "";
            try {
                stmLoc = conn.createStatement();
                for (int i = 0; i < tblPag.getRowCount(); i++) {
                    int FecPagDoc[] = txtFecDoc.getFecha(tblPag.getValueAt(i, INT_TBL_PAGFEC).toString());
                    String strFechaPag = "#" + FecPagDoc[2] + "/" + FecPagDoc[1] + "/" + FecPagDoc[0] + "#";
                    String strCodTipRet = objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGCOD));
                    strSql = "INSERT INTO  tbm_pagCotVen(co_emp, co_loc, co_cot, co_reg, ne_diaCre, fe_ven, ";
                    strSql+=" mo_pag, ne_diaGra, nd_porRet, co_tipret ) ";
                    strSql+=" VALUES(" + objZafParSis.getCodigoEmpresa() + ", " + objZafParSis.getCodigoLocal() + ", " + intNumDoc + ", " + (i + 1) + ", ";
                    strSql+=objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGCRE)) + ", '#" + strFechaPag + "#', ";
                    strSql += (new BigDecimal( objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGMON))).multiply(new BigDecimal(-1)))+", ";
                    strSql+=objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGGRA)) + ", ";
                    strSql+=objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGRET)) + ", ";
                    strSql+=(strCodTipRet.equals("0") ? null : strCodTipRet) + " ";
                    strSql += "  )";
                    txtsql.append(strSql + "; \n");
                }
                System.out.println("insertDetPag:::::>>> \n " + txtsql.getText().toString());
                stmLoc.executeUpdate(txtsql.getText());
                txtsql.setText("");
                stmLoc.close();
                stmLoc = null;
                blnRes = true;
            } catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }

        private int getUltCoDoc(java.sql.Connection conMAX) {
            int valReturn = 0;
            try {
                java.sql.Statement stmMaxCot = conMAX.createStatement();
                sSQL = "SELECT Max(co_cot) as co_cot FROM tbm_cabCotVen where "
                        + " co_emp = " + objZafParSis.getCodigoEmpresa() + " and co_loc = " + objZafParSis.getCodigoLocal();
                ResultSet rstNum = stmMaxCot.executeQuery(sSQL);
                if (rstNum.next()) {
                    valReturn = rstNum.getInt("co_cot");
                }
                valReturn++;
                stmMaxCot.close();
                stmMaxCot = null;
            } catch (java.sql.SQLException e) {
                valReturn = -1;
            } catch (Exception e) {
                valReturn = -1;
            }
            return valReturn;
        }

        /////////////////////////////////////*********************************/////////////////////////////////////////
        /////////////////////////////////////*********************************/////////////////////////////////////////
        @Override
        public boolean consultar() {
            /*
             * Esto Hace en caso de que el modo de operacion sea Consulta
             */
            return _consultar(FilSql());
        }

//        public boolean consultarLoc() {
//            /*
//             * Esto Hace en caso de que el modo de operacion sea Consulta
//             */
//            return _consultarLoc();
//        }

        @Override
        public void clickModificar() {

            intMosVenAut = 1;
            blnEstFecVal = false;
            blnEstEliFilDet = false;

            setEditable(true);
            txtCot.setEditable(false);
            //txtNomForPag.setEditable(false);

            noEditable(false);
            

            
            objTblMod.setModoOperacion(ZafTblMod.INT_TBL_INS);
            //Inicializar las variables que indican cambios.
            objTblMod.setDataModelChanged(false);
            blnHayCam = false;
            strCodPrv = "";
            strDesLarPrv = "";
            strCodCom = "";
            strDesLarCom = "";
            /*JoséMario 19/Oct/2015*/
            txtPesKgr.setBackground(objZafParSis.getColorCamposSistema());
            txtCliDirGui.setBackground(objZafParSis.getColorCamposObligatorios());
            
            tx_numped.setBackground(objZafParSis.getColorCamposObligatorios());
            
            /* SOLICITADO POR WERNER CAMPOVERDE EL DIA 23/NOV/2016 */
          txtFecDoc.setEnabled(false);
//            dtpFecDoc.setEnabled(false);  /// TEMPORAL!!! 
            /* SOLICITADO POR WERNER CAMPOVERDE EL DIA 23/NOV/2016 */
             
            
            /* JM 29/Jun/2018  */
            txtVenCod.setEditable(false);
            txtVenNom.setEditable(false);
            butVenCon.setEnabled(false);
            /* JM 29/Jun/2018  */
            
            validacionesMovimiento();
            
        }
        
        private void validacionesMovimiento(){
            System.out.println("validacionesMovimiento ");
            btnReservas.setEnabled(false);
//            if(objTooBar.getEstado()=='c' || objTooBar.getEstado()=='w' || objTooBar.getEstado()=='l'){
//                btnSolRes.setEnabled(true);
//            }
//            else{
//                btnSolRes.setEnabled(false);
//            }
            
            if(isNecesarioBloquearClientePorReservas()){
                txtCliCod.setEnabled(false);txtCliNom.setEnabled(false);butCliCon.setEnabled(false);
            }
            else{
                txtCliCod.setEnabled(true);txtCliNom.setEnabled(true);butCliCon.setEnabled(true);
            }
            
        }
        
        private boolean isNecesarioBloquearClientePorReservas(){
            boolean blnRes=false;
            java.sql.Connection conLoc;
            System.out.println("isNecesarioBloquearClientePorReservas ");
            try {
                 conLoc=DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                if (conLoc != null) {
                    if(txtCot.getText().length()>0){
                        if(objResInv.cotizacionVieneDeReservas(conLoc , objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText()))){
                            blnRes=true;
                        }
                    }
                    conLoc.close();
                    conLoc=null;
                }
            }
            catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnRes = false;
            }
            return blnRes;
        }

        public boolean actualizarReg() {
            boolean blnRes = false;
            String Estado = "A";
            int ESTPRE = 0;
            int Est = 0;
            int intVarTmp = 0;
            /**
             * no se la utiliza para ningun calculo, la cree porque necesito
             * colocar una sentencia despues de un else Alguien comento la linea
             * del system y el ELSE tomo todas las otras sentencias por esa
             * opcion por tanto NO MODIFICABA y daba error, ahora colocare una
             * sentencia de incremento de esta variable pero no la utilizare
             * para nada. Ingrid Lino
                            *
             */
            try {

                blnHayCam_glo = blnHayCam;
                blnHayCam_glo_tbl = objTblMod.isDataModelChanged();

                verificaIvaItm(CONN_GLO);

                calculaSubTotTodLosItm();

                boolean blnValPre = true;
                //**********************
                String FecAux = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), "yyyy/MM/dd");
                Librerias.ZafDate.ZafDatePicker objDate = new Librerias.ZafDate.ZafDatePicker(new javax.swing.JFrame(), "d/m/y");
                java.util.Calendar objFec = java.util.Calendar.getInstance();
                Librerias.ZafDate.ZafDatePicker dtePckPag = new Librerias.ZafDate.ZafDatePicker(new javax.swing.JFrame(), "d/m/y");
                int fecDoc[] = txtFecDoc.getFecha(dateFecCot);
                if (fecDoc != null) {
                    objFec.set(java.util.Calendar.DAY_OF_MONTH, fecDoc[0]);
                    objFec.set(java.util.Calendar.MONTH, fecDoc[1] - 1);
                    objFec.set(java.util.Calendar.YEAR, fecDoc[2]);
                }
//            System.out.println("BBBB ");
                java.util.Calendar objFecPagActual = Calendar.getInstance();
                objFecPagActual.setTime(objFec.getTime());
                objFecPagActual.add(java.util.Calendar.DATE, intNumDiaVal);
                dtePckPag.setAnio(objFecPagActual.get(java.util.Calendar.YEAR));
                dtePckPag.setMes(objFecPagActual.get(java.util.Calendar.MONTH) + 1);
                dtePckPag.setDia(objFecPagActual.get(java.util.Calendar.DAY_OF_MONTH));
                String fecha = objUti.formatearFecha(dtePckPag.getText(), "dd/MM/yyyy", "yyyy/MM/dd");
                java.util.Date fe1 = objUti.parseDate(fecha, "yyyy/MM/dd");
                java.util.Date fe2 = objUti.parseDate(FecAux, "yyyy/MM/dd");
                if (fe1.equals(fe2)) {
                    blnValPre = false;
                } else if (fe1.after(fe2)) {
                    blnValPre = false;
                } else {
                    intVarTmp++;//System.out.println(" .. ");al comentar este System, el ELSE se ejecutaba para TODAS las sentencias que estaban por debajo
                }                //**********************

                if (CONN_GLO != null) {
                    CONN_GLO.setAutoCommit(false);

                    if (blnValPre == true || blnHayCam_glo_tbl == true) {
                        if (!PreVtaMenorPreUni()) {
                            ESTPRE = 1;
                        }


                        if (ESTPRE == 1) {
                            Est = objAutPrg.checkCtls(CONN_GLO);
                        } else {
                            java.sql.Statement stm = CONN_GLO.createStatement();
                            String sql = "Update  tbm_detautcotven set st_cum='S',st_reg='A' From( "
                                    + " select co_reg from tbm_regneg as a where a.tx_nomfun='" + strNomFuncValPre + "' "
                                    + " and a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and a.co_mnu=" + objZafParSis.getCodigoMenu() + ""
                                    + " ) as a where co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_loc=" + objZafParSis.getCodigoLocal() + " and co_cot=" + txtCot.getText() + " and co_regneg=a.co_reg";
                            stm.executeUpdate(sql);

                        }
                    }


                    if (VerificaPermisodeImpresion_cot(CONN_GLO)) {
                        Estado = "A";
                    } else {
                        Estado = "P";
                    }

//                        System.out.println("Est: " + Est);

                    if (Est == 0 || Est == 1) {
                        int intValor = objAutPrg.checkCtls_2(CONN_GLO);



                        if (modificarCab(CONN_GLO, false, Estado)) {
                            if (modificarDet(CONN_GLO)) {
                                if (modificarPag(CONN_GLO)) {
                                    if (blnHayCam_glo == true || blnHayCam_glo_tbl == true) {
                                        int intCods[] = {objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText())};
                                        if (objAutPrg.insertarCabDetAut_3(CONN_GLO, intCods, 3, intValor)) {
                                            if(objResInv.cotizacionVieneDeReservas(CONN_GLO, objZafParSis.getCodigoEmpresa(), 
                                                                                    objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText()) )){
                                                blnManRes=true;
                                                if(proyectoReservasInventario(CONN_GLO,  Integer.parseInt(txtCot.getText())) ){
                                                    CONN_GLO.commit();
                                                    blnRes = true;
                                                    blnHayCam = false;
                                                }
                                            }
                                            else{
                                                blnManRes=false;
                                                CONN_GLO.commit();
                                                blnRes = true;
                                                blnHayCam = false;
                                            }
                                        } else {
                                            CONN_GLO.rollback();
                                        }
                                    } else {
                                        CONN_GLO.commit();
                                        blnRes = true;
                                        blnHayCam = false;
                                    }
                                } else {
                                    CONN_GLO.rollback();
                                }
                            } else {
                                CONN_GLO.rollback();
                            }
                        } else {
                            CONN_GLO.rollback();
                        }
                        ////************************
                    }
                    if (Est == 2) {
                        Estado = "P";
                        if (modificarCab(CONN_GLO, false, Estado)) {
                            if (modificarDet(CONN_GLO)) {
                                if (modificarPag(CONN_GLO)) {
                                    int intCods[] = {objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText())};
                                    if (objAutPrg.insertarCabDetAut(CONN_GLO, intCods, 3)) {
                                        if(objResInv.cotizacionVieneDeReservas(CONN_GLO, objZafParSis.getCodigoEmpresa(), 
                                                                                objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText()) )){
                                            blnManRes=true;
                                            if(proyectoReservasInventario(CONN_GLO,  Integer.parseInt(txtCot.getText())) ){
                                                CONN_GLO.commit();
                                                blnRes = true;
                                                blnHayCam = false;
                                            }
                                        }
                                        else{
                                            blnManRes=false;
                                            CONN_GLO.commit();
                                            blnRes = true;
                                            blnHayCam = false;
                                        }
                                    } else {
                                        CONN_GLO.rollback();
                                    }
                                } else {
                                    CONN_GLO.rollback();
                                }
                            } else {
                                CONN_GLO.rollback();
                            }
                        } else {
                            CONN_GLO.rollback();
                        }

                    }
                }
            } catch (SQLException Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnRes = false;
            } catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnRes = false;
            }
            return blnRes;
        }

        private boolean modificarCab(java.sql.Connection conModCot, boolean blnSolAut, String Estado) {
            boolean blnRes = false;
            String strdocconmersaldemdebfac = "N";
            String strSql = "";
            try {
//                System.out.println("ZafVen01.modificarCab");

                int Fecha[] = txtFecDoc.getFecha(txtFecDoc.getText());
                String strFechaRec = "";
                dateFecCot = Fecha[2] + "/" + Fecha[1] + "/" + Fecha[0];
                dateFecCot = objUti.formatearFecha(dateFecCot, "yyyy/MM/dd", "dd/MM/yyyy");
                /**
                 * *******************************************\ Armando el
                 * Update para los datos * de la cabecera de cotizacion *
                 * \********************************************
                 */
                try {
                    strFechaRec = "'#" + txtFecRec.getFecha("/", "y/m/d") + "#'";
                } catch (Exception Evt) {
                    strFechaRec = null;
                }

                txtsql.setText("");
                String strFecSistema = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), objZafParSis.getFormatoFechaHoraBaseDatos());
                String strFecDoc = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), objZafParSis.getFormatoFechaBaseDatos());


                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                        if (tblDat.getValueAt(i, INT_TBL_COLOCREL) != null) {
                            if (tblDat.getValueAt(i, INT_TBL_COTIPDOCREL) != null) {
                                if (tblDat.getValueAt(i, INT_TBL_CODOCREL) != null) {
                                    strdocconmersaldemdebfac = "S";

                                    strSql = "UPDATE tbm_cabsolsaltemmer SET st_facmersaldem='S' WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND "
                                            + " co_loc=" + tblDat.getValueAt(i, INT_TBL_COLOCREL) + " and co_tipdoc=" + tblDat.getValueAt(i, INT_TBL_COTIPDOCREL) + " AND "
                                            + " co_doc=" + tblDat.getValueAt(i, INT_TBL_CODOCREL);
                                    txtsql.append(strSql + "; \n");

                                }
                            }
                        }
                    }
                }


                String strAuxSql = "";
 

                String sql = "Update tbm_cabCotVen set ";
                       sql+= " st_docconmersaldemdebfac='" + strdocconmersaldemdebfac + "',";
                       sql+=" fe_procon  = " + strFechaRec + ", ";
                       sql+=" fe_cot  = '" + strFecDoc + "', ";
                       sql+=" co_cli  = " + txtCliCod.getText() + ",  ";
                       sql+=" tx_dirCliFac = " +objUti.codificar(txtCliDir.getText())  + ",";
                       sql+=" tx_dirCliGuiRem = " + objUti.codificar(txtCliDirGui.getText())  + ",";
                       sql+=" co_ven  = " + txtVenCod.getText() + ",  ";
                       sql+=" tx_ate  = '" + txtAte.getText() + "', ";
                       sql+=" nd_tot  = '" + Double.parseDouble(txtTot.getText()) + "', ";
                       sql+=" tx_obs1 = " + objUti.codificar(txaObs1.getText()) + " , ";
                       sql+=" nd_sub  = " + Double.parseDouble(txtSub.getText()) + ",  ";
                       sql+=" nd_valiva  = " + Double.parseDouble(txtIva.getText()) + ",  ";
                       sql+=" nd_porIva = " + dblPorIva + ", ";
                       sql+=" co_forPag = " + txtCodForPag.getText() + ", ";
                       sql+=" fe_ultMod   =  '" + strFecSistema + "'                , ";
                       sql+=" co_usrMod   = " + objZafParSis.getCodigoUsuario() + ", ";
                       sql+=" st_reg   = " + ((blnSolAut) ? "'P'" : "'" + Estado + "'") + ", ";
                       sql+=" tx_nomcli = '" + txtNomCliVar.getText() + "', ";
                       sql+=" tx_numped='" + tx_numped.getText() + "' ";
                if (intTipForPagCotizacion == 4) {
                    sql += ", " + " co_tipCre= " + objUti.codificar(txtCodTarCre.getText()) + " "; 
                }
                sql += strAuxSql + " ";
                sql += "  where co_emp = " + objZafParSis.getCodigoEmpresa() + " and "
                        + " co_loc = " + objZafParSis.getCodigoLocal() + " and "
                        + " co_cot = " + txtCot.getText();

//                System.out.println("modificarCab: " + sql);

                txtsql.append(sql + "; \n");

                strFecModCot = strFecSistema;
                //txtFecDoc.setText(strFecSistema);

                java.util.Date dateObj = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos());
                Calendar calObj = Calendar.getInstance();
                calObj.setTime(dateObj);
                txtFecDoc.setText(calObj.get(Calendar.DAY_OF_MONTH), calObj.get(Calendar.MONTH) + 1, calObj.get(Calendar.YEAR));

                blnRes = true;
            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        private boolean modificarDet(java.sql.Connection conModCot) {
            boolean blnRes = false;
            try {
                System.out.println("ZafVen01.modificarDet");
                if(objResInv.cotizacionVieneDeReservas(conModCot, objZafParSis.getCodigoEmpresa(), 
                                            objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText()) )){
                    blnManRes=true;
                    if(objResInv.eliminar_TbrCabCotVen_TbrDetCotVen( conModCot, objZafParSis.getCodigoEmpresa(), 
                                            objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText()) ) ){
                        String sql = " DELETE FROM tbm_detCotVen "
                            + "  where "
                            + " co_emp = " + objZafParSis.getCodigoEmpresa() + " and "
                            + " co_loc = " + objZafParSis.getCodigoLocal() + " and "
                            + " co_cot = " + txtCot.getText();
                        txtsql.append(sql + "; \n");
                        blnRes = insertarDetMod(conModCot, Integer.parseInt(txtCot.getText()));
                    }
                }
                else{
                    blnManRes=false;
                    String sql = " DELETE FROM tbm_detCotVen "
                        + "  where "
                        + " co_emp = " + objZafParSis.getCodigoEmpresa() + " and "
                        + " co_loc = " + objZafParSis.getCodigoLocal() + " and "
                        + " co_cot = " + txtCot.getText();
                    txtsql.append(sql + "; \n");

                    // String strSqlDet="";
                    blnRes = insertarDetMod(conModCot, Integer.parseInt(txtCot.getText()));
                }

                

            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        private boolean modificarPag(java.sql.Connection conn) {
            boolean blnRes = false;
            String strSql = "";
            try {
//      System.out.println("ZafVen01.facturar");

                strSql = "DELETE FROM tbm_pagCotVen WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                        + " AND co_cot=" + txtCot.getText();
                txtsql.append(strSql + "; \n");

                if (insertDetPag(Integer.parseInt(txtCot.getText()), conn)) {
                    blnRes = true;
                }

            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        public boolean eliminarReg() {

            try {
                try {
//                    System.out.println("ZafVen01.eliminarReg");

                    if (CONN_GLO != null) {
                        CONN_GLO.setAutoCommit(false);
                        java.sql.PreparedStatement pstReg;
                        java.sql.Statement stmCot = CONN_GLO.createStatement();



                        sSQL = "Update tbm_cabCotVen set "
                                + " st_reg  = 'E' "
                                + " ,fe_ultMod  =  " + objZafParSis.getFuncionFechaHoraBaseDatos() + "  , "
                                + "  co_usrMod   = " + objZafParSis.getCodigoUsuario() + "  "
                                + // " ,st_regrep = '"+STR_ESTREG+"' "+
                                "  where "
                                + " co_emp = " + objZafParSis.getCodigoEmpresa() + " and "
                                + " co_loc = " + objZafParSis.getCodigoLocal() + " and "
                                + " co_cot = " + txtCot.getText();

                        /* Ejecutando el Delete */
                        pstReg = CONN_GLO.prepareStatement(sSQL);
                        pstReg.executeUpdate();

                        CONN_GLO.commit();
                    }
                } catch (SQLException Evt) {
                    CONN_GLO.rollback();
                    objUti.mostrarMsgErr_F1(jfrThis, Evt);
                    return false;
                }
            } catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                return false;
            }

            return true;
        }

        public boolean anularReg() {

            if (isAnulada()) {
                return false;
            }
            try {
                try {
//                    System.out.println("ZafVen01.anularReg");

                    if (CONN_GLO != null) {
                        CONN_GLO.setAutoCommit(false);
                        java.sql.PreparedStatement pstReg;
                        java.sql.Statement stmCot = CONN_GLO.createStatement();

                        /**
                         * *******************************************\ Armando
                         * el Update para ANULAR * la cotizacion *
                         * \********************************************
                         */
                        sSQL = "Update tbm_cabCotVen set "
                                + " st_reg  = '" + "I" + "' "
                                + " ,fe_ultMod  =  " + objZafParSis.getFuncionFechaHoraBaseDatos() + "  , "
                                + "  co_usrMod   = " + objZafParSis.getCodigoUsuario() + "  "
                                + "  where "
                                + " co_emp = " + objZafParSis.getCodigoEmpresa() + " and "
                                + " co_loc = " + objZafParSis.getCodigoLocal() + " and "
                                + " co_cot = " + txtCot.getText();


                        /* Ejecutando el Update */
                        pstReg = CONN_GLO.prepareStatement(sSQL);
                        pstReg.executeUpdate();
                        CONN_GLO.commit();

                    }
                } catch (SQLException Evt) {
                    CONN_GLO.rollback();
                    objUti.mostrarMsgErr_F1(jfrThis, Evt);
                    return false;
                }
            } catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                return false;
            }


            return true;

        }

        //******************************************************************************************************
        @Override
        public boolean vistaPreliminar() {

            cargarRepote(1);
 
            return true;
        }

        @Override
        public boolean imprimir() {

            cargarRepote(0);
 
            return true;
        }

        //******************************************************************************************************
        private void cargarRepote(int intTipo) {
            if (objThrGUI == null) {
                objThrGUI = new ZafThreadGUI();
                objThrGUI.setIndFunEje(intTipo);
                objThrGUI.start();
            }
        }

        @Override
        public void clickImprimir() {
        }

        @Override
        public void clickVisPreliminar() {
        }

        @Override
        public void clickCancelar() {
            //chkSolTraTot.setSelected(false); 
            ocultaCol(INT_TBL_TRATOT);

        }

        public void cierraConnections() {
        }

        @Override
        public boolean beforeAceptar() {
            return true;
        }

        @Override
        public boolean beforeAnular() {
            return true;
        }

        @Override
        public boolean beforeCancelar() {
            return true;
        }

        @Override
        public boolean beforeConsultar() {
            return true;
        }

        @Override
        public boolean beforeEliminar() {
            return true;
        }

        @Override
        public boolean beforeImprimir() {
            boolean Estado = VerificaPermisodeImpresion();
            return Estado;
        }

        @Override
        public boolean beforeInsertar() {
            return true;
        }

        @Override
        public boolean beforeModificar() {
            return true;
        }

        @Override
        public boolean beforeVistaPreliminar() {
            boolean Estado = VerificaPermisodeImpresion();
            return Estado;
        }

        public void MensajeNoImpreme() {
            //String  strTit="Mensaje del sistema Zafiro";
            String strMsg = "Necesita Autorización Para poder Imprimir";
            //JOptionPane obj =new JOptionPane();
            JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.OK_OPTION);
        }

        public boolean VerificaPermisodeImpresion() {
            boolean lbnEst = false;
            int IntCodEmp = objZafParSis.getCodigoEmpresa();
            int IntCodLoc = objZafParSis.getCodigoLocal();
            String StrCodCot = txtCot.getText();



            String sql = "SELECT b.st_reg,b.st_cum FROM tbm_cabautcotven as a"
                    + " INNER JOIN tbm_detautcotven AS b ON (a.co_emp=b.co_emp and a.co_loc=b.co_loc and a.co_cot=b.co_cot and a.co_aut=b.co_aut)"
                    + " INNER JOIN tbm_regneg as c ON(b.co_emp=c.co_emp and b.co_loc=c.co_loc and b.co_regneg=c.co_reg and c.co_mnu=" + objZafParSis.getCodigoMenu() + " and c.tx_nomfun='" + strNomFuncValPre + "')"
                    + " WHERE a.co_cot=" + StrCodCot + " and a.co_emp=" + IntCodEmp + " and a.co_loc=" + IntCodLoc + ""
                    + " AND b.co_aut=( select max(co_aut) FROM  tbm_cabautcotven WHERE co_emp=" + IntCodEmp + " AND co_loc=" + IntCodLoc + " AND  co_cot=" + StrCodCot + " )";

//           System.out.println("PERMISO VerificaPermisodeImpresion: "+ sql);
            String sql2 = "select st_reg from tbm_cabcotven where co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_loc=" + objZafParSis.getCodigoLocal() + " and co_cot=" + txtCot.getText();


            try {
//                System.out.println("ZafVen01.VerificarPermisodeImpresion");

                java.sql.Connection conn = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                if (conn != null) {
                    java.sql.Statement stm2 = conn.createStatement();
                    java.sql.ResultSet rst2 = stm2.executeQuery(sql2);
                    if (rst2.next()) {
                        if (rst2.getString(1).equals("P")) {

                            java.sql.Statement stm = conn.createStatement();
                            java.sql.ResultSet rst = stm.executeQuery(sql);


                            if (rst.next()) {
                                if (rst.getString(1) != null) {
                                    if (rst.getString(2).equals("S")) {
                                        lbnEst = true;

                                    } else if (rst.getString(1).equals("A")) {
                                        lbnEst = true;

                                    } else {
                                        PreVtaMenorPreUni(); //**********************
                                        MensajeNoImpreme();
                                        lbnEst = false;
                                    }
                                }
                            } else {
                                lbnEst = true;
                            }
                            rst.close();
                            stm.close();
                        } else {
                             /* Si esta en A revisamos otra vez precios  */
                            if (rst2.getString(1).equals("A")){
                                if(PreVtaMenorPreUni()){
                                    lbnEst = true;
                                }else{
                                    lbnEst=false;
                                    MensajeNoImpreme();
                                }
                            }else{
                                lbnEst = true;
                            }

                            
                        }

                        rst2.close();
                        stm2.close();
                    }
                    conn.close();
                }
               
                
            } catch (SQLException Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                return lbnEst;
            }
            return lbnEst;
        }
    }

    private String FilSql2() {
        String sqlFiltro = "";
        //Agregando filtro por Numero de Cotizacion
        if (!txtCot.getText().equals("")) {
            sqlFiltro = sqlFiltro + " and CotCab.co_cot =" + txtCot.getText() + "";
        }

        return sqlFiltro;
    }

    private String FilSql() {
        String sqlFiltro = "";
        //Agregando filtro por Numero de Cotizacion
        if (!txtCot.getText().equals("")) {
            sqlFiltro = sqlFiltro + " and CotCab.co_cot =" + txtCot.getText() + "";
        }

        //Agregando filtro por Fecha
        if (intValBus == 6)  //Ventana de Consulta Emergente.
        {
        
        }else{
            if (txtFecDoc.isFecha()) {
                int FecSql[] = txtFecDoc.getFecha(txtFecDoc.getText());
                String strFecSql = "#" + FecSql[2] + "/" + FecSql[1] + "/" + FecSql[0] + "#";
                sqlFiltro = sqlFiltro + " and CotCab.fe_cot = '" + strFecSql + "'";
            }
        }    
        
        //Agregando filtro por Codigo de Cliente
        if (!txtCliCod.getText().equals("")) {
            sqlFiltro = sqlFiltro + " and CotCab.co_cli =" + txtCliCod.getText() + "";
        }

        //Agregando filtro por Codigo de Vendedor
        if (!txtVenCod.getText().equals("")) {
            sqlFiltro = sqlFiltro + " and CotCab.co_ven = " + txtVenCod.getText() + "";
        }

        //Agregando filtro por Codigo de Vendedor
        if (!txtAte.getText().equals("")) {
            sqlFiltro = sqlFiltro + " and CotCab.tx_ate LIKE '" + txtAte.getText() + "'";
        }

        /*
         * Poniendo Filtros para direccion del cliente y otros campos que no pertenecen a
         * la tabla de Cotizacion
         */
        //Agregando filtro por Direccion del cliente
        if (!txtCliDir.getText().equals("")) {
            sqlFiltro = sqlFiltro + " and Cli.tx_dir LIKE "+objUti.codificar(txtCliDir.getText())+" ";
        }

        //Agregando filtro por Nombre del cliente
        if (!txtCliNom.getText().equals("")) {
            sqlFiltro = sqlFiltro + " and Cli.tx_nom LIKE '" + txtCliNom.getText() + "'";
        }

        //Agregando filtro por Nombre del cliente
        if (!txtVenNom.getText().equals("")) {
            sqlFiltro = sqlFiltro + " and Usr.tx_nom LIKE '" + txtVenNom.getText() + "'";
        }

        return sqlFiltro;
    }

    private void MensajeValidaCampo(String strNomCampo) {
        //JOptionPane obj =new JOptionPane();
        //String strTit, strMsg;
        String strMsg;
        //strTit="Mensaje del sistema Zafiro";
        strMsg = "El campo <<" + strNomCampo + ">> es obligatorio.\nEscriba un(a) " + strNomCampo + " valido(a) y vuelva a intentarlo.";
        JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
    }

    private void Mensaje(String strNomCampo) {
        //JOptionPane obj =new JOptionPane();
        //String strTit, strMsg;
        String strMsg;
        //strTit="Mensaje del sistema Zafiro";
        strMsg = strNomCampo;
        JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
    }

    public boolean consultar2(Integer CodEmp, Integer CodLoc) {
        return _consultar2(FilSql2(), CodEmp, CodLoc);
    }

    public boolean consultarHis(Integer CodEmp, Integer CodLoc, Integer CodHis) {
        return _consultarHis(FilSql2(), CodEmp, CodLoc, CodHis);
    }

    private boolean _consultarHis(String strFil, Integer CodEmp, Integer CodLoc, Integer CodHis) {

        strFiltro = strFil;
       
        try { 
 

            abrirCon();
            if (CONN_GLO != null) {

                stmCot = CONN_GLO.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
 

                sSQL = "SELECT CotCab.co_emp,CotCab.co_loc,cli.co_cli, cli.tx_nom as nomcli, " + //<== Campos con los datos del CLiente para la cabecera
                        //José Marín 17/Dic/2013
                        "  CASE WHEN cotCab.tx_dirCliFac IS NULL THEN cli.tx_dir ELSE cotCab.tx_dirCliFac END as dircli /* DIRECCION FACTURA  */,"
                        + " cotCab.tx_dirCliGuiRem /*GUIA DE REMISION*/ ,"
                        + //José Marín 17/Dic/2013
                        " CotCab.co_cot, CotCab.co_his, CotCab.fe_cot, CotCab.tx_ate,  " + //<==Campos que aparecen en la parte superior del 1er Tab
                        " CotCab.co_forPag, " + //<==Campos que aparecen en la parte superior del 2do Tab
                        " CotCab.st_reg , forpag.tx_des, forpag.ne_tipforpag "
                        + " FROM tbh_cabCotven as CotCab "
                        + " left outer join  tbm_cli as Cli on (cotcab.co_emp = cli.co_emp and cotcab.co_cli = cli.co_cli) "
                        + " left outer join tbm_cabForPag as forpagCli on (forpagCli.co_emp=Cli.co_emp and forpagCli.co_forpag = Cli.co_forPag )  "
                        + " LEFT JOIN tbm_Ciu as ciu on(ciu.co_Ciu=Cli.co_ciu)  "
                        + " left outer join tbm_usr as Usr on (Usr.co_usr = CotCab.co_ven ) " + // Tablas enlas cuales se trabajara y sus respectivos alias
                        " left outer join tbm_cabForPag as forpag on (forpag.co_emp=CotCab.co_emp and forpag.co_forpag = CotCab.co_forPag )  "
                        + " Where CotCab.co_emp=" + CodEmp + // Consultando en la empresa en la ke se esta trabajando
                        " and CotCab.co_loc=" + CodLoc + " and CotCab.co_his=" + CodHis + "   and CotCab.st_reg not in ('E')";// Consultando en el local en el ke se esta trabajando
                sSQL = sSQL + strFiltro + " ORDER BY CotCab.co_cot";

//                System.out.println("ZafVen01._consultarHis: " + sSQL);

                rstCab = stmCot.executeQuery(sSQL);

                if (rstCab.next()) {
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    cargarReghis(CodEmp, CodLoc);
                } else {
                    objTooBar.setMenSis("0 Registros encontrados");
                    clnTextos();
                    return false;
                }
            }
            CerrarCon();
        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return false;
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return false;
        }
        butMakeFactura.setEnabled(true);
        butCopyCot.setEnabled(true);
        butCopyInmaconsa.setEnabled(true);//JoséMarín 6/Feb/2015 
        rdoNA.setEnabled(false);
        rdoInicio.setEnabled(false);
        rdoFinal.setEnabled(false);
        butVisOc.setEnabled(true);
        /* JM 22/Jun/2017 */
        btnSolRes.setEnabled(true);
        btnODRes.setEnabled(true);
        btnReservas.setEnabled(false);
        /* JM 22/Jun/2017 */
        
        System.gc();
        return true;

    }

    private boolean _consultar2(String strFil, Integer CodEmp, Integer CodLoc) {

        strFiltro = strFil;
        try {//odbc,usuario,password
//            System.out.println("ZafVen01._consultar2");

            abrirCon();
            if (CONN_GLO != null) {

                stmCot = CONN_GLO.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);

                sSQL = "select max(co_his) from tbh_cabcotven where co_emp=" + CodEmp + "  and co_loc=" + CodLoc + " aND co_cot=" + intCodCot;
                java.sql.ResultSet rstHis = stmCot.executeQuery(sSQL);
                if (rstHis.next()) {
                    intCodHis = rstHis.getInt(1);
                }
                rstHis.close();
                rstHis = null;

                

                sSQL = "SELECT CotCab.co_emp,CotCab.co_loc,cli.co_cli, cli.tx_nom as nomcli,  " + //<== Campos con los datos del CLiente para la cabecera
                        //José Marín 17/Dic/2013
                        " CASE WHEN cotCab.tx_dirCliFac IS NULL THEN cli.tx_dir ELSE cotCab.tx_dirCliFac END as dircli /* DIRECCION FACTURA  */,"
                        + " cotCab.tx_dirCliGuiRem /*GUIA DE REMISION*/ ,"
                        + //José Marín 17/Dic/2013
                        " CotCab.co_cot, CotCab.fe_cot, CotCab.tx_ate,  " + //<==Campos que aparecen en la parte superior del 1er Tab
                        " CotCab.co_forPag, " + //<==Campos que aparecen en la parte superior del 2do Tab
                        " CotCab.st_reg , forpag.tx_des, forpag.ne_tipforpag "
                        + " FROM tbm_cabCotven as CotCab "
                        + " left outer  join  tbm_cli as Cli on (cotcab.co_emp = cli.co_emp and cotcab.co_cli = cli.co_cli) "
                        + " left outer join tbm_cabForPag as forpagCli on (forpagCli.co_emp=Cli.co_emp and forpagCli.co_forpag = Cli.co_forPag )  "
                        + " LEFT JOIN tbm_Ciu as ciu on(ciu.co_Ciu=Cli.co_ciu)  "
                        + " left outer join tbm_usr as Usr on (Usr.co_usr = CotCab.co_ven ) " + // Tablas enlas cuales se trabajara y sus respectivos alias
                        " left outer join tbm_cabForPag as forpag on (forpag.co_emp=CotCab.co_emp and forpag.co_forpag = CotCab.co_forPag )  "
                        + " Where CotCab.co_emp=" + CodEmp + // Consultando en la empresa en la ke se esta trabajando
                        " and CotCab.co_loc=" + CodLoc + " and CotCab.st_reg in ('A','I','P','C','R','F','U','D','E','L')";// Consultando en el local en el ke se esta trabajando
                sSQL = sSQL + strFiltro + " ORDER BY CotCab.co_cot";

//                System.out.println("ZafVen01._consultar2: " + sSQL);

                rstCab = stmCot.executeQuery(sSQL);

                if (rstCab.next()) {
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    cargarReg2(CodEmp, CodLoc);
                } else {
                    objTooBar.setMenSis("0 Registros encontrados");
                    clnTextos();
                    return false;
                }
            }
            CerrarCon();
        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return false;
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return false;
        }
        butMakeFactura.setEnabled(true);
        butCopyCot.setEnabled(true);
        butCopyInmaconsa.setEnabled(true);//JoséMarín 6/Feb/2015 
        
        /* JM 22/Jun/2017 */
        btnSolRes.setEnabled(true);
        btnODRes.setEnabled(true);
        btnReservas.setEnabled(false);
        /* JM 22/Jun/2017 */
        
        rdoNA.setEnabled(false);
        rdoInicio.setEnabled(false);
        rdoFinal.setEnabled(false);
        butVisOc.setEnabled(true);
        System.gc();
        return true;

    }



    private final int INT_CON_COT_VEN_COD_EMP=0;  
    private final int INT_CON_COT_VEN_COD_LOC=1;   
    private final int INT_CON_COT_VEN_COD_COT=2;  
    private final int INT_CON_COT_VEN_COD_FOR_PAG=3;  
    private final int INT_CON_COT_VEN_FOR_PAG_DES=4;
    private final int INT_CON_COT_VEN_FOR_PAG_TIP_FOR_PAG=5;
    private final int INT_CON_COT_VEN_COD_CLI=6;
    private final int INT_CON_COT_VEN_NOM_CLI=7;
    private final int INT_CON_COT_VEN_ST_REG=8;
    private int intIndiceCotVen=0;
    
    private ArrayList arlRegCotVen,arlDatCotVen;
                            
    
    private boolean _consultar(String strFil) {
        strFiltro = strFil;
        try {
//            System.out.println("ZafVen01._consultar");

            abrirCon();
            if (CONN_GLO != null) {

                stmCab = CONN_GLO.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                
                sSQL =" SELECT CotCab.co_emp,CotCab.co_loc,cli.co_cli, cli.tx_nom as nomcli, cotCab.tx_dirCliFac as dircli,cotCab.tx_dirCliGuiRem as dirCliGui, " ; //<== Campos con los datos del CLiente para la cabecera
                sSQL+="        CotCab.co_cot, CotCab.fe_cot, CotCab.tx_ate,  "; //<==Campos que aparecen en la parte superior del 1er Tab
                sSQL+="        CotCab.co_forPag, " ; //<==Campos que aparecen en la parte superior del 2do Tab
                sSQL+="        CotCab.st_reg , forpag.tx_des, forpag.ne_tipforpag ";
                sSQL+=" FROM tbm_cabCotven as CotCab ";
                sSQL+=" LEFT OUTER JOIN  tbm_cli as Cli on (cotcab.co_emp = cli.co_emp and cotcab.co_cli = cli.co_cli) ";
                sSQL+=" LEFT OUTER JOIN tbm_cabForPag as forpagCli on (forpagCli.co_emp=Cli.co_emp and forpagCli.co_forpag = Cli.co_forPag )  ";
                sSQL+=" LEFT JOIN tbm_Ciu as ciu on(ciu.co_Ciu=Cli.co_ciu)  ";
                sSQL+=" LEFT OUTER JOIN tbm_usr as Usr on (Usr.co_usr = CotCab.co_ven ) " ; // Tablas enlas cuales se trabajara y sus respectivos alias
                sSQL+=" LEFT OUTER JOIN tbm_cabForPag as forpag on (forpag.co_emp=CotCab.co_emp and forpag.co_forpag = CotCab.co_forPag )  ";
                if (intValBus == 6)  //Ventana de Consulta Emergente.
                {
                   sSQL+=" WHERE CotCab.co_emp = " + intCodEmp + " AND CotCab.co_loc = " + intCodLoc; //Rose 13/Sep/2016
                }
                else  // Consultando en la empresa en la ke se esta trabajando
                {
                    sSQL+=" WHERE CotCab.co_emp = " + objZafParSis.getCodigoEmpresa()+ " AND CotCab.co_loc = " + objZafParSis.getCodigoLocal(); 
                }
                //sSQL+=" AND CotCab.fe_cot>='2009-07-01' and CotCab.co_usring="+objZafParSis.getCodigoUsuario();
                sSQL+=" AND CotCab.st_reg in ('A','I','P','C','R','F','U','D','E','L') ";
                sSQL+= strFiltro ;
                sSQL+=" ORDER BY CotCab.co_cot ";


 
                System.out.println("ZafVen01._consultar:" + sSQL);
                arlDatCotVen = new ArrayList();
                rstCab = stmCab.executeQuery(sSQL);
                while(rstCab.next()){
                    arlRegCotVen = new ArrayList();
                    arlRegCotVen.add(INT_CON_COT_VEN_COD_EMP,rstCab.getInt("co_emp"));
                    arlRegCotVen.add(INT_CON_COT_VEN_COD_LOC,rstCab.getInt("co_loc"));
                    arlRegCotVen.add(INT_CON_COT_VEN_COD_COT,rstCab.getInt("co_cot"));
                    arlRegCotVen.add(INT_CON_COT_VEN_COD_FOR_PAG,rstCab.getInt("co_forPag"));
                    arlRegCotVen.add(INT_CON_COT_VEN_FOR_PAG_DES,rstCab.getString("tx_des"));
                    arlRegCotVen.add(INT_CON_COT_VEN_FOR_PAG_TIP_FOR_PAG,rstCab.getInt("ne_tipforpag"));
                    arlRegCotVen.add(INT_CON_COT_VEN_COD_CLI,rstCab.getInt("co_cli"));
                    arlRegCotVen.add(INT_CON_COT_VEN_COD_CLI,rstCab.getString("nomcli"));
                    arlRegCotVen.add(INT_CON_COT_VEN_ST_REG,rstCab.getString("st_reg"));
                    arlDatCotVen.add(arlRegCotVen);
                }
                
                rstCab.close();
                rstCab=null;
                stmCab.close();
                stmCab=null;
                
                if(arlDatCotVen.size()>0){
                    objTooBar.setMenSis("Se encontraron " + (arlDatCotVen.size()-1) + " registros");
                    intIndiceCotVen=arlDatCotVen.size()-1;
                    cargarReg();
                }
                else{
                    objTooBar.setMenSis("0 Registros encontrados");
                    clnTextos();
                    return false;
                }
                // <editor-fold defaultstate="collapsed" desc=" /* José Marín: rstCab 30/Agosto/2016 */ ">
//                if (rstCab.next()) {
//                    rstCab.last();
//                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
//                    cargarReg();
//                } else {
//                    objTooBar.setMenSis("0 Registros encontrados");
//                    clnTextos();
//                    return false;
//                }
//</editor-fold>
            }
            CerrarCon();

        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return false;
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return false;
        }
        return true;

    }
    
    //  FUNCIONA PARA LAS TERMINALES
    private boolean validaCampos() {
        if (txtCliCod.getText().equals("")) {
            tabCotCom.setSelectedIndex(0);
            MensajeValidaCampo("Cliente");
            txtCliCod.requestFocus();
            return false;
        }
        if (!txtFecDoc.isFecha()) {
            tabCotCom.setSelectedIndex(0);
            MensajeValidaCampo("Fecha de Cotización");
            txtFecDoc.requestFocus();
            return false;
        }
        if (txtVenCod.getText().equals("")) {
            tabCotCom.setSelectedIndex(0);
            MensajeValidaCampo("Vendedor");
            txtVenCod.requestFocus();
            return false;
        }
        /* José Marín - 19/Oct/2015 */
        if (txtCliDirGui.getText().equals("")){
            tabCotCom.setSelectedIndex(0);
            MensajeValidaCampo("Dirección Guia de Remisión");
            txtVenCod.requestFocus();
            return false;
        }
        
        if(tx_numped.getText().equals("")){
            tabCotCom.setSelectedIndex(0);
            MensajeValidaCampo("Número de pedido obligatorio");
            tx_numped.requestFocus();
            return false;
        }
        
        /*
         * VAlidando los datos del Pago
         */

        if ((txtCodForPag.getText() == null || txtCodForPag.getText().equalsIgnoreCase("") || txtCodForPag.getText().equalsIgnoreCase("0"))) {
            tabCotCom.setSelectedIndex(1);
            MensajeValidaCampo("Forma de pago");
            return false;
        }


        if (tblPag.getRowCount() <= 0) {
            tabCotCom.setSelectedIndex(1);
            //JOptionPane obj = new JOptionPane();
            String strMsg;
            //strTit="Mensaje del sistema Zafiro";
            strMsg = "Existe un campo en el Detalle que es obligatorio y no esta ingresado.\nEscriba en el campo y vuelva a intentarlo.";
            JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
            return false;
        }


        for (int intRowVal = 0; intRowVal < tblDat.getRowCount(); intRowVal++) {

            if (tblDat.getValueAt(intRowVal, INT_TBL_CODITM) != null) {

                double dblCan = Double.parseDouble(objInvItm.getIntDatoValidado(tblDat.getValueAt(intRowVal, INT_TBL_CANMOV)));

                if (dblCan <= 0.00) {
                    //JOptionPane obj = new JOptionPane();
                    String strMsg;

                    //strTit="Mensaje del sistema Zafiro";
                    strMsg = "Existe un campo en el Detalle que es obligatorio y no esta ingresado.\nEscriba en el campo y vuelva a intentarlo.";
                    JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                    tblDat.repaint();
                    tblDat.requestFocus();
                    tblDat.editCellAt(intRowVal, INT_TBL_CANMOV);
                    return false;
                }



                double dblCos = Double.parseDouble(objInvItm.getIntDatoValidado(tblDat.getValueAt(intRowVal, INT_TBL_PREUNI)));
                if (dblCos <= 0.00) {
                    //JOptionPane obj = new JOptionPane();
                    //String strTit, strMsg;
                    String strMsg;
                    //strTit="Mensaje del sistema Zafiro";
                    strMsg = "Existe un campo en el Detalle que es obligatorio y no esta ingresado.\nEscriba en el campo y vuelva a intentarlo.";
                    JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                    tblDat.repaint();
                    tblDat.requestFocus();
                    tblDat.editCellAt(intRowVal, INT_TBL_PREUNI);
                    return false;
                }


            }
        }



        for (int intNumFil = 0; intNumFil < tblDat.getRowCount(); intNumFil++) {
            if (tblDat.getValueAt(intNumFil, INT_TBL_CODITM) != null) {

                double dlbCanIng = objUti.redondear(tblDat.getValueAt(intNumFil, INT_TBL_CANMOV).toString(), 4);
                String strTipUniMed = objInvItm.getStringDatoValidado(tblDat.getValueAt(intNumFil, INT_TBL_TIPUNIMED));
                if (strTipUniMed.equals("E")) {
                    double dlbResVal = objInvItm.Truncar(objUti.redondear(tblDat.getValueAt(intNumFil, INT_TBL_CANMOV).toString(), 4), 0);
                    dlbResVal = objUti.redondear((dlbCanIng - dlbResVal), 4);
                    if (dlbResVal > 0) {
                        MensajeInf("SOLO SE PERMITE INGRESAR VALORES ENTEROS ");
                        tblDat.setValueAt("0", intNumFil, INT_TBL_CANMOV);
                        return false;
                    }
                }

            }
        }


        /*
         * VAlidando que la suma de los montos de pagos sean igual a total de cotizacion
         */
        double dblTotalMonto = 0;
        for (int rowIdx = 0; rowIdx < tblPag.getRowCount(); rowIdx++) {
            double dblSubMonto = Double.parseDouble(objInvItm.getIntDatoValidado(tblPag.getValueAt(rowIdx, 4)));
            dblTotalMonto = dblTotalMonto + dblSubMonto;
        }

        if (objUti.redondear(dblTotalMonto, intNumDec) != objUti.redondear(dblTotalCot, intNumDec)) {
//            System.out.println("dblTotalMonto " + dblTotalMonto);
//            System.out.println("dblTotalCot (JOTA) " + dblTotalCot);
            
            tabCotCom.setSelectedIndex(1);
            //JOptionPane obj = new JOptionPane();
            String strMsg;
            //strTit="Mensaje del sistema Zafiro";
            strMsg = "La suma de los montos a pagar es mayor al total de la Cotizacion.\nCorrija y vuelva a intentarlo.";
            JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);

            return false;
        }
        String strSql = "select nd_maxDes from tbm_cli where "
                + "co_emp = " + objZafParSis.getCodigoEmpresa() + " and "
                + "co_cli = " + Integer.parseInt(txtCliCod.getText());
        try {
            if (CONN_GLO != null) {

                Statement stmCliDesc = CONN_GLO.createStatement();
                ResultSet rstCliDesc = stmCliDesc.executeQuery(strSql);
                if (rstCliDesc.next()) {
                    double dblPorDesCli = rstCliDesc.getDouble("nd_maxDes");

                    //*****************************************************************************
                    //*****************************************************************************
                    int Estado = 0;
                    int intSer = 0;

                    int ValCod = 0;
                    for (int intRowVal = 0; intRowVal < tblDat.getRowCount(); intRowVal++) {
                        if (tblDat.getValueAt(intRowVal, INT_TBL_CODITM) != null) {
                            if (tblDat.getValueAt(intRowVal, INT_TBL_ITMTER).toString().trim().equalsIgnoreCase("S")) {
                                if (tblDat.getValueAt(intRowVal, INT_TBL_ITMSER).toString().equalsIgnoreCase("N")) {   // SI NO ES DE SERVICIO


                                    if (tblDat.getValueAt(intRowVal, INT_TBL_COD_PRO) != null) {
                                        ValCod = Integer.parseInt(tblDat.getValueAt(intRowVal, INT_TBL_COD_PRO).toString());
                                    }

                                    if (tblDat.getValueAt(intRowVal, INT_TBL_COD_PRO) == null || ValCod == 0) {
                                        tblDat.repaint();
                                        tblDat.requestFocus();
                                        tblDat.changeSelection(intRowVal, INT_TBL_NOM_PRO, false, false);
                                        tblDat.setValueAt("*", intRowVal, INT_TBL_NOM_PRO);
                                        Estado = 1;
                                    }
                                }
                            }
                        }
                    }


                    //*****************************************************************************
                    //*****************************************************************************



                    if (Estado == 1) {
                        String strMsg;
                        //JOptionPane obj =new JOptionPane();
                        //strTit="Mensaje del sistema Zafiro";
                        strMsg = "El campo <<Proveedor>> no puede estar vacio.";

                        JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                        return false;
                    }


                    for (int intRowVal = 0; intRowVal < tblDat.getRowCount(); intRowVal++) {
                        if (tblDat.getValueAt(intRowVal, INT_TBL_CODITM) != null) {

                            if (tblDat.getValueAt(intRowVal, INT_TBL_COD_PRO) != null) {
                                if (!(Integer.parseInt(tblDat.getValueAt(intRowVal, INT_TBL_COD_PRO).toString()) == 0)) {

                                    double valor = 0.00;
                                    if (tblDat.getValueAt(intRowVal, INT_TBL_PRE_COS) != null) {
                                        valor = Double.parseDouble(tblDat.getValueAt(intRowVal, INT_TBL_PRE_COS).toString());
                                    }

                                    if (valor <= 0.00) {
                                        String strMsg;
                                        //JOptionPane obj =new JOptionPane();
                                        //strTit="Mensaje del sistema Zafiro";
                                        strMsg = "El campo <<Pre.Com>> no puede estar Cero.";
                                        JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                                        tblDat.repaint();
                                        tblDat.requestFocus();
                                        tblDat.changeSelection(intRowVal, INT_TBL_PRE_COS, true, false);
                                        tblDat.editCellAt(intRowVal, INT_TBL_PRE_COS);
                                        return false;
                                    }
                                }
                            }
                            ///****

                            //*****
                        }
                    }

                    //*********************************
                }
                rstCliDesc.close();
                stmCliDesc.close();
                rstCliDesc = null;
                stmCliDesc = null;
            }

            /**
             * CAMPOS TARJETA DE CREDITO.
             */
            if (intTipForPagCotizacion == 4) {
                if (txtCodTarCre.getText().equals("")) {
                    tabCotCom.setSelectedIndex(1);
                    MensajeValidaCampo("Tarjeta de Credito");
                    return false;
                }


            }
            
            /* JM: (19/Feb/2018) validacion es obligario cambiar nombre del item */
            if(!validacionIsObligatorioCambiarNombreDelItem()){
                return false;
            }
           
        } 
        catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return false;
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return false;
        }
        return true;
    }
    
    /**
     * validacionIsObligatorioCambiarNombreDelItem
     * JM: (19/Feb/2018) Validacion antes de insertar, nuevo control de items Terminales L, 
     *      y que son obligatorios de modificar el nombre
     * @return 
     */
    private boolean validacionIsObligatorioCambiarNombreDelItem(){
        boolean blnRes=true;
        try{
            for (int intRowVal = 0; intRowVal < tblDat.getRowCount(); intRowVal++) {
                if (tblDat.getValueAt(intRowVal, INT_TBL_CODITM) != null) {
                    if(objDatItm.isObligatorioModificarNombreDelItem(objZafParSis.getCodigoEmpresa(), Integer.parseInt(tblDat.getValueAt(intRowVal, INT_TBL_CODITM).toString()), objUti.codificar(tblDat.getValueAt(intRowVal, INT_TBL_DESITM).toString()) ) ){
                        String strMsg;
                        strMsg = "<html> "+tblDat.getValueAt(intRowVal, INT_TBL_ITMALT)+": Es obligatorio cambiar la <FONT COLOR=\"blue\">DESCRIPCION</FONT>. </html>";
                        JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                        tblDat.repaint();
                        tblDat.requestFocus();
                        tblDat.changeSelection(intRowVal, INT_TBL_ITMALT, true, false);
                        tblDat.editCellAt(intRowVal, INT_TBL_ITMALT);
                        blnRes=false;
                    } 
                }
            }
        }
        catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return false;
        }
        return blnRes;
    }
    
    
    
    /**
     * 
     * @return 
     */

    private boolean validaCamFac() {
        if (txtCliCod.getText().equals("")) {
            tabCotCom.setSelectedIndex(0);
            MensajeValidaCampo("Cliente");
            txtCliCod.requestFocus();
            return false;
        }
        if (!txtFecDoc.isFecha()) {
            tabCotCom.setSelectedIndex(0);
            MensajeValidaCampo("Fecha de Cotización");
            txtFecDoc.requestFocus();
            return false;
        }
        if (txtVenCod.getText().equals("")) {
            tabCotCom.setSelectedIndex(0);
            MensajeValidaCampo("Vendedor");
            txtVenCod.requestFocus();
            return false;
        }
        
        /* José Marín - 19/Oct/2015 */
        if (txtCliDirGui.getText().equals("")){
            tabCotCom.setSelectedIndex(0);
            MensajeValidaCampo("Dirección Guia de Remisión");
            txtVenCod.requestFocus();
            return false;
        }
        
        if(tx_numped.getText().equals("")){
            tabCotCom.setSelectedIndex(0);
            MensajeValidaCampo("Número de pedido obligatorio");
            tx_numped.requestFocus();
            return false;
        }
        
        /*
         * VAlidando los datos del Pago
         */
        if ((txtCodForPag.getText() == null || txtCodForPag.getText().equalsIgnoreCase("") || txtCodForPag.getText().equalsIgnoreCase("0"))) {
            tabCotCom.setSelectedIndex(1);
            MensajeValidaCampo("Forma de pago");
            return false;
        }



        if (tblPag.getRowCount() <= 0) {
            tabCotCom.setSelectedIndex(1);
            //JOptionPane obj = new JOptionPane();
            //String strTit, strMsg;
            String strMsg;
            //strTit="Mensaje del sistema Zafiro";
            strMsg = "Existe un campo en el Detalle que es obligatorio y no esta ingresado.\nEscriba en el campo y vuelva a intentarlo.";
            JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
            return false;
        }



        for (int intRowVal = 0; intRowVal < tblDat.getRowCount(); intRowVal++) {

            if (tblDat.getValueAt(intRowVal, INT_TBL_CODITM) != null) {

                double dblCan = Double.parseDouble(objInvItm.getIntDatoValidado(tblDat.getValueAt(intRowVal, INT_TBL_CANMOV)));

                if (dblCan <= 0.00) {
                    //JOptionPane obj = new JOptionPane();
                    String strMsg;

                    //strTit="Mensaje del sistema Zafiro";
                    strMsg = "Existe un campo en el Detalle que es obligatorio y no esta ingresado.\nEscriba en el campo y vuelva a intentarlo.";
                    JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                    tblDat.repaint();
                    tblDat.requestFocus();
                    tblDat.editCellAt(intRowVal, INT_TBL_CANMOV);
                    return false;
                }



                double dblCos = Double.parseDouble(objInvItm.getIntDatoValidado(tblDat.getValueAt(intRowVal, INT_TBL_PREUNI)));
                if (dblCos <= 0.00) {
                    //JOptionPane obj = new JOptionPane();
                    String strMsg;
                    //strTit="Mensaje del sistema Zafiro";
                    strMsg = "Existe un campo en el Detalle que es obligatorio y no esta ingresado.\nEscriba en el campo y vuelva a intentarlo.";
                    JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                    tblDat.repaint();
                    tblDat.requestFocus();
                    tblDat.editCellAt(intRowVal, INT_TBL_PREUNI);
                    return false;
                }


            }
        }




        for (int intNumFil = 0; intNumFil < tblDat.getRowCount(); intNumFil++) {
            if (tblDat.getValueAt(intNumFil, INT_TBL_CODITM) != null) {
                double dlbCanIng = objUti.redondear(tblDat.getValueAt(intNumFil, INT_TBL_CANMOV).toString(), 4);
                String strTipUniMed = objInvItm.getStringDatoValidado(tblDat.getValueAt(intNumFil, INT_TBL_TIPUNIMED));
                if (strTipUniMed.equals("E")) {
                    double dlbResVal = objInvItm.Truncar(objUti.redondear(tblDat.getValueAt(intNumFil, INT_TBL_CANMOV).toString(), 4), 0);
                    dlbResVal = objUti.redondear((dlbCanIng - dlbResVal), 4);
                    if (dlbResVal > 0) {
                        MensajeInf("SOLO SE PERMITE INGRESAR VALORES ENTEROS ");
                        tblDat.setValueAt("0", intNumFil, INT_TBL_CANMOV);
                        return false;
                    }
                }

            }
        }



        /*
         * VAlidando que la suma de los montos de pagos sean igual a total de cotizacion
         */
        double dblTotalMonto = 0;
        for (int rowIdx = 0; rowIdx < tblPag.getRowCount(); rowIdx++) {
            double dblSubMonto = objUti.redondear(((tblPag.getValueAt(rowIdx, INT_TBL_PAGMON) == null) ? "0" : tblPag.getValueAt(rowIdx, INT_TBL_PAGMON).toString()), intNumDec);
            dblTotalMonto = dblTotalMonto + dblSubMonto;
        }

        if (objUti.redondear(dblTotalMonto, intNumDec) != objUti.redondear(dblTotalCot, intNumDec)) {
            tabCotCom.setSelectedIndex(1);
            System.out.println("dblTotalMonto " + dblTotalMonto);
            System.out.println("dblTotalCot (ROSE) " + dblTotalCot);
            //JOptionPane obj = new JOptionPane();
            String strMsg;
            //strTit="Mensaje del sistema Zafiro";
            strMsg = "La suma de los montos a pagar es mayor al total de la Cotizacion.\nCorrija y vuelva a intentarlo.";
            JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);

            return false;
        }

        try {

            //*****************************************************************************
            //*****************************************************************************
            int Estado = 0;
            int ValCod = 0;

            //*****************************************************************************
            //*****************************************************************************



            for (int intRowVal = 0; intRowVal < tblDat.getRowCount(); intRowVal++) {
                if (tblDat.getValueAt(intRowVal, INT_TBL_CODITM) != null) {
                    if (tblDat.getValueAt(intRowVal, INT_TBL_ITMTER).toString().trim().equalsIgnoreCase("S")) {
                        if (tblDat.getValueAt(intRowVal, INT_TBL_ITMSER).toString().equalsIgnoreCase("N")) {   // SI NO ES DE SERVICIO


                            if (tblDat.getValueAt(intRowVal, INT_TBL_COD_PRO) != null) {
                                ValCod = Integer.parseInt(tblDat.getValueAt(intRowVal, INT_TBL_COD_PRO).toString());
                            }

                            if (tblDat.getValueAt(intRowVal, INT_TBL_COD_PRO) == null || ValCod == 0) {
                                tblDat.repaint();
                                tblDat.requestFocus();
                                tblDat.changeSelection(intRowVal, INT_TBL_NOM_PRO, false, false);
                                tblDat.setValueAt("*", intRowVal, INT_TBL_NOM_PRO);
                                Estado = 1;
                            }
                        }
                    }
                }
            }
            //************************************************


            if (Estado == 1) {
                String strMsg;
                //JOptionPane obj =new JOptionPane();
                //strTit="Mensaje del sistema Zafiro";
                strMsg = "El campo <<Proveedor>> no puede estar vacio.";

                JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                return false;
            }


            for (int intRowVal = 0; intRowVal < tblDat.getRowCount(); intRowVal++) {
                if (tblDat.getValueAt(intRowVal, INT_TBL_CODITM) != null) {
                    if (tblDat.getValueAt(intRowVal, INT_TBL_COD_PRO) != null) {
                        if (!(Integer.parseInt(tblDat.getValueAt(intRowVal, INT_TBL_COD_PRO).toString()) == 0)) {

                            double valor = 0.00;
                            if (tblDat.getValueAt(intRowVal, INT_TBL_PRE_COS) != null) {
                                valor = Double.parseDouble(tblDat.getValueAt(intRowVal, INT_TBL_PRE_COS).toString());
                            }

                            if (valor <= 0.00) {
                                String strMsg;
                                //JOptionPane obj =new JOptionPane();
                                //strTit="Mensaje del sistema Zafiro";
                                strMsg = "El campo <<Pre.Com>> no puede estar Cero.";
                                JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                                tblDat.repaint();
                                tblDat.requestFocus();
                                tblDat.changeSelection(intRowVal, INT_TBL_PRE_COS, true, false);
                                tblDat.editCellAt(intRowVal, INT_TBL_PRE_COS);
                                return false;
                            }
                        }
                    }
                    ///****
                    //*****
                }
            }

            /**
             * CAMPOS TARJETA DE CREDITO.
             */
            if (intTipForPagCotizacion == 4) {
                if (txtCodTarCre.getText().equals("")) {
                    tabCotCom.setSelectedIndex(1);
                    MensajeValidaCampo("Tarjeta de Credito");
                    return false;
                }
            }
            /* JM: (19/Feb/2018) validacion es obligario cambiar nombre del item */
             if(!validacionIsObligatorioCambiarNombreDelItem()){
                return false;
            }

        } 
        catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return false;
        }
        return true;
    }

    private double getStkAct(String int_co_itm) {
        double dblStkAct = 0;
        try {
            //   System.out.println("ZafVen01.getStkAct");

            INTVERCONCEN = 0;
            //Abrir_Conexion_Remota();
            if (CONN_GLO != null) {


                java.sql.Statement stmUni = CONN_GLO.createStatement();


//                String sSQL = "SELECT SUM(a2.nd_stkAct) AS nd_stkAct"
//                        + " FROM tbm_equInv AS a1 INNER JOIN tbm_invBod AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm)"
//                        + " INNER JOIN tbr_bodEmp AS a3 ON (a2.co_emp=a3.co_empPer AND a2.co_bod=a3.co_bodPer)"
//                        + " WHERE a3.co_emp=" + objZafParSis.getCodigoEmpresa() + " AND a3.co_loc=" + objZafParSis.getCodigoLocal() + " AND a1.co_itmMae=(SELECT co_itmMae FROM tbm_equInv"
//                        + " WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_itm=" + int_co_itm + ")";
                String sSQL = "SELECT SUM(a2.nd_canDis) AS nd_canDis"
                        + " FROM tbm_equInv AS a1 INNER JOIN tbm_invBod AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm)"
                        + " INNER JOIN tbr_bodEmp AS a3 ON (a2.co_emp=a3.co_empPer AND a2.co_bod=a3.co_bodPer)"
                        + " WHERE a3.co_emp=" + objZafParSis.getCodigoEmpresa() + " AND a3.co_loc=" + objZafParSis.getCodigoLocal() + " AND a1.co_itmMae=(SELECT co_itmMae FROM tbm_equInv"
                        + " WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_itm=" + int_co_itm + ")";
                java.sql.ResultSet rstUni = stmUni.executeQuery(sSQL);
                if (rstUni.next()) {
                    dblStkAct = rstUni.getDouble("nd_canDis");
                }
                rstUni.close();
                stmUni.close();
                rstUni = null;
                stmUni = null;
            }
        } catch (java.sql.SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return dblStkAct;
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return dblStkAct;
        }
        return dblStkAct;
    }

    private double getPreUni(int intNumFil, String int_co_itm) {
        double dblPreUni = -1;
        java.sql.Connection conLoc;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;
        boolean blnIsCosenco=false,blnIsEcuatosa=false,blnIsDetopacio=false;
        String strCadena="";
        try {
            blnIsCosenco = (objZafParSis.getNombreEmpresa().toUpperCase().indexOf("COSENCO") > -1)?true:false;
            blnIsEcuatosa = (objZafParSis.getNombreEmpresa().toUpperCase().indexOf("ECUATOSA") > -1)?true:false;
            blnIsDetopacio = (objZafParSis.getNombreEmpresa().toUpperCase().indexOf("DETOPACIO") > -1)?true:false;
            conLoc=DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if(conLoc!=null){
                stmLoc=conLoc.createStatement();   
                if(txtCot.getText().length()>0){
                    strCadena="";
                    strCadena+=" SELECT a2.nd_preUniVenLis,a2.co_reg, a2.co_itm, a1.co_emp, a1.co_loc, a1.co_cot ";
                    strCadena+=" FROM tbm_cabCotVen as a1 ";
                    strCadena+=" INNER JOIN tbm_detCotVen as a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND ";
                    strCadena+="                                    a1.co_cot=a2.co_cot)";
                    strCadena+=" WHERE a1.co_emp="+objZafParSis.getCodigoEmpresa()+" AND a1.co_loc="+objZafParSis.getCodigoLocal()+" AND ";
                    strCadena+="       a1.co_cot="+txtCot.getText()+" AND a2.co_itm="+int_co_itm ;
                    System.out.println("getPreUni PRECIO 1 Precio de lista nd_preUniVenLis " + strCadena);
                    rstLoc = stmLoc.executeQuery(strCadena);
                    if(rstLoc.next()){
                        dblPreUni = rstLoc.getDouble("nd_preUniVenLis");
                    }
                    rstLoc.close();
                    rstLoc=null;
                }
                if(dblPreUni<=0){
                    if(blnIsCosenco || blnIsEcuatosa ||blnIsDetopacio){  // COSENCO
                        dblPreUni = objUti.redondear(objInvItm.getIntDatoValidado(tblDat.getValueAt(intNumFil, INT_TBL_PRELISITM)), objZafParSis.getDecimalesBaseDatos());
                    }
                    else{  // TUVAL CASTEK DIMULTI
                        strCadena= "SELECT CASE WHEN nd_preVta1 IS NULL THEN -1 ELSE  \n";
                        strCadena+="       CASE WHEN nd_preVta1 <= 0 THEN -1 ELSE nd_preVta1 END END as nd_preVta1 \n";
                        strCadena+=" FROM tbm_inv AS inv \n";
                        strCadena+=" WHERE inv.co_emp = " + objZafParSis.getCodigoEmpresa() +  " AND \n";
                        strCadena+="       inv.co_itm = " + int_co_itm + " \n";
                        System.out.println("getPreUni PRECIO 2 Precio de tbm_inv " + strCadena);
                        rstLoc = stmLoc.executeQuery(strCadena);
                        if(rstLoc.next()){
                            dblPreUni = rstLoc.getDouble("nd_prevta1");
                        }
                        rstLoc.close();
                        rstLoc=null;  
                    }
                }
                stmLoc.close();
                stmLoc=null;
            }
            conLoc.close();
            conLoc=null;
 
        }
        catch(java.sql.SQLException Evt) { 
            objUti.mostrarMsgErr_F1(jfrThis, Evt );  
              dblPreUni = -1; 
        }
        catch (Exception Evt) {
            dblPreUni = -1;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return dblPreUni;
    }

    /*
     *  Listener para hacer que se calcule el pago despues segun el total de cotizacion
     */
    private boolean isAnulada() {
        boolean blnRes = false;
        ///java.sql.Connection conTmp ;
        java.sql.Statement stmTmp;
        String strSQL = "";
        try {
            //       System.out.println("ZafVen01.isAnulada");

            if (CONN_GLO != null) {
                strSQL = "";
                strSQL = " Select count(*) from tbm_cabcotven ";
                strSQL += " where  co_emp = " + objZafParSis.getCodigoEmpresa() + " and  co_loc = " + objZafParSis.getCodigoLocal() + " and co_cot = " + txtCot.getText() + " and st_reg = 'I' ";
                if (objUti.getNumeroRegistro(this, objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), strSQL) > 0) {
                    blnRes = true;
                    MensajeInf("Documento anulado no se puede modificar");
                } else {
                    blnRes = false;
                }

            }


        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            blnRes = true;
        }
        return blnRes;
    }

    private void MensajeInf(String strMensaje) {
        //OptionPane obj =new JOptionPane();
        //String strTit;
        //strTit="Mensaje del sistema Zafiro";
        JOptionPane.showMessageDialog(jfrThis, strMensaje, strTit, JOptionPane.INFORMATION_MESSAGE);
    }

    public class ActLisForPag implements java.awt.event.ActionListener {

        @Override
        public void actionPerformed(java.awt.event.ActionEvent e) {
            // calculaPagos();
        }
    }

    public double getSubtotalSinTrans() {
        //      System.out.println("ZafVen01.getSubtotalSinTrans");

        double dblSub = 0, dblSubCot = 0, dblDes = 0, dblTmp = 0, dblSub2 = 0;
        for (int i = 0; i < tblDat.getRowCount(); i++) {
            if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                if (!(tblDat.getValueAt(i, INT_TBL_ITMSER).toString().trim().equalsIgnoreCase("T"))) {

                    dblSub2 = ((tblDat.getValueAt(i, INT_TBL_TOTAL) == null || tblDat.getValueAt(i, INT_TBL_TOTAL).toString().equals("")) ? 0 : Double.parseDouble(tblDat.getValueAt(i, INT_TBL_TOTAL).toString()));
                    dblSub = dblSub + objUti.redondear(dblSub2, intNumDec);

                }
            }
        }

        dblSubCot = objUti.redondear(dblSub, intNumDec);

        return dblSubCot;
    }

    public double getSubtotalTrans() {
        // System.out.println("ZafVen01.getSubtotalTrans");

        double dblSub = 0, dblSubCot = 0, dblDes = 0, dblTmp = 0, dblSub2 = 0;
        for (int i = 0; i < tblDat.getRowCount(); i++) {
            if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                if (tblDat.getValueAt(i, INT_TBL_ITMSER).toString().trim().equalsIgnoreCase("T")) {

                    dblSub2 = ((tblDat.getValueAt(i, INT_TBL_TOTAL) == null || tblDat.getValueAt(i, INT_TBL_TOTAL).toString().equals("")) ? 0 : Double.parseDouble(tblDat.getValueAt(i, INT_TBL_TOTAL).toString()));
                    dblSub = dblSub + objUti.redondear(dblSub2, intNumDec);

                }
            }
        }
        dblSubCot = objUti.redondear(dblSub, intNumDec);
        return dblSubCot;
    }
    Vector vecDataTblPag;
    double dblRetFueGlo = 0, dblRetIvaGlo = 0;

    public void calculaPag() {
        // System.out.println("ZafVen01.CalculaPag");

        int intVal = intCanArr[0];
        int intsizearre = intarreglodia.length;
        intVal = intsizearre - (intsizearre - intVal);
        double dblBaseDePagos = 0, dblRetIva = 0, dblRetFue = 0, dblRetFueFle = 0;
        double dblPago = 0.00;
        double dblPagos = 0.00;
        double dblRete = 0;
        int i = 0;
        try {

            java.util.Calendar objFec = java.util.Calendar.getInstance();

            int fecDoc[] = txtFecDoc.getFecha(txtFecDoc.getText());


            if (fecDoc != null) {
                objFec.set(java.util.Calendar.DAY_OF_MONTH, fecDoc[0]);
                objFec.set(java.util.Calendar.MONTH, fecDoc[1] - 1);
                objFec.set(java.util.Calendar.YEAR, fecDoc[2]);
            }
            if(dblValorPagar==0){
                dblBaseDePagos = dblTotalCot;
            }
            else{
                dblBaseDePagos = dblValorPagar;
            }
            

            dblRetFueGlo = 0.0;
            dblRetIvaGlo = 0.00;


            if (strCodTipPerCli.equals("")) {
                if (!(txtCliCod.getText().equals(""))) {
                    Mensaje("AL CLIENTE LE FALTA TIPO DE PERSONA\n. REVISE LOS DATOS DEL CLIENTE Y CORRIJA ");
                }
                objTblModPag.removeAllRows();
            } else {


                if (dblBaseDePagos > 0) {

                    vecDataTblPag = new Vector();

                    if (!(txtCodForPag.getText() == null || txtCodForPag.getText().equalsIgnoreCase("") || txtCodForPag.getText().equalsIgnoreCase("0"))) {
                        Librerias.ZafDate.ZafDatePicker dtePckPag = new Librerias.ZafDate.ZafDatePicker(new javax.swing.JFrame(), "d/m/y");
                        //*************************************************************************************///
                        java.sql.Connection conn = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                        if (conn != null) {

                            /**
                             * ***************************************************************************************************************************
                             */
                            calculaSubtotalServiNoServi(conn, "T");

                            if (dblSubSerNoSer > 0.00) {
                                cargaForPag(conn, intCodMotTran);
                            }

                            /**
                             * ***************************************************************************************************************************
                             */
                            calculaSubtotalServiNoServi(conn, "N");

                            if (dblSubSerNoSer > 0.00) {
                                cargaForPag(conn, intCodMotBien);
                            }

                            /**
                             * ***************************************************************************************************************************
                             */
                            calculaSubtotalServiNoServi(conn, "S");

                            if (dblSubSerNoSer > 0.00) {
                                cargaForPag(conn, intCodMotServ);
                            }
                            
                            if(blnIsComSol && dblPorIva==14.00){
                                cargaForPagComSol();
                            }

                            /**
                             * ***************************************************************************************************************************
                             */
                            //*************************************************************************************///
       
                            conn.close();
                            conn = null;
                        }
                        //*************************************************************************************///
                        //dblRete = dblRetFueFle+dblRetFue+dblRetIva;
                        dblRete = dblRetFueGlo + dblRetIvaGlo;
                        if(dblValorPagar==0){
                            dblBaseDePagos = objUti.redondear((dblTotalCot - dblRete), intNumDec);
                        }
                        else{
                             dblBaseDePagos = objUti.redondear((dblValorPagar - dblRete), intNumDec);
                        }
                        


                        for (i = 0; i < intVal; i++) {
                            java.util.Calendar objFecPagActual = Calendar.getInstance();
                            objFecPagActual.setTime(objFec.getTime());

                            int diaCre = intarreglodia[i];
                            int numPag = intarreglonum[i];
                            String strSop = ((strarreglosop[i] == null) ? "N" : strarreglosop[i]);

                            if (diaCre != 0) {
                                objFecPagActual.add(java.util.Calendar.DATE, diaCre);
                            }

                            dtePckPag.setAnio(objFecPagActual.get(java.util.Calendar.YEAR));
                            dtePckPag.setMes(objFecPagActual.get(java.util.Calendar.MONTH) + 1);
                            dtePckPag.setDia(objFecPagActual.get(java.util.Calendar.DAY_OF_MONTH));

                            java.util.Vector vecReg = new java.util.Vector();
                            vecReg.add(INT_TBL_PAGLIN, "");
                            vecReg.add(INT_TBL_PAGCRE, "" + diaCre);
                            vecReg.add(INT_TBL_PAGFEC, dtePckPag.getText());

                            dblPagos = objUti.redondear((numPag == 0) ? 0 : (dblBaseDePagos / numPag), intNumDec);
                            dblPago += dblPagos;
                            dblPagos = objUti.redondear(dblPagos, intNumDec);

                            vecReg.add(INT_TBL_PAGRET, "");

                            if (i == (intVal - 1)) {
                                if(dblValorPagar==0){
                                    dblPagos = objUti.redondear(dblPagos + (dblTotalCot - (dblPago + dblRete)), intNumDec);
                                }
                                else{
                                    dblPagos = objUti.redondear(dblPagos + (dblValorPagar - (dblPago + dblRete)), intNumDec);
                                }
                                
                            }

                            vecReg.add(INT_TBL_PAGMON, "" + dblPagos);
                            vecReg.add(INT_TBL_PAGGRA, "0");
                            vecReg.add(INT_TBL_PAGCOD, "");
                            vecReg.add(INT_TBL_PAGSOP, strSop);
                            vecReg.add(INT_TBL_COMSOL, "N");
                            
                            vecDataTblPag.add(vecReg);
                        }
                        objTblModPag.setData(vecDataTblPag);
                        tblPag.setModel(objTblModPag);

                        vecDataTblPag = null;



                        /**
                         * ********************************************************************************************
                         */
                        double dblValRet = 0;
                        String strFecCor = "";
                        for (int x = 0; x < tblPag.getRowCount(); x++) {
                            dblValRet = Double.parseDouble(objInvItm.getIntDatoValidado(tblPag.getValueAt(x, INT_TBL_PAGRET)));
                            if (dblValRet == 0.00) {
                                strFecCor = tblPag.getValueAt(x, INT_TBL_PAGFEC).toString();
                                break;
                            }
                        }

                        String strF1 = objUti.formatearFecha(strFecSisBase, "yyyy-MM-dd", "yyyy/MM/dd");
                        java.util.Date fac1 = objUti.parseDate(strF1, "yyyy/MM/dd");
                        int intAnioAct = (fac1.getYear() + 1900);

                        //  por alfredo.  año nuevo 31 dic año anterior
                        String strF = objUti.formatearFecha(strFecCor, "dd/MM/yyyy", "yyyy/MM/dd");
                        java.util.Date fac = objUti.parseDate(strF, "yyyy/MM/dd");
                        int intAnioCre = (fac.getYear() + 1900);


                        if (intAnioCre > intAnioAct) {
                            strFecCor = "31/12/" + intAnioAct;
                        }

                        for (int x = 0; x < tblPag.getRowCount(); x++) {
                            dblValRet = Double.parseDouble(objInvItm.getIntDatoValidado(tblPag.getValueAt(x, INT_TBL_PAGRET)));
                            if (dblValRet > 0.00) {
                                tblPag.setValueAt(strFecCor, x, INT_TBL_PAGFEC);
                            }

                        }

                        /**
                         * ********************************************************************************************
                         */
                    }
                }
            }
        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
    }
    
    
    
    private double dblSubSerNoSer = 0, dblIvaSerNoSer = 0;

    public void calculaSubtotalServiNoServi(java.sql.Connection conn, String strServi) {
        double dblCan, dblDes, dblTotal = 0.00, dblPre = 0.00, dblValDes = 0.00;
        double dblSub = 0, dblIva = 0, dblTmp = 0;
        int intFilSel = 0;
        dblSubSerNoSer = 0;
        dblIvaSerNoSer = 0;
        BigDecimal bgdCanItm;
        BigDecimal bgdPreItm;
        BigDecimal bgdValDesItm;
        BigDecimal bgdPorDesItm;
        BigDecimal bgdTotItm=BigDecimal.ZERO;
        try {
            if (conn != null) {
                for (intFilSel = 0; intFilSel < tblDat.getRowCount(); intFilSel++) {
                    if (tblDat.getValueAt(intFilSel, INT_TBL_CODITM) != null) {
                        if (objInvItm.getEstItm(conn, objZafParSis.getCodigoEmpresa(), Integer.parseInt(tblDat.getValueAt(intFilSel, INT_TBL_CODITM).toString()), strServi)) {

                            dblCan = Double.parseDouble(objInvItm.getIntDatoValidado(tblDat.getValueAt(intFilSel, INT_TBL_CANMOV)));
                            dblPre = Double.parseDouble(objInvItm.getIntDatoValidado(tblDat.getValueAt(intFilSel, INT_TBL_PREUNI)));
                            dblDes = objUti.redondear(Double.parseDouble(objInvItm.getIntDatoValidado(tblDat.getValueAt(intFilSel, INT_TBL_PORDES))), 2);

//                            dblValDes = ((dblCan * dblPre) == 0) ? 0 : ((dblCan * dblPre) * (dblDes / 100));
//                            dblTotal = (dblCan * dblPre) - dblValDes;
//                            dblTotal = objUti.redondear(dblTotal, 2);
                              /* JM : Ahora con BigDecimal 22/Marzo/2017 */
               

                            bgdCanItm=BigDecimal.valueOf(dblCan) ;
                            bgdPreItm=BigDecimal.valueOf(dblPre) ;
                            bgdPorDesItm=BigDecimal.valueOf(dblDes) ;

                            //DESCUENTO
                           bgdValDesItm = bgdPorDesItm.multiply((bgdCanItm.multiply(bgdPreItm))); 
        bgdValDesItm = bgdValDesItm.divide(new BigDecimal("100"),objZafParSis.getDecimalesBaseDatos(),BigDecimal.ROUND_HALF_UP);
                            ///TOTAL
                            bgdTotItm=objUti.redondearBigDecimal((bgdCanItm.multiply(bgdPreItm)).subtract(bgdValDesItm), objZafParSis.getDecimalesMostrar());    
                            dblTotal = bgdTotItm.doubleValue();

                            dblSub += dblTotal;


                            if (objInvItm.getStringDatoValidado(tblDat.getValueAt(intFilSel, INT_TBL_BLNIVA)).equals("true")) {
                                dblTmp = dblTotal;
                                dblIva = dblIva + (((dblTmp * dblPorIva) == 0) ? 0 : (dblTmp * dblPorIva) / 100);
                            } else {
                                dblIva = dblIva + 0;
                            }

                        }
                    }
                }

                if (stIvaVen.equals("N")) {
                    dblIvaSerNoSer = 0.00;
                } else {
                    dblIvaSerNoSer = objUti.redondear(dblIva, intNumDec);
                }


                dblSubSerNoSer = objUti.redondear(dblSub, intNumDec);

            }
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }

    
    private void cargaForPagComSol() {
        double dblRetFue = 0;
        try {
            java.util.Vector vecReg = new java.util.Vector();
            vecReg.add(INT_TBL_PAGLIN, "");
            vecReg.add(INT_TBL_PAGCRE, "");
            vecReg.add(INT_TBL_PAGFEC, txtFecDoc.getText());
            dblRetFue = objUti.redondear((dblBaseIva * (dblPorComSol) / 100), 2);
            vecReg.add(INT_TBL_PAGRET, "");
            vecReg.add(INT_TBL_PAGMON, "" + dblRetFue);
            vecReg.add(INT_TBL_PAGGRA, "");
            vecReg.add(INT_TBL_PAGCOD, "");
            vecReg.add(INT_TBL_PAGSOP, "N");
            vecReg.add(INT_TBL_COMSOL, "S");  // <<<< ===== COMPENSACION SOLIDARIA
            vecDataTblPag.add(vecReg);
        }  
        catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
    }
    
    private void cargaForPag(java.sql.Connection conn, int intCodMot) {
        java.sql.Statement stm;
        java.sql.ResultSet rst;
        String strSQL = "";
        double dblRetFue = 0, dblRetIva = 0;
        try {
            if (intTipForPagCotizacion == 4) {
                return;
            }
            if (conn != null) {
               stm = conn.createStatement();
                strSQL = " select tipret.co_tipret,tipret.tx_descor,tipret.tx_deslar,nd_porret,tx_aplret,co_cta";
                strSQL += " from tbm_polret as polret left outer join tbm_motdoc as mot on (polret.co_emp = mot.co_emp and polret.co_mottra = mot.co_mot) left outer join tbm_cabtipret as tipret on (polret.co_emp= tipret.co_emp and polret.co_tipret = tipret.co_tipret)";
                strSQL += " where polret.co_emp = " + objZafParSis.getCodigoEmpresa() + " and co_mot = " + intCodMot + " and co_sujret = " + intCodTipPerEmp + " and co_ageret  = " + strCodTipPerCli + " "
                        + " AND polret.st_reg='A' AND  '" + strFecSisBase + "'  BETWEEN polret.fe_vigdes AND  CASE  when polret.fe_vighas is null then '3000-01-01' else polret.fe_vighas end ";
           
                rst = stm.executeQuery(strSQL);
                while (rst.next()) {
                    if (rst.getString("tx_aplret").equals("S")) {
                        java.util.Vector vecReg = new java.util.Vector();
                        vecReg.add(INT_TBL_PAGLIN, "");
                        vecReg.add(INT_TBL_PAGCRE, "");
                        vecReg.add(INT_TBL_PAGFEC, txtFecDoc.getText());
                        dblRetFue = objUti.redondeo((dblSubSerNoSer * (rst.getDouble("nd_porret") / 100)), 2);
                        dblRetFueGlo += dblRetFue;
                        vecReg.add(INT_TBL_PAGRET, rst.getString("nd_porret"));
                        vecReg.add(INT_TBL_PAGMON, "" + dblRetFue);
                        vecReg.add(INT_TBL_PAGGRA, "");
                        vecReg.add(INT_TBL_PAGCOD, "" + rst.getString("co_tipret"));
                        vecReg.add(INT_TBL_PAGSOP, "N");
                        vecReg.add(INT_TBL_COMSOL, "N");
                        vecDataTblPag.add(vecReg);
                    }
                    if (rst.getString("tx_aplret").equals("I")) {
                        if (dblIvaSerNoSer > 0) {
                            java.util.Vector vecReg = new java.util.Vector();
                            vecReg.add(INT_TBL_PAGLIN, "");
                            vecReg.add(INT_TBL_PAGCRE, "");
                            vecReg.add(INT_TBL_PAGFEC, txtFecDoc.getText());
                            if(blnIsComSol){
                                dblRetIva = objUti.redondeo(((dblIvaSerNoSer - dblComSol) * (rst.getDouble("nd_porret") / 100)), 2); 
                            }else{
                                dblRetIva = objUti.redondeo((dblIvaSerNoSer * (rst.getDouble("nd_porret") / 100)), 2);
                            }
                            dblRetIvaGlo += dblRetIva;
                            vecReg.add(INT_TBL_PAGRET, rst.getString("nd_porret"));
                            vecReg.add(INT_TBL_PAGMON, "" + dblRetIva);
                            vecReg.add(INT_TBL_PAGGRA, "");
                            vecReg.add(INT_TBL_PAGCOD, "" + rst.getString("co_tipret"));
                            vecReg.add(INT_TBL_PAGSOP, "N");
                            vecReg.add(INT_TBL_COMSOL, "N");
                            vecDataTblPag.add(vecReg);
                        }
                    }
                }
                rst.close();   
                rst = null;

            }
        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnODRes;
    private javax.swing.JButton btnReservas;
    private javax.swing.JButton btnSolRes;
    private javax.swing.JButton butCliCon;
    private javax.swing.JButton butConForPag;
    private javax.swing.JButton butConTarCre;
    private javax.swing.JButton butCopyCot;
    private javax.swing.JButton butCopyInmaconsa;
    private javax.swing.JButton butDirCliCon;
    private javax.swing.JButton butDirCliConGui;
    private javax.swing.JButton butMakeFactura;
    private javax.swing.JButton butVenCon;
    private javax.swing.JButton butVisOc;
    private javax.swing.ButtonGroup grpInsFac;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel lblAte;
    private javax.swing.JLabel lblAte1;
    private javax.swing.JLabel lblCom;
    private javax.swing.JLabel lblComSol;
    private javax.swing.JLabel lblCotNumDes;
    private javax.swing.JLabel lblDir;
    private javax.swing.JLabel lblDirGui;
    private javax.swing.JLabel lblEmiTar;
    private javax.swing.JLabel lblFecDoc;
    private javax.swing.JLabel lblFecDoc1;
    private javax.swing.JLabel lblForPag;
    private javax.swing.JLabel lblIva;
    private javax.swing.JLabel lblObs1;
    private javax.swing.JLabel lblObs2;
    private javax.swing.JLabel lblPrv;
    private javax.swing.JLabel lblSubTot;
    private javax.swing.JLabel lblTarCre;
    private javax.swing.JLabel lblTot;
    private javax.swing.JPanel panCotForPag;
    private javax.swing.JPanel panCotForPagCen;
    private javax.swing.JPanel panCotForPagNor;
    private javax.swing.JPanel panCotGen;
    private javax.swing.JPanel panCotGenNor;
    private javax.swing.JPanel panCotGenSur;
    private javax.swing.JPanel panCotGenSurCen;
    private javax.swing.JPanel panCotGenSurEst;
    private javax.swing.JRadioButton rdoFinal;
    private javax.swing.JRadioButton rdoInicio;
    private javax.swing.JRadioButton rdoNA;
    private javax.swing.JScrollPane spnCon;
    private javax.swing.JScrollPane spnForPag;
    private javax.swing.JScrollPane spnObs1;
    private javax.swing.JScrollPane spnObs2;
    private javax.swing.JTabbedPane tabCotCom;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblPag;
    private javax.swing.JTextField tx_numped;
    private javax.swing.JTextArea txaObs1;
    private javax.swing.JTextArea txaObs2;
    private javax.swing.JTextField txtAte;
    private javax.swing.JTextField txtBas0;
    private javax.swing.JTextField txtCliCod;
    private javax.swing.JTextField txtCliDir;
    private javax.swing.JTextField txtCliDirGui;
    private javax.swing.JTextField txtCliNom;
    private javax.swing.JTextField txtCodTarCre;
    private javax.swing.JTextField txtCodigoFormaPago;
    private javax.swing.JTextField txtComSol;
    private javax.swing.JTextField txtCot;
    private javax.swing.JTextField txtIva;
    private javax.swing.JTextField txtMesGra;
    private javax.swing.JTextField txtNomCliVar;
    private javax.swing.JTextField txtNomEmiTar;
    private javax.swing.JTextField txtNomForPag;
    private javax.swing.JTextField txtNomTarCre;
    private javax.swing.JTextField txtPesKgr;
    private javax.swing.JTextField txtSub;
    private javax.swing.JTextField txtSubIva;
    private javax.swing.JTextField txtTot;
    private javax.swing.JTextField txtValPag;
    private javax.swing.JTextField txtVenCod;
    private javax.swing.JTextField txtVenNom;
    // End of variables declaration//GEN-END:variables
    private Librerias.ZafDate.ZafDatePicker txtFecDoc;
    private javax.swing.JTextField txtCod = new javax.swing.JTextField();
    private javax.swing.JTextField txtDes = new javax.swing.JTextField();
    private javax.swing.JTextField txtVehRet = new javax.swing.JTextField();
    private javax.swing.JTextField txtChoRet = new javax.swing.JTextField();

    public void Actualizar_valores() {
        java.sql.Connection conTipDoc;
        java.sql.Statement stmAct;
        java.sql.ResultSet rstAct;
        int intCodHis = 1;
        String sql = "";
        String strFeSis = "";
        try {
            //    System.out.println("ZafVen01.Actualizar_valores");

            conTipDoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if (conTipDoc != null) {
                conTipDoc.setAutoCommit(false);
                sql = "UPDATE tbm_cabcotven set nd_sub=" + txtSub.getText() + ", nd_valiva=" + txtIva.getText() + ",nd_tot=" + txtTot.getText() + " where co_emp=" + objZafParSis.getCodigoEmpresa() + ""
                        + " and co_loc=" + objZafParSis.getCodigoLocal() + " and co_cot=" + txtCot.getText();
                stmAct = conTipDoc.createStatement();
                stmAct.executeUpdate(sql);
                
                stmAct.close();
                stmAct = null;
                conTipDoc.commit();
                conTipDoc.close();
                conTipDoc = null;
            }
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }

    public void guardar_Historicos_Cot() {
        java.sql.Connection conTipDoc;
        java.sql.Statement stmAct;
        java.sql.ResultSet rstAct;
        int intCodHisCot = 1;
        String sql = "";
        String strFeSis = "";
        try {
            //        System.out.println("ZafVen01.guardar_Historicos_Cot");

            conTipDoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if (conTipDoc != null) {
                conTipDoc.setAutoCommit(false);

                stmAct = conTipDoc.createStatement();

                sql = "SELECT case when (max(co_his)+1) is null then 1 else max(co_his)+1 end  as co_his  FROM TBh_CABCOTVEN  WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_loc=" + objZafParSis.getCodigoLocal() + " and  co_cot=" + txtCot.getText();
                rstAct = stmAct.executeQuery(sql);
                if (rstAct.next()) {
                    intCodHisCot = rstAct.getInt("co_his");
                }
                rstAct.close();
                rstAct = null;

                strFeSis = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), objZafParSis.getFormatoFechaHoraBaseDatos());

                /*sql="INSERT INTO tbh_cabcotven( " +
                 " co_emp, co_loc, co_cot, co_his, fe_cot, co_cli, co_ven, tx_ate, " +
                 " tx_numped, co_forpag, nd_sub, nd_poriva, nd_valiva, nd_valdes,  " +
                 " nd_tot, ne_val, tx_obs1, tx_obs2, st_reg, fe_ing, fe_ultmod, " +
                 " co_usring, co_usrmod, tx_obssolaut, tx_obsautsol, st_aut, " +
                 " fe_his, co_usrhis, co_unicli, st_regrep, tx_nomcli, fe_val )" +
                 " SELECT " +
                 " co_emp, co_loc, co_cot, "+intCodHisCot+",  fe_cot, co_cli,  co_ven,  tx_ate, " +
                 " tx_numped, co_forpag, nd_sub, nd_poriva, nd_valiva, nd_valdes, " +
                 " nd_tot, ne_val, tx_obs1, tx_obs2, st_reg, fe_ing, fe_ultmod, " +
                 " co_usring, co_usrmod, tx_obssolaut, tx_obsautsol, st_aut,  " +
                 "  '"+strFeSis+"', "+objZafParSis.getCodigoUsuario()+", null, st_regrep , tx_nomcli, fe_val  " +
                 " FROM tbm_cabcotven   WHERE co_emp="+objZafParSis.getCodigoEmpresa()+" and co_loc="+objZafParSis.getCodigoLocal()+" and  co_cot="+txtCot.getText();*/

                sql = "INSERT INTO tbh_cabcotven( "
                        + " co_emp, co_loc, co_cot, co_his, fe_cot, co_cli, co_ven, tx_ate, "
                        + " tx_numped, co_forpag, nd_sub, nd_poriva, nd_valiva, nd_valdes,  "
                        + " nd_tot, ne_val, tx_obs1, tx_obs2, st_reg, fe_ing, fe_ultmod, "
                        + " co_usring, co_usrmod, tx_obssolaut, tx_obsautsol, st_aut, "
                        + " fe_his, co_usrhis, co_unicli, st_regrep, tx_nomcli, fe_val, "
                        + " tx_dirCliFac , tx_dirCliGuiRem";
//                       if (intTipForPagCotizacion == 4){
//                           sql+=" ,co_tarCre, co_redTarCre, co_tipCre, co_emiTarCre, ne_mesCre ";     //José Marín M.
//                       }
                sql += " ) "
                        + " SELECT "
                        + " co_emp, co_loc, co_cot, " + intCodHisCot + ",  fe_cot, co_cli,  co_ven,  tx_ate, "
                        + " tx_numped, co_forpag, nd_sub, nd_poriva, nd_valiva, nd_valdes, "
                        + " nd_tot, ne_val, tx_obs1, tx_obs2, st_reg, fe_ing, fe_ultmod, "
                        + " co_usring, co_usrmod, tx_obssolaut, tx_obsautsol, st_aut,  "
                        + "  '" + strFeSis + "', " + objZafParSis.getCodigoUsuario() + ", null, st_regrep , tx_nomcli, fe_val,"
                        + " " + objUti.codificar(txtCliDir.getText())+ "," + objUti.codificar(txtCliDirGui.getText())+ " ";
//                       if (intTipForPagCotizacion == 4){ 
//                               sql+=" ,co_tarCre, co_redTarCre, co_tipCre, co_emiTarCre, ne_mesCre " ;
//                           }
                sql += " FROM tbm_cabcotven   WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_loc=" + objZafParSis.getCodigoLocal() + " and  co_cot=" + txtCot.getText();

                sql += " ; INSERT INTO tbh_detcotven( "
                        + " co_emp, co_loc, co_cot, co_his, co_reg, co_itm, tx_codalt, tx_codalt2, "
                        + " tx_nomitm, co_bod, nd_can, nd_preuni, nd_pordes, st_ivaven, nd_precom, "
                        + " nd_pordesprecom, co_prv, fe_his, co_usrhis, st_regrep) "
                        + " SELECT  "
                        + " co_emp, co_loc, co_cot,  " + intCodHisCot + ",   co_reg, co_itm, tx_codalt,  tx_codalt2, "
                        + " tx_nomitm, co_bod, nd_can, nd_preuni, nd_pordes, st_ivaven, nd_precom,  "
                        + " nd_pordesprecom, co_prv, '" + strFeSis + "', " + objZafParSis.getCodigoUsuario() + "  , st_regrep  "
                        + " FROM tbm_detcotven   WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_loc=" + objZafParSis.getCodigoLocal() + " and  co_cot=" + txtCot.getText();

                sql += "; INSERT INTO tbh_pagcotven( "
                        + " co_emp, co_loc, co_cot, co_his, co_reg, ne_diacre, fe_ven, nd_porret, "
                        + " mo_pag, ne_diagra, fe_his, co_usrhis,  co_tipret, st_regrep) "
                        + " SELECT  "
                        + " co_emp, co_loc, co_cot, " + intCodHisCot + ",  co_reg, ne_diacre, fe_ven, nd_porret,  "
                        + " mo_pag, ne_diagra, '" + strFeSis + "' ,  " + objZafParSis.getCodigoUsuario() + ",  co_tipret, st_regrep  "
                        + " FROM tbm_pagcotven  WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_loc=" + objZafParSis.getCodigoLocal() + " and  co_cot=" + txtCot.getText();
                stmAct.executeUpdate(sql);

                stmAct.close();
                stmAct = null;
                conTipDoc.commit();
                conTipDoc.close();
                conTipDoc = null;
            }
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }

    public String retTelEmp(int codEmp) {
        java.sql.Connection conTipDoc;
        java.sql.Statement stmTipDoc;
        java.sql.ResultSet rstTipDoc;
        String que, auxTipDoc = "";
        try {
            //       System.out.println("ZafVen01.retTelEmp");

            conTipDoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if (conTipDoc != null) {
                stmTipDoc = conTipDoc.createStatement();
                que = "";
                que += " select tx_tel from tbm_emp";
                que += " where co_emp=" + codEmp + "";
                rstTipDoc = stmTipDoc.executeQuery(que);
                if (rstTipDoc.next()) {
                    auxTipDoc = rstTipDoc.getString("tx_tel");
                }
            }
            conTipDoc.close();
            conTipDoc = null;
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return auxTipDoc;

    }

    public String retNomEmp(int codEmp) {
        java.sql.Connection conTipDoc;
        java.sql.Statement stmTipDoc;
        java.sql.ResultSet rstTipDoc;
        String que, auxTipDoc = "";
        try {
            //         System.out.println("ZafVen01.retNomEmp");

            conTipDoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if (conTipDoc != null) {
                stmTipDoc = conTipDoc.createStatement();
                que = "";
                que += " select tx_nom, tx_dir from tbm_emp";
                que += " where co_emp=" + codEmp + "";
                //   //System.out.println("el query del nombre de la empresa es:"+que);
                rstTipDoc = stmTipDoc.executeQuery(que);
                if (rstTipDoc.next()) {
                    auxTipDoc = rstTipDoc.getString("tx_nom");
                    GLO_strnomEmp = rstTipDoc.getString("tx_nom");
                    GLO_strdirEmp = rstTipDoc.getString("tx_dir");
                }
            }
            conTipDoc.close();
            conTipDoc = null;
        } catch (java.sql.SQLException e) {
            // objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            // objUti.mostrarMsgErr_F1(this, e);
        }
        return auxTipDoc;

    }

    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter {

        @Override
        public void mouseMoved(java.awt.event.MouseEvent evt) {
            int intCol = tblDat.columnAtPoint(evt.getPoint());
            String strMsg = "";
            switch (intCol) {
                case INT_TBL_LINEA:
                    strMsg = "";
                    break;
                case INT_TBL_ITMALT:
                    strMsg = "Codigo Item";
                    break;
//                /* JoséMario 5/Ene/2016 */
//                case INT_TBL_ITMALTCOD3LET:  
//                    strMsg = "Código del item en letras";
//                    break;
                /* JoséMario 5/Ene/2016 */
                case INT_TBL_DESITM:
                    strMsg = "Nombre del Item";
                    break;

                case INT_TBL_TRATOT:
                    strMsg = "Transferencia Total";
                    break;

                case INT_TBL_CANMOV:
                    strMsg = "Cantidad";
                    break;
                case INT_TBL_PREUNI:
                    strMsg = "Precio";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }

    private void listaProveedor(String strDesBusqueda) {

        objVenCon.setTitle("Listado de Proveedores");
        objVenCon.show();
        if (objVenCon.getSelectedButton() == ZafVenCon.INT_BUT_ACE) {
            tblDat.setValueAt(objVenCon.getValueAt(3), tblDat.getSelectedRow(), INT_TBL_COD_PRO);
            tblDat.setValueAt(objVenCon.getValueAt(1), tblDat.getSelectedRow(), INT_TBL_NOM_PRO);
            tblDat.setValueAt(objVenCon.getValueAt(5), tblDat.getSelectedRow(), INT_TBL_MAXDESCOM);
        }

    }

    private class ButFndPrv extends Librerias.ZafTableColBut.ZafTableColBut {

        public ButFndPrv(javax.swing.JTable tbl, int intIdx) {
            super(tbl, intIdx);
        }

        @Override
        public void butCLick() {

            int intNumFil = tblDat.getSelectedRow();
            if (intNumFil >= 0) {
                blnChangeData = false;
                String strTipTer = ((tblDat.getValueAt(intNumFil, INT_TBL_ITMTER) == null) ? "" : tblDat.getValueAt(intNumFil, INT_TBL_ITMTER).toString());

                if (!(strTipTer.trim().equals("S"))) {
                    objTblCelEdiTxtVcoPrv.setCancelarEdicion(true);
                } else {

                    listaProveedor("");
                    if (objVenCon2.getSelectedButton() == ZafVenCon.INT_BUT_ACE) {
                        tblDat.requestFocus();
                        tblDat.changeSelection(tblDat.getSelectedRow(), INT_TBL_PRE_COS, false, false);
                    }
                }
            }
        }
    }

    /**
     * Esta clase hereda de la interface TableModelListener que permite
     * determinar cambios en las celdas del JTable.
     */
    private class ZafTblModLis implements javax.swing.event.TableModelListener {

        @Override
        public void tableChanged(javax.swing.event.TableModelEvent e) {
            switch (e.getType()) {
                case javax.swing.event.TableModelEvent.INSERT:
                    //                    tblDat.setValueAt("V", tblDat.getSelectedRow(), INT_TBL_ESTADO);
                    break;
                case javax.swing.event.TableModelEvent.DELETE:
                    calculaTot();
                    calculaPag();

                    break;
                case javax.swing.event.TableModelEvent.UPDATE:
                    break;
            }
        }
    }

    private class creaFac {
        
        private int intTipDoc = intCodTipDocFacEle;
        private int intTipDocGuia = 102;
        private ZafCtaCtb_dat objZafCtaCtb_dat;  // Para obtener  los codigos y nombres de ctas ctbles

        /**
         * Crea objeto del tipo creaFac
         *
         * @param intTipDocuemto un entero con el tipo de documento a crear
         */
        public creaFac(int intTipDocuemto) {
            this.intTipDoc = intTipDoc;

            objZafCtaCtb_dat = new ZafCtaCtb_dat(objZafParSis,objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intTipDoc);
        }

        /**
         * Crea objeto del tipo creaFac , que sirve para crear una factura
         */
        public creaFac() {
            objZafCtaCtb_dat = new ZafCtaCtb_dat(objZafParSis,objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intTipDoc);
        }

        /////////******************************//////////////////////////////***************/////////////
        private void MensajeValidaCampo(String strNomCampo) {
            //JOptionPane obj =new JOptionPane();
            //String strTit, strMsg;
            String strMsg;
            //strTit="Mensaje del sistema Zafiro";
            strMsg = "El campo <<" + strNomCampo + ">> es obligatorio.\nEscriba un(a) " + strNomCampo + " valido(a) y vuelva a intentarlo.";
            JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
        }

        private String FechaPriDiaMes(java.sql.Connection conTmp) {
            String fecha = "";
            String sql = "";
            java.sql.Statement stmTmp;
            java.sql.ResultSet rst;
            try {
                sql = "SELECT min(fecha) as fecha FROM ("
                        + "   select  fecha, "
                        + "   case extract(dow from fecha) "
                        + "   when 1 then 1  "
                        + "   when 2 then 2  "
                        + "   when 3 then 3  "
                        + "   when 4 then 4  "
                        + "   when 5 then 5  "
                        + "   when 6 then 6  "
                        + "   else 0   "
                        + "   end as dia,  "
                        + " ( "
                        + //                "     select count(fe_diafer) from tbm_loc as a  " +
                        //                "     inner join tbm_ciu as b on (b.co_ciu=a.co_ciu) " +
                        //                "     inner join tbr_diaFerCiu as  c on (c.co_ciu=b.co_ciu) " +
                        //                "     inner join tbm_diaFer as  d on (d.co_diafer=c.co_diafer)  " +
                        //                "     where a.co_emp="+objZafParSis.getCodigoEmpresa()+" and a.co_loc="+objZafParSis.getCodigoLocal()+" and d.fe_diafer=fecha " +
                        "     select count(fe_dia) from tbm_loc as a  "
                        + "     inner join tbm_calciu as b on (b.co_ciu=a.co_ciu) "
                        + "     where a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and b.fe_dia=fecha and b.tx_tipdia = 'F' "
                        + " ) as xx "
                        + " FROM ( "
                        + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 01)  as fecha union all  "
                        + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 02)  as fecha union all  "
                        + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 03)  as fecha union all  "
                        + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 04)  as fecha union all  "
                        + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 05)  as fecha union all  "
                        + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 06)  as fecha union all  "
                        + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 07)  as fecha union all  "
                        + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 08)  as fecha union all  "
                        + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 09)  as fecha union all  "
                        + " select  date( extract(year from date(current_date+interval'1 month')) || '-' || extract(month from date(current_date+interval'1 month')) || '-' || 10)  as fecha            "
                        + " )  as x "
                        + " ) as y   where  y.dia!=0 and xx=0";

                if (conTmp != null) {
                    stmTmp = conTmp.createStatement();
                    rst = stmTmp.executeQuery(sql);
                    if (rst.next()) {
                        fecha = rst.getString("fecha");
                        datFecAux = rst.getDate("fecha");

                    }
                    rst.close();
                    stmTmp.close();
                    stmTmp = null;
                    rst = null;
                }
            } catch (SQLException Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return fecha;
        }

        private boolean insertarCabFac(java.sql.Connection conn,  int intCodTipDocFacEle, int intCodDoc, String strConfInv, int intTipDocGuia, int intCodDocGuia, int intReaGuiaRem) {
            boolean blnRes = false;
            java.sql.Statement stmLoc, stmLoc01, stmLocIns;
            java.sql.ResultSet rstLoc;
            String strSql = "", strSqlIns = "";
            String strFecSistema = "";
            int intCodMnuFac = 0;
            int intSecGrp = 0;
            int intSecEmp = 0;
            String strFecSem = "";
            try {
                stmLoc = conn.createStatement();
                stmLoc01 = conn.createStatement();

                if (intCodMenuOri == 1612) {
                    strFecSis = FechaPriDiaMes(CONN_GLO);
                    intCodMnuFac = intCodMenuOri;
                } 
                else{
                    strFecSem = strFecPagMov;
                    if (strFecSem.equals("")) {
                        datFecAux = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos());
                        if (datFecAux == null) {
                            return false;
                        }
                    }
                    intCodMnuFac = 14;
                }
                strFecSistema = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), objZafParSis.getFormatoFechaHoraBaseDatos());
                strFecModCot = strFecSistema;
                // <editor-fold defaultstate="collapsed" desc=" /* José Marín: Ya no debe generar la OD el ZafVen01 */ ">
///*Ya no debe generar la OD el ZafVen01 sino el ----> ZafReglas  JoseMario 23/Mayo/2016*/
//                datFecAuxGuia = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos());
//                if (datFecAuxGuia == null) {
//                    return false;
//                }
///*Ya no debe generar la OD el ZafVen01 sino el ----> ZafReglas  JoseMario 23/Mayo/2016*/
                //</editor-fold>

                intSecEmp = objUltDocPrint.getNumSecDoc(conn, objZafParSis.getCodigoEmpresa());
                intSecGrp = objUltDocPrint.getNumSecDoc(conn, objZafParSis.getCodigoEmpresaGrupo());

                strSqlIns = "INSERT INTO tbm_cabMovInv(co_emp, co_loc, co_tipDoc, co_doc, fe_doc, co_cli, co_com, tx_ate, "
                        + " tx_nomCli, tx_dirCli,  tx_ruc, tx_telCli, tx_ciuCli, tx_nomven, ne_numDoc, ne_numCot, "
                        + " tx_obs1, tx_obs2, nd_sub, nd_porIva, nd_tot,nd_valiva, co_forPag, tx_desforpag,tx_comIng , fe_ing, co_usrIng, fe_ultMod, "
                        + " co_usrMod,co_forret,tx_vehret,tx_choret,st_reg, ne_secgrp,ne_secemp,tx_numped , st_regrep , st_tipdev, st_imp , co_mnu"
                        + " ,st_coninvtraaut, st_excDocConVenCon, st_coninv, st_creguirem, nd_valComSol,nd_subIvaCer,nd_subIvaGra,nd_porComSol ,tx_tipMov,st_genOrdDes";   // JoséMario 31/May/2016 Compensacion Solidaria
                if (intTipForPagCotizacion == 4) {
                    strSqlIns += " , co_tipCre ";
                }
                strSqlIns += " ) "
                        + " VALUES(" + objZafParSis.getCodigoEmpresa() + ", " + objZafParSis.getCodigoLocal() + ", "
                        + intCodTipDocFacEle + ", " + intCodDoc + ", '" + datFecAux + "', " + txtCliCod.getText() + " ,'" + txtVenCod.getText() + "','" + txtAte.getText() + "','"
                        + txtCliNom.getText() + "',"+objUti.codificar(txtCliDir.getText())+",'" + txtcli_identificacion.getText() + "','" + txtcli_telefono.getText() + "','"
                        + txtcli_ciudad.getText() + "','" + txtVenNom.getText() + "',0 ," + ((txtCot.getText().equals("")) ? "0" : txtCot.getText()) + ","
                        + "  " + objUti.codificar(txaObs1.getText()) + " ," + objUti.codificar(txaObs2.getText() + " - " +strVer) + " ," + dblSubtotalCot * -1 + " ," + dblPorIva + " ," + dblTotalCot * -1 + ", "
                        + Double.parseDouble(txtIva.getText()) * -1 + " , " + txtCodForPag.getText() + " ,'" + txtNomForPag.getText() + "' ,"+ objUti.codificar(objZafParSis.getNombreComputadoraConDirIP()) +", '" + strFecSistema + "', "
                        + objZafParSis.getCodigoUsuario() + ", '" + strFecSistema + "', " + objZafParSis.getCodigoUsuario() + " , " + txtCod.getText() + ", '" + txtVehRet.getText() + "',"
                        + " '" + txtChoRet.getText() + "', 'A', " + intSecGrp + ", " + intSecEmp + ", '" + tx_numped.getText() + "', 'I' ,'C' , 'N', " + intCodMnuFac + " "
                        + " ,'S', 'N', null ,'S' ";
                 /* JoseMario 31/Ene/2017 */
                strSqlIns+=", " + dblComSol+","+(dblBaseCero*-1)+","+(dblBaseIva*-1)+","+dblPorComSol+",";
                /* JoseMario 31/Ene/2017 */
                strSqlIns+="'E','S' ";
                if (intTipForPagCotizacion == 4) {
                    strSqlIns += " ," + objUti.codificar(txtCodTarCre.getText()) + " ";
                }
                strSqlIns += " )";
                // <editor-fold defaultstate="collapsed" desc=" /* José Marín: Ya no debe generar la OD el ZafVen01 sino el ----> ZafReglas  JoseMario 23/Mayo/2016 */ ">
///*Ya no debe generar la OD el ZafVen01 sino el ----> ZafReglas  JoseMario 23/Mayo/2016*/
//                if (intReaGuiaRem == 0) {
//                    strSqlIns += " ; INSERT INTO tbm_cabguirem( co_emp, co_loc, co_tipdoc, co_doc, fe_doc ";
//                    strSqlIns += " ,ne_numdoc, co_clides, tx_rucclides, tx_nomclides,  tx_dirclides, tx_telclides, tx_ciuclides, st_imp ";
//                    strSqlIns += " ,st_reg, fe_ing, co_usring ,st_conInv, fe_initra, fe_tertra, tx_coming, st_regrep, co_ptopar, tx_ptopar ";
//                    strSqlIns += " ,co_forret, tx_vehret, tx_choret ,tx_datdocoriguirem , co_ven, tx_nomven  ) ";
//                    strSqlIns += " VALUES( " + objZafParSis.getCodigoEmpresa() + ", " + objZafParSis.getCodigoLocal() + ", " + intTipDocGuia + ", " + intCodDocGuia + ", '" + datFecAuxGuia + "' ";
//                    strSqlIns += " ,0, " + txtCliCod.getText() + ", '" + txtcli_identificacion.getText() + "', '" + txtCliNom.getText() + "',  ";
//                    //José Marín 17/Dic/2013
//                    if (txtCliDirGui.getText().length() > 0) {
//                        strSqlIns += " '" + txtCliDirGui.getText() + "' ";
//                    } else {
//                        strSqlIns += " '" + txtCliDir.getText() + "' ";
//                    }
//                    //José Marín 17/Dic/2013
//                    strSqlIns += " ,'" + txtcli_telefono.getText() + "', '" + txtcli_ciudad.getText() + "', 'N' ,'A', '" + strFecSistema + "' , " + objZafParSis.getCodigoUsuario() + " ";
//                    strSqlIns += " ,'" + strConfInv + "', '" + datFecAuxGuia + "', '" + datFecAuxGuia + "', '" + objZafParSis.getNombreComputadoraConDirIP() + "', 'I' ," + intCodBodPre + ", '" + strNomBodPtaPar + "'  ";
//                    strSqlIns += " , " + txtCod.getText() + ", '" + txtVehRet.getText() + "', '" + txtChoRet.getText() + "', '', '" + txtVenCod.getText() + "', '" + txtVenNom.getText() + "' ";
//                    strSqlIns += "  )";
//
//
//                }
                ///*Ya no debe generar la OD el ZafVen01 sino el ----> ZafReglas  JoseMario 23/Mayo/2016*/
                //</editor-fold>
                System.out.println("******************************   ZafVen01.insertarCabFac: " + strSqlIns);

                strSql = "  UPDATE tbm_cabcotven SET st_reg='F' WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " "
                        + " AND co_loc=" + objZafParSis.getCodigoLocal() + " AND co_cot=" + ((txtCot.getText().equals("")) ? "0" : txtCot.getText());
                stmLoc.executeUpdate(strSql);

                strSql = "SELECT a.co_locrelsoldevven,  a.co_tipdocrelsoldevven, a.co_docrelsoldevven "
                        + ", a1.co_locrel, a1.co_tipdocrel, a1.co_docrel , a2.co_locrel as colococ, a2.co_tipdocrel as cotipdococ, a2.co_docrel as codococ "
                        + " FROM "
                        + " tbm_cabcotven as a "
                        + " INNER JOIN tbm_cabsoldevven AS a1 ON(a1.co_emp=a.co_emp and a1.co_loc=a.co_locrelsoldevven AND "
                        + " a1.co_tipdoc=a.co_tipdocrelsoldevven AND a1.co_doc=a.co_docrelsoldevven ) "
                        + " left join tbr_cabmovinv as a2 ON(a2.co_emp=a.co_emp and a2.co_loc=a1.co_locrel and a2.co_tipdoc=a1.co_tipdocrel and a2.co_doc=a1.co_docrel and a2.co_tipdocrel=2 ) "
                        + " WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and a.co_cot=" + ((txtCot.getText().equals("")) ? "0" : txtCot.getText());

                rstLoc = stmLoc.executeQuery(strSql);
                if (rstLoc.next()) {
                    strSqlIns += " ; INSERT INTO tbr_cabmovinv(co_emp, co_loc, co_tipdoc, co_doc, st_reg, co_emprel, co_locrel, co_tipdocrel, co_docrel, st_regrep) "
                            + " VALUES(" + objZafParSis.getCodigoEmpresa() + "," + objZafParSis.getCodigoLocal() + ", " + intCodTipDocFacEle + ", " + intCodDoc + ", 'A', "
                            + " " + objZafParSis.getCodigoEmpresa() + ", " + rstLoc.getString("co_locrel") + ", " + rstLoc.getString("co_tipdocrel") + ", " + rstLoc.getString("co_docrel") + ", 'I' )";
                    if (!(rstLoc.getString("colococ") == null)) {
                        if (!(rstLoc.getString("colococ").toString().equals(""))) {
                            strSqlIns += " ; INSERT INTO tbr_cabmovinv(co_emp, co_loc, co_tipdoc, co_doc, st_reg, co_emprel, co_locrel, co_tipdocrel, co_docrel, st_regrep) "
                                    + " VALUES(" + objZafParSis.getCodigoEmpresa() + "," + objZafParSis.getCodigoLocal() + ", " + intCodTipDocFacEle + ", " + intCodDoc + ", 'A', "
                                    + " " + objZafParSis.getCodigoEmpresa() + ", " + rstLoc.getString("colococ") + ", " + rstLoc.getString("cotipdococ") + ", " + rstLoc.getString("codococ") + ", 'I' )";
                        }
                    }
                }
                 

                stmLocIns = conn.createStatement();
                stmLocIns.executeUpdate(strSqlIns);
                stmLocIns.close();
                stmLocIns = null;
                 

                rstLoc.close();
                rstLoc = null;
                stmLoc.close();
                stmLoc = null;
                stmLoc01.close();
                stmLoc01 = null;
                blnRes = true;
            } catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }


    
    
    
        private boolean actualizaStock(java.sql.Connection conn, String strMerIngEgr, String strTipIngEgr) {
            boolean blnRes = false, blnIsL=false, blnIsRes=false;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strSql = "";
            String str_MerIEFisBod = "S";
            String strEstFisBod = "", strIsTerL="";
            int intTipCli = 3;
            int intCodItm = 0;
            int intCodBod = 0;
            int intTipStk = 0;
            double dlbCanMov = 0.00;
            try {
                // JoseMario 23/Mayo/2016 para trabajar con la nueva clase que maneja el stock!!!! PILAS!!!!
                arlDatStkInvItm = new ArrayList(); 
                
                // JoseMario 23/Mayo/2016 para trabajar con la nueva clase que maneja el stock!!!! PILAS!!!!

                stmLoc = conn.createStatement();
                // stmLoc01=conn.createStatement();
                intTipCli = objUltDocPrint.ValidarCodigoCliente(txtCliCod.getText(), conn);
                objInvItm.inicializaObjeto();

                strSql = "SELECT a.co_reg,a.co_itm,a.co_bod,sum(a.nd_can) as can  \n";
                strSql+="        ,CASE WHEN ( (trim(SUBSTR (UPPER(inv.tx_codalt), length(inv.tx_codalt) ,1)) IN (  \n";
                strSql+="            SELECT  UPPER(trim(a1.tx_cad))  FROM tbr_bodloc as a   \n";
                strSql+="            INNER JOIN tbm_reginvmernuningegrfisbod AS a1 ON(a1.co_emp=a.co_Emp and a1.co_bod=a.co_bod)  \n";
                strSql+="            WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and a1.st_reg='A' and  a.st_reg='P' )))  \n";
                strSql+="        THEN 'S' ELSE 'N' END AS proconf, inv.tx_codAlt  \n";
                strSql+="       , PED.nd_canAut, CASE WHEN PED.nd_canAut IS NOT NULL THEN 'S' ELSE 'N' END as st_res  \n";
                strSql+="  FROM tbm_detcotven AS a \n";
                strSql+=" INNER JOIN tbm_inv AS inv ON(a.co_emp=inv.co_emp AND a.co_itm=inv.co_itm)  \n";
                /* JM: Modificaciones para reservas en empresa 14/Agosto/2017 */
                strSql+=" LEFT OUTER JOIN tbr_detCotVen as RES ON (a.co_emp=RES.co_emp AND a.co_loc=RES.co_loc AND \n";
                strSql+="                                          a.co_cot=RES.co_cot AND a.co_reg=RES.co_reg AND RES.tx_tipRel='R') \n";
                strSql+=" LEFT OUTER JOIN tbm_pedOtrBodCotVen as PED ON (RES.co_emp=PED.co_emp AND RES.co_loc=PED.co_loc AND \n";
                strSql+="                                                RES.co_cot=PED.co_cot AND RES.co_reg=PED.co_reg ) \n";
                /* JM: Modificaciones para reservas en empresa 14/Agosto/2017 */
                strSql+=" WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " AND a.co_loc=" + objZafParSis.getCodigoLocal() + " AND  \n";
                strSql+="       a.co_cot=" + txtCot.getText() + " AND inv.st_ser='N'  \n";
                strSql+=" GROUP BY inv.tx_codalt,a.co_reg, a.co_itm,a.co_bod , PED.nd_canAut \n";
                strSql+=" ORDER BY a.co_reg \n";
                System.out.println("ZafVen01.actulizaStock " +strSql );
                rstLoc = stmLoc.executeQuery(strSql);
                while (rstLoc.next()) {
                    intCodItm = rstLoc.getInt("co_itm");
                    intCodBod = rstLoc.getInt("co_bod");
                    dlbCanMov = rstLoc.getDouble("can");
                    strIsTerL = rstLoc.getString("tx_codAlt");
                    /* JM: Modificaciones para reservas en empresa 14/Agosto/2017 */
                    if(rstLoc.getString("st_res").equals("S")){
                        blnIsRes=true;
                        System.out.println("RESERVA: " + rstLoc.getInt("co_reg"));
                    }
                    else{
                        blnRes=false;
                        System.out.println("NO ES RESERVA: " + rstLoc.getInt("co_reg"));
                    }

                    strEstFisBod = rstLoc.getString("proconf");

                    double dblCanGuia = _getObtenerCanGuiaItm(conn, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(),
                            Integer.parseInt(txtCot.getText()), intCodItm);

                    if (dblCanGuia == -1) {
                        return false;
                    }
                    if (dblCanGuia == 0) {
                        strEstFisBod = "S";
                    }
                    
                    String strTerminal=strIsTerL.substring(strIsTerL.length()-1);
                    int intBodGrp = intBodGrp(objZafParSis.getCodigoEmpresa(),intCodBod);
                    String strCfgCon = objUti.getCfgConfirma(jfrThis, objZafParSis,  objZafParSis.getCodigoEmpresaGrupo(), intBodGrp, strTerminal);
                    
                    if(strCfgCon.equals("S")){
                        blnIsL=false;
                    }
                    else{
                        blnIsL=true; 
                    }
                     
                    if(strMomGenFac.equals("") && blnSolTraInv==false){  /*SOLO SE USA CUANDO ES NORMAL*/
                        arlDatStkInvItm = new ArrayList(); 
                        if(generaNuevoContenedorItemsMovimientoStock(intCodItm,dlbCanMov,intCodBod)){
                            System.out.println("actualizaInventario Normal merca de un solo punto.... ");
                            if(objStkInv.actualizaInventario(conn, objZafParSis.getCodigoEmpresa(),INT_ARL_STK_INV_STK_ACT, "-", 1, arlDatStkInvItm)){
                                if(blnIsL){
                                    System.out.println("ZafVen01.Mover Inventario ZafStkInv....  ");
                                }
                                else{
                                    if(blnIsRes){ 
                                        if(objStkInv.actualizaInventario(conn, objZafParSis.getCodigoEmpresa(),INT_ARL_STK_INV_CAN_RES, "-", 0, arlDatStkInvItm)){
                                            if(objStkInv.actualizaInventario(conn, objZafParSis.getCodigoEmpresa(),INT_ARL_STK_INV_CAN_EGR_BOD, "-", 0, arlDatStkInvItm)){
                                                System.out.println("ZafVen01.Mover Inventario ZafStkInv RESERVADOOOOO....  ");
                                            }else{blnRes=false;}
                                        }else{blnRes=false;}
                                    }
                                    else{
                                        if(objStkInv.actualizaInventario(conn, objZafParSis.getCodigoEmpresa(),INT_ARL_STK_INV_CAN_DIS, "-", 0, arlDatStkInvItm)){
                                            if(objStkInv.actualizaInventario(conn, objZafParSis.getCodigoEmpresa(),INT_ARL_STK_INV_CAN_EGR_BOD, "-", 0, arlDatStkInvItm)){
                                                System.out.println("ZafVen01.Mover Inventario ZafStkInv....  ");
                                            }else{blnRes=false;}
                                        }else{blnRes=false;}
                                    }
                                }
                            }else{blnRes=false;}
                        }else{blnRes=false;}
                    }
                    intTipStk = 1;
                }
                rstLoc.close();
                rstLoc = null;
                
                blnRes = true;
                
                objInvItm.limpiarObjeto();
                stmLoc.close();
                stmLoc = null;
            } catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }

        
        private int intBodGrp(int intCodEmp,int intCodBodEmp){
            int intCodBodGrp=0;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            java.sql.Connection conLoc;
            String strCadena;
            try{
                conLoc=DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                if (conLoc != null) {
                    stmLoc=conLoc.createStatement();
                    strCadena="";
                    strCadena+=" SELECT co_empGrp, co_bodGrp  ";
                    strCadena+="  FROM tbr_bodEmpBodGrp  ";
                    strCadena+=" WHERE co_bod="+ intCodBodEmp ;
                    strCadena+=" AND co_emp="+intCodEmp +" AND co_empGrp="+objZafParSis.getCodigoEmpresaGrupo();
                    rstLoc=stmLoc.executeQuery(strCadena);
                    if(rstLoc.next()){
                            intCodBodGrp=rstLoc.getInt("co_bodGrp");
                    }
                    rstLoc.close();
                    rstLoc=null;
                    stmLoc.close();
                    stmLoc=null;
                }
                conLoc.close();
                conLoc=null;
            }
            catch(Exception e){
                objUti.mostrarMsgErr_F1(null, e);
                intCodBodGrp=0;
            }
            return intCodBodGrp;
        }
        
        /* NUEVO CONTENEDOR PARA ITEMS ZafStkInv MovimientoStock */

        private static final int INT_STK_INV_COD_ITM_GRP=0;
        private static final int INT_STK_INV_COD_ITM_EMP=1;
        private static final int INT_STK_INV_COD_ITM_MAE=2;    
        private static final int INT_STK_INV_COD_LET_ITM=3;     
        private static final int INT_STK_INV_CAN_ITM=4;
        private static final int INT_STK_INV_COD_BOD_EMP=5; 
        private ArrayList arlRegStkInvItm, arlDatStkInvItm;
    
        private boolean generaNuevoContenedorItemsMovimientoStock(int intCodItm, double dlbCanMov,int intCodBod){
        boolean blnRes=true;
        double dblAux;
        int intCodigoItemGrupo=0, intCodigoItemMaestro=0;
        String strCodTresLetras="";
        try{
            intCodigoItemGrupo=getCodigoItemGrupo(objZafParSis.getCodigoEmpresa(),intCodItm);
            intCodigoItemMaestro=getCodigoMaestroItemGrupo(objZafParSis.getCodigoEmpresa(),intCodItm);
            strCodTresLetras=getCodigoLetraItem(objZafParSis.getCodigoEmpresa(),intCodItm);
            if(intCodigoItemGrupo==0 || intCodigoItemMaestro==0 || strCodTresLetras.equals("")){
                blnRes=false;
            }
            
            arlRegStkInvItm = new ArrayList();
            arlRegStkInvItm.add(INT_STK_INV_COD_ITM_GRP,intCodigoItemGrupo);
            arlRegStkInvItm.add(INT_STK_INV_COD_ITM_EMP,intCodItm);
            arlRegStkInvItm.add(INT_STK_INV_COD_ITM_MAE,intCodigoItemMaestro);
            arlRegStkInvItm.add(INT_STK_INV_COD_LET_ITM, strCodTresLetras);
            dblAux=dlbCanMov;
            if(dblAux<0){
                dblAux=dblAux*-1;
            }
            arlRegStkInvItm.add(INT_STK_INV_CAN_ITM,dblAux );
            arlRegStkInvItm.add(INT_STK_INV_COD_BOD_EMP,intCodBod );
            arlDatStkInvItm.add(arlRegStkInvItm);
            
        }
        catch(Exception e){
                objUti.mostrarMsgErr_F1(null, e);
                blnRes=false;
        }
        return blnRes;
    } 
        
         private String getCodigoLetraItem(int intCodEmp, int intCodItm){
            String strCodLetItm="";
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            java.sql.Connection conLoc;
            String strCadena;
            try{
                conLoc=DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                if (conLoc != null) {
                    stmLoc=conLoc.createStatement();
                    strCadena="";
                    strCadena+=" SELECT CASE WHEN tx_codAlt2 IS NULL THEN tx_codAlt ELSE tx_codAlt2 END AS tx_codAlt2 \n";
                    strCadena+=" FROM tbm_inv as x1 \n";
                    strCadena+=" WHERE x1.co_emp="+intCodEmp+" AND x1.co_itm="+intCodItm+" \n";
                    rstLoc=stmLoc.executeQuery(strCadena);
                    if(rstLoc.next()){
                        strCodLetItm=rstLoc.getString("tx_codAlt2");
                    }
                    rstLoc.close();
                    rstLoc=null;
                    stmLoc.close();
                    stmLoc=null;
                }
                conLoc.close();
                conLoc=null;
            }
            catch(Exception e){
                objUti.mostrarMsgErr_F1(null, e);
                strCodLetItm="";
            }
            return strCodLetItm;
        }
        
        private int getCodigoItemGrupo(int intCodEmp, int intCodItm){
            int intCodItmGru=0;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            java.sql.Connection conLoc;
            String strCadena;
            try{
                conLoc=DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                if (conLoc != null) {
                    stmLoc=conLoc.createStatement();
                    strCadena="";
                    strCadena+=" SELECT co_itm \n";
                    strCadena+=" FROM tbm_equInv as x1 \n";
                    strCadena+=" WHERE x1.co_itmMae = ( \n";
                    strCadena+="                        select co_itmMae  \n";
                    strCadena+="                        from tbm_Equinv as a1 \n";
                    strCadena+="                        where co_emp="+intCodEmp+" and co_itm="+intCodItm+")  \n";
                    strCadena+=" and x1.co_emp="+objZafParSis.getCodigoEmpresaGrupo()+" \n";
                    rstLoc=stmLoc.executeQuery(strCadena);
                    if(rstLoc.next()){
                        intCodItmGru=rstLoc.getInt("co_itm");
                    }
                    rstLoc.close();
                    rstLoc=null;
                    stmLoc.close();
                    stmLoc=null;
                }
                conLoc.close();
                conLoc=null;
            }
            catch(Exception e){
                objUti.mostrarMsgErr_F1(null, e);
                intCodItmGru=0;
            }
            return intCodItmGru;
        }
        
        
        private int getCodigoMaestroItemGrupo(int intCodEmp, int intCodItm){
            int intCodItmMae=0;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            java.sql.Connection conLoc;
            String strCadena;
            try{
                conLoc=DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                if (conLoc != null) {
                    stmLoc=conLoc.createStatement();
                    strCadena="";
                    strCadena+=" SELECT x1.co_itmMae \n";
                    strCadena+=" FROM tbm_equInv as x1 \n";
                    strCadena+=" WHERE x1.co_emp="+intCodEmp+" and x1.co_itm="+intCodItm+" \n";
                    rstLoc=stmLoc.executeQuery(strCadena);
                    if(rstLoc.next()){
                        intCodItmMae=rstLoc.getInt("co_itmMae");
                    }
                    rstLoc.close();
                    rstLoc=null;
                    stmLoc.close();
                    stmLoc=null;
                }
                conLoc.close();
                conLoc=null;
            }
            catch(Exception e){
                objUti.mostrarMsgErr_F1(null, e);
                intCodItmMae=0;
            }
            return intCodItmMae;
        }
        
        
        private boolean getValidaVigencia() {
            boolean blnRes = true;
            try {
                String FecAux = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), "yyyy/MM/dd");
                Librerias.ZafDate.ZafDatePicker objDate = new Librerias.ZafDate.ZafDatePicker(new javax.swing.JFrame(), "d/m/y");
                java.util.Calendar objFec = java.util.Calendar.getInstance();
                Librerias.ZafDate.ZafDatePicker dtePckPag = new Librerias.ZafDate.ZafDatePicker(new javax.swing.JFrame(), "d/m/y");
                int fecDoc[] = txtFecDoc.getFecha(dateFecCot);
                if (fecDoc != null) {
                    objFec.set(java.util.Calendar.DAY_OF_MONTH, fecDoc[0]);
                    objFec.set(java.util.Calendar.MONTH, fecDoc[1] - 1);
                    objFec.set(java.util.Calendar.YEAR, fecDoc[2]);
                }
                java.util.Calendar objFecPagActual = Calendar.getInstance();
                objFecPagActual.setTime(objFec.getTime());
                objFecPagActual.add(java.util.Calendar.DATE, intNumDiaVal);
                dtePckPag.setAnio(objFecPagActual.get(java.util.Calendar.YEAR));
                dtePckPag.setMes(objFecPagActual.get(java.util.Calendar.MONTH) + 1);
                dtePckPag.setDia(objFecPagActual.get(java.util.Calendar.DAY_OF_MONTH));
                String fecha = objUti.formatearFecha(dtePckPag.getText(), "dd/MM/yyyy", "yyyy/MM/dd");
                java.util.Date fe1 = objUti.parseDate(fecha, "yyyy/MM/dd");
                java.util.Date fe2 = objUti.parseDate(FecAux, "yyyy/MM/dd");
                if (fe1.equals(fe2)) {
                    blnRes = false;
                } else if (fe1.after(fe2)) {
                    blnRes = false;
                } else {
                    blnRes = true;
                }


            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, e);
            }
            return blnRes;
        }
        
        private Librerias.ZafGetDat.ZafDatBod objDatBod;

        /*       
         * MODIFICADO EFLORESA 2012-04-12
         * MODIFICADO EFLORESA 2012-05-21
         * USO DE LA FUNCION OBJUTI.CODIFICAR
         * 
         */
        private boolean insertarDetFac(Connection conn, int intCodTipDocFacEle, int intCodDoc, String strMerIngEgr, int intTipDocGuia, int intCodDocGuia, int intReaGuiaRem, boolean blnEstVolFacGuiImp) {
            boolean blnRes = false;
            boolean blnActPreDes = false;
            Statement stmLoc, stmLocIns;
            String strSql = "", strSqlIns = "";
            String str_MerIEFisBod = "S";
            String strEstFisBod = "", strAuxDet="";
            int intCodItm = 0;
            int intCodBod = 0;
            int intEstIns = 0;
            int intEstInsGuia = 0;
            int intControl = 0;
            int intControlTbr = 0;
            int intColActPre = 0;
            double dlbCanMov = 0.00;
            double dlbcostouni = 0.00;
            double bldcostot = 0.00;
            double dbl_canConIE = 0.00;
            double dblCanPen=0.00, dblCanNunRec=0.00;  /* JoseMario 10/Jun/2016*/
            boolean blnEstItmGenGuia = true; //  true = genera guia el item   false = no gerena guia el item
            String items[][] = null;
            double subtot = 0.00;
            double dblTotAux=0.00;
            //int cantReg=0;
            double canRegPend = 0, canItmPend = 0,dblCanEgrBod=0.00, dblCanEgrDes=0.00;
            boolean blnCanEgrBodAct=false, blnIsSer=false;
            java.sql.Statement stmLoc01;
            java.sql.ResultSet rstLoc01;
            try {
                stmLoc = conn.createStatement();
                stmLoc01 = conn.createStatement();
                StringBuffer stbins = new StringBuffer(); //VARIABLE TIPO BUFFER
                StringBuffer stbinsTbr = new StringBuffer(); //VARIABLE TIPO BUFFER
              

                items = new String[tblDat.getRowCount()][6];

                blnActPreDes = getValidaVigencia();
                if (blnActPreDes) {
                    intColActPre = INT_TBL_PRELISITM2;
                } else {
                    intColActPre = INT_TBL_PRELISITM;
                }

                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                        for (int x = 0; x < items.length; x++) {
                            if (items[x][0] != null) {
                                if (items[x][0].equals(tblDat.getValueAt(i, INT_TBL_CODITM))) {
                                    subtot = objUti.redondear(((tblDat.getValueAt(i, INT_TBL_CANMOV) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_CANMOV).toString())), 0) + objUti.redondear(items[x][1], 0);
                                    items[x][1] = Double.toString(subtot);
                                    items[x][5] = Integer.toString(Integer.parseInt(items[x][5]) + 1);
                                    break;
                                }
                            } else {
                                items[x][0] = tblDat.getValueAt(i, INT_TBL_CODITM).toString();
                                subtot = objUti.redondear(((tblDat.getValueAt(i, INT_TBL_CANMOV) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_CANMOV).toString())), 0);
                                items[x][1] = Double.toString(subtot);
                                items[x][2] = Integer.toString(0);
                                items[x][3] = (objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_CLIRETBOD)).equals("S")) ? "S" : "N";
                                items[x][4] = Integer.toString(0);
                                items[x][5] = Integer.toString(1);
                                break;
                            }
                        }
                    }
                }

                subtot = 0.00;

                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                        dblCanEgrBod=0.00; 
                        dblCanEgrDes=0.00;
                        blnEstItmGenGuia = true;
                        
                        intCodBod = Integer.parseInt(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_CODBOD)));
                        intCodItm = Integer.parseInt("" + tblDat.getValueAt(i, INT_TBL_CODITM));
                        dlbCanMov = Double.parseDouble(objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_CANMOV)));
 
                        if (intControl != 0) {
                            GLO_strArreItm = GLO_strArreItm + ",";
                        }
                        GLO_strArreItm = GLO_strArreItm + tblDat.getValueAt(i, INT_TBL_CODITM).toString();
                        intControl++;
                        /**
                         * ********* VERFIFICA SI EL ITEM IE MER FIS BOD  ***********************
                         */
                        strEstFisBod = (tblDat.getValueAt(i, INT_TBL_IEBODFIS) == null ? "" : tblDat.getValueAt(i, INT_TBL_IEBODFIS).toString());
                        str_MerIEFisBod = "N";
                        /**
                         * strEstFisBod == N: Si se confirma 
                         * ********* VERFIFICA SI EL ITEM ES DE SERVICIO  ***********************
                         */
                        if (tblDat.getValueAt(i, INT_TBL_ITMSER).toString().trim().equalsIgnoreCase("N")) { // no es de servicio.
                            if (strEstFisBod.equals("N")) {  // SI ES UN ITEM QUE SE CONFIRMA
                                if (strMerIngEgr.equals("S")) { // SI SE VENDE DE UN PUNTO QUE NECESITA CONFIRMAR
                                    str_MerIEFisBod = "S"; 
                                  //  dbl_canConIE = 0;  // JM 4/Agosto/2016
                                }
                            }
                        }
                         
                        String strItmSer="";
                        String strCadena = "SELECT st_ser FROM tbm_inv WHERE co_emp="+objZafParSis.getCodigoEmpresa()+" ";
                               strCadena+=" AND co_itm="+tblDat.getValueAt(i, INT_TBL_CODITM) ;
                        rstLoc01 = stmLoc01.executeQuery(strCadena);
                        if(rstLoc01.next()){
                            blnIsSer=rstLoc01.getString("st_ser").equals("N")?false:true;
                            strItmSer=rstLoc01.getString("st_ser");
                        }
                        rstLoc01.close();
                        rstLoc01=null;
                         
                        
                    
                        if(strMomGenFac.equals("") && blnSolTraInv==false ){  // ES FACTURACION NORMAL!!!
                            String strTerminal=tblDat.getValueAt(i, INT_TBL_ITMALT).toString().substring(tblDat.getValueAt(i, INT_TBL_ITMALT).toString().length()-1);
                            int intBodGrp = intBodGrp(objZafParSis.getCodigoEmpresa(),intCodBod);
                            
                            String strCfgCon = objUti.getCfgConfirma(jfrThis, objZafParSis,  objZafParSis.getCodigoEmpresaGrupo(), intBodGrp, strTerminal);
                            if(strCfgCon.equals("S") && blnIsSer==false ){
                                 dblCanPen=dlbCanMov*-1;
                                dblCanEgrBod = dblCanPen;
                            }
                            else {
                                dblCanPen=0.00;
                                dblCanEgrBod=0.00;
                                str_MerIEFisBod="A";
                            }
                        }
                        
                        if(strItmSer.equals("S")){
                            System.out.println("servicio xD");
                            dblCanPen=dlbCanMov*-1;
                            if(isLocalDosAmbientes(objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal())){
                                dblCanEgrDes=dblCanPen;
                                dblCanEgrBod=0.00;
                            }else{
                                dblCanEgrBod = dblCanPen;
                                dblCanEgrDes=0.00;
                            }
                            
                            str_MerIEFisBod="S";
                        }
                        /* JM 6/Agos/2016 */
                        
                        /**
                         * *********************** FIN DE VERIFICA ITEM DE
                         * SERVICIO ******************************************************
                         */
                        /**
                         * ********* VERFIFICA SI EL ITEM ES DE TRANSPORTE  ***********************
                         */
                        if (tblDat.getValueAt(i, INT_TBL_ITMSER).toString().trim().equalsIgnoreCase("T")) { // no es de servicio.
                            blnEstItmGenGuia = false;
                        }
                        /**
                         * *********************** FIN DE VERIFICA ITEM DE
                         * TRANSPORTE ******************************************************
                         */
                        dlbCanMov = dlbCanMov * -1;
                        dlbcostouni = objInvItm.getCostoItm(conn, objZafParSis.getCodigoEmpresa(), intCodItm);
                        bldcostot = (dlbcostouni * dlbCanMov);
                        bldcostot = (bldcostot * -1);
                        
                        if (intEstIns > 0) {
                            stbins.append(" UNION ALL ");
                        }
                        
                        dblTotAux = objUti.redondear((Double.parseDouble((tblDat.getValueAt(i, INT_TBL_TOTAL) == null) ? "0" : tblDat.getValueAt(i, INT_TBL_TOTAL).toString())), intNumDec);
                        
                        strAuxDet="SELECT " + objZafParSis.getCodigoEmpresa() + "," + objZafParSis.getCodigoLocal() + "," + intCodTipDocFacEle + "," + intCodDoc + "," + (i + 1) + ",'";
                        strAuxDet+=tblDat.getValueAt(i, INT_TBL_ITMALT) + "','" + tblDat.getValueAt(i, INT_TBL_ITMALT2) + "'," + tblDat.getValueAt(i, INT_TBL_CODITM) + ", " + tblDat.getValueAt(i, INT_TBL_CODITM) + ", ";
                        strAuxDet+=objUti.codificar(tblDat.getValueAt(i, INT_TBL_DESITM)) + ",'" + tblDat.getValueAt(i, INT_TBL_UNIDAD) + "'," + intCodBod + ",";
                        strAuxDet+=dlbCanMov + ",";
                        strAuxDet+=objUti.redondear((Double.parseDouble((tblDat.getValueAt(i, INT_TBL_TOTAL) == null) ? "0" : tblDat.getValueAt(i, INT_TBL_TOTAL).toString()) * -1), intNumDec) + ", "  ;
                        //Redondeo dos deciamles JoséMario 16/Feb/2016
                        strAuxDet+= dlbcostouni + ", 0 , ";
                        strAuxDet+=objUti.redondear(Double.parseDouble((tblDat.getValueAt(i, INT_TBL_PREUNI) == null) ? "0" : tblDat.getValueAt(i, INT_TBL_PREUNI).toString()), 6) + ", ";
                        strAuxDet+=objUti.redondear(Double.parseDouble((tblDat.getValueAt(i, INT_TBL_PORDES) == null) ? "0" : tblDat.getValueAt(i, INT_TBL_PORDES).toString()), 6) + ", '";
                        strAuxDet+=((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? "S" : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? "S" : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? "S" : "N")))) + "' ";
                        strAuxDet+="," + bldcostot + ",'I', '" + str_MerIEFisBod + "', " + dbl_canConIE + ", ";
                        strAuxDet+=objInvItm.getIntDatoValidado(tblDat.getValueAt(i, intColActPre)) + ", ";
                        strAuxDet+=((blnActPreDes) ? "" + Glo_dlbMaxDes : objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_DESVENMAX))) + ", ";
                        strAuxDet+=" " + objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_NUMFILCOMPVEN)) + ", " + dblCanEgrBod+","+dblCanNunRec+","+(dblCanEgrDes)+","+(dblCanPen)+",";
                        strAuxDet+= ((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? dblPorIva : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? dblPorIva : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? dblPorIva : 0)))) + ",";
                        strAuxDet+= ((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? 0 : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? 0 : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? 0 :(dblTotAux*-1))))) + ",";
                        strAuxDet+= ((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? (dblTotAux*-1) : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? (dblTotAux*-1) : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? (dblTotAux*-1) : 0)))) + "";
                    
                        stbins.append(strAuxDet);
                        intEstIns = 1;
                    }
                }

                if (intEstIns == 1) {
                    strSqlIns += " ; INSERT INTO  tbm_detMovInv(co_emp, co_loc, co_tipdoc , co_doc, co_reg, " ; //CAMPOS PrimayKey
                    strSqlIns +=" tx_codAlt, tx_codAlt2, co_itm, co_itmact,  tx_nomItm, tx_unimed, " ;//<==Campos que aparecen en la parte superior del 1er Tab
                    strSqlIns +=" co_bod, nd_can,nd_tot, nd_cosUnigrp,nd_costot, nd_preUni, nd_porDes, st_ivaCom, " ;//<==Campos que aparecen en la parte inferior del 1er Tab
                    strSqlIns +=" nd_costotgrp , st_regrep, st_meringegrfisbod , nd_cancon, nd_preunivenlis, nd_pordesvenmax , ne_numfil," ;
                    strSqlIns +=" nd_canEgrBod,nd_canNunRec,nd_canDesEntCli,nd_canPen, ";
                    strSqlIns +=" nd_porIva, nd_basImpIvaCer, nd_basImpIvaGra) "+ stbins.toString();
                }
                
                stmLocIns = conn.createStatement();
                stmLocIns.executeUpdate(strSqlIns);

                if (intControlTbr == 1) {
                    stmLocIns.executeUpdate(stbinsTbr.toString());
                }
                /* JM: 13/Jul/2018: Modificaciones para confirmaciones en bodega y despacho para reserva en propia empresa */
                objDatBod = new Librerias.ZafGetDat.ZafDatBod(objZafParSis, jfrThis);
                if(objResInv.cotizacionVieneDeReservas(conn, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText()) )){
                    int intCodBodGrp=objDatBod.getCodigoBodegaGrupo(objZafParSis.getCodigoEmpresa(), intCodBod);
                    if(intCodBodGrp==15 || intCodBodGrp==3){ /* DOS AMBIENTES ===> INMACONSA - QUITO  */ 
                        if(!modificarDespachos(conn, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText()),  
                                objZafParSis.getCodigoEmpresa() , objZafParSis.getCodigoLocal() ,intCodTipDocFacEle , intCodDoc  )){
                            return false;
                        }
                    }
                }
                objDatBod=null;
                
                if(objResInv.cotizacionVieneDeReservas(conn, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText()))){
                    blnManRes=true;
                    /* Modificaciones de datos de reservas */
                    if(!modificarDatosReserva(conn, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText()))){
                        System.err.println("ERROR MODIFICANDO RESERVAS 19669 insertaCotizacionTablaSeguimientoTransferenciaInventario");
                        blnRes = false;
                    }
                }
                else{
                    blnManRes=false;
                }
                /* JM: 13/Jul/2018: Modificaciones para confirmaciones en bodega y despacho para reserva en propia empresa */
                
                stmLocIns.close();
                stmLocIns = null;
                

                stmLoc.close();
                stmLoc = null;
                stbins = null;
                stbinsTbr = null;
                
                blnRes = true;
            } catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }
        
        private boolean modificarDespachos(java.sql.Connection conExt, int CodEmpCot,int CodLocCot, int CodCot, int CodEmpFac, int CodLocFac, int CodTipDocFac, int CodDocFac){
            boolean blnRes=false;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strUpdate="";
            double dblTemp = 0.00;
            try{
                if(conExt!=null){
                    stmLoc = conExt.createStatement();
                    
                    strSQL="";
                    strSQL+=" SELECT a2.co_emp,a2.co_loc,a2.co_cot,a2.co_reg, a2.co_itm, a2.nd_can,   \n";
                    strSQL+="        a3.co_empRel,a3.co_locRel,a3.co_cotRel,a3.co_regRel,  \n";
                    strSQL+="        a4.co_emp as co_empFacVen, a4.co_loc as co_locFacVen, a4.co_tipDoc as co_tipDocFacVen, a4.co_doc as co_docFacVen, a4.co_reg as co_regVen, \n";
                    strSQL+="        a4.nd_can as nd_canFacVen, a4.nd_canEgrBod, a4.nd_canDesEntCli, a7.co_bodGrp as co_bodIng_GRUPO, 'x' as x,  \n";
                    strSQL+="        a5.co_bodRel, a6.co_bodGrp as co_bodEgr_GRUPO,a5.nd_can as nd_canAut,   \n";
                    strSQL+="        CASE WHEN a5.nd_canCan IS NULL THEN 0 ELSE a5.nd_canCan END AS nd_canCan,  \n";
                    strSQL+="        CASE WHEN a5.nd_canFac IS NULL THEN 0 ELSE a5.nd_canFac END AS nd_canFac  \n";
                    strSQL+=" FROM tbm_cabCotVen as a1  \n";
                    strSQL+=" INNER JOIN tbm_detCotVen as a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_cot=a2.co_cot)  \n";
                    strSQL+=" INNER JOIN tbr_detCotVen as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_cot=a3.co_cot AND  a2.co_reg=a3.co_reg)    \n";
                    strSQL+=" INNER JOIN (             \n";
                    strSQL+="       SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc,a2.co_reg, a2.co_itm,  \n";
                    strSQL+="              a2.nd_can, a2.nd_canEgrBod, a2.nd_canDesEntCli, a2.nd_canPen    \n";
                    strSQL+="       FROM tbm_cabMovInv as a1      \n";
                    strSQL+="       INNER JOIN tbm_detMovInv as a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) \n";
                    strSQL+="       WHERE a1.co_emp="+CodEmpFac+" and a1.co_loc="+CodLocFac+" and a1.co_tipDoc="+CodTipDocFac+" and a1.co_doc="+CodDocFac+"  \n"; // FACTURA
                    strSQL+=" ) as a4 ON (a2.co_emp=a4.co_emp AND a2.co_loc=a4.co_loc AND a2.co_itm=a4.co_itm)  \n";
                    strSQL+=" INNER JOIN tbm_pedOtrBodCotVen as a5 ON (a3.co_empRel=a5.co_emp AND a3.co_locRel=a5.co_loc AND a3.co_cotRel=a5.co_cot AND a3.co_regRel=a5.co_reg) \n";
                    strSQL+=" INNER JOIN tbr_bodEmpBodGrp as a6 ON (a5.co_empRel=a6.co_emp AND a5.co_bodRel=a6.co_bod) \n";
                    strSQL+=" INNER JOIN tbr_bodEmpBodGrp as a7 ON (a2.co_emp=a7.co_emp AND a2.co_bod=a7.co_bod) \n";
                    strSQL+=" WHERE a1.co_emp="+CodEmpCot+" AND a1.co_loc="+CodLocCot+" and a1.co_cot="+CodCot+"   AND a3.tx_tipRel='R'    \n";
                    strSQL+=" \n";
                    System.out.println("strSQL " + strSQL);
                    rstLoc = stmLoc.executeQuery(strSQL);
                    while(rstLoc.next()){
                        if(rstLoc.getInt("co_bodIng_GRUPO")!=rstLoc.getInt("co_bodEgr_GRUPO") ){
                            if(rstLoc.getDouble("nd_canAut")>(rstLoc.getDouble("nd_canFac")+ rstLoc.getDouble("nd_canFac")) )
                                
                            dblTemp = rstLoc.getDouble("nd_canAut") - rstLoc.getDouble("nd_canFac") - rstLoc.getDouble("nd_canFac") ;
                            dblTemp=dblTemp*-1;
                            
                            strUpdate+=" UPDATE tbm_detMovInv SET nd_canDesEntCli="+dblTemp+" , nd_canEgrBod=nd_canEgrBod - ("+dblTemp+") ";
                            strUpdate+=" WHERE co_emp="+rstLoc.getInt("co_empFacVen")+" AND co_loc="+rstLoc.getInt("co_locFacVen")+" AND ";
                            strUpdate+=" co_tipDoc="+rstLoc.getInt("co_tipDocFacVen")+" AND co_doc="+rstLoc.getInt("co_docFacVen")+" AND ";
                            strUpdate+=" co_reg="+rstLoc.getInt("co_regVen")+"; \n";
                        }
                        
                    }
                    rstLoc.close();
                    rstLoc=null;
                    System.out.println("RESERVAS: DespachosModificados \n" + strUpdate);
                    stmLoc.executeUpdate(strUpdate);
                    stmLoc.close();
                    stmLoc=null;
                    
                    
                    
                    
                    blnRes=true;
                }
            }
            catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }
        
        
        /**
         * 1;12;"TUVAL - Inmaconsa (005-003)"
         * 2;1;"CASTEK - Quito (002-001)"
         * 2;11;"CASTEK - Quito (004-002)(Inmaconsa)"
         * 2;12;"CASTEK - Manta (004-003)(Inmaconsa)"
         * 2;13;"CASTEK - Santo Domingo (004-004)(Inmaconsa)"
         * 2;14;"CASTEK - Cuenca (004-005)(Inmaconsa)"
         * 4;10;"DIMULTI - Inmaconsa (003-002)"
         * @param CodEmp
         * @param CodLoc
         * @return 
         */
        
        private boolean isLocalDosAmbientes(int CodEmp, int CodLoc){
            boolean blnRes=false;
            try{
                if((CodEmp==1 && CodLoc==12) || (CodEmp==4 && CodLoc==10) || (CodEmp==2 && CodLoc==1) ||
                        (CodEmp==2 && CodLoc==11) || (CodEmp==2 && CodLoc==12) || (CodEmp==2 && CodLoc==13) || (CodEmp==2 && CodLoc==14)){
                    blnRes=true;
                }
            }
            catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }
        
        
        private double _getObtenerCanGuiaItm(java.sql.Connection conn, int intCodEmp, int intCodLoc, int intCodCot, int intCodItm) {
            double dblRes = 0;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strSql = "";
            try {
                if (conn != null) {
                    stmLoc = conn.createStatement();
                    strSql = "select * from ( select sum(dif) as dif from (  "
                            + " select  a.co_itm,  ( a.nd_can - case when (abs(nd_canvolfac) - abs( nd_canvuefaccli + nd_cannunvuefaccli )) is null then 0 else "
                            + " (abs(nd_canvolfac) - abs( nd_canvuefaccli + nd_cannunvuefaccli )) end  "
                            + " ) as dif   from tbm_detcotven as a  "
                            + " left join tbm_detsoldevven as a1 on (a1.co_emp=a.co_emp and a1.co_loc=a.co_locrelsoldevven and a1.co_tipdoc=a.co_tipdocrelsoldevven and a1.co_doc=a.co_docrelsoldevven "
                            + " and a1.co_reg=a.co_regrelsoldevven )   "
                            + " where a.co_emp=" + intCodEmp + " and a.co_loc=" + intCodLoc + "  and a.co_cot=" + intCodCot + "  and a.co_itm=" + intCodItm + " "
                            + " ) as x ) as x where dif > 0 ";
                    System.out.println("ZafVen01._getObtenerCanGuiaItm " + strSql);
                    rstLoc = stmLoc.executeQuery(strSql);
                    if (rstLoc.next()) {
                        dblRes = rstLoc.getDouble("dif");
                    }
                    rstLoc.close();
                    rstLoc = null;
                    stmLoc.close();
                    stmLoc = null;

                }
            } catch (SQLException Evt) {
                dblRes = -1;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                dblRes = -1;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }

            return dblRes;
        }

        private boolean insertarPagFac(java.sql.Connection conn,  int intCodTipDocFacEle, int intCodDoc) {
            boolean blnRes = false;
            java.sql.Statement stmLocIns;
            java.util.Calendar objFec;
            int intVal = intCanArr[0];
            int intsizearre = intarreglodia.length;
            int i = 0;
            double dblBaseDePagos = 0, dblRetIva = 0, dblRetFue = 0, dblRetFueFle = 0;
			BigDecimal bigBaseDePagos=BigDecimal.ZERO;
            double dblPago = 0.00;
            BigDecimal bigPago=BigDecimal.ZERO;
		    
            double dblPagos = 0.00;
            BigDecimal bigPagos=BigDecimal.ZERO;
			 
            double dblRete = 0;
            BigDecimal bigRete=BigDecimal.ZERO;
            String strSql = "", strSqlIns = "";
            String strFec = "";
            String strFecSem = "";
            try {
                if (conn != null) {
                    intVal = intsizearre - (intsizearre - intVal);
                    
                    if (intCodMenuOri == 1612) {
                        strFecSis = FechaPriDiaMes(CONN_GLO);
                    } else {
                        strFecSem = strFecPagMov;
                        if (strFecSem.equals("")) {
                            strFecSis = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), objZafParSis.getFormatoFechaBaseDatos());
                        } else {
                            strFecSis = strFecSem;
                        }
                    }


                    dblRetFueGlo = 0.0;
                    dblRetIvaGlo = 0.00;
                    vecDataTblPag = new Vector();

                    strFec = objUti.formatearFecha(strFecSis, "yyyy-MM-dd", "dd/MM/yyyy");
                    objFec = java.util.Calendar.getInstance();
                    int fecDoc[] = txtFecDoc.getFecha(strFec);
                    

                    if (fecDoc != null) {
                        objFec.set(java.util.Calendar.DAY_OF_MONTH, fecDoc[0]);
                        objFec.set(java.util.Calendar.MONTH, fecDoc[1] - 1);
                        objFec.set(java.util.Calendar.YEAR, fecDoc[2]);
                    }
                    /* JoseMario 30/Ene/2017 */
                    if(dblValorPagar==0){
                        dblBaseDePagos = dblTotalCot;
                    }
                    else{
                        dblBaseDePagos = dblValorPagar;
                    }
                        
                    if (dblBaseDePagos > 0) {
                        Vector vecData = new Vector();

                        if (!(txtCodForPag.getText() == null || txtCodForPag.getText().equalsIgnoreCase("") || txtCodForPag.getText().equalsIgnoreCase("0"))) {
                            Librerias.ZafDate.ZafDatePicker dtePckPag = new Librerias.ZafDate.ZafDatePicker(new javax.swing.JFrame(), "d/m/y");
                            /**
                             * **********************************************************************************
                             *///
        /*
                             
                            /**
                             * ***************************************************************************************************************************
                             */
                            calculaSubtotalServiNoServi(conn, "T");

                            if (dblSubSerNoSer > 0.00) {
                                cargaForPag(conn, intCodMotTran);
                            }

                            /**
                             * ***************************************************************************************************************************
                             */
                            calculaSubtotalServiNoServi(conn, "N");

                            if (dblSubSerNoSer > 0.00) {
                                cargaForPag(conn, intCodMotBien);
                            }

                            /**
                             * ***************************************************************************************************************************
                             */
                            calculaSubtotalServiNoServi(conn, "S");

                            if (dblSubSerNoSer > 0.00) {
                                cargaForPag(conn, intCodMotServ);
                            }
                            
                            if(blnIsComSol && dblPorIva==14.00){
                                cargaForPagComSol();
                            }
                            
                            /**
                             * ***************************************************************************************************************************
                             */
                            /**
                             * **********************************************************************************
                             */
                            
				//         dblRete = dblRetFueFle+dblRetFue+dblRetIva;
                            //dblRete = dblRetFueGlo+dblRetIvaGlo;  //esta era la ultima
                            bigRete= new BigDecimal(dblRetFueGlo+dblRetIvaGlo).setScale(2, RoundingMode.HALF_UP);
					         //dblBaseDePagos = objUti.redondear( ( dblTotalCot - dblRete ),intNumDec);
                            //bigBaseDePagos =new BigDecimal(dblTotalCot).subtract(bigRete); 
                            if(dblValorPagar==0){
                                bigBaseDePagos =new BigDecimal(dblTotalCot).subtract(bigRete).setScale(2, RoundingMode.HALF_UP);            
                            }
                            else{
                                bigBaseDePagos =new BigDecimal(dblValorPagar).subtract(bigRete).setScale(2, RoundingMode.HALF_UP);        
                            }
                                           
							 
                            for (i = 0; i < intVal; i++) {
                                java.util.Calendar objFecPagActual = Calendar.getInstance();
                                objFecPagActual.setTime(objFec.getTime());

                                int diaCre = intarreglodia[i];
                                int numPag = intarreglonum[i];
                                String strSop = ((strarreglosop[i] == null) ? "N" : strarreglosop[i]);

                                if (diaCre != 0) {
                                    objFecPagActual.add(java.util.Calendar.DATE, diaCre);
                                }

                                dtePckPag.setAnio(objFecPagActual.get(java.util.Calendar.YEAR));
                                dtePckPag.setMes(objFecPagActual.get(java.util.Calendar.MONTH) + 1);
                                dtePckPag.setDia(objFecPagActual.get(java.util.Calendar.DAY_OF_MONTH));

                                java.util.Vector vecReg = new java.util.Vector();
                                vecReg.add(INT_TBL_PAGLIN, "");
                                vecReg.add(INT_TBL_PAGCRE, "" + diaCre);
                                vecReg.add(INT_TBL_PAGFEC, dtePckPag.getText());

                                //dblPagos = objUti.redondear((numPag == 0) ? 0 : (dblBaseDePagos / numPag), intNumDec);
				bigPagos=((numPag==0)?BigDecimal.ZERO:(bigBaseDePagos.divide(new BigDecimal(numPag),2,RoundingMode.HALF_UP))).setScale(2, RoundingMode.HALF_UP);
                                //dblPago += dblPagos;
				bigPago=bigPago.add(bigPagos);
                                //dblPagos = objUti.redondear(dblPagos, intNumDec);

                                vecReg.add(INT_TBL_PAGRET, "");
                                if (i == (intVal - 1)) {
                                   // dblPagos = objUti.redondear(dblPagos + (dblTotalCot - (dblPago + dblRete)), intNumDec);
                                    if(dblValorPagar==0){
                                        bigPagos=  bigPagos.add(new BigDecimal(dblTotalCot).subtract(bigPago.add(bigRete))).setScale(2, RoundingMode.HALF_UP);
                                    }
                                    else{
                                        bigPagos=  bigPagos.add(new BigDecimal(dblValorPagar).subtract(bigPago.add(bigRete))).setScale(2, RoundingMode.HALF_UP);
                                    }
                                    
                                }

                                //vecReg.add(INT_TBL_PAGMON, "" + dblPagos);
				vecReg.add(INT_TBL_PAGMON, ""+bigPagos);
                                vecReg.add(INT_TBL_PAGGRA, "0");
                                vecReg.add(INT_TBL_PAGCOD, "");
                                vecReg.add(INT_TBL_PAGSOP, strSop);
                                vecReg.add(INT_TBL_COMSOL, "N");
                                vecDataTblPag.add(vecReg);
                            }
                            objTblModPag.setData(vecDataTblPag);
                            tblPag.setModel(objTblModPag);

                            vecDataTblPag = null;


                            /**
                             * ********************************************************************************************
                             */
                            double dblValRet = 0;
                            String strFecCor = "";
                            for (int x = 0; x < tblPag.getRowCount(); x++) {
                                dblValRet = Double.parseDouble(objInvItm.getIntDatoValidado(tblPag.getValueAt(x, INT_TBL_PAGRET)));
                                if (dblValRet == 0.00 && (tblPag.getValueAt(x, INT_TBL_COMSOL).equals("N"))) {
                                    strFecCor = tblPag.getValueAt(x, INT_TBL_PAGFEC).toString();
                                    break;
                                }
                            }


                            String strF1 = objUti.formatearFecha(strFecSisBase, "yyyy-MM-dd", "yyyy/MM/dd");
                            java.util.Date fac1 = objUti.parseDate(strF1, "yyyy/MM/dd");
                            int intAnioAct = (fac1.getYear() + 1900);

                            //  por alfredo.  año nuevo 31 dic año anterior
                            String strF = objUti.formatearFecha(strFecCor, "dd/MM/yyyy", "yyyy/MM/dd");
                            java.util.Date fac = objUti.parseDate(strF, "yyyy/MM/dd");
                            int intAnioCre = (fac.getYear() + 1900);


                            if (intAnioCre > intAnioAct) {
                                strFecCor = "31/12/" + intAnioAct;
                            }



                            for (int x = 0; x < tblPag.getRowCount(); x++) {
                                dblValRet = Double.parseDouble(objInvItm.getIntDatoValidado(tblPag.getValueAt(x, INT_TBL_PAGRET)));
                                if (dblValRet > 0.00 && (tblPag.getValueAt(x, INT_TBL_COMSOL).equals("N"))) {
                                    tblPag.setValueAt(strFecCor, x, INT_TBL_PAGFEC);
                                }

                            }

                            /**
                             * ********************************************************************************************
                             */
                            /**
                             * **********************************************************************************
                             *///
                            boolean blnpagoscompensacion=false;
                            for (int x = 0; x < tblPag.getRowCount(); x++) {
                                i = x;
                                int FecPagDoc[] = txtFecDoc.getFecha(tblPag.getValueAt(i, INT_TBL_PAGFEC).toString());
                                String strFechaPag = "#" + FecPagDoc[2] + "/" + FecPagDoc[1] + "/" + FecPagDoc[0] + "#";
                                String strSop = ((tblPag.getValueAt(i, INT_TBL_PAGSOP) == null) ? "" : tblPag.getValueAt(i, INT_TBL_PAGSOP).toString());
                                String strCodTipRet = objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGCOD));
                                strSqlIns += " ; INSERT INTO  tbm_pagMovInv(co_emp, co_loc, co_tipDoc, co_doc, co_reg, " ; //CAMPOS PrimayKey
                                strSqlIns +=         " ne_diaCre, fe_ven, mo_pag, ne_diaGra, nd_porRet ,st_regrep , st_sop" ;//<==
                                strSqlIns +=         " ,co_tipret,tx_tipReg ) VALUES (" ;
                                strSqlIns +=  objZafParSis.getCodigoEmpresa() + ", " + objZafParSis.getCodigoLocal() + ", " + intCodTipDocFacEle + ", " + intCodDoc + ", " + (x + 1) + ", ";
                                strSqlIns +=  objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGCRE)) + ", '" + strFechaPag + "',";
                                if(tblPag.getValueAt(i, INT_TBL_COMSOL).equals("S")){
                                        strSqlIns += (new BigDecimal( objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGMON))).multiply(new BigDecimal(-1)))+", ";
                                        blnpagoscompensacion=true;
                                }
                                else{
                                    strSqlIns += (new BigDecimal( objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGMON))).multiply(new BigDecimal(-1)))+", ";
                                }
                                
                                strSqlIns +=          objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGGRA)) + ", ";
                                strSqlIns +=  objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGRET)) + ", 'I', '" + strSop + "', ";
                                strSqlIns +=  (strCodTipRet.equals("0") ? null : strCodTipRet) + " , ";
                                if(blnpagoscompensacion){
                                    strSqlIns += "'S')";
                                    blnpagoscompensacion=false;
                                }
                                else{
                                    strSqlIns += " null)";
                                }
                                        
                                // stmLoc.executeUpdate(strSql);
                            }
                            blnRes = true;
                            /**
                             * **********************************************************************************
                             *///
                        }
                    }

                    System.out.println("insertPagFac::: " + strSqlIns);
                    stmLocIns = conn.createStatement();
                    stmLocIns.executeUpdate(strSqlIns);
                    stmLocIns.close();
                    stmLocIns = null;
                }
            } catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }

        private boolean retAniMesCie(java.sql.Connection conn, int anio) {
            boolean blnRes = true;
            arlDatAniMes.clear();
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            try {
                if (conn != null) {
                    stmLoc = conn.createStatement();
                    strSQL = "";
                    strSQL += "select a1.ne_ani, a2.ne_mes, a1.tx_tipCie";
                    strSQL += " from tbm_cabciesis as a1 left outer join tbm_detciesis as a2";
                    strSQL += " on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani";
                    strSQL += " where a1.co_emp=" + objZafParSis.getCodigoEmpresa() + "";
                    strSQL += " and a1.ne_ani=" + anio + "";
                    rstLoc = stmLoc.executeQuery(strSQL);
                    while (rstLoc.next()) {
                        arlRegAniMes = new ArrayList();
                        arlRegAniMes.add(INT_ARL_ANI_CIE, "" + rstLoc.getInt("ne_ani"));
                        arlRegAniMes.add(INT_ARL_MES_CIE, "" + rstLoc.getInt("ne_mes"));
                        arlRegAniMes.add(INT_ARL_TIP_CIE, "" + rstLoc.getString("tx_tipCie"));
                        arlDatAniMes.add(arlRegAniMes);
                    }
                    rstLoc.close();
                    rstLoc = null;
                    stmLoc.close();
                    stmLoc = null;
                }
            } catch (java.sql.SQLException e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, e);
            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, e);
            }
            return blnRes;
        }

        private boolean insertarDiario(java.sql.Connection conn,  int intCodTipDocFacEle, int intCodDoc) {
            boolean blnRes = false;
            java.sql.Statement stmLoc, stmLocIns;
            String strSql = "", strSqlIns = "";
            String strPer = null, strMes = "";
            String strFecSistema = "";
            int intCodPer = 0;
            int intMes = 0;
            try {
                if (conn != null) {
                    stmLoc = conn.createStatement();


                    /**
                     * *****************************************************************************************
                     */
                    int intArlAni = 0;
                    int intArlMes = 0;
                    String strArlTipCie = "";
                    int intRefAniNew = 0;
                    int intRefMesNew = 0;
                    int intTipPro = 0;
                    intRefAniNew = (datFecAux.getYear() + 1900);
                    intRefMesNew = (datFecAux.getMonth() + 1);

                    //SI EL Aï¿½O NO HA SIDO CREADO EN EL SISTEMA NO SE DEBE PERMITIR INGRESAR(NO EXISTE EL ANIO EN tbm_anicresis)
                    if (!(objZafParSis.isAnioDocumentoCreadoSistema(intRefAniNew))) {
                        mostrarMsg("<HTML>El documento no puede ser grabado en el año<FONT COLOR=\"blue\"> " + intRefAniNew + " </FONT> debido a que dicho año todavía no ha sido creado en el sistema<BR>Notifique este problema a su Administrador del Sistema</HTML>");
                        return false;
                    }
                    //ESTE CODIGO ES NUEVO, Y PERMITE VALIDAR Q NO SE INGRESEN DIARIOS CON CIERRES MENSUALES O ANUALES
                    if (!(retAniMesCie(conn, intRefAniNew))) {
                        return false;
                    }
                    for (int k = 0; k < arlDatAniMes.size(); k++) {
                        intArlAni = objUti.getIntValueAt(arlDatAniMes, k, INT_ARL_ANI_CIE);
                        intArlMes = objUti.getIntValueAt(arlDatAniMes, k, INT_ARL_MES_CIE);
                        strArlTipCie = (objUti.getStringValueAt(arlDatAniMes, k, INT_ARL_TIP_CIE) == null ? "" : objUti.getStringValueAt(arlDatAniMes, k, INT_ARL_TIP_CIE));
                        if ((strArlTipCie.toString().equals("M"))) {
                            if (intRefAniNew == intArlAni) {
                                if (intRefMesNew == intArlMes) {
                                    mostrarMsg("<HTML>El mes que desea ingresar está cerrado. <BR>Está tratando de INSERTAR un documento en un periodo cerrado. <BR>Corrija la fecha del documento y vuelva a intentarlo.</HTML>");
                                    return false;
                                }
                            }
                        } else {
                            mostrarMsg("<HTML>La fecha del documento es incorrecta. <BR>Está tratando de INSERTAR un documento en un periodo que tiene un cierre anual. <BR>Corrija la fecha del documento y vuelva a intentarlo.</HTML>");
                            return false;
                        }
                    }

                    /**
                     * *****************************************************************************************
                     */
                    strFecSistema = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), objZafParSis.getFormatoFechaHoraBaseDatos());

                    strSqlIns = "INSERT INTO  tbm_cabdia(co_emp, co_loc, co_tipDoc, co_dia, fe_dia, tx_glo, "
                            + " fe_ing, co_usrIng, fe_ultMod, co_usrMod ) "
                            + " VALUES(" + objZafParSis.getCodigoEmpresa() + ", " + objZafParSis.getCodigoLocal() + ", " + intCodTipDocFacEle + ", "
                            + intCodDoc + ", '" + datFecAux + "','','" + strFecSistema + "', " + objZafParSis.getCodigoUsuario() + ", "
                            + " '" + strFecSistema + "', " + objZafParSis.getCodigoUsuario() + ")";
                    //stmLoc.executeUpdate(strSql);

                    intMes = datFecAux.getMonth() + 1;
                    if (intMes < 10) {
                        strMes = "0" + String.valueOf(intMes);
                    } else {
                        strMes = String.valueOf(intMes);
                    }

                    strPer = String.valueOf((datFecAux.getYear() + 1900)) + strMes;
                    intCodPer = Integer.parseInt(strPer);

                    
                    stmLocIns = conn.createStatement();
                    stmLocIns.executeUpdate(strSqlIns);
                    stmLocIns.close();
                    stmLocIns = null;
 

                    
                    if(insertarBigDetDia(conn, intCodTipDocFacEle, intCodDoc, intCodPer)){
                        blnRes = true;
                    } else {
                        blnRes = false;
                    }

                    stmLoc.close();
                    stmLoc = null;
                }
            } catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }

        public double getTotalDescuento() {
            //   System.out.println("ZafVen01.getTotalDescuento");

            double dblTotalDescuento = 0;
            for (int filaActual = 0; filaActual < tblDat.getRowCount(); filaActual++) {
                if (tblDat.getValueAt(filaActual, INT_TBL_CODITM) != null) {
                    double dblCan = objUti.redondeo(Double.parseDouble(((tblDat.getValueAt(filaActual, INT_TBL_CANMOV) == null) ? "0" : (tblDat.getValueAt(filaActual, INT_TBL_CANMOV).toString()))), 6),
                            dblPre = objUti.redondeo(Double.parseDouble(((tblDat.getValueAt(filaActual, INT_TBL_PREUNI) == null) ? "0" : (tblDat.getValueAt(filaActual, INT_TBL_PREUNI).toString()))), 6),
                            dblPorDes = objUti.redondeo(Double.parseDouble(((tblDat.getValueAt(filaActual, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(filaActual, INT_TBL_PORDES).toString()))), 2),
                            dblValDes = objUti.redondeo(((dblCan * dblPre) == 0) ? 0 : (objUti.redondeo((dblCan * dblPre) * dblPorDes, 6) / 100), 6);
                    //dblTotalDescuento =  objUti.redondear(dblTotalDescuento + objUti.redondeo(dblValDes,6),2);
                    dblTotalDescuento = dblTotalDescuento + dblValDes;

                }
            }
            dblTotalDescuento = objUti.redondear(objUti.redondear(dblTotalDescuento, 4), 2);
            return dblTotalDescuento;
        }
        
        
        public BigDecimal getBigTotalDescuento() {
            //   System.out.println("ZafVen01.getTotalDescuento");

            BigDecimal bigTotalDescuento = BigDecimal.ZERO;
            for (int filaActual = 0; filaActual < tblDat.getRowCount(); filaActual++) {
                if (tblDat.getValueAt(filaActual, INT_TBL_CODITM) != null) {
                    BigDecimal bigCan= BigDecimal.valueOf(Double.parseDouble(((tblDat.getValueAt(filaActual, INT_TBL_CANMOV) == null) ? "0" : (tblDat.getValueAt(filaActual, INT_TBL_CANMOV).toString())))).setScale(6, RoundingMode.HALF_UP);
                    BigDecimal bigPre= BigDecimal.valueOf(Double.parseDouble(((tblDat.getValueAt(filaActual, INT_TBL_PREUNI) == null) ? "0" : (tblDat.getValueAt(filaActual, INT_TBL_PREUNI).toString())))).setScale(6, RoundingMode.HALF_UP);
                    BigDecimal bigPorDes=BigDecimal.valueOf(Double.parseDouble(((tblDat.getValueAt(filaActual, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(filaActual, INT_TBL_PORDES).toString())))).setScale(6, RoundingMode.HALF_UP);
                    BigDecimal bigValDes=(bigCan.multiply(bigPre)==BigDecimal.ZERO)?BigDecimal.ZERO:(bigCan.multiply(bigPre).multiply(bigPorDes).setScale(6, RoundingMode.HALF_UP)).divide(new BigDecimal(100).setScale(6, RoundingMode.HALF_UP));
                    /*double dblCan = objUti.redondeo(Double.parseDouble(((tblDat.getValueAt(filaActual, INT_TBL_CANMOV) == null) ? "0" : (tblDat.getValueAt(filaActual, INT_TBL_CANMOV).toString()))), 6),
                            dblPre = objUti.redondeo(Double.parseDouble(((tblDat.getValueAt(filaActual, INT_TBL_PREUNI) == null) ? "0" : (tblDat.getValueAt(filaActual, INT_TBL_PREUNI).toString()))), 6),
                            dblPorDes = objUti.redondeo(Double.parseDouble(((tblDat.getValueAt(filaActual, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(filaActual, INT_TBL_PORDES).toString()))), 2),
                            dblValDes = objUti.redondeo(((dblCan * dblPre) == 0) ? 0 : (objUti.redondeo((dblCan * dblPre) * dblPorDes, 6) / 100), 6);*/
                    //dblTotalDescuento =  objUti.redondear(dblTotalDescuento + objUti.redondeo(dblValDes,6),2);
                    //dblTotalDescuento = dblTotalDescuento + dblValDes;
                    bigTotalDescuento = bigTotalDescuento.add(bigValDes);

                }
            }
            //dblTotalDescuento = objUti.redondear(objUti.redondear(dblTotalDescuento, 4), 2);
            bigTotalDescuento=bigTotalDescuento.setScale(2, RoundingMode.HALF_UP);
            //return dblTotalDescuento;
            return bigTotalDescuento;
        }        

        public double getTotalItemOtros() {
            //    System.out.println("ZafVen01.getTotalItemOtros");

            double dblSub = 0, dblTotalItemOtros = 0;
            double subtot = 0.00;
            strarritmotr = new String[tblDat.getRowCount()][2];
            for (int filaActual = 0; filaActual < tblDat.getRowCount(); filaActual++) {
                if ((tblDat.getValueAt(filaActual, INT_TBL_CODITM) != null) && (tblDat.getValueAt(filaActual, INT_TBL_ITMSER).equals("O")) && (tblDat.getValueAt(filaActual, INT_TBL_CODCTAEGR) != null)) {
                    dblSub = ((tblDat.getValueAt(filaActual, INT_TBL_TOTAL) == null || tblDat.getValueAt(filaActual, INT_TBL_TOTAL).toString().equals("")) ? 0 : Double.parseDouble(tblDat.getValueAt(filaActual, INT_TBL_TOTAL).toString()));
                    dblTotalItemOtros = dblTotalItemOtros + dblSub;

                    for (int x = 0; x < strarritmotr.length; x++) {
                        if (strarritmotr[x][0] != null) {
                            if (strarritmotr[x][0].equals(tblDat.getValueAt(filaActual, INT_TBL_CODCTAEGR))) {
                                subtot = dblSub + Double.parseDouble(strarritmotr[x][1]);
                                strarritmotr[x][1] = Double.toString(subtot);
                                break;
                            }
                        } else {
                            strarritmotr[x][0] = tblDat.getValueAt(filaActual, INT_TBL_CODCTAEGR).toString();
                            subtot = dblSub;
                            strarritmotr[x][1] = Double.toString(subtot);
                            break;
                        }
                    }

                }
            }
            return dblTotalItemOtros;
        }
        
        
        public BigDecimal getBigTotalItemOtros() {
            //    System.out.println("ZafVen01.getTotalItemOtros");

            //double dblSub = 0, dblTotalItemOtros = 0;
            BigDecimal bigSub=BigDecimal.ZERO;
            BigDecimal bigTotalItemOtros=BigDecimal.ZERO;
            //double subtot = 0.00;
            BigDecimal bigSubTot=BigDecimal.ZERO;
            strarritmotr = new String[tblDat.getRowCount()][2];
            for (int filaActual = 0; filaActual < tblDat.getRowCount(); filaActual++) {
                if ((tblDat.getValueAt(filaActual, INT_TBL_CODITM) != null) && (tblDat.getValueAt(filaActual, INT_TBL_ITMSER).equals("O")) && (tblDat.getValueAt(filaActual, INT_TBL_CODCTAEGR) != null)) {
                    
                    bigSub= ((tblDat.getValueAt(filaActual, INT_TBL_TOTAL) == null || tblDat.getValueAt(filaActual, INT_TBL_TOTAL).toString().equals("")) ? BigDecimal.ZERO : BigDecimal.valueOf(Double.parseDouble(tblDat.getValueAt(filaActual, INT_TBL_TOTAL).toString())));
                    //dblSub = ((tblDat.getValueAt(filaActual, INT_TBL_TOTAL) == null || tblDat.getValueAt(filaActual, INT_TBL_TOTAL).toString().equals("")) ? 0 : Double.parseDouble(tblDat.getValueAt(filaActual, INT_TBL_TOTAL).toString()));
                    //dblTotalItemOtros = dblTotalItemOtros + dblSub;
                    bigTotalItemOtros=bigTotalItemOtros.add(bigSub);

                    for (int x = 0; x < strarritmotr.length; x++) {
                        if (strarritmotr[x][0] != null) {
                            if (strarritmotr[x][0].equals(tblDat.getValueAt(filaActual, INT_TBL_CODCTAEGR))) {
                                //subtot = dblSub + Double.parseDouble(strarritmotr[x][1]);
                                bigSubTot = bigSub.add(BigDecimal.valueOf(Double.parseDouble(strarritmotr[x][1])));
                                //strarritmotr[x][1] = Double.toString(subtot);
                                strarritmotr[x][1] = bigSubTot.toString();
                                break;
                            }
                        } else {
                            strarritmotr[x][0] = tblDat.getValueAt(filaActual, INT_TBL_CODCTAEGR).toString();
                            //subtot = dblSub;
                            bigSubTot = bigSub;
                            //strarritmotr[x][1] = Double.toString(subtot);
                            strarritmotr[x][1] = bigSubTot.toString();
                            break;
                        }
                    }

                }
            }
            //return dblTotalItemOtros;
            return bigTotalItemOtros;
        }        
        

        /**
         * Esta Funcion permite realizar el ingreso de detalle de diario.
         *
         * @param intCodDoc : recive el codigo del documento
         * @param conDetDia : recive la coneccion de la base
         * @param intCodPer : recive perido actual
         */
        private boolean insertarDetDia(java.sql.Connection conn, java.sql.Connection connRemota, int intCodTipDocFacEle, int intCodDoc, int intCodPer) {
            boolean blnRes = false;
            java.sql.Statement stmLoc, stmLocIns;
            String srtSql = "", strSqlIns = "";
            String srtSqlSal = "";
            double dblValTotDes = 0, dblValTotOtr = 0;
            try {
                //   System.out.println("ZafVen01.insertarDetDia");

                if (conn != null) {
                    stmLoc = conn.createStatement();

                    srtSql = "INSERT INTO tbm_detdia(co_emp, co_loc, co_tipDoc, co_dia, co_reg, co_cta, nd_mondeb, nd_monhab )"
                            + " VALUES(" + objZafParSis.getCodigoEmpresa() + ", " + objZafParSis.getCodigoLocal() + ", " + intCodTipDocFacEle + ", " + intCodDoc + ", ";

                    dblValTotOtr = getTotalItemOtros();

                    dblValTotDes = getTotalDescuento();
                    if (dblTotalCot > 0) {
                        //java.sql.PreparedStatement pstDetDia = conn.prepareStatement(srtSql+" 1,"+objZafCtaCtb_dat.getCtaDeb()+","+
                        //dblTotalCot+", 0 ) " );
                        //pstDetDia.executeUpdate();

                        strSqlIns += srtSql + " 1," + objZafCtaCtb_dat.getCtaDeb() + "," + dblTotalCot + ", 0 )  ; ";

                        srtSqlSal = "UPDATE tbm_salcta SET nd_salcta=nd_salcta+" + dblTotalCot + "  WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_cta=" + objZafCtaCtb_dat.getCtaDeb() + " AND co_per=" + intCodPer;
                        strSqlIns += srtSqlSal + "  ; ";
                        //stmLoc.executeUpdate(srtSqlSal);


                    }
                    if (dblValTotDes > 0) {
//       java.sql.PreparedStatement pstDetDia = conn.prepareStatement(srtSql+" 2, "+objZafCtaCtb_dat.getCtaDescVentas()+", "+
//       dblValTotDes+", 0 )");
//       pstDetDia.executeUpdate();

                        strSqlIns += srtSql + " 2, " + objZafCtaCtb_dat.getCtaDescVentas() + ", " + dblValTotDes + ", 0 ) ; ";

                        srtSqlSal = "UPDATE tbm_salcta SET nd_salcta=nd_salcta+" + dblValTotDes + "  WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_cta=" + objZafCtaCtb_dat.getCtaDescVentas() + " AND co_per=" + intCodPer;
                        strSqlIns += srtSqlSal + "  ; ";

                        //stmLoc.executeUpdate(srtSqlSal);
                    }
                    /**
                     * Agregando la cuenta de Ventas
                     */
                    if ((dblValTotDes + dblSubtotalCot - dblValTotOtr) > 0) {
//         java.sql.PreparedStatement pstDetDia = conn.prepareStatement(srtSql+" 3, "+objZafCtaCtb_dat.getCtaHab()+", 0, " +
//         objUti.redondear(dblValTotDes+ dblSubtotalCot,2)+" )");
//         pstDetDia.executeUpdate();

                       // strSqlIns += srtSql + " 3, " + objZafCtaCtb_dat.getCtaHab() + ", 0, " + objUti.redondear(dblValTotDes + dblSubtotalCot - dblValTotOtr, 2) + " ) ; ";
						strSqlIns+=srtSql+" 3, "+objZafCtaCtb_dat.getCtaHab()+", 0, "+new BigDecimal(dblValTotDes+dblSubtotalCot-dblValTotOtr).setScale(2, RoundingMode.HALF_UP)+" ) ; ";

                        srtSqlSal = "UPDATE tbm_salcta SET nd_salcta=nd_salcta+" + (objUti.redondear(dblValTotDes + dblSubtotalCot - dblValTotOtr, 2) * -1) + "  WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_cta=" + objZafCtaCtb_dat.getCtaHab() + " AND co_per=" + intCodPer;
                        strSqlIns += srtSqlSal + "  ; ";

                        //stmLoc.executeUpdate(srtSqlSal);
                    }
                    /**
                     * Agregando la cuenta Iva en Ventas
                     */
                    if (dblIvaCot > 0) {
//         java.sql.PreparedStatement pstDetDia = conn.prepareStatement(srtSql+" 4 , "+objZafCtaCtb_dat.getCtaIvaVentas()+", 0, "+
//         dblIvaCot+" )");
//         pstDetDia.executeUpdate();

                       //strSqlIns += srtSql + " 4 , " + objZafCtaCtb_dat.getCtaIvaVentas() + ", 0, " + dblIvaCot + " ) ; ";
				         strSqlIns+=srtSql+" 4 , "+objZafCtaCtb_dat.getCtaIvaVentas()+", 0, "+new BigDecimal(dblIvaCot).setScale(2, RoundingMode.HALF_UP)+" ) ; ";

                        srtSqlSal = "UPDATE tbm_salcta SET nd_salcta=nd_salcta+" + (dblIvaCot * -1) + "  WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_cta=" + objZafCtaCtb_dat.getCtaIvaVentas() + " AND co_per=" + intCodPer;
                        strSqlIns += srtSqlSal + "  ; ";

                        //stmLoc.executeUpdate(srtSqlSal);
                    }

                    int ind = 5;
                    for (int x = 0; x < strarritmotr.length; x++) {
                        if (strarritmotr[x][0] != null) {
                            strSqlIns += srtSql + " " + (ind + x) + ", " + strarritmotr[x][0] + ", 0, " + objUti.redondear(strarritmotr[x][1], 2) + " ) ; ";

                            srtSqlSal = "UPDATE tbm_salcta SET nd_salcta=nd_salcta+" + (objUti.redondear(strarritmotr[x][1], 2) * -1) + "  WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_cta=" + objZafCtaCtb_dat.getCtaHab() + " AND co_per=" + intCodPer;
                            strSqlIns += srtSqlSal + "  ; ";
                        }
                    }

                    //PARA ACTUALIZAR SALDOS DE LOS NODOS PADRES
                    for (int j = 6; j > 1; j--) {
                        strSQL = "";
                        strSQL += "UPDATE tbm_salCta";
                        strSQL += " SET nd_salCta=b1.nd_salCta";
                        strSQL += " FROM (";
                        strSQL += " SELECT a1.co_emp, a1.ne_pad AS co_cta, " + intCodPer + " AS co_per, SUM(a2.nd_salCta) AS nd_salCta";
                        strSQL += " FROM tbm_plaCta AS a1";
                        strSQL += " INNER JOIN tbm_salCta AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta)";
                        strSQL += " WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa();
                        strSQL += " AND a1.ne_niv=" + j;
                        strSQL += " AND a2.co_per=" + intCodPer + "";
                        strSQL += " GROUP BY a1.co_emp, a1.ne_pad";
                        strSQL += " ) AS b1";
                        strSQL += " WHERE tbm_salCta.co_emp=b1.co_emp AND tbm_salCta.co_cta=b1.co_cta AND tbm_salCta.co_per=b1.co_per";
                        strSqlIns += strSQL + " ;  ";
                        //stmLoc.executeUpdate(strSQL);
                    }
                    //PARA ACTUALIZAR EL SALDO DE LA CUENTA DE ESTADO DE RESULTADOS
                    strSQL = "UPDATE tbm_salCta";
                    strSQL += " SET nd_salCta=b1.nd_salCta";
                    strSQL += " FROM (";
                    strSQL += " SELECT a1.co_emp, a3.co_ctaRes AS co_cta, " + intCodPer + " AS co_per, SUM(a2.nd_salCta) AS nd_salCta";
                    strSQL += " FROM tbm_plaCta AS a1";
                    strSQL += " INNER JOIN tbm_salCta AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta)";
                    strSQL += " INNER JOIN tbm_emp AS a3 ON (a1.co_emp=a3.co_emp)";
                    strSQL += " WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa();
                    strSQL += " and a1.ne_niv='1' and a1.tx_niv1 in ('4','5','6','7','8')";
                    strSQL += " AND a2.co_per=" + intCodPer + "";
                    strSQL += " GROUP BY a1.co_emp, a3.co_ctaRes";
                    strSQL += " ) AS b1";
                    strSQL += " WHERE tbm_salCta.co_emp=b1.co_emp AND tbm_salCta.co_cta=b1.co_cta AND tbm_salCta.co_per=b1.co_per";
                    strSqlIns += strSQL + " ;  ";
                    //stmLoc.executeUpdate(strSQL);

                    //PARA ACTUALIZAR SALDOS DE LOS NODOS PADRES
                    for (int j = 6; j > 1; j--) {
                        strSQL = "";
                        strSQL += "UPDATE tbm_salCta";
                        strSQL += " SET nd_salCta=b1.nd_salCta";
                        strSQL += " FROM (";
                        strSQL += " SELECT a1.co_emp, a1.ne_pad AS co_cta, " + intCodPer + " AS co_per, SUM(a2.nd_salCta) AS nd_salCta";
                        strSQL += " FROM tbm_plaCta AS a1";
                        strSQL += " INNER JOIN tbm_salCta AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta)";
                        strSQL += " WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa();
                        strSQL += " AND a1.ne_niv=" + j;
                        strSQL += " AND a2.co_per=" + intCodPer + "";
                        strSQL += " GROUP BY a1.co_emp, a1.ne_pad";
                        strSQL += " ) AS b1";
                        strSQL += " WHERE tbm_salCta.co_emp=b1.co_emp AND tbm_salCta.co_cta=b1.co_cta AND tbm_salCta.co_per=b1.co_per";
                        strSqlIns += strSQL + " ;  ";
                        //stmLoc.executeUpdate(strSQL);
                    }

                    if (connRemota != null) {
                        stmLocIns = connRemota.createStatement();
                        stmLocIns.executeUpdate(strSqlIns);
                        stmLocIns.close();
                        stmLocIns = null;
                    } else {
                        stmLocIns = conn.createStatement();
                        stmLocIns.executeUpdate(strSqlIns);
                        stmLocIns.close();
                        stmLocIns = null;
                    }

                    stmLoc.close();
                    stmLoc = null;
                    blnRes = true;
                }
            } catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }
        
        

        private boolean insertarBigDetDia(java.sql.Connection conn, int intCodTipDocFacEle, int intCodDoc, int intCodPer) {
            boolean blnRes = false;
            java.sql.Statement stmLoc, stmLocIns;
            String srtSql = "", strSqlIns = "", strCodCta="",strNomCta="";
            boolean blnIsCosenco, blnIsEcuatosa, blnIsDetopacio;
            String srtSqlSal = "";
            int intCodCta=-1;
            BigDecimal bigValTotDes = BigDecimal.ZERO, bigValTotOtr = BigDecimal.ZERO;
            try {
                if (conn != null) {
                    stmLoc = conn.createStatement();
                    blnIsCosenco = (objZafParSis.getNombreEmpresa().toUpperCase().indexOf("COSENCO") > -1)?true:false;
                    blnIsEcuatosa = (objZafParSis.getNombreEmpresa().toUpperCase().indexOf("ECUATOSA") > -1)?true:false;
                    blnIsDetopacio = (objZafParSis.getNombreEmpresa().toUpperCase().indexOf("DETOPACIO") > -1)?true:false;
                    if(blnIsCosenco || blnIsEcuatosa ||blnIsDetopacio){  // COSENCO
                        System.out.println("cosenco - ecuatosa - detopacio");
                        if(blnIsDetopacio){
                            intCodCta=1798;
                            strCodCta="6.02.01.01";
                            strNomCta="Intereses";
                        }
                        else if(blnIsEcuatosa){
                            intCodCta=411;
                            strCodCta="7.01.01.03";
                            strNomCta="Intereses ganados sobre prestamos";
                        }
                        else if(blnIsCosenco){
                            intCodCta=1810;
                            strCodCta="7.01.01.02";
                            strNomCta="Intereses ganados";
                        }
                    }
                    else{
                         /*AGREGADO POR COMPENSACION SOLIDARIA*/
                        if(objZafParSis.getCodigoEmpresa()==1){
                            intCodCta=4680;
                            strCodCta="4.01.01.04";
                            strNomCta="VENTAS MERCADERIAS GQUIL T/. 0%";
                        }else if(objZafParSis.getCodigoEmpresa()==2){
                            intCodCta=2303;
                            strCodCta="4.01.01.04";
                            strNomCta="VENTAS MERCADERIAS GQUIL T/. 0%";
                        }else if(objZafParSis.getCodigoEmpresa()==4){
                            intCodCta=3210;
                            strCodCta="4.01.01.04";
                            strNomCta="VENTAS MERCADERIAS GQUIL T/. 0%";
                        }
                    }
                    
                    
                    
                    srtSql = "INSERT INTO tbm_detdia(co_emp, co_loc, co_tipDoc, co_dia, co_reg, co_cta, nd_mondeb, nd_monhab )"
                            + " VALUES(" + objZafParSis.getCodigoEmpresa() + ", " + objZafParSis.getCodigoLocal() + ", " + intCodTipDocFacEle + ", " + intCodDoc + ", ";
//                    bigValTotOtr = getBigTotalItemOtros();
//                    bigValTotDes = getBigTotalDescuento();
                    if (dblTotalCot > 0) {
                        strSqlIns += srtSql + " 1," + objZafCtaCtb_dat.getCtaDeb() + "," + dblTotalCot + ", 0 )  ; ";

//                        srtSqlSal = "UPDATE tbm_salcta SET nd_salcta=nd_salcta+" + dblTotalCot + "  WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_cta=" + objZafCtaCtb_dat.getCtaDeb() + " AND co_per=" + intCodPer;
//                        strSqlIns += srtSqlSal + "  ; ";
                    }

                    /**
                     * Agregando la cuenta de Ventas
                     */
                    if(dblBaseIva>0){
                        strSqlIns+=srtSql+" 2, "+objZafCtaCtb_dat.getCtaHab()+", 0, "+dblBaseIva+" ) ; ";

//                        srtSqlSal = "UPDATE tbm_salcta SET nd_salcta=nd_salcta+" + dblBaseIva + "  WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_cta=" + objZafCtaCtb_dat.getCtaHab() + " AND co_per=" + intCodPer;
//                        strSqlIns += srtSqlSal + "  ; ";
                    }
                    
                    if(dblBaseCero>0){
                        strSqlIns+=srtSql+"3, "+intCodCta+", 0, "+dblBaseCero+" ) ; ";

//                        srtSqlSal = "UPDATE tbm_salcta SET nd_salcta=nd_salcta+" + dblBaseCero + "  WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_cta=" + intCodCta + " AND co_per=" + intCodPer;
//                        strSqlIns += srtSqlSal + "  ; ";
                    }
                    
 
                    /**
                     * Agregando la cuenta Iva en Ventas
                     */  
                    if (dblIvaCot > 0) {
			strSqlIns+=srtSql+" 4 , "+objZafCtaCtb_dat.getCtaIvaVentas()+", 0, "+ dblIvaCot +" ) ; ";

//                        srtSqlSal = "UPDATE tbm_salcta SET nd_salcta=nd_salcta+" +  dblIvaCot + "  WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_cta=" + objZafCtaCtb_dat.getCtaIvaVentas() + " AND co_per=" + intCodPer;
//                        strSqlIns += srtSqlSal + "  ; ";

                        //stmLoc.executeUpdate(srtSqlSal);
                    }

                    //PARA ACTUALIZAR SALDOS DE LOS NODOS PADRES
//                    for (int j = 6; j > 1; j--) {
//                        strSQL = "";
//                        strSQL += "UPDATE tbm_salCta";
//                        strSQL += " SET nd_salCta=b1.nd_salCta";
//                        strSQL += " FROM (";
//                        strSQL += " SELECT a1.co_emp, a1.ne_pad AS co_cta, " + intCodPer + " AS co_per, SUM(a2.nd_salCta) AS nd_salCta";
//                        strSQL += " FROM tbm_plaCta AS a1";
//                        strSQL += " INNER JOIN tbm_salCta AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta)";
//                        strSQL += " WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa();
//                        strSQL += " AND a1.ne_niv=" + j;
//                        strSQL += " AND a2.co_per=" + intCodPer + "";
//                        strSQL += " GROUP BY a1.co_emp, a1.ne_pad";
//                        strSQL += " ) AS b1";
//                        strSQL += " WHERE tbm_salCta.co_emp=b1.co_emp AND tbm_salCta.co_cta=b1.co_cta AND tbm_salCta.co_per=b1.co_per";
//                        strSqlIns += strSQL + " ;  ";
//                        //stmLoc.executeUpdate(strSQL);
//                    }
//                    //PARA ACTUALIZAR EL SALDO DE LA CUENTA DE ESTADO DE RESULTADOS
//                    strSQL = "UPDATE tbm_salCta";
//                    strSQL += " SET nd_salCta=b1.nd_salCta";
//                    strSQL += " FROM (";
//                    strSQL += " SELECT a1.co_emp, a3.co_ctaRes AS co_cta, " + intCodPer + " AS co_per, SUM(a2.nd_salCta) AS nd_salCta";
//                    strSQL += " FROM tbm_plaCta AS a1";
//                    strSQL += " INNER JOIN tbm_salCta AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta)";
//                    strSQL += " INNER JOIN tbm_emp AS a3 ON (a1.co_emp=a3.co_emp)";
//                    strSQL += " WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa();
//                    strSQL += " and a1.ne_niv='1' and a1.tx_niv1 in ('4','5','6','7','8')";
//                    strSQL += " AND a2.co_per=" + intCodPer + "";
//                    strSQL += " GROUP BY a1.co_emp, a3.co_ctaRes";
//                    strSQL += " ) AS b1";
//                    strSQL += " WHERE tbm_salCta.co_emp=b1.co_emp AND tbm_salCta.co_cta=b1.co_cta AND tbm_salCta.co_per=b1.co_per";
//                    strSqlIns += strSQL + " ;  ";
                    //stmLoc.executeUpdate(strSQL);

//                    //PARA ACTUALIZAR SALDOS DE LOS NODOS PADRES
//                    for (int j = 6; j > 1; j--) {
//                        strSQL = "";
//                        strSQL += "UPDATE tbm_salCta";
//                        strSQL += " SET nd_salCta=b1.nd_salCta";
//                        strSQL += " FROM (";
//                        strSQL += " SELECT a1.co_emp, a1.ne_pad AS co_cta, " + intCodPer + " AS co_per, SUM(a2.nd_salCta) AS nd_salCta";
//                        strSQL += " FROM tbm_plaCta AS a1";
//                        strSQL += " INNER JOIN tbm_salCta AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta)";
//                        strSQL += " WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa();
//                        strSQL += " AND a1.ne_niv=" + j;
//                        strSQL += " AND a2.co_per=" + intCodPer + "";
//                        strSQL += " GROUP BY a1.co_emp, a1.ne_pad";
//                        strSQL += " ) AS b1";
//                        strSQL += " WHERE tbm_salCta.co_emp=b1.co_emp AND tbm_salCta.co_cta=b1.co_cta AND tbm_salCta.co_per=b1.co_per";
//                        strSqlIns += strSQL + " ;  ";
//                        //stmLoc.executeUpdate(strSQL);
//                    }

                    
                    stmLocIns = conn.createStatement();
                    stmLocIns.executeUpdate(strSqlIns);
                    stmLocIns.close();
                    stmLocIns = null;
                    

                    stmLoc.close();
                    stmLoc = null;
                    blnRes = true;
                }
            } catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }        

        /**
         * Verifica si el item es de servicio
         *
         * @param conn
         * @param intCodEmp
         * @param intCodItm
         * @return true es de serivio false no es de servicio
         */
        private boolean _getEstItmSer(java.sql.Connection conn, int intCodEmp, int intCodItm) {
            boolean blnRes = false;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strSql = "";
            try {
                //    System.out.println("ZafVen01._getEstItmSer");

                if (conn != null) {
                    stmLoc = conn.createStatement();

                    strSql = "SELECT st_ser FROM tbm_inv WHERE co_emp=" + intCodEmp + " AND co_itm=" + intCodItm + " AND st_ser='S'";
                    rstLoc = stmLoc.executeQuery(strSql);
                    if (rstLoc.next()) {
                        blnRes = true;
                    }
                    rstLoc.close();
                    rstLoc = null;

                    stmLoc.close();
                    stmLoc = null;
                }
            } catch (java.sql.SQLException ex) {
                objUti.mostrarMsgErr_F1(jfrThis, ex);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(jfrThis, e);
            }
            return blnRes;
        }

        /**
         * Verifica si el item es de servicio
         *
         * @param conn
         * @param intCodEmp
         * @param intCodItm
         * @return true es de serivio false no es de servicio
         */
        private boolean _getEstItmTrans(java.sql.Connection conn, int intCodEmp, int intCodItm) {
            boolean blnRes = false;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strSql = "";
            try {
                // System.out.println("ZafVen01._getEstItmTrans");

                if (conn != null) {
                    stmLoc = conn.createStatement();

                    strSql = "SELECT st_ser FROM tbm_inv WHERE co_emp=" + intCodEmp + " AND co_itm=" + intCodItm + " AND st_ser='T'";
                    rstLoc = stmLoc.executeQuery(strSql);
                    if (rstLoc.next()) {
                        blnRes = true;
                    }
                    rstLoc.close();
                    rstLoc = null;

                    stmLoc.close();
                    stmLoc = null;
                }
            } catch (java.sql.SQLException ex) {
                objUti.mostrarMsgErr_F1(jfrThis, ex);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(jfrThis, e);
            }
            return blnRes;
        }
 
        /**
         * Verifica si todos los items son de tranporte
         *
         * @param conn
         * @param intCodEmp
         * @return true todos son de servicio false hay un item que no es de
         * servicio
         */
        private boolean _getVerificaTodItmTrans(java.sql.Connection conn, int intCodEmp) {
            boolean blnRes = true;
            int intCodItm = 0;
            try {
                //  System.out.println("ZafVen01._getVerificaTodItmTrans");

                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {

                        intCodItm = Integer.parseInt("" + tblDat.getValueAt(i, INT_TBL_CODITM));

                        if (!_getEstItmTrans(conn, intCodEmp, intCodItm)) {
                            blnRes = false;
                            break;
                        }

                    }
                }
            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, e);
            }
            return blnRes;
        }

        private int _getVerDifSolGenGuia(java.sql.Connection conn, int intCodEmp, int intCodLoc, int intCodCot) {
            int intEstGenGuia = 1;  // NO GENERA GUIA
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strSql = "";
            try {
                if (conn != null) {
                    stmLoc = conn.createStatement();
                    strSql = "select * from ( "
                            + " select  ( a.nd_can - case when (abs(nd_canvolfac) - abs( nd_canvuefaccli + nd_cannunvuefaccli )) is null then 0 else  "
                            + " (abs(nd_canvolfac) - abs( nd_canvuefaccli + nd_cannunvuefaccli )) end "
                            + " ) as dif   from tbm_detcotven as a  "
                            + " left join tbm_detsoldevven as a1 on (a1.co_emp=a.co_emp and a1.co_loc=a.co_locrelsoldevven and a1.co_tipdoc=a.co_tipdocrelsoldevven and a1.co_doc=a.co_docrelsoldevven "
                            + " and a1.co_reg=a.co_regrelsoldevven ) "
                            + " where a.co_emp=" + intCodEmp + " and a.co_loc=" + intCodLoc + "  and a.co_cot=" + intCodCot + " "
                            + " ) as x where dif > 0 ";
                    rstLoc = stmLoc.executeQuery(strSql);
                    if (rstLoc.next()) {
                        intEstGenGuia = 0; // GENERE GUIA
                    }
                    rstLoc.close();
                    rstLoc = null;
                    stmLoc.close();
                    stmLoc = null;

                }
            } catch (SQLException Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return intEstGenGuia;
        }

        
        
        public boolean insertar(java.sql.Connection conIns) {
            boolean blnRes = false;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strMerIngEgr = "", strTipIngEgr = "";
            String strSql = "";
            String strConfInv = "F";
            boolean blnIsCosenco, blnIsEcuatosa, blnIsDetopacio;
            int intCodDoc = 0;
            int intCodDocGuia = 0;
            int intReaGuiaRem = 1;  // estado si realiza guia de remision 1 no realiza guia 0 si realiza guia.
            boolean blnEstVolFacGuiImp = false; //  Estado que es cuando se vuelve a facturar y la guia esta impresa es para saber si se genera guia por la diferencia.
            try {
                blnIsCosenco = (objZafParSis.getNombreEmpresa().toUpperCase().indexOf("COSENCO") > -1)?true:false;
                blnIsEcuatosa = (objZafParSis.getNombreEmpresa().toUpperCase().indexOf("ECUATOSA") > -1)?true:false;
                blnIsDetopacio = (objZafParSis.getNombreEmpresa().toUpperCase().indexOf("DETOPACIO") > -1)?true:false;
                    
                if (conIns != null) {
                    conIns.setAutoCommit(false);
                    stmLoc = conIns.createStatement();
                    
                    if(!validacionCodigosL()){
                        return false;
                    }

                    stbDocRelEmpLoc = new StringBuffer();
                    stbDocRelEmpRem = new StringBuffer();
                    intDocRelEmpLoc = 0;

                    /**
                     * ********************** OBTIENE MAX CODIGO DE CABMOVINVV ****************************************
                     */
                    strSql = "SELECT CASE WHEN (Max(co_doc)+1) IS NULL THEN 1 ELSE  (Max(co_doc)+1) END AS co_doc FROM tbm_cabMovInv WHERE "
                            + " co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " AND co_tipDoc=" + intTipDoc;

                    intCodDoc = getCodigoMaxDoc(conIns, strSql);

                    strSql = "SELECT CASE WHEN (Max(co_doc)+1) IS NULL THEN 1 ELSE  (Max(co_doc)+1) END AS co_doc FROM tbm_cabguirem WHERE "
                            + " co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " AND co_tipDoc=" + intTipDocGuia;

                    intCodDocGuia = getCodigoMaxDoc(conIns,  strSql);

                    strSql = "SELECT st_meringegrfisbod, tx_natdoc FROM tbm_cabtipdoc WHERE  co_emp=" + objZafParSis.getCodigoEmpresa() + " "
                            + " and co_loc=" + objZafParSis.getCodigoLocal() + " and co_tipDoc=" + intTipDoc;
                    rstLoc = stmLoc.executeQuery(strSql);
                    if (rstLoc.next()) {
                        strMerIngEgr = rstLoc.getString("st_meringegrfisbod");
                        strTipIngEgr = rstLoc.getString("tx_natdoc");
                    }
                    rstLoc.close();
                    rstLoc = null;

                    strSql = "select st_conInv, co_ptopar, tx_ptopar, a2.ne_numdoc  from ( "
                            + "  select a2.co_emp, a2.co_loc, a2.co_tipdoc, a2.co_doc from tbm_cabcotven as a  "
                            + "  inner join tbm_cabsoldevven as a1 on (a1.co_emp=a.co_emp and a1.co_loc=a.co_locrelsoldevven and a1.co_tipdoc=a.co_tipdocrelsoldevven and a1.co_doc=a.co_docrelsoldevven) "
                            + "  inner join tbm_detguirem as a2 on (a2.co_emprel=a1.co_emp and a2.co_locrel=a1.co_locrel and a2.co_tipdocrel=a1.co_tipdocrel and a2.co_docrel=a1.co_docrel)  "
                            + "  where a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_loc=" + objZafParSis.getCodigoLocal() + " and a.co_cot=" + txtCot.getText() + " "
                            + "  and a1.st_aut='A'  and a1.st_tipdev='C'  "
                            + "  group by a2.co_emp, a2.co_loc, a2.co_tipdoc, a2.co_doc   "
                            + "  ) as a1  "
                            + "  inner join tbm_cabguirem as a2 on (a2.co_emp=a1.co_emp and a2.co_loc=a1.co_loc and a2.co_tipdoc=a1.co_tipdoc and a2.co_doc=a1.co_doc)  "
                            + "  ";
                    rstLoc = stmLoc.executeQuery(strSql);
                    if (rstLoc.next()) {

                        if (rstLoc.getInt("ne_numdoc") == 0) {
                            intReaGuiaRem = 0;
                        } else {
                            intReaGuiaRem = _getVerDifSolGenGuia(conIns, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), Integer.parseInt(txtCot.getText()));
                            if (intReaGuiaRem == 0) {
                                blnEstVolFacGuiImp = true;
                            }
                        }
                    } else {
                        intReaGuiaRem = 0;
                    }
                    rstLoc.close();
                    rstLoc = null;
                    stmLoc.close();
                    stmLoc = null;



                    if (intReaGuiaRem == 0) {
                        if (_getVerificaTodItmTrans(conIns, objZafParSis.getCodigoEmpresa())) {
                            intReaGuiaRem = 1;
                        }
                    }

                    /**
                     * *******************************************************************************************************
                     */
                    for (int i = 0; i < tblDat.getRowCount(); i++) {
                        if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                            String strEst = (tblDat.getValueAt(i, INT_TBL_IEBODFIS) == null ? "" : tblDat.getValueAt(i, INT_TBL_IEBODFIS).toString());
                            String strEstSer = (tblDat.getValueAt(i, INT_TBL_ITMSER) == null ? "" : tblDat.getValueAt(i, INT_TBL_ITMSER).toString());
                            if ((strEst.equals("N")) && (strEstSer.equals("N"))) {
                                strConfInv = "P";
                            }
                        }
                    }
                    if (strConfInv.equals("P")) {
                        if (strMerIngEgr.equals("N")) {
                            strConfInv = "F";
                        }
                    }
                    // José Marín M 23/May/2014 CORRECCION FACTURACION
                    System.out.println("INSERTAR FACTURA..... >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ");
                    if (insertarFactura(conIns, intTipDoc, intCodDoc, strConfInv, strMerIngEgr, strTipIngEgr, intTipDocGuia, intCodDocGuia, intReaGuiaRem, blnEstVolFacGuiImp)) {
                        
                        if(blnIsCosenco || blnIsEcuatosa ||blnIsDetopacio){  // COSENCO
                            System.out.println("Cosenco....");
                            conIns.commit();
                        }
                        else{ // NO ES COSENCO
                            if(blnSolTraInv){  // Si hay Solicitud 
                                if(ventaInmaconsa(conIns, arlDatSolTra)){
                                    if(cotizacionListaInmaconsa(conIns, intCodSeg)){
                                        if(blnIsGenOC && intCodBodPre==15){ // Codigos L INMACONSA NO GENERA LA FATURA /* JM 19/oct/2016 */
                                            if(regresaCotizacionEnProceso(conIns, intCodSeg)){
                                                conIns.commit();
                                                mostrarMsg("<HTML> La factura se generará de forma automática cuando se confirme el ingreso de la mercaderia solicitada.</HTML>");
                                            }
                                        }
                                        else {  
                                            if(objGenFacAut.iniciarProcesoGeneraFactura(conIns, intCodSeg)){
                                                conIns.commit();
                                                mostrarMsg("<HTML> La factura se generará en unos instantes favor revise su correo.</HTML>");
                                            }else{
                                                conIns.rollback();
                                                mostrarMsg("<HTML> La Cotización presenta problemas comunicar al Administrador del Sistema. </HTML>");
                                            }
                                        }
                                    }else{
                                        conIns.rollback();
                                        mostrarMsg("<HTML> La Cotización presenta problemas comunicar al Administrador del Sistema. </HTML>");
                                    }
                                }
                                else if(strMomGenFac.equals("F")){
                                    conIns.commit();
                                    mostrarMsg("<HTML> La factura se generará de forma automática cuando se confirme el ingreso de la mercaderia solicitada.</HTML>");
                                }
                                objGenOD.imprimirOdxEgr(conIns,arlDatSolTra,objCfgSer.getIpHost());
                            }else if(!blnSolTraInv && intCodBodPre==15 && blnIsGenOC){
                                conIns.commit();
                                mostrarMsg("<HTML> La factura se generará de forma automática cuando se confirme el ingreso de la mercaderia solicitada.</HTML>");
                            }else{
                                conIns.commit();
                                objGenOD.imprimirOdLocal(conIns, intCodEmpOD, intCodLocOD, intCodTipDocOD, intCodDocOD, objCfgSer.getIpHost());// PARA IMPRIMIR LA OD 
                            }
                        }
                        
                        conIns.setAutoCommit(true);

                         
                        verificarIngFic(conIns, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intTipDoc, intCodDoc);
                         


                         
                        asignaNumDocRel(conIns);
                         


                        if (!stbDocRelEmpRem.toString().equals("")) {
                             
                            verificarMerEnvBodCalABodQuiStd(conIns, conIns, stbDocRelEmpRem, txtCot.getText());
                             
                        }

                        stbDocRelEmpRem = null;
                        stbDocRelEmpLoc = null;

                        if(intCodBodPre==15){ // INMACONSA
                            if(strMomGenFac.equals("P") || (strMomGenFac.equals("") && blnSolTraInv==false && blnIsGenOC==false) ){  /* JoseMario 27/04/2016 TRANSFERENCIAS DE INVENTARIO */
                                asignaNumeroFac(conIns,   objZafParSis.getCodigoEmpresa(), intTipDoc, intCodDoc, intTipDocGuia, intCodDocGuia, intReaGuiaRem);
                            }
                        }
                        else{ // TODAS LAS DEMAS BODEGAS 
                            if(strMomGenFac.equals("P") || (strMomGenFac.equals("") && blnSolTraInv==false ) ){  /* JoseMario 27/04/2016 TRANSFERENCIAS DE INVENTARIO */
                                asignaNumeroFac(conIns, objZafParSis.getCodigoEmpresa(), intTipDoc, intCodDoc, intTipDocGuia, intCodDocGuia, intReaGuiaRem);
                            }
                        }
                        
                        
                        strstReg_glo = "F";
                        blnRes = true;
                    } else {
                         
                        conIns.rollback();
                    }
                    conIns.close();
                    conIns = null;
                }
            } catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }


        
        
        
        
        private boolean cotizacionListaInmaconsa(java.sql.Connection conn, int intCodSeg){
            boolean blnRes=false;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strCadena;
            try{
                if(conn!=null){
                    stmLoc=conn.createStatement();
                    strCadena="";/* LOS INGRESOS AGRUPADOS POR ITEM */
                    strCadena+=" SELECT a1.co_empRelCabCotVen, a1.co_locRelCabCotVen, a1.co_cotRelCabCotVen \n";
                    strCadena+=" FROM tbm_cabSegMovInv as a1 \n";
                    strCadena+=" WHERE a1.co_seg="+intCodSeg+" and a1.co_empRelCabCotVen IS NOT NULL \n";
                    rstLoc=stmLoc.executeQuery(strCadena);
                    if(rstLoc.next()){
                        strCadena="";
                        strCadena+=" UPDATE tbm_cabCotVen SET st_reg='L' WHERE co_emp="+rstLoc.getInt("co_empRelCabCotVen");
                        strCadena+=" AND co_loc="+rstLoc.getInt("co_locRelCabCotVen");
                        strCadena+=" AND co_cot="+rstLoc.getInt("co_cotRelCabCotVen")+";";
                        System.out.println("cotizacionListaInmaconsa: " + strCadena);
                        stmLoc.executeUpdate(strCadena);
                        blnRes=true;
                    }
                    rstLoc.close();
                    stmLoc.close();
                    rstLoc=null;
                    stmLoc=null;
                }
            }
            catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }
        
        
        private boolean regresaCotizacionEnProceso(java.sql.Connection conn, int intCodSeg){
            boolean blnRes=false;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strCadena;
            try{
                if(conn!=null){
                    stmLoc=conn.createStatement();
                    strCadena="";/* LOS INGRESOS AGRUPADOS POR ITEM */
                    strCadena+=" SELECT a1.co_empRelCabCotVen, a1.co_locRelCabCotVen, a1.co_cotRelCabCotVen \n";
                    strCadena+=" FROM tbm_cabSegMovInv as a1 \n";
                    strCadena+=" WHERE a1.co_seg="+intCodSeg+" and a1.co_empRelCabCotVen IS NOT NULL \n";
                    rstLoc=stmLoc.executeQuery(strCadena);
                    if(rstLoc.next()){
                        strCadena="";
                        strCadena+=" UPDATE tbm_cabCotVen SET st_reg='E' WHERE co_emp="+rstLoc.getInt("co_empRelCabCotVen");
                        strCadena+=" AND co_loc="+rstLoc.getInt("co_locRelCabCotVen");
                        strCadena+=" AND co_cot="+rstLoc.getInt("co_cotRelCabCotVen")+";";
                        System.out.println("regresaCotizacionEnProceso " + strCadena);
                        stmLoc.executeUpdate(strCadena);
                        blnRes=true;
                    }
                    rstLoc.close();
                    stmLoc.close();
                    rstLoc=null;
                    stmLoc=null;
                }
            }
            catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }
        
        
         
        private boolean ventaInmaconsa(java.sql.Connection conn, ArrayList arlDat){
            boolean  blnIsVentaSoloInmaconsa=true;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strCadena;
            int intCodSeg;
            try{
                if(conn!=null){
                    stmLoc=conn.createStatement();
                    strCadena="";
                    strCadena+=" SELECT co_seg ";
                    strCadena+=" FROM tbm_cabSegMovInv ";
                    strCadena+=" WHERE co_empRelCabSolTraInv="+objUti.getIntValueAt(arlDat,0,  INT_ARL_COT_VEN_COD_EMP)+" AND";  
                    strCadena+=" co_locRelCabSolTraInv="+objUti.getIntValueAt(arlDat,0, INT_ARL_COT_VEN_COD_LOC)+" AND ";
                    strCadena+=" co_tipDocRelCabSolTraInv="+objUti.getIntValueAt(arlDat,0, INT_ARL_COT_VEN_COD_TIP_DOC)+" AND ";
                    strCadena+=" co_docRelCabSolTraInv="+objUti.getIntValueAt(arlDat,0, INT_ARL_COT_VEN_COD_DOC)+" ; ";
                    rstLoc=stmLoc.executeQuery(strCadena);
                    if(rstLoc.next()){
                        intCodSeg=rstLoc.getInt("co_seg");
                        strCadena="";/* LOS INGRESOS AGRUPADOS POR ITEM */
                        strCadena+=" SELECT a2.co_emp, a2.co_loc, a2.co_tipDoc, a2.co_doc,a2.co_bodDes, a2.co_bodOrg   \n";
                        strCadena+=" FROM tbm_cabSegMovInv as a1 \n";
                        strCadena+=" INNER JOIN tbm_cabSolTraInv as a2 ON (a1.co_empRelCabSolTraInv=a2.co_emp AND a1.co_locRelCabSolTraInv=a2.co_loc AND   \n";
                        strCadena+="                                       a1.co_tipDocRelCabSolTraInv=a2.co_tipDoc AND a1.co_docRelCabSolTraInv=a2.co_doc)  /*EL INGRESO */ \n";
                        strCadena+=" WHERE a1.co_seg="+intCodSeg+" and co_empRelCabSolTraInv IS NOT NULL \n";
                        System.out.println("Inmaconsa?? " + strCadena);
                        rstLoc=stmLoc.executeQuery(strCadena);
                        while(rstLoc.next()){
                            if(rstLoc.getInt("co_bodDes")!=rstLoc.getInt("co_bodOrg")){
                                blnIsVentaSoloInmaconsa=false;
                            }
                        }

                    }
                    rstLoc.close();
                    stmLoc.close();
                    rstLoc=null;
                    stmLoc=null;
                }
            }
            catch (SQLException Evt) {
                blnIsVentaSoloInmaconsa = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnIsVentaSoloInmaconsa = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnIsVentaSoloInmaconsa;
        }
        
        
        
        
        /**
         * Verifica mercaderia que se envia de bodega a califormia a bodega
         * quito o bodega santo domingo.
         *
         * @param connLoc
         * @param connRem
         * @param stbDocRelSec
         * @return
         */
        private boolean verificarMerEnvBodCalABodQuiStd(java.sql.Connection connLoc, java.sql.Connection connRem, StringBuffer stbDocRelSec, String strNumCot) {
            boolean blnRes = false;
            java.sql.ResultSet rstLoc, rstLoc01;
            java.sql.Statement stmLoc, stmLoc01;
            String strSql = "";
            String strMensCorEle = "";
            String strCorEle1 = "";
            String strCorEle2 = "";
            String strCorEle3;

            int intEstEnvCorEle = 0;
            try {               
                if (connRem != null) {
                    stmLoc = connLoc.createStatement();
                    stmLoc01 = connLoc.createStatement();

                    strMensCorEle += "<br> LA SIGUIENTE COTIZACION # " + strNumCot + " GENERA EL SIGUIENTE PEDIDO ";

                    strCorEle1 = "gerencia_ventas@castek.ec";
                    strCorEle2 = "bodegacastekquito@castek.ec";
                    strCorEle3 = "administracion@castek.ec";

                    strSql = "SELECT  co_bod,  tx_nom  FROM ( "
                            + " SELECT x.*, a.nd_can, a2.co_bod, a2.tx_nom  FROM( " + stbDocRelSec.toString() + " ) AS x "
                            + " inner join tbm_detmovinv as a on (a.co_emp=x.coemp and a.co_loc = x.coloc and a.co_tipdoc=x.cotipdoc and a.co_doc=x.codoc ) "
                            + " inner join tbr_bodempbodgrp as a1 on (a1.co_emp=a.co_emp and a1.co_bod = a.co_bod ) "
                            + "  inner join tbm_bod as a2 on (a2.co_emp=a1.co_empgrp and a2.co_bod = a1.co_bodgrp ) "
                            + " ) as  x where  nd_can > 0  and  co_bod in ( 3, 11 )   group by co_bod,  tx_nom  ";
                    rstLoc = stmLoc.executeQuery(strSql);
                    while (rstLoc.next()) {

                        strMensCorEle += "<br> " + rstLoc.getString("tx_nom") + "  REALIZA EL PEDIDO A: <br><br> <TABLE> ";

                        strSql = "SELECT  sum(abs(nd_can)) as canped, tx_codalt, tx_nomitm,  co_bod, tx_nom   FROM ( "
                                + " SELECT a.nd_can, a.tx_codalt, a.tx_nomitm,  a2.co_bod, a2.tx_nom  FROM( " + stbDocRelSec.toString() + " ) AS x "
                                + " inner join tbm_detmovinv as a on (a.co_emp=x.coemp and a.co_loc = x.coloc and a.co_tipdoc=x.cotipdoc and a.co_doc=x.codoc ) "
                                + " inner join tbr_bodempbodgrp as a1 on (a1.co_emp=a.co_emp and a1.co_bod = a.co_bod ) "
                                + "  inner join tbm_bod as a2 on (a2.co_emp=a1.co_empgrp and a2.co_bod = a1.co_bodgrp ) "
                                + " ) as  x where  nd_can < 0   and   co_bod !=  " + rstLoc.getInt("co_bod") + "   group by tx_codalt, tx_nomitm,  co_bod, tx_nom  ";
                        rstLoc01 = stmLoc01.executeQuery(strSql);
                        while (rstLoc01.next()) {

                            strMensCorEle += "<TR><td>      " + rstLoc01.getString("tx_nom") + " </td><td>  " + rstLoc01.getString("tx_codalt") + " </td><td>  " + rstLoc01.getString("tx_nomitm") + "  </td><td>  " + rstLoc01.getString("canped") + " </td></tr> ";
                            intEstEnvCorEle = 1;

                        }
                        rstLoc01.close();
                        rstLoc01 = null;
                        strMensCorEle += "</table> ";

                    }
                    rstLoc.close();
                    rstLoc = null;

                    if (intEstEnvCorEle == 1) {
                        objCorEle = new ZafCorEle(objZafParSis); 
                        objCorEle.enviarCorreoMasivo(strCorEle1, "ZafVen01: ", strMensCorEle); 
                        objCorEle.enviarCorreoMasivo(strCorEle3, "ZafVen01: ", strMensCorEle); 

                        if (objZafParSis.getCodigoEmpresa() == 2) {
                            if (objZafParSis.getCodigoLocal() == 1) {
                                objCorEle.enviarCorreoMasivo(strCorEle2, "ZafVen01: ", strMensCorEle); 
                            }
                        }
                        objCorEle = null;
                    }
                    stmLoc.close();
                    stmLoc = null;
                    stmLoc01.close();
                    stmLoc01 = null;
                    blnRes = true;

                }
            } catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }

        private boolean asignaNumDocRel(java.sql.Connection connRem) {
            boolean blnRes = false;
            java.sql.ResultSet rstLoc;
            java.sql.Statement stmLoc;
            String strSql = "", strSqlAux = "";
            int intDatCom = 0;
            int intDatVen = 0;
            int intRegSec = 0;
            try {
                //  System.out.println("ZafVen01.asignaNumDocRel");

                if (connRem != null) {
                    stmLoc = connRem.createStatement();
                    StringBuffer stbDatCom = new StringBuffer();
                    StringBuffer stbDatVen = new StringBuffer();

                    if ((!stbDocRelEmpRem.toString().equals(""))) {

                        strSql = "SELECT coemp, coloc, cotipdoc, codoc, tx_codalt,  nd_can, st_meringegrfisbod , a2.ne_numdoc FROM( "
                                + " " + stbDocRelEmpRem.toString() + " "
                                + "  ) AS a "
                                + " inner join tbm_detmovinv as a1 on ( a1.co_emp=a.coemp and a1.co_loc=a.coloc and a1.co_tipdoc=a.cotipdoc and a1.co_doc=a.codoc ) "
                                + " inner join tbm_cabmovinv as a2 on ( a2.co_emp=a1.co_emp and a2.co_loc=a1.co_loc and a2.co_tipdoc=a1.co_tipdoc and a2.co_doc=a1.co_doc ) "
                                + " where a1.nd_can > 0  and st_meringegrfisbod='S' "; //ORDER BY COTIPDOC,  tx_codalt,  abs(nd_can) ";

                        // System.out.println(" arma 1 --> "+ strSql );

                        rstLoc = stmLoc.executeQuery(strSql);
                        while (rstLoc.next()) {
                            intRegSec++;
                            if (intDatCom == 1) {
                                stbDatCom.append(" UNION ALL ");
                            }
                            stbDatCom.append("SELECT " + intRegSec + " AS regsec,  " + rstLoc.getInt("coemp") + " AS coemp, " + rstLoc.getInt("coloc") + " AS coloc, " + rstLoc.getInt("cotipdoc") + " AS cotipdoc, "
                                    + " " + rstLoc.getInt("codoc") + " AS codoc, '" + rstLoc.getString("tx_codalt") + "' AS tx_codalt, " + rstLoc.getString("nd_can") + " AS nd_can,  " + rstLoc.getString("ne_numdoc") + " AS ne_numdoc  ");
                            intDatCom = 1;
                        }
                        rstLoc.close();
                        rstLoc = null;

                        intRegSec = 0;
                        strSql = "SELECT coemp, coloc, cotipdoc, codoc, tx_codalt,  nd_can, st_meringegrfisbod , a2.ne_numdoc FROM( "
                                + " " + stbDocRelEmpRem.toString() + " "
                                + "  ) AS a "
                                + " inner join tbm_detmovinv as a1 on ( a1.co_emp=a.coemp and a1.co_loc=a.coloc and a1.co_tipdoc=a.cotipdoc and a1.co_doc=a.codoc ) "
                                + " inner join tbm_cabmovinv as a2 on ( a2.co_emp=a1.co_emp and a2.co_loc=a1.co_loc and a2.co_tipdoc=a1.co_tipdoc and a2.co_doc=a1.co_doc ) "
                                + " where a1.nd_can < 0  and st_meringegrfisbod='S' "; //ORDER BY coemp, tx_codalt, abs(nd_can) ";

                        // System.out.println(" arma 2 --> "+ strSql );

                        rstLoc = stmLoc.executeQuery(strSql);
                        while (rstLoc.next()) {
                            intRegSec++;
                            if (intDatVen == 1) {
                                stbDatVen.append(" UNION ALL ");
                            }
                            stbDatVen.append("SELECT " + intRegSec + " AS regsec1,  " + rstLoc.getInt("coemp") + " AS coemp1, " + rstLoc.getInt("coloc") + " AS coloc1, " + rstLoc.getInt("cotipdoc") + " AS cotipdoc1, "
                                    + " " + rstLoc.getInt("codoc") + " AS codoc1, '" + rstLoc.getString("tx_codalt") + "' AS tx_codalt1, " + rstLoc.getString("nd_can") + " AS nd_can1,  " + rstLoc.getString("ne_numdoc") + " AS ne_numdoc1  ");
                            intDatVen = 1;
                        }
                        rstLoc.close();
                        rstLoc = null;


                        if ((intDatCom == 1) && (intDatVen == 1)) {

                            strSqlAux = "SELECT * FROM ( "
                                    + " SELECT * FROM ( " + stbDatCom.toString() + " ) AS x "
                                    + " LEFT JOIN ( " + stbDatVen.toString() + " ) AS x1 ON(x1.regsec1=x.regsec) "
                                    + " ) AS x  ";

                            strSql = "SELECT coemp, coloc, cotipdoc, codoc, ( a.tx_descor || '-' || ne_numdoc ) as numdoc, coemp1, coloc1, cotipdoc1, codoc1, ( a1.tx_descor || '-' || ne_numdoc1 ) as numdoc1 FROM ( "
                                    + " " + strSqlAux + " ) AS x  "
                                    + " INNER JOIN tbm_cabtipdoc AS a on(a.co_emp=x.coemp and a.co_loc=x.coloc and a.co_tipdoc=x.cotipdoc) "
                                    + " INNER JOIN tbm_cabtipdoc AS a1 on(a1.co_emp=x.coemp1 and a1.co_loc=x.coloc1 and a1.co_tipdoc=x.cotipdoc1) ";

                            //    System.out.println(" asigna documento relacional--> "+ strSql );

                            rstLoc = stmLoc.executeQuery(strSql);
                            strSql = "";
                            while (rstLoc.next()) {

                                strSql += " UPDATE tbm_cabmovinv SET tx_numped='" + rstLoc.getString("numdoc1") + "' WHERE co_emp=" + rstLoc.getInt("coemp") + " "
                                        + " AND co_loc=" + rstLoc.getInt("coloc") + " AND co_tipdoc=" + rstLoc.getInt("cotipdoc") + " AND co_doc=" + rstLoc.getInt("codoc") + " ;  ";
                                strSql += " UPDATE tbm_cabmovinv SET tx_numped='" + rstLoc.getString("numdoc") + "' WHERE co_emp=" + rstLoc.getInt("coemp1") + " "
                                        + " AND co_loc=" + rstLoc.getInt("coloc1") + " AND co_tipdoc=" + rstLoc.getInt("cotipdoc1") + " AND co_doc=" + rstLoc.getInt("codoc1") + " ;  ";

                            }
                            rstLoc.close();
                            rstLoc = null;
                            stmLoc.executeUpdate(strSql);

                        }

                    }
                    stbDatCom = null;
                    stbDatVen = null;
                    stmLoc.close();
                    stmLoc = null;

                }
            } catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }

        private boolean asignaSecEmpGrp(java.sql.Connection connLoc, java.sql.Connection connRem, StringBuffer stbDocRelSec) {
            boolean blnRes = false;
            java.sql.ResultSet rstLoc;
            java.sql.Statement stmLoc, stmLoc01;
            String strSql = "";
            int intSecEmp = 0, intSecGrp = 0;
            try {
                //    System.out.println("ZafVen01.asignaSecEmpGrp");

                if (connRem != null) {
                    stmLoc = connLoc.createStatement();
                    stmLoc01 = connLoc.createStatement();
                    strSql = "SELECT * FROM( " + stbDocRelSec.toString() + " ) AS x";

                    rstLoc = stmLoc.executeQuery(strSql);
                    while (rstLoc.next()) {

                        intSecEmp = objUltDocPrint.getNumSecDoc(connRem, rstLoc.getInt("coemp"));
                        intSecGrp = objUltDocPrint.getNumSecDoc(connRem, objZafParSis.getCodigoEmpresaGrupo());

                        strSql = "UPDATE tbm_cabmovinv SET ne_SecEmp=" + intSecEmp + ", ne_SecGrp=" + intSecGrp + " WHERE co_emp=" + rstLoc.getInt("coemp") + " AND co_loc=" + rstLoc.getInt("coloc") + " "
                                + " AND co_tipdoc=" + rstLoc.getInt("cotipdoc") + " AND  co_doc=" + rstLoc.getInt("codoc") + "";

                        //       System.out.println("ZafVen01.asignaSecEmpGrp: " + strSql);

                        stmLoc01.executeUpdate(strSql);



                    }
                    rstLoc.close();
                    rstLoc = null;

                    stmLoc.close();
                    stmLoc = null;
                    stmLoc01.close();
                    stmLoc01 = null;

                }
            } catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }
         
        
        
        
        public boolean asignaNumeroFac(java.sql.Connection conIns, int intCodEmp, int intCodTipDocFacEle, int intCodDoc, int intTipDocGuia, int intCodDocGuia, int intReaGuiaRem) 
        {
            boolean blnRes = false;
            java.sql.Statement stmLoc;
            String strSql = "", strMsg = "";
            String strDatdocoriguirem = "";
            String strSqlIns = "";
            
            int intImpGuia = 0;
            try 
            {
                if (conIns != null){
                    stmLoc = conIns.createStatement();
                    if (intCodTipDocFacEle == 1) // FACVEN José Marín M. 24/Oct/2014 
                    { 
                        strMsg = "La factura se grabo correctamente   \n   Desea Imprimir la Factura   ";
                        if (JOptionPane.showConfirmDialog(jfrThis, strMsg, strTit, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == 0) 
                        {
                             
                            if (impGuiaRem(conIns, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intTipDocGuia, intCodDocGuia)) {
                                intImpGuia = 1;
                            }
                            strSql = "";
                            if (intReaGuiaRem == 0) {
                                String strDatAct = " ,st_aut='P' ";
                                if (intImpGuia == 0) {
                                    // strDatAct = " ,st_aut=null ,st_imp='S',  ne_numdoc="+intNumDocGuia+" ";
                                    strDatAct = " ,st_aut=null ,st_imp='N',  ne_numdoc=0 ";
                                }
                                strSqlIns += " UPDATE tbm_cabguirem SET fe_doc=current_date,  tx_datdocoriguirem='" + strDatdocoriguirem + "' " + strDatAct + "  WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " "
                                        + " and co_loc=" + objZafParSis.getCodigoLocal() + " and co_tipdoc=" + intTipDocGuia + " and co_doc=" + intCodDocGuia;
                            }
                             
//                            stmLoc = conIns.createStatement();
                            stmLoc.executeUpdate(strSqlIns);
//                            stmLoc.close();
//                            stmLoc = null;
                            impresionFactura(conIns, intTipDoc, intCodDoc);
                            //impresionFactura(intTipRptVta, intTipDoc, intCodDoc );
                            if (intReaGuiaRem == 0) {
                                if (intImpGuia == 0) {
                                }
                            }
                             
                            strMsg = "La factura se le asigno el siguiente numero : " + intNumFacElec;
                            this.mostrarMsg(strMsg);
                        } 
                        else 
                        {
                            this.mostrarMsg("La factura se grabo correctamente.");
                        }
                    } ////////////////// FIN FACVEN
                    else if (intCodTipDocFacEle == 228) // FACVENE José Marín M. 24/Oct/2014 
                    {
                        if (impGuiaRem(conIns, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intTipDocGuia, intCodDocGuia)) {
                            intImpGuia = 1;
                        }
                       
                        if (intReaGuiaRem == 0) {
                            String strDatAct = " ,st_aut='P' ";
                            if (intImpGuia == 0) {
                                strDatAct = " ,st_aut=null ,st_imp='N',  ne_numdoc=0 ";
                            }
                            strSqlIns += "; UPDATE tbm_cabguirem SET fe_doc=current_date,  tx_datdocoriguirem='" + strDatdocoriguirem + "' " + strDatAct + "  WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " "
                                    + " and co_loc=" + objZafParSis.getCodigoLocal() + " and co_tipdoc=" + intTipDocGuia + " and co_doc=" + intCodDocGuia;
                        }
                         
//                        stmLoc = conIns.createStatement();
                        stmLoc.executeUpdate(strSqlIns);
//                        stmLoc.close();
//                        stmLoc = null;
                         
                        strMsg = "La factura se le asigno el siguiente numero : " + intNumFacElec;
                        this.mostrarMsg(strMsg);
                        
                    }
                    stmLoc.close();
                    stmLoc = null;
                    blnRes = true;
                }
            } catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }


        /**
         * verifica si hay itme de servicio
         *
         * @return true si hay itmes de servicio false no hay
         */
        private boolean _getHayItmSer() {
            boolean blnRes = false;
            try {
                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                        /**
                         * ********* VERFIFICA SI EL ITEM ES DE SERVICIO  ***********************
                         */
                        if (tblDat.getValueAt(i, INT_TBL_ITMSER).toString().trim().equalsIgnoreCase("S")) { // es de servicio.
                            blnRes = true;
                            break;
                        }
                    }
                }
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }

        private boolean impGuiaRem(java.sql.Connection conn, int intCodEmp, int intCodLoc, int intCodTipDocGuiRem, int intCodDoc) {
            boolean blnRes = false;

            if (_getVerificarPagCont(conn, intCodEmp, intCodLoc, intCodTipDocGuiRem, intCodDoc)) {
                // objlbl.setText("Pago Pendiente (Venta de Contado )");
                blnRes = true;
            } else if (_getVerificarPagChq(conn, intCodEmp, intCodLoc, intCodTipDocGuiRem, intCodDoc)) {
                // objlbl.setText("Cheque Pendiente (Cheque a Fecha )");
                blnRes = true;
            }
            return blnRes;
        }

        private boolean _getVerificarPagCont(java.sql.Connection conn, int intCodEmp, int intCodLoc, int intCodTipDocGuiRem, int intCodDoc) {
            boolean blnRes = false;
            String strSql = "";
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            try {
                // System.out.println("ZafVen01._getVerificarPagCont");

                if (conn != null) {
                    stmLoc = conn.createStatement();

                    strSql = "select  a1.co_doc from ( "
                            + " select co_emprel, co_locrel, co_tipdocrel, co_docrel  from tbm_detguirem "
                            + " where  co_emp=" + intCodEmp + " and co_loc=" + intCodLoc + " and co_tipdoc=" + intCodTipDocGuiRem + " and co_doc=" + intCodDoc + "  "
                            + " group by co_emprel, co_locrel, co_tipdocrel, co_docrel  "
                            + " ) as a "
                            + " inner join tbm_pagmovinv as a1 on (a1.co_emp=a.co_emprel and a1.co_loc=a.co_locrel and a1.co_tipdoc=a.co_tipdocrel and a1.co_doc=a.co_docrel) "
                            + " WHERE a1.st_reg in ('A','C') "
                            + " AND (a1.nd_porret=0 or a1.nd_porret is null ) and (a1.ne_diacre=0 or a1.ne_diacre is null)  AND (a1.nd_abo+a1.mo_pag) < 0  ";
                    rstLoc = stmLoc.executeQuery(strSql);
                    if (rstLoc.next()) {
                        blnRes = true;
                    }
                    rstLoc.close();
                    rstLoc = null;
                    stmLoc.close();
                    stmLoc = null;
                }
            } catch (java.sql.SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }

        private boolean _getVerificarPagChq(java.sql.Connection conn, int intCodEmp, int intCodLoc, int intCodTipDocGuiRem, int intCodDoc) {
            boolean blnRes = false;
            String strSql = "";
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            try {
                if (conn != null) {
                    stmLoc = conn.createStatement();
                    strSql = "select  a1.co_doc from ( "
                            + " select co_emprel, co_locrel, co_tipdocrel, co_docrel  from tbm_detguirem "
                            + " where  co_emp=" + intCodEmp + " and co_loc=" + intCodLoc + " and co_tipdoc=" + intCodTipDocGuiRem + " and co_doc=" + intCodDoc + "  "
                            + " group by co_emprel, co_locrel, co_tipdocrel, co_docrel  "
                            + " ) as a "
                            + " inner join tbm_cabmovinv as a1 on (a1.co_emp=a.co_emprel and a1.co_loc=a.co_locrel and a1.co_tipdoc=a.co_tipdocrel and a1.co_doc=a.co_docrel) "
                            + " INNER JOIN tbm_pagMovInv AS a2 ON (a2.co_emp=a1.co_emp AND a2.co_loc=a1.co_loc AND a2.co_tipDoc=a1.co_tipDoc AND a2.co_doc=a1.co_doc) "
                            + " INNER JOIN tbm_cli AS cli ON (cli.co_emp=a1.co_emp and cli.co_cli=a1.co_cli)  "
                            + " WHERE a1.st_reg NOT IN ('I','E') AND a2.st_reg IN ('A','C') AND a2.st_sop='S' "
                            + " AND CASE WHEN (a2.mo_pag+a2.nd_abo) < 0 THEN  a2.st_entsop='N' END  AND a1.fe_doc+cli.ne_diagrachqfec <= " + objZafParSis.getFuncionFechaHoraBaseDatos() + " ";
                    rstLoc = stmLoc.executeQuery(strSql);
                    if (rstLoc.next()) {
                        blnRes = true;
                    }
                    rstLoc.close();
                    rstLoc = null;
                    stmLoc.close();
                    stmLoc = null;
                }
            } catch (java.sql.SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }

        public boolean asignaNumeroOc(java.sql.Connection conIns, int intCodTipDocFacEle, int intCodDoc) 
        {
            boolean blnRes = false;
            java.sql.Statement stmLoc, stmLoc01;
            java.sql.ResultSet rstLoc, rstLoc01;
            String strSql = "", strMsg = "";
            int intNumDoc = 0;
            try 
            {
                if (conIns != null) 
                {
                    stmLoc = conIns.createStatement();
                    stmLoc01 = conIns.createStatement();
                    strSql = "SELECT a.co_locrel, a.co_tipdocrel, a.co_docrel FROM tbr_cabmovinv AS a"
                            + " LEFT JOIN tbm_cabmovinv AS a1 on (a1.co_emp=a.co_emprel and a1.co_loc=a.co_locrel and a1.co_tipdoc=a.co_tipdocrel and a1.co_doc=a.co_docrel) "
                            + " WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " "
                            + " AND a.co_loc=" + objZafParSis.getCodigoLocal() + " AND a.co_tipdoc=" + intCodTipDocFacEle + " "
                            + " AND a.co_doc=" + intCodDoc + " AND a.co_emprel=" + objZafParSis.getCodigoEmpresa() + " AND a.co_tipdocrel=2 "
                            + " and ( a1.ne_numdoc is null or  a1.ne_numdoc <= 0 ) ";
                    rstLoc = stmLoc.executeQuery(strSql);
                    while (rstLoc.next()){
                        strSql = "SELECT CASE WHEN (ne_ultDoc+1) IS NULL THEN 1 ELSE (ne_ultDoc+1) END AS ultnum, st_predoc FROM tbm_cabTipDoc WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " "
                               + " AND co_loc=" + rstLoc.getString("co_locrel") + " AND co_tipDoc=" + rstLoc.getString("co_tipdocrel");
                        rstLoc01 = stmLoc01.executeQuery(strSql);
                        if (rstLoc01.next())
                        {
                            intNumDoc = rstLoc01.getInt("ultnum");
                        }
                        rstLoc01.close();
                        rstLoc01 = null;

                        String strOsb = "FacCli.Cod.Doc# " + intCodDoc + " CLIENTE: " + txtCliNom.getText();

                        strSql = "UPDATE tbm_cabTipDoc SET ne_ultDoc=" + intNumDoc + " WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " "
                                + " AND co_loc=" + rstLoc.getString("co_locrel") + " AND co_tipDoc=" + rstLoc.getString("co_tipdocrel");
                        strSql += ";UPDATE tbm_cabmovinv SET ne_numdoc=" + intNumDoc + ", st_reg='A'"
                                + " , tx_obs2= '" + strOsb + "' "
                                + " WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " "
                                + " AND co_loc=" + rstLoc.getString("co_locrel") + " AND co_tipdoc=" + rstLoc.getString("co_tipdocrel") + " AND co_doc=" + rstLoc.getString("co_docrel");

                        strSql += " ; UPDATE tbm_cabdia SET tx_numdia='" + intNumDoc + "' "
                                + " WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " "
                                + " AND co_loc=" + rstLoc.getString("co_locrel") + " AND co_tipdoc=" + rstLoc.getString("co_tipdocrel") + " AND co_dia=" + rstLoc.getString("co_docrel");

                        stmLoc01.executeUpdate(strSql);

                        strMsg = "Imprima\n la orden de compra numero : " + intNumDoc;
                        this.mostrarMsg(strMsg);
                        imprimeOrdCom(conIns, rstLoc.getString("co_locrel"), rstLoc.getString("co_tipdocrel"), rstLoc.getString("co_docrel"));
                    }
                    rstLoc.close();
                    rstLoc = null;

                    stmLoc.close();
                    stmLoc = null;
                    stmLoc01.close();
                    stmLoc01 = null;
                    blnRes = true;
                }
            } catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }
 
        private boolean verificarIngFic(java.sql.Connection conn, int intCodEmp, int intCodLoc, int intCodTipDocFacEle, int intCodDoc) {
            boolean blnRes = false;
            java.sql.Statement stmLoc, stmLoc01, stmLoc02;
            java.sql.ResultSet rstLoc, rstLoc01;
            String strSql = "";

            try {
                 if (conn != null) {
                    stmLoc = conn.createStatement();
                    stmLoc01 = conn.createStatement();
                    stmLoc02 = conn.createStatement();

                    strSql = "select  co_emprel,  co_itm,  nd_can, co_reg   from tbm_detguirem "
                            + " where co_emprel=" + intCodEmp + " and co_locrel=" + intCodLoc + " and co_tipdocrel=" + intCodTipDocFacEle + " and co_docrel= " + intCodDoc + " ";
                    rstLoc = stmLoc.executeQuery(strSql);
                    while (rstLoc.next()) {
 
                        strSql = "select *, ( stk - caning ) as dif  from ( "
                                + "  select   sum(a1.nd_canDis) as stk , sum(a1.nd_caningbod) as caning from  ( "
                                + "  select a1.*  from tbm_equinv as a  "
                                + "  inner join tbm_equinv as a1 on (a1.co_itmmae=a.co_itmmae )  "
                                + "  where a.co_emp=" + rstLoc.getInt("co_emprel") + " and a.co_itm = " + rstLoc.getInt("co_itm") + "  and a1.co_emp not in ( 0, 3 )  "
                                + "  ) as a "
                                + "  inner join tbm_invbod as a1 on (a1.co_emp=a.co_emp and a1.co_itm=a.co_itm) "
                                + "  inner join tbr_bodEmpBodGrp as a2 on (a2.co_emp=a1.co_emp and a2.co_bod=a1.co_bod) "
                                + "  WHERE ( a2.co_empGrp= 0 AND a2.co_bodGrp in ( "
                                + "      select  co_bodgrp  from tbr_bodEmpBodGrp where co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_bod=" + intCodBodPre + " and co_empgrp=0 AND a2.co_emp=co_emp AND a2.co_bod=co_bod ) )  "
                                + "  ) as x  ";
                         
                        rstLoc01 = stmLoc01.executeQuery(strSql);
                        while (rstLoc01.next()) {

                            if (rstLoc.getDouble("nd_can") > rstLoc01.getDouble("dif")) {
                                strSql = "UPDATE tbm_detguirem SET tx_obs1= ( text('** ')  ||  tx_obs1  ) "
                                        + " where co_emprel=" + intCodEmp + " and co_locrel=" + intCodLoc + " and co_tipdocrel=" + intCodTipDocFacEle + " and co_docrel= " + intCodDoc + " "
                                        + "  and co_reg=" + rstLoc.getInt("co_reg") + " ";
                                stmLoc02.executeUpdate(strSql);
                            }

                        }
                        rstLoc01.close();
                        rstLoc01 = null;

                    }
                    rstLoc.close();
                    rstLoc = null;

                    stmLoc.close();
                    stmLoc = null;
                    stmLoc01.close();
                    stmLoc01 = null;
                    stmLoc02.close();
                    stmLoc02 = null;

                    blnRes = true;

                }
            } catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }
        
        /* FacturarJota */
        Librerias.ZafGenDocCobAut.ZafGenDocCobAut objGenDocCobAut;
        private java.awt.Frame Frame;
        public boolean insertarFactura(java.sql.Connection conIns, int intCodTipDocFacEle, int intCodDoc, String strConfInv, String strMerIngEgr, String strTipIngEgr, int intTipDocGuia, int intCodDocGuia, int intReaGuiaRem, boolean blnEstVolFacGuiImp) {
            boolean blnRes = false;
            int intNumCot=Integer.parseInt(txtCot.getText());
            try {
                boolean blnIsCosenco, blnIsEcuatosa, blnIsDetopacio;
                if (conIns != null) {
                    blnIsCosenco = (objZafParSis.getNombreEmpresa().toUpperCase().indexOf("COSENCO") > -1)?true:false;
                    blnIsEcuatosa = (objZafParSis.getNombreEmpresa().toUpperCase().indexOf("ECUATOSA") > -1)?true:false;
                    blnIsDetopacio = (objZafParSis.getNombreEmpresa().toUpperCase().indexOf("DETOPACIO") > -1)?true:false;
                    dblPorIva = bldivaEmp;
                    ZafVen01_08 obj = new ZafVen01_08(objZafParSis);
                    if(insertaCotizacionTablaSeguimientoTransferenciaInventario(conIns, intNumCot )){
                        if (realizaComVenCompAut(conIns, intTipDoc, intCodDoc)) {  //NUEVA FORMA!!!  COMPRA Y VENTA ENTRE COMPAÑIAS
                            if(isSolTraInv(conIns)){
                                if(realizaOrdComAut(conIns, intTipDoc, intCodDoc)) {
                                    if(modificaDetalleCotizacionCantidadesLocalesRemotas(conIns, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intNumCot)){
                                        if(blnSolTraInv && strMomGenFac.equals("F") || (blnIsGenOC && intCodBodPre==15) ){  //Nuevo esquema // POSEE SOLICITUD Y LA FACTURA AL FINAL
                                            if(cambiarEstadoCotizacionEnProceso(conIns, intNumCot)){
                                                blnRes = true;  /* NUEVO ESQUEMA DE FACTURACION - TRANSFERENCIAS DE INVENTARIO */
                                            }
                                        }
                                        else if( ((blnSolTraInv==true && strMomGenFac.equals("P")) || (blnSolTraInv==false)) ){ // no hay solicitud normal
                                            if (insertarCabFac(conIns, intTipDoc, intCodDoc, strConfInv, intTipDocGuia, intCodDocGuia, intReaGuiaRem)) {
                                                if (insertarDetFac(conIns, intTipDoc, intCodDoc, strMerIngEgr, intTipDocGuia, intCodDocGuia, intReaGuiaRem, blnEstVolFacGuiImp)) {
                                                        if (insertarPagFac(conIns, intTipDoc, intCodDoc)) {
                                                            if (insertarDiario(conIns,  intTipDoc, intCodDoc)) {
                                                                if (actualizaStock(conIns,  strMerIngEgr, strTipIngEgr)) {
                                                                    if (obj.getActualizarSolDevVen(conIns, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intNumCot)) {
                                                                        if (objInvItm._getExiItmSer(conIns, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intTipDoc, intCodDoc)) {
                                                                            if(asignaNumeroFacNuevo(conIns, intTipDoc, intCodDoc)){
                                                                                if (intDocRelEmpLoc == 1) {
                                                                                    stbDocRelEmpLoc.append(" UNION ALL ");
                                                                                }
                                                                                stbDocRelEmpLoc.append(" SELECT " + objZafParSis.getCodigoEmpresa() + " AS COEMP, " + objZafParSis.getCodigoLocal() + " AS COLOC , " + intTipDoc + " AS COTIPDOC, " + intCodDoc + " AS CODOC ");
                                                                                intDocRelEmpLoc = 1;
                                                                                 
                                                                                if(blnSolTraInv && strMomGenFac.equals("P")){  /*SOLO CUANDO LA FACUTRA ES AL INICIO Y POSEE SOLICITUD*/
                                                                                    blnRes=false;
                                                                                     
                                                                                }else{  /*EL CASO ES NORMAL NO HAY PEDIDOS PUEDE TENER UN CODIGO L PERO NO ES INMACOSA*/
                                                                                    if(blnIsCosenco || blnIsEcuatosa ||blnIsDetopacio){  // COSENCO
                                                                                         blnRes = true;
                                                                                    }else{ // NO ES COSENCO
                                                                                        if(isRelacionOC(conIns, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intTipDoc, intCodDoc, intNumCot)){
                                                                                            if( objGenOD.generarODLocal(conIns, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intTipDoc, intCodDoc,true)){
                                                                                                intCodEmpOD=objZafParSis.getCodigoEmpresa();intCodLocOD=objZafParSis.getCodigoLocal();intCodTipDocOD=intTipDoc;intCodDocOD=intCodDoc; 
                                                                                                    if(objUti.costearDocumento(jfrThis, objZafParSis, conIns, intCodEmpOD, intCodLocOD, intCodTipDocOD, intCodDocOD)){
                                                                                                        if(revisarInvBodNegativos(conIns, intCodEmpOD, intCodLocOD, intTipDoc, intCodDoc)){
                                                                                                            if(objDatItm.preLiberarItems(conIns, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intNumCot)){
                                                                                                                blnManRes=false;
                                                                                                                blnRes = true;
                                                                                                            }else{blnRes = false; System.out.println("error preLiberarItems");}
                                                                                                        }else{System.out.println("cuadraStockSegunMovimientos Error"); blnRes=false; }
                                                                                                    }else{System.out.println("costeo Error"); blnRes=false; }
                                                                                            }else{blnRes = false;}
                                                                                        }else{blnRes = false;}
                                                                                    }
                                                                                }
                                                                            }else{blnRes = false;}
                                                                        } else {blnRes = false;}
                                                                    } else{blnRes = false;}
                                                                } else { blnRes = false;}
                                                            }else{ blnRes = false; }  
                                                        }else{blnRes = false;}
                                                }else{blnRes = false;}
                                            }else{blnRes = false;}
                                        }else{ /*inmaconsa con solicitud*/ 
                                            blnRes=true; 
                                        }
                                    }else{blnRes=false;}
                                }else{blnRes=false;}
                            }else{blnRes=false;}
                        }else{blnRes = false;}
                    }else{blnRes=false;}
                    
                    objInvItm.limpiarObjeto();

                    obj = null;
                    objTblMod.setDataModelChanged(false);
                    blnHayCam_glo = false;
                    blnHayCam_glo_tbl = false;
                    blnHayCam_Pag = false;

                }
            } 
            catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }
        
        
        
             /**
          * 
          * @param conExt
          * @param intCodEmp
          * @param intCodLoc
          * @param intCodTipDoc
          * @param intCodDoc
          * @return 
          */
    private boolean revisarInvBodNegativos(java.sql.Connection conExt,int intCodEmp, int intCodLoc, int intCodTipDoc, int intCodDoc){
        boolean blnRes=true;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;
        String strSql;
        try{
            if(conExt!=null){
                stmLoc = conExt.createStatement();
                strSql="";
                strSql+=" SELECT a1.co_emp, a1.co_bod, a1.co_itm,a1.tx_codAlt, a1.nd_can , a3.nd_stkAct, a3.nd_canDis \n";
                strSql+=" FROM tbm_detMovInv AS a1 \n";
                strSql+=" INNER JOIN tbm_inv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm) \n";
                strSql+=" INNER JOIN tbm_invBod AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_bod=a3.co_bod AND a1.co_itm=a3.co_itm) \n";
                strSql+=" WHERE a1.co_emp="+intCodEmp+" AND a1.co_loc="+intCodLoc+" AND a1.co_tipDoc="+intCodTipDoc+" AND a1.co_doc="+intCodDoc+" \n";
                strSql+="       AND a2.st_ser='N' AND (a1.tx_codAlt like '%I' OR a1.tx_codAlt like '%S') AND ( a3.nd_stkAct<0  OR a3.nd_canDis<0  ) ";
                System.out.println("revisarInvBodNegativos ::: " + strSql);
                rstLoc = stmLoc.executeQuery(strSql);
                if(rstLoc.next()){
                    objCorEle = new ZafCorEle(objZafParSis);
                    objCorEle.enviarCorreoMasivo("sistemas6@tuvalsa.com","ZafVen01: " + "NO SE GENERO... GENERARIA NEGATIVOS PILAS!!!  ",rstLoc.getString("tx_codAlt")+"  --  "+strSql );
                    blnRes=false;
                }
                rstLoc.close();
                rstLoc=null;
                stmLoc.close();
                stmLoc=null;
                objCorEle = null;
            }
        }
        catch (SQLException Evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } 
        catch (Exception Evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
         return blnRes;
    }
        
        
        
        /**
         * MODIFICAFIONES PARA RESERVAS EN LA EMPRESA
         * @param conIns
         * @param CodEmp
         * @param CodLoc
         * @param NumCot
         * @return 
         */
        
        
        private boolean modificarDatosReserva(java.sql.Connection conExt, int CodEmp, int CodLoc, int CodCot){
            boolean blnRes=true;
            try{
                if(conExt!=null){   
                    System.out.println("modificarDatosReserva... ");
                    if(objResInv.modificaCantidadesReservadasFacturadas(conExt, CodEmp, CodLoc, CodCot)){
                        System.out.println("JOTA<<< modifico factura...    de la cotizacion: " + CodCot);
                    }else{blnRes=false;}   
                }else{blnRes=false;}
            }
            catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }
        
        
        
        
        /**
         * 
         * @param conExt
         * @param CodEmp
         * @param CodLoc
         * @param CodTipDoc
         * @param CodDoc
         * @return 
         *  Modificar el documento de pago para generar el documento de cruce 
         * 
         */
        private boolean modificaPagoCompensacion(java.sql.Connection conExt,int CodEmp, int CodLoc,int CodTipDoc,int CodDoc){
             boolean blnRes=false;
            java.sql.Statement stmLoc;
            String strCadena;
            try{
                if(conExt!=null){
                    stmLoc = conExt.createStatement();
                    strCadena = "";
                    strCadena+="UPDATE tbm_pagMovInv SET nd_abo=(mo_pag*-1) WHERE co_emp="+CodEmp+" AND co_loc="+CodLoc+" AND co_tipDoc="+CodTipDoc+" AND co_doc="+CodDoc+" ";
                    strCadena+=" AND tx_tipReg='S' ";
                    stmLoc.executeUpdate(strCadena);
                    stmLoc.close();
                    stmLoc=null;
                    blnRes=true;
                }
            }
            catch(java.sql.SQLException Evt){ 
                blnRes=false; 
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            catch(Exception Evt){ 
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnRes=false;
            }
            return blnRes;
        }
        
        private boolean insertaCotizacionTablaSeguimientoTransferenciaInventario(java.sql.Connection conn, int intCodCot){
            boolean blnRes=true;
            java.sql.Statement stmLoc, stmLocIns;
            java.sql.ResultSet rstLoc;
            java.sql.Connection conLoc; // 22/Nov/2016: JM (Ingrik) Se manejara la insercion en la tabla de seguimiento directa a la base 
                                        //              Para que no hayan problemas por errores de PK repetida
            int intCodSeg=0;
            String strCadena;
            try{
                conLoc = DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());
                if(conn!=null && conLoc!=null){
                    stmLoc = conn.createStatement();
                    
                    strCadena = "";
                    strCadena+= " SELECT CASE WHEN MAX(co_seg) IS NULL THEN 1 ELSE (MAX(co_seg))+1 END AS co_seg from tbm_cabSegMovInv ";
                    rstLoc = stmLoc.executeQuery(strCadena);
                    if (rstLoc.next()) {
                        intCodSeg=rstLoc.getInt("co_seg");
                    }
                    
                    
                /* INSERCION DE SEGUIMIENTO DIRECTA A LA BASE  */
                    stmLocIns = conLoc.createStatement();
                    strCadena="";
                    strCadena+=" INSERT INTO tbm_cabSegMovInv (co_seg, co_reg) \n";
                    strCadena+=" VALUES ( "+intCodSeg+",1);";
                    System.out.println("Directo.... " + strCadena);
                    stmLocIns.executeUpdate(strCadena);
                    stmLocIns.close();
                    stmLocIns=null;
                /* INSERCION DE SEGUIMIENTO DIRECTA A LA BASE  */
                    
                    
                    strCadena="";
                    strCadena+=" UPDATE tbm_cabSegMovInv SET co_empRelCabCotVen="+objZafParSis.getCodigoEmpresa()+",co_locRelCabCotVen="+objZafParSis.getCodigoLocal();
                    strCadena+="                            ,co_cotRelCabCotVen="+intCodCot;
                    strCadena+=" WHERE co_seg="+intCodSeg+" AND co_reg=1";
                    System.out.println("Transaccion.... " + strCadena);
                    stmLoc.executeUpdate(strCadena);
                    
                    stmLoc.close();
                    rstLoc.close();
                    
                    stmLoc=null;
                    rstLoc=null;
                    
                    
                    
                }
                conLoc.close();
                conLoc=null;

            }
            catch(java.sql.SQLException Evt){ 
                blnRes=false; 
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            catch(Exception Evt){ 
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnRes=false;
            }
            return blnRes;
        }
        
         private boolean cambiarEstadoCotizacionEnProceso(java.sql.Connection conn, int intCodCot){
            boolean blnRes=true;
            java.sql.Statement stmLoc;
            String strCadena;
            try{
                if(conn!=null){
                    stmLoc = conn.createStatement();
                    strCadena = "";
                    strCadena+=" UPDATE tbm_cabCotVen SET st_reg='E' WHERE co_emp="+objZafParSis.getCodigoEmpresa()+" AND co_loc="+objZafParSis.getCodigoLocal();
                    strCadena+=" AND co_cot="+intCodCot+"; ";
                    stmLoc.executeUpdate(strCadena);
                    stmLoc.close();
                    stmLoc=null;
                }
            }
            catch(java.sql.SQLException Evt){ 
                blnRes=false; 
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            catch(Exception Evt){ 
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnRes=false;
            }
            return blnRes;
        }
        
        
        private static final int INT_ARL_COD_EMP=0;
        private static final int INT_ARL_COD_LOC=1; 
        private static final int INT_ARL_COD_TIP_DOC=2;
        private static final int INT_ARL_COD_DOC=3; 
        private static final int INT_ARL_COD_REG=4;
        private static final int INT_ARL_COD_REG_REL=5; 
        private static final int INT_ARL_COD_ITM=6;
        private static final int INT_ARL_CAN_ITM=7;
        private ArrayList arlDatIng;
        
        private boolean prepararEgreso(java.sql.Connection conn,int intCodSeg,int CodEmp, int CodLoc, int CodTipDoc, int CodDoc){
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            boolean blnRes=true;
            double dblCanEgrBod;
            String strSql;
            try{
                if(conn!=null){
                    System.out.println("MOMENTO DE GENERACIO: " + strMomGenFac);
                    stmLoc = conn.createStatement();
                    // PASO 2: OBTENER LA FACTURA CON EL DETALLE
                    // MODIFICAMOS LA FACTURA 
                    strSql="";
                    strSql+=" SELECT co_emp, co_loc, co_tipDoc, co_doc, co_reg,co_bod, co_itm, nd_can \n";
                    strSql+=" FROM tbm_detMovInv  \n";
                    strSql+=" WHERE co_emp="+CodEmp+" AND co_loc="+CodLoc+" AND co_tipDoc="+CodTipDoc+" AND co_doc="+CodDoc+" ORDER BY co_reg \n";
                    rstLoc=stmLoc.executeQuery(strSql);     
                    while(rstLoc.next()){
                        dblCanEgrBod=(rstLoc.getDouble("nd_can")*-1);
                        // SOLICITADO POR INGRIK 1 DIA ANTES DE SALIR
                        if(strMomGenFac.equals("P") && blnSolTraInv==true){  // SOLO AL INICIO 
                            arlDatStkInvItm = new ArrayList(); 
                            if(generaNuevoContenedorItemsMovimientoStock(rstLoc.getInt("co_itm"),dblCanEgrBod,bodegaPredeterminada())){
                                if(objStkInv.actualizaInventario(conn, CodEmp,INT_ARL_STK_INV_STK_ACT, "-", 0, arlDatStkInvItm)){
                                    if(objStkInv.actualizaInventario(conn, CodEmp,INT_ARL_STK_INV_CAN_DIS, "-", 0, arlDatStkInvItm) ){
                                        arlDatStkInvItm.clear();
                                    }else{blnRes=false;}
                                }else{blnRes=false;}
                            }else{blnRes=false;}
                        }
                    }
                    stmLoc.close();
                    rstLoc.close();
                    stmLoc=null;
                    rstLoc=null;
                }
            }
            catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } 
            catch (Exception Evt) {
                blnRes = false;                
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }
        
        
        
    private int bodegaPorEmpresaGrupo(int intCodEmp, int intCodBodEmp){
        int intCodBodGrp=0;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;
        java.sql.Connection conLoc;
        String strCadena; 
        try{
            conLoc=DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if(conLoc!=null){
                stmLoc=conLoc.createStatement();
                strCadena="";
                strCadena+=" SELECT co_emp, co_bod, co_empGrp, co_bodGrp  ";
                strCadena+="  FROM tbr_bodEmpBodGrp  ";
                strCadena+=" WHERE co_bod="+ intCodBodEmp ;
                strCadena+=" AND co_emp="+intCodEmp +" AND co_empGrp="+objZafParSis.getCodigoEmpresaGrupo();
                rstLoc=stmLoc.executeQuery(strCadena);
                if(rstLoc.next()){
                        intCodBodGrp=rstLoc.getInt("co_bodGrp");
                }
                rstLoc.close();
                rstLoc=null;
                stmLoc.close();
                stmLoc=null;
            }
            conLoc.close();
            conLoc=null;
        }
        catch(Exception Evt) { 
            objUti.mostrarMsgErr_F1(null, Evt);  
            System.err.println("ERROR "  + Evt.toString());
            intCodBodGrp=0;
        }  
        
        return intCodBodGrp;
    }
        
        private int intCodSegGlo;
        
        private boolean insertaFacturaPreviaSeguimiento(java.sql.Connection conn,int intCodEmp, int intCodLoc,int intCodTipDoc,int intCodDoc,int intCodCot){
            boolean blnRes = true;
            java.sql.Statement stmLoc, stmLoc01;
            java.sql.ResultSet rstLoc;    
            int intNumDoc=0,intCodSeg=0;
            String strSql;
            try{
                if (conn != null) 
                {
                    stmLoc = conn.createStatement();
                    stmLoc01 = conn.createStatement();
                    
                    strSql = " SELECT MAX(co_reg)+1 as co_reg, a1.co_seg  \n";
                    strSql+= " FROM tbm_cabSegMovInv as a1 \n";
                    strSql+= " WHERE a1.co_seg = ( \n";
                    strSql+= "     SELECT co_seg \n";
                    strSql+= "     FROM tbm_cabSegMovInv \n";
                    strSql+= "     WHERE co_empRelCabCotVen="+intCodEmp+" AND  \n";
                    strSql+= "     co_locRelCabCotVen="+intCodLoc+" AND co_cotRelCabCotVen="+intCodCot+" \n  ";
                    strSql+= " ) \n GROUP BY a1.co_seg";                        
                    rstLoc = stmLoc.executeQuery(strSql);
                    if (rstLoc.next()) {
                        intNumDoc = rstLoc.getInt("co_reg");
                        intCodSeg = rstLoc.getInt("co_seg");
                        intCodSegGlo=intCodSeg;
                        strSql=" ";
                        strSql+=" INSERT INTO tbm_cabSegMovInv (co_seg,co_reg,co_empRelCabMovInv, co_locRelCabMovInv, co_tipDocRelCabMovInv, co_docRelCabMovInv) ";
                        strSql+=" VALUES ("+intCodSeg+", "+intNumDoc+", "+intCodEmp+", "+intCodLoc+","+intCodTipDoc+","+intCodDoc+" );";
                        System.out.println("InsertarEnTablaSeguimiento: "+strSql);
                        stmLoc01.executeUpdate(strSql);
                    }
                    
                     /* INSERTAR LA FACTURA CONTRA EL INGRESO tbr_detMovInv */
                    strSql="";
                    strSql+=" INSERT INTO tbr_detMovInv(co_emp,co_loc,co_tipdoc,co_doc,co_reg,st_reg, \n";
                    strSql+="                           co_emprel,co_locrel,co_tipdocrel,co_docrel,co_regrel,st_regrep) \n";
                    strSql+=" SELECT a.co_emp,a.co_loc,a.co_tipDoc,a.co_doc,a.co_reg,'A' as st_reg,b.co_empRelCabMovInv, \n";
                    strSql+="        b.co_locRelCabMovInv,b.co_tipDocRelCabMovInv, b.co_docRelCabMovInv,b.co_regRel,'I' \n";
                    strSql+=" FROM ( \n";
                    strSql+="       SELECT a2.co_emp, a2.co_loc, a2.co_tipDoc, a2.co_doc,a3.co_reg, a3.co_itm, ABS(a3.nd_can) as nd_can \n";
                    strSql+="       FROM( \n";
                    strSql+="            SELECT co_empRelCabMovInv, co_locRelCabMovInv, co_tipDocRelCabMovInv, co_docRelCabMovInv \n";
                    strSql+="            FROM tbm_cabSegMovInv \n";
                    strSql+="            WHERE co_empRelCabMovInv="+intCodEmp+" AND co_locRelCabMovInv="+intCodLoc+" AND \n";
                    strSql+="                  co_tipDocRelCabMovInv="+intCodTipDoc+" AND co_docRelCabMovInv="+intCodDoc+" \n";
                    strSql+="       ) as a1  \n";
                    strSql+="       INNER JOIN tbm_cabMovInv as a2 ON (a1.co_empRelCabMovInv=a2.co_emp AND a1.co_locRelCabMovInv=a2.co_loc AND  \n";
                    strSql+="                                          a1.co_tipDocRelCabMovInv=a2.co_tipDoc AND a1.co_docRelCabMovInv=a2.co_doc ) \n";
                    strSql+="       INNER JOIN tbm_detMovInv as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc AND a2.co_doc=a3.co_doc) \n";
                    strSql+=" ) as a \n";
                    strSql+=" INNER JOIN ( \n";
                    strSql+="   SELECT a1.co_empRelCabMovInv, a1.co_locRelCabMovInv, a1.co_tipDocRelCabMovInv, \n";
                    strSql+="          a1.co_docRelCabMovInv,a3.co_reg as co_regRel, a2.co_cli, a3.co_itm, a3.nd_can \n";
                    strSql+="   FROM tbm_cabSegMovInv as a1 \n";
                    strSql+="   INNER JOIN tbm_cabMovInv as a2 ON (a1.co_empRelCabMovInv=a2.co_emp AND a1.co_locRelCabMovInv=a2.co_loc AND  \n";
                    strSql+="                                      a1.co_tipDocRelCabMovInv=a2.co_tipDoc AND a1.co_docRelCabMovInv=a2.co_doc) \n";
                    strSql+="   INNER JOIN tbm_detMovInv as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc AND a2.co_doc=a3.co_doc) \n";
                    strSql+="   RIGHT JOIN tbr_detMovInv as a5 ON (a2.co_emp=a5.co_empRel AND a2.co_loc=a5.co_locRel AND a2.co_tipDoc=a5.co_tipDocRel AND a2.co_doc=a5.co_docRel) \n";
                    strSql+="   WHERE a1.co_seg=(select co_seg from tbm_cabSegMovInv \n";
                    strSql+="                    where co_empRelCabCotVen="+intCodEmp+" and co_locRelCabCotVen="+intCodLoc+" \n";
                    strSql+="                          and co_cotRelCabCotVen="+intCodCot+" ) and a3.nd_can > 0 \n ";
                    strSql+="    GROUP BY a1.co_empRelCabMovInv, a1.co_locRelCabMovInv, a1.co_tipDocRelCabMovInv,  ";
                    strSql+="               a1.co_docRelCabMovInv,a3.co_reg , a2.co_cli, a3.co_itm, a3.nd_can  ";
                    strSql+=" ) as b ON (a.co_itm=b.co_itm); \n";
                    System.out.println("INSERTAR LA FACTURA CONTRA EL INGRESO \n\n\n" + strSql);
                    /* INSERTAR LA FACTURA CONTRA EL INGRESO tbr_detMovInv */
                    stmLoc01.executeUpdate(strSql);
                    
                    if(isExisteOC(conn,intCodEmp,intCodLoc,intCodTipDoc,intCodDoc)){
                        strSql="";
                        strSql+=" INSERT INTO tbr_cabMovInv ( co_emp, co_loc, co_tipdoc,  co_doc , st_reg, co_emprel, co_locrel, co_tipdocrel, co_docrel, st_regrep  ) \n";
                        strSql+=" SELECT DISTINCT a.co_emp, a.co_loc, a.co_tipDoc, a.co_doc, 'A' as st_reg, b.co_empRelCabMovInv,b.co_locRelCabMovInv, b.co_tipDocRelCabMovInv, b.co_docRelCabMovInv,'I'   \n";
                        strSql+=" FROM ( \n";
                        strSql+="       SELECT a2.co_emp, a2.co_loc, a2.co_tipDoc, a2.co_doc,a3.co_reg, a3.co_itm, ABS(a3.nd_can) as nd_can \n";
                        strSql+="       FROM ( \n";
                        strSql+="               SELECT co_empRelCabMovInv, co_locRelCabMovInv, co_tipDocRelCabMovInv, co_docRelCabMovInv \n";
                        strSql+="               FROM tbm_cabSegMovInv  \n";
                        strSql+="               WHERE co_empRelCabMovInv="+intCodEmp+" AND co_locRelCabMovInv="+intCodLoc+" AND \n";
                        strSql+="                  co_tipDocRelCabMovInv="+intCodTipDoc+" AND co_docRelCabMovInv="+intCodDoc+" \n";
                        strSql+="       ) as a1 \n";
                        strSql+="       INNER JOIN tbm_cabMovInv as a2 ON (a1.co_empRelCabMovInv=a2.co_emp AND a1.co_locRelCabMovInv=a2.co_loc AND \n";
                        strSql+="                                          a1.co_tipDocRelCabMovInv=a2.co_tipDoc AND a1.co_docRelCabMovInv=a2.co_doc ) \n";
                        strSql+="       INNER JOIN tbm_detMovInv as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc AND a2.co_doc=a3.co_doc) \n";
                        strSql+="       INNER JOIN tbm_inv as a4 ON (a3.co_emp=a4.co_emp AND a3.co_itm=a4.co_itm) \n";
                        strSql+="       WHERE  a3.tx_codAlt like '%L'  \n";
                        strSql+=" ) as a \n";
                        strSql+=" INNER JOIN ( \n";
                        strSql+="   SELECT a1.co_empRelCabMovInv, a1.co_locRelCabMovInv, a1.co_tipDocRelCabMovInv, a1.co_docRelCabMovInv,a3.co_reg as co_regRel, a2.co_cli, a3.co_itm, a3.nd_can \n";
                        strSql+="   FROM tbm_cabSegMovInv as a1 \n";
                        strSql+="   INNER JOIN tbm_cabMovInv as a2 ON (a1.co_empRelCabMovInv=a2.co_emp AND a1.co_locRelCabMovInv=a2.co_loc AND  \n";
                        strSql+="                                       a1.co_tipDocRelCabMovInv=a2.co_tipDoc AND a1.co_docRelCabMovInv=a2.co_doc) \n";
                        strSql+="   INNER JOIN tbm_detMovInv as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc AND a2.co_doc=a3.co_doc) \n";
                        strSql+="   WHERE a1.co_seg=(select co_seg from tbm_cabSegMovInv \n";
                        strSql+="                    where co_empRelCabCotVen="+intCodEmp+" and co_locRelCabCotVen="+intCodLoc+" \n";
                        strSql+="                          and co_cotRelCabCotVen="+intCodCot+" ) and a3.nd_can > 0 \n ";
                        strSql+="    GROUP BY a1.co_empRelCabMovInv, a1.co_locRelCabMovInv, a1.co_tipDocRelCabMovInv,  ";
                        strSql+="               a1.co_docRelCabMovInv,a3.co_reg , a2.co_cli, a3.co_itm, a3.nd_can   \n";
                        strSql+=" ) as b ON (a.co_itm=b.co_itm  ); \n";
                        
                        strSql+=" INSERT INTo tbr_detMovInv ( co_emp, co_loc, co_tipdoc,  co_doc, co_reg , st_reg, co_emprel, co_locrel, co_tipdocrel, co_docrel, co_regrel, st_regrep  ) \n";
                        strSql+=" SELECT a.co_emp, a.co_loc, a.co_tipDoc, a.co_doc,a.co_reg, 'A' as st_reg, b.co_empRelCabMovInv,b.co_locRelCabMovInv, b.co_tipDocRelCabMovInv, b.co_docRelCabMovInv,b.co_regRel,'I'   \n";
                        strSql+=" FROM ( \n";
                        strSql+="       SELECT a2.co_emp, a2.co_loc, a2.co_tipDoc, a2.co_doc,a3.co_reg, a3.co_itm, ABS(a3.nd_can) as nd_can \n";
                        strSql+="       FROM ( \n";
                        strSql+="               SELECT co_empRelCabMovInv, co_locRelCabMovInv, co_tipDocRelCabMovInv, co_docRelCabMovInv \n";
                        strSql+="               FROM tbm_cabSegMovInv  \n";
                        strSql+="               WHERE co_empRelCabMovInv="+intCodEmp+" AND co_locRelCabMovInv="+intCodLoc+" AND \n";
                        strSql+="                  co_tipDocRelCabMovInv="+intCodTipDoc+" AND co_docRelCabMovInv="+intCodDoc+" \n";
                        strSql+="       ) as a1 \n";
                        strSql+="       INNER JOIN tbm_cabMovInv as a2 ON (a1.co_empRelCabMovInv=a2.co_emp AND a1.co_locRelCabMovInv=a2.co_loc AND \n";
                        strSql+="                                          a1.co_tipDocRelCabMovInv=a2.co_tipDoc AND a1.co_docRelCabMovInv=a2.co_doc ) \n";
                        strSql+="       INNER JOIN tbm_detMovInv as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc AND a2.co_doc=a3.co_doc) \n";
                        strSql+="       INNER JOIN tbm_inv as a4 ON (a3.co_emp=a4.co_emp AND a3.co_itm=a4.co_itm) \n";
                        strSql+="       WHERE a3.tx_codAlt like '%L'  \n";
                        strSql+=" ) as a \n";
                        strSql+=" INNER JOIN ( \n";
                        strSql+="   SELECT a1.co_empRelCabMovInv, a1.co_locRelCabMovInv, a1.co_tipDocRelCabMovInv, a1.co_docRelCabMovInv,a3.co_reg as co_regRel, a2.co_cli, a3.co_itm, a3.nd_can \n";
                        strSql+="   FROM tbm_cabSegMovInv as a1 \n";
                        strSql+="   INNER JOIN tbm_cabMovInv as a2 ON (a1.co_empRelCabMovInv=a2.co_emp AND a1.co_locRelCabMovInv=a2.co_loc AND  \n";
                        strSql+="                                       a1.co_tipDocRelCabMovInv=a2.co_tipDoc AND a1.co_docRelCabMovInv=a2.co_doc) \n";
                        strSql+="   INNER JOIN tbm_detMovInv as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc AND a2.co_doc=a3.co_doc) \n";
                        strSql+="   WHERE a1.co_seg=(select co_seg from tbm_cabSegMovInv \n";
                        strSql+="                    where co_empRelCabCotVen="+intCodEmp+" and co_locRelCabCotVen="+intCodLoc+" \n";
                        strSql+="                          and co_cotRelCabCotVen="+intCodCot+" ) and a3.nd_can > 0 \n ";
                        strSql+="    GROUP BY a1.co_empRelCabMovInv, a1.co_locRelCabMovInv, a1.co_tipDocRelCabMovInv,  ";
                        strSql+="               a1.co_docRelCabMovInv,a3.co_reg , a2.co_cli, a3.co_itm, a3.nd_can \n";                    
                        strSql+=" ) as b ON (a.co_itm=b.co_itm ); \n";

                        System.out.println("isExisteOC: ");
                        stmLoc01.executeUpdate(strSql);
                    }
                    rstLoc.close();
                    rstLoc = null;
                    stmLoc.close();
                    stmLoc = null;
                    stmLoc01.close();
                    stmLoc01 = null;
                    
                    blnRes=true;
                }
            }
            catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
            
        }
        
        
        private boolean isRelacionOC(java.sql.Connection conn,int intCodEmp, int intCodLoc,int intCodTipDoc,int intCodDoc,int intCodCot){
            boolean blnRes = true;
            java.sql.Statement stmLoc, stmLoc01;
            java.sql.ResultSet rstLoc;    
            int intNumDoc=0,intCodSeg=0;
            String strSql;
            try{
                if (conn != null) 
                {
                    stmLoc = conn.createStatement();
                    stmLoc01 = conn.createStatement();
                    
                    strSql = " SELECT MAX(co_reg)+1 as co_reg, a1.co_seg  \n";
                    strSql+= " FROM tbm_cabSegMovInv as a1 \n";
                    strSql+= " WHERE a1.co_seg = ( \n";
                    strSql+= "     SELECT co_seg \n";
                    strSql+= "     FROM tbm_cabSegMovInv \n";
                    strSql+= "     WHERE co_empRelCabCotVen="+intCodEmp+" AND  \n";
                    strSql+= "     co_locRelCabCotVen="+intCodLoc+" AND co_cotRelCabCotVen="+intCodCot+" \n  ";
                    strSql+= " ) \n GROUP BY a1.co_seg";                        
                    rstLoc = stmLoc.executeQuery(strSql);
                    if (rstLoc.next()) {
                        intNumDoc = rstLoc.getInt("co_reg");
                        intCodSeg = rstLoc.getInt("co_seg");
                        intCodSegGlo=intCodSeg;
                        strSql=" ";
                        strSql+=" INSERT INTO tbm_cabSegMovInv (co_seg,co_reg,co_empRelCabMovInv, co_locRelCabMovInv, co_tipDocRelCabMovInv, co_docRelCabMovInv) ";
                        strSql+=" VALUES ("+intCodSeg+", "+intNumDoc+", "+intCodEmp+", "+intCodLoc+","+intCodTipDoc+","+intCodDoc+" );";
                        System.out.println("InsertarEnTablaSeguimiento Factura Normal: "+strSql);
                        stmLoc01.executeUpdate(strSql);
                    }
                    
                    if(isExisteOC(conn,intCodEmp,intCodLoc,intCodTipDoc,intCodDoc)){
                        strSql="";
                        strSql+=" INSERT INTO tbr_cabMovInv ( co_emp, co_loc, co_tipdoc,  co_doc , st_reg, co_emprel, co_locrel, co_tipdocrel, co_docrel, st_regrep  ) \n";
                        strSql+=" SELECT DISTINCT a.co_emp, a.co_loc, a.co_tipDoc, a.co_doc, 'A' as st_reg, b.co_empRelCabMovInv,b.co_locRelCabMovInv, b.co_tipDocRelCabMovInv, b.co_docRelCabMovInv,'I'   \n";
                        strSql+=" FROM ( \n";
                        strSql+="       SELECT a2.co_emp, a2.co_loc, a2.co_tipDoc, a2.co_doc,a3.co_reg, a3.co_itm, ABS(a3.nd_can) as nd_can \n";
                        strSql+="       FROM ( \n";
                        strSql+="               SELECT co_empRelCabMovInv, co_locRelCabMovInv, co_tipDocRelCabMovInv, co_docRelCabMovInv \n";
                        strSql+="               FROM tbm_cabSegMovInv  \n";
                        strSql+="               WHERE co_empRelCabMovInv="+intCodEmp+" AND co_locRelCabMovInv="+intCodLoc+" AND \n";
                        strSql+="                  co_tipDocRelCabMovInv="+intCodTipDoc+" AND co_docRelCabMovInv="+intCodDoc+" \n";
                        strSql+="       ) as a1 \n";
                        strSql+="       INNER JOIN tbm_cabMovInv as a2 ON (a1.co_empRelCabMovInv=a2.co_emp AND a1.co_locRelCabMovInv=a2.co_loc AND \n";
                        strSql+="                                          a1.co_tipDocRelCabMovInv=a2.co_tipDoc AND a1.co_docRelCabMovInv=a2.co_doc ) \n";
                        strSql+="       INNER JOIN tbm_detMovInv as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc AND a2.co_doc=a3.co_doc) \n";
                        strSql+="       INNER JOIN tbm_inv as a4 ON (a3.co_emp=a4.co_emp AND a3.co_itm=a4.co_itm) \n";
                        strSql+="       WHERE  a3.tx_codAlt like '%L'  \n";
                        strSql+=" ) as a \n";
                        strSql+=" INNER JOIN ( \n";
                        strSql+="   SELECT a1.co_empRelCabMovInv, a1.co_locRelCabMovInv, a1.co_tipDocRelCabMovInv, a1.co_docRelCabMovInv,a3.co_reg as co_regRel, a2.co_cli, a3.co_itm, a3.nd_can \n";
                        strSql+="   FROM tbm_cabSegMovInv as a1 \n";
                        strSql+="   INNER JOIN tbm_cabMovInv as a2 ON (a1.co_empRelCabMovInv=a2.co_emp AND a1.co_locRelCabMovInv=a2.co_loc AND  \n";
                        strSql+="                                       a1.co_tipDocRelCabMovInv=a2.co_tipDoc AND a1.co_docRelCabMovInv=a2.co_doc) \n";
                        strSql+="   INNER JOIN tbm_detMovInv as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc AND a2.co_doc=a3.co_doc) \n";
                        strSql+="   WHERE a1.co_seg=(select co_seg from tbm_cabSegMovInv \n";
                        strSql+="                    where co_empRelCabCotVen="+intCodEmp+" and co_locRelCabCotVen="+intCodLoc+" \n";
                        strSql+="                          and co_cotRelCabCotVen="+intCodCot+" ) and a3.nd_can > 0 \n ";
                        strSql+="    GROUP BY a1.co_empRelCabMovInv, a1.co_locRelCabMovInv, a1.co_tipDocRelCabMovInv,  ";
                        strSql+="               a1.co_docRelCabMovInv,a3.co_reg , a2.co_cli, a3.co_itm, a3.nd_can   \n";
                        strSql+=" ) as b ON (a.co_itm=b.co_itm  ); \n";
                        
                        strSql+=" INSERT INTo tbr_detMovInv ( co_emp, co_loc, co_tipdoc,  co_doc, co_reg , st_reg, co_emprel, co_locrel, co_tipdocrel, co_docrel, co_regrel, st_regrep  ) \n";
                        strSql+=" SELECT a.co_emp, a.co_loc, a.co_tipDoc, a.co_doc,a.co_reg, 'A' as st_reg, b.co_empRelCabMovInv,b.co_locRelCabMovInv, b.co_tipDocRelCabMovInv, b.co_docRelCabMovInv,b.co_regRel,'I'   \n";
                        strSql+=" FROM ( \n";
                        strSql+="       SELECT a2.co_emp, a2.co_loc, a2.co_tipDoc, a2.co_doc,a3.co_reg, a3.co_itm, ABS(a3.nd_can) as nd_can \n";
                        strSql+="       FROM ( \n";
                        strSql+="               SELECT co_empRelCabMovInv, co_locRelCabMovInv, co_tipDocRelCabMovInv, co_docRelCabMovInv \n";
                        strSql+="               FROM tbm_cabSegMovInv  \n";
                        strSql+="               WHERE co_empRelCabMovInv="+intCodEmp+" AND co_locRelCabMovInv="+intCodLoc+" AND \n";
                        strSql+="                  co_tipDocRelCabMovInv="+intCodTipDoc+" AND co_docRelCabMovInv="+intCodDoc+" \n";
                        strSql+="       ) as a1 \n";
                        strSql+="       INNER JOIN tbm_cabMovInv as a2 ON (a1.co_empRelCabMovInv=a2.co_emp AND a1.co_locRelCabMovInv=a2.co_loc AND \n";
                        strSql+="                                          a1.co_tipDocRelCabMovInv=a2.co_tipDoc AND a1.co_docRelCabMovInv=a2.co_doc ) \n";
                        strSql+="       INNER JOIN tbm_detMovInv as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc AND a2.co_doc=a3.co_doc) \n";
                        strSql+="       INNER JOIN tbm_inv as a4 ON (a3.co_emp=a4.co_emp AND a3.co_itm=a4.co_itm) \n";
                        strSql+="       WHERE a3.tx_codAlt like '%L'  \n";
                        strSql+=" ) as a \n";
                        strSql+=" INNER JOIN ( \n";
                        strSql+="   SELECT a1.co_empRelCabMovInv, a1.co_locRelCabMovInv, a1.co_tipDocRelCabMovInv, a1.co_docRelCabMovInv,a3.co_reg as co_regRel, a2.co_cli, a3.co_itm, a3.nd_can \n";
                        strSql+="   FROM tbm_cabSegMovInv as a1 \n";
                        strSql+="   INNER JOIN tbm_cabMovInv as a2 ON (a1.co_empRelCabMovInv=a2.co_emp AND a1.co_locRelCabMovInv=a2.co_loc AND  \n";
                        strSql+="                                       a1.co_tipDocRelCabMovInv=a2.co_tipDoc AND a1.co_docRelCabMovInv=a2.co_doc) \n";
                        strSql+="   INNER JOIN tbm_detMovInv as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc AND a2.co_doc=a3.co_doc) \n";
                        strSql+="   WHERE a1.co_seg=(select co_seg from tbm_cabSegMovInv \n";
                        strSql+="                    where co_empRelCabCotVen="+intCodEmp+" and co_locRelCabCotVen="+intCodLoc+" \n";
                        strSql+="                          and co_cotRelCabCotVen="+intCodCot+" ) and a3.nd_can > 0 \n ";
                        strSql+="    GROUP BY a1.co_empRelCabMovInv, a1.co_locRelCabMovInv, a1.co_tipDocRelCabMovInv,  ";
                        strSql+="               a1.co_docRelCabMovInv,a3.co_reg , a2.co_cli, a3.co_itm, a3.nd_can \n";                    
                        strSql+=" ) as b ON (a.co_itm=b.co_itm ); \n";
                        System.out.println("isExisteOC: ");
                        stmLoc01.executeUpdate(strSql);
                    }
                    rstLoc.close();
                    rstLoc = null;
                    stmLoc.close();
                    stmLoc = null;
                    stmLoc01.close();
                    stmLoc01 = null;
                    
                    blnRes=true;
                }
            }
            catch (SQLException Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
            
        }
        
       
        
  
        private boolean isExisteOC(java.sql.Connection conn, int intCodEmp, int intCodLoc,int intCodTipDoc,int intCodDoc){
            boolean blnRes=false;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strCadena;
            try{
                stmLoc=conn.createStatement();
                strCadena="";
                strCadena+=" SELECT a1.co_itm ";
                strCadena+=" FROM tbm_detMovInv as a1  ";
                strCadena+=" WHERE a1.co_emp="+intCodEmp+" AND a1.co_loc="+intCodLoc+" AND ";
                strCadena+=" a1.co_tipDoc="+intCodTipDoc+" AND a1.co_doc="+intCodDoc+" AND a1.tx_codAlt like '%L' ";
                rstLoc = stmLoc.executeQuery(strCadena);
                if (rstLoc.next()) {
                   blnRes=true;
                }
                stmLoc.close();
                stmLoc=null;
                rstLoc.close();
                rstLoc=null;
            }
            catch (SQLException Evt) {
                blnRes = false;
                System.err.println("ERROR " + Evt.toString());
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            } 
            catch (Exception Evt) {
                blnRes = false;
                System.err.println("ERROR " + Evt.toString());
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }
       
        
        
        /**
         * modificaCotizacion 
         * Solicitado para modificar nuevos campos en la cotizacion para saber que items son de otros lugares 
         * y cuales de la propia bodega donde es la venta 
         * 
         *                                                 
         * @param con
         * @param intCodEmp
         * @param intCodLoc
         * @param intCodCot
         * @return 
         */
         
        private boolean modificaDetalleCotizacionCantidadesLocalesRemotas(java.sql.Connection con, int intCodEmp, int intCodLoc, int intCodCot){
            boolean blnRes=true, blnIsInSolTra=false;
            java.sql.Statement stmLoc,stmLoc01;
            java.sql.ResultSet rstLoc,rstCot;
            String strCadena="",strUpdate="",strSql="";
            int intCodItm;
            double dblCan=0.00,dblCanCot=0.00, dblCanRem=0.00;
             arlDatStkInvItm = new ArrayList(); 
            try{
                if(con!=null){
                    stmLoc=con.createStatement();
                    stmLoc01=con.createStatement();
// <editor-fold defaultstate="collapsed" desc=" /*JM: comentado al 26/Sep/2017 estaba fallando hacia dos veces sacar del disponible y poner en la reserva*/" >   
//                    strCadena="";
//                    strCadena+=" SELECT b.co_itm, CASE WHEN a.nd_can IS NULL THEN 0 else a.nd_can END as nd_can \n";
//                    strCadena+=" FROM ( \n";
//                    strCadena+="    SELECT a3.co_itm, SUM(a3.nd_can) as nd_can \n";
//                    strCadena+="    FROM tbm_cabSegMovInv as a1 ";
//                    strCadena+="    INNER JOIN tbm_cabMovInv as a2 ON (a1.co_empRelCabMovInv=a2.co_emp AND a1.co_locRelCabMovInv=a2.co_loc AND   \n";
//                    strCadena+="                                        a1.co_tipDocRelCabMovInv=a2.co_tipDoc AND a1.co_docRelCabMovInv=a2.co_doc)  /*EL INGRESO */ \n";
//                    strCadena+="    INNER JOIN tbm_detMovInv as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc AND a2.co_doc=a3.co_doc) \n";
//                    strCadena+="    LEFT OUTER JOIN ( \n";
//                    strCadena+="                    SELECT a1.st_genOrdDes, a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a3.co_empRel,a3.co_locRel, \n";
//                    strCadena+="                            a3.co_tipDocRel, a3.co_docRel,a3.co_regRel \n";
//                    strCadena+="                    FROM tbm_cabMovInv as a1  /* EL EGRESO */ \n";
//                    strCadena+="                    INNER JOIN tbm_detMovInv as a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND  \n";
//                    strCadena+="                                                        a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) \n";
//                    strCadena+="                    INNER JOIN tbr_detMovInv as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND  \n";
//                    strCadena+="                                                    a2.co_tipDoc=a3.co_tipDoc AND a2.co_doc=a3.co_doc AND a2.co_reg=a3.co_reg) \n";
//                    strCadena+="                    INNER JOIN ( \n";
//                    strCadena+="                          SELECT a1.co_seg, a1.co_empRelCabSolTraInv, a1.co_locRelCabSolTraInv, a1.co_tipDocRelCabSolTraInv, a1.co_docRelCabSolTraInv \n";
//                    strCadena+="                          FROM tbm_cabSegMovInv as a1 \n";
//                    strCadena+="                          WHERE a1.co_seg = ( \n";
//                    strCadena+="                                            SELECT a1.co_seg  \n";
//                    strCadena+="                                            FROM tbm_cabSegMovInv as a1  \n";
//                    strCadena+="                                            WHERE a1.co_empRelCabCotVen="+intCodEmp+" and a1.co_locRelCabCotVen="+intCodLoc+" AND  a1.co_cotRelCabCotVen="+intCodCot+" \n";
//                    strCadena+="                        ) AND a1.co_empRelCabSolTraInv IS NOT NULL  \n";
//                    strCadena+="                         /* PARA OBTENER LAS SOLICITUDES GUARDADAS EN CAMPOS RELACIONALES de tbm_cabMovInv */  \n";
//                    strCadena+="                    ) AS a4 ON (a1.co_empRelCabSolTrainv=a4.co_empRelCabSolTraInv AND a1.co_locRelCabSolTraInv=a4.co_locRelCabSolTraInv AND \n";
//                    strCadena+="                            a1.co_tipDocRelCabSolTraInv=a4.co_tipDocRelCabSolTraInv AND a1.co_docRelCabSolTraInv=a4.co_docRelCabSolTraInv)  \n";
//                    strCadena+="    ) as a4 ON(a3.co_emp=a4.co_empRel AND a3.co_loc=a4.co_locRel AND a3.co_tipDoc=a4.co_tipDocRel AND  \n";
//                    strCadena+="                a3.co_doc=a4.co_docRel AND a3.co_reg=a4.co_regRel)   \n";
//                    strCadena+="    WHERE a1.co_seg=( \n";
//                    strCadena+="                    SELECT co_seg  \n";
//                    strCadena+="                    FROM tbm_cabSegMovINv as a1 \n";
//                    strCadena+="                    INNER JOIN tbm_cabCotVen as a4 ON (a1.co_empRelCabCotVen=a4.co_emp AND a1.co_locRelCabCotVen=a4.co_loc \n";
//                    strCadena+="                                                        AND a1.co_cotRelCabCotVen=a4.co_cot) \n";
//                    strCadena+="                    WHERE co_emp="+intCodEmp+" and co_loc="+intCodLoc+" and co_cot="+intCodCot+" \n";
//                    strCadena+="                   ) and a3.nd_can > 0 AND ( a2.st_genOrdDes = 'S' OR a4.st_genOrdDes = 'S')   \n";
//                    strCadena+="    GROUP BY  a3.co_itm   \n";
//                    strCadena+=" ) as a  \n";
//                    strCadena+=" RIGHT JOIN ( \n";
//                    strCadena+="    SELECT a2.co_itm, a2.nd_can \n";
//                    strCadena+="    FROM tbm_cabCotVen as a1 ";
//                    strCadena+="    INNER JOIN tbm_detCotVen as a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_cot=a2.co_cot) \n";
//                    strCadena+="    WHERE a1.co_emp="+intCodEmp+" and a1.co_loc="+intCodLoc+" and a1.co_cot="+intCodCot+" AND a2.tx_codAlt NOT LIKE '%L'  \n";
//                    strCadena+=" ) as b ON (a.co_itm=b.co_itm)   \n";
//                    </editor-fold>
                    strSql="";
                    strSql+=" SELECT X.* \n";
                    strSql+=" FROM ( \n";
                    strSql+="       SELECT a2.co_emp , a2.co_loc,a2.co_cot,a2.co_reg,a8.co_bodGrp, a2.co_itm,a2.tx_codAlt,a2.nd_can,  \n";
                    strSql+="              CASE WHEN a4.nd_canIng IS NULL THEN 0 ELSE a4.nd_canIng END as nd_canEgrDes,  \n";
                    strSql+="              (a2.nd_can- CASE WHEN a4.nd_canIng IS NULL THEN 0 ELSE a4.nd_canIng END) as nd_canEgrBod   \n";
                    strSql+="       FROM tbm_cabCotVen as a1   \n";
                    strSql+="       INNER JOIN tbm_detCotVen AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_cot=a2.co_cot)  \n";
                    strSql+="       LEFT OUTER JOIN (  \n";
                    strSql+="                   SELECT x.co_itm, SUM(x.nd_can) as nd_canIng  \n";
                    strSql+="                   FROM(  \n";
                    strSql+="                           SELECT a2.co_emp, a2.co_loc, a2.co_tipDoc, a2.co_doc,a3.co_reg,   \n";
                    strSql+="                                   a3.co_itm, a3.nd_can   \n";
                    strSql+="                           FROM tbm_cabMovInv as a2  /*EL INGRESO */  \n";
                    strSql+="                           INNER JOIN tbm_detMovInv as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND    \n";
                    strSql+="                                                               a2.co_tipDoc=a3.co_tipDoc AND a2.co_doc=a3.co_doc)  \n";
                    strSql+="                           INNER JOIN (   \n";
                    strSql+="                                   SELECT a1.co_emp AS co_empIng, a1.co_loc as co_locIng, a1.co_tipDoc as co_tipDocIng, a1.co_doc as co_docIng  \n";
                    strSql+="                                   FROM tbm_cabMovInv as a1 \n";
                    strSql+="                                   INNER JOIN tbm_cabSegMovInv as a2 ON (a1.co_emp=a2.co_empRelCabMovInv AND a1.co_loc=a2.co_locRelCabMovInv AND   \n";
                    strSql+="                                                                         a1.co_tipDoc=a2.co_tipDocRelCabMovInv AND a1.co_doc=a2.co_docRelCabMovInv) \n";
                    strSql+="                                   INNER JOIN (  \n";
                    strSql+="                                               SELECT a1.co_seg  \n";
                    strSql+="                                               FROM tbm_cabSegMovInv as a1 \n";
                    strSql+="                                               INNER JOIN tbm_cabCotVen as a2 ON (a1.co_empRelCabCotVen=a2.co_emp AND a1.co_locRelCabCotVen=a2.co_loc AND  \n";
                    strSql+="                                                                            a1.co_cotRelCabCotVen=a2.co_cot)   \n";
                    strSql+="                                               WHERE a2.co_emp="+intCodEmp+" AND a2.co_loc="+intCodLoc+" AND a2.co_cot="+intCodCot+"  \n";
                    strSql+="                                   ) AS a3 ON (a2.co_seg=a3.co_seg) \n";
                    strSql+="                                   INNER JOIN tbm_cabTipDoc as a4 ON (a1.co_emp=a4.co_emp AND a1.co_loc=a4.co_loc AND a1.co_tipDoc=a4.co_tipDoc) \n";
                    strSql+="                                   WHERE a1.nd_tot>0 		  \n";
                    strSql+="                           ) as a7 ON (a2.co_emp=a7.co_empIng AND a2.co_loc=a7.co_locIng AND a2.co_tipDoc=a7.co_tipDocIng AND  \n";
                    strSql+="                                       a2.co_doc=a7.co_docIng)   \n";
                    strSql+="                           WHERE a3.nd_can>0 /*AND a3.st_merIngEgrFisBOd='S'*/   \n";
                    strSql+="                   ) as x  \n";
                    strSql+="                   GROUP BY x.co_itm	  \n";
                    strSql+="        ) AS a4 ON (a2.co_itm=a4.co_itm)  \n";
                    strSql+="       INNER JOIN tbr_bodEmpBodGrp AS a8 ON (a2.co_emp=a8.co_emp AND a2.co_bod=a8.co_bod AND a8.co_empGrp="+objZafParSis.getCodigoEmpresaGrupo()+" )  \n";
                    strSql+="       WHERE a1.co_emp="+intCodEmp+" AND a1.co_loc="+intCodLoc+" AND a1.co_cot="+intCodCot+" \n";			 
                    strSql+="  ) as X     \n";
                    strSql+="  /* WHERE X.nd_canEgrDes=0 */    \n";
                    strSql+="  ORDER BY x.co_emp, x.co_loc,x.co_cot,x.co_reg    \n";
                    System.out.println("RESERVAS 0.3 itemsSinIngresoReservaLocal 0.3 (12/Dic/2017): \n" + strSql);
                    rstLoc=stmLoc.executeQuery(strSql);
                    while(rstLoc.next()){
                        blnIsInSolTra=true;
                        intCodItm=rstLoc.getInt("co_itm");
                        dblCan=rstLoc.getDouble("nd_canEgrBod");  // JM: Cantidad Local xD
                        dblCanRem=rstLoc.getDouble("nd_canEgrDes");  // JM: Cantidad Remota xD
                        
                        if(blnIsInSolTra || (blnIsGenOC && intCodBodPre==15)) {
                            if(strMomGenFac.equals("F")){
                                System.out.println("SACA DE RESERVAS SOLO LOCAL SIN INGRESOS ");
                                arlDatStkInvItm = new ArrayList(); 
                                if(generaNuevoContenedorItemsMovimientoStock(intCodItm,dblCan,bodegaPredeterminada())){
                                    /*Si la cantidad se reserva se saca solo de la cantidad disponible, pero se deja en el stockActual hasta que se genera la factura...*/
                                    if(objStkInv.actualizaInventario(con, objZafParSis.getCodigoEmpresa(),INT_ARL_STK_INV_CAN_DIS, "-", 0, arlDatStkInvItm)){
                                            if(objStkInv.actualizaInventario(con, objZafParSis.getCodigoEmpresa(),INT_ARL_STK_INV_CAN_RES_VEN, "+", 0, arlDatStkInvItm)){ 
                                                System.out.println("ZafVen01.Mover Inventario ZafStkInv....  ");
                                            }else{blnRes=false;}
                                    }else{blnRes=false;}
                                }
                            }
                        }
                        
                        
                        strCadena="";
                        strCadena+=" SELECT a1.co_emp, a1.co_loc,a2.co_reg, a2.co_itm, a2.nd_can  ,  \n";
                        strCadena+="        CASE WHEN a3.co_empRel IS NULL THEN 'N' ELSE 'S' END AS IsRes \n";
                        strCadena+=" FROM tbm_cabCotVen as a1 \n";
                        strCadena+=" INNER JOIN tbm_detCotVen as a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_cot=a2.co_cot) \n";
                        strCadena+=" LEFT OUTER JOIN tbr_detCotVen as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_cot=a3.co_cot AND a2.co_reg=a3.co_reg) \n";
                        strCadena+=" WHERE a1.co_emp="+intCodEmp+" AND a1.co_loc="+intCodLoc+" AND a1.co_cot="+intCodCot+" AND a2.co_reg="+rstLoc.getInt("co_reg")+" \n";
                        strCadena+="        AND a2.co_itm="+intCodItm+" \n";
                        strCadena+=" ORDER BY a1.co_emp, a1.co_loc,a2.co_reg \n";
                        System.out.println("Items:");
                        rstCot=stmLoc01.executeQuery(strCadena);
                        if(rstCot.next()){
                            strUpdate+=" UPDATE tbm_detCotVen SET nd_canLoc=CASE WHEN nd_canLoc IS NULL THEN 0 ELSE nd_canLoc END + "+dblCan+", \n";
                            strUpdate+="                          nd_canRem=CASE WHEN nd_canRem IS NULL THEN 0 ELSE nd_canRem END + "+dblCanRem+" \n ";
                            strUpdate+=" WHERE co_emp="+intCodEmp+" AND co_loc="+intCodLoc+" AND co_cot="+intCodCot+" AND co_reg="+rstCot.getInt("co_reg")+"; \n";
                        }
                        rstCot.close();
                        rstCot=null;
                    }
                    System.out.println("strUpdate" + strUpdate);
                    stmLoc.executeUpdate(strUpdate);
                    rstLoc.close();
                    rstLoc=null;
                    stmLoc.close();
                    stmLoc=null;
                    stmLoc01.close();
                    stmLoc01=null;
                }
            }
            catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
            
        }
        
        
    private int bodegaPredeterminada(){
        int intBodPre=0;
        String strSql;
        java.sql.Connection conLoc;
        java.sql.Statement stmLoc; 
        java.sql.ResultSet rstLoc;
        try{
            conLoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if(conLoc!=null){
                stmLoc=conLoc.createStatement();
                strSql=" SELECT a2.co_emp, a2.co_bod \n";
                strSql+=" FROM tbr_bodloc AS a1 \n";
                strSql+=" INNER JOIN tbr_bodEmpBodGrp AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_bod=a2.co_bod) \n";
                strSql+=" WHERE a1.co_loc="+objZafParSis.getCodigoLocal()+" and a1.st_reg='P' AND \n";
                strSql+="       a1.co_emp="+objZafParSis.getCodigoEmpresa()+" \n";
                System.out.println("BODEGA PREDETERMINADA... " + strSql);
                rstLoc=stmLoc.executeQuery(strSql);
                if(rstLoc.next()){
                    intBodPre = rstLoc.getInt("co_bod");
                }
                strSql="";
                strSql="";
                conLoc.close();
                conLoc=null;
                rstLoc.close();
                stmLoc.close();
                stmLoc = null;
                rstLoc = null;
            }
        }
        catch(java.sql.SQLException Evt){ 
            objUti.mostrarMsgErr_F1(null, Evt); 
            intBodPre=0;
        }
        catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(null, Evt);  
            intBodPre=0;
        }
        return intBodPre;
    }
        
        /**
         * asignaNumeroFac Jota
         * Asigna el numero de la factura,en tbm_cabMovInv y en tbm_cabDia, aumenta la numeracion
         * @param conIns
         * @param intCodEmp
         * @param intCodLoc
         * @param intCodTipDocFacEle
         * @param intCodDoc
         * @param intCodCot
         * @return 
         */
        public boolean asignaNumeroFacNuevo(java.sql.Connection conIns, int intCodTipDocFacEle, int intCodDoc) 
        {
            boolean blnRes = false;
            java.sql.Statement stmLoc, stmLocIns;
            java.sql.ResultSet rstLoc;
            String strSql = "";
            String strSqlIns = "";
            int intNumDoc = 0,intSecEmp,intSecGrp;
            int intNumDocGuia = 0;
            try 
            {
                if (conIns != null){
                    stmLoc = conIns.createStatement();
                    strSql = "SELECT CASE WHEN (ne_ultDoc+1) IS NULL THEN 1 ELSE (ne_ultDoc+1) END AS ultnum "
                            + " FROM tbm_cabTipDoc WHERE co_emp=" +objZafParSis.getCodigoEmpresa()+ " "
                            + " AND co_loc=" +objZafParSis.getCodigoLocal()+ " AND co_tipDoc=" + intCodTipDocFacEle;
                    System.out.println("numero " + strSql);
                    rstLoc = stmLoc.executeQuery(strSql);
                    if (rstLoc.next()) {
                        intNumFacElec = rstLoc.getInt("ultnum");
                    }
                    rstLoc.close();
                    rstLoc = null;
                    stmLoc.close();
                    stmLoc = null;
                    
                    intSecEmp = objUltDocPrint.getNumSecDoc(conIns, objZafParSis.getCodigoEmpresa());
                    intSecGrp = objUltDocPrint.getNumSecDoc(conIns, objZafParSis.getCodigoEmpresaGrupo());
                    
                    strSqlIns += "   UPDATE tbm_cabTipDoc SET ne_ultDoc=" + intNumFacElec + " WHERE co_emp=" +objZafParSis.getCodigoEmpresa()+ " "
                            + " AND co_loc=" +objZafParSis.getCodigoLocal()+ " AND co_tipDoc=" + intCodTipDocFacEle;
                    strSqlIns += ";UPDATE tbm_cabmovinv SET ne_numdoc=" +intNumFacElec+", ne_numgui="+intNumDocGuia+", st_reg='A' , st_imp='S',  "
                            + " ne_SecEmp=" + intSecEmp + ", ne_SecGrp=" + intSecGrp + " "
                            + " WHERE co_emp=" +objZafParSis.getCodigoEmpresa()+ " AND co_loc=" +objZafParSis.getCodigoLocal()+ " "
                            + "       AND co_tipdoc=" + intCodTipDocFacEle + " "
                            + "       AND co_doc=" + intCodDoc + " and st_reg not in ('I','E');";
                    
                    strSqlIns += " ; UPDATE tbm_cabdia SET tx_numdia='" + intNumFacElec + "' WHERE co_emp=" +objZafParSis.getCodigoEmpresa()+ " AND co_loc=" +objZafParSis.getCodigoLocal()+ " AND co_tipdoc=" + intCodTipDocFacEle + " "
                            + " AND co_dia=" + intCodDoc + " and st_reg not in ('I','E')  ";
                    stmLocIns = conIns.createStatement();
                    stmLocIns.executeUpdate(strSqlIns);
                    stmLocIns.close();
                    stmLocIns = null;
                    blnRes = true;
                }
            } catch (SQLException Evt) {
                blnRes = false;
                System.err.println("ERROR " + Evt.toString());
            } catch (Exception Evt) {
                blnRes = false;
                System.err.println("ERROR " + Evt.toString());
                
            }
            return blnRes;
        }

        public void mostrarMsg(String strMsg) {
            //JOptionPane oppMsg=new JOptionPane();
            //String strTit="Mensaje del sistema Zafiro";
            JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.OK_OPTION);
        }

        /*
         * MODIFICADO EFLORESA 2012-05-28
         * IMPRESION DE FACTURA DE VENTAS LINUX/WINDOWS
         */
        public boolean impresionFactura(Connection connImp, int codtipdoc, int codoc) {
            retNomEmp(intCodEmp);
            String fecha = "";
            java.util.Date dtFecHor;

            //conocer el tipo de S.O
            isLinux = System.getProperty("os.name").equals("Linux") ? true : false;

            try {
                //   System.out.println("ZafVen01.impresionFactura");
                if (codtipdoc == 1) 
                { // SOLO SE IMPRIME SI ES FACVEN // José Marín M. 15/Oct/2014
                    // System.out.println("ES FACVEN.... IMPRIMIR");
                    if (isLinux) 
                    {
                        if (connImp != null) {
                            dtFecHor = new java.util.Date();
                            fecha = objUti.formatearFecha(dtFecHor, "dd-MM-yyyy-hh-mm-ss");

                            Map parameters = new HashMap();
                            parameters.put("codEmp", new Integer(objZafParSis.getCodigoEmpresa()));
                            parameters.put("codLoc", new Integer(objZafParSis.getCodigoLocal()));
                            parameters.put("codTipDoc", new Integer(codtipdoc));
                            parameters.put("codDoc", new Integer(codoc));

                            if (System.getProperty("os.name").equals("Linux")) {
                                javax.print.attribute.PrintRequestAttributeSet objPriReqAttSet = new javax.print.attribute.HashPrintRequestAttributeSet();
                                objPriReqAttSet.add(javax.print.attribute.standard.MediaSizeName.ISO_A4);
                                JasperPrint reportGuiaRem = JasperFillManager.fillReport(DIRECCION_REPORTE_FACTURA, parameters, connImp);
                                javax.print.attribute.standard.PrinterName printerName = new javax.print.attribute.standard.PrinterName(strImpDirectaFac, null);
                                javax.print.attribute.PrintServiceAttributeSet printServiceAttributeSet = new javax.print.attribute.HashPrintServiceAttributeSet();
                                printServiceAttributeSet.add(printerName);
                                net.sf.jasperreports.engine.export.JRPrintServiceExporter objJRPSerExp = new net.sf.jasperreports.engine.export.JRPrintServiceExporter();
                                objJRPSerExp.setParameter(net.sf.jasperreports.engine.JRExporterParameter.JASPER_PRINT, reportGuiaRem);
                                objJRPSerExp.setParameter(net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter.PRINT_REQUEST_ATTRIBUTE_SET, objPriReqAttSet);
                                objJRPSerExp.setParameter(net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter.PRINT_SERVICE_ATTRIBUTE_SET, printServiceAttributeSet);
                                objJRPSerExp.setParameter(net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter.DISPLAY_PAGE_DIALOG, Boolean.FALSE);
                                objJRPSerExp.setParameter(net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter.DISPLAY_PRINT_DIALOG, Boolean.FALSE);
                                objJRPSerExp.exportReport();

                            } else {
                                // JasperPrint report = JasperFillManager.fillReport(jasperReport, parameters, conIns);
                                JasperPrint report = JasperFillManager.fillReport(DIRECCION_REPORTE_FACTURA, parameters, connImp);
                                JasperPrintManager.printReport(report, true);
                            }
                        }
                    } 
                    else {
                        impresionFactura(intTipRptVta, intTipDoc, codoc);
                    }
                } 
                else 
                {
                    System.out.println("************ ES FACVENE....NO SE DEBE IMPRIMIR / DIRECCION_REPORTE_FACELE ******************");
                }

            } catch (JRException e) {
                objUti.mostrarMsgErr_F1(jfrThis, e);
            }
            return true;
        }

        /* Modificado Rose 27/May/2015 
         * 
         * IMPRESION DE ORDEN DE COMPRA LINUX/WINDOWS
         */
        public boolean imprimeOrdCom(Connection conIns, String codLoc, String codTipDoc, String codDoc) 
        {
            int intCodEmp = objZafParSis.getCodigoEmpresa();  
            int intNumTotRpt;
            String strRutImgLogo = " ";

            isLinux = System.getProperty("os.name").equals("Linux") ? true : false; //Conocer el tipo de S.O
            try 
            {
                if (isLinux) 
                {
                    if (conIns != null) 
                    {
                        objRptSisCom.cargarListadoReportes(objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intCodMnuOrdCom, objZafParSis.getCodigoUsuario());
                        objRptSisCom.setVisible(true);
                        if (objRptSisCom.getOpcionSeleccionada() == ZafRptSis.INT_OPC_ACE) 
                        {
                            intNumTotRpt = objRptSisCom.getNumeroTotalReportes();
                            for (int i = 0; i < intNumTotRpt; i++) 
                            {
                                if (objRptSisCom.isReporteSeleccionado(i))
                                {
                                    switch (Integer.parseInt(objRptSisCom.getCodigoReporte(i))) 
                                    {
                                        case 19:
                                        default:
                                            strRutImgLogo = objRptSisCom.getRutaReporte(i);
                                            if (objZafParSis.getCodigoEmpresa() == 1) {
                                                strRutImgLogo += "Logos/logTuv.png";
                                            } else if (objZafParSis.getCodigoEmpresa() == 2) {
                                                strRutImgLogo += "Logos/logCas.png";
                                            } else {
                                                strRutImgLogo += "Logos/logDim.png";
                                            }
                                            Map parameters = new HashMap();
                                            parameters.put("codEmp", new Integer(objZafParSis.getCodigoEmpresa()));
                                            parameters.put("codLoc", new Integer(objZafParSis.getCodigoLocal()));
                                            parameters.put("CodTipDoc", new Integer(codTipDoc));
                                            parameters.put("codDoc", new Integer(codDoc));
                                            parameters.put("RUTA_LOGO", strRutImgLogo); //Rose

                                            if ((intCodEmp == 1) || (intCodEmp == 4) || ((intCodEmp == 2) && objZafParSis.getCodigoLocal() != 6)) {
                                                if (System.getProperty("os.name").equals("Linux")) {
                                                    javax.print.attribute.PrintRequestAttributeSet objPriReqAttSet = new javax.print.attribute.HashPrintRequestAttributeSet();
                                                    objPriReqAttSet.add(javax.print.attribute.standard.MediaSizeName.ISO_A4);
                                                    JasperPrint reportGuiaRem = JasperFillManager.fillReport(DIRECCION_REPORTE_COMPRA, parameters, conIns);
                                                    javax.print.attribute.standard.PrinterName printerName = new javax.print.attribute.standard.PrinterName(strImpDirectaOC, null);
                                                    javax.print.attribute.PrintServiceAttributeSet printServiceAttributeSet = new javax.print.attribute.HashPrintServiceAttributeSet();
                                                    printServiceAttributeSet.add(printerName);
                                                    net.sf.jasperreports.engine.export.JRPrintServiceExporter objJRPSerExp = new net.sf.jasperreports.engine.export.JRPrintServiceExporter();
                                                    objJRPSerExp.setParameter(net.sf.jasperreports.engine.JRExporterParameter.JASPER_PRINT, reportGuiaRem);
                                                    objJRPSerExp.setParameter(net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter.PRINT_REQUEST_ATTRIBUTE_SET, objPriReqAttSet);
                                                    objJRPSerExp.setParameter(net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter.PRINT_SERVICE_ATTRIBUTE_SET, printServiceAttributeSet);
                                                    objJRPSerExp.setParameter(net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter.DISPLAY_PAGE_DIALOG, Boolean.FALSE);
                                                    objJRPSerExp.setParameter(net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter.DISPLAY_PRINT_DIALOG, Boolean.FALSE);
                                                    objJRPSerExp.exportReport();
                                                } else {
                                                    JasperPrint report = JasperFillManager.fillReport(DIRECCION_REPORTE_COMPRA, parameters, conIns);
                                                    JasperPrintManager.printReport(report, true);
                                                }
                                            } 
                                            else 
                                            {
                                                JasperPrint report = JasperFillManager.fillReport(DIRECCION_REPORTE_COMPRA, parameters, conIns);
                                                JasperPrintManager.printReport(report, true);
                                            }
                                            break;
                                    }
                                }
                            }
                        }
                    }
                } 
                else //Windows 
                {
                    impresionOrdenCompra(intTipRptOrdCom, Integer.parseInt(codTipDoc), Integer.parseInt(codDoc));
                }
            } catch (JRException e) {
                objUti.mostrarMsgErr_F1(jfrThis, e);
            }
            return true;
        }

        /*
         * MODIFICADO EFLORESA 2012-05-28
         * Esta función permite generar el reporte de acuerdo al criterio seleccionado.
         * @param intTipRpt El tipo de reporte a generar.
         * <BR>Puede tomar uno de los siguientes valores:
         * <UL>
         * <LI>0: Impresión directa.
         * <LI>1: Impresión directa (Cuadro de dialogo de impresión).
         * <LI>2: Vista preliminar.
         * </UL>
         * @return true: Si se pudo generar el reporte.
         * <BR>false: En el caso contrario.
         * 
         */
        public boolean impresionFactura(int intTipRpt, int codtipdoc, int codoc) 
        {
            String strRutRpt, strNomRpt, strRutImgLogo;
            Connection conIns = CONN_GLO;
            int i, intNumTotRpt;
            boolean blnRes = true;
            try {
                objRptSisVen.cargarListadoReportes(objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intCodMnuRepVta, objZafParSis.getCodigoUsuario());
                objRptSisVen.setVisible(true);
                if (objRptSisVen.getOpcionSeleccionada() == ZafRptSis.INT_OPC_ACE) {
                    intNumTotRpt = objRptSisVen.getNumeroTotalReportes();
                    for (i = 0; i < intNumTotRpt; i++) {
                        if (objRptSisVen.isReporteSeleccionado(i)) {
                            switch (Integer.parseInt(objRptSisVen.getCodigoReporte(i)))
                            {
                                case 19:
                                default:
                                    strRutRpt = objRptSisVen.getRutaReporte(i);
                                    strNomRpt = objRptSisVen.getNombreReporte(i);

                                    strRutImgLogo = objRptSis.getRutaReporte(i);
                                    if (objZafParSis.getCodigoEmpresa() == 1) {
                                        strRutImgLogo += "Logos/logTuv.png";
                                    } else if (objZafParSis.getCodigoEmpresa() == 2) {
                                        strRutImgLogo += "Logos/logCas.png";
                                    } else {
                                        strRutImgLogo += "Logos/logDim.png";
                                    }
                                    
                                    //Inicializar los parametros que se van a pasar al reporte.                                
                                    Map mapPar = new HashMap();
                                    mapPar.put("codEmp", new Integer(objZafParSis.getCodigoEmpresa()));
                                    mapPar.put("codLoc", new Integer(objZafParSis.getCodigoLocal()));
                                    mapPar.put("codTipDoc", new Integer(codtipdoc));
                                    mapPar.put("codDoc", new Integer(codoc));
                                    if(intCodTipDocFacEle==228) //Rose1234 
                                    {
                                          mapPar.put("RUTA_LOGO", strRutImgLogo);     //Rose
                                    }  
                                    objRptSisVen.generarReporte(strRutRpt, strNomRpt, mapPar, intTipRpt);
                                    break;
                            }
                        }
                    }
                }
            } catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(null, e);
            }
            return blnRes;
        }

        public boolean impresionOrdenCompra(int intTipRpt, int codtipdoc, int codoc) 
        {
            String strRutRpt, strNomRpt, strRutImgLogo;
            Connection conIns = CONN_GLO;
            int i, intNumTotRpt;
            boolean blnRes = true, blnLstRep = false;
            try 
            {
                blnLstRep = existeRep(conIns, objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intCodMnuOrdCom, objZafParSis.getCodigoUsuario());
                if (blnLstRep) 
                {
                    objRptSisCom.cargarListadoReportes(objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), intCodMnuOrdCom, objZafParSis.getCodigoUsuario());
                    objRptSisCom.setVisible(true);
                    if (objRptSisCom.getOpcionSeleccionada() == ZafRptSis.INT_OPC_ACE) 
                    {
                        intNumTotRpt = objRptSisCom.getNumeroTotalReportes();
                        for (i = 0; i < intNumTotRpt; i++) 
                        {
                            if (objRptSisCom.isReporteSeleccionado(i)) 
                            {
                                switch (Integer.parseInt(objRptSisCom.getCodigoReporte(i))) 
                                {
                                    case 19:
                                    default:
                                        strRutRpt = objRptSisCom.getRutaReporte(i);
                                        strNomRpt = objRptSisCom.getNombreReporte(i);

                                        strRutImgLogo = objRptSisCom.getRutaReporte(i);
                                        if (objZafParSis.getCodigoEmpresa() == 1) {
                                            strRutImgLogo += "Logos/logTuv.png";
                                        } else if (objZafParSis.getCodigoEmpresa() == 2) {
                                            strRutImgLogo += "Logos/logCas.png";
                                        } else {
                                            strRutImgLogo += "Logos/logDim.png";
                                        }

                                        //Inicializar los parametros que se van a pasar al reporte.
                                        Map mapPar = new HashMap();
                                        mapPar.put("codEmp", new Integer(objZafParSis.getCodigoEmpresa()));
                                        mapPar.put("codLoc", new Integer(objZafParSis.getCodigoLocal()));
                                        mapPar.put("CodTipDoc", new Integer(codtipdoc));
                                        mapPar.put("codDoc", new Integer(codoc));
                                        mapPar.put("RUTA_LOGO", strRutImgLogo);     //Rose

                                        objRptSisCom.generarReporte(strRutRpt, strNomRpt, mapPar, intTipRpt);
                                        break;
                                }
                            }
                        }
                    }
                }
            } 
            catch (Exception e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(null, e);
            }
            return blnRes;
        }
           
    }

    public class ZafAutPrg extends Librerias.ZafAut.ZafAut {

        public ZafAutPrg(javax.swing.JInternalFrame ifr) {
            super(ifr, objZafParSis);
        }

        /**
         * Esta función determina si es necesaria una autorización para grabar
         * el documento. Por lo general al hacer un cheque no es necesaria
         * autorización. Pero, hay ocasiones en las que se puede establecer el
         * campo "tbm_plaCta.st_aut" para que se solicite autorización para
         * poder emitir un cheque de una determinada cuenta bancaria.
         *
         * @return true: Si el documento requiere autorización. <BR>false: En el
         * caso contrario.
         */
        //------------------------------------------------------------------------------
        /**
         * CONTROL: de ZafVen02 (Facturas de Ventas) Descripcion: El precio de
         * venta digitado por el usuario no debe ser menor al precio unitario
         * del articulo.
         */
        public boolean isPreVtaMenorPreUni() {
//            System.out.println("isPreVtaMenorPreUni");
            boolean blnRes = true;
            int INT_TBL_COITM = 17;
            int INT_TBL_PREVEN = 11;
            boolean blnValPre = true;
            boolean blnValCon = true;

            if (objZafParSis.getStringConexion().toString().equals("jdbc:postgresql://172.16.8.2:5432/dbCosenco")) {

                if (txtCliCod.getText().equals("3516") || txtCliCod.getText().equals("1039") || txtCliCod.getText().equals("602")) {
                    blnValCon = false;
                }
            }

            if (blnValCon) {

                double dblPreUsr, dblPreUniItm, dblDescDigitado, dblDescAsignado = Glo_dlbMaxDes, //getDesCli(txtCliCod.getText()),
                        dblMinimo, dblValorVenta, dblCostoItm = 0, dblPorDesCom = 0, dblPorGanancia = Glo_dlbMarUti; //getMarUti(txtCliCod.getText());
                int intCoItm;
                double dblMarUtiItm = 0;
                //**********************
//            if(intTipMod==2) {
//                String FecAux=objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(),"yyyy/MM/dd");
//                Librerias.ZafDate.ZafDatePicker objDate =  new Librerias.ZafDate.ZafDatePicker(new javax.swing.JFrame(), "d/m/y") ;
//                java.util.Calendar objFec = java.util.Calendar.getInstance();
//                Librerias.ZafDate.ZafDatePicker dtePckPag =  new Librerias.ZafDate.ZafDatePicker(new javax.swing.JFrame(),"d/m/y");
//                int fecDoc [] = txtFecDoc.getFecha(dateFecCot);
//                if(fecDoc!=null){
//                    objFec.set(java.util.Calendar.DAY_OF_MONTH, fecDoc[0]);
//                    objFec.set(java.util.Calendar.MONTH, fecDoc[1] - 1);
//                    objFec.set(java.util.Calendar.YEAR, fecDoc[2]);
//                }
//                java.util.Calendar objFecPagActual = objFec.getInstance();
//                objFecPagActual.setTime(objFec.getTime());
//                objFecPagActual.add(java.util.Calendar.DATE, intNumDiaVal);
//                dtePckPag.setAnio( objFecPagActual.get(java.util.Calendar.YEAR));
//                dtePckPag.setMes( objFecPagActual.get(java.util.Calendar.MONTH)+1);
//                dtePckPag.setDia(objFecPagActual.get(java.util.Calendar.DAY_OF_MONTH));
//                String fecha = objUti.formatearFecha(dtePckPag.getText(),"dd/MM/yyyy","yyyy/MM/dd");
//
//                java.util.Date fe1 = objUti.parseDate(fecha,"yyyy/MM/dd");
//                java.util.Date fe2 = objUti.parseDate(FecAux,"yyyy/MM/dd");
//
//                if(fe1.equals(fe2))
//                    blnValPre=false;
//                else if(fe1.after(fe2))
//                    blnValPre=false;
//                else
//                    System.out.println(" ");  //NO HAY DATOS DE FECHA...");
//
//            }

                //**********************


//            if(txtCot.getText().trim().equals("")){
//
//                blnValPre=true;
//            }
//            else{
//                blnRes =  VerificaPermisodeImpresion(strNomFuncValPre,CONN_GLO);
//            }

                blnHayCam = blnHayCam_glo;

                if (blnValPre == true || blnHayCam_glo_tbl == true) {
                    blnRes = true;

                    for (int i = 0; i < tblDat.getRowCount(); i++) {
                        if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                            dblPreUsr = objUti.redondeo(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PREUNI) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_PREUNI).toString()))), 6);

                            dblMarUtiItm = objUti.redondear(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_MARUTI) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_MARUTI).toString()))), 2);

                            int intTipPre = 0;
                            //**********************
                            if (tblDat.getValueAt(i, INT_TBL_ITMTER) != null) {
                                if (tblDat.getValueAt(i, INT_TBL_ITMTER).toString().trim().equalsIgnoreCase("S")) {
                                    dblPreUniItm = 0;
                                } else {
                                    dblPreUniItm = getPreUni(i, objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)));
                                    intTipPre = 1;
                                }
                            } else {
                                dblPreUniItm = getPreUni(i, objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)));
                                intTipPre = 1;
                            }
                            //**********************

                            dblDescDigitado = objUti.redondeo(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_PORDES).toString()))), 2);
                            dblValorVenta = (dblDescDigitado != 0) ? (dblPreUsr - (dblPreUsr * dblDescDigitado / 100)) : dblPreUsr;


                            //****************
                            if (dblPreUniItm != 0) {
                                dblMinimo = (dblDescAsignado != 0) ? (dblPreUniItm - (dblPreUniItm * dblDescAsignado / 100)) : dblPreUniItm;

                            } else {

                                double dblStkAct = 0;

                                //*************************
                                if (tblDat.getValueAt(i, INT_TBL_ITMTER) != null) {
                                    if (tblDat.getValueAt(i, INT_TBL_ITMTER).toString().trim().equalsIgnoreCase("S")) {
                                        dblStkAct = 0;
                                    } else {
                                        dblStkAct = getStkAct((tblDat.getValueAt(i, INT_TBL_CODITM) == null) ? "" : tblDat.getValueAt(i, INT_TBL_CODITM).toString());
                                    }
                                } else {
                                    dblStkAct = getStkAct((tblDat.getValueAt(i, INT_TBL_CODITM) == null) ? "" : tblDat.getValueAt(i, INT_TBL_CODITM).toString());
                                }

                                //**************************                                     

                                if (!(tblDat.getValueAt(i, INT_TBL_ITMTER).toString().trim().equals("S"))) { //if(dblStkAct != 0)
                                    dblCostoItm = getCosUni((tblDat.getValueAt(i, INT_TBL_CODITM) == null) ? "" : tblDat.getValueAt(i, INT_TBL_CODITM).toString());
                                } else {

                                    if (tblDat.getValueAt(i, INT_TBL_PRE_COS) == null) {
                                        dblCostoItm = 0.00;
                                    } else {
                                        dblCostoItm = Double.parseDouble(tblDat.getValueAt(i, INT_TBL_PRE_COS).toString());
                                    }


                                    if (tblDat.getValueAt(i, INT_TBL_DESPRECOM) == null) {
                                        dblPorDesCom = 0.00;
                                    } else {
                                        dblPorDesCom = Double.parseDouble(tblDat.getValueAt(i, INT_TBL_DESPRECOM).toString());
                                    }
//24.12
                                    dblCostoItm = objUti.redondear((dblCostoItm - (dblCostoItm * (dblPorDesCom / 100))), 2);


                                }
                                //3.859  =  24.12 *0.16
                                dblMinimo = dblCostoItm * dblPorGanancia;
                                // 24.15859 =  24.12 + 3.859/100
                                dblMinimo = dblCostoItm + ((dblMinimo == 0) ? 0 : (dblMinimo / 100));
                            }

                            
                            dblValorVenta = objUti.redondear(dblValorVenta, 3);
                            dblMinimo = objUti.redondear(dblMinimo, 3);

                            double dblPor = (1 - (dblCostoItm / dblValorVenta)) * 100;


                            dblPor = objUti.redondear(dblPor, 3);


                            if (intTipPre == 1) 
                            {
                                if (dblValorVenta < dblMinimo)
                                {
                                    blnRes = false;
                                    tblDat.setValueAt(true, i, INT_TBL_BLNPRE); // tblDat.setValueAt("true",i,INT_TBL_BLNPRE);
                                    //System.out.println(" 3 ..True........... ");
                                }
                            } 
                            else 
                            {
                                if (dblPor < dblMarUtiItm) 
                                {
                                    blnRes = false;
                                    tblDat.setValueAt(true, i, INT_TBL_BLNPRE); // tblDat.setValueAt("true",i,INT_TBL_BLNPRE);
                                    //System.out.println(" 4 ..True........... ");
                                    //tblDat.setValueAt(new Boolean(true),i,INT_TBL_BLNPRE);
                                }
                            }
                        }
                    }
                }


                blnHayCam = blnHayCam_glo;

            }
            return blnRes;
        }

        /*
         * FUNCION QUE PERMITE CONTROLAR EL PRECIO DEL ITEM
         * Y TAMBIEN LA FORMA DE PAGO
         *
         */
        public boolean isPreUniVtaValForPagAut() {
            boolean blnRes = true;
            boolean blnValCon = true;
            int INT_TBL_COITM = 17;
            int INT_TBL_PREVEN = 11;
            boolean blnValPre = true;
            try {
                System.out.println("isPreUniVtaValForPagAut");

                if (objZafParSis.getStringConexion().toString().equals("jdbc:postgresql://172.16.8.2:5432/dbCosenco")) {

                    if (txtCliCod.getText().equals("3516") || txtCliCod.getText().equals("1039") || txtCliCod.getText().equals("602")) {
                        blnValCon = false;
                    }
                }

                if (blnValCon) {  // true

                    double dblPreUsr, dblPreUniItm, dblDescDigitado, dblDescAsignado = Glo_dlbMaxDes,
                            dblMinimo, dblValorVenta, dblCostoItm = 0, dblPorDesCom = 0, dblPorGanancia = Glo_dlbMarUti;
                    int intCoItm;
                    double dblMarUtiItm = 0;

//           java.math.BigDecimal precio = new java.math.BigDecimal("0.00");
//           java.math.BigDecimal costo = new java.math.BigDecimal("0.00");
//           java.math.BigDecimal marguen = new java.math.BigDecimal("0.00");
//           java.math.BigDecimal valor1 = new java.math.BigDecimal("1.0");
//           java.math.BigDecimal valor2 = new java.math.BigDecimal("100.0");
//           java.math.BigDecimal result = new java.math.BigDecimal("0.0");

                    //**********************
                    if (intTipMod == 2) { // Jota
                        String FecAux = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), "yyyy/MM/dd");
                        Librerias.ZafDate.ZafDatePicker objDate = new Librerias.ZafDate.ZafDatePicker(new javax.swing.JFrame(), "d/m/y");
                        Calendar objFec = Calendar.getInstance();
                        Librerias.ZafDate.ZafDatePicker dtePckPag = new Librerias.ZafDate.ZafDatePicker(new javax.swing.JFrame(), "d/m/y");
                        int fecDoc[] = txtFecDoc.getFecha(dateFecCot);
                        if (fecDoc != null) {
                            objFec.set(Calendar.DAY_OF_MONTH, fecDoc[0]);
                            objFec.set(Calendar.MONTH, fecDoc[1] - 1);
                            objFec.set(Calendar.YEAR, fecDoc[2]);
                        }
                        Calendar objFecPagActual = Calendar.getInstance();
                        objFecPagActual.setTime(objFec.getTime());
                        objFecPagActual.add(Calendar.DATE, intNumDiaVal);
                        dtePckPag.setAnio(objFecPagActual.get(Calendar.YEAR));
                        dtePckPag.setMes(objFecPagActual.get(Calendar.MONTH) + 1);
                        dtePckPag.setDia(objFecPagActual.get(Calendar.DAY_OF_MONTH));
                        String fecha = objUti.formatearFecha(dtePckPag.getText(), "dd/MM/yyyy", "yyyy/MM/dd");

                        java.util.Date fe1 = objUti.parseDate(fecha, "yyyy/MM/dd");
                        java.util.Date fe2 = objUti.parseDate(FecAux, "yyyy/MM/dd");

                        if (fe1.equals(fe2)) {
                            blnValPre = false;
                        } else if (fe1.after(fe2)) {
                            blnValPre = false;
                        } else {
                            System.out.println(" "); //NO HAY DATOS DE FECHA...");
                        }
                    }

                    //**********************


                    boolean Estado = false; 
                    if (txtCot.getText().trim().equals("")) {
                        Estado = false;
                        blnValPre = true;
                    } else {

                        blnRes = VerificaPermisodeImpresion(strNomFuncValPre, CONN_GLO);

                    }

                    blnHayCam = blnHayCam_glo;


                    if (blnValPre == true || blnHayCam_glo_tbl == true || blnHayCam == true) {
                        blnRes = true;

                        for (int i = 0; i < tblDat.getRowCount(); i++) {
                            if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                                /*PRECIO QUE PONE EL VENDEDOR*/
                                dblPreUsr = objUti.redondeo(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PREUNI) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_PREUNI).toString()))), 6);

                                dblMarUtiItm = objUti.redondear(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_MARUTI) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_MARUTI).toString()))), 2);

//                        marguen = new java.math.BigDecimal( ((tblDat.getValueAt(i, INT_TBL_MARUTI)==null)?"0.0":tblDat.getValueAt(i, INT_TBL_MARUTI).toString()) );                            

                                int intTipPre = 0;
                                //**********************
                                if (tblDat.getValueAt(i, INT_TBL_ITMTER) != null) {
                                    if (tblDat.getValueAt(i, INT_TBL_ITMTER).toString().trim().equalsIgnoreCase("S")) {
                                        dblPreUniItm = 0;
                                    } else {
                                        dblPreUniItm = getPreUni(i, objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)));
                                        intTipPre = 1;
                                    }
                                } else {
                                    dblPreUniItm = getPreUni(i, objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)));
                                    intTipPre = 1;
                                }

                                //**********************

                                dblDescDigitado = objUti.redondeo(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_PORDES).toString()))), 2);
                                dblValorVenta = (dblDescDigitado != 0) ? (dblPreUsr - (dblPreUsr * dblDescDigitado / 100)) : dblPreUsr;

//                            precio = new java.math.BigDecimal( String.valueOf(dblValorVenta) );                            

//REVISA AKI JOTA
                                if (dblPreUniItm != 0) {
                                    dblMinimo = (dblDescAsignado != 0) ? (dblPreUniItm - (dblPreUniItm * dblDescAsignado / 100)) : dblPreUniItm;

                                } else {

                                    double dblStkAct = 0;

                                    //*************************
                                    if (tblDat.getValueAt(i, INT_TBL_ITMTER) != null) {
                                        if (tblDat.getValueAt(i, INT_TBL_ITMTER).toString().trim().equalsIgnoreCase("S")) {
                                            dblStkAct = 0;
                                        } else {
                                            dblStkAct = getStkAct((tblDat.getValueAt(i, INT_TBL_CODITM) == null) ? "" : tblDat.getValueAt(i, INT_TBL_CODITM).toString());
                                        }
                                    } else {
                                        dblStkAct = getStkAct((tblDat.getValueAt(i, INT_TBL_CODITM) == null) ? "" : tblDat.getValueAt(i, INT_TBL_CODITM).toString());
                                    }

                                    //**************************

                                    if (!(tblDat.getValueAt(i, INT_TBL_ITMTER).toString().trim().equalsIgnoreCase("S"))) //if(dblStkAct != 0)
                                    {
                                        dblCostoItm = getCosUni((tblDat.getValueAt(i, INT_TBL_CODITM) == null) ? "" : tblDat.getValueAt(i, INT_TBL_CODITM).toString());
                                    } else {
                                        if (tblDat.getValueAt(i, INT_TBL_PRE_COS) == null) {
                                            dblCostoItm = 0.00;
                                        } else {
                                            dblCostoItm = Double.parseDouble(tblDat.getValueAt(i, INT_TBL_PRE_COS).toString());
                                        }

                                        if (tblDat.getValueAt(i, INT_TBL_DESPRECOM) == null) {
                                            dblPorDesCom = 0.00;
                                        } else {
                                            dblPorDesCom = Double.parseDouble(tblDat.getValueAt(i, INT_TBL_DESPRECOM).toString());
                                        }

                                        dblCostoItm = objUti.redondear((dblCostoItm - (dblCostoItm * (dblPorDesCom / 100))), objZafParSis.getDecimalesBaseDatos());

                                    }

                                    dblMinimo = dblCostoItm * dblPorGanancia;
                                    dblMinimo = dblCostoItm + ((dblMinimo == 0) ? 0 : (dblMinimo / 100));
                                }


                                dblValorVenta = objUti.redondear(dblValorVenta, 3);
                                dblMinimo = objUti.redondear(dblMinimo, 3);


//                            costo= new java.math.BigDecimal( String.valueOf(dblCostoItm) );
//                            result = costo.divide( precio, 6, java.math.BigDecimal.ROUND_HALF_UP );
//                            result = valor1.subtract(result);
//                            result = result.multiply( valor2 );  
//                            result = result.setScale(2, java.math.BigDecimal.ROUND_HALF_UP);
//                            marguen = marguen.setScale(2, java.math.BigDecimal.ROUND_HALF_UP);  

                                double dblPor = (1 - (dblCostoItm / dblValorVenta)) * 100;
                                dblPor = objUti.redondear(dblPor, 2);

                                /*JoséMario  11/Agos/2015 */
                                double dblMas;
                                dblMas=dblPreUniItm*0.05; /* 16/Sep/2015:.. JoséMario  */
                                dblMas=dblPreUniItm+dblMas; 
                                double dblMenos;
                                dblMenos=dblPreUniItm*0.05; /* 16/Sep/2015:.. JoséMario  */
                                dblMenos=dblPreUniItm-dblMenos; 
                                if (intTipPre == 1) {
                                    if (dblPreUniItm > 0.00) {  // PRECIO DEL ITEM 
                                        if (dblValorVenta < dblMinimo) {  //  PRECIO DEL ITEM PUESTO POR USUARIO - DESCUENTO < VALOR MINIMO DE VENTA CON DESCUENTO
                                            blnRes = false;
                                            //tblDat.setValueAt(new Boolean(true),i,INT_TBL_BLNPRE); //
                                            tblDat.setValueAt("true", i, INT_TBL_BLNPRE); //INT_TBL_BLNPRE: 
                                        }
                                        if (dblPreUsr > dblMas) {  // PRECIO NO MAYOR DEL 5% 
                                            blnRes = false;
                                            //tblDat.setValueAt(new Boolean(true),i,INT_TBL_BLNPRE); //
                                            tblDat.setValueAt("true", i, INT_TBL_BLNPRE); //INT_TBL_BLNPRE: 
                                            System.out.println(" 2 ..True........... ");
                                        }
                                        if (dblPreUsr < dblMenos) {  // PRECIO NO MENOR DEL 5% 
                                            blnRes = false;
                                            //tblDat.setValueAt(new Boolean(true),i,INT_TBL_BLNPRE); //
                                            tblDat.setValueAt("true", i, INT_TBL_BLNPRE); //INT_TBL_BLNPRE: 
                                            System.out.println(" 3 ..True........... ");
                                        }

                                    } else {
                                        blnRes = false;
                                        //tblDat.setValueAt(new Boolean(true),i,INT_TBL_BLNPRE); //
                                        tblDat.setValueAt("true", i, INT_TBL_BLNPRE);
                                    }
                                } else {

                                    if (dblPor < dblMarUtiItm) {
                                        blnRes = false;
                                        //tblDat.setValueAt(new Boolean(true),i,INT_TBL_BLNPRE); //
                                        tblDat.setValueAt("true", i, INT_TBL_BLNPRE);
                                    }
                                }

                            }
                        }
                    };

                    blnHayCam = blnHayCam_glo;

                    if (blnRes) {
                        blnRes = isUsrForPag();
                    }
                }
            } catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }

            return blnRes;
        }

        public boolean VerificaPermisodeImpresion(String funcion, java.sql.Connection conn) {
            boolean lbnEst = false;
//            System.out.println("VerificaPermisodeImpresion");
            int IntCodEmp = objZafParSis.getCodigoEmpresa();
            int IntCodLoc = objZafParSis.getCodigoLocal();
            String StrCodCot = txtCot.getText();
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            java.sql.Connection conLoc;
           
            String strSql = "SELECT b.st_reg,b.st_cum FROM tbm_cabautcotven as a";
                   strSql+=" INNER JOIN tbm_detautcotven AS b ON (a.co_emp=b.co_emp and a.co_loc=b.co_loc and a.co_cot=b.co_cot and a.co_aut=b.co_aut)";
                   strSql+=" INNER JOIN tbm_regneg as c ON(b.co_emp=c.co_emp and b.co_loc=c.co_loc and b.co_regneg=c.co_reg and c.co_mnu=" + objZafParSis.getCodigoMenu() + " and c.tx_nomfun='" + funcion + "')";
                   strSql+=" WHERE a.co_cot=" + StrCodCot + " and a.co_emp=" + IntCodEmp ;
//                   if(blnBtnInmAct){
//                       strSql+="        and a.co_loc=" + intCodLocInm + "";
//                   }
//                   else{
                       strSql+="        and a.co_loc=" + IntCodLoc + "";
//                   }
                   
                   strSql+=" AND b.co_aut=( SELECT max(co_aut) ";
                   strSql+="                FROM  tbm_cabautcotven WHERE co_emp=" + IntCodEmp ;
//                   if(blnBtnInmAct){
//                        strSql+="" +                 " AND co_loc=" + intCodLocInm + " AND  co_cot=" + StrCodCot + " )";
//                   }else{
                        strSql+="" +                 " AND co_loc=" + IntCodLoc + " AND  co_cot=" + StrCodCot + " )";
//                   }
            System.out.println("VerificaPermisodeImpresion verificacionDePermisos: " + strSql);
            try {
                 conLoc=DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                if (conLoc != null) {
                    stmLoc = conLoc.createStatement();
                    rstLoc = stmLoc.executeQuery(strSql);
                    if (rstLoc.next()) {
                        if (rstLoc.getString("st_reg") != null) {//
                            if (rstLoc.getString("st_cum").equals("S")) {
                                lbnEst = true;
                            } else if (rstLoc.getString("st_reg").equals("A")) {
                                lbnEst = true;
                            } else {
                                lbnEst = false;  //  TIENE PROBLEMA DE PRECIO Y NO ESTA AUTORIZADA
                            }
                        }
                    } else {
                        lbnEst = true;
                    }
                    conLoc.close();
                    rstLoc.close();
                    stmLoc.close();
                    conLoc=null;
                    rstLoc=null;
                    stmLoc=null;
                }
            } catch (SQLException Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                return lbnEst;
            }
            catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                return lbnEst;
            }
            return lbnEst;
        }

        private double getMarUti(String int_co_cli) {
            double dblMarUti = 0;
            try {
//                System.out.println("getMarUti");
                java.sql.Connection conUni = java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                if (conUni != null) {
                    java.sql.Statement stmUni = conUni.createStatement();
                    String sSQL = "SELECT nd_maruti from tbm_cli as cli "
                            + " where cli.co_emp = " + objZafParSis.getCodigoEmpresa() + " and "
                            + "       cli.co_cli = " + int_co_cli;
                    java.sql.ResultSet rstUni = stmUni.executeQuery(sSQL);
                    if (rstUni.next()) {
                        dblMarUti = rstUni.getDouble("nd_maruti");
                    }
                    rstUni.close();
                    stmUni.close();
                    conUni.close();
                    rstUni = null;
                    stmUni = null;
                    conUni = null;
                }
            } catch (java.sql.SQLException Evt) {
                return dblMarUti;
            } catch (Exception Evt) {
                return dblMarUti;
            }
            return dblMarUti;
        }

        private double getDesCli(String int_co_cli) {
            double dblDesCli = 0;
            try {
//                System.out.println("getDesCli");
                java.sql.Connection conUni = java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                if (conUni != null) {
                    java.sql.Statement stmUni = conUni.createStatement();
                    String sSQL = "SELECT nd_maxdes from tbm_cli as cli "
                            + " where cli.co_emp = " + objZafParSis.getCodigoEmpresa() + " and "
                            + "       cli.co_cli = " + int_co_cli;
                    java.sql.ResultSet rstUni = stmUni.executeQuery(sSQL);
                    if (rstUni.next()) {
                        dblDesCli = rstUni.getDouble("nd_maxdes");
                    }
                    rstUni.close();
                    stmUni.close();
                    conUni.close();
                    rstUni = null;
                    stmUni = null;
                    conUni = null;
                }
            } catch (java.sql.SQLException Evt) {
                return dblDesCli;
            } catch (Exception Evt) {
                return dblDesCli;
            }
            return dblDesCli;
        }

        //**********************************************//////*************************************************        
        private double getCosUni(String int_co_itm) {
            double dblPreUni = 0;
            try {
//                System.out.println("getCosUni");
                java.sql.Connection conUni = java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
                if (conUni != null) {
                    java.sql.Statement stmUni = conUni.createStatement();
                    String sSQL = "  SELECT a1.nd_cosUni FROM tbm_inv AS a1"
                            + " INNER JOIN tbm_equInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm)"
                            + " WHERE a2.co_emp=" + objZafParSis.getCodigoEmpresaGrupo() + " AND a2.co_itmMae=(SELECT co_itmMae FROM tbm_equInv WHERE co_emp= " + objZafParSis.getCodigoEmpresa() + " AND co_itm=" + int_co_itm + ")";
                    java.sql.ResultSet rstUni = stmUni.executeQuery(sSQL);
                    if (rstUni.next()) {
                        dblPreUni = rstUni.getDouble("nd_cosuni");
                    }
                    rstUni.close();
                    stmUni.close();
                    conUni.close();
                    rstUni = null;
                    stmUni = null;
                    conUni = null;
                }
            } catch (java.sql.SQLException Evt) {
                return dblPreUni;
            } catch (Exception Evt) {
                return dblPreUni;
            }
            return dblPreUni;
        }

        //**********************************************//////*************************************************
        /**
         * CONTROL: de ZafVen02 (Facturas de Ventas) Descripcion:(descuento para
         * vendedor) El porcentaje de descuento debe estar dentro de los
         * paramtros establecidos para este vendedor
         */
        public boolean isDesForVen() {
//            System.out.println("isDesForVen");
            for (int i = 0; i < tblDat.getRowCount() - 1; i++) {
                double dblDescAsignado = objUti.redondeo(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_PORDES).toString()))), 2);
                if (dblDescAsignado > 25) {
                    return false;
                }
            }
            return true;
        }

        /**
         * Recorre la tabla de detalle de pagos para verificar ke los dias de
         * creditp sean 0 en cuyo caso retornara true
         *
         * @return true si la venta se esta ralizando de contado
         */
        private boolean isVtaCon() {
//            System.out.println("isVtaCon");
            boolean blnIsVtaCon = true;
            for (int i = 0; i < tblPag.getRowCount() && blnIsVtaCon; i++) {
                if (((tblPag.getValueAt(i, INT_TBL_DIACRE) == null) ? 0 : Integer.parseInt(tblPag.getValueAt(i, INT_TBL_DIACRE) + "")) > 0) {
                    blnIsVtaCon = false;
                }
            }
            return blnIsVtaCon;
        }

        /**
         * CONTROL: para las ventas de contado.
         */
        public boolean isVtaConMon() {
            boolean blnisDocVen = true;
            String sSQL = "";
            try {
                
                blnisDocVen = true;
                if (CONN_GLO != null) {
                    java.sql.Statement stmMonCre = CONN_GLO.createStatement();


                    double dlbSumMon = 0;
                    for (int i = 0; i < tblPag.getRowCount(); i++) {
                        String strDiaCre = ((tblPag.getValueAt(i, 1) == null || tblPag.getValueAt(i, 1).equals("")) ? "0" : tblPag.getValueAt(i, 1).toString());
                        String strRet = ((tblPag.getValueAt(i, 3) == null || tblPag.getValueAt(i, 3).equals("")) ? "0" : tblPag.getValueAt(i, 3).toString());

                        if (strDiaCre.trim().equals("0")) {
                            if (strRet.trim().equals("0")) {
                                dlbSumMon += Double.parseDouble(((tblPag.getValueAt(i, 4) == null || tblPag.getValueAt(i, 4).equals("")) ? "0" : tblPag.getValueAt(i, 4).toString()));
                            }
                        }
                    }

                    sSQL = "SELECT numVenCon, abs(valor) ,  ne_nummaxvencon, nd_monmaxvencon  "
                            + "  ,CASE WHEN  numVenCon>=ne_nummaxvencon THEN 1 else 0  END  AS NumVenConCli  "
                            + "  ,CASE WHEN (abs(valor)+" + dlbSumMon + ")>=nd_monmaxvencon THEN 1 else 0  END AS MonCanVen "
                            + ",( "
                            + " SELECT count(distinct(a1.co_doc)) as numVenCon FROM tbm_cabMovInv AS a1 "
                            + " INNER JOIN tbm_pagMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc)   "
                            + " WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa() + " AND a1.co_loc=" + objZafParSis.getCodigoLocal() + " AND a1.co_tipdoc= " + intCodTipDocFacEle
                            + " AND a1.co_cli=" + txtCliCod.getText() + " "
                            + " AND a1.st_reg NOT IN ('I','E') AND a1.ST_IMP IN ('S') AND a2.st_reg IN ('A','C')  "
                            + " AND ( a1.st_excDocConVenCon='N' OR a1.st_excDocConVenCon is null ) "
                            + " AND (a2.nd_porret=0 or a2.nd_porret is null ) and (a2.ne_diacre=0 or a2.ne_diacre is null)      AND (a2.nd_abo+a2.mo_pag) < 0 "
                            + " ) as maxnumvenconCli "
                            + ", "
                            + "(  select ne_nummaxvencon from tbm_cli where co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_cli=" + txtCliCod.getText() + " ) as nummaxvenCondecli "
                            + " FROM ("
                            + " SELECT * FROM ("
                            + " 	SELECT count(distinct(a1.co_doc)) as numVenCon FROM tbm_cabforpag as a "
                            + "   inner join tbm_cabMovInv AS a1 on (a1.co_emp=a.co_emp and a1.co_forpag=a.co_forpag)  "
                            + "	INNER JOIN tbm_pagMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) "
                            + " inner join tbm_cli as cli on (cli.co_emp=a1.co_Emp and cli.co_cli=a1.co_cli and ( cli.ne_diagra<=0  or cli.ne_diagra = null )) "
                            + "	WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa() + " AND a1.co_loc=" + objZafParSis.getCodigoLocal() + " AND a1.co_tipdoc=" + intCodTipDocFacEle
                            + // AND a1.co_cli="+txtCliCod.getText()+"
                            "   AND a1.st_reg NOT IN ('I','E') AND a1.ST_IMP IN ('S')  AND a2.st_reg IN ('A','C') "
                            + " AND ( a1.st_excDocConVenCon='N' OR a1.st_excDocConVenCon is null ) "
                            + "	AND (a2.nd_porret=0 or a2.nd_porret is null ) and (a2.ne_diacre=0 or a2.ne_diacre is null)"
                            + "	AND (a2.nd_abo+a2.mo_pag) < 0  AND a.ne_tipforpag IN (1, 5) "
                            + //"  AND (a2.fe_venChq IS NULL OR a2.nd_monChq IS NULL OR a2.fe_ven<a2.fe_venChq OR (a2.mo_pag+a2.nd_monChq)<0) " +
                            "  AND (a2.fe_venChq IS NULL OR a2.nd_monChq IS NULL OR current_date < a2.fe_venChq OR (a2.mo_pag+a2.nd_monChq)<0) "
                            + " ) AS x,("
                            + "	SELECT sum( -(a2.mo_pag+a2.nd_abo+(CASE WHEN a2.nd_monChq IS NULL THEN 0 ELSE (CASE WHEN current_date < a2.fe_venChq THEN 0 ELSE a2.nd_monChq END) END)) ) AS  valor  "
                            + "   FROM tbm_cabforpag as a "
                            + "   inner join tbm_cabMovInv AS a1 on (a1.co_emp=a.co_emp and a1.co_forpag=a.co_forpag)  "
                            + "	INNER JOIN tbm_pagMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) "
                            + " inner join tbm_cli as cli on (cli.co_emp=a1.co_Emp and cli.co_cli=a1.co_cli and ( cli.ne_diagra<=0  or cli.ne_diagra = null )) "
                            + "	WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa() + " AND a1.co_loc=" + objZafParSis.getCodigoLocal() + " AND a1.co_tipdoc=" + intCodTipDocFacEle
                            + // AND a1.co_cli="+txtCliCod.getText()+"
                            "   AND a1.st_reg NOT IN ('I','E') AND a1.ST_IMP IN ('S')  AND a2.st_reg IN ('A','C') "
                            + " AND ( a1.st_excDocConVenCon='N' OR a1.st_excDocConVenCon is null ) "
                            + "	AND (a2.nd_porret=0 or a2.nd_porret is null ) and (a2.ne_diacre=0 or a2.ne_diacre is null)"
                            + "	AND (a2.nd_abo+a2.mo_pag) < 0  AND  a.ne_tipforpag IN (1, 5)   "
                            + "   AND (a2.fe_venChq IS NULL OR a2.nd_monChq IS NULL OR current_date <a2.fe_venChq OR (a2.mo_pag+a2.nd_monChq)<0)  "
                            + ") AS y"
                            + ",("
                            + "    SELECT  ne_nummaxvencon, nd_monmaxvencon FROM tbm_loc where co_emp=" + objZafParSis.getCodigoEmpresa() + " and co_loc=" + objZafParSis.getCodigoLocal() + " "
                            + " ) AS z "
                            + ") AS x";

//                    System.out.println(">>> dblDiaGraCli:  "+dblDiaGraCli );
//                    System.out.println(">>> intTipForPagCotizacion:  "+intTipForPagCotizacion );
//                    System.out.println(">>> isVtaConMon:  "+sSQL );

                    if (dblDiaGraCli == 0 && (intTipForPagCotizacion == 1 || intTipForPagCotizacion == 5) ) {
                        java.sql.ResultSet rstMonCre = stmMonCre.executeQuery(sSQL);
                        while (rstMonCre.next()) {
                            if (rstMonCre.getInt("NumVenConCli") == 1) {
                                blnisDocVen = false;
                                break;
                            } else if (rstMonCre.getInt("MonCanVen") == 1) {
                                blnisDocVen = false;
                                break;
                            } else if (rstMonCre.getInt("maxnumvenconCli") > rstMonCre.getInt("nummaxvenCondecli")) {
                                blnisDocVen = false;
                                break;
                            }
                        }
                        rstMonCre.close();
                        rstMonCre = null;
                    }
                    stmMonCre.close();
                    stmMonCre = null;
                }

                if (intTipForPagCotizacion == 4) {
                    blnisDocVen = true;
                }

            } catch (SQLException Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnisDocVen = false;
            } catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnisDocVen = false;
            }

            return blnisDocVen;
        }

        int intDiasGraciaLSC=10;  // --1--:JM Fecha de vencimiento no excedan los 10 dias de vencido  Solicitado por LSC el 4/Sep/2019    
        double dblValMinCreAsig=0.05;   // --2--:JM Solicitado por LSC el 4/Sep/2019, el mon 
        
        /**
         * CONTROL: Que el client no tenga documentos vencidos.
         */
        public boolean isDocVen() {
            boolean blnisDocVen = true;
            boolean blnValCon = true;
            java.sql.ResultSet rstMonCre;
            try {
                System.out.println("isDocVen  JM v 0.01");
                if (objZafParSis.getStringConexion().toString().equals("jdbc:postgresql://172.16.8.2:5432/dbCosenco")) {
                    if (txtCliCod.getText().equals("3516") || txtCliCod.getText().equals("1039") || txtCliCod.getText().equals("602")) {
                        blnValCon = false;
                    }
                }
                if (blnValCon) {

                    blnisDocVen = true;
                    if (CONN_GLO != null) {
                        java.sql.Statement stmMonCre = CONN_GLO.createStatement();
                        // --1--:JM Fecha de vencimiento no excedan los 10 dias de vencido  Solicitado por LSC el 4/Sep/2019   
                        String isDocVen = "";
                        isDocVen+=" SELECT cli.ne_diaGra, a2.fe_ven ,a2.fe_ven+(cli.ne_diagra ) as fe_venReal, a2.fe_ven+(cli.ne_diagra+"+intDiasGraciaLSC+") as fe_venReal_nueva , CURRENT_date as hoy \n";   
                        isDocVen+=" FROM tbm_cabMovInv AS a1   \n";
                        isDocVen+=" INNER join tbm_cli as cli ON (cli.co_emp=a1.co_Emp and cli.co_cli=a1.co_cli)  \n";
                        isDocVen+=" INNER JOIN tbm_pagMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc  AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc)  \n";
                        isDocVen+=" INNER JOIN tbm_cabTipDoc AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND  a1.co_tipDoc=a3.co_tipDoc)  \n";
                        isDocVen+=" WHERE a1.co_emp="+objZafParSis.getCodigoEmpresa()+" AND  a1.co_cli="+txtCliCod.getText()+" AND  a1.st_reg IN ('A','R','C','F') AND \n";
                        isDocVen+="         a3.ne_mod In (1,3) AND a2.st_reg IN ('A','C') AND (a2.mo_pag+a2.nd_abo)<0   AND a2.fe_ven+(cli.ne_diagra+"+intDiasGraciaLSC+" )<=CURRENT_TIMESTAMP   \n";
                        isDocVen+=" ORDER BY a2.co_emp, a2.co_loc, a2.co_tipDoc, a2.co_doc, a2.co_reg \n";
                        if (!(dblDiaGraCli == 0 && (intTipForPagCotizacion == 1 || intTipForPagCotizacion == 5))) {
                            System.out.println(" ----->>>1 isDocVen <<<----  \n" + isDocVen);
                            rstMonCre = stmMonCre.executeQuery(isDocVen);
                            if (rstMonCre.next()) {
                                // --2--:JM Solicitado por LSC el 4/Sep/2019, el mon 
                                isDocVen = "";
                                isDocVen+=" SELECT a.* \n";
                                isDocVen+=" FROM ( \n";
                                isDocVen+="     SELECT   (cli.nd_monCre * "+dblValMinCreAsig+") as CreditoMnosCinco,  SUM(a2.mo_pag+a2.nd_abo) as deudaTotal \n";
                                isDocVen+="     FROM tbm_cabMovInv AS a1   \n";
                                isDocVen+="     INNER join tbm_cli as cli ON (cli.co_emp=a1.co_Emp and cli.co_cli=a1.co_cli)  \n";
                                isDocVen+="     INNER JOIN tbm_pagMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc  AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc)   \n";
                                isDocVen+="     INNER JOIN tbm_cabTipDoc AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND  a1.co_tipDoc=a3.co_tipDoc)   \n";
                                isDocVen+="     WHERE a1.co_emp="+objZafParSis.getCodigoEmpresa()+" AND  a1.co_cli="+txtCliCod.getText()+" AND  a1.st_reg IN ('A','R','C','F') AND a3.ne_mod In (1,3) AND a2.st_reg IN ('A','C') AND   \n";
                                isDocVen+="           (a2.mo_pag+a2.nd_abo)<0   AND a2.fe_ven+(cli.ne_diagra +"+intDiasGraciaLSC+")<=CURRENT_TIMESTAMP   \n";
                                isDocVen+="     GROUP BY cli.nd_monCre   \n";
                                isDocVen+=" ) as a \n";
                                isDocVen+=" WHERE a.CreditoMnosCinco + deudaTotal < 0  \n";
                                System.out.println(" ----->>>2 isDocVen <<<----  \n"+ isDocVen);
                                rstMonCre = stmMonCre.executeQuery(isDocVen);
                                if (rstMonCre.next()) {
                                    blnisDocVen = false;
                                }
                            }
                            rstMonCre.close();
                            rstMonCre = null;
                        }
                        stmMonCre.close();
                        stmMonCre = null;
                    }
                }
                if (intTipForPagCotizacion == 4) {
                    blnisDocVen = true;
                }

            } catch (SQLException Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnisDocVen = false;
            } catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnisDocVen = false;
            }
            return blnisDocVen;
        }

        /**
         * CONTROL: De retenciones
         */
        public boolean isRet() {
            boolean blnisDocRet = true;
            try {
//                System.out.println("isRet");
                blnisDocRet = true;
                if (CONN_GLO != null) {
                    java.sql.Statement stmMonCre = CONN_GLO.createStatement();

                    String sSQL = "SELECT a2.nd_abo  FROM tbm_cabMovInv AS a1 "
                            + " INNER JOIN tbm_pagMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc "
                            + " AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) "
                            + " INNER JOIN tbm_cabTipDoc AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND "
                            + " a1.co_tipDoc=a3.co_tipDoc) WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa() + " AND a1.co_cli=" + txtCliCod.getText()
                            + " AND a1.st_reg IN ('A','R','C','F') AND a2.st_reg IN ('A','C') AND (a2.mo_pag+a2.nd_abo)<0  and a2.nd_porret <> 0   AND a2.fe_ven+a2.ne_diagra<=" + objZafParSis.getFuncionFechaHoraBaseDatos() + " "
                            + " ORDER BY a2.co_emp, a2.co_loc, a2.co_tipDoc, a2.co_doc, a2.co_reg";
                    ///   //System.out.println(" por falso  >>> "+ sSQL );
                    java.sql.ResultSet rstMonCre = stmMonCre.executeQuery(sSQL);
                    if (rstMonCre.next()) {
                        blnisDocRet = false;
                    }
                    rstMonCre.close();
                    rstMonCre = null;

                    stmMonCre.close();
                    stmMonCre = null;

                }
            } catch (java.sql.SQLException Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnisDocRet = false;
            } catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnisDocRet = false;
            }

            return blnisDocRet;
        }

        /**
         * CONTROL: De Soporte de cheque.
         */
        public boolean isDocSinSop() {
            boolean blnisDocRet = true;
            try {
//                System.out.println("isDocSinSop");
                blnisDocRet = true;
                if (CONN_GLO != null) {
                    java.sql.Statement stmMonCre = CONN_GLO.createStatement();
                    String sSQL = "SELECT a1.co_tipdoc, a2.nd_abo, a2.st_sop, a2.st_entsop  FROM tbm_cabMovInv AS a1"
                            + " INNER JOIN tbm_pagMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) "
                            + " INNER JOIN tbm_cli AS cli ON (cli.co_emp=a1.co_emp and cli.co_cli=a1.co_cli) "
                            + " WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa() + " " + // AND a1.co_loc="+objZafParSis.getCodigoLocal()+" " +
                            "  AND (a2.mo_pag+a2.nd_abo)<>0   AND a1.co_cli=" + txtCliCod.getText() + " AND a1.st_reg NOT IN ('I','E') AND a2.st_reg IN ('A','C') "
                            + " AND a2.st_sop='S'   "
                            + //" AND a2.st_entsop='N'" +
                            " AND CASE WHEN (a2.mo_pag+a2.nd_abo) < 0 THEN  a2.st_entsop='N' END "
                            + " AND a1.fe_doc+cli.ne_diagrachqfec <= " + objZafParSis.getFuncionFechaHoraBaseDatos() + " ";
                    // System.out.println("que "+sSQL); 
                    java.sql.ResultSet rstMonCre = stmMonCre.executeQuery(sSQL);
                    if (rstMonCre.next()) {
                        blnisDocRet = false;
                    }
                    rstMonCre.close();
                    rstMonCre = null;
                    stmMonCre.close();
                    stmMonCre = null;
                }

                if (intTipForPagCotizacion == 4) {
                    blnisDocRet = true;
                }

            } catch (SQLException Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnisDocRet = false;
            } catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
                blnisDocRet = false;
            }

            return blnisDocRet;
        }

        /**
         * Funcion que permite saber que itme se ha modificado.
         *
         * @return
         */
        public boolean isNomItmMod() {
            boolean blnisNomItmMod = true;
            String strNomItmAct = "";
            String strNomItmOri = "";
            try {
//     System.out.println("isNomItmMod");
                if (objZafParSis.getStringConexion().toString().equals("jdbc:postgresql://172.16.8.2:5432/dbCosenco")) {
                    if (txtCliCod.getText().equals("3516") || txtCliCod.getText().equals("1039") || txtCliCod.getText().equals("602")) {
                    }
                } else {


                    for (int i = 0; i < tblDat.getRowCount(); i++) {
                        if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {

                            strNomItmAct = objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_DESITM)).trim();
                            strNomItmOri = objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_DESITMORI)).trim();

                            if (!(strNomItmOri.equals(strNomItmAct))) {
                                blnisNomItmMod = false;
                                break;

                            }
                        }
                    }
                }

            } catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnisNomItmMod;
        }

        /*
         *control; controla si el cliente tiene cerrado el credito por retencion
         */
        public boolean isCreCerRet() {
            boolean blnisCieCreRet = true;
            java.sql.Connection conLoc;
            try {
                conLoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            
//                System.out.println("isCreCerRet");
                if (conLoc != null) {
                    java.sql.Statement stmMonCre = conLoc.createStatement();

                    String sSQL = "SELECT co_cli  FROM tbm_cli AS a1 WHERE a1.co_emp=" + objZafParSis.getCodigoEmpresa() + ""
                            + " AND a1.co_cli=" + txtCliCod.getText() + " and st_cieretpen='S'";
                    java.sql.ResultSet rstMonCre = stmMonCre.executeQuery(sSQL);
                    if (rstMonCre.next()) {
                        blnisCieCreRet = false;
                    }
                    rstMonCre.close();
                    rstMonCre = null;

                    stmMonCre.close();
                    stmMonCre = null;
                    conLoc.close();
                    conLoc=null;
                }

                if (intTipForPagCotizacion == 4) {
                    blnisCieCreRet = true;
                }

            } catch (SQLException e) {
                objUti.mostrarMsgErr_F1(jfrThis, e);
            } catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnisCieCreRet;
        }

        /*
         *control; controla si el cliente tiene la forma de pago asignado que se ha selecciono
         */
        public boolean isUsrForPag() {   // ESQUEMA NUEVO DE VALIDACION DE FORMA DE PAGO
            boolean blnisCieCreRet = true;
            try{
                System.out.println("intTipForPagCfgCli " + intTipForPagCfgCli);
                System.out.println("intTipForPagCotizacion " + intTipForPagCotizacion);
                System.out.println("dblPesCfgCli " + dblPesCfgCli);
                System.out.println("dblPesCotizacion " + dblPesCotizacion);
                
                if (intTipForPagCfgCli != intTipForPagCotizacion) {
                    if (dblPesCfgCli < dblPesCotizacion) {
                        blnisCieCreRet = false;
                    } 
                }
            }  
            catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnisCieCreRet;
        }

        /*
         *control; controla si el cliente tiene la forma de pago asignado que se ha selecciono
         */
        public boolean isUsrForPag_esquema_anterior() {   // ESQUEMA ANTERIOR DE VALIDACION DE FORMA DE PAGO
            boolean blnisCieCreRet = false;
            try {
//                System.out.println("isUsrForPag_esquema_anterior");
                if (CONN_GLO != null) {
                    java.sql.Statement stmMonCre = CONN_GLO.createStatement();

                    String sSQL = "SELECT b.co_forpag, b.tx_des from tbm_forpagcli as a "
                            + " INNER JOIN tbm_cabForPag as b on (b.co_emp=a.co_emp and b.co_forpag=a.co_forpag) "
                            + " WHERE a.co_emp=" + objZafParSis.getCodigoEmpresa() + " and a.co_cli=" + txtCliCod.getText() + " "
                            + " and a.co_forpag=" + txtCodForPag.getText();


                    java.sql.ResultSet rstMonCre = stmMonCre.executeQuery(sSQL);
                    if (rstMonCre.next()) {
                        blnisCieCreRet = true;
                    }
                    rstMonCre.close();
                    rstMonCre = null;

                    stmMonCre.close();
                    stmMonCre = null;

                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(jfrThis, e);
            } catch (Exception Evt) {
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnisCieCreRet;
        }

        public boolean isSolTraAutTot() {
//            System.out.println("isSolTraAutTot");
            boolean blnRes = true;
            for (int i = 0; i < tblDat.getRowCount(); i++) {
                if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                    if (tblDat.getValueAt(i, INT_TBL_TRATOT).toString().equals("true")) {
                        blnRes = false;
                        break;
                    }
                }
            }
            return blnRes;
        }

        public boolean isCotDiaVal() {
            boolean blnRes = true;
            boolean blnValCon = true;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strSql = "";
// System.out.println("ZafVen01.ZafAutPrg.isCotDiaVal");
            try {

                if (objZafParSis.getStringConexion().toString().equals("jdbc:postgresql://172.16.8.2:5432/dbCosenco")) {
                    if (txtCliCod.getText().equals("3516") || txtCliCod.getText().equals("1039") || txtCliCod.getText().equals("602")) {
                        blnValCon = false;
                    }
                }


                if (blnValCon) {

                    if (CONN_GLO != null) {
                        stmLoc = CONN_GLO.createStatement();

//    if((blnEstEliFilDet) || (blnEstFecVal) ){
//        blnRes=false;
//    }else{

                        if (!txtCot.getText().equals("")) {
                            strSql = "SELECT st_reg, current_date, fe_val ,case when  current_date > fe_val then 'S' else 'N' end as estVal "
                                    + " FROM tbm_cabcotven WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND co_loc=" + objZafParSis.getCodigoLocal() + " "
                                    + " AND co_cot= " + txtCot.getText();
                            rstLoc = stmLoc.executeQuery(strSql);
                            if (rstLoc.next()) {
                                if (!rstLoc.getString("st_reg").equals("U")) {  // dias de validez de cotizacion, no volver a comprobar si la cotizacion esta autorizada.
                                    if (rstLoc.getString("estVal").equals("S")) {
                                        blnRes = false;
                                    }
                                }
                            }
                            rstLoc.close();
                            rstLoc = null;
                        }
                        // }
                        stmLoc.close();
                        stmLoc = null;

                    }
                }
            } catch (java.sql.SQLException e) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, e);
            } catch (Exception Evt) {
                blnRes = false;
                objUti.mostrarMsgErr_F1(jfrThis, Evt);
            }
            return blnRes;
        }

        /**
         * CONTROL: Que el cliente no sobrepase su cupo de credito establecido
         */
        public boolean isCreCli() {
            boolean blnRes = true;
            boolean blnValCon = true;
//        System.out.println("isCreCli");
            if (objZafParSis.getStringConexion().toString().equals("jdbc:postgresql://172.16.8.2:5432/dbCosenco")) {
                if (txtCliCod.getText().equals("3516") || txtCliCod.getText().equals("1039") || txtCliCod.getText().equals("602")) {
                    blnValCon = false;
                }
            }

            if (blnValCon) {

                if (!(dblDiaGraCli == 0 && (intTipForPagCotizacion == 1 || intTipForPagCotizacion == 5))) {
                    //Obteniendo el cupo de credito para este cliente
                    double dblMonCre = getMonCre(txtCliCod.getText());
                    //Obteniendo el las cuentas por cobrar a este cliente.
                    double dblCxC = getCxC(txtCliCod.getText());

                     System.out.println("(dblTotalCot) ---> "+dblTotalCot );
                    // System.out.println("(dblCxC) ---> "+dblCxC );

                    // System.out.println("(dblTotalCot+dblCxC) ---> "+(dblTotalCot+dblCxC));
                    System.out.println("dblMonCre---> " + dblMonCre);

                    if (Math.abs(dblTotalCot + dblCxC) > dblMonCre) {
                        blnRes = false;
                    }
                }
            }
            if (intTipForPagCotizacion == 4) {
                blnRes = true;
            }
            return blnRes;
        }

        /**
         * Metdo que devuelve el total de las cuentas por cobrar de un cliente
         */
        private double getCxC(String int_co_cli) {
            double dblCxC = 0;
            try {
                System.out.println("getCxC");
                if (CONN_GLO != null) {
                    java.sql.Statement stmMonCre = CONN_GLO.createStatement();
//                    String sSQL ="select  sum((abs(pag.mo_pag) - pag.nd_abo)) as nd_deuda           " +
//                    "from tbm_pagmovinv as pag, tbm_cabmovinv as cab, tbm_cabtipdoc as tipdoc " +
//                    "where                                                                    " +
//                    " pag.co_emp =   "  + objZafParSis.getCodigoEmpresa() +   "   and   "  +
//                    " pag.co_emp = cab.co_emp and      " +
//                    " pag.co_emp = tipdoc.co_emp and   " +
//                    " pag.co_loc =   "  + objZafParSis.getCodigoLocal()   +   "   and   " +
//                    " pag.co_loc = cab.co_loc                              and   " +
//                    " pag.co_loc = tipdoc.co_loc                           and   " +
//                    " pag.co_tipDoc = cab.co_tipdoc                        and   " +
//                    " pag.co_tipDoc = tipdoc.co_tipdoc                     and   " +
//                    " pag.co_doc     = cab.co_doc                          and   " +
//                    " tipdoc.co_tipdoc  = " + 1                        + " and " +
//                    " pag.nd_porret  = 0  and (abs(pag.mo_pag) - pag.nd_abo) > 0  and   " +
//                    " cab.st_reg in ('C','A','R','F')                      and   " +
//                    " pag.st_reg in ('C','A')                              and   " +
//                    " cab.co_cli = " + int_co_cli  ;
/*JoseMario antes */
//                    String sSQL = "select  sum((abs(pag.mo_pag) - abs(pag.nd_abo))) as nd_deuda  "
//                            + " from tbm_pagmovinv as pag "
//                            + " inner join tbm_cabmovinv as cab on (cab.co_emp=pag.co_emp and cab.co_loc=pag.co_loc and cab.co_tipdoc=pag.co_tipdoc and cab.co_doc=pag.co_doc )  "
//                            + " inner join tbm_cabtipdoc as tipdoc on ( tipdoc.co_emp=cab.co_emp and tipdoc.co_loc=cab.co_loc and tipdoc.co_tipdoc=cab.co_tipdoc ) "
//                            + " where "
//                            + " pag.co_emp = " + objZafParSis.getCodigoEmpresa() + " and "
//                            + //" pag.co_loc = "+objZafParSis.getCodigoLocal()+" and "+  
//                            " tipdoc.ne_mod in (1,3) and "
//                            + " (pag.nd_porret = 0 or pag.nd_porret is null ) and (abs(pag.mo_pag) - abs(pag.nd_abo)) > 0  and "
//                            + " cab.st_reg in ('C','A','R','F') and "
//                            + " pag.st_reg in ('C','A') and "
//                            + " cab.co_cli = " + int_co_cli;
                    
                    String sSQL=""; 
                    sSQL+=" SELECT SUM(a.nd_deuda) as nd_deuda   \n";
                    sSQL+=" FROM(   \n";
                    sSQL+="     SELECT  sum((abs(pag.mo_pag) - abs(pag.nd_abo))) as nd_deuda \n";
                    sSQL+="     FROM tbm_pagmovinv AS pag \n";
                    sSQL+="     INNER JOIN tbm_cabmovinv AS cab ON (cab.co_emp=pag.co_emp and cab.co_loc=pag.co_loc and  \n";
                    sSQL+="                                         cab.co_tipdoc=pag.co_tipdoc and cab.co_doc=pag.co_doc )  \n";
                    sSQL+="     INNER JOIN tbm_cabtipdoc AS tipdoc ON ( tipdoc.co_emp=cab.co_emp and tipdoc.co_loc=cab.co_loc and \n";
                    sSQL+="                                             tipdoc.co_tipdoc=cab.co_tipdoc )   \n";
                    sSQL+="     WHERE  pag.co_emp = "+objZafParSis.getCodigoEmpresa()+" AND  tipdoc.ne_mod in (1,3) AND  \n";
                    sSQL+="          (pag.nd_porret = 0 or pag.nd_porret IS NULL ) AND \n";
                    sSQL+="          (abs(pag.mo_pag) - abs(pag.nd_abo)) > 0  AND  cab.st_reg in ('C','A','R','F') AND  \n";
                    sSQL+="             pag.st_reg in ('C','A') AND  cab.co_cli = "+int_co_cli+" \n";
                    sSQL+=" UNION   \n";
                    sSQL+="     SELECT  CASE WHEN SUM(a2.nd_tot) IS NULL THEN 0 ELSE SUM(a2.nd_tot) END as nd_deuda   \n";
                    sSQL+="     FROM tbm_cabSegMovInv as a1 \n";
                    sSQL+="     INNER JOIN tbm_cabCotVen as a2 ON (a1.co_empRelCabCotVen=a2.co_emp AND a1.co_locRelCabCotVen=a2.co_loc AND \n";
                    sSQL+="                                         a1.co_cotRelCabCotVen=a2.co_cot) \n";
                    sSQL+="     INNER JOIN tbm_pagCotVen as a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_cot=a3.co_cot) \n";
                    sSQL+="     WHERE a3.nd_porRet=0 and a2.co_cli="+int_co_cli+" and a2.tx_momGenFac='F' AND  a2.st_reg IN ('E','L') AND \n";
                    sSQL+="           a2.co_emp="+objZafParSis.getCodigoEmpresa()+" \n";
                    sSQL+=" ) as a \n";/* JoseMario 8/Jul/2016 */
		    System.out.println("MOnto de credito usado por un cliente: " + sSQL);
                    java.sql.ResultSet rstMonCre = stmMonCre.executeQuery(sSQL);
                    if (rstMonCre.next()) {
                        dblCxC = rstMonCre.getDouble("nd_deuda");
                    }

                    rstMonCre.close();
                    stmMonCre.close();
                    rstMonCre = null;
                    stmMonCre = null;
                }
            } catch (java.sql.SQLException Evt) {
                return dblCxC;
            } catch (Exception Evt) {
                return dblCxC;
            }
            return dblCxC;
        }

        /**
         * Metdo que devuelve el cupo de credito de un cliente
         */
        private double getMonCre(String int_co_cli) {
            double dblMonCre = 0;
            try {
//                System.out.println("getMonCre");
                if (CONN_GLO != null) {
                    java.sql.Statement stmMonCre = CONN_GLO.createStatement();

                    String sSQL = "SELECT nd_monCre from tbm_cli as cli "
                            + " where cli.co_emp = " + objZafParSis.getCodigoEmpresa() + " and "
                            + "       cli.co_cli = " + int_co_cli;
                    java.sql.ResultSet rstMonCre = stmMonCre.executeQuery(sSQL);
                    if (rstMonCre.next()) {
                        dblMonCre = rstMonCre.getDouble("nd_monCre");
                    }
                    rstMonCre.close();
                    stmMonCre.close();
                    rstMonCre = null;
                    stmMonCre = null;

                }
            } catch (java.sql.SQLException Evt) {
                return dblMonCre;
            } catch (Exception Evt) {
                return dblMonCre;
            }
            return dblMonCre;
        }

        /**
         * @author EFLORESA Funcion que determina si se excedio la cantidad
         * maxima del para la venta del item seleccionado. Terminales "P" false:
         * Excedio la cantidad maxima, se debe solicitar autorizacion true: No
         * hay problema.
         */
        public boolean isItmCanMaxVen() {
            boolean blnRes = true;
            String strSql;
            String result;
            String cant = "";
            String items[][] = null;
            //int a=0, t=0;
            Statement stm = null, stm2 = null;
            ResultSet rs = null, rs2 = null;
            double canmaxven = 0;
            double cantven = 0;
            double subtot = 0;
            boolean isTerP = false;

            items = new String[tblDat.getRowCount()][2];
            //a=0;
            try {
                System.out.println("ZafVen01 isItmCanMaxVen");
                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                        if (tblDat.getValueAt(i, INT_TBL_ITMSER).equals("S")) {
                            strSql = "select case when upper(trim(substr(" + objUti.codificar(tblDat.getValueAt(i, INT_TBL_ITMALT)) + ", length(" + objUti.codificar(tblDat.getValueAt(i, INT_TBL_ITMALT)) + ") ,1))) = 'P' then 'S' else 'N' end as TERMINAL_P";
//                            System.out.println(strSql);
                            stm = CONN_GLO.createStatement();
                            rs = stm.executeQuery(strSql);
                            if (rs.next()) {
                                result = rs.getString("TERMINAL_P");
                                if (result.equals("S")) {
                                    isTerP = true;
                                    for (int x = 0; x < items.length; x++) {
                                        if (items[x][0] != null && items[x][0].equals(tblDat.getValueAt(i, INT_TBL_CODITM))) {
                                            subtot = objUti.redondear(((tblDat.getValueAt(i, INT_TBL_CANMOV) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_CANMOV).toString())), 0) + objUti.redondear(items[x][1], 0);
                                            items[x][1] = Double.toString(subtot);
                                            break;
                                        } else {
                                            items[x][0] = tblDat.getValueAt(i, INT_TBL_CODITM).toString();
                                            subtot = objUti.redondear(((tblDat.getValueAt(i, INT_TBL_CANMOV) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_CANMOV).toString())), 0);
                                            items[x][1] = Double.toString(subtot);
                                            break;
                                        }
                                    }

                                    strSql = "select case when nd_canmaxven is null then 0 else round(nd_canmaxven) end as nd_canmaxven "
                                            + "from tbm_inv "
                                            + "where co_emp = " + objZafParSis.getCodigoEmpresa() + " "
                                            + "and co_itm = " + tblDat.getValueAt(i, INT_TBL_CODITM);
                                    System.out.println(strSql);
                                    stm2 = CONN_GLO.createStatement();
                                    rs2 = stm2.executeQuery(strSql);
                                    if (rs2.next()) {
                                        canmaxven = rs2.getDouble("nd_canmaxven");

                                        for (int x = 0; x < items.length; x++) {
                                            if (items[x][0] != null && items[x][0].equals(tblDat.getValueAt(i, INT_TBL_CODITM))) {
                                                cant = items[x][1];
                                            }
                                        }

                                        //cant = ((tblDat.getValueAt(i, INT_TBL_CANMOV)==null)?"0":(tblDat.getValueAt(i, INT_TBL_CANMOV).toString()));
                                        cantven = objUti.redondear(cant, 0);

                                        if (isTerP) {
                                            if (cantven > canmaxven) {
                                                blnRes = false;
                                            } else {
                                                blnRes = true; 
                                            }
                                        }
                                        //else
                                        //    blnRes=true;
                                    }
                                }
                            }
                        }
                    }
                    rs = null;
                    rs2 = null;
                    stm = null;
                    stm2 = null;
                }
            } catch (SQLException e) {
                blnRes = true;
                System.err.println(e);
            } catch (Exception e) {
                blnRes = true;
                System.err.println(e);
            } finally {
                try {
                    if (rs != null) {
                        rs.close();
                    }
                    rs = null;

                    if (rs2 != null) {
                        rs2.close();
                    }
                    rs2 = null;

                    if (stm != null) {
                        stm.close();
                    }
                    stm = null;

                    if (stm2 != null) {
                        stm2.close();
                    }
                    stm2 = null;
                } catch (Throwable e) {
                    e.printStackTrace();
                }
            }
            return blnRes;
        }
    }
 
    private void mostrarMsg(String strMsg) {
        //JOptionPane oppMsg=new JOptionPane();
        //String strTit="Mensaje del sistema Zafiro";
        JOptionPane.showMessageDialog(this, strMsg, strTit, JOptionPane.OK_OPTION);
    }

    public boolean VerificaPermisodeImpresion_cot(java.sql.Connection conn) {
        boolean lbnEst = false;
        String sql = "select b.st_reg,b.st_cum from tbm_cabautcotven as a,tbm_detautcotven as b,tbm_regneg  as c"
                + " where a.co_cot=" + txtCot.getText() + " and a.co_cot=b.co_cot "
                + " and  c.co_emp=" + objZafParSis.getCodigoEmpresa() + " and c.co_loc=" + objZafParSis.getCodigoLocal() + " and c.co_mnu=" + objZafParSis.getCodigoMenu() + " and c.tx_nomfun='" + strNomFuncValPre + "'"
                + " and b.co_regneg=c.co_reg"
                + " and a.co_aut  = "
                + " (select max(max.co_aut) from  tbm_detautcotven   as max where  max.co_emp=b.co_emp and  max.co_loc=b.co_loc and  max.co_cot=a.co_cot )"
                + " and b.co_aut=(select max(max.co_aut) from  tbm_detautcotven   as max where  max.co_emp=b.co_emp and  max.co_loc=b.co_loc and  max.co_cot=a.co_cot)";
//        System.out.println("PERMISOS VerificaPermisodeImpresion_cot: " + sql);
        try {
            if (conn != null) {
                java.sql.Statement stm = conn.createStatement();
                java.sql.ResultSet rst = stm.executeQuery(sql);
                if (rst.next()) {
                    if (rst.getString(1) != null) {
                        if (rst.getString(2).equals("S")) {
                            lbnEst = true;
                        } else if (rst.getString(1).equals("A")) {
                            lbnEst = true;
                        } else {
                            lbnEst = false;
                        }
                    }
                } else {
                    lbnEst = true;
                }

                rst.close();
                stm.close();
                stm = null;
                rst = null;
            }
        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return lbnEst;
        }
        return lbnEst;
    }

    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de
     * usuario (GUI). Por ejemplo: se la puede utilizar para cargar los datos en
     * un JTable donde la idea es mostrar al usuario lo que está ocurriendo
     * internamente. Es decir a medida que se llevan a cabo los procesos se
     * podría presentar mensajes informativos en un JLabel e ir incrementando un
     * JProgressBar con lo cual el usuario estaría informado en todo momento de
     * lo que ocurre. Si se desea hacer ésto es necesario utilizar ésta clase ya
     * que si no sólo se apreciaría los cambios cuando ha terminado todo el
     * proceso.
     */
    private class ZafThreadGUI extends Thread {

        private int intIndFun;

        public ZafThreadGUI() {
            intIndFun = 0;
        }

        @Override
        public void run() {
            switch (intIndFun) {
                case 0: //Botón "Imprimir".
                    objTooBar.setEnabledImprimir(false);
                    generarRpt(1);
                    objTooBar.setEnabledImprimir(true);
                    break;
                case 1: //Botón "Vista Preliminar".
                    objTooBar.setEnabledVistaPreliminar(false);
                    generarRpt(2);
                    objTooBar.setEnabledVistaPreliminar(true);
                    break;
            }
            objThrGUI = null;
        }

        /**
         * Esta función establece el indice de la función a ejecutar. En la
         * clase Thread se pueden ejecutar diferentes funciones. Esta función
         * sirve para determinar la función que debe ejecutar el Thread.
         *
         * @param indice El indice de la función a ejecutar.
         */
        public void setIndFunEje(int indice) {
            intIndFun = indice;
        }
    }

    /**
     * Esta función permite generar el reporte de acuerdo al criterio
     * seleccionado.
     *
     * @param intTipRpt El tipo de reporte a generar. <BR>Puede tomar uno de los
     * siguientes valores: <UL> <LI>0: Impresión directa. <LI>1: Impresión
     * directa (Cuadro de dialogo de impresión). <LI>2: Vista preliminar. </UL>
     * @return true: Si se pudo generar el reporte. <BR>false: En el caso
     * contrario.
     */
    private boolean generarRpt(int intTipRpt) {
        String strRutRpt, strNomRpt;
        int i, intNumTotRpt;
        boolean blnRes = true;
        String strCodForPag = txtNomForPag.getText();
        String strRutImgLogo = "";
        try {
            //objRptSis=new ZafRptSis(JOptionPane.getFrameForComponent(this), true, objZafParSis);
            //objRptSis.cargarListadoReportes();
            objRptSis.cargarListadoReportes(objZafParSis.getCodigoEmpresa(), objZafParSis.getCodigoLocal(), 3965, objZafParSis.getCodigoUsuario());  /* JoséMarín: Pendiente revisar  */
            objRptSis.setVisible(true);
            if (objRptSis.getOpcionSeleccionada() == ZafRptSis.INT_OPC_ACE) {
//                //Obtener la fecha y hora del servidor.
//                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
//                if (datFecAux==null)
//                    return false;
//                strFecHorSer=objUti.formatearFecha(datFecAux, "dd/MMM/yyyy HH:mm:ss");
//                datFecAux=null;
                intNumTotRpt = objRptSis.getNumeroTotalReportes();
                for (i = 0; i < intNumTotRpt; i++) {
                    if (objRptSis.isReporteSeleccionado(i)) {
                        switch (Integer.parseInt(objRptSis.getCodigoReporte(i))) {
                            case 19:
                            default:
                                strRutRpt = objRptSis.getRutaReporte(i);
                                strNomRpt = objRptSis.getNombreReporte(i);
                                //Inicializar los parametros que se van a pasar al reporte.

                                strRutImgLogo = strRutRpt + "logo.PNG";

                                Map mapPar = new HashMap();
                                mapPar.put("codEmp", new Integer(objZafParSis.getCodigoEmpresa()));
                                mapPar.put("codLoc", new Integer(objZafParSis.getCodigoLocal()));
                                mapPar.put("co_cot", new Integer(Integer.parseInt(txtCot.getText())));
                                mapPar.put("forPag", strCodForPag);
                                mapPar.put("RUTA_LOGO", strRutImgLogo);

                               //mapPar.put("strCamAudRpt", this.getClass().getName() + "   " + strNomRpt + "   " + objParSis.getNombreUsuario() + "   " + strFecHorSer);
                                //Se imprime en A5 Cambio de formato tony
                                //objRptSis.generarReporte(strRutRpt, strNomRpt, mapPar, intTipRpt);
                                //Patricia Solorzano = 7, Nancy Cando=307, Karina Martinez =92, Gisella Mosquera=33
                                if (objZafParSis.getCodigoUsuario()!=7 && objZafParSis.getCodigoUsuario()!=92 && objZafParSis.getCodigoUsuario()!=33  && objZafParSis.getCodigoUsuario()!=358 && objZafParSis.getCodigoUsuario()!=339 && objZafParSis.getCodigoUsuario()!=280) {//&& objZafParSis.getCodigoUsuario()!=307
                                    objRptSis.generarReporte(strRutRpt, strNomRpt, mapPar, intTipRpt);
                                }else{
                                    if (booFormatA4) {
                                    objRptSis.generarReporte(strRutRpt, strNomRpt, mapPar, intTipRpt);
                                    }else if (booFormatA5) {  
                                    objRptSis.generarReporteA5Cot(strRutRpt, strNomRpt, mapPar, intTipRpt,String.valueOf(txtCliNom.getText().substring(0, 6) + txtCot.getText()));  
                                    }
                                }
                                break;
                        }
                    }
                }
            }
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    public int getCodigoMaxDoc(java.sql.Connection conn, String strSql) {
        int intCodDoc = 0;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;
        try {
            if (conn != null) {
                stmLoc = conn.createStatement();
                rstLoc = stmLoc.executeQuery(strSql);
                if (rstLoc.next()) {
                    intCodDoc = rstLoc.getInt(1);
                }
                rstLoc.close();
                rstLoc = null;
                stmLoc.close();
                stmLoc = null;
            }
        } catch (java.sql.SQLException ex) {
            objUti.mostrarMsgErr_F1(jfrThis, ex);
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(jfrThis, e);
        }
        return intCodDoc;
    }

    private boolean existeRep(Connection conn, int codEmp, int codLoc, int codMnu, int codUsr) {
        boolean blnRes = false;
        ResultSet rst;
        Statement stm;

        String strSql = " select count(*) as cantmnu "
                + " from tbm_rptSis as a1 "
                + " inner join tbr_rptSisUsr as a2 on (a1.co_rpt=a2.co_rpt) "
                + " where a2.co_emp=" + codEmp + " "
                + " and a2.co_loc=" + codLoc + " "
                + " and a2.co_mnu=" + codMnu + " "
                + " and a2.co_usr=" + codUsr + " "
                + " and a1.st_reg='A' "
                + " and a2.st_reg in ('A','S') ";
        try {

            if (codUsr == 1) {
                return true;
            }

            stm = conn.createStatement();
            rst = stm.executeQuery(strSql);
            if (rst.next()) {
                if (rst.getInt("cantmnu") > 0) {
                    blnRes = true;
                } else {
                    blnRes = false;
                }
            }
        } catch (SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }

        return blnRes;
    }

    @Override
    protected void finalize() throws Throwable {
        //System.gc();
        Runtime.getRuntime().gc();
        super.finalize();
    }

    public int CodCot() {
        int codCot;
        codCot = Integer.parseInt(txtCot.getText());
        return codCot;
    }

    private boolean validaDescuentos() {
        boolean blnRes = false;
        try {
//            System.out.println("ZafVen01.configurarVentanaConsultaTarjetaCredito");
            int intNumFil = objTblMod.getRowCountTrue();
            for (int i = 0; i < intNumFil; i++) {
            }

        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }

        return blnRes;
    }
     
    /* JoseMarín 6/Febrero/2015 */
    //<editor-fold defaultstate="collapsed" desc="/* COPY INMACONSA JoséMario. */ ">
    
    private boolean guardarInmaconsa() {
        boolean blnRes = true;
        java.sql.Connection conLoc;
        try {
            conLoc = DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if(getLocalInmaconsa()){
                if (insertarRegInmaconsa(conLoc)) {
                    System.out.println("OK INMACONSA");
                } else {
                    blnRes = false;
                }
            }
            else{
                blnRes = false;
            }
            conLoc.close();
            conLoc = null;
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean insertarRegInmaconsa(java.sql.Connection conLoc) {
        boolean blnRes = false;
        String Estado = "A";
        int ESTPRE = 0;
        int Est = 0;

        verificaIvaItm(conLoc);
        abrirCon();
        cargarTipEmp();
        calculaTot();
        CerrarCon();/*JoseMario 7/Jun/2016*/
        calculaSubTotTodLosItm();

        try {
            System.out.println("insertarRegInmaconsa.... ");
            if (conLoc != null) {
                conLoc.setAutoCommit(false);
                dblPorIva = bldivaEmp;

                int intNumCot = getUltCoDocInmaconsa(conLoc);
                if (!isPreVtaMenorPreUniInmaconsa()) {
                    ESTPRE = 1;
                    System.out.println("isPreVtaMenorPreUniInmaconsa  ESTPRE ");
                }

                txtsql.setText("");


                if (ESTPRE == 1) {
                    Est = objAutPrg.checkCtls(conLoc);
                }


                if (Est == 0) {
                    if (intNumCot != -1) {
                        System.out.println("INSERTAR COTIZACION Est" + Est);
                        int intValor = objAutPrg.checkCtls_2(CONN_GLO);
                       
                        if (insertarCabInmaconsa(conLoc, intNumCot, false, Estado)) {
                            if (insertarDetInmaconsa(conLoc, intNumCot)) {
                                if (insertDetPagInmaconsa(intNumCot, conLoc)) {
                                    int intCods[] = {intCodLocInm, intNumCot};    /*LOCAL_INMACONSA*/
                                   if (objAutPrg.insertarCabDetAut_2(conLoc, intCods, 3, intValor)) {

                                        conLoc.commit();
                                        blnRes = true;
                                        //txtCot.setText(intNumCot+"");
                                        strCodLocSol = null;
                                        strCodTipDocSol = null;
                                        strCodDocSol = null;
                                        strNumCotSol = "";
                                        String strMsg;
                                        ObtenerFecNunValInmaconsa(conLoc, intNumCot);  //*******
                                        //String strTit, strMsg;

                                        //strTit="Mensaje del sistema Zafiro";
                                        strMsg = "<HTML> Se ha guardado con exito la Cotización. <BR>       Número " + intNumCot + " </HTML>";
                                        //JOptionPane obj =new JOptionPane();
                                        JOptionPane.showMessageDialog(jfrThis, strMsg, strTit, JOptionPane.INFORMATION_MESSAGE);
                                    } else {
                                        conLoc.rollback();
                                    }
                                } else {
                                    conLoc.rollback();
                                }
                            } else {
                                conLoc.rollback();
                            }
                        } else {
                            conLoc.rollback();
                        }
                    } else {
                        conLoc.rollback();
                    }
                }


                if (Est == 2) {  ///************
                    Estado = "P";
                    if (intNumCot != -1) {
                        if (insertarCabInmaconsa(conLoc, intNumCot, false, Estado)) {
                            if (insertarDetInmaconsa(conLoc, intNumCot)) {
                                if (insertDetPagInmaconsa(intNumCot, conLoc)) {
                                    int intCods[] = {/*objZafParSis.getCodigoLocal()*/intCodLocInm, intNumCot};  /*LOCAL_INMACONSA*/
                                    if (objAutPrg.insertarCabDetAut(conLoc, intCods, 3)) {
                                        conLoc.commit();
                                        blnRes = true;
//                                            txtCot.setText(intNumCot+"");
                                        ObtenerFecNunValInmaconsa(conLoc, intNumCot);  //*******

                                    } else {
                                        conLoc.rollback();
                                    }
                                } else {
                                    conLoc.rollback();
                                }
                            } else {
                                conLoc.rollback();
                            }
                        } else {
                            conLoc.rollback();
                        }
                    } else {
                        conLoc.rollback();
                    }

                }

            }  ///*********
        } catch (SQLException Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return false;
        } catch (Exception Evt) {
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
            return false;
        }
        return blnRes;
    }

    private int getUltCoDocInmaconsa(java.sql.Connection conLoc) {
        int valReturn = 0;
        try {
            java.sql.Statement stmMaxCot = conLoc.createStatement();
            sSQL = "SELECT Max(co_cot) as co_cot FROM tbm_cabCotVen where "
                    + " co_emp = " + objZafParSis.getCodigoEmpresa() + " and co_loc = "+intCodLocInm+" "; /* LOCAL_INMACONSA */
            ResultSet rstNum = stmMaxCot.executeQuery(sSQL);
            if (rstNum.next()) {
                valReturn = rstNum.getInt("co_cot");
            }
            valReturn++;
            stmMaxCot.close();
            stmMaxCot = null;
        } catch (java.sql.SQLException e) {
            valReturn = -1;
        } catch (Exception e) {
            valReturn = -1;
        }
        return valReturn;
    }

    //------------------------------------------------------------------------------
    /**
     * CONTROL: de ZafVen02 (Facturas de Ventas) Descripcion: El precio de venta
     * digitado por el usuario no debe ser menor al precio unitario del
     * articulo.
     */
    public boolean isPreVtaMenorPreUniInmaconsa() {
//            System.out.println("isPreVtaMenorPreUni");
        boolean blnRes = true;
        int INT_TBL_COITM = 17;
        int INT_TBL_PREVEN = 11;
        boolean blnValPre = true;
        boolean blnValCon = true;
        if (objZafParSis.getStringConexion().toString().equals("jdbc:postgresql://172.16.8.2:5432/dbCosenco")) {

            if (txtCliCod.getText().equals("3516") || txtCliCod.getText().equals("1039") || txtCliCod.getText().equals("602")) {
                blnValCon = false;
            }
        }

        if (blnValCon) {

            double dblPreUsr, dblPreUniItm, dblDescDigitado, dblDescAsignado = Glo_dlbMaxDes, //getDesCli(txtCliCod.getText()),
                    dblMinimo, dblValorVenta, dblCostoItm = 0, dblPorDesCom = 0, dblPorGanancia = Glo_dlbMarUti; //getMarUti(txtCliCod.getText());
            int intCoItm;
            double dblMarUtiItm = 0;
            blnHayCam = blnHayCam_glo;

            if (blnValPre == true || blnHayCam_glo_tbl == true) {
                blnRes = true;

                for (int i = 0; i < tblDat.getRowCount(); i++) {
                    if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                        dblPreUsr = objUti.redondeo(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PREUNI) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_PREUNI).toString()))), 6);

                        dblMarUtiItm = objUti.redondear(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_MARUTI) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_MARUTI).toString()))), 2);

                        int intTipPre = 0;
                        //**********************
                        if (tblDat.getValueAt(i, INT_TBL_ITMTER) != null) {
                            if (tblDat.getValueAt(i, INT_TBL_ITMTER).toString().trim().equalsIgnoreCase("S")) {
                                dblPreUniItm = 0;
                            } else {
                                dblPreUniItm = getPreUni(i, objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)));
                                intTipPre = 1;
                            }
                        } else {
                            dblPreUniItm = getPreUni(i, objInvItm.getStringDatoValidado(tblDat.getValueAt(i, INT_TBL_CODITM)));
                            intTipPre = 1;
                        }
                        //**********************

                        dblDescDigitado = objUti.redondeo(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_PORDES).toString()))), 2);
                        dblValorVenta = (dblDescDigitado != 0) ? (dblPreUsr - (dblPreUsr * dblDescDigitado / 100)) : dblPreUsr;


                        //****************
                        if (dblPreUniItm != 0) {
                            dblMinimo = (dblDescAsignado != 0) ? (dblPreUniItm - (dblPreUniItm * dblDescAsignado / 100)) : dblPreUniItm;

                        } else {

                            double dblStkAct = 0;

                            //*************************
                            if (tblDat.getValueAt(i, INT_TBL_ITMTER) != null) {
                                if (tblDat.getValueAt(i, INT_TBL_ITMTER).toString().trim().equalsIgnoreCase("S")) {
                                    dblStkAct = 0;
                                } else {
                                    dblStkAct = getStkAct((tblDat.getValueAt(i, INT_TBL_CODITM) == null) ? "" : tblDat.getValueAt(i, INT_TBL_CODITM).toString());
                                }
                            } else {
                                dblStkAct = getStkAct((tblDat.getValueAt(i, INT_TBL_CODITM) == null) ? "" : tblDat.getValueAt(i, INT_TBL_CODITM).toString());
                            }

                            //**************************                                     

                            if (!(tblDat.getValueAt(i, INT_TBL_ITMTER).toString().trim().equals("S"))) { //if(dblStkAct != 0)
                                dblCostoItm = getCosUniInmaconsa((tblDat.getValueAt(i, INT_TBL_CODITM) == null) ? "" : tblDat.getValueAt(i, INT_TBL_CODITM).toString());
                            } else {

                                if (tblDat.getValueAt(i, INT_TBL_PRE_COS) == null) {
                                    dblCostoItm = 0.00;
                                } else {
                                    dblCostoItm = Double.parseDouble(tblDat.getValueAt(i, INT_TBL_PRE_COS).toString());
                                }


                                if (tblDat.getValueAt(i, INT_TBL_DESPRECOM) == null) {
                                    dblPorDesCom = 0.00;
                                } else {
                                    dblPorDesCom = Double.parseDouble(tblDat.getValueAt(i, INT_TBL_DESPRECOM).toString());
                                }

                                dblCostoItm = objUti.redondear((dblCostoItm - (dblCostoItm * (dblPorDesCom / 100))), 2);


                            }
                            dblMinimo = dblCostoItm * dblPorGanancia;
                            dblMinimo = dblCostoItm + ((dblMinimo == 0) ? 0 : (dblMinimo / 100));
                        }


                        dblValorVenta = objUti.redondear(dblValorVenta, 3);
                        dblMinimo = objUti.redondear(dblMinimo, 3);

                        double dblPor = (1 - (dblCostoItm / dblValorVenta)) * 100;


                        dblPor = objUti.redondear(dblPor, 3);


                        if (intTipPre == 1) {
                            if (dblValorVenta < dblMinimo) {
                                blnRes = false;
                                tblDat.setValueAt(true, i, INT_TBL_BLNPRE); // tblDat.setValueAt("true",i,INT_TBL_BLNPRE);
                                //System.out.println(" 3 ..True........... ");
                            }
                        } else {
                            if (dblPor < dblMarUtiItm) {
                                blnRes = false;
                                tblDat.setValueAt(true, i, INT_TBL_BLNPRE); // tblDat.setValueAt("true",i,INT_TBL_BLNPRE);
                                //System.out.println(" 4 ..True........... ");
                                //tblDat.setValueAt(new Boolean(true),i,INT_TBL_BLNPRE);
                            }
                        }
                    }
                }
            }


            blnHayCam = blnHayCam_glo;

        }
        return blnRes;
    }

    private boolean insertarCabInmaconsa(java.sql.Connection conLoc, int intNumDoc, boolean blnSolAut, String Estado) {
        boolean blnRes = false;
        String strdocconmersaldemdebfac = "N";
        String strSql = "";
        try {
            String strFechaRec = "";
            String strFecSis = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), objZafParSis.getFormatoFechaHoraBaseDatos());
            String strFecDoc = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos(), objZafParSis.getFormatoFechaBaseDatos());
            try {
                strFechaRec = "'#" + txtFecRec.getFecha("/", "y/m/d") + "#'";
            } catch (Exception Evt) {
                strFechaRec = null;
            }


            for (int i = 0; i < tblDat.getRowCount(); i++) {
                if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                    if (tblDat.getValueAt(i, INT_TBL_COLOCREL) != null) {
                        if (tblDat.getValueAt(i, INT_TBL_COTIPDOCREL) != null) {
                            if (tblDat.getValueAt(i, INT_TBL_CODOCREL) != null) {
                                strdocconmersaldemdebfac = "S";
//                         System.out.println("insertarCab " + strSql);
                                strSql = "UPDATE tbm_cabsolsaltemmer SET st_facmersaldem='S' WHERE co_emp=" + objZafParSis.getCodigoEmpresa() + " AND "
                                        + " co_loc=" + tblDat.getValueAt(i, INT_TBL_COLOCREL) + " and co_tipdoc=" + tblDat.getValueAt(i, INT_TBL_COTIPDOCREL) + " AND "
                                        + " co_doc=" + tblDat.getValueAt(i, INT_TBL_CODOCREL);
                                txtsql.append(strSql + "; \n");

                            }
                        }
                    }
                }
            }
            String sqlCab = "INSERT INTO  tbm_cabCotVen ";
            sqlCab+="(co_emp, co_loc, co_cot, " ; //CAMPOS PrimayKey
            sqlCab+=" fe_cot, fe_procon," ; //Fecha de la cotizacion
            sqlCab+=" co_cli, co_ven, tx_ate, " ;//<==Campos que aparecen en la parte superior del 1er Tab
            sqlCab+=" tx_obs1, tx_obs2, nd_sub, nd_valiva, nd_tot, nd_porIva, " ;//<==Campos que aparecen en la parte inferior del 1er Tab
            sqlCab+=" co_forPag, fe_ing, fe_ultmod, co_usring ,co_usrmod, st_reg, ne_val,tx_numped ";
            sqlCab+=" , tx_nomcli, co_locrelsoldevven,  co_tipdocrelsoldevven, co_docrelsoldevven, st_docconmersaldemdebfac, fe_val, tx_dirCliFac, tx_dirCliGuiRem, ";
            sqlCab+=" nd_valComSol,nd_subIvaCer,nd_subIvaGra,nd_porComSol";
            if (intTipForPagCotizacion == 4) {
                sqlCab += " ,co_tipCre ";
            }
            sqlCab += " ) "
                    + "VALUES ( "
                    + objZafParSis.getCodigoEmpresa() + ","+intCodLocInm+", "
                    + /* SOLO LOCAL_INMACONSA */ //objZafParSis.getCodigoLocal()   + ", " +
                    intNumDoc + ", '"
                    + strFecDoc + "', " + strFechaRec + ", "
                    + txtCliCod.getText() + ",   "
                    + txtVenCod.getText() + ",  '"
                    + /*txtAte.getText()    + "', '" +
                     txaObs1.getText()   + "', '" +*/ txtAte.getText() + "',  "
                    + objUti.codificar(txaObs1.getText()) + ", "
                    + objUti.codificar(txtNumCotAnt.getText() + " " + txaObs2.getText() + " ... ") + ",  "
                    + dblSubtotalCot + ",   "
                    + Double.parseDouble(txtIva.getText()) + ", "
                    + Double.parseDouble(txtTot.getText()) + ",  "
                    + dblPorIva + " , "
                    + txtCodForPag.getText() + ",'" + strFecSis + "', '" + strFecSis + "', "
                    + objZafParSis.getCodigoUsuario() + " , "
                    + objZafParSis.getCodigoUsuario() + " , "
                    + ((blnSolAut) ? "'P'" : "'" + Estado + "'") + "," + int_Num_Dia_Val + ",'" + tx_numped.getText() + "', "
                    + "'" + txtNomCliVar.getText() + "', " + strCodLocSol + ", " + strCodTipDocSol + ", " + strCodDocSol + ",'" + strdocconmersaldemdebfac + "', (current_date + " + int_Num_Dia_Val + ") "
                    + ////////////// José Marín M 
                    ", " + objUti.codificar(txtCliDir.getText()) + ", " + objUti.codificar(txtCliDirGui.getText());
                    sqlCab+=","+dblComSol + ","+(dblBaseCero*-1)+","+(dblBaseIva*-1)+","+dblPorComSol+"";
            if (intTipForPagCotizacion == 4) {
                sqlCab += " ," + objUti.codificar(txtCodTarCre.getText()) + " ";

            }
           
            sqlCab += "  ) ";
            System.out.println("ZafVen01.insertarCab (COTIZACION - INMACONSA) : " + sqlCab);
            txtsql.append(sqlCab + "; \n");
            strFecModCot = strFecDoc;
            java.util.Date dateObj = objUti.getFechaServidor(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos(), objZafParSis.getQueryFechaHoraBaseDatos());
            Calendar calObj = Calendar.getInstance();
            calObj.setTime(dateObj);
            txtFecDoc.setText(calObj.get(Calendar.DAY_OF_MONTH), calObj.get(Calendar.MONTH) + 1, calObj.get(Calendar.YEAR));

            blnRes = true;

        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private double getCosUniInmaconsa(String int_co_itm) {
        double dblPreUni = 0;
        try {
//                System.out.println("getCosUni");
            java.sql.Connection conUni = java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if (conUni != null) {
                java.sql.Statement stmUni = conUni.createStatement();
                String sSQL = "  SELECT a1.nd_cosUni FROM tbm_inv AS a1"
                        + " INNER JOIN tbm_equInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm)"
                        + " WHERE a2.co_emp=" + objZafParSis.getCodigoEmpresaGrupo() + " AND a2.co_itmMae=(SELECT co_itmMae FROM tbm_equInv WHERE co_emp= " + objZafParSis.getCodigoEmpresa() + " AND co_itm=" + int_co_itm + ")";
                java.sql.ResultSet rstUni = stmUni.executeQuery(sSQL);
                if (rstUni.next()) {
                    dblPreUni = rstUni.getDouble("nd_cosuni");
                }
                rstUni.close();
                stmUni.close();
                conUni.close();
                rstUni = null;
                stmUni = null;
                conUni = null;
            }
        } catch (java.sql.SQLException Evt) {
            return dblPreUni;
        } catch (Exception Evt) {
            return dblPreUni;
        }
        return dblPreUni;
    }

    private boolean insertarDetInmaconsa(java.sql.Connection conLoc, int intNumDoc) {
        boolean blnRes = false;
        try {
            String strAuxDet="";
            int Co_Bod = getBodPredeInmaconsa(conLoc);
            BigDecimal bgdCanItm;
            BigDecimal bgdPreItm;
            BigDecimal bgdValDesItm;
            BigDecimal bgdPorDesItm;
            BigDecimal bgdTotItm=BigDecimal.ZERO;
            StringBuffer stb = new StringBuffer(); //VARIABLE TIPO BUFFER    
            double dblCan=0,dblPre=0,dblDes=0,dblValDes=0,dblTotal=0;
            String strQry = "INSERT INTO  tbm_detCotVen (co_emp, co_loc, co_cot, co_reg," + //CAMPOS PrimayKey
                    " co_itm, tx_codalt,tx_codalt2, tx_nomItm, " +//<==Campos que aparecen en la parte superior del 1er Tab
                    " co_bod, nd_can, nd_preUni, nd_porDes, st_ivaVen " +//<==Campos que aparecen en la parte inferior del 1er Tab
                    " ,co_prv,nd_precom ,  nd_pordesprecom, st_traauttot, co_locrelsolsaltemmer, co_tipdocrelsolsaltemmer, co_docrelsolsaltemmer, "
                    + " co_regrelsolsaltemmer"
                    + " ,co_locrelsoldevven, co_tipdocrelsoldevven, co_docrelsoldevven, co_regrelsoldevven "
                    + " ,nd_preunivenlis, nd_pordesvenmax, co_bodcom, nd_porIva,nd_basImpIvaCer, nd_basImpIvaGra, nd_canPenFac  ) "; 
            int intest = 0;
            for (int i = 0; i < tblDat.getRowCount(); i++) {
                if (tblDat.getValueAt(i, INT_TBL_CODITM) != null) {
                    
                    dblCan = Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_CANMOV) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_CANMOV).toString())));
                    dblPre = Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PREUNI) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_PREUNI).toString())));
                    dblDes = objUti.redondear(Double.parseDouble(((tblDat.getValueAt(i, INT_TBL_PORDES) == null) ? "0" : (tblDat.getValueAt(i, INT_TBL_PORDES).toString()))), 2);
//                    dblValDes = ((dblCan * dblPre) == 0) ? 0 : ((dblCan * dblPre) * (dblDes / 100));
//                    dblTotal = (dblCan * dblPre) - dblValDes;
//                    dblTotal = objUti.redondear(dblTotal, intNumDec);
                      /* JM : Ahora con BigDecimal 22/Marzo/2017 */
               

                    bgdCanItm=BigDecimal.valueOf(dblCan) ;
                    bgdPreItm=BigDecimal.valueOf(dblPre) ;
                    bgdPorDesItm=BigDecimal.valueOf(dblDes) ;

                    //DESCUENTO
                   bgdValDesItm = bgdPorDesItm.multiply((bgdCanItm.multiply(bgdPreItm))); 
        bgdValDesItm = bgdValDesItm.divide(new BigDecimal("100"),objZafParSis.getDecimalesBaseDatos(),BigDecimal.ROUND_HALF_UP);
                    ///TOTAL
                    bgdTotItm=objUti.redondearBigDecimal((bgdCanItm.multiply(bgdPreItm)).subtract(bgdValDesItm), objZafParSis.getDecimalesMostrar());    
                    dblTotal = bgdTotItm.doubleValue();
                    
                   strAuxDet=" " + strQry + " SELECT " + objZafParSis.getCodigoEmpresa() + ","+intCodLocInm+","/*+objZafParSis.getCodigoLocal()+","*/ + intNumDoc + "," + (i + 1) + ", ";
                   strAuxDet+= /* LOCAL_INMACONSA */ tblDat.getValueAt(i, INT_TBL_CODITM) + ",'" + tblDat.getValueAt(i, INT_TBL_ITMALT) + "','" + tblDat.getValueAt(i, INT_TBL_ITMALT2);
                   strAuxDet+="'," + objUti.codificar(tblDat.getValueAt(i, INT_TBL_DESITM)) + ",";
                   strAuxDet+=Co_Bod + "," + tblDat.getValueAt(i, INT_TBL_CANMOV) + ",";
                   strAuxDet+=Double.parseDouble((tblDat.getValueAt(i, INT_TBL_PREUNI) == null) ? "0" : tblDat.getValueAt(i, INT_TBL_PREUNI).toString()) + ",";
                   strAuxDet+=objUti.redondeo(Double.parseDouble((tblDat.getValueAt(i, INT_TBL_PORDES) == null) ? "0" : tblDat.getValueAt(i, INT_TBL_PORDES).toString()), 6) + ",'";
                   strAuxDet+=((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? "S" : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? "S" : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? "S" : "N")))) + "',";
                   strAuxDet+=((tblDat.getValueAt(i, INT_TBL_COD_PRO) == null) ? null : (tblDat.getValueAt(i, INT_TBL_COD_PRO).toString().equals("") ? null : tblDat.getValueAt(i, INT_TBL_COD_PRO).toString())) + ",";
                   strAuxDet+=objUti.redondeo(Double.parseDouble((tblDat.getValueAt(i, INT_TBL_PRE_COS) == null) ? "0" : tblDat.getValueAt(i, INT_TBL_PRE_COS).toString()), 6) + " , ";
                   strAuxDet+=objUti.redondeo(Double.parseDouble((tblDat.getValueAt(i, INT_TBL_DESPRECOM) == null || tblDat.getValueAt(i, INT_TBL_DESPRECOM).equals("")) ? "0" : tblDat.getValueAt(i, INT_TBL_DESPRECOM).toString()), 6) + " , '";
                   strAuxDet+=((tblDat.getValueAt(i, INT_TBL_TRATOT).toString().equals("true")) ? "S" : "N") + "',";
                   strAuxDet+="" + tblDat.getValueAt(i, INT_TBL_COLOCREL) + "," + tblDat.getValueAt(i, INT_TBL_COTIPDOCREL) + "," + tblDat.getValueAt(i, INT_TBL_CODOCREL) + ",";
                   strAuxDet+=" " + tblDat.getValueAt(i, INT_TBL_COREGREL) + "  ";
                   strAuxDet+=" ," + tblDat.getValueAt(i, INT_TBL_COLOCRELSOL) + "," + tblDat.getValueAt(i, INT_TBL_COTIPDOCRELSOL) + "," + tblDat.getValueAt(i, INT_TBL_CODOCRELSOL) + ",";
                   strAuxDet+=" " + tblDat.getValueAt(i, INT_TBL_COREGRELSOL) + ", ";
                   strAuxDet+=objInvItm.getIntDatoValidado(tblDat.getValueAt(i, INT_TBL_PRELISITM)) + ", " + Glo_dlbMaxDes + ",  ";
                   strAuxDet+= Co_Bod +", ";
                   strAuxDet+= ((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? dblPorIva : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? dblPorIva : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? dblPorIva : 0)))) + ",";
                   strAuxDet+= ((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? 0 : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? 0 : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? 0 :(dblTotal*-1))))) + ",";
                   strAuxDet+= ((tblDat.getValueAt(i, INT_TBL_BLNIVA) == null ? (dblTotal*-1) : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("") ? (dblTotal*-1) : (tblDat.getValueAt(i, INT_TBL_BLNIVA).toString().equals("true") ? (dblTotal*-1) : 0)))) + "";
                   strAuxDet+= "," + tblDat.getValueAt(i, INT_TBL_CANMOV) ;  /* JM: 12/Oct/2018 Modificado para factura parcial */
                   strAuxDet+= " ; ";
                    stb.append(strAuxDet);        
                    intest = 1;
                    tblDat.setValueAt("" + (i + 1), i, INT_TBL_CODREGCOT);

                }
            }
            System.out.println("DETALLE INMACONSA " + stb.toString());
            if (intest == 1) {
                txtsql.append(stb.toString() + "; \n");
            }

            stb = null;
            blnRes = true;
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean insertDetPagInmaconsa(int intNumDoc, java.sql.Connection conn) {
        boolean blnRes = false;
        java.sql.Statement stmLoc;
        String strSql = "";
        try {
            stmLoc = conn.createStatement();
            for (int i = 0; i < tblPag.getRowCount(); i++) {
                int FecPagDoc[] = txtFecDoc.getFecha(tblPag.getValueAt(i, INT_TBL_PAGFEC).toString());
                String strFechaPag = "#" + FecPagDoc[2] + "/" + FecPagDoc[1] + "/" + FecPagDoc[0] + "#";
                String strCodTipRet = objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGCOD));
                strSql = "INSERT INTO  tbm_pagCotVen(co_emp, co_loc, co_cot, co_reg, ne_diaCre, fe_ven, ";
                strSql+=" mo_pag, ne_diaGra, nd_porRet, co_tipret ) ";
                strSql+=" VALUES(" + objZafParSis.getCodigoEmpresa() + ","+intCodLocInm+", "/*+objZafParSis.getCodigoLocal()+", "*/ + intNumDoc + ", " + (i + 1) + ", ";
                strSql+=/* LOCAL_INMACOSA */ objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGCRE)) + ", '#" + strFechaPag + "#', ";
                strSql+=objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGMON)) + ", ";  // JoseMario 31/Ene/2017
                strSql+=objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGGRA)) + ", ";
                strSql+=objInvItm.getIntDatoValidado(tblPag.getValueAt(i, INT_TBL_PAGRET)) + ", ";
                strSql+=(strCodTipRet.equals("0") ? null : strCodTipRet) + " ) ";
                txtsql.append(strSql + "; \n");
                System.out.println("ZafVen01.insertarDetPag " + txtsql.getText());
            }
            stmLoc.executeUpdate(txtsql.getText());
            txtsql.setText("");
            stmLoc.close();
            stmLoc = null;
            blnRes = true;
        } catch (SQLException Evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        } catch (Exception Evt) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(jfrThis, Evt);
        }
        return blnRes;
    }

    private void ObtenerFecNunValInmaconsa(java.sql.Connection conIns, int intNumDoc) {
        try {
            String sqlCab = "SELECT ne_val,fe_cot FROM tbm_cabCotVen WHERE "
                    + " co_emp=" + objZafParSis.getCodigoEmpresa() + " and "
                    + " co_loc="+intCodLocInm+" AND "/*+objZafParSis.getCodigoLocal()   + " and  "*/ + /* LOCAL_INMACONSA */ " co_cot=" + intNumDoc;
            java.sql.Statement stmF;
            java.sql.ResultSet rstF;
            stmF = conIns.createStatement();
            rstF = stmF.executeQuery(sqlCab);
            if (rstF.next()) {
                intNumDiaVal = rstF.getInt("ne_val");
                dateFecCot = objUti.formatearFecha(rstF.getDate("fe_cot"), "dd/MM/yyyy");
                intTipMod = 2;
            }
            rstF.close();
            stmF.close();
            stmF = null;
            rstF = null;
        } catch (java.sql.SQLException e) {

            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {

            objUti.mostrarMsgErr_F1(this, e);
        }
    }

    public boolean imprimir() {
        cargarReporteInmaconsa(0);
        return true;
    }

    private void cargarReporteInmaconsa(int intTipo) {
        if (objThrGUI == null) {
            objThrGUI = new ZafThreadGUI();
            objThrGUI.setIndFunEje(intTipo);
            objThrGUI.start();
        }
    }

    /**
     * permite saber la bodega predeterminada
     *
     * @return el codigo de la bodega que es de tipo integer
     */
    private int getBodPredeInmaconsa(java.sql.Connection conLoc) {
        java.sql.Statement stmInv;   //Statement para el recosteo
        java.sql.ResultSet rstInv;   //Resultset que tendra los datos de la existencia y el valor de la Existencia
        int intBodPre = 0;
        String sSQLBod;
        try {
            stmInv = conLoc.createStatement();
            sSQLBod = " SELECT co_bod   "
                    + " FROM tbr_bodloc "
                    + " WHERE           "
                    + " co_emp =        " + objZafParSis.getCodigoEmpresa() + " and "
                    + " co_loc ="+intCodLocInm+" AND "
                    + " st_reg ='P'";
            System.out.println("ZafVen01.getBodPredeInmaconsa " + sSQLBod);
            rstInv = stmInv.executeQuery(sSQLBod);
            if (rstInv.next()) {
                intBodPre = rstInv.getInt("co_bod");
            }

            rstInv.close();
            stmInv.close();
            rstInv = null;
            stmInv = null;

        } catch (java.sql.SQLException Evt) {
            return -1;
        } catch (Exception Evt) {
            return -1;
        }
        return intBodPre;
    }
    
    /*
        2;11;"CASTEK - Quito (004-003)(Inmaconsa)";"Via a Daule Km 11.5 Cedros Solar 5 y Calle C"
        2;12;"CASTEK - Manta (004-004)(Inmaconsa)";"Via a Daule Km 11.5 Cedros Solar 5 y Calle C"
        2;13;"CASTEK - Santo Domingo (004-005)(Inmaconsa)";"Via a Daule Km 11.5 Cedros Solar 5 y Calle C"
        2;14;"CASTEK - Cuenca (004-006)(Inmaconsa)";"Via a Daule Km 11.5 Cedros Solar 5 y Calle C"
    */
    //KEMADO
    private boolean getLocalInmaconsa(){
        boolean blnRes=true;
        try{
            intCodLocInm=-1;
            if(objZafParSis.getCodigoEmpresa()==1 && (objZafParSis.getCodigoLocal()==4 || objZafParSis.getCodigoLocal()==10) ){ /* TUVAL - California - Inmaconsa */
                intCodLocInm=12;
            }
            else if(objZafParSis.getCodigoEmpresa()==4 && objZafParSis.getCodigoLocal()==3){ /* DIMULTI - Via Daule */
                intCodLocInm=10;
            }
            else if(objZafParSis.getCodigoEmpresa()==4 && objZafParSis.getCodigoLocal()==12){ /* DIMULTI - Duran */
                intCodLocInm=13;
            }
            else if(objZafParSis.getCodigoEmpresa()==2){ /* CASTEK */
                if(objZafParSis.getCodigoLocal()==1){ /* CASTEK - Quito */
                    intCodLocInm=11;
                }
                else if(objZafParSis.getCodigoLocal()==4){ /* CASTEK - Manta */
                    intCodLocInm=12;
                }
                else if(objZafParSis.getCodigoLocal()==6){  /* CASTEK - Santo Domingo */
                    intCodLocInm=13;
                }
                else if(objZafParSis.getCodigoLocal()==10){  /* CASTEK - Cuenca */
                    intCodLocInm=14;
                }
            }
            if(intCodLocInm<0){
                blnRes=false;
            }    
        }
        catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
            return blnRes;
        }
        return blnRes;
    }
    
    
    /**
     * Esta función calcula el total del documento.
     */
    private void calcularTotPesDoc()
    {
        int intNumTotFil, i;
        BigDecimal bgdPesTot;
        try
        {
            bgdPesTot=BigDecimal.ZERO;
            intNumTotFil=objTblMod.getRowCount();
            for (i=0; i<intNumTotFil; i++)
            {
                bgdPesTot=bgdPesTot.add(BigDecimal.valueOf(objUti.parseDouble(objTblMod.getValueAt(i, INT_TBL_PESTOT)==null?0:objTblMod.getValueAt(i, INT_TBL_PESTOT))));
            }
            txtPesKgr.setText("" + objUti.redondearBigDecimal(bgdPesTot, objZafParSis.getDecimalesMostrar()));
        }
        catch (NumberFormatException e)
        {
            txtPesKgr.setText("[ERROR]");
        }
    }
    //</editor-fold>  

    private boolean isLocalPrincipal(){
        boolean blnRes=false;
        if(objZafParSis.getCodigoEmpresa()==1){  /* TUVAL - CALIFORNIA */
            if(objZafParSis.getCodigoLocal()==4){
                blnRes=true;
            }
            else{
                blnRes=false;
            }
        }
        else if(objZafParSis.getCodigoEmpresa()==4){   /* DIMULTI - VIA DAULE */
            if(objZafParSis.getCodigoLocal()==3){
                blnRes=true;
            }
            else{
                 blnRes=false;
            }
        }
        else{
            blnRes=false;
        }
        return blnRes;
    }
    
}
