/*
 * ZafCxC12_01.java
 *
 * Created on December 17, 2007, 3:46 PM
 */

package CxC.ZafCxC12;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;
import java.util.ArrayList;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
/**
 *
 * @author  ilino
 */
public class ZafCxC12_01 extends javax.swing.JInternalFrame {
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblFilCab objTblFilCab;
    private ZafTblMod objTblMod;
    private ZafTblEdi objTblEdi;                                               //Editor: Editor del JTable.
//    private ZafTblCelRenLbl objTblCelRenLblUno, objTblCelRenLblDos;          //Render: Presentar JLabel en JTable.
    private ZafTblCelEdiTxt objTblCelEdiTxt;                                   //Editor: JTextField en celda.
    private ZafMouMotAda objMouMotAda;                                         //ToolTipText en TableHeader.
    private ZafTblPopMnu objTblPopMnu;                                         //PopupMenu: Establecer PeopuMen� en JTable.
    private ZafVenCon vcoPrv;                                                  //Ventana de consulta "Tipo de documento".
    private ZafColNumerada objColNum;
    private ZafTblBus objTblBus;
    private ZafTblOrd objTblOrd;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg;
    private Vector vecAux;
    private boolean blnCon;                             //true: Continua la ejecuci�n del hilo.
    private boolean blnHayCam;                          //Determina si hay cambios en el formulario.
    private ZafDocLis objDocLis;
    private String strDesCli;                           //Contenido del campo al obtener el foco.
    private java.util.Date datFecAux;                   //Auxiliar: Para almacenar fechas.
    private String strIdePrv, strDirPrv;                //Campos: RUC y Direcci�n del Beneficiario.
    private String strCodPrv, strDesLarPrv;             //Contenido del campo al obtener el foco.
    
    private ZafThreadGUI objThrGUI;
    
    //PARA LA PRIMERA TABLA
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_TIP_DOC=1;
    final int INT_TBL_DAT_DES_COR_TIP_DOC=2;
    final int INT_TBL_DAT_DES_LAR_TIP_DOC=3;
    final int INT_TBL_DAT_CAN_MOV=4;
    
    
    /** Creates new form ZafCxC12_01 */
    public ZafCxC12_01(ZafParSis obj, int codigoCliente, String nombreCliente) {
        try{
            initComponents();
            //Inicializar objetos.
            this.objParSis=obj;
            objParSis=(ZafParSis)obj.clone();
            
            txtCodPrv.setText(""+codigoCliente);
            txtDesLarPrv.setText(nombreCliente);
            configurarFrm();
            
            butCon.setText("Consultar");
            instanciaHilo();
            
            
        }
        catch (CloneNotSupportedException e){
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        panCon = new javax.swing.JPanel();
        tabFrm = new javax.swing.JTabbedPane();
        panGrl = new javax.swing.JPanel();
        panCab = new javax.swing.JPanel();
        panTit = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        panFilCli = new javax.swing.JPanel();
        txtCodPrv = new javax.swing.JTextField();
        lblPrv = new javax.swing.JLabel();
        txtDesLarPrv = new javax.swing.JTextField();
        butPrv = new javax.swing.JButton();
        txtIdeCli = new javax.swing.JTextField();
        panCen = new javax.swing.JPanel();
        spnConTbl = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panPie = new javax.swing.JPanel();
        panButPro = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCerrar = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        panPrgSis = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panCon.setLayout(new java.awt.BorderLayout());

        panGrl.setLayout(new java.awt.BorderLayout());

        panCab.setLayout(new java.awt.BorderLayout());

        panCab.setPreferredSize(new java.awt.Dimension(10, 50));
        panTit.setLayout(new java.awt.BorderLayout());

        panTit.setPreferredSize(new java.awt.Dimension(44, 25));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("jLabel1");
        panTit.add(lblTit, java.awt.BorderLayout.CENTER);

        panCab.add(panTit, java.awt.BorderLayout.NORTH);

        panFilCli.setLayout(null);

        txtCodPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodPrvActionPerformed(evt);
            }
        });
        txtCodPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusLost(evt);
            }
        });

        panFilCli.add(txtCodPrv);
        txtCodPrv.setBounds(100, 0, 56, 20);

        lblPrv.setText("Cliente:");
        lblPrv.setToolTipText("Proveedor");
        panFilCli.add(lblPrv);
        lblPrv.setBounds(21, 0, 70, 20);

        txtDesLarPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarPrvActionPerformed(evt);
            }
        });
        txtDesLarPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusLost(evt);
            }
        });

        panFilCli.add(txtDesLarPrv);
        txtDesLarPrv.setBounds(156, 0, 264, 20);

        butPrv.setText("...");
        butPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrvActionPerformed(evt);
            }
        });

        panFilCli.add(butPrv);
        butPrv.setBounds(420, 0, 20, 20);

        panFilCli.add(txtIdeCli);
        txtIdeCli.setBounds(480, 0, 160, 21);

        panCab.add(panFilCli, java.awt.BorderLayout.CENTER);

        panGrl.add(panCab, java.awt.BorderLayout.NORTH);

        panCen.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnConTbl.setViewportView(tblDat);

        panCen.add(spnConTbl, java.awt.BorderLayout.CENTER);

        panGrl.add(panCen, java.awt.BorderLayout.CENTER);

        panPie.setLayout(new java.awt.BorderLayout());

        butCon.setText("Consultar");
        butCon.setToolTipText("Procesar la Unificaci\u00f3n de Item");
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });

        panButPro.add(butCon);

        butCerrar.setText("Cerrar");
        butCerrar.setToolTipText("Cerrar ventana");
        butCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerrarActionPerformed(evt);
            }
        });

        panButPro.add(butCerrar);

        panPie.add(panButPro, java.awt.BorderLayout.EAST);

        panBarEst.setLayout(new java.awt.BorderLayout());

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        lblMsgSis.setText("Obteniendo datos...");
        lblMsgSis.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        panPrgSis.setLayout(new java.awt.BorderLayout(2, 2));

        panPrgSis.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panPrgSis.setMinimumSize(new java.awt.Dimension(24, 26));
        panPrgSis.setPreferredSize(new java.awt.Dimension(200, 15));
        pgrSis.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        panPrgSis.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(panPrgSis, java.awt.BorderLayout.EAST);

        panPie.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panGrl.add(panPie, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("General", panGrl);

        panCon.add(tabFrm, java.awt.BorderLayout.CENTER);

        getContentPane().add(panCon, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }//GEN-END:initComponents

    private void butPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrvActionPerformed
        // TODO add your handling code here:
        strCodPrv=txtCodPrv.getText();
        mostrarVenConPrv(0);
    }//GEN-LAST:event_butPrvActionPerformed

    private void txtDesLarPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusLost
        // TODO add your handling code here:
        //Validar el contenido de la celda s�lo si ha cambiado.
        if (!txtDesLarPrv.getText().equalsIgnoreCase(strDesLarPrv)){
            if (txtDesLarPrv.getText().equals("")){
                txtCodPrv.setText("");
                txtDesLarPrv.setText("");
                txtIdeCli.setText("");
                objTblMod.removeAllRows();
            }
            else{
                mostrarVenConPrv(2);
            }
        }
        else
            txtDesLarPrv.setText(strDesLarPrv);

    }//GEN-LAST:event_txtDesLarPrvFocusLost

    private void txtDesLarPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusGained
        // TODO add your handling code here:
        strDesLarPrv=txtDesLarPrv.getText();
        txtDesLarPrv.selectAll();
    }//GEN-LAST:event_txtDesLarPrvFocusGained

    private void txtDesLarPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarPrvActionPerformed
        // TODO add your handling code here:
        txtDesLarPrv.transferFocus();
    }//GEN-LAST:event_txtDesLarPrvActionPerformed

    private void txtCodPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusLost
        // TODO add your handling code here:
        //Validar el contenido de la celda s�lo si ha cambiado.
        if (!txtCodPrv.getText().equalsIgnoreCase(strCodPrv)){
            if (txtCodPrv.getText().equals("")){
                txtCodPrv.setText("");
                txtDesLarPrv.setText("");
                txtIdeCli.setText("");
                objTblMod.removeAllRows();
            }
            else{
                mostrarVenConPrv(1);
            }
        }
        else
            txtCodPrv.setText(strCodPrv);

    }//GEN-LAST:event_txtCodPrvFocusLost

    private void txtCodPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusGained
        // TODO add your handling code here:
        strCodPrv=txtCodPrv.getText();
        txtCodPrv.selectAll();
    }//GEN-LAST:event_txtCodPrvFocusGained

    private void txtCodPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodPrvActionPerformed
        // TODO add your handling code here:
        txtCodPrv.transferFocus();
    }//GEN-LAST:event_txtCodPrvActionPerformed

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        // TODO add your handling code here:
        //Realizar acci�n de acuerdo a la etiqueta del bot�n ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar")){
            blnCon=true;
            if (objThrGUI==null){
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
        }
        else{
            blnCon=false;
        }
    }//GEN-LAST:event_butConActionPerformed

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        // TODO add your handling code here:
        String strTit, strMsg;
        try{
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="�Est� seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                //Cerrar la conexi�n si est� abierta.
                if (rstCab!=null){
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e){
            dispose();
        }
    }//GEN-LAST:event_exitForm

    
    /** Cerrar la aplicaci�n. */
    private void exitForm(){
        // TODO add your handling code here:
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="�Est� seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION){
            dispose();
        }
    }
    
    
    private void butCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerrarActionPerformed
        // TODO add your handling code here:
        exitForm();
    }//GEN-LAST:event_butCerrarActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCerrar;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butPrv;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblPrv;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panButPro;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panCen;
    private javax.swing.JPanel panCon;
    private javax.swing.JPanel panFilCli;
    private javax.swing.JPanel panGrl;
    private javax.swing.JPanel panPie;
    private javax.swing.JPanel panPrgSis;
    private javax.swing.JPanel panTit;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnConTbl;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodPrv;
    private javax.swing.JTextField txtDesLarPrv;
    private javax.swing.JTextField txtIdeCli;
    // End of variables declaration//GEN-END:variables
    
    
    private boolean configurarFrm(){
        boolean blnRes=true;
        try{
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.1");
            lblTit.setText(strAux);
            
            if(objParSis.getCodigoMenu()==462){
                lblTit.setText(strAux);
                lblPrv.setText("Clientes:");
            }
            else{
                lblTit.setText(strAux);
                lblPrv.setText("Proveedores:");
            }
            
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(5);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_TIP_DOC,"COD.TIP.DOC.");
            vecCab.add(INT_TBL_DAT_DES_COR_TIP_DOC,"TIP.DOC");
            vecCab.add(INT_TBL_DAT_DES_LAR_TIP_DOC,"TIPO DE DOCUMENTO");
            vecCab.add(INT_TBL_DAT_CAN_MOV,"MOVIMIENTOS");
            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            
            configurarVenConPrv();
            
            
            //Configurar JTable: Establecer tipo de selecci�n.
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el men� de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(40);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DES_COR_TIP_DOC).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_DAT_DES_LAR_TIP_DOC).setPreferredWidth(150);
            tcmAux.getColumn(INT_TBL_DAT_CAN_MOV).setPreferredWidth(60);
            
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Editor de b�squeda.
            objTblBus=new ZafTblBus(tblDat);
            //Configurar JTable: Establecer la clase que controla el ordenamiento.
            objTblOrd=new ZafTblOrd(tblDat);
            
            objTblMod.setModoOperacion(objTblMod.INT_TBL_NO_EDI);

            //Libero los objetos auxiliares.
            tcmAux=null;
            txtIdeCli.setVisible(false);
            txtIdeCli.setEditable(false);
            
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren m�s espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter{
        public void mouseMoved(java.awt.event.MouseEvent evt){
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol){
                case INT_TBL_DAT_COD_TIP_DOC:
                    strMsg="Codigo del Tipo de Documento";
                    break;
                case INT_TBL_DAT_DES_COR_TIP_DOC:
                    strMsg="Descripci�n corta del tipo de documento";
                    break;
                case INT_TBL_DAT_DES_LAR_TIP_DOC:
                    strMsg="Descripci�n larga del tipo de documento";
                    break;
                case INT_TBL_DAT_CAN_MOV:
                    strMsg="Cantidad de movimientos";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
    
    /**
     * Esta clase implementa la interface DocumentListener que observa los cambios que
     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
     * Se la usa en el sistema para determinar si existe alg�n cambio que se deba grabar
     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
     * presentar� un mensaje advirtiendo que si no guarda los cambios los perder�.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener{
        public void changedUpdate(javax.swing.event.DocumentEvent evt){
            blnHayCam=true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt){
            blnHayCam=true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt){
            blnHayCam=true;
        }
    }
    
    private class ZafThreadGUI extends Thread{
        public void run(){
            //Limpiar objetos.
            objTblMod.removeAllRows();
            if (!cargarDetReg()){
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable s�lo cuando haya datos.
            if (tblDat.getRowCount()>0){
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }

    /**
     * Esta funci�n configura la "Ventana de consulta" que ser� utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConPrv(){
        boolean blnRes=true;
        try{
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("C�digo");
            arlAli.add("Identificaci�n");
            arlAli.add("Nombre");
            arlAli.add("Direcci�n");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
            strSQL+=" FROM tbm_cli AS a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            
            System.out.println("EL CODIGO DE MENU ES : " + objParSis.getCodigoMenu());
            
            if(objParSis.getCodigoMenu()==462){
                strSQL+=" AND a1.st_cli='S'";
            }
            else{
                strSQL+=" AND a1.st_prv='S'";
            }
            strSQL+=" ORDER BY a1.tx_nom";
            //Ocultar columnas.
            int intColOcu[]=new int[1];
            intColOcu[0]=4;
            String strTitVenCon="";
            if(objParSis.getCodigoMenu()==462){
                strTitVenCon="Listado de clientes";
            }
            else{
                strTitVenCon="Listado de proveedores";
            }
            
            vcoPrv=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, strTitVenCon, strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoPrv.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean cargarDetReg(){
        boolean blnRes=true;
        vecDat.clear();
        int intNumTotReg;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT COUNT(*) FROM(";
                
                strSQL+="SELECT codEmp, co_cli, tx_ide, tx_nom, co_tipDoc, SUM(canMov) AS canMov, tx_descor, tx_desLar FROM(";
                strSQL+="SELECT y.*, x.co_emp AS codEmp, x.co_tipDoc, x.canMov, x.tx_desCor, x.tx_desLar FROM(";
                //INICIO DE NUEVO ESQUEMA

                strSQL+=" 	SELECT x.co_emp, x.co_loc, x.co_tipDoc, COUNT(x.co_doc) AS canMov, x.co_cli, x.tx_desCor, x.tx_desLar FROM(";
                strSQL+=" 	      SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, COUNT(a1.co_doc) AS canMov, c1.co_cli, a2.tx_desCor, a2.tx_desLar";
                strSQL+=" 	      FROM (   	(tbm_pagMovInv AS b1 INNER JOIN tbm_cabMovInv AS c1";
                strSQL+=" 		 ON b1.co_emp=c1.co_emp AND b1.co_loc=c1.co_loc AND b1.co_tipDoc=c1.co_tipDoc AND b1.co_doc=c1.co_doc)";
                strSQL+=" 	      INNER  JOIN tbm_detPag AS b2";
                strSQL+=" 	      ON b1.co_emp=b2.co_emp AND b1.co_loc=b2.co_locPag AND b1.co_tipDoc=b2.co_tipDocPag AND b1.co_doc=b2.co_docPag)";
                strSQL+=" 	      INNER JOIN tbm_CabPag AS a1";
                strSQL+=" 	      ON b2.co_emp=a1.co_emp AND b2.co_loc=a1.co_loc AND b2.co_tipDoc=a1.co_tipDoc AND b2.co_doc=a1.co_doc";
                strSQL+=" 	      INNER JOIN tbm_cabTipDoc AS a2  ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                strSQL+=" 	      WHERE a1.st_reg NOT IN('I', 'E')";
                strSQL+="               AND c1.co_cli=" + txtCodPrv.getText() + "";
                strSQL+="               AND a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" 	      GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, c1.co_cli, a2.tx_desCor, a2.tx_desLar";
                strSQL+=" UNION ALL";
                strSQL+=" 	      SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, COUNT(a1.co_doc) AS canMov, a1.co_cli, a2.tx_desCor, a2.tx_desLar";
                strSQL+=" 	      FROM tbm_CabPag AS a1";
                strSQL+=" 	      INNER JOIN tbm_cabTipDoc AS a2  ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                strSQL+=" 	      WHERE a1.st_reg NOT IN('I', 'E')";
                strSQL+="               AND a1.co_cli=" + txtCodPrv.getText() + "";
                strSQL+="               AND a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" 	      GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.co_cli, a2.tx_desCor, a2.tx_desLar";
                strSQL+=" 	) AS x";
                strSQL+=" 	GROUP BY x.co_emp, x.co_loc, x.co_tipDoc, x.co_cli, x.tx_desCor, x.tx_desLar) AS x";
                //FIN DE NUEVO ESQUEMA
                
                
                strSQL+=" 	INNER JOIN(";
                strSQL+=" 		SELECT x.*FROM(";
                strSQL+=" 		SELECT co_emp, co_cli, tx_ide, tx_nom";
                strSQL+=" 		FROM tbm_cli) AS x";
                strSQL+=" 		 INNER JOIN(";
                strSQL+=" 			SELECT co_emp, tx_ide";
                strSQL+=" 			FROM tbm_cli";
                strSQL+=" 			WHERE co_emp=" + objParSis.getCodigoEmpresa() + " AND st_reg NOT IN('E')";
                strSQL+=" 			GROUP BY co_emp, tx_ide";
                strSQL+=" 			ORDER BY tx_ide";
                strSQL+=" 		) AS y";
                strSQL+=" 		ON x.co_emp=y.co_emp AND x.tx_ide=y.tx_ide";
                strSQL+=" 		ORDER BY x.tx_ide";
                strSQL+=" 	) AS y";
                strSQL+=" ON x.co_emp=y.co_emp AND x.co_cli=y.co_cli";
                strSQL+=" WHERE x.co_cli=" + txtCodPrv.getText() + "";
                strSQL+=" GROUP BY y.co_emp, y.co_cli, y.tx_ide, y.tx_nom, x.co_emp, x.co_tipDoc, x.canMov, x.tx_desCor, x.tx_desLar";
                strSQL+=" UNION";
                strSQL+=" SELECT y.*, x.co_emp, x.co_tipDoc, x.canMov, x.tx_desCor, x.tx_desLar FROM(";
                strSQL+=" 	SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, COUNT(a1.co_tipDoc) AS canMov, a1.co_cli";
                strSQL+=" 	, a2.tx_desCor, a2.tx_desLar";
                strSQL+=" 	FROM tbm_CabMovInv AS a1";
                strSQL+=" 	INNER JOIN tbm_cabTipDoc AS a2";
                strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                strSQL+=" 	WHERE a1.st_reg NOT IN('I', 'E')";
                strSQL+=" 	GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_cli, a2.tx_desCor, a2.tx_desLar) AS x";
                strSQL+=" 	INNER JOIN(";
                strSQL+=" 		SELECT x.*FROM(";
                strSQL+=" 		SELECT co_emp, co_cli, tx_ide, tx_nom";
                strSQL+=" 		FROM tbm_cli) AS x";
                strSQL+=" 		 INNER JOIN(";
                strSQL+=" 			SELECT co_emp, tx_ide";
                strSQL+=" 			FROM tbm_cli";
                strSQL+=" 			WHERE co_emp=" + objParSis.getCodigoEmpresa() + " AND st_reg NOT IN('E')";
                strSQL+=" 			GROUP BY co_emp, tx_ide";
                strSQL+=" 			ORDER BY tx_ide";
                strSQL+=" 		) AS y";
                strSQL+=" 		ON x.co_emp=y.co_emp AND x.tx_ide=y.tx_ide";
                strSQL+=" 		ORDER BY x.tx_ide";
                strSQL+=" 	) AS y";
                strSQL+=" ON x.co_emp=y.co_emp AND x.co_cli=y.co_cli";
                strSQL+=" WHERE x.co_cli=" + txtCodPrv.getText() + "";
                strSQL+=" GROUP BY y.co_emp, y.co_cli, y.tx_ide, y.tx_nom, x.co_emp, x.co_tipDoc, x.canMov, x.tx_desCor, x.tx_desLar";
                if(objParSis.getCodigoMenu()==462){
                    strSQL+=" UNION";
                    strSQL+=" SELECT y.*, x.co_emp, 0 AS co_tipDoc, x.canMov, x.tx_desCor, x.tx_desLar FROM(";
                    strSQL+=" 	SELECT a1.co_emp, COUNT(a1.co_cot) AS canMov, a1.co_cli";
                    strSQL+=" 	, CAST('COTVEN' AS character varying) AS tx_desCor, CAST('Cotizaci�n de Venta' AS character varying) AS tx_desLar";
                    strSQL+=" 	FROM tbm_CabCotVen AS a1";
                    strSQL+=" 	WHERE a1.st_reg NOT IN('I', 'E')";
                    strSQL+=" 	GROUP BY a1.co_emp, a1.co_cli) AS x";
                    strSQL+=" 	INNER JOIN(";
                    strSQL+=" 		SELECT x.*FROM(";
                    strSQL+=" 		SELECT co_emp, co_cli, tx_ide, tx_nom";
                    strSQL+=" 		FROM tbm_cli) AS x";
                    strSQL+=" 		 INNER JOIN(";
                    strSQL+=" 			SELECT co_emp, tx_ide";
                    strSQL+=" 			FROM tbm_cli";
                    strSQL+=" 			WHERE co_emp=" + objParSis.getCodigoEmpresa() + " AND st_reg NOT IN('E')";
                    strSQL+=" 			GROUP BY co_emp, tx_ide";
                    strSQL+=" 			ORDER BY tx_ide";
                    strSQL+=" 		) AS y";
                    strSQL+=" 		ON x.co_emp=y.co_emp AND x.tx_ide=y.tx_ide";
                    strSQL+=" 		ORDER BY x.tx_ide";
                    strSQL+=" 	) AS y";
                    strSQL+=" ON x.co_emp=y.co_emp AND x.co_cli=y.co_cli";
                    strSQL+=" WHERE x.co_cli=" + txtCodPrv.getText() + "";
                    strSQL+=" GROUP BY y.co_emp, y.co_cli, y.tx_ide, y.tx_nom, x.co_emp, x.canMov, x.tx_desCor, x.tx_desLar";
//                    strSQL+=" ORDER BY tx_desCor";
                }
                else{
                    strSQL+=" UNION";
                    strSQL+=" SELECT y.*, x.co_emp, 0 AS co_tipDoc, x.canMov, x.tx_desCor, x.tx_desLar FROM(";
                    strSQL+=" 	SELECT a1.co_emp, COUNT(a1.co_cot) AS canMov, a1.co_prv";
                    strSQL+=" 	, CAST('COTCOM' AS character varying) AS tx_desCor, CAST('Cotizaci�n de Compra' AS character varying) AS tx_desLar";
                    strSQL+=" 	FROM tbm_CabCotCom AS a1";
                    strSQL+=" 	WHERE a1.st_reg NOT IN('I', 'E')";
                    strSQL+=" 	GROUP BY a1.co_emp, a1.co_prv) AS x";
                    strSQL+=" 	INNER JOIN(";
                    strSQL+=" 		SELECT x.*FROM(";
                    strSQL+=" 		SELECT co_emp, co_cli as co_prv, tx_ide, tx_nom";
                    strSQL+=" 		FROM tbm_cli) AS x";
                    strSQL+=" 		 INNER JOIN(";
                    strSQL+=" 			SELECT co_emp, tx_ide";
                    strSQL+=" 			FROM tbm_cli";
                    strSQL+=" 			WHERE co_emp=" + objParSis.getCodigoEmpresa() + " AND st_reg NOT IN('E')";
                    strSQL+=" 			GROUP BY co_emp, tx_ide";
                    strSQL+=" 			ORDER BY tx_ide";
                    strSQL+=" 		) AS y";
                    strSQL+=" 		ON x.co_emp=y.co_emp AND x.tx_ide=y.tx_ide";
                    strSQL+=" 		ORDER BY x.tx_ide";
                    strSQL+=" 	) AS y";
                    strSQL+=" ON x.co_emp=y.co_emp AND x.co_prv=y.co_prv";
                    strSQL+=" WHERE x.co_prv=" + txtCodPrv.getText() + "";
                    strSQL+=" GROUP BY y.co_emp, y.co_prv, y.tx_ide, y.tx_nom, x.co_emp, x.canMov, x.tx_desCor, x.tx_desLar";
//                    strSQL+=" ORDER BY tx_desCor";
                }
                
                
                strSQL+=" UNION";
                strSQL+=" SELECT a1.co_emp, a1.co_cli, a2.tx_ide, a2.tx_nom,  a2.co_emp, 999 AS co_tipDoc, COUNT(co_sol) AS canMov,";
                strSQL+=" CAST('SOLCRE' AS CHARACTER VARYING) AS tx_desCor, CAST('Solicitud de Cr�dito' AS CHARACTER VARYING) AS tx_desLar";
                strSQL+=" FROM tbm_solCre AS a1";
                strSQL+=" INNER JOIN tbm_cli AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a1.co_cli=" + txtCodPrv.getText() + " AND a1.st_reg NOT IN('I', 'E')";
                strSQL+=" GROUP BY a1.co_emp, a1.co_cli, a2.tx_ide, a2.tx_nom, a2.co_emp";
                
                
                
                strSQL+=" ) AS z";
                strSQL+=" GROUP BY codEmp, co_cli, tx_ide, tx_nom, co_tipDoc, tx_descor, tx_desLar";
                strSQL+=" ORDER BY tx_desCor";
                
                strSQL+=") AS w";
                System.out.println("SQL DE CONTADOS REGISTROS: " + strSQL);
                
                intNumTotReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intNumTotReg==-1)
                    return false;
                
                
                strSQL="";
                strSQL+="SELECT codEmp, co_cli, tx_ide, tx_nom, co_tipDoc, SUM(canMov) AS canMov, tx_descor, tx_desLar FROM(";                
                strSQL+=" SELECT y.*, x.co_emp AS codEmp, x.co_tipDoc, x.canMov, x.tx_desCor, x.tx_desLar FROM(";
                strSQL+="                 	SELECT x.co_emp, x.co_loc, x.co_tipDoc, SUM(canMov) AS canMov, x.co_cli, x.tx_desCor, x.tx_desLar FROM(";
                strSQL+=" 			   SELECT w.co_emp, w.co_loc, w.co_tipDoc, COUNT(co_doc) AS canMov, w.co_cli, w.tx_desCor, w.tx_desLar FROM(";
                strSQL+="                  	      SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, c1.co_cli, a2.tx_desCor, a2.tx_desLar";
                strSQL+="                  	      FROM (   	(tbm_pagMovInv AS b1 INNER JOIN tbm_cabMovInv AS c1";
                strSQL+="                  		 ON b1.co_emp=c1.co_emp AND b1.co_loc=c1.co_loc AND b1.co_tipDoc=c1.co_tipDoc AND b1.co_doc=c1.co_doc)";
                strSQL+="                  	      INNER  JOIN tbm_detPag AS b2";
                strSQL+="                  	      ON b1.co_emp=b2.co_emp AND b1.co_loc=b2.co_locPag AND b1.co_tipDoc=b2.co_tipDocPag AND b1.co_doc=b2.co_docPag)";
                strSQL+="                  	      INNER JOIN tbm_CabPag AS a1";
                strSQL+="                  	      ON b2.co_emp=a1.co_emp AND b2.co_loc=a1.co_loc AND b2.co_tipDoc=a1.co_tipDoc AND b2.co_doc=a1.co_doc";
                strSQL+="                  	      INNER JOIN tbm_cabTipDoc AS a2  ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                strSQL+="                  	      WHERE a1.st_reg NOT IN('I', 'E')";
                strSQL+="                                AND c1.co_cli=" + txtCodPrv.getText() + "";
                strSQL+="                                AND a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="                  	      GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, c1.co_cli, a2.tx_desCor, a2.tx_desLar";
                strSQL+=" 				order by a1.co_emp, a1.co_loc, a1.co_tipDoc";
                strSQL+=" 			  ) AS w";
                strSQL+=" 			  GROUP BY w.co_emp, w.co_loc, w.co_tipDoc, w.co_cli, w.tx_desCor, w.tx_desLar";
                strSQL+="                  UNION";
                strSQL+="                  	      SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, COUNT(a1.co_doc) AS canMov, a1.co_cli, a2.tx_desCor, a2.tx_desLar";
                strSQL+="                  	      FROM tbm_CabPag AS a1";
                strSQL+="                  	      INNER JOIN tbm_cabTipDoc AS a2  ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                strSQL+="                  	      WHERE a1.st_reg NOT IN('I', 'E')";
                strSQL+="                                AND a1.co_cli=" + txtCodPrv.getText() + "";
                strSQL+="                                AND a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="                  	      GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_cli, a2.tx_desCor, a2.tx_desLar";
                strSQL+="                  	) AS x";
                strSQL+="                  	GROUP BY x.co_emp, x.co_loc, x.co_tipDoc, x.co_cli, x.tx_desCor, x.tx_desLar) AS x";
                strSQL+=" 	INNER JOIN(";
                strSQL+=" 		SELECT x.*FROM(";
                strSQL+=" 		SELECT co_emp, co_cli, tx_ide, tx_nom";
                strSQL+=" 		FROM tbm_cli) AS x";
                strSQL+=" 		 INNER JOIN(";
                strSQL+=" 			SELECT co_emp, tx_ide";
                strSQL+=" 			FROM tbm_cli";
                strSQL+=" 			WHERE co_emp=" + objParSis.getCodigoEmpresa() + " AND st_reg NOT IN('E')";
                strSQL+=" 			GROUP BY co_emp, tx_ide";
                strSQL+=" 			ORDER BY tx_ide";
                strSQL+=" 		) AS y";
                strSQL+=" 		ON x.co_emp=y.co_emp AND x.tx_ide=y.tx_ide";
                strSQL+=" 		ORDER BY x.tx_ide";
                strSQL+=" 	) AS y";
                strSQL+=" ON x.co_emp=y.co_emp AND x.co_cli=y.co_cli";
                strSQL+=" WHERE x.co_cli=" + txtCodPrv.getText() + "";
                strSQL+=" GROUP BY y.co_emp, y.co_cli, y.tx_ide, y.tx_nom, x.co_emp, x.co_tipDoc, x.canMov, x.tx_desCor, x.tx_desLar";
                strSQL+=" UNION";
                strSQL+=" SELECT y.*, x.co_emp, x.co_tipDoc, x.canMov, x.tx_desCor, x.tx_desLar FROM(";
                strSQL+=" 	SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, COUNT(a1.co_tipDoc) AS canMov, a1.co_cli";
                strSQL+=" 	, a2.tx_desCor, a2.tx_desLar";
                strSQL+=" 	FROM tbm_CabMovInv AS a1";
                strSQL+=" 	INNER JOIN tbm_cabTipDoc AS a2";
                strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                strSQL+=" 	WHERE a1.st_reg NOT IN('I', 'E')";
                strSQL+=" 	GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_cli, a2.tx_desCor, a2.tx_desLar) AS x";
                strSQL+=" 	INNER JOIN(";
                strSQL+=" 		SELECT x.*FROM(";
                strSQL+=" 		SELECT co_emp, co_cli, tx_ide, tx_nom";
                strSQL+=" 		FROM tbm_cli) AS x";
                strSQL+=" 		 INNER JOIN(";
                strSQL+=" 			SELECT co_emp, tx_ide";
                strSQL+=" 			FROM tbm_cli";
                strSQL+=" 			WHERE co_emp=" + objParSis.getCodigoEmpresa() + " AND st_reg NOT IN('E') ";
                strSQL+=" 			GROUP BY co_emp, tx_ide";
                strSQL+=" 			ORDER BY tx_ide";
                strSQL+=" 		) AS y";
                strSQL+=" 		ON x.co_emp=y.co_emp AND x.tx_ide=y.tx_ide";
                strSQL+=" 		ORDER BY x.tx_ide";
                strSQL+=" 	) AS y";
                strSQL+=" ON x.co_emp=y.co_emp AND x.co_cli=y.co_cli";
                strSQL+=" WHERE x.co_cli=" + txtCodPrv.getText() + "";
                strSQL+=" GROUP BY y.co_emp, y.co_cli, y.tx_ide, y.tx_nom, x.co_emp, x.co_tipDoc, x.canMov, x.tx_desCor, x.tx_desLar";
                if(objParSis.getCodigoMenu()==462){
                    strSQL+=" UNION";
                    strSQL+=" SELECT y.*, x.co_emp, 0 AS co_tipDoc, x.canMov, x.tx_desCor, x.tx_desLar FROM(";
                    strSQL+=" 	SELECT a1.co_emp, COUNT(a1.co_cot) AS canMov, a1.co_cli";
                    strSQL+=" 	, CAST('COTVEN' AS character varying) AS tx_desCor, CAST('Cotizaci�n de Venta' AS character varying) AS tx_desLar";
                    strSQL+=" 	FROM tbm_CabCotVen AS a1";
                    strSQL+=" 	WHERE a1.st_reg NOT IN('I', 'E')";
                    strSQL+=" 	GROUP BY a1.co_emp, a1.co_cli) AS x";
                    strSQL+=" 	INNER JOIN(";
                    strSQL+=" 		SELECT x.*FROM(";
                    strSQL+=" 		SELECT co_emp, co_cli, tx_ide, tx_nom";
                    strSQL+=" 		FROM tbm_cli) AS x";
                    strSQL+=" 		 INNER JOIN(";
                    strSQL+=" 			SELECT co_emp, tx_ide";
                    strSQL+=" 			FROM tbm_cli";
                    strSQL+=" 			WHERE co_emp=" + objParSis.getCodigoEmpresa() + " AND st_reg NOT IN('E')";
                    strSQL+=" 			GROUP BY co_emp, tx_ide";
                    strSQL+=" 			ORDER BY tx_ide";
                    strSQL+=" 		) AS y";
                    strSQL+=" 		ON x.co_emp=y.co_emp AND x.tx_ide=y.tx_ide";
                    strSQL+=" 		ORDER BY x.tx_ide";
                    strSQL+=" 	) AS y";
                    strSQL+=" ON x.co_emp=y.co_emp AND x.co_cli=y.co_cli";
                    strSQL+=" WHERE x.co_cli=" + txtCodPrv.getText() + "";
                    strSQL+=" GROUP BY y.co_emp, y.co_cli, y.tx_ide, y.tx_nom, x.co_emp, x.canMov, x.tx_desCor, x.tx_desLar";
//                    strSQL+=" ORDER BY tx_desCor";
                }
                else{
                    strSQL+=" UNION";
                    strSQL+=" SELECT y.*, x.co_emp, 0 AS co_tipDoc, x.canMov, x.tx_desCor, x.tx_desLar FROM(";
                    strSQL+=" 	SELECT a1.co_emp, COUNT(a1.co_cot) AS canMov, a1.co_prv";
                    strSQL+=" 	, CAST('COTCOM' AS character varying) AS tx_desCor, CAST('Cotizaci�n de Compra' AS character varying) AS tx_desLar";
                    strSQL+=" 	FROM tbm_CabCotCom AS a1";
                    strSQL+=" 	WHERE a1.st_reg NOT IN('I', 'E')";
                    strSQL+=" 	GROUP BY a1.co_emp, a1.co_prv) AS x";
                    strSQL+=" 	INNER JOIN(";
                    strSQL+=" 		SELECT x.*FROM(";
                    strSQL+=" 		SELECT co_emp, co_cli as co_prv, tx_ide, tx_nom";
                    strSQL+=" 		FROM tbm_cli) AS x";
                    strSQL+=" 		 INNER JOIN(";
                    strSQL+=" 			SELECT co_emp, tx_ide";
                    strSQL+=" 			FROM tbm_cli";
                    strSQL+=" 			WHERE co_emp=" + objParSis.getCodigoEmpresa() + " AND st_reg NOT IN('E')";
                    strSQL+=" 			GROUP BY co_emp, tx_ide";
                    strSQL+=" 			ORDER BY tx_ide";
                    strSQL+=" 		) AS y";
                    strSQL+=" 		ON x.co_emp=y.co_emp AND x.tx_ide=y.tx_ide";
                    strSQL+=" 		ORDER BY x.tx_ide";
                    strSQL+=" 	) AS y";
                    strSQL+=" ON x.co_emp=y.co_emp AND x.co_prv=y.co_prv";
                    strSQL+=" WHERE x.co_prv=" + txtCodPrv.getText() + "";
                    strSQL+=" GROUP BY y.co_emp, y.co_prv, y.tx_ide, y.tx_nom, x.co_emp, x.canMov, x.tx_desCor, x.tx_desLar";
//                    strSQL+=" ORDER BY tx_desCor";
                }
                strSQL+=" UNION";
                strSQL+=" SELECT a1.co_emp, a1.co_cli, a2.tx_ide, a2.tx_nom, a2.co_emp, 999 AS co_tipDoc, COUNT(co_sol) AS canMov,";
                strSQL+=" CAST('SOLCRE' AS CHARACTER VARYING) AS tx_desCor, CAST('Solicitud de Cr�dito' AS CHARACTER VARYING) AS tx_desLar";
                strSQL+=" FROM tbm_solCre AS a1";
                strSQL+=" INNER JOIN tbm_cli AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a1.co_cli=" + txtCodPrv.getText() + " AND a1.st_reg NOT IN('I', 'E')";
                strSQL+=" GROUP BY a1.co_emp, a1.co_cli, a2.tx_ide, a2.tx_nom, a2.co_emp";
                
                
                
                
                
                strSQL+=" ) AS z";
                strSQL+=" GROUP BY codEmp, co_cli, tx_ide, tx_nom, co_tipDoc, tx_descor, tx_desLar";
                strSQL+=" ORDER BY tx_desCor";
                
                System.out.println("EN CARGARDET: " + strSQL);
                rst=stm.executeQuery(strSQL);
                while(rst.next()){
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN, "");
                    vecReg.add(INT_TBL_DAT_COD_TIP_DOC,     "" + rst.getString("co_tipDoc"));
                    vecReg.add(INT_TBL_DAT_DES_COR_TIP_DOC, "" + rst.getString("tx_desCor"));
                    vecReg.add(INT_TBL_DAT_DES_LAR_TIP_DOC, "" + rst.getString("tx_desLar"));
                    vecReg.add(INT_TBL_DAT_CAN_MOV,         "" + rst.getString("canMov"));
                    vecDat.add(vecReg);
                }
                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                if (intNumTotReg==tblDat.getRowCount())
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros.");
                else
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros pero s�lo se procesaron " + tblDat.getRowCount() + ".");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private void instanciaHilo(){
        //Realizar acci�n de acuerdo a la etiqueta del bot�n ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar")){
            blnCon=true;
            if (objThrGUI==null){
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
        }
        else{
            blnCon=false;
        }
    }
    
    
    
    
    /**
     * Esta funci�n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de b�squeda determina si se debe hacer
     * una b�squeda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se est� buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opci�n que desea utilizar.
     * @param intTipBus El tipo de b�squeda a realizar.
     * @return true: Si no se present� ning�n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConPrv(int intTipBus){
        boolean blnRes=true;
        try{
            switch (intTipBus){
                case 0: //Mostrar la ventana de consulta.
                    vcoPrv.setCampoBusqueda(2);
                    vcoPrv.show();
                    if (vcoPrv.getSelectedButton()==vcoPrv.INT_BUT_ACE){
                        txtCodPrv.setText(vcoPrv.getValueAt(1));
                        strIdePrv=vcoPrv.getValueAt(2);
                        txtIdeCli.setText(strIdePrv);
                        txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                        strDirPrv=vcoPrv.getValueAt(4);
                    }
                    break;
                case 1: //B�squeda directa por "N�mero de cuenta".
                    if (vcoPrv.buscar("a1.co_cli", txtCodPrv.getText())){
                        txtCodPrv.setText(vcoPrv.getValueAt(1));
                        strIdePrv=vcoPrv.getValueAt(2);
                        txtIdeCli.setText(strIdePrv);
                        txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                        strDirPrv=vcoPrv.getValueAt(4);
                    }
                    else{
                        vcoPrv.setCampoBusqueda(0);
                        vcoPrv.setCriterio1(11);
                        vcoPrv.cargarDatos();
                        vcoPrv.show();
                        if (vcoPrv.getSelectedButton()==vcoPrv.INT_BUT_ACE){
                            txtCodPrv.setText(vcoPrv.getValueAt(1));
                            strIdePrv=vcoPrv.getValueAt(2);
                            txtIdeCli.setText(strIdePrv);
                            txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                            strDirPrv=vcoPrv.getValueAt(4);
                        }
                        else{
                            txtCodPrv.setText(strCodPrv);
                        }
                    }
                    break;
                case 2: //B�squeda directa por "Descripci�n larga".
                    if (vcoPrv.buscar("a1.tx_nom", txtDesLarPrv.getText())){
                        txtCodPrv.setText(vcoPrv.getValueAt(1));
                        strIdePrv=vcoPrv.getValueAt(2);
                        txtIdeCli.setText(strIdePrv);
                        txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                        strDirPrv=vcoPrv.getValueAt(4);
                    }
                    else{
                        vcoPrv.setCampoBusqueda(2);
                        vcoPrv.setCriterio1(11);
                        vcoPrv.cargarDatos();
                        vcoPrv.show();
                        if (vcoPrv.getSelectedButton()==vcoPrv.INT_BUT_ACE){
                            txtCodPrv.setText(vcoPrv.getValueAt(1));
                            strIdePrv=vcoPrv.getValueAt(2);
                            txtIdeCli.setText(strIdePrv);
                            txtDesLarPrv.setText(vcoPrv.getValueAt(3));
                            strDirPrv=vcoPrv.getValueAt(4);
                        }
                        else{
                            txtDesLarPrv.setText(strDesLarPrv);
                        }
                    }
                    break;
            }
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    
    
}
