/*
 * ZafCxC23_04.java
 *
 * Created on 13 de junio de 2008, 08:20 PM
 */

package CxC.ZafCxC23;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;

/**
 *
 * @author  Eddye Lino
 */
public class ZafCxC23_04 extends javax.swing.JDialog
{
    //Constantes: Columnas del JTable:
    static final int INT_TBL_DAT_LIN=0;                         //Línea
    static final int INT_TBL_DAT_COD_EMP=1;                     //Código de la empresa.
    static final int INT_TBL_DAT_COD_LOC=2;                     //Código del local.
    static final int INT_TBL_DAT_FEC_ING=3;                     //Fecha de ingreso.
    static final int INT_TBL_DAT_OBS=4;                         //Observación.
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblFilCab objTblFilCab;
    private ZafTblMod objTblMod;
    private ZafThreadGUI objThrGUI;
    private ZafTblCelRenLbl objTblCelRenLbl;                    //Render: Presentar JLabel en JTable.
    private ZafMouMotAda objMouMotAda;                          //ToolTipText en TableHeader.
    private ZafTblPopMnu objTblPopMnu;                          //PopupMenu: Establecer PopupMenú en JTable.
    private ZafTblBus objTblBus;                                //Editor de búsqueda.
    private ZafTblOrd objTblOrd;                                //JTable de ordenamiento.
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg;
    //Variables de la clase.
    private int intOpcSelDlg;                                   //Opción seleccionada en el JDialog.
    private int intCodEmp;                                      //Código de la empresa.
    private int intCodLoc;                                      //Código del local.
    private int intCodCli;                                      //Código del cliente.
    private String strIdeCli;                                   //Identificación del cliente.
    private ZafCxC23_04_01 objCxC23_04_01;
    
    /** Creates new form ZafCxC23_01 */
    public ZafCxC23_04(java.awt.Frame parent, boolean modal, ZafParSis obj, boolean blnHabButAce)
    {
        super(parent, modal);
        try
        {
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
            intOpcSelDlg=0;
            butAce.setVisible(blnHabButAce);
            if (!configurarFrm())
                exitForm();
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        sppRpt = new javax.swing.JSplitPane();
        tabFrm = new javax.swing.JTabbedPane();
        spnObsTodEmp = new javax.swing.JScrollPane();
        edpObsTodEmp = new javax.swing.JEditorPane();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butAce = new javax.swing.JButton();
        butCan = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        sppRpt.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        sppRpt.setResizeWeight(0.5);
        sppRpt.setOneTouchExpandable(true);

        spnObsTodEmp.setViewportView(edpObsTodEmp);

        tabFrm.addTab("Observaciones", spnObsTodEmp);

        sppRpt.setTopComponent(tabFrm);

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnDat.setViewportView(tblDat);

        sppRpt.setBottomComponent(spnDat);

        panFrm.add(sppRpt, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butAce.setText("Aceptar");
        butAce.setPreferredSize(new java.awt.Dimension(92, 25));
        butAce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAceActionPerformed(evt);
            }
        });
        panBot.add(butAce);

        butCan.setText("Cancelar");
        butCan.setToolTipText("Cierra el cuadro de dialogo");
        butCan.setPreferredSize(new java.awt.Dimension(92, 25));
        butCan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCanActionPerformed(evt);
            }
        });
        panBot.add(butCan);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-400)/2, 600, 400);
    }// </editor-fold>//GEN-END:initComponents

    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        intOpcSelDlg=0;
        dispose();
    }//GEN-LAST:event_exitForm

    private void butAceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAceActionPerformed
        if (mostrarMsgCon("¿Está seguro que desea realizar esta operación?")==0)
        {
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.setIndFunEje(0);
                objThrGUI.start();
            }
        }
    }//GEN-LAST:event_butAceActionPerformed

    private void butCanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCanActionPerformed
        intOpcSelDlg=0;
        dispose();
    }//GEN-LAST:event_butCanActionPerformed
    
    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        intOpcSelDlg=0;
        dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butAce;
    private javax.swing.JButton butCan;
    private javax.swing.JEditorPane edpObsTodEmp;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFrm;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JScrollPane spnObsTodEmp;
    private javax.swing.JSplitPane sppRpt;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables
 
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux="Observaciones CxC";
            this.setTitle(strAux + " v0.4");
            lblTit.setText(strAux);
            //Configurar objetos.
            if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
            {
                edpObsTodEmp.setContentType("text/html");
                edpObsTodEmp.setEditable(false);
            }
            //Configurar los JTables.
            configurarTblDat();
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función configura el JTable "tblDat".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDat()
    {
        boolean blnRes=true;
        try
        {
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(5);   //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_EMP,"Cód.Emp.");
            vecCab.add(INT_TBL_DAT_COD_LOC,"Cód.Loc.");
            vecCab.add(INT_TBL_DAT_FEC_ING,"Fec.Ing.");
            vecCab.add(INT_TBL_DAT_OBS,"Observación");
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_FEC_ING).setPreferredWidth(77);
            tcmAux.getColumn(INT_TBL_DAT_OBS).setPreferredWidth(405);
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
//            tcmAux.getColumn(INT_TBL_DAT_BUT_CTA).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Ocultar columnas del sistema.
            if (objParSis.getCodigoEmpresa()!=objParSis.getCodigoEmpresaGrupo())
            {
                objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_EMP, tblDat);
            }
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_LOC, tblDat);
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Editor de búsqueda.
            objTblBus=new ZafTblBus(tblDat);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            //Configurar JTable: Establecer la clase que controla el ordenamiento.
            objTblOrd=new ZafTblOrd(tblDat);
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite cargar el registro seleccionado.
     * @return true: Si se pudo cargar el registro.
     * <BR>false: En el caso contrario.
     */
    public boolean cargarReg()
    {
        boolean blnRes=true;
        try
        {
            cargarObsCxC();
            cargarDetReg();
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }
    
    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarObsCxC()
    {
        int intTabIniEmp, intNumTotEmp, i;
        String strObsTodEmp;
        boolean blnRes=true;
        try
        {
            intNumTotEmp=tabFrm.getTabCount();
            if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                intTabIniEmp=1;
            else
                intTabIniEmp=0;
            //Borrar los Tabs. Si es el "Grupo" se borran todos los Tabs a excepción del primero.
            for (i=intNumTotEmp-1; i>=intTabIniEmp; i--)
            {
                tabFrm.remove(i);
            }
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT a1.co_emp, a2.tx_nom, a1.co_cli, a1.tx_obsCxC";
                strSQL+=" FROM tbm_cli AS a1";
                strSQL+=" INNER JOIN tbm_emp AS a2 ON (a1.co_emp=a2.co_emp)";
                if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                {
                    strSQL+=" WHERE a1.tx_ide='" + strIdeCli + "'";
                }
                else
                {
                    strSQL+=" WHERE a1.co_emp=" + intCodEmp;
                    strSQL+=" AND a1.co_cli=" + intCodCli;
                }
                strSQL+=" ORDER BY a1.co_emp";
                rst=stm.executeQuery(strSQL);
                //Obtener los registros.
                while (rst.next())
                {
                    objCxC23_04_01=new ZafCxC23_04_01();
                    objCxC23_04_01.setCodEmp(rst.getInt("co_emp"));
                    objCxC23_04_01.setNomEmp(rst.getString("tx_nom"));
                    objCxC23_04_01.setCodCli(rst.getInt("co_cli"));
                    objCxC23_04_01.setObsCxC(rst.getString("tx_obsCxC"));
                    tabFrm.addTab(objCxC23_04_01.getNomEmp(), objCxC23_04_01);
                }
                //Hacer que aparezcan las observaciones de todas las empresas en el JEditorPane.
                if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                {
                    intNumTotEmp=tabFrm.getTabCount();
                    strObsTodEmp="<HTML>";
                    for (i=1; i<intNumTotEmp; i++)
                    {
                        strObsTodEmp+="<B><FONT FACE=\"Dialog.plain\" COLOR=\"blue\" SIZE=\"3\">" + tabFrm.getTitleAt(i) + ":</FONT></B><BR><FONT FACE=\"Dialog.plain\" SIZE=\"3\">" + ((ZafCxC23_04_01)tabFrm.getComponentAt(i)).getObsCxC().replace("\n", "<BR>") + "</FONT><BR>";
                    }
                    strObsTodEmp+="</HTML>";
                    edpObsTodEmp.setText(strObsTodEmp);
                    edpObsTodEmp.setCaretPosition(0);
                    tabFrm.setSelectedIndex(0);
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg()
    {
        boolean blnRes=true;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                {
                    //Obtener los datos del "Grupo".
                    //Armar la sentencia SQL.
                    strSQL="";
                    strSQL+="SELECT a2.co_emp, a2.co_loc, a2.fe_ing, a2.tx_obs1";
                    strSQL+=" FROM tbm_cli AS a1";
                    strSQL+=" INNER JOIN tbm_obsCli AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli)";
                    strSQL+=" WHERE a1.tx_ide='" + strIdeCli + "'";
                    strSQL+=" AND a2.ne_mod=3";
                    strSQL+=" ORDER BY a2.fe_ing, a2.co_emp, a2.co_loc, a2.ne_mod, a2.co_reg";
                    rst=stm.executeQuery(strSQL);
                }
                else
                {
                    //Obtener los datos de la "Empresa seleccionada".
                    //Armar la sentencia SQL.
                    strSQL="";
                    strSQL+="SELECT a1.co_emp, a1.co_loc, a1.fe_ing, a1.tx_obs1";
                    strSQL+=" FROM tbm_obsCli AS a1";
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                    strSQL+=" AND a1.co_cli=" + intCodCli;
                    strSQL+=" AND a1.ne_mod=3";
                    strSQL+=" ORDER BY a1.fe_ing, a1.co_emp, a1.co_loc, a1.ne_mod, a1.co_reg";
                    rst=stm.executeQuery(strSQL);
                }
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                while (rst.next())
                {
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN,"");
                    vecReg.add(INT_TBL_DAT_COD_EMP,rst.getString("co_emp"));
                    vecReg.add(INT_TBL_DAT_COD_LOC,rst.getString("co_loc"));
                    vecReg.add(INT_TBL_DAT_FEC_ING,rst.getString("fe_ing"));
                    vecReg.add(INT_TBL_DAT_OBS,rst.getString("tx_obs1"));
                    vecDat.add(vecReg);
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función actualiza el registro en la base de datos.
     * @return true: Si se pudo actualizar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarReg()
    {
        boolean blnRes=false;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null)
            {
                if (actualizarObsCxCCli())
                {
                    if (insertarTbmObsCli())
                    {
                        con.commit();
                        blnRes=true;
                    }
                    else
                        con.rollback();
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite actualizar la forma de pago predeterminada del cliente.
     * @return true: Si se pudo actualizar la forma de pago predeterminada del cliente.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarObsCxCCli()
    {
        int intTabIniEmp, intNumTotEmp, i;
        String strObsCxCSinMod, strObsCxC;
        boolean blnRes=true;
        try
        {
            if (con!=null)
            {
                stm=con.createStatement();
                if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                    intTabIniEmp=1;
                else
                    intTabIniEmp=0;
                intNumTotEmp=tabFrm.getTabCount();
                for (i=intTabIniEmp; i<intNumTotEmp; i++)
                {
                    //Sólo insertar si hay cambios en "txaObsCxC".
                    strObsCxCSinMod=((ZafCxC23_04_01)tabFrm.getComponentAt(i)).getObsCxCSinMod();
                    strObsCxC=((ZafCxC23_04_01)tabFrm.getComponentAt(i)).getObsCxC();
                    if (!strObsCxCSinMod.equals(strObsCxC))
                    {
                        //Armar la sentencia SQL.
                        strSQL="";
                        strSQL+="UPDATE tbm_cli";
                        strSQL+=" SET tx_obsCxC=" + objUti.codificar(strObsCxC);
//                        strSQL+=", fe_ultMod='" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "'";
//                        strSQL+=", co_usrMod=" + objParSis.getCodigoUsuario();
                        strSQL+=" WHERE co_emp=" + ((ZafCxC23_04_01)tabFrm.getComponentAt(i)).getCodEmp();
                        strSQL+=" AND co_cli=" + ((ZafCxC23_04_01)tabFrm.getComponentAt(i)).getCodCli();
                        stm.executeUpdate(strSQL);
                    }
                }
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite insertar el histórico de las cotizaciones de venta.
     * @return true: Si se pudo insertar el histórico.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarTbmObsCli()
    {
        int intTabIniEmp, intNumTotEmp, i;
        int intCodLocPre=0, intNumTotLocPre=0, intCodReg=0;
        String strObsCxCSinMod, strObsCxC;
        boolean blnRes=true;
        try
        {
            if (con!=null)
            {
                stm=con.createStatement();
                //Utilizar el local predeterminado.
                if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                    intTabIniEmp=1;
                else
                    intTabIniEmp=0;
                intNumTotEmp=tabFrm.getTabCount();
                for (i=intTabIniEmp; i<intNumTotEmp; i++)
                {
                    //Sólo insertar si "txaObsCxC" tiene algo y si hay cambios en "txaObsCxC".
                    strObsCxCSinMod=((ZafCxC23_04_01)tabFrm.getComponentAt(i)).getObsCxCSinMod();
                    strObsCxC=((ZafCxC23_04_01)tabFrm.getComponentAt(i)).getObsCxC();
                    if (!strObsCxC.equals("") && !strObsCxCSinMod.equals(strObsCxC))
                    {
                        //Determinar el local a utilizar.
                        switch (objParSis.getCodigoMenu())
                        {
                            case 775: //Actualización de datos de crédito.
                                if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                                {
                                    intNumTotLocPre=0;
                                    //Obtener el local predeterminado.
                                    strSQL="";
                                    strSQL+="SELECT co_loc FROM tbm_loc";
                                    strSQL+=" WHERE co_emp=" + ((ZafCxC23_04_01)tabFrm.getComponentAt(i)).getCodEmp();
                                    strSQL+=" AND st_reg='P'";
                                    rst=stm.executeQuery(strSQL);
                                    while (rst.next())
                                    {
                                        intCodLocPre=rst.getInt(1);
                                        intNumTotLocPre++;
                                    }
                                    rst.close();
                                }
                                else
                                {
                                    intNumTotLocPre=1;
                                    intCodLocPre=objParSis.getCodigoLocal();
                                }
                                break;
                            case 616: //Documentos por autorizar.
                                if (((ZafCxC23_04_01)tabFrm.getComponentAt(i)).getCodEmp()==intCodEmp)
                                {
                                    intNumTotLocPre=1;
                                    intCodLocPre=intCodLoc;
                                }
                                else
                                {
                                    intNumTotLocPre=0;
                                    //Obtener el local predeterminado.
                                    strSQL="";
                                    strSQL+="SELECT co_loc FROM tbm_loc";
                                    strSQL+=" WHERE co_emp=" + ((ZafCxC23_04_01)tabFrm.getComponentAt(i)).getCodEmp();
                                    strSQL+=" AND st_reg='P'";
                                    rst=stm.executeQuery(strSQL);
                                    if (rst.next())
                                    {
                                        intCodLocPre=rst.getInt(1);
                                        intNumTotLocPre++;
                                    }
                                    rst.close();
                                }
                                break;
                        }
                        switch (intNumTotLocPre)
                        {
                            case 0:
                                mostrarMsgErr("No existe ningún local predeterminado. \nComunique este problema a su administrador del sistema.");
                                blnRes=false;
                                break;
                            case 1:
                                //Obtener el código del último registro insertado.
                                strSQL="";
                                strSQL+="SELECT MAX(co_reg) AS co_reg FROM tbm_obsCli";
                                strSQL+=" WHERE co_emp=" + ((ZafCxC23_04_01)tabFrm.getComponentAt(i)).getCodEmp();
                                strSQL+=" AND co_loc=" + intCodLocPre;
                                strSQL+=" AND co_cli=" + ((ZafCxC23_04_01)tabFrm.getComponentAt(i)).getCodCli();
                                strSQL+=" AND ne_mod=3";
                                rst=stm.executeQuery(strSQL);
                                if (rst.next())
                                {
                                    intCodReg=rst.getInt(1)+1;
                                }
                                rst.close();
                                //Armar la sentencia SQL.
                                strSQL="";
                                strSQL+="INSERT INTO tbm_obsCli (co_emp, co_loc, co_cli, ne_mod, co_reg, tx_obs1, fe_ing, fe_ultMod, co_usrIng, co_usrMod, tx_comIng, tx_comUltMod, st_regRep)";
                                strSQL+=" VALUES (";
                                strSQL+=((ZafCxC23_04_01)tabFrm.getComponentAt(i)).getCodEmp(); //co_emp
                                strSQL+=", " + intCodLocPre; //co_loc
                                strSQL+=", " + ((ZafCxC23_04_01)tabFrm.getComponentAt(i)).getCodCli(); //co_cli
                                strSQL+=", 3"; //ne_mod
                                strSQL+=", " + intCodReg; //co_reg
                                strSQL+=", " + objUti.codificar(strObsCxC); //tx_obs1
                                strSQL+=", " + objParSis.getFuncionFechaHoraBaseDatos(); //fe_ing
                                strSQL+=", " + objParSis.getFuncionFechaHoraBaseDatos(); //fe_ultMod
                                strSQL+=", " + objParSis.getCodigoUsuario(); //co_usrIng
                                strSQL+=", " + objParSis.getCodigoUsuario(); //co_usrMod
                                strSQL+=", '" + objParSis.getNombreComputadoraConDirIP() + "'"; //tx_comIng
                                strSQL+=", '" + objParSis.getNombreComputadoraConDirIP() + "'"; //tx_comUltMod
                                strSQL+=", 'I'"; //st_regRep
                                strSQL+=")";
                                stm.executeUpdate(strSQL);
                                break;
                            default:
                                mostrarMsgErr("Existe más de un local predeterminado. \nComunique este problema a su administrador del sistema.");
                                blnRes=false;
                                break;
                        }
                    }
                }
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si y No. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    /**
     * Esta función muestra un mensaje de error al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos no se grabaron
     * y que debe comunicar de este particular al administrador del sistema.
     */
    private void mostrarMsgErr(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Esta función establece los parámetros que debe utilizar el JDialog.
     * @param strIdeCli La identificación (RUC/Cédula de identidad) del cliente.
     */
    public void setParDlg(String strIdeCli)
    {
        this.strIdeCli=strIdeCli;
    }

    /**
     * Esta función establece los parámetros que debe utilizar el JDialog.
     * @param intCodEmp El código de la empresa.
     * @param intCodCli El código del cliente.
     */
    public void setParDlg(int intCodEmp, int intCodCli)
    {
        this.intCodEmp=intCodEmp;
        this.intCodCli=intCodCli;
    }

    /**
     * Esta función establece los parámetros que debe utilizar el JDialog.
     * @param intCodEmp El código de la empresa.
     * @param intCodLoc El código del local.
     * @param intCodCli El código del cliente.
     */
    public void setParDlg(int intCodEmp, int intCodLoc, int intCodCli)
    {
        this.intCodEmp=intCodEmp;
        this.intCodLoc=intCodLoc;
        this.intCodCli=intCodCli;
    }

    /**
     * Esta función establece los parámetros que debe utilizar el JDialog.
     * @param intCodEmp El código de la empresa.
     * @param intCodLoc El código del local.
     * @param strIdeCli La identificación (RUC/Cédula de identidad) del cliente.
     */
    public void setParDlg(int intCodEmp, int intCodLoc, String strIdeCli)
    {
        this.intCodEmp=intCodEmp;
        this.intCodLoc=intCodLoc;
        this.strIdeCli=strIdeCli;
    }
    
    /**
     * Esta función obtiene la opción que seleccionó el usuario en el JDialog.
     * Puede devolver uno de los siguientes valores:
     * <UL>
     * <LI>0: Click en el botón Cancelar.
     * <LI>1: Click en el botón Aceptar.
     * </UL>
     * <BR>Nota.- La opción predeterminada es el botón Cancelar.
     * @return La opción seleccionada por el usuario.
     */
    public int getOpcSelDlg()
    {
        return intOpcSelDlg;
    }
    
    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podría presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaría informado en todo
     * momento de lo que ocurre. Si se desea hacer ésto es necesario utilizar ésta clase
     * ya que si no sólo se apreciaría los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        private int intIndFun;
        
        public ZafThreadGUI()
        {
            intIndFun=0;
        }
        
        public void run()
        {
            switch (intIndFun)
            {
                case 0: //Guardar los cambios.
                    if (actualizarReg())
                    {
                        mostrarMsgInf("La operación GUARDAR se realizó con éxito.");
                        intOpcSelDlg=1;
                        dispose();
                    }
                    break;
            }
            objThrGUI=null;
        }
        
        /**
         * Esta función establece el indice de la función a ejecutar. En la clase Thread
         * se pueden ejecutar diferentes funciones. Esta función sirve para determinar
         * la función que debe ejecutar el Thread.
         * @param indice El indice de la función a ejecutar.
         */
        public void setIndFunEje(int indice)
        {
            intIndFun=indice;
        }
    }

    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_LIN:
                    strMsg="";
                    break;
                case INT_TBL_DAT_COD_EMP:
                    strMsg="Código de la empresa";
                    break;
                case INT_TBL_DAT_COD_LOC:
                    strMsg="Código del local";
                    break;
                case INT_TBL_DAT_FEC_ING:
                    strMsg="Fecha de ingreso";
                    break;
                case INT_TBL_DAT_OBS:
                    strMsg="Observación";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
}
