/*
 * ZafCom08.java
 *
 * Created on 16 de enero de 2005, 17:10 PM
 */
package CxC.ZafCxC57;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafSelFec.ZafSelFec;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import java.util.ArrayList;
import java.sql.*;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafVenCon.ZafVenCon;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
/**
 *
 * @author  Eddye Lino
 */
public class ZafCxC57 extends javax.swing.JInternalFrame
{
    //Constantes: Columnas del JTable:
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_EMP=1;
    final int INT_TBL_DAT_COD_LOC=2;
    final int INT_TBL_DAT_COD_TIP_DOC=3;
    final int INT_TBL_DAT_DES_COR=4;
    final int INT_TBL_DAT_DES_LAR=5;
    final int INT_TBL_DAT_COD_DOC=6;
    final int INT_TBL_DAT_NUM_DOC=7;
    final int INT_TBL_DAT_FEC_DOC=8;
    final int INT_TBL_DAT_COD_CLI=9;
    final int INT_TBL_DAT_NOM_CLI=10;
    final int INT_TBL_DAT_VAL_DOC=11;
    final int INT_TBL_DAT_VAL_ABO=12;
    final int INT_TBL_DAT_VAL_PEN=13;
    final int INT_TBL_DAT_CHK_REE=14;


    //Constantes: Columnas del JTable de Locales
    final int INT_TBL_LOC_LIN=0;
    final int INT_TBL_LOC_CHK=1;
    final int INT_TBL_LOC_COD_EMP=2;
    final int INT_TBL_LOC_NOM_EMP=3;
    final int INT_TBL_LOC_COD_LOC=4;
    final int INT_TBL_LOC_NOM_LOC=5;

    //Constantes: Columnas del JTable de Registros Reestructurados
    final int INT_TBL_REE_LIN=0;
    final int INT_TBL_REE_COD_EMP=1;
    final int INT_TBL_REE_COD_LOC=2;
    final int INT_TBL_REE_COD_TIP_DOC=3;
    final int INT_TBL_REE_COD_DOC=4;
    final int INT_TBL_REE_COD_REG=5;
    final int INT_TBL_REE_DIA_CRE=6;
    final int INT_TBL_REE_FEC_VEN=7;
    final int INT_TBL_REE_POR_RET=8;
    final int INT_TBL_REE_VAL_DOC=9;
    final int INT_TBL_REE_VAL_ABO=10;
    final int INT_TBL_REE_FEC_REE=11;
    final int INT_TBL_REE_COD_USR_REE=12;
    final int INT_TBL_REE_ALI_USR_REE=13;
    final int INT_TBL_REE_NOM_USR_REE=14;
    final int INT_TBL_REE_PCS_REE=15;
    final int INT_TBL_REE_EST_REG=16;

 


    private ZafTblOrd objTblOrd;                        //JTable de ordenamiento.
    
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafColNumerada objColNum, objColNumLoc, objColNumRee;
    private ZafTblMod objTblMod, objTblModLoc, objTblModRee;
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMen� en JTable.
    private ZafThreadGUI objThrGUI;
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    
    
    private Vector vecDat, vecCab, vecReg;
    private Vector vecLocDat, vecLocCab, vecLocReg, vecLocAux;
    private Vector vecReeDat, vecReeCab, vecReeReg;
    private boolean blnCon;                     //true: Continua la ejecuci�n del hilo.
    private String strMsg="";
    private javax.swing.JOptionPane oppMsg;
    private String strCodVen, strNomVen;             //Contenido del campo al obtener el foco.
    private ZafTblCelRenLbl objTblCelRenLbl;

    private ZafTblBus objTblBus;
   
    private ZafSelFec objSelFec;

    private String strDesCorCta, strDesLarCta;
    private String strDesCorTipDoc, strDesLarTipDoc;
    private ZafVenCon vcoTipDoc, vcoCta;
    private ZafTblCelEdiChk objTblCelEdiChk, objTblCelEdiChkLoc;
    private ZafTblCelRenChk objTblCelRenChk, objTblCelRenChkLoc;

    private boolean blnMarTodChkTblEmp;

    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafCxC57(ZafParSis obj)
    {
        initComponents();
        //Inicializar objetos.
        objParSis=obj;
        objUti=new ZafUtil();
        
        if (!configurarFrm())
            exitForm();
        blnMarTodChkTblEmp=true;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        panCorRpt = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLoc = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        chkMosDocAbi = new javax.swing.JCheckBox();
        chkMosDocCer = new javax.swing.JCheckBox();
        panRpt = new javax.swing.JPanel();
        sppRpt = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panFilGrlCli = new javax.swing.JPanel();
        spnCabDat = new javax.swing.JScrollPane();
        tblRee = new javax.swing.JTable();
        chkMosReeDocSel = new javax.swing.JCheckBox();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panFil.setLayout(new java.awt.BorderLayout());

        panCorRpt.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panCorRpt.setPreferredSize(new java.awt.Dimension(560, 90));
        panCorRpt.setLayout(new java.awt.BorderLayout());
        panFil.add(panCorRpt, java.awt.BorderLayout.NORTH);
        panCorRpt.getAccessibleContext().setAccessibleName("Codigo");

        jPanel2.setPreferredSize(new java.awt.Dimension(100, 46));
        jPanel2.setLayout(new java.awt.BorderLayout());

        tblLoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblLoc);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panFil.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(0, 60));
        jPanel1.setLayout(null);

        chkMosDocAbi.setSelected(true);
        chkMosDocAbi.setText("Mostrar los documentos abiertos");
        chkMosDocAbi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMosDocAbiActionPerformed(evt);
            }
        });
        jPanel1.add(chkMosDocAbi);
        chkMosDocAbi.setBounds(0, 10, 230, 14);

        chkMosDocCer.setText("Mostrar los documentos cerrados");
        chkMosDocCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMosDocCerActionPerformed(evt);
            }
        });
        jPanel1.add(chkMosDocCer);
        chkMosDocCer.setBounds(0, 30, 230, 14);

        panFil.add(jPanel1, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("Filtro", panFil);

        panRpt.setLayout(new java.awt.BorderLayout());

        sppRpt.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        sppRpt.setResizeWeight(0.5);
        sppRpt.setOneTouchExpandable(true);

        jPanel3.setLayout(new java.awt.BorderLayout());

        spnDat.setPreferredSize(new java.awt.Dimension(453, 418));

        tblDat.setToolTipText("Doble click o ENTER para abrir la opción seleccionada.");
        tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblDat.setMaximumSize(new java.awt.Dimension(2147483647, 192));
        spnDat.setViewportView(tblDat);

        jPanel3.add(spnDat, java.awt.BorderLayout.CENTER);

        sppRpt.setTopComponent(jPanel3);

        panFilGrlCli.setPreferredSize(new java.awt.Dimension(452, 402));
        panFilGrlCli.setLayout(new java.awt.BorderLayout());

        tblRee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnCabDat.setViewportView(tblRee);

        panFilGrlCli.add(spnCabDat, java.awt.BorderLayout.CENTER);

        chkMosReeDocSel.setText("Mostrar la reestructuración del documento seleccionado");
        chkMosReeDocSel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMosReeDocSelActionPerformed(evt);
            }
        });
        panFilGrlCli.add(chkMosReeDocSel, java.awt.BorderLayout.PAGE_START);

        sppRpt.setBottomComponent(panFilGrlCli);

        panRpt.add(sppRpt, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Reporte", panRpt);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    
                        
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acci�n de acuerdo a la etiqueta del bot�n ("Consultar" o "Detener").
        objTblMod.removeAllRows();
        objTblModRee.removeAllRows();
        if(isCamVal()){
            if (butCon.getText().equals("Consultar")){
                blnCon=true;
                if (objThrGUI==null){
                    objThrGUI=new ZafThreadGUI();
                    objThrGUI.start();
                }
            }
            else{
                blnCon=false;
            }
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicaci�n. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void chkMosReeDocSelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMosReeDocSelActionPerformed
        // TODO add your handling code here:
        if (chkMosReeDocSel.isSelected()){
            cargarRegistrosReestructurados();
        }
        else
            objTblModRee.removeAllRows();
    }//GEN-LAST:event_chkMosReeDocSelActionPerformed

    private void chkMosDocAbiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMosDocAbiActionPerformed
        // TODO add your handling code here:
        if( ! chkMosDocAbi.isSelected())
            chkMosDocCer.setSelected(true);
    }//GEN-LAST:event_chkMosDocAbiActionPerformed

    private void chkMosDocCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMosDocCerActionPerformed
        // TODO add your handling code here:
        if( ! chkMosDocCer.isSelected())
            chkMosDocAbi.setSelected(true);
    }//GEN-LAST:event_chkMosDocCerActionPerformed

    /**
     * Esta funci�n configura la "Ventana de consulta" que ser� utilizada para
     * mostrar los "Tipos de documentos".
     */
    private boolean configurarVenConTipDoc()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_tipdoc");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            arlCam.add("a1.ne_ultDoc");
            arlCam.add("a1.tx_natDoc");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Alias.Doc.");
            arlAli.add("Tipo de documento");
            arlAli.add("Ult.Doc.");
            arlAli.add("Nat.Doc.");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            arlAncCol.add("80");
            arlAncCol.add("80");

            strSQL="";
            strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar, a1.ne_ultDoc, a1.tx_natDoc";
            strSQL+=" FROM tbm_cabTipDoc AS a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();



            vcoTipDoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de tipos de documentos", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoTipDoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoTipDoc.setConfiguracionColumna(4, javax.swing.JLabel.RIGHT);


        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    /** Cerrar la aplicaci�n. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JCheckBox chkMosDocAbi;
    private javax.swing.JCheckBox chkMosDocCer;
    private javax.swing.JCheckBox chkMosReeDocSel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panCorRpt;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFilGrlCli;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panRpt;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnCabDat;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JSplitPane sppRpt;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblLoc;
    private javax.swing.JTable tblRee;
    // End of variables declaration//GEN-END:variables

    
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            strAux=objParSis.getNombreMenu() + "v0.1";
            this.setTitle(strAux);
            lblTit.setText(strAux);
            
            //Configurar ZafSelFec:
            objSelFec=new ZafSelFec();
            objSelFec.setCheckBoxVisible(true);
            objSelFec.setCheckBoxChecked(true);
            panCorRpt.add(objSelFec);
            objSelFec.setBounds(4, 4, 472, 72);

            //objSelFec.setFechaDesde(getMesAnterior(objSelFec.getFechaHasta()));
            
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(15);    //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_EMP,"Cod.Emp.");
            vecCab.add(INT_TBL_DAT_COD_LOC,"Cod.Loc.");
            vecCab.add(INT_TBL_DAT_COD_TIP_DOC,"Cod.Tip.Doc.");
            vecCab.add(INT_TBL_DAT_DES_COR,"Tip.Doc");
            vecCab.add(INT_TBL_DAT_DES_LAR,"Tipo de Documento");
            vecCab.add(INT_TBL_DAT_COD_DOC,"Cod.Doc.");
            vecCab.add(INT_TBL_DAT_NUM_DOC,"Num.Doc.");
            vecCab.add(INT_TBL_DAT_FEC_DOC,"Fec.Doc.");
            vecCab.add(INT_TBL_DAT_COD_CLI,"Cod.Cli.");
            vecCab.add(INT_TBL_DAT_NOM_CLI,"Nom.Cli.");
            vecCab.add(INT_TBL_DAT_VAL_DOC,"Val.Doc.");
            vecCab.add(INT_TBL_DAT_VAL_ABO,"Val.Abo.");
            vecCab.add(INT_TBL_DAT_VAL_PEN,"Val.Pen.");
            vecCab.add(INT_TBL_DAT_CHK_REE,"Reestructurado");
            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);            

            //Configurar JTable: Establecer tipo de selecci�n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el men� de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Tama�o de las celdas
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(20);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(20);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DES_COR).setPreferredWidth(60);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DES_LAR).setPreferredWidth(40);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(60);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(70);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(200);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_DOC).setPreferredWidth(90);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_ABO).setPreferredWidth(90);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_PEN).setPreferredWidth(90);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_REE).setPreferredWidth(90);


            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);                       
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_DOC).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_ABO).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_PEN).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;

            tblDat.getTableHeader().setReorderingAllowed(false);

            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_ABO).setResizable(false);

            objTblBus=new ZafTblBus(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);
            


            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk=new ZafTblCelRenChk();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_REE).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk=null;

            //Configurar JTable: Editor de celdas.
            objTblCelEdiChk=new ZafTblCelEdiChk(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_REE).setCellEditor(objTblCelEdiChk);

            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
            });

            //Configurar JTable: Ocultar columnas del sistema.
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_TIP_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_VAL_ABO, tblDat);

            configurarFrmLocales();
            configurarFrmReestructuracion();

            tblDat.getTableHeader().addMouseMotionListener(new ZafMouMotAdaDat());
            //Configurar JTable: Establecer el ListSelectionListener.
            javax.swing.ListSelectionModel lsm=tblDat.getSelectionModel();
            lsm.addListSelectionListener(new ZafLisSelLis());



        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    private boolean configurarFrmLocales()
    {
        boolean blnRes=true;
        try
        {
            //Configurar JTable: Establecer el modelo.
            vecLocDat=new Vector();    //Almacena los datos
            vecLocCab=new Vector(6);    //Almacena las cabeceras
            vecLocCab.clear();
            vecLocCab.add(INT_TBL_LOC_LIN,"");
            vecLocCab.add(INT_TBL_LOC_CHK,"");
            vecLocCab.add(INT_TBL_LOC_COD_EMP,"Cod.Emp.");
            vecLocCab.add(INT_TBL_LOC_NOM_EMP,"Nom.Emp.");
            vecLocCab.add(INT_TBL_LOC_COD_LOC,"Cod.Loc.");
            vecLocCab.add(INT_TBL_LOC_NOM_LOC,"Nom.Loc.");


            objTblModLoc=new ZafTblMod();
            objTblModLoc.setHeader(vecLocCab);
            tblLoc.setModel(objTblModLoc);

            //Configurar JTable: Establecer tipo de selecci�n.
            tblLoc.setRowSelectionAllowed(true);
            tblLoc.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            objColNumLoc=new ZafColNumerada(tblLoc,INT_TBL_LOC_LIN);
            tblLoc.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Tama�o de las celdas
            tblLoc.getColumnModel().getColumn(INT_TBL_LOC_LIN).setPreferredWidth(20);
            tblLoc.getColumnModel().getColumn(INT_TBL_LOC_CHK).setPreferredWidth(50);
            tblLoc.getColumnModel().getColumn(INT_TBL_LOC_COD_EMP).setPreferredWidth(50);
            tblLoc.getColumnModel().getColumn(INT_TBL_LOC_NOM_EMP).setPreferredWidth(80);
            tblLoc.getColumnModel().getColumn(INT_TBL_LOC_COD_LOC).setPreferredWidth(50);
            tblLoc.getColumnModel().getColumn(INT_TBL_LOC_NOM_LOC).setPreferredWidth(200);
            tblLoc.getTableHeader().setReorderingAllowed(false);

            //Configurar JTable: Renderizar celdas.
            objTblCelRenChkLoc=new ZafTblCelRenChk();
            tblLoc.getColumnModel().getColumn(INT_TBL_LOC_CHK).setCellRenderer(objTblCelRenChkLoc);
            objTblCelRenChkLoc=null;

            //Configurar JTable: Editor de celdas.
            objTblCelEdiChkLoc=new ZafTblCelEdiChk(tblLoc);
            tblLoc.getColumnModel().getColumn(INT_TBL_LOC_CHK).setCellEditor(objTblCelEdiChkLoc);
            objTblCelEdiChkLoc.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
            
                }
            });


            vecLocAux=new Vector();
            vecLocAux.add("" + INT_TBL_LOC_CHK);
            objTblModLoc.setColumnasEditables(vecLocAux);
            vecLocAux=null;

            objTblModLoc.setModoOperacion(objTblModLoc.INT_TBL_EDI);

            cargarLocalesUsuario();


            //Configurar JTable: Establecer los listener para el TableHeader.
            tblLoc.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tblEmpMouseClicked(evt);
                }
            });


        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    private boolean configurarFrmReestructuracion()
    {
        boolean blnRes=true;
        try
        {
            //Configurar JTable: Establecer el modelo.
            vecReeDat=new Vector();    //Almacena los datos
            vecReeCab=new Vector(17);    //Almacena las cabeceras
            vecReeCab.clear();
            vecReeCab.add(INT_TBL_REE_LIN,"");
            vecReeCab.add(INT_TBL_REE_COD_EMP,"Cod.Emp.");
            vecReeCab.add(INT_TBL_REE_COD_LOC,"Cod.Loc.");
            vecReeCab.add(INT_TBL_REE_COD_TIP_DOC,"Cod.Tip.Doc.");
            vecReeCab.add(INT_TBL_REE_COD_DOC,"Cod.Doc.");
            vecReeCab.add(INT_TBL_REE_COD_REG,"Cod.Reg.");
            vecReeCab.add(INT_TBL_REE_DIA_CRE,"Dia.Cre.");
            vecReeCab.add(INT_TBL_REE_FEC_VEN,"Fec.Ven.");
            vecReeCab.add(INT_TBL_REE_POR_RET,"Por.Ret.");
            vecReeCab.add(INT_TBL_REE_VAL_DOC,"Val.Doc.");
            vecReeCab.add(INT_TBL_REE_VAL_ABO,"Val.Abo.");
            vecReeCab.add(INT_TBL_REE_FEC_REE,"Fec.Ree.");
            vecReeCab.add(INT_TBL_REE_COD_USR_REE,"Cod.Usr.Ree.");
            vecReeCab.add(INT_TBL_REE_ALI_USR_REE,"Usr.Ree.");
            vecReeCab.add(INT_TBL_REE_NOM_USR_REE,"Nom.Usr.Ree.");
            vecReeCab.add(INT_TBL_REE_PCS_REE,"Computadora");
            vecReeCab.add(INT_TBL_REE_EST_REG,"Est.Reg.");

            objTblModRee=new ZafTblMod();
            objTblModRee.setHeader(vecReeCab);
            tblRee.setModel(objTblModRee);

            //Configurar JTable: Establecer tipo de selecci�n.
            tblRee.setRowSelectionAllowed(true);
            tblRee.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            objColNumRee=new ZafColNumerada(tblRee,INT_TBL_REE_LIN);
            tblRee.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Tama�o de las celdas
            tblRee.getColumnModel().getColumn(INT_TBL_REE_LIN).setPreferredWidth(20);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_COD_EMP).setPreferredWidth(30);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_COD_LOC).setPreferredWidth(30);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_COD_TIP_DOC).setPreferredWidth(30);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_COD_DOC).setPreferredWidth(40);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_COD_REG).setPreferredWidth(30);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_DIA_CRE).setPreferredWidth(50);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_FEC_VEN).setPreferredWidth(90);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_POR_RET).setPreferredWidth(40);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_VAL_DOC).setPreferredWidth(90);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_VAL_ABO).setPreferredWidth(90);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_FEC_REE).setPreferredWidth(120);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_COD_USR_REE).setPreferredWidth(30);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_ALI_USR_REE).setPreferredWidth(50);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_NOM_USR_REE).setPreferredWidth(120);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_PCS_REE).setPreferredWidth(90);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_EST_REG).setPreferredWidth(50);
            
            tblRee.getTableHeader().setReorderingAllowed(false);


            //Configurar JTable: Ocultar columnas del sistema.
            objTblModRee.addSystemHiddenColumn(INT_TBL_REE_COD_EMP, tblRee);
            objTblModRee.addSystemHiddenColumn(INT_TBL_REE_COD_LOC, tblRee);
            objTblModRee.addSystemHiddenColumn(INT_TBL_REE_COD_TIP_DOC, tblRee);
            objTblModRee.addSystemHiddenColumn(INT_TBL_REE_COD_DOC, tblRee);
            objTblModRee.addSystemHiddenColumn(INT_TBL_REE_COD_REG, tblRee);
            objTblModRee.addSystemHiddenColumn(INT_TBL_REE_VAL_ABO, tblRee);
            objTblModRee.addSystemHiddenColumn(INT_TBL_REE_COD_USR_REE, tblRee);
            objTblModRee.addSystemHiddenColumn(INT_TBL_REE_ALI_USR_REE, tblRee);

            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_DIA_CRE).setCellRenderer(objTblCelRenLbl);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_POR_RET).setCellRenderer(objTblCelRenLbl);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_VAL_DOC).setCellRenderer(objTblCelRenLbl);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_VAL_ABO).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;

            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tblRee.getColumnModel().getColumn(INT_TBL_REE_COD_EMP).setResizable(false);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_COD_LOC).setResizable(false);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_COD_TIP_DOC).setResizable(false);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_COD_DOC).setResizable(false);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_COD_REG).setResizable(false);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_VAL_ABO).setResizable(false);

            tblRee.getColumnModel().getColumn(INT_TBL_REE_COD_USR_REE).setResizable(false);
            tblRee.getColumnModel().getColumn(INT_TBL_REE_ALI_USR_REE).setResizable(false);

            tblRee.getTableHeader().addMouseMotionListener(new ZafMouMotAdaRee());

        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }



    /**
     * Esta clase crea un hilo que permite manipular la interface gr�fica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que est� ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podr�a presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estar�a informado en todo
     * momento de lo que ocurre. Si se desea hacer �sto es necesario utilizar �sta clase
     * ya que si no s�lo se apreciar�a los cambios cuando ha terminado todo el proceso.
     */
    
 

    
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                System.out.println("fefe");
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable s�lo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }


    
    
    private boolean cargarDetReg(){
        String strNiv;
        int intNumTotReg, i;
        boolean blnRes=true;
        double dblNumVta=0.00;
        double dblValNet=0.00;
        int intPriRegSel=0;
        try{
            objTblMod.removeAllRows();
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            strAux="";
            if (con!=null){
                if(objSelFec.isCheckBoxChecked()){
                    switch (objSelFec.getTipoSeleccion()){
                        case 0: //B�squeda por rangos
                            strAux=" AND a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                            break;
                        case 1: //Fechas menores o iguales que "Hasta".
                            strAux=" AND a1.fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                            break;
                        case 2: //Fechas mayores o iguales que "Desde".
                            strAux=" AND a1.fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                            break;
                        case 3: //Todo.
                            break;
                    }
                }                
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT COUNT(*) FROM(";
                strSQL+=" SELECT y.numRee, CASE WHEN y.numRee>=1 THEN 'S' ELSE 'N' END AS st_ree";
                strSQL+=" , x.co_emp, x.co_loc, x.co_tipDoc, x.tx_descor";
                strSQL+=" , x.tx_desLar, x.co_doc, x.ne_numDoc, x.fe_doc, x.co_cli, x.tx_nomCli";
                strSQL+=" , x.mo_pag, x.nd_abo, x.nd_valPen FROM(";
                strSQL+=" SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, ";
                strSQL+=" CASE WHEN a1.co_tipdoc IN(7,8) THEN a1.tx_obs1";
                strSQL+=" 	ELSE b1.tx_descor  END AS tx_descor";
                strSQL+=" , b1.tx_desLar, a1.co_doc, a1.ne_numDoc, a1.fe_doc, a1.co_cli, a1.tx_nomCli";
                strSQL+=" , SUM(a2.mo_pag) AS mo_pag, SUM(a2.nd_abo) AS nd_abo, ";
                strSQL+="  	CASE	WHEN b1.tx_natDoc='E' THEN SUM((abs(a2.mo_pag) - abs(a2.nd_abo))) *(-1)";
                strSQL+=" 	WHEN (b1.tx_natDoc='A'  AND a1.tx_obs1 IN('FACC','NCCO') ) THEN SUM((abs(a2.mo_pag) - abs(a2.nd_abo)))*(-1)";
                strSQL+=" 	END AS nd_valPen";
                strSQL+=" FROM (tbm_cabMovInv AS a1 INNER JOIN tbm_cabTipDoc AS b1 ON a1.co_emp=b1.co_emp AND a1.co_loc=b1.co_loc AND a1.co_tipDoc=b1.co_tipDoc)";
                strSQL+=" INNER JOIN tbm_pagMovInv AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                if(objParSis.getCodigoUsuario()==1){
                    strSQL+=" INNER JOIN tbr_tipDocPrg AS a3";
                    strSQL+=" ON a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc AND a3.co_mnu=" + objParSis.getCodigoMenu() + "";
                }
                else{
                    strSQL+=" INNER JOIN tbr_tipDocUsr AS a3";
                    strSQL+=" ON a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc AND a3.co_mnu=" + objParSis.getCodigoMenu() + " AND a3.co_usr=" + objParSis.getCodigoUsuario() + "";
                }


                for(int p=0; p<objTblModLoc.getRowCountTrue(); p++){
                    if(objTblModLoc.isChecked(p, INT_TBL_LOC_CHK)){
                        if(intPriRegSel==0){
                            strSQL+=" WHERE (a1.co_emp=" + objTblModLoc.getValueAt(p, INT_TBL_LOC_COD_EMP) + "";
                            strSQL+=" AND a1.co_loc=" + objTblModLoc.getValueAt(p, INT_TBL_LOC_COD_LOC) + "";
                            strSQL+=" AND a1.st_reg NOT IN('I','E')";
                            strSQL+=" AND a2.st_reg in ('A','C')";
                            strSQL+=" AND (a2.nd_porret=0 or a2.nd_porret IS NULL)";
                            strSQL+=" AND (a2.ne_diacre=0 or a2.ne_diacre IS NULL)";
                            strSQL+=" AND b1.tx_natDoc IN('E','A')";
                            strSQL+=" AND a3.co_mnu=" + objParSis.getCodigoMenu() + "";
                            if(objParSis.getCodigoUsuario()!=1)
                                strSQL+=" AND a3.co_usr=" + objParSis.getCodigoUsuario() + "";

                            strSQL+=strAux;

                            strSQL+=")";
                            intPriRegSel++;
                        }
                        else{
                            strSQL+=" OR (a1.co_emp=" + objTblModLoc.getValueAt(p, INT_TBL_LOC_COD_EMP) + "";
                            strSQL+=" AND a1.co_loc= " + objTblModLoc.getValueAt(p, INT_TBL_LOC_COD_LOC) + "";
                            strSQL+=" AND a1.st_reg NOT IN('I','E')";
                            strSQL+=" AND a2.st_reg in ('A','C')";
                            strSQL+=" AND (a2.nd_porret=0 or a2.nd_porret IS NULL)";
                            strSQL+=" AND (a2.ne_diacre=0 or a2.ne_diacre IS NULL)";
                            strSQL+=" AND b1.tx_natDoc IN('E','A')";
                            strSQL+=" AND a3.co_mnu=" + objParSis.getCodigoMenu() + "";
                            if(objParSis.getCodigoUsuario()!=1)
                                strSQL+=" AND a3.co_usr=" + objParSis.getCodigoUsuario() + "";

                            strSQL+=strAux;

                            strSQL+=")";
                        }
                    }
                }
                intPriRegSel=0;



                strSQL+=" GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, b1.tx_desCor, b1.tx_desLar,";
                strSQL+=" a1.co_doc, a1.ne_numDoc, a1.fe_doc, a1.co_cli, a1.tx_nomCli, a1.tx_obs1, b1.tx_natDoc";
                if( (chkMosDocAbi.isSelected())  && ( ! chkMosDocCer.isSelected()) )
                    strSQL+=" HAVING 	CASE WHEN b1.tx_natDoc IN('E','A') THEN SUM((a2.mo_pag + a2.nd_abo)) < 0 END";
                else if(  (chkMosDocCer.isSelected()) && ( ! chkMosDocAbi.isSelected())  )
                    strSQL+=" HAVING 	CASE WHEN b1.tx_natDoc IN('E','A') THEN SUM((a2.mo_pag + a2.nd_abo)) = 0 END";
                else
                    strSQL+=" HAVING 	CASE WHEN b1.tx_natDoc IN('E','A') THEN SUM((a2.mo_pag + a2.nd_abo)) <= 0 END";
                strSQL+=" ORDER BY a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc";
                strSQL+=" ) AS x";
                strSQL+=" LEFT OUTER JOIN(";
                strSQL+=" 		SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, COUNT(*) AS numRee";
                strSQL+=" 		FROM tbm_pagMovInv AS a1 WHERE a1.st_reg IN('C')";
                strSQL+=" 		GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc";
                strSQL+=" 		) AS y";
                strSQL+=" ON x.co_emp=y.co_emp AND x.co_loc=y.co_loc AND x.co_tipDoc=y.co_tipDoc AND x.co_doc=y.co_doc";
                strSQL+=" ORDER BY x.co_emp, x.co_loc, x.co_tipdoc, x.co_doc	";
                strSQL+=") AS x";
                intNumTotReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intNumTotReg==-1)
                    return false;
                
                strSQL="";
                strSQL+=" SELECT y.numRee, CASE WHEN y.numRee>=1 THEN 'S' ELSE 'N' END AS st_ree";
                strSQL+=" , x.co_emp, x.co_loc, x.co_tipDoc, x.tx_descor";
                strSQL+=" , x.tx_desLar, x.co_doc, x.ne_numDoc, x.fe_doc, x.co_cli, x.tx_nomCli";
                strSQL+=" , x.mo_pag, x.nd_abo, x.nd_valPen FROM(";
                strSQL+=" SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, ";
                strSQL+=" CASE WHEN a1.co_tipdoc IN(7,8) THEN a1.tx_obs1";
                strSQL+=" 	ELSE b1.tx_descor  END AS tx_descor";
                strSQL+=" , b1.tx_desLar, a1.co_doc, a1.ne_numDoc, a1.fe_doc, a1.co_cli, a1.tx_nomCli";
                strSQL+=" , SUM(a2.mo_pag) AS mo_pag, SUM(a2.nd_abo) AS nd_abo, ";
                strSQL+="  	CASE	WHEN b1.tx_natDoc='E' THEN SUM((abs(a2.mo_pag) - abs(a2.nd_abo))) *(-1)";
                strSQL+=" 	WHEN (b1.tx_natDoc='A'  AND a1.tx_obs1 IN('FACC','NCCO') ) THEN SUM((abs(a2.mo_pag) - abs(a2.nd_abo)))*(-1)";
                strSQL+=" 	END AS nd_valPen";
                strSQL+=" FROM (tbm_cabMovInv AS a1 INNER JOIN tbm_cabTipDoc AS b1 ON a1.co_emp=b1.co_emp AND a1.co_loc=b1.co_loc AND a1.co_tipDoc=b1.co_tipDoc)";
                strSQL+=" INNER JOIN tbm_pagMovInv AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                if(objParSis.getCodigoUsuario()==1){
                    strSQL+=" INNER JOIN tbr_tipDocPrg AS a3";
                    strSQL+=" ON a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc AND a3.co_mnu=" + objParSis.getCodigoMenu() + "";
                }
                else{
                    strSQL+=" INNER JOIN tbr_tipDocUsr AS a3";
                    strSQL+=" ON a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc AND a3.co_mnu=" + objParSis.getCodigoMenu() + " AND a3.co_usr=" + objParSis.getCodigoUsuario() + "";
                }


                for(int p=0; p<objTblModLoc.getRowCountTrue(); p++){
                    if(objTblModLoc.isChecked(p, INT_TBL_LOC_CHK)){
                        if(intPriRegSel==0){
                            strSQL+=" WHERE (a1.co_emp=" + objTblModLoc.getValueAt(p, INT_TBL_LOC_COD_EMP) + "";
                            strSQL+=" AND a1.co_loc=" + objTblModLoc.getValueAt(p, INT_TBL_LOC_COD_LOC) + "";
                            strSQL+=" AND a1.st_reg NOT IN('I','E')";
                            strSQL+=" AND a2.st_reg in ('A','C')";
                            strSQL+=" AND (a2.nd_porret=0 or a2.nd_porret IS NULL)";
                            strSQL+=" AND (a2.ne_diacre=0 or a2.ne_diacre IS NULL)";
                            strSQL+=" AND b1.tx_natDoc IN('E','A')";
                            strSQL+=" AND a3.co_mnu=" + objParSis.getCodigoMenu() + "";
                            if(objParSis.getCodigoUsuario()!=1)
                                strSQL+=" AND a3.co_usr=" + objParSis.getCodigoUsuario() + "";

                            strSQL+=strAux;

                            strSQL+=")";
                            intPriRegSel++;
                        }
                        else{
                            strSQL+=" OR (a1.co_emp=" + objTblModLoc.getValueAt(p, INT_TBL_LOC_COD_EMP) + "";
                            strSQL+=" AND a1.co_loc= " + objTblModLoc.getValueAt(p, INT_TBL_LOC_COD_LOC) + "";
                            strSQL+=" AND a1.st_reg NOT IN('I','E')";
                            strSQL+=" AND a2.st_reg in ('A','C')";
                            strSQL+=" AND (a2.nd_porret=0 or a2.nd_porret IS NULL)";
                            strSQL+=" AND (a2.ne_diacre=0 or a2.ne_diacre IS NULL)";
                            strSQL+=" AND b1.tx_natDoc IN('E','A')";
                            strSQL+=" AND a3.co_mnu=" + objParSis.getCodigoMenu() + "";
                            if(objParSis.getCodigoUsuario()!=1)
                                strSQL+=" AND a3.co_usr=" + objParSis.getCodigoUsuario() + "";

                            strSQL+=strAux;

                            strSQL+=")";
                        }
                    }
                }
                intPriRegSel=0;



                strSQL+=" GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, b1.tx_desCor, b1.tx_desLar,";
                strSQL+=" a1.co_doc, a1.ne_numDoc, a1.fe_doc, a1.co_cli, a1.tx_nomCli, a1.tx_obs1, b1.tx_natDoc";
                if( (chkMosDocAbi.isSelected())  && ( ! chkMosDocCer.isSelected()) )
                    strSQL+=" HAVING 	CASE WHEN b1.tx_natDoc IN('E','A') THEN SUM((a2.mo_pag + a2.nd_abo)) < 0 END";
                else if(  (chkMosDocCer.isSelected()) && ( ! chkMosDocAbi.isSelected())  )
                    strSQL+=" HAVING 	CASE WHEN b1.tx_natDoc IN('E','A') THEN SUM((a2.mo_pag + a2.nd_abo)) = 0 END";
                else
                    strSQL+=" HAVING 	CASE WHEN b1.tx_natDoc IN('E','A') THEN SUM((a2.mo_pag + a2.nd_abo)) <= 0 END";
                strSQL+=" ORDER BY a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc";
                strSQL+=" ) AS x";
                strSQL+=" LEFT OUTER JOIN(";
                strSQL+=" 		SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, COUNT(*) AS numRee";
                strSQL+=" 		FROM tbm_pagMovInv AS a1 WHERE a1.st_reg IN('C')";
                strSQL+=" 		GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc";
                strSQL+=" 		) AS y";
                strSQL+=" ON x.co_emp=y.co_emp AND x.co_loc=y.co_loc AND x.co_tipDoc=y.co_tipDoc AND x.co_doc=y.co_doc";
                strSQL+=" ORDER BY x.co_emp, x.co_loc, x.co_tipdoc, x.co_doc	";
                System.out.println("cargarDetReg: "+strSQL);
                rst=stm.executeQuery(strSQL);

                vecDat.clear();
                
                pgrSis.setMinimum(0);
                pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;
                lblMsgSis.setText("Cargando datos...");
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_COD_EMP,     "" + rst.getString("co_emp"));
                        vecReg.add(INT_TBL_DAT_COD_LOC,     "" + rst.getString("co_loc"));
                        vecReg.add(INT_TBL_DAT_COD_TIP_DOC, "" + rst.getString("co_tipDoc"));
                        vecReg.add(INT_TBL_DAT_DES_COR,     "" + rst.getString("tx_desCor"));
                        vecReg.add(INT_TBL_DAT_DES_LAR,     "" + rst.getString("tx_desLar"));
                        vecReg.add(INT_TBL_DAT_COD_DOC,     "" + rst.getString("co_doc"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC,     "" + rst.getString("ne_numDoc"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC,     "" + rst.getString("fe_doc"));
                        vecReg.add(INT_TBL_DAT_COD_CLI,         "" + rst.getString("co_cli"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI,     "" + rst.getString("tx_nomCli"));
                        vecReg.add(INT_TBL_DAT_VAL_DOC,     "" + rst.getBigDecimal("mo_pag"));
                        vecReg.add(INT_TBL_DAT_VAL_ABO,     "" + rst.getBigDecimal("nd_abo"));
                        vecReg.add(INT_TBL_DAT_VAL_PEN,     "" + rst.getBigDecimal("nd_valPen"));
                        vecReg.add(INT_TBL_DAT_CHK_REE,     null);

                        strAux=rst.getObject("st_ree")==null?"":rst.getString("st_ree");
                        if(strAux.equals("S")){
                            vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK_REE);
                        }

                        vecDat.add(vecReg);                                                                                                
                        i++;
                        pgrSis.setValue(i);                        
                    }
                    else
                        break;

                }
                rst.close();
                stm.close();
                rst=null;
                stm=null;

                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);                
                pgrSis.setValue(0);
                vecDat.clear();
                if (blnCon)
                    lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");
                else
                    lblMsgSis.setText("Interrupción del usuario. Sólo se procesaron " + tblDat.getRowCount() + " registros.");

                butCon.setText("Consultar");
                pgrSis.setIndeterminate(false);

            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    


            
    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                if(cargarDetReg())
                con.close();
                con=null;
            }            
        }
        catch (java.sql.SQLException e){
            blnRes=false;
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
    


    /**
     * Esta funci�n determina si los campos son v�lidos.
     * @return true: Si los campos son v�lidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal(){
        int intNumEmpLocSel=0;
        //Validar la "Cuenta".
        if( (! chkMosDocAbi.isSelected()) &&( ! chkMosDocCer.isSelected()) ){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>Se debe tener al menos un filtro de documentos a mostrar seleccionado.<BR>Seleccione alguno y vuelva a intentarlo.</HTML>");
            return false;
        }

        for(int i=0; i<objTblModLoc.getRowCountTrue(); i++){
            if(objTblModLoc.isChecked(i, INT_TBL_LOC_CHK)){
                intNumEmpLocSel++;
                break;
            }
        }
        if(intNumEmpLocSel<=0){
            mostrarMsgInf("<HTML>Se debe seleccionar al menos un Local<BR>Seleccione alguno y vuelva a intentarlo.</HTML>");
            return false;
        }
        return true;
    }


    private boolean cargarLocalesUsuario(){
        boolean blnRes=true;
        try{
            objTblModLoc.removeAllRows();
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()){
                    if(objParSis.getCodigoUsuario()==1){
                        strSQL="";
                        strSQL+="SELECT a1.co_emp, a1.tx_nom AS tx_nomEmp, a2.co_loc, a2.tx_nom AS tx_nomLoc";
                        strSQL+=" FROM tbm_emp AS a1 INNER JOIN tbm_loc AS a2";
                        strSQL+=" ON a1.co_emp=a2.co_emp";
                        strSQL+=" WHERE a1.co_emp<>" + objParSis.getCodigoEmpresaGrupo() + "";
                        strSQL+=" AND a1.st_reg NOT IN('I','E') AND a2.st_reg NOT IN('I','E')";
                        strSQL+=" ORDER BY a1.co_emp, a1.tx_nom, a2.co_loc, a2.tx_nom";

                    }
                    else{
                        strSQL="";
                        strSQL+="SELECT a1.co_emp, a1.tx_nom AS tx_nomEmp, a2.co_loc, a2.tx_nom AS tx_nomLoc";
                        strSQL+=" FROM tbm_emp AS a1 INNER JOIN tbm_loc AS a2";
                        strSQL+=" ON a1.co_emp=a2.co_emp";
                        strSQL+=" INNER JOIN tbr_locusr AS a3";
                        strSQL+=" ON a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc";
                        strSQL+=" WHERE a3.co_emp<>" + objParSis.getCodigoEmpresaGrupo() + "";
                        strSQL+=" AND a3.co_usr=" + objParSis.getCodigoUsuario() + "";
                        strSQL+=" AND a1.st_reg NOT IN('I','E') AND a2.st_reg NOT IN('I','E') AND a3.st_reg IN('A','P')";
                        strSQL+=" ORDER BY a1.co_emp, a1.tx_nom, a2.co_loc, a2.tx_nom";
                    }
                }
                else{
                    if(objParSis.getCodigoUsuario()==1){
                        strSQL="";
                        strSQL+="SELECT a1.co_emp, a1.tx_nom AS tx_nomEmp, a2.co_loc, a2.tx_nom AS tx_nomLoc";
                        strSQL+=" FROM tbm_emp AS a1 INNER JOIN tbm_loc AS a2";
                        strSQL+=" ON a1.co_emp=a2.co_emp";
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+=" AND a1.st_reg NOT IN('I','E') AND a2.st_reg NOT IN('I','E')";
                        strSQL+=" ORDER BY a1.co_emp, a1.tx_nom, a2.co_loc, a2.tx_nom";

                    }
                    else{
                        strSQL="";
                        strSQL+="SELECT a1.co_emp, a1.tx_nom AS tx_nomEmp, a2.co_loc, a2.tx_nom AS tx_nomLoc";
                        strSQL+=" FROM tbm_emp AS a1 INNER JOIN tbm_loc AS a2";
                        strSQL+=" ON a1.co_emp=a2.co_emp";
                        strSQL+=" INNER JOIN tbr_locusr AS a3";
                        strSQL+=" ON a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc";
                        strSQL+=" WHERE a3.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+=" AND a3.co_usr=" + objParSis.getCodigoUsuario() + "";
                        strSQL+=" AND a1.st_reg NOT IN('I','E') AND a2.st_reg NOT IN('I','E') AND a3.st_reg IN('A','P')";
                        strSQL+=" ORDER BY a1.co_emp, a1.tx_nom, a2.co_loc, a2.tx_nom";
                    }
                }

                System.out.println("SQL : " + strSQL);
                rst=stm.executeQuery(strSQL);
                while(rst.next()){
                    System.out.println("1 : " + rst.getString("co_emp"));
                    System.out.println("2: " + rst.getString("tx_nomEmp"));
                   vecLocReg=new Vector();
                    vecLocReg.add(INT_TBL_LOC_LIN,"");
                    vecLocReg.add(INT_TBL_LOC_CHK,     null);
                    vecLocReg.add(INT_TBL_LOC_COD_EMP, "" + rst.getString("co_emp"));
                    vecLocReg.add(INT_TBL_LOC_NOM_EMP, "" + rst.getString("tx_nomEmp"));
                    vecLocReg.add(INT_TBL_LOC_COD_LOC, "" + rst.getString("co_loc"));
                    vecLocReg.add(INT_TBL_LOC_NOM_LOC, "" + rst.getString("tx_nomLoc"));
                    vecLocReg.setElementAt(new Boolean(true),INT_TBL_LOC_CHK);
                    vecLocDat.add(vecLocReg);
                }
                blnMarTodChkTblEmp=false;
                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;

                //Asignar vectores al modelo.
                objTblModLoc.setData(vecLocDat);
                tblLoc.setModel(objTblModLoc);
                vecLocDat.clear();
            }

        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }


    private boolean cargarRegistrosReestructurados(){
        boolean blnRes=true;
        try{
            objTblModRee.removeAllRows();
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+=" SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.co_reg";
                strSQL+=", a1.ne_diacre, a1.fe_ven, a1.nd_porret, a1.mo_pag, a1.nd_abo";
                strSQL+=", a1.fe_ree, a1.co_usrree, a1.tx_comree, a1.st_reg";
                strSQL+=", a2.tx_usr, a2.tx_nom";
                strSQL+=" FROM tbm_pagmovinv AS a1";
                strSQL+=" LEFT OUTER JOIN tbm_usr AS a2";
                strSQL+=" ON a1.co_usrree=a2.co_usr";
                strSQL+=" WHERE a1.co_emp=" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_COD_EMP) + "";
                strSQL+=" AND a1.co_loc=" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_COD_LOC) + "";
                strSQL+=" AND a1.co_tipDoc=" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_COD_TIP_DOC) + "";
                strSQL+=" AND a1.co_doc=" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_COD_DOC) + "";
                strSQL+=" AND a1.st_reg IN('A','F','C','I')";
                strSQL+=" ORDER BY a1.co_reg";
                rst=stm.executeQuery(strSQL);
                while(rst.next()){
                    vecReeReg=new Vector();
                    vecReeReg.add(INT_TBL_REE_LIN,"");
                    vecReeReg.add(INT_TBL_REE_COD_EMP,      "" + rst.getString("co_emp"));
                    vecReeReg.add(INT_TBL_REE_COD_LOC,      "" + rst.getString("co_loc"));
                    vecReeReg.add(INT_TBL_REE_COD_TIP_DOC,  "" + rst.getString("co_tipDoc"));
                    vecReeReg.add(INT_TBL_REE_COD_DOC,      "" + rst.getString("co_doc"));
                    vecReeReg.add(INT_TBL_REE_COD_REG,      "" + rst.getString("co_reg"));
                    vecReeReg.add(INT_TBL_REE_DIA_CRE,      "" + rst.getString("ne_diacre"));
                    vecReeReg.add(INT_TBL_REE_FEC_VEN,      "" + rst.getString("fe_ven"));
                    vecReeReg.add(INT_TBL_REE_POR_RET,      "" + rst.getString("nd_porret"));
                    vecReeReg.add(INT_TBL_REE_VAL_DOC,      "" + rst.getString("mo_pag"));
                    vecReeReg.add(INT_TBL_REE_VAL_ABO,      "" + rst.getString("nd_abo"));
                    vecReeReg.add(INT_TBL_REE_FEC_REE,      "" + rst.getObject("fe_ree")==null?"":rst.getString("fe_ree"));
                    vecReeReg.add(INT_TBL_REE_COD_USR_REE,  "" + rst.getObject("co_usrree")==null?"":rst.getString("co_usrree"));
                    vecReeReg.add(INT_TBL_REE_ALI_USR_REE,  "" + rst.getObject("tx_usr")==null?"":rst.getString("tx_usr"));
                    vecReeReg.add(INT_TBL_REE_NOM_USR_REE,  "" + rst.getObject("tx_nom")==null?"":rst.getString("tx_nom"));
                    vecReeReg.add(INT_TBL_REE_PCS_REE,      "" + rst.getObject("tx_comree")==null?"":rst.getString("tx_comree"));
                    vecReeReg.add(INT_TBL_REE_EST_REG,      "" + rst.getString("st_reg"));
                    vecReeDat.add(vecReeReg);
                }
                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;

                //Asignar vectores al modelo.
                objTblModRee.setData(vecReeDat);
                tblRee.setModel(objTblModRee);
                vecReeDat.clear();
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
        
    }


    private class ZafLisSelLis implements javax.swing.event.ListSelectionListener{
        public void valueChanged(javax.swing.event.ListSelectionEvent e){
            javax.swing.ListSelectionModel lsm=(javax.swing.ListSelectionModel)e.getSource();
            int intMax=lsm.getMaxSelectionIndex();
            String strAux;
            if (!lsm.isSelectionEmpty()){
                if (chkMosReeDocSel.isSelected()){
                    cargarRegistrosReestructurados();
                }
                else
                    objTblModRee.removeAllRows();
            }
        }
    }


    /**
     * Esta función se ejecuta cuando se hace el "MouseClicked" en la cabecera del JTable.
     * Se utiliza ésta función especificamente para marcar todas las casillas de verificación
     * de la columna que indica la bodega seleccionada en el el JTable de bodegas.
     */
    private void tblEmpMouseClicked(java.awt.event.MouseEvent evt){
        int i, intNumFil;
        try
        {
            intNumFil=objTblModLoc.getRowCountTrue();
            //Marcar la casilla sólo si se da 1 click con el botón izquierdo.
            if (evt.getButton()==evt.BUTTON1 && evt.getClickCount()==1 && tblLoc.columnAtPoint(evt.getPoint())==INT_TBL_LOC_CHK)
            {
                if (blnMarTodChkTblEmp)
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        objTblModLoc.setChecked(true, i, INT_TBL_LOC_CHK);
                    }
                    blnMarTodChkTblEmp=false;
                }
                else
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        objTblModLoc.setChecked(false, i, INT_TBL_LOC_CHK);
                    }
                    blnMarTodChkTblEmp=true;
                }
            }
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }
    
    private class ZafMouMotAdaDat extends java.awt.event.MouseMotionAdapter{
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol){
                case INT_TBL_DAT_COD_EMP:
                    strMsg="Código de la empresa";
                    break;
                case INT_TBL_DAT_COD_LOC:
                    strMsg="Código del local";
                    break;
                case INT_TBL_DAT_COD_TIP_DOC:
                    strMsg="Código del tipo de documento";
                    break;
                case INT_TBL_DAT_DES_COR:
                    strMsg="Descripción corta del tipo de documento";
                    break;
                case INT_TBL_DAT_DES_LAR:
                    strMsg="Descripción larga del tipo de documento";
                    break;
                case INT_TBL_DAT_COD_DOC:
                    strMsg="Código del documento";
                    break;
                case INT_TBL_DAT_NUM_DOC:
                    strMsg="Número del documento";
                    break;
                case INT_TBL_DAT_FEC_DOC:
                    strMsg="Fecha del documento";
                    break;
                case INT_TBL_DAT_COD_CLI:
                    strMsg="Código del cliente";
                    break;
                case INT_TBL_DAT_NOM_CLI:
                    strMsg="Nombre del cliente";
                    break;
                case INT_TBL_DAT_VAL_DOC:
                    strMsg="Valor del documento";
                    break;
                case INT_TBL_DAT_VAL_ABO:
                    strMsg="Valor del abono";
                    break;
                case INT_TBL_DAT_VAL_PEN:
                    strMsg="Valor pendiente";
                    break;
                case INT_TBL_DAT_CHK_REE:
                    strMsg="Reestructurado";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }


    private class ZafMouMotAdaRee extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblRee.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol){
                case INT_TBL_REE_COD_EMP:
                    strMsg="Código de la empresa";
                    break;
                case INT_TBL_REE_COD_LOC:
                    strMsg="Código del local";
                    break;
                case INT_TBL_REE_COD_TIP_DOC:
                    strMsg="Código del tipo de documento";
                    break;
                case INT_TBL_REE_COD_DOC:
                    strMsg="Código del documento";
                    break;
                case INT_TBL_REE_COD_REG:
                    strMsg="Código del registro";
                    break;
                case INT_TBL_REE_DIA_CRE:
                    strMsg="Días de crédito";
                    break;
                case INT_TBL_REE_FEC_VEN:
                    strMsg="Fecha de vencimiento";
                    break;
                case INT_TBL_REE_POR_RET:
                    strMsg="Porcentaje de retención";
                    break;
                case INT_TBL_REE_VAL_DOC:
                    strMsg="Valor del documento";
                    break;
                case INT_TBL_REE_VAL_ABO:
                    strMsg="Valor del abono";
                    break;
                case INT_TBL_REE_FEC_REE:
                    strMsg="Fecha de reestructuración";
                    break;
                case INT_TBL_REE_COD_USR_REE:
                    strMsg="Código del usuario de reestructuración";
                    break;
                case INT_TBL_REE_ALI_USR_REE:
                    strMsg="Alias del usuario de reestructuración";
                    break;
                case INT_TBL_REE_NOM_USR_REE:
                    strMsg="Nombre del usuario de reestructuración";
                    break;
                case INT_TBL_REE_PCS_REE:
                    strMsg="Computadora de reestructuración";
                    break;
                case INT_TBL_REE_EST_REG:
                    strMsg="Estado del registro reestructurado";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblRee.getTableHeader().setToolTipText(strMsg);
        }
    }


    
}