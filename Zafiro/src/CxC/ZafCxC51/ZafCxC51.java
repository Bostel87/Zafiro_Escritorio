/*
 * ZafCxC51.java
 * 
 * Created on 08 de Enero de 2008, 09:25 AM
 * Listado de documentos por cobrar Sin Soporte
 * Dario Xavier Cardenas Landin
 */



package CxC.ZafCxC51;
import Librerias.ZafSelFec.ZafSelFec;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafToolBar.ZafToolBar;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import java.util.ArrayList;
import Librerias.ZafVenCon.ZafVenCon;
import Librerias.ZafTblUti.ZafTblTot.ZafTblTot;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;

////Dario_para llamar a clase de Importar Datos a un Archivo de Excel////
import java.io.*;
import Librerias.ZafUtil.ZafImpDatXml;

///para el boton abrir archivos///
import javax.swing.*;
import javax.swing.filechooser.*;
//import java.io.File;


/**
 *
 * @author  Lizbeth
 */
public class ZafCxC51 extends javax.swing.JInternalFrame 
{
    /* Declaracion de Variables */
    final int INT_TBL_LINEA =0; 
    final int INT_TBL_CODCLI =1;
    final int INT_TBL_NOMCLI =2;
    final int INT_TBL_CODLOC=3;
    final int INT_TBL_CODTIPDOC=4;
    final int INT_TBL_DESCORTIPDOC=5;
    final int INT_TBL_DESLARTIPDOC=6;
    final int INT_TBL_CODDOC =7;
    final int INT_TBL_CODREG =8;
    final int INT_TBL_NUMDOC =9;
    final int INT_TBL_FECDOC =10;
    final int INT_TBL_DIACRE =11;
    final int INT_TBL_FECVEN =12;
    final int INT_TBL_VALDOC =13;
    final int INT_TBL_VALPEN =14;
    final int INT_TBL_CODVEN =15;
    final int INT_TBL_NOMVEN =16;

    private java.util.Date datFecVen;        
    javax.swing.JInternalFrame jfrThis;                                    
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblBus objTblBus;             
    private String strSQL, strAux;
    private Vector vecDat, vecCab;                                                
    private ZafColNumerada objColNum, objColNumValPnd;
    private Vector vecTipCta, vecNatCta, vecEstReg, vecAux, vecAuxDat;
    private boolean blnCon;
    private String strAuxFec;
    private ZafToolBar objToolBar;  
    private java.util.Vector vecReg;
    private ZafTblMod objTblMod;
    private ZafThreadGUI objThrGUI;
    private ZafThreadGUIImp objThrGUIImp;
    private ZafTblTot objTblTot; 
    private ZafTblOrd objTblOrd;  
    private Statement stmCab, stm;
    private ResultSet rstCab;
    private Connection conCab;
    private ZafMouMotAda objMouMotAda;                                    
    private ZafTblCelRenLbl objTblCelRenLbl;
    private ZafVenCon vcoVen;
    private ZafVenCon vcoLoc;
    private ZafVenCon vcoTipDoc, vcoBan;                    //Ventana de consulta "Tipo de documento".
    private ZafVenCon vcoTipDocCtaCon;                      //Ventana de consulta "Tipo de documento".
    private ZafVenCon vcoCli, vcoEmp;                       //Ventana de consulta.
    private String strCodLoc, strNomLoc, strCodCli, strNomCli, strDesLarCli, strTipDoc, strDescorTipDoc, strDesLarTipDoc, strCodVen, strNomVen;
    private ZafSelFec objSelFec;
    private double VAL_TOT_DOC;
    private int NUMTOTREG=0, intSig=0;
    private int intColTipDoc[];
    private int intColTblTipDoc[];
    private ZafTblPopMnu objTblPopMnu;          //PopupMenu: Establecer PeopuMenï¿½ en JTable.
    private int clickbut=0, clickBotCon=0, intBanClicSel=0, Z=0;

    /*Dario_Objeto del Tipo ZafImpDatXml*/
    private ZafImpDatXml objImpDatXml;
    Object objAux, objTblAux;
    StringBuffer stb=new StringBuffer();
    //String strArrLis[][];
    
    ///variables para el boton de abrir archivos////
    static JFrame frame;
    JFileChooser chooser;
    
/** Creates new form ZafCxC51 */
    public ZafCxC51(ZafParSis obj) 
    {
        try
        {
            initComponents();
            //Inicializar objetos.
            ////boton abrir archivos///
            chooser = new JFileChooser();
        
            this.objParSis=obj;
            jfrThis = this;
            objParSis=(ZafParSis)obj.clone();   
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        chkMosDatChqDep = new javax.swing.JCheckBox();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        panCon = new javax.swing.JPanel();
        lblLoc = new javax.swing.JLabel();
        txtCodLoc = new javax.swing.JTextField();
        txtDesLarLoc = new javax.swing.JTextField();
        butLoc = new javax.swing.JButton();
        lblCli = new javax.swing.JLabel();
        txtCodCli = new javax.swing.JTextField();
        txtDesLarCli = new javax.swing.JTextField();
        butCli = new javax.swing.JButton();
        panNomCli = new javax.swing.JPanel();
        lblNomCliDes = new javax.swing.JLabel();
        txtNomCliDes = new javax.swing.JTextField();
        lblNomCliHas = new javax.swing.JLabel();
        txtNomCliHas = new javax.swing.JTextField();
        optTod = new javax.swing.JRadioButton();
        optFil = new javax.swing.JRadioButton();
        lblTipDoc = new javax.swing.JLabel();
        txtCodTipDoc = new javax.swing.JTextField();
        txtDesCorTipDoc = new javax.swing.JTextField();
        txtDesLarTipDoc = new javax.swing.JTextField();
        butTipDoc = new javax.swing.JButton();
        lblVen = new javax.swing.JLabel();
        txtNomVen = new javax.swing.JTextField();
        butVen = new javax.swing.JButton();
        txtCodVen = new javax.swing.JTextField();
        panDatos = new javax.swing.JPanel();
        panDat = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        spnTot = new javax.swing.JScrollPane();
        tblTot = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butExpArc = new javax.swing.JButton();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        chkMosDatChqDep.setText("Mostrar sólo los Cheques que ya FUERON Depositados");
        chkMosDatChqDep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMosDatChqDepActionPerformed(evt);
            }
        });

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setLayout(new java.awt.BorderLayout());

        panCon.setPreferredSize(new java.awt.Dimension(100, 310));
        panCon.setLayout(null);

        lblLoc.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        lblLoc.setText("Local:"); // NOI18N
        lblLoc.setToolTipText("Beneficiario"); // NOI18N
        panCon.add(lblLoc);
        lblLoc.setBounds(20, 10, 55, 20);

        txtCodLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodLocActionPerformed(evt);
            }
        });
        txtCodLoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodLocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodLocFocusLost(evt);
            }
        });
        panCon.add(txtCodLoc);
        txtCodLoc.setBounds(80, 10, 60, 20);

        txtDesLarLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarLocActionPerformed(evt);
            }
        });
        txtDesLarLoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarLocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarLocFocusLost(evt);
            }
        });
        panCon.add(txtDesLarLoc);
        txtDesLarLoc.setBounds(140, 10, 220, 20);

        butLoc.setText("..."); // NOI18N
        butLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLocActionPerformed(evt);
            }
        });
        panCon.add(butLoc);
        butLoc.setBounds(360, 10, 20, 20);

        lblCli.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        lblCli.setText("Cliente:"); // NOI18N
        lblCli.setToolTipText("Beneficiario"); // NOI18N
        panCon.add(lblCli);
        lblCli.setBounds(24, 135, 120, 20);

        txtCodCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodCliActionPerformed(evt);
            }
        });
        txtCodCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodCliFocusLost(evt);
            }
        });
        panCon.add(txtCodCli);
        txtCodCli.setBounds(144, 135, 56, 20);

        txtDesLarCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarCliActionPerformed(evt);
            }
        });
        txtDesLarCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarCliFocusLost(evt);
            }
        });
        panCon.add(txtDesLarCli);
        txtDesLarCli.setBounds(200, 135, 460, 20);

        butCli.setFont(new java.awt.Font("Dialog", 1, 11));
        butCli.setText("..."); // NOI18N
        butCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCliActionPerformed(evt);
            }
        });
        panCon.add(butCli);
        butCli.setBounds(660, 135, 20, 20);

        panNomCli.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nombre de cliente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11))); // NOI18N
        panNomCli.setLayout(null);

        lblNomCliDes.setFont(new java.awt.Font("Dialog", 1, 11));
        lblNomCliDes.setText("Desde:"); // NOI18N
        panNomCli.add(lblNomCliDes);
        lblNomCliDes.setBounds(12, 20, 44, 20);

        txtNomCliDes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomCliDesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomCliDesFocusLost(evt);
            }
        });
        panNomCli.add(txtNomCliDes);
        txtNomCliDes.setBounds(56, 20, 268, 20);

        lblNomCliHas.setFont(new java.awt.Font("Dialog", 1, 11));
        lblNomCliHas.setText("Hasta:"); // NOI18N
        panNomCli.add(lblNomCliHas);
        lblNomCliHas.setBounds(336, 20, 44, 20);

        txtNomCliHas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomCliHasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomCliHasFocusLost(evt);
            }
        });
        panNomCli.add(txtNomCliHas);
        txtNomCliHas.setBounds(380, 20, 268, 20);

        panCon.add(panNomCli);
        panNomCli.setBounds(20, 170, 660, 52);

        bgrFil.add(optTod);
        optTod.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        optTod.setSelected(true);
        optTod.setText("Todos los Documentos"); // NOI18N
        optTod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optTodItemStateChanged(evt);
            }
        });
        panCon.add(optTod);
        optTod.setBounds(4, 45, 400, 20);

        bgrFil.add(optFil);
        optFil.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        optFil.setText("Sólo los Documentos que cumplan el criterio seleccionado"); // NOI18N
        optFil.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optFilItemStateChanged(evt);
            }
        });
        panCon.add(optFil);
        optFil.setBounds(4, 65, 440, 20);

        lblTipDoc.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        lblTipDoc.setText("Tipo de documento:");
        panCon.add(lblTipDoc);
        lblTipDoc.setBounds(24, 105, 120, 20);

        txtCodTipDoc.setMaximumSize(null);
        txtCodTipDoc.setPreferredSize(new java.awt.Dimension(70, 20));
        panCon.add(txtCodTipDoc);
        txtCodTipDoc.setBounds(118, 105, 25, 20);

        txtDesCorTipDoc.setMaximumSize(null);
        txtDesCorTipDoc.setPreferredSize(new java.awt.Dimension(70, 20));
        txtDesCorTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorTipDocActionPerformed(evt);
            }
        });
        txtDesCorTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusLost(evt);
            }
        });
        panCon.add(txtDesCorTipDoc);
        txtDesCorTipDoc.setBounds(144, 105, 56, 20);

        txtDesLarTipDoc.setMaximumSize(null);
        txtDesLarTipDoc.setPreferredSize(new java.awt.Dimension(70, 20));
        txtDesLarTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarTipDocActionPerformed(evt);
            }
        });
        txtDesLarTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusLost(evt);
            }
        });
        panCon.add(txtDesLarTipDoc);
        txtDesLarTipDoc.setBounds(200, 105, 460, 20);

        butTipDoc.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        butTipDoc.setText("...");
        butTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butTipDocActionPerformed(evt);
            }
        });
        panCon.add(butTipDoc);
        butTipDoc.setBounds(660, 105, 20, 20);

        lblVen.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        lblVen.setText("Vendedor:"); // NOI18N
        lblVen.setToolTipText("Beneficiario"); // NOI18N
        panCon.add(lblVen);
        lblVen.setBounds(400, 10, 70, 20);

        txtNomVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomVenActionPerformed(evt);
            }
        });
        txtNomVen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomVenFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomVenFocusLost(evt);
            }
        });
        panCon.add(txtNomVen);
        txtNomVen.setBounds(480, 10, 180, 20);

        butVen.setText("..."); // NOI18N
        butVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butVenActionPerformed(evt);
            }
        });
        panCon.add(butVen);
        butVen.setBounds(660, 10, 20, 20);

        txtCodVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodVenActionPerformed(evt);
            }
        });
        txtCodVen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodVenFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodVenFocusLost(evt);
            }
        });
        panCon.add(txtCodVen);
        txtCodVen.setBounds(460, 10, 20, 20);

        panFil.add(panCon, java.awt.BorderLayout.NORTH);

        tabFrm.addTab("Filtro", panFil);

        panDatos.setLayout(new java.awt.BorderLayout());

        panDat.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnDat.setViewportView(tblDat);

        panDat.add(spnDat, java.awt.BorderLayout.CENTER);

        spnTot.setPreferredSize(new java.awt.Dimension(452, 20));

        tblTot.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnTot.setViewportView(tblTot);

        panDat.add(spnTot, java.awt.BorderLayout.PAGE_END);

        panDatos.add(panDat, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Datos", panDatos);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butExpArc.setText("Exportar");
        butExpArc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butExpArcActionPerformed(evt);
            }
        });
        panBot.add(butExpArc);

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        // TODO add your handling code here:
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="¿Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                //Cerrar la conexiï¿½n si estï¿½ abierta.
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e)
        {
            dispose();
        } 
    }//GEN-LAST:event_exitForm

    
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        ///Realizar acciï¿½n de acuerdo a la etiqueta del botï¿½n ("Consultar" o "Detener").
      
        if (butCon.getText().equals("Consultar"))
        {
            blnCon=true;
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
        }
        else
        {
            blnCon=false;
        }
        
        clickBotCon++;
//            }
    }//GEN-LAST:event_butConActionPerformed

    
    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

        objUti=new ZafUtil();
        if (!configurarFrm())
          exitForm();
        vecDat.clear();
    }//GEN-LAST:event_formInternalFrameOpened

    private boolean cargarDeb()
    {
        int intCodEmp, intCodLoc, intNumTotReg, i;
        int intNumDia;
        String strFecSis, strFecIni;
        int intFecIni[];
        int intFecFin[];//para calcular los dias entre fechas
        double dblSub, dblIva, dblNumFacApl=0;
        String strEstAnaSolCre="", strFecDoc;
        boolean blnRes=true;
        try
        {
            pgrSis.setIndeterminate(true);
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null)
            {
                strAux="";
                strAuxFec="";

                stmCab=conCab.createStatement();
                intCodEmp=objParSis.getCodigoEmpresa();
                intCodLoc=objParSis.getCodigoLocal();

                if (txtCodVen.getText().length()>0)
                    strAux+=" AND a1.co_com= " + txtCodVen.getText();

                if (txtCodLoc.getText().length()>0)
                    strAux+=" AND a1.co_loc= " + txtCodLoc.getText();
                
                if(!(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())))
                    strAux+=" AND a1.co_loc=" + intCodLoc;  ///POR AHORA NO SE PROCESA POR LOCAL///
                
                ////hace referencia a la tabla tbm_cabtipdoc////
                if (txtCodTipDoc.getText().length()>0)
                    strAux+=" AND a1.co_tipDoc=" + txtCodTipDoc.getText();
                
                ////hace referencia a la tabla tbm_cabmovinv////
                if (txtCodCli.getText().length()>0)
                    strAux+=" AND a1.co_cli=" + txtCodCli.getText();
                
                ////hace referencia a la tabla tbm_cabmovinv////
                if (txtNomCliDes.getText().length()>0 || txtNomCliHas.getText().length()>0)
                    strAux+=" AND ((LOWER(a1.tx_nomcli) BETWEEN '" + txtNomCliDes.getText().replaceAll("'", "''").toLowerCase() + "' AND '" + txtNomCliHas.getText().replaceAll("'", "''").toLowerCase() + "') OR LOWER(a1.tx_nomcli) LIKE '" + txtNomCliHas.getText().replaceAll("'", "''").toLowerCase() + "%')";
                

                ///////////para filtrar por fechas Desde y Hasta//////////////
                if (objSelFec.isCheckBoxChecked())
                {
                    switch (objSelFec.getTipoSeleccion())
                    {
                        case 0: //BÃ³squeda por rangos
                            strAux+=" AND a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                            break;
                        case 1: //Fechas menores o iguales que "Hasta".
                            strAux+=" AND a1.fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                            break;
                        case 2: //Fechas mayores o iguales que "Desde".
                            strAux+=" AND a1.fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                            break;
                        case 3: //Todo.
                            break;
                    }
                }


                strSQL="";
                strSQL+=" SELECT a1.co_cli, a1.tx_nomcli, a1.co_loc, a1.co_tipDoc, a3.tx_desCor, a3.tx_desLar, a1.co_doc, a2.co_reg, a1.ne_numDoc, a1.co_com, a1.tx_nomven, ";
                strSQL+=" a1.fe_doc, a2.ne_diacre, a2.fe_ven, a2.nd_porRet, a2.mo_pag, a2.nd_abo, (a2.mo_pag+a2.nd_abo) AS nd_pen, a2.st_sop, a2.st_entsop";
                strSQL+=" FROM tbm_cabMovInv AS a1";
                strSQL+=" INNER JOIN tbm_pagMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc)";
                strSQL+=" INNER JOIN tbm_cabTipDoc AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                strSQL+=" LEFT OUTER JOIN tbm_var AS a4 ON (a2.co_proChq=a4.co_reg)";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.st_reg IN ('A','R','C','F')";
                strSQL+=" AND a2.st_reg IN ('A','C') ";
                strSQL+=" AND a3.tx_natDoc='E' AND a3.ne_mod IN (1, 3) ";
                strSQL+=" AND (a2.mo_pag+a2.nd_abo) < 0";
                strSQL+=" AND a2.st_sop IN ('S') AND a2.st_entsop IN ('N') ";
                strSQL+=strAux;                
                strSQL+=" ORDER BY a2.co_emp, a2.co_loc, a1.tx_nomcli";
                
                System.out.println("---cargarDeb(): " + strSQL);
                rstCab=stmCab.executeQuery(strSQL);

                //Limpiar vector de datos.
                vecDat.clear();

                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");

                // pgrSis.setMinimum(0);
//                  pgrSis.setMaximum(intNumTotReg);
                //pgrSis.setValue(0);
                i=0;
                while (rstCab.next())
                {
                    if (blnCon)
                    {
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_LINEA,"");
                        vecReg.add(INT_TBL_CODCLI,rstCab.getString("co_cli"));
                        vecReg.add(INT_TBL_NOMCLI,rstCab.getString("tx_nomcli"));
                        vecReg.add(INT_TBL_CODLOC,rstCab.getString("co_loc"));
                        vecReg.add(INT_TBL_CODTIPDOC,rstCab.getString("co_tipdoc"));
                        vecReg.add(INT_TBL_DESCORTIPDOC,rstCab.getString("tx_descor"));
                        vecReg.add(INT_TBL_DESLARTIPDOC,rstCab.getString("tx_deslar"));
                        vecReg.add(INT_TBL_CODDOC,rstCab.getString("co_doc"));
                        vecReg.add(INT_TBL_CODREG,rstCab.getString("co_reg"));
                        vecReg.add(INT_TBL_NUMDOC,rstCab.getString("ne_numdoc"));
                        vecReg.add(INT_TBL_FECDOC,rstCab.getString("fe_doc"));
                        vecReg.add(INT_TBL_DIACRE,rstCab.getString("ne_diacre"));
                        vecReg.add(INT_TBL_FECVEN,rstCab.getString("fe_ven"));
                        vecReg.add(INT_TBL_VALDOC,rstCab.getString("mo_pag"));
                        vecReg.add(INT_TBL_VALPEN,rstCab.getString("nd_pen"));
                        vecReg.add(INT_TBL_CODVEN,rstCab.getString("co_com"));
                        vecReg.add(INT_TBL_NOMVEN,rstCab.getString("tx_nomven"));
                        vecDat.add(vecReg);
                        i++;
                        //pgrSis.setValue(i);
                    }
                    else
                        break;
                }
                rstCab.close();
                stmCab.close();
                conCab.close();
                rstCab=null;
                stmCab=null;
                conCab=null;

                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();

                //Calcular totales.
                objTblTot.calcularTotales();

                if (blnCon)
                    lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");
                else
                    lblMsgSis.setText("Interrupción del usuario. Sólo se procesaron " + tblDat.getRowCount() + " registros.");

                butCon.setText("Consultar");
                pgrSis.setIndeterminate(false); 
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private void chkMosDatChqDepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMosDatChqDepActionPerformed

}//GEN-LAST:event_chkMosDatChqDepActionPerformed

private void txtCodLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodLocActionPerformed
txtCodLoc.transferFocus();
}//GEN-LAST:event_txtCodLocActionPerformed

private void txtCodLocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodLocFocusGained
// TODO add your handling code here:
        strCodLoc=txtCodLoc.getText();
        txtCodLoc.selectAll();
}//GEN-LAST:event_txtCodLocFocusGained

private void txtCodLocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodLocFocusLost
// TODO add your handling code here:
        if (txtCodLoc.isEditable())
        {
            //Validar el contenido de la celda sólo si ha cambiado.
            if (!txtCodLoc.getText().equalsIgnoreCase(strCodLoc))
            {
                if (txtCodLoc.getText().equals(""))
                {
                    txtCodLoc.setText("");
                    txtDesLarLoc.setText("");
                }
                else
                {
                    mostrarVenConLoc(1);
                }
            }
            else
                txtCodLoc.setText(strCodLoc);
        }
}//GEN-LAST:event_txtCodLocFocusLost


private void txtDesLarLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarLocActionPerformed
// TODO add your handling code here:
        txtDesLarLoc.transferFocus();
}//GEN-LAST:event_txtDesLarLocActionPerformed

private void txtDesLarLocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarLocFocusGained
// TODO add your handling code here:
        strNomLoc=txtDesLarLoc.getText();
        txtDesLarLoc.selectAll();
}//GEN-LAST:event_txtDesLarLocFocusGained

private void txtDesLarLocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarLocFocusLost
// TODO add your handling code here:
        if (txtDesLarLoc.isEditable())
        {
            //Validar el contenido de la celda sólo si ha cambiado.
            if (!txtDesLarLoc.getText().equalsIgnoreCase(strNomLoc))
            {
                if (txtDesLarLoc.getText().equals(""))
                {
                    txtCodLoc.setText("");
                    txtDesLarLoc.setText("");
                }
                else
                {
                    mostrarVenConLoc(2);
                }
            }
            else
                txtDesLarLoc.setText(strNomLoc);
        }
}//GEN-LAST:event_txtDesLarLocFocusLost

private void butLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLocActionPerformed
mostrarVenConLoc(0);
}//GEN-LAST:event_butLocActionPerformed

private void txtCodCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodCliActionPerformed
    txtCodCli.transferFocus();
}//GEN-LAST:event_txtCodCliActionPerformed

private void txtCodCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCliFocusGained
    strCodCli=txtCodCli.getText();
    txtCodCli.selectAll();
}//GEN-LAST:event_txtCodCliFocusGained

private void txtCodCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCliFocusLost
    //Validar el contenido de la celda sï¿½lo si ha cambiado.
    if (!txtCodCli.getText().equalsIgnoreCase(strCodCli)) 
    {
        if (txtCodCli.getText().equals("")) 
        {
            txtCodCli.setText("");
            txtDesLarCli.setText("");
        } else
            mostrarVenConCli(1);
    } 
    else
        txtCodCli.setText(strCodCli);
    
    //Seleccionar el JRadioButton de filtro si es necesario.
    if (txtCodCli.getText().length()>0) 
        optFil.setSelected(true);
}//GEN-LAST:event_txtCodCliFocusLost

private void txtDesLarCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarCliActionPerformed
    txtDesLarCli.transferFocus();
}//GEN-LAST:event_txtDesLarCliActionPerformed

private void txtDesLarCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarCliFocusGained
    strDesLarCli=txtDesLarCli.getText();
    txtDesLarCli.selectAll();
}//GEN-LAST:event_txtDesLarCliFocusGained

private void txtDesLarCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarCliFocusLost
    //Validar el contenido de la celda sï¿½lo si ha cambiado.
    if (!txtDesLarCli.getText().equalsIgnoreCase(strDesLarCli)) {
        if (txtDesLarCli.getText().equals("")) {
            txtCodCli.setText("");
            txtDesLarCli.setText("");
        } else {
            mostrarVenConCli(2);
        }
    } else
        txtDesLarCli.setText(strDesLarCli);
    //Seleccionar el JRadioButton de filtro si es necesario.
    if (txtCodCli.getText().length()>0) {
        optFil.setSelected(true);
    }
}//GEN-LAST:event_txtDesLarCliFocusLost

private void butCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCliActionPerformed
    mostrarVenConCli(0);
    //Seleccionar el JRadioButton de filtro si es necesario.
    if (txtCodCli.getText().length()>0) {
        optFil.setSelected(true);
    }
}//GEN-LAST:event_butCliActionPerformed

private void txtNomCliDesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliDesFocusGained
    txtNomCliDes.selectAll();
}//GEN-LAST:event_txtNomCliDesFocusGained

private void txtNomCliDesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliDesFocusLost
    if (txtNomCliDes.getText().length()>0) {
        optFil.setSelected(true);
        if (txtNomCliHas.getText().length()==0)
            txtNomCliHas.setText(txtNomCliDes.getText());
        
        if (txtCodCli.getText().length()>0) 
        {
            txtCodCli.setText("");
            txtDesLarCli.setText("");
        }
    }
}//GEN-LAST:event_txtNomCliDesFocusLost

private void txtNomCliHasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliHasFocusGained
    txtNomCliHas.selectAll();
}//GEN-LAST:event_txtNomCliHasFocusGained

private void txtNomCliHasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliHasFocusLost
    if (txtNomCliHas.getText().length()>0)
        optFil.setSelected(true);
}//GEN-LAST:event_txtNomCliHasFocusLost

private void optTodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optTodItemStateChanged
    if (optTod.isSelected()) 
    {
        txtCodCli.setText("");
        txtDesLarCli.setText("");
        txtNomCliDes.setText("");
        txtNomCliHas.setText("");
    }
}//GEN-LAST:event_optTodItemStateChanged

private void optFilItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optFilItemStateChanged
    if (optFil.isSelected()) {
        //            txtCodEmp.setText("");
        //            txtDesLarEmp.setText("");
        //            txtCodTipDoc.setText("");
        //            txtDesLarTipDoc.setText("");
        //            txtCodEmpTipDoc.setText("");
        //            txtDesLarEmpTipDoc.setText("");
    }
}//GEN-LAST:event_optFilItemStateChanged

private void txtDesCorTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorTipDocActionPerformed
    // TODO add your handling code here:
    txtDesCorTipDoc.transferFocus();
}//GEN-LAST:event_txtDesCorTipDocActionPerformed

private void txtDesCorTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusGained
    // TODO add your handling code here:
    strTipDoc=txtDesCorTipDoc.getText();
    txtDesCorTipDoc.selectAll();
}//GEN-LAST:event_txtDesCorTipDocFocusGained

private void txtDesCorTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusLost
    // TODO add your handling code here:
    //Validar el contenido de la celda sï¿½lo si ha cambiado.
    if (!txtDesCorTipDoc.getText().equalsIgnoreCase(strTipDoc)) {
        if (txtDesCorTipDoc.getText().equals("")) {
            txtCodTipDoc.setText("");
            txtDesLarTipDoc.setText("");
        } else {
            mostrarVenConTipDoc(1);
        }
    } else
        txtDesCorTipDoc.setText(strTipDoc);
}//GEN-LAST:event_txtDesCorTipDocFocusLost

private void txtDesLarTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarTipDocActionPerformed
    // TODO add your handling code here:
    txtDesLarTipDoc.transferFocus();
}//GEN-LAST:event_txtDesLarTipDocActionPerformed

private void txtDesLarTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusGained
    // TODO add your handling code here:
    strDesLarTipDoc=txtDesLarTipDoc.getText();
    txtDesLarTipDoc.selectAll();
}//GEN-LAST:event_txtDesLarTipDocFocusGained

private void txtDesLarTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusLost
    // TODO add your handling code here:
    if (!txtDesLarTipDoc.getText().equalsIgnoreCase(strDesLarTipDoc)) {
        if (txtDesLarTipDoc.getText().equals("")) {
            txtCodTipDoc.setText("");
            txtDesCorTipDoc.setText("");
        } else {
            mostrarVenConTipDoc(2);
        }
    } else
        txtDesLarTipDoc.setText(strDesLarTipDoc);
}//GEN-LAST:event_txtDesLarTipDocFocusLost

private void butTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butTipDocActionPerformed
    // TODO add your handling code here:
    mostrarVenConTipDoc(0);
}//GEN-LAST:event_butTipDocActionPerformed

private void butExpArcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butExpArcActionPerformed
    // TODO add your handling code here:
    
    if(clickBotCon>0) 
    {
        int intNumCol, intNumFil, intNumFinCol;
        int intNumColSel[], intNumFilSel[];
        int intFilSel[], intColSel[];
        String Ruta="";
        ArrayList arrNumColEli;
        
        tblDat.selectAll();
        
        //Para saber el total de fila y la columna seleccionada//
        intFilSel=tblDat.getSelectedRows();
        intColSel=tblDat.getSelectedColumns();
        
//        System.out.println("--intFilSel.length: " + intFilSel.length);
//        System.out.println("--intColSel.length: " + intColSel.length);
        
        ///Para Saber total de filas y columnas de la tabla//
        intNumCol = objTblMod.getColumnCount();
        intNumFil = objTblMod.getRowCountTrue();
        arrNumColEli = objTblMod.getSystemHiddenColumns();
        
//        System.out.println("--intNumCol: " + intNumCol);
//        System.out.println("--intNumFil: " + intNumFil);
//        System.out.println("--arrNumColEli: " + arrNumColEli.size());
        
        intNumFinCol = (intNumCol - arrNumColEli.size());
//        System.out.println("--intNumFinCol: " + intNumFinCol);
        String strArrLis[][] = new String[intNumFil][intNumFinCol];
        
        tblDat.clearSelection();
        
        ////boton para abrir cuadro de dialogo de abrir documento////
        int retval = chooser.showSaveDialog(frame);
        if (retval == JFileChooser.APPROVE_OPTION) {
            if (chooser.isMultiSelectionEnabled()) {
                File [] files = chooser.getSelectedFiles();
                if (files != null && files.length > 0) {
                    String filenames = "";
                    for (int i = 0; i < files.length; i++) {
                        filenames = filenames + "\n" + files[i].getPath();
                    }
                    JOptionPane.showMessageDialog(frame,
                            "You chose these files: \n" + filenames);
                }
            } else {
                File theFile = chooser.getSelectedFile();
                if (theFile != null) {
                    if (theFile.isDirectory()) {
                        JOptionPane.showMessageDialog(frame,
                                "You chose this directory: " +
                                theFile.getPath());
                    } else {
                        //			JOptionPane.showMessageDialog(frame,
                        //						      "La Ruta del Archivo Seleccionado es: " +
                        //						      theFile.getPath());
                        Ruta = theFile.getPath();
//                        System.out.println("--Ruta: " + Ruta);
                    }
                }
            }
        } else if (retval == JFileChooser.CANCEL_OPTION) {
            ///JOptionPane.showMessageDialog(frame, "User cancelled operation. No file was chosen.");
//            System.out.println("--CANCELO LA OPERACION DE GUARDAR---NO GENERO ARCHIVO DE EXCEL--Ruta: " + Ruta);
        } else if (retval == JFileChooser.ERROR_OPTION) {
            JOptionPane.showMessageDialog(frame, "Ocurrio un Eror al momento de Guardar.");
//            System.out.println("--OCURRIO UN ERROR AL GUARDAR---NO GENERO ARCHIVO DE EXCEL--");
        } else {
            JOptionPane.showMessageDialog(frame, "La Operacion no es valida.");
//            System.out.println("--LA OPERACION NO ES VALIDA---NO GENERO ARCHIVO DE EXCEL--");
        }
        
        //Obtener el detalle que se va a enviar al archivo de Excel//
        for (int i=0; i<intFilSel.length; i++) {
            for (int j=1; j<intNumFinCol; j++) {
                if(j < intNumFinCol) {
//                    System.out.println(" --i: " + i + " --intFilSel[i]-- " + intFilSel[i] + " --j: " + j + " --intColSel[j]-- " + intColSel[j]);
                    objAux=objTblMod.getValueAt(intFilSel[i], intColSel[j]);
//                    System.out.println("--objAux-- " + objAux);
                    strArrLis[i][j] = objUti.parseString(""+objAux);
//                    System.out.println("--strArrLis[i][j]: " + strArrLis[i][j]);
                }
                //else
                //break;
            }
        }
        
        intColSel = new int[intNumFinCol];
//        System.out.println("--Ruta-- " + Ruta);
        if(!Ruta.equals("")) {
            /*Dario_---Para Generar archivo de Excel---*/
            objImpDatXml.EjecutarFuncion(intFilSel, intColSel, strArrLis, Ruta);
        }
        ////////////////////////////////////////////
    } else
        JOptionPane.showMessageDialog(frame, "Favor Debe Consultar Datos.");
    
    clickbut++;
}//GEN-LAST:event_butExpArcActionPerformed

private void txtNomVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomVenActionPerformed
    // TODO add your handling code here:
    txtNomVen.transferFocus();
}//GEN-LAST:event_txtNomVenActionPerformed

private void txtNomVenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomVenFocusGained
    // TODO add your handling code here:
    strNomVen=txtNomVen.getText();
    txtNomVen.selectAll();
}//GEN-LAST:event_txtNomVenFocusGained

private void txtNomVenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomVenFocusLost
    // TODO add your handling code here:
    if (txtNomVen.isEditable())
    {
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtNomVen.getText().equalsIgnoreCase(strNomVen))
        {
            if (txtNomVen.getText().equals(""))
            {
                txtCodVen.setText("");
                txtNomVen.setText("");
            }
            else
            {
                mostrarVenConVen(2);
            }
        }
        else
            txtNomVen.setText(strNomVen);
    }
}//GEN-LAST:event_txtNomVenFocusLost

private void butVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butVenActionPerformed
    // TODO add your handling code here:
    mostrarVenConVen(0);
}//GEN-LAST:event_butVenActionPerformed

private void txtCodVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodVenActionPerformed
    // TODO add your handling code here:
    txtCodVen.transferFocus();
}//GEN-LAST:event_txtCodVenActionPerformed

private void txtCodVenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodVenFocusGained
    // TODO add your handling code here:
    strCodVen=txtCodVen.getText();
    txtCodVen.selectAll();
}//GEN-LAST:event_txtCodVenFocusGained

private void txtCodVenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodVenFocusLost
    // TODO add your handling code here:
    if (txtCodVen.isEditable())
    {
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtCodVen.getText().equalsIgnoreCase(strCodVen))
        {
            if (txtCodVen.getText().equals(""))
            {
                txtCodVen.setText("");
                txtNomVen.setText("");
            }
            else
            {
                mostrarVenConVen(1);
            }
        }
        else
            txtCodVen.setText(strCodVen);
    }
}//GEN-LAST:event_txtCodVenFocusLost
    /** Cerrar la aplicaciï¿½n. */
    private void exitForm() {
        dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCli;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butExpArc;
    private javax.swing.JButton butLoc;
    private javax.swing.JButton butTipDoc;
    private javax.swing.JButton butVen;
    private javax.swing.JCheckBox chkMosDatChqDep;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblCli;
    private javax.swing.JLabel lblLoc;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblNomCliDes;
    private javax.swing.JLabel lblNomCliHas;
    private javax.swing.JLabel lblTipDoc;
    private javax.swing.JLabel lblTit;
    private javax.swing.JLabel lblVen;
    private javax.swing.JRadioButton optFil;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panCon;
    private javax.swing.JPanel panDat;
    private javax.swing.JPanel panDatos;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panNomCli;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JScrollPane spnTot;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblTot;
    private javax.swing.JTextField txtCodCli;
    private javax.swing.JTextField txtCodLoc;
    private javax.swing.JTextField txtCodTipDoc;
    private javax.swing.JTextField txtCodVen;
    private javax.swing.JTextField txtDesCorTipDoc;
    private javax.swing.JTextField txtDesLarCli;
    private javax.swing.JTextField txtDesLarLoc;
    private javax.swing.JTextField txtDesLarTipDoc;
    private javax.swing.JTextField txtNomCliDes;
    private javax.swing.JTextField txtNomCliHas;
    private javax.swing.JTextField txtNomVen;
    // End of variables declaration//GEN-END:variables
    
    
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        int intCodUsr = objParSis.getCodigoUsuario();
        int intCodEmp = objParSis.getCodigoEmpresa();
        int intCodMnu = objParSis.getCodigoMenu();
        int intFilSel, intColSel, intNumFacApl;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu(); 
            //Configurar JTable: Establecer el modelo.//
            this.setTitle(objParSis.getNombreMenu()+"v 0.1.2");
            lblTit.setText(objParSis.getNombreMenu());
            //txtCodLoc.setBackground(objParSis.getColorCamposObligatorios());
            //txtDesLarLoc.setBackground(objParSis.getColorCamposObligatorios());
            txtCodTipDoc.setVisible(false);
            txtCodVen.setVisible(false);

            //Configurar ZafSelFec:///
            objSelFec=new ZafSelFec();
            objSelFec.setTitulo("Fecha del Documento");
            objSelFec.setCheckBoxChecked(false);
            panCon.add(objSelFec);
            objSelFec.setBounds(20, 230, 472, 72);

                    
            vecDat=new Vector();           
            vecCab=new Vector(25);    
            vecCab.clear();
            vecCab.add(INT_TBL_LINEA,"");
	    vecCab.add(INT_TBL_CODCLI,"Cod.Cli.");
	    vecCab.add(INT_TBL_NOMCLI,"Nom.Cli");
	    vecCab.add(INT_TBL_CODLOC,"Cod.Loc");
	    vecCab.add(INT_TBL_CODTIPDOC,"Cod.Tip.Doc");
	    vecCab.add(INT_TBL_DESCORTIPDOC,"Tip.Doc.");
	    vecCab.add(INT_TBL_DESLARTIPDOC,"Tipo de Documento");
	    vecCab.add(INT_TBL_CODDOC,"Cod.Doc.");
	    vecCab.add(INT_TBL_CODREG,"Cod.Reg.");
            vecCab.add(INT_TBL_NUMDOC,"Nùm.Doc.");
	    vecCab.add(INT_TBL_FECDOC,"Fec.Doc.");
            vecCab.add(INT_TBL_DIACRE,"Dia.Cre.");
	    vecCab.add(INT_TBL_FECVEN,"Fec.Ven.");
	    vecCab.add(INT_TBL_VALDOC,"Val.Doc.");    
            vecCab.add(INT_TBL_VALPEN,"Val.Pen.");
            vecCab.add(INT_TBL_CODVEN,"Cod.Ven.");
	    vecCab.add(INT_TBL_NOMVEN,"Nom.Ven");
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);

            //Configurar las ZafVenCon.//
            configurarVenConVen();

            /*Configuracion de Ventanas de consulta*/            
            configurarVenConLoc();   
            
            //Configurar las ZafVenCon.//
            configurarVenConCli();
            
            //Configurar las ZafVenCon.//
            configurarVenConTipDoc();
            
            /*Dario_---Para crear Archivos de Excel---*/
            objImpDatXml = new Librerias.ZafUtil.ZafImpDatXml(objParSis);
            
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            
            //Configurar JTable: Establecer tipo de seleccion.
            tblDat.setRowSelectionAllowed(true); 
            
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            objColNum=new ZafColNumerada(tblDat,INT_TBL_LINEA);
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);       
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            
            //Configurar ZafTblMod: Establecer las columnas que el modelo debe almacenar antes de eliminar una fila.         
            tblDat.getColumnModel().getColumn(INT_TBL_LINEA).setPreferredWidth(20);//0 
            tblDat.getColumnModel().getColumn(INT_TBL_CODCLI).setPreferredWidth(40);//1
            tblDat.getColumnModel().getColumn(INT_TBL_NOMCLI).setPreferredWidth(95);//2
            tblDat.getColumnModel().getColumn(INT_TBL_CODLOC).setPreferredWidth(20);//3
            tblDat.getColumnModel().getColumn(INT_TBL_CODTIPDOC).setPreferredWidth(26);//4
            tblDat.getColumnModel().getColumn(INT_TBL_DESCORTIPDOC).setPreferredWidth(50);//5
            tblDat.getColumnModel().getColumn(INT_TBL_DESLARTIPDOC).setPreferredWidth(30);//6
            tblDat.getColumnModel().getColumn(INT_TBL_CODDOC).setPreferredWidth(26);//7
            tblDat.getColumnModel().getColumn(INT_TBL_CODREG).setPreferredWidth(26);//8            
            tblDat.getColumnModel().getColumn(INT_TBL_NUMDOC).setPreferredWidth(45);//9
            tblDat.getColumnModel().getColumn(INT_TBL_FECDOC).setPreferredWidth(85);//10
            tblDat.getColumnModel().getColumn(INT_TBL_DIACRE).setPreferredWidth(30);//11
            tblDat.getColumnModel().getColumn(INT_TBL_FECVEN).setPreferredWidth(85);//12
            tblDat.getColumnModel().getColumn(INT_TBL_VALDOC).setPreferredWidth(95);//13
            tblDat.getColumnModel().getColumn(INT_TBL_VALPEN).setPreferredWidth(95);//14
            tblDat.getColumnModel().getColumn(INT_TBL_CODVEN).setPreferredWidth(40);//1
            tblDat.getColumnModel().getColumn(INT_TBL_NOMVEN).setPreferredWidth(130);//2
          
            //Configurar JTable: Establecer Ocultas las columnas.
            ocultaCol(INT_TBL_DESLARTIPDOC);//1
            ocultaCol(INT_TBL_CODTIPDOC);//1
            ocultaCol(INT_TBL_CODDOC);//1
            ocultaCol(INT_TBL_CODREG);//1
            ocultaCol(INT_TBL_CODVEN);//1
            ocultaCol(INT_TBL_NOMVEN);//1
           
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);

//          Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tblDat.getColumnModel().getColumn(INT_TBL_VALPEN).setResizable(false);

            //Configurar JTable: Editor de bï¿½squeda.
            objTblBus=new ZafTblBus(tblDat);
            
            ///renderizador para alinear a la izquierda los datos de las columnas///
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.LEFT);
            tblDat.getColumnModel().getColumn(INT_TBL_NOMCLI).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_CODCLI).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_NOMVEN).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_CODVEN).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
            ///renderizador para alinear a la derercha y en formato numerico decimal de las columnas///
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tblDat.getColumnModel().getColumn(INT_TBL_VALDOC).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_VALPEN).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            
            //Configurar JTable: Establecer la clase que controla el ordenamiento.
            objTblOrd=new ZafTblOrd(tblDat);
            //Configurar JTable: Establecer relación entre el JTable de datos y JTable de totales.
            int intCol[]={INT_TBL_VALDOC, INT_TBL_VALPEN};
            objTblTot=new ZafTblTot(spnDat, spnTot, tblDat, tblTot, intCol);
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    private boolean configurarVenConVen()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_usr");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("492");


            //Armar la sentencia SQL. camposObligatorios
            strSQL="";
            strSQL+="SELECT a1.co_usr, a1.tx_nom";
            strSQL+=" FROM tbm_usr AS a1";
            strSQL+=" WHERE a1.co_grpusr IN (3)";
            strSQL+=" AND a1.st_reg IN ('A')";
            strSQL+=" ORDER BY a1.co_usr";
            System.out.println("---QUERY PARA CONVEN--admin--: " + strSQL);

////////////            /*Query mejorado para consultar LOCALES filtrado por local y empresa*/
////////////            //Armar la sentencia SQL.
////////////            if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario()))
////////////            {
////////////                //Armar la sentencia SQL. camposObligatorios
////////////                strSQL="";
////////////                strSQL+="SELECT a1.co_usr, a1.tx_nom";
////////////                strSQL+=" FROM tbm_usr AS a1";
////////////                strSQL+=" WHERE a1.co_grpusr IN (3)";
////////////                strSQL+=" AND a1.st_reg IN ('A')";
////////////                strSQL+=" ORDER BY a1.co_usr";
////////////                System.out.println("---QUERY PARA CONVEN--admin--: " + strSQL);
////////////            }
////////////            else
////////////            {
////////////                strSQL="";
////////////                strSQL="";
////////////                strSQL+="SELECT a1.co_loc, a1.tx_nom";
////////////                strSQL+=" FROM tbm_loc AS a1";
////////////                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
////////////                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();
////////////                strSQL+=" AND a1.st_reg IN ('A', 'P')";
////////////                strSQL+=" ORDER BY a1.co_emp, a1.co_loc";
////////////                System.out.println("---QUERY PARA CONLOC POR LOCAL---: " + strSQL);
////////////            }

            vcoVen=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de Vendedores", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoVen.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    private boolean configurarVenConLoc()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_loc");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("492");

            /*Query mejorado para consultar LOCALES filtrado por local y empresa*/
            //Armar la sentencia SQL.
            if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario()))
            {
                //Armar la sentencia SQL. camposObligatorios
                strSQL="";
                strSQL+="SELECT a1.co_loc, a1.tx_nom";
                strSQL+=" FROM tbm_loc AS a1";
                if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                    strSQL+=" WHERE a1.co_emp IN (1,2,3,4)";
                else
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.st_reg IN ('A', 'P')";
                strSQL+=" ORDER BY a1.co_emp, a1.co_loc";
                System.out.println("---QUERY PARA CONLOC--admin--: " + strSQL);
            }
            else
            {
                strSQL="";
                strSQL="";
                strSQL+="SELECT a1.co_loc, a1.tx_nom";
                strSQL+=" FROM tbm_loc AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();
                strSQL+=" AND a1.st_reg IN ('A', 'P')";
                strSQL+=" ORDER BY a1.co_emp, a1.co_loc";
                System.out.println("---QUERY PARA CONLOC POR LOCAL---: " + strSQL);
            }
            vcoLoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de locales", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoLoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

        
    /**
     * Esta funciï¿½n configura la "Ventana de consulta" que serï¿½ utilizada para
     * mostrar los "Tipos de documentos".
     */
    private boolean configurarVenConTipDoc()
    {
        boolean blnRes=true;
        int intCodUsr = objParSis.getCodigoUsuario();
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_tipdoc");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            arlCam.add("a1.ne_ultDoc");
            arlCam.add("a1.tx_natDoc");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Cï¿½digo");
            arlAli.add("Tip.Doc.");
            arlAli.add("Tipo de documento");
            arlAli.add("Ult.Doc.");
            arlAli.add("Nat.Doc.");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            arlAncCol.add("80");
            arlAncCol.add("80");
            
            if(intCodUsr==1)
            {
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar, a1.ne_ultDoc, a1.tx_natDoc ";
                strSQL+=" FROM tbm_cabTipDoc AS a1, tbr_tipDocPrg AS a2";
                strSQL+=" WHERE a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                strSQL+=" AND a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();
                strSQL+=" AND a2.co_mnu=" + objParSis.getCodigoMenu();
                ///System.out.println("---Query Ventana consulta usuario ADMIN:--configurarVenConTipDoc()-- "+strSQL);
            }
            else
            {
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar, a1.ne_ultDoc, a1.tx_natDoc ";
                strSQL+=" FROM tbm_cabTipDoc AS a1, tbr_tipDocUsr AS a2";
                strSQL+=" WHERE a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                strSQL+=" AND a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();
                strSQL+=" AND a2.co_mnu=" + objParSis.getCodigoMenu();
                strSQL+=" AND a2.co_usr=" + objParSis.getCodigoUsuario();
                ///System.out.println("---Query Ventana consulta usuario VARIOS:--configurarVenConTipDoc()-- "+strSQL);
            }
            
            //Ocultar columnas.
            int intColOcu[]=new int[1];
            intColOcu[0]=5;
            vcoTipDoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de tipos de documentos", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoTipDoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoTipDoc.setConfiguracionColumna(4, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funciï¿½n configura la "Ventana de consulta" que serï¿½ utilizada para
     * mostrar los "Clientes".
     */
    private boolean configurarVenConCli()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Cï¿½digo");
            arlAli.add("Identificaciï¿½n");
            arlAli.add("Nombre");
            arlAli.add("Direcciï¿½n");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("100");
            arlAncCol.add("284");
            arlAncCol.add("110");

            /*Query mejorado para consultar Clientes filtrado por local y empresa*/
            //Armar la sentencia SQL.
            if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario()))
            {
                strSQL="";
                strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
                strSQL+=" FROM tbm_cli AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.st_reg='A'";
                strSQL+=" ORDER BY a1.tx_nom";
                System.out.println("---QUERY PARA CONCLI---: " + strSQL);
            }
            else
            {
                strSQL="";
                strSQL+="SELECT a1.co_cli, a2.tx_ide, a2.tx_nom, a2.tx_dir";
                strSQL+=" FROM  tbr_cliloc AS a1";
                strSQL+=" INNER JOIN tbm_cli AS a2 ON (a1.co_emp=a2.co_emp and a1.co_cli=a2.co_cli) ";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();
                strSQL+=" AND a2.st_reg='A'";
                strSQL+=" ORDER BY a2.tx_nom";
                System.out.println("---QUERY PARA CONCLI POR LOCAL---: " + strSQL);
            }

            vcoCli=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de clientes", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoCli.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoCli.setConfiguracionColumna(2, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    

    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConVen(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoVen.setCampoBusqueda(1);
                    vcoVen.show();
                    if (vcoVen.getSelectedButton()==vcoVen.INT_BUT_ACE)
                    {
                        txtCodVen.setText(vcoVen.getValueAt(1));
                        txtNomVen.setText(vcoVen.getValueAt(2));
                    }

                    break;
                case 1: //Búsqueda directa por "Código".
                    if (vcoVen.buscar("a1.co_usr", txtCodVen.getText()))
                    {
                        txtCodVen.setText(vcoVen.getValueAt(1));
                        txtNomVen.setText(vcoVen.getValueAt(2));
                    }
                    else
                    {
                        vcoVen.setCampoBusqueda(0);
                        vcoVen.setCriterio1(11);
                        vcoVen.cargarDatos();
                        vcoVen.show();
                        if (vcoVen.getSelectedButton()==vcoVen.INT_BUT_ACE)
                        {
                            txtCodVen.setText(vcoVen.getValueAt(1));
                            txtNomVen.setText(vcoVen.getValueAt(2));
                        }
                        else
                        {
                            txtCodVen.setText(strCodVen);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Nombre".
                    if (vcoVen.buscar("a1.tx_nom", txtNomVen.getText()))
                    {
                        txtCodVen.setText(vcoVen.getValueAt(1));
                        txtNomVen.setText(vcoVen.getValueAt(2));
                    }
                    else
                    {
                        vcoVen.setCampoBusqueda(1);
                        vcoVen.setCriterio1(11);
                        vcoVen.cargarDatos();
                        vcoVen.show();
                        if (vcoVen.getSelectedButton()==vcoVen.INT_BUT_ACE)
                        {
                            txtCodVen.setText(vcoVen.getValueAt(1));
                            txtNomVen.setText(vcoVen.getValueAt(2));
                        }
                        else
                        {
                            txtNomVen.setText(strNomVen);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConLoc(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoLoc.setCampoBusqueda(1);
                    vcoLoc.show();
                    if (vcoLoc.getSelectedButton()==vcoLoc.INT_BUT_ACE)
                    {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                    }
                    
                    break;
                case 1: //Búsqueda directa por "Código".
                    if (vcoLoc.buscar("a1.co_loc", txtCodLoc.getText()))
                    {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                    }
                    else
                    {
                        vcoLoc.setCampoBusqueda(0);
                        vcoLoc.setCriterio1(11);
                        vcoLoc.cargarDatos();
                        vcoLoc.show();
                        if (vcoLoc.getSelectedButton()==vcoLoc.INT_BUT_ACE)
                        {
                            txtCodLoc.setText(vcoLoc.getValueAt(1));
                            txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                        }
                        else
                        {
                            txtCodLoc.setText(strCodLoc);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Nombre".
                    if (vcoLoc.buscar("a1.tx_nom", txtDesLarLoc.getText()))
                    {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                    }
                    else
                    {
                        vcoLoc.setCampoBusqueda(1);
                        vcoLoc.setCriterio1(11);
                        vcoLoc.cargarDatos();
                        vcoLoc.show();
                        if (vcoLoc.getSelectedButton()==vcoLoc.INT_BUT_ACE)
                        {
                            txtCodLoc.setText(vcoLoc.getValueAt(1));
                            txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                        }
                        else
                        {
                            txtDesLarLoc.setText(strNomLoc);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta funciï¿½n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de bï¿½squeda determina si se debe hacer
     * una bï¿½squeda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se estï¿½ buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opciï¿½n que desea utilizar.
     * @param intTipBus El tipo de bï¿½squeda a realizar.
     * @return true: Si no se presentï¿½ ningï¿½n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConTipDoc(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoTipDoc.setCampoBusqueda(1);
                    vcoTipDoc.show();
                    if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));///txtCodTipDoc   ///txtCodTipDoc
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        intSig=(vcoTipDoc.getValueAt(5).equals("I")?1:-1);
                        
//                        mostrarCtaPre();
//                        mostrarSaldoCta();

                    }
                    break;
                case 1: //Bï¿½squeda directa por "Descripciï¿½n corta".
                    if (vcoTipDoc.buscar("a1.tx_descor", txtDesCorTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));   ///txtCodTipDoc
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        intSig=(vcoTipDoc.getValueAt(5).equals("I")?1:-1);
                        
//                        mostrarCtaPre();
//                        mostrarSaldoCta();
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(1);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                            intSig=(vcoTipDoc.getValueAt(5).equals("I")?1:-1);
                            
//                            mostrarCtaPre();
//                            mostrarSaldoCta();
                        }
                        else
                        {
                            txtDesCorTipDoc.setText(strTipDoc);
                        }
                    }
                    break;
                case 2: //Bï¿½squeda directa por "Descripciï¿½n larga".
                    if (vcoTipDoc.buscar("a1.tx_deslar", txtDesLarTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        intSig=(vcoTipDoc.getValueAt(5).equals("I")?1:-1);
                        
//                        mostrarCtaPre();
//                        mostrarSaldoCta();
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(2);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                            intSig=(vcoTipDoc.getValueAt(5).equals("I")?1:-1);
                            
//                            mostrarCtaPre();
//                            mostrarSaldoCta();
                        }
                        else
                        {
                            txtDesLarTipDoc.setText(strDesLarTipDoc);
                        }
                    }
                    break;
                default:
                    txtDesCorTipDoc.requestFocus();
                    break;
                    
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta funciï¿½n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de bï¿½squeda determina si se debe hacer
     * una bï¿½squeda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se estï¿½ buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opciï¿½n que desea utilizar.
     * @param intTipBus El tipo de bï¿½squeda a realizar.
     * @return true: Si no se presentï¿½ ningï¿½n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConCli(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoCli.setCampoBusqueda(2);
                    vcoCli.show();
                    if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                    {
                        txtCodCli.setText(vcoCli.getValueAt(1));
                        txtDesLarCli.setText(vcoCli.getValueAt(3));
                    }
                    break;
                case 1: //Bï¿½squeda directa por "Cï¿½digo".
                    if (vcoCli.buscar("a1.co_cli", txtCodCli.getText()))
                    {
                        txtCodCli.setText(vcoCli.getValueAt(1));
                        txtDesLarCli.setText(vcoCli.getValueAt(3));
                    }
                    else
                    {
                        vcoCli.setCampoBusqueda(0);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                        {
                            txtCodCli.setText(vcoCli.getValueAt(1));
                            txtDesLarCli.setText(vcoCli.getValueAt(3));
                        }
                        else
                        {
                            txtCodCli.setText(strCodCli);
                        }
                    }
                    break;
                case 2: //Bï¿½squeda directa por "Descripciï¿½n larga".
                    if (vcoCli.buscar("a1.tx_nom", txtDesLarCli.getText()))
                    {
                        txtCodCli.setText(vcoCli.getValueAt(1));
                        txtDesLarCli.setText(vcoCli.getValueAt(3));
                    }
                    else
                    {
                        vcoCli.setCampoBusqueda(2);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                        {
                            txtCodCli.setText(vcoCli.getValueAt(1));
                            txtDesLarCli.setText(vcoCli.getValueAt(3));
                        }
                        else
                        {
                            txtDesLarCli.setText(strDesLarCli);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private void ocultaCol(int intCol)
    {
        tblDat.getColumnModel().getColumn(intCol).setWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setMaxWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setMinWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setPreferredWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setResizable(false);         

    }
    
    private void mostrarCol(int intCol, int tamCol)
    {
        tblDat.getColumnModel().getColumn(intCol).setWidth(tamCol);
        tblDat.getColumnModel().getColumn(intCol).setMaxWidth(tamCol);
        tblDat.getColumnModel().getColumn(intCol).setMinWidth(tamCol);
        tblDat.getColumnModel().getColumn(intCol).setPreferredWidth(tamCol);
        tblDat.getColumnModel().getColumn(intCol).setResizable(false);
    
    } 
    
    public void setEditable(boolean editable)
    {
        if (editable==true)
        {
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
        }
        else
        {
            objTblMod.setModoOperacion(objTblMod.INT_TBL_NO_EDI);
        }
    }
  
    /**
     * Esta funciï¿½n muestra un mensaje informativo al usuario. Se podrï¿½a utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg) 
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Esta funciï¿½n muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si y No. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    /**
     * Esta funciï¿½n muestra un mensaje de error al usuario. Se podrï¿½a utilizar
     * para mostrar al usuario un mensaje que indique que los datos no se grabaron
     * y que debe comunicar de este particular al administrador del sistema.
     */
    private void mostrarMsgErr(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * Esta clase crea un hilo que permite manipular la interface grï¿½fica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que estï¿½ ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podrï¿½a presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estarï¿½a informado en todo
     * momento de lo que ocurre. Si se desea hacer ï¿½sto es necesario utilizar ï¿½sta clase
     * ya que si no sï¿½lo se apreciarï¿½a los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarDeb())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sï¿½lo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }
  
    /**
     * Esta clase crea un hilo que permite manipular la interface grï¿½fica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que estï¿½ ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podrï¿½a presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estarï¿½a informado en todo
     * momento de lo que ocurre. Si se desea hacer ï¿½sto es necesario utilizar ï¿½sta clase
     * ya que si no sï¿½lo se apreciarï¿½a los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUIImp extends Thread
    {
        private int intIndFun;
        
        public ZafThreadGUIImp()
        {
            intIndFun=0;
        }
        
        public void run()
        {
            switch (intIndFun)
            {
                case 0: //Botï¿½n "Imprimir".
                    ///objTooBar.setEnabledImprimir(false);
//                    generarRpt(1);
                    ///objTooBar.setEnabledImprimir(true);
                    break;
                case 1: //Botï¿½n "Vista Preliminar".
                    ///objTooBar.setEnabledVistaPreliminar(false);
//                    generarRpt(2);
                    ///objTooBar.setEnabledVistaPreliminar(true);
                    break;
            }
            objThrGUIImp=null;
        }
        
        /**
         * Esta funciï¿½n establece el indice de la funciï¿½n a ejecutar. En la clase Thread
         * se pueden ejecutar diferentes funciones. Esta funciï¿½n sirve para determinar
         * la funciï¿½n que debe ejecutar el Thread.
         * @param indice El indice de la funciï¿½n a ejecutar.
         */
        public void setIndFunEje(int indice)
        {
            intIndFun=indice;
        }
    }
   
    protected String rtnNomUsrSis()
    {
	java.sql.Connection conUltRegDoc;
        java.sql.Statement stmUltRegDoc;
        java.sql.ResultSet rstUltRegDoc;
        String strSQL, strNomUsr="";
        int intAux=0;
        int codusr= objParSis.getCodigoUsuario();

        try
        {
               conUltRegDoc=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
               conUltRegDoc.setAutoCommit(false);
                    if (conUltRegDoc!=null)
                    {                        
                        stmUltRegDoc=conUltRegDoc.createStatement();
                        strSQL="";
                        strSQL+="SELECT co_usr, tx_usr, tx_pwd, tx_nom";
                        strSQL+=" FROM tbm_usr AS a1";
                        strSQL+=" WHERE a1.co_usr= " + codusr;
                        strSQL+=" AND a1.st_usrSis='S'";
                        strSQL+=" AND a1.st_reg='A'";
                        ///System.out.println("---Query para el mostrar usuarios del sistema es: " + strSQL);
                        rstUltRegDoc=stmUltRegDoc.executeQuery(strSQL);
                        
                        if (rstUltRegDoc.next())
                        {
                            strNomUsr = rstUltRegDoc.getString("tx_nom");
                        }
                        System.out.println("---El nombre del usuario --strNomUsr-- es: " + strNomUsr);
                        
                    }
                }
                catch (java.sql.SQLException e)
                {
                    objUti.mostrarMsgErr_F1(this, e);
                }
                catch (Exception e)
                {
                    objUti.mostrarMsgErr_F1(this, e);
                }  
        return strNomUsr;
    }

    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_LINEA:
                    strMsg="";
                    break;
                case INT_TBL_CODCLI:
                    strMsg="Código del cliente";
                    break;
                case INT_TBL_NOMCLI:
                    strMsg="Nombre del Cliente";
                    break;
                case INT_TBL_CODLOC:
                    strMsg="Codigo del Local";
                    break;    
                case INT_TBL_CODTIPDOC:
                    strMsg="Código de tipo de documento";
                    break;
                case INT_TBL_DESCORTIPDOC:
                    strMsg="Descripción corta del tipo de documento";
                    break;                                                             
                case INT_TBL_DESLARTIPDOC:
                    strMsg="Descripción larga del tipo de documento";
                    break;                                                            
                case INT_TBL_CODDOC:
                    strMsg="Código del documento";
                    break;
                case INT_TBL_CODREG:
                    strMsg="Código del registro";
                    break;
                case INT_TBL_NUMDOC:
                    strMsg="Número de documento";
                    break;
                case INT_TBL_FECDOC:
                    strMsg="Fecha del documento";
                    break;
                case INT_TBL_DIACRE:
                    strMsg="Dias de Credito";
                    break;
                case INT_TBL_FECVEN:
                    strMsg="Fecha de vencimiento";
                    break;                
                case INT_TBL_VALDOC:
                    strMsg="Valor del documentos";
                    break;
                case INT_TBL_VALPEN:
                    strMsg="Valor pendiente";
                    break;
                case INT_TBL_CODVEN:
                    strMsg="Código del Vendedor";
                    break;
                case INT_TBL_NOMVEN:
                    strMsg="Nombre del Vendedor";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
  
}
