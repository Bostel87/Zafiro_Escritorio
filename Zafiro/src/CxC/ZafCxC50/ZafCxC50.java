/*
 *
 * Created on 20 de agosto de 2005, 11:38 PM   
 */
package CxC.ZafCxC50;
  
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafUtil.ZafUtil;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.Vector;
import javax.swing.JOptionPane;
/** 
 *
 * @author  Javier Ayapata   
 * ALTA DE CLIENTES NUEVOS
 */
public class ZafCxC50 extends javax.swing.JInternalFrame 
{
    final int INT_TBL_LINEA    = 0; 
    final int INT_TBL_CHKALT   = 1;
    final int INT_TBL_CODCLI   = 2;
    final int INT_TBL_IDECLI   = 3;
    final int INT_TBL_NOMCLI   = 4;      
    final int INT_TBL_BUTCLI   = 5;      
    
    //Variables generales.
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod;
    private ZafThreadGUI objThrGUI;
    private Connection con;
    private String strAux;
    String strNomTable="";
    javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
    String strVersion=" v. 1.2 ";   //  VERSION DEL PROGRAMA  
    // Jose Marin 16/Dic/2013
    String strEstCliPrv="";    
    int intCodMnuMaeCli=0;
    /** Crea una nueva instancia de la clase ZafIndRpt. */
     public ZafCxC50(ZafParSis obj) 
    {
        initComponents();
        //Inicializar objetos.
        objParSis=obj;
        
        
        if(objParSis.getCodigoMenu()==1862){
            strEstCliPrv=" AND a1.st_cli='S'"; // Jose Marin 16/Dic/2013
            intCodMnuMaeCli=913;
        }else{
             strEstCliPrv=" AND a1.st_prv='S'";
             intCodMnuMaeCli=1053;
        }
        
        //Inicializar objetos.
        objUti=new ZafUtil();
      
    }
      
    
     public void Configura_ventana_consulta(){
           if (!configurarFrm())
            exitForm();
    }
    
   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butGua = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDat);

        panFil.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panFil);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butGua.setText("Guardar");
        butGua.setPreferredSize(new java.awt.Dimension(92, 23));
        butGua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGuaActionPerformed(evt);
            }
        });
        panBot.add(butGua);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        Configura_ventana_consulta();  
       
    }//GEN-LAST:event_formInternalFrameOpened

     
    
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acción de acuerdo a la etiqueta del botón ("Consultar" o "Detener").
        
   
       
        if (butCon.getText().equals("Consultar"))
        {
           
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
        }
        else
        {
           
        }
       
       
      
        
    }//GEN-LAST:event_butConActionPerformed

    
    
    
     
    private class ZafThreadGUI extends Thread
    {
        @Override
        public void run()
        {  
             boolean blnRes=false;
             butCon.setText("Detener");
             lblMsgSis.setText("Procesando datos...");
              pgrSis.setIndeterminate(true);
         
                if (cargarRegistro()){
                  
                   blnRes=true;
                 }
              
                if(blnRes==true){
                     lblMsgSis.setText("Listo");
                     pgrSis.setIndeterminate(false);
                     pgrSis.setValue(0);
                     butCon.setText("Consultar");
                 
                     
                }
                else{
                     lblMsgSis.setText("Error..");
                     pgrSis.setIndeterminate(false);
                     pgrSis.setValue(0);
                     butCon.setText("Consultar");
                }
 
 
            objThrGUI=null;
    }}
    
             
    
      
      
    private boolean cargarRegistro(){
        boolean blnRes=false;
        String strSQL="";
        try{
               con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos() );
               if (con!=null)
               {
               
                  
                /////// Jose Marin 16/Dic/2013
                //Validar si se presentan "Clientes por Empresa" ó "Clientes por Local".
                if (objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario()))
                {
                    //Armar la sentencia SQL.
                     strSQL="select a1.co_cli, a1.tx_ide, a1.tx_nom from tbm_cli  as a1 where a1.co_emp="+objParSis.getCodigoEmpresa()+" AND a1.st_reg='N'  "+strEstCliPrv+" order by a1.co_cli";
                }
                else
                {
                    //Armar la sentencia SQL.
                    strSQL="";
                    strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom";
                    strSQL+=" FROM tbm_cli AS a1";
                    strSQL+=" INNER JOIN tbr_cliLoc AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli)";
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                    strSQL+=" AND a2.co_loc=" + objParSis.getCodigoLocal();
                    strSQL+=strEstCliPrv;
                    strSQL+=" AND a1.st_reg='N'";
                    strSQL+=" ORDER BY a1.tx_nom";
                }
                ////////
                
                java.sql.Statement stm = con.createStatement();
                System.out.println("permisos: " + strSQL);
                java.sql.ResultSet rst = stm.executeQuery(strSQL);
                Vector vecData = new Vector();
                while(rst.next()){
                       java.util.Vector vecReg = new java.util.Vector();
                       vecReg.add(INT_TBL_LINEA, "");
                       vecReg.add(INT_TBL_CHKALT, false);
                       vecReg.add(INT_TBL_CODCLI, rst.getString("co_cli"));         
                       vecReg.add(INT_TBL_IDECLI, rst.getString("tx_ide"));
                       vecReg.add(INT_TBL_NOMCLI, rst.getString("tx_nom"));
                       vecReg.add(INT_TBL_BUTCLI,"...");
                       vecData.add(vecReg);   
                 }
                 objTblMod.setData(vecData);
                 tblDat .setModel(objTblMod);  
                       
               rst.close();
               rst=null;
               stm.close();
               stm=null;
               con.close();
               con=null;
               blnRes=true;
               
               }
        }
        catch (java.sql.SQLException e) { objUti.mostrarMsgErr_F1(this, e);   }
        catch (Exception e) {  objUti.mostrarMsgErr_F1(this, e);   }
       return blnRes;
    }
  
   
   
   
   
        
    
    
   
   
    
    
 
    
    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
       // javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (JOptionPane.showConfirmDialog(this,strMsg,strTit,JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE)==JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void butGuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGuaActionPerformed
        // TODO add your handling code here:
        
        guardarReg();
        
        
        butCon.doClick();
        
    }//GEN-LAST:event_butGuaActionPerformed

    
    
       /**
        * MODIFICADO EFLORESA 2012-07-27
        * AL HACER EL ALTA DE CLIENTES SE ESTABA REGISTRANDO EN USRING EN LUGAR DE USRMOD
        */ 
       private boolean guardarReg(){
        boolean blnRes=false;
        String sql="";
        try{
               con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos() );
               if (con!=null){
                  con.setAutoCommit(false);
                java.sql.Statement stm = con.createStatement();
                
                for(int i=0; i< tblDat.getRowCount();  i++) {
                    if(tblDat.getValueAt(i, INT_TBL_CHKALT).toString().equals("true")){
                   
                         /*sql="UPDATE tbm_cli SET st_reg='A', co_usring="+objParSis.getCodigoUsuario()+"" +
                                 ", fe_ultmod="+objParSis.getFuncionFechaHoraBaseDatos()+"  WHERE co_emp="+objParSis.getCodigoEmpresa()+"  " +
                             " AND co_cli="+tblDat.getValueAt(i, INT_TBL_CODCLI).toString();*/
                   
                         sql=" UPDATE tbm_cli "
                            + " SET st_reg='A', "
                            + " co_usrmod="+objParSis.getCodigoUsuario()+", "
                            + " fe_ultmod="+objParSis.getFuncionFechaHoraBaseDatos()+" "
                            + " WHERE co_emp="+objParSis.getCodigoEmpresa()+" "
                            + " AND co_cli="+tblDat.getValueAt(i, INT_TBL_CODCLI).toString();
                        stm.executeUpdate(sql);   
                      
                }}
               stm.close();
               stm=null;
               con.commit();
               con.close();
               con=null;
               blnRes=true;
        }}
        catch (java.sql.SQLException e) { objUti.mostrarMsgErr_F1(this, e);   }
        catch (Exception e) {  objUti.mostrarMsgErr_F1(this, e);   }
       return blnRes;
    }
  
   
   
    
    
    
    
    
    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butGua;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables
    
    
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Configurar JTable: Establecer el modelo.
            Vector vecCab=new Vector();    //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_LINEA,"");            
            vecCab.add(INT_TBL_CHKALT,"Alta.");
            vecCab.add(INT_TBL_CODCLI,"Cod.Cli.");            
            vecCab.add(INT_TBL_IDECLI,"Ide.Cli");
            vecCab.add(INT_TBL_NOMCLI,"Nom.Cli.");
            vecCab.add(INT_TBL_BUTCLI,"...");
            
            objTblMod=new Librerias.ZafTblUti.ZafTblMod.ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);   
            
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            ZafColNumerada zafColNumerada = new Librerias.ZafColNumerada.ZafColNumerada(tblDat,INT_TBL_LINEA);
            
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            
              //Tamaño de las celdas
            tcmAux.getColumn(INT_TBL_LINEA).setPreferredWidth(30);         
            tcmAux.getColumn(INT_TBL_CHKALT).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_CODCLI).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_IDECLI).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_NOMCLI).setPreferredWidth(400);
            tcmAux.getColumn(INT_TBL_BUTCLI).setPreferredWidth(30);
       
            //Configurar JTable: Establecer columnas editables.  
            Vector vecAux=new Vector();
            vecAux.add("" + INT_TBL_CHKALT);
            vecAux.add("" + INT_TBL_BUTCLI);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;   
            
            Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk objTblCelRenChk = new Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_CHKALT).setCellRenderer(objTblCelRenChk);
            Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk objTblCelEdiChk = new Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk();
            tcmAux.getColumn(INT_TBL_CHKALT).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                @Override
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt){
            
                }        
                @Override
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                      
                }
            });
            objTblCelRenChk=null;
            objTblCelEdiChk=null;
            
            Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut objTblCelRenBut=new Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut();
            tcmAux.getColumn(INT_TBL_BUTCLI).setCellRenderer(objTblCelRenBut);
            objTblCelRenBut=null;
            ButCot butCot = new ButCot(tblDat, INT_TBL_BUTCLI); //*****
            ZafTblEdi zafTblEdi = new Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi(tblDat);
            ZafTblFilCab zafTblFilCab = new ZafTblFilCab(tblDat);
            ZafTblOrd zafTblOrd = new ZafTblOrd(tblDat);
            ZafTblBus zafTblBus = new ZafTblBus(tblDat);
            
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            tblDat.getTableHeader().setReorderingAllowed(false);      
            
            objTblMod.setModoOperacion(ZafTblMod.INT_TBL_EDI);
            
            tcmAux=null;  
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + ""+ strVersion);    
            lblTit.setText(strAux);
          }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);  
        }
        return blnRes;
    }

  
    
    private class ButCot extends Librerias.ZafTableColBut.ZafTableColBut_uni{
        public ButCot(javax.swing.JTable tbl, int intIdx){
            super(tbl,intIdx, "Cotización.");
           
        }
        @Override
        public void butCLick() {
           int intCol = tblDat.getSelectedRow();
           String strCodCli = ( tblDat.getValueAt(intCol,  INT_TBL_CODCLI)==null?"":tblDat.getValueAt(intCol,  INT_TBL_CODCLI).toString());
           llamarVenCli(strCodCli);
        }
    }
    
    
    private void llamarVenCli(String strCodCli){
        Maestros.ZafMae07.ZafMae07 obj1 = new Maestros.ZafMae07.ZafMae07(objParSis, strCodCli, intCodMnuMaeCli);
	this.getParent().add(obj1,javax.swing.JLayeredPane.DEFAULT_LAYER);
        obj1.show();
        
    }
    
    
    public boolean cargarDriver(String driver)
    {
        boolean blnRes=true;
        try
        {
            Class.forName(driver);
        }
        catch (ClassNotFoundException e) 
        {
            blnRes=false;
           objUti.mostrarMsgErr_F1(this, e);  
        }
        return blnRes;
    }

   

    
}
