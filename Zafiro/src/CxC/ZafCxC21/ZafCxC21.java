/*
 * ZafCxC21.java
 *
 * Created on 16 de marzo del 2007,  13:00 pm
 * LISTADO DE CLIENTES CON CREDITO CERRADO POR RETENCIONES PENDIENTES
 * CREADO POR DARIO CARDENAS
 */
package CxC.ZafCxC21;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;
import java.util.ArrayList;

/**
 *
 * @author  Dario Cardenas
 */
public class ZafCxC21 extends javax.swing.JInternalFrame 
{
    /*Simbología:
     *  DAT: Datos
     *  CRE: Créditos/débitos
     *  CMR: Créditos/débitos - Movimiento del registro seleccionado
     *  PAG: Pagos realizados
     *  PMR: Pagos realizados - Movimiento del registro seleccionado
     **/
    //Constantes: Columnas del JTable: del Cliente
    final int INT_TBL_DAT_CLI_LIN=0;                        //Línea
    final int INT_TBL_DAT_CLI_COD_CLI=1;                    //Código del cliente.
    final int INT_TBL_DAT_CLI_IDE_CLI=2;                    //Identificación del cliente.
    final int INT_TBL_DAT_CLI_NOM_CLI=3;                    //Nombre del cliente.
    final int INT_TBL_DAT_CLI_SAL_CLI=4;                    //Saldo del cliente.
    
    
    //Constantes: Columnas del JTable: de las retenciones
    final int INT_TBL_DAT_LIN=0;                        //Línea.
    final int INT_TBL_DAT_COD_LOC=1;                    //Código del local.
    final int INT_TBL_DAT_TIP_DOC=2;                    //Tipo Documento.
    final int INT_TBL_DAT_NUM_DOC=3;                    //Número de documento.
    final int INT_TBL_DAT_FEC_DOC=4;                    //Fecha del documento.
    final int INT_TBL_DAT_FEC_VEN=5;                    //Fecha de vencimiento.
    final int INT_TBL_DAT_POR_RET=6;                    //Porcentaje de Retencion.
    final int INT_TBL_DAT_VAL_DOC=7;                    //Valor del documento.
    final int INT_TBL_DAT_VAL_ABO=8;                    //Valor por Abonar.
    final int INT_TBL_DAT_VAL_PND=9;                    //Valor por vencer.
    final int INT_TBL_DAT_COD_DOC=10;                   //Código del documento.
    final int INT_TBL_DAT_COD_REG=11;                   //Código del registro.

    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblFilCab objTblFilCab;
    private ZafTblMod objTblMod;
    private ZafTblMod objTblModCre;
    private ZafTblMod objTblModCmr;
    private ZafTblMod objTblModPag;
    private ZafTblMod objTblModPmr;
    private ZafThreadGUI objThrGUI;
    private ZafTblCelRenLbl objTblCelRenLbl;            //Render: Presentar JLabel en JTable.
    private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMenú en JTable.
    private ZafTblBus objTblBus;
    private ZafVenCon vcoCli;                           //Ventana de consulta.
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg;
    private Vector vecDatCre, vecCabCre;
    private Vector vecDatCmr, vecCabCmr;
    private Vector vecDatPag, vecCabPag;
    private Vector vecDatPmr, vecCabPmr;
    private boolean blnCon;                             //true: Continua la ejecución del hilo.
    private String strCodCli, strDesLarCli;             //Contenido del campo al obtener el foco.
    private java.util.Date datFecSer;                   //Fecha del servidor.
   
    /** Crea una nueva instancia de la clase ZafCxC14. */
    public ZafCxC21(ZafParSis obj) 
    {
        try
        {
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        optTod = new javax.swing.JRadioButton();
        optFil = new javax.swing.JRadioButton();
        panNomCli = new javax.swing.JPanel();
        lblNomCliDes = new javax.swing.JLabel();
        txtNomCliDes = new javax.swing.JTextField();
        lblNomCliHas = new javax.swing.JLabel();
        txtNomCliHas = new javax.swing.JTextField();
        panCreDeb = new javax.swing.JPanel();
        sppCreDeb = new javax.swing.JSplitPane();
        panCreDebReg = new javax.swing.JPanel();
        spnCreDeb = new javax.swing.JScrollPane();
        tblDatCli = new javax.swing.JTable();
        panCreDebMovReg = new javax.swing.JPanel();
        chkDatCliMosMovReg = new javax.swing.JCheckBox();
        spnCreDebMovReg = new javax.swing.JScrollPane();
        tblDatCliMovReg = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("T\u00edtulo de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("T\u00edtulo de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setLayout(null);

        optTod.setSelected(true);
        optTod.setText("Todos los clientes");
        bgrFil.add(optTod);
        optTod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optTodItemStateChanged(evt);
            }
        });

        panFil.add(optTod);
        optTod.setBounds(4, 4, 400, 20);

        optFil.setText("S\u00f3lo los clientes que cumplan el criterio seleccionado");
        bgrFil.add(optFil);
        panFil.add(optFil);
        optFil.setBounds(4, 24, 400, 20);

        panNomCli.setLayout(null);

        panNomCli.setBorder(new javax.swing.border.TitledBorder("Nombre de cliente"));
        lblNomCliDes.setText("Desde:");
        panNomCli.add(lblNomCliDes);
        lblNomCliDes.setBounds(12, 20, 44, 20);

        txtNomCliDes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomCliDesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomCliDesFocusLost(evt);
            }
        });

        panNomCli.add(txtNomCliDes);
        txtNomCliDes.setBounds(56, 20, 268, 20);

        lblNomCliHas.setText("Hasta:");
        panNomCli.add(lblNomCliHas);
        lblNomCliHas.setBounds(336, 20, 44, 20);

        txtNomCliHas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomCliHasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomCliHasFocusLost(evt);
            }
        });

        panNomCli.add(txtNomCliHas);
        txtNomCliHas.setBounds(380, 20, 268, 20);

        panFil.add(panNomCli);
        panNomCli.setBounds(24, 48, 660, 52);

        tabFrm.addTab("Filtro", panFil);

        panCreDeb.setLayout(new java.awt.BorderLayout());

        sppCreDeb.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        sppCreDeb.setResizeWeight(0.8);
        sppCreDeb.setOneTouchExpandable(true);
        panCreDebReg.setLayout(new java.awt.BorderLayout());

        panCreDebReg.setPreferredSize(new java.awt.Dimension(453, 403));
        spnCreDeb.setPreferredSize(new java.awt.Dimension(453, 403));
        tblDatCli.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnCreDeb.setViewportView(tblDatCli);

        panCreDebReg.add(spnCreDeb, java.awt.BorderLayout.NORTH);

        sppCreDeb.setTopComponent(panCreDebReg);

        panCreDebMovReg.setLayout(new java.awt.BorderLayout());

        panCreDebMovReg.setPreferredSize(new java.awt.Dimension(453, 310));
        chkDatCliMosMovReg.setText("Mostrar el movimiento de Retenciones del Cliente");
        chkDatCliMosMovReg.setPreferredSize(new java.awt.Dimension(269, 20));
        chkDatCliMosMovReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDatCliMosMovRegActionPerformed(evt);
            }
        });

        panCreDebMovReg.add(chkDatCliMosMovReg, java.awt.BorderLayout.NORTH);

        spnCreDebMovReg.setPreferredSize(new java.awt.Dimension(453, 310));
        tblDatCliMovReg.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnCreDebMovReg.setViewportView(tblDatCliMovReg);

        panCreDebMovReg.add(spnCreDebMovReg, java.awt.BorderLayout.CENTER);

        sppCreDeb.setBottomComponent(panCreDebMovReg);

        panCreDeb.add(sppCreDeb, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Reporte", panCreDeb);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });

        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });

        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setLayout(new java.awt.BorderLayout());

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        jPanel6.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        pgrSis.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        configurarFrm();
    }//GEN-LAST:event_formInternalFrameOpened

    private void chkDatCliMosMovRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDatCliMosMovRegActionPerformed
        ///////chk_valido//////
        if (chkDatCliMosMovReg.isSelected())
            cargarDatCliMovReg();
        else
            objTblModCmr.removeAllRows();
    }//GEN-LAST:event_chkDatCliMosMovRegActionPerformed

    private void txtNomCliHasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliHasFocusLost
        if (txtNomCliHas.getText().length()>0)
            optFil.setSelected(true);
    }//GEN-LAST:event_txtNomCliHasFocusLost

    private void txtNomCliDesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliDesFocusLost
        if (txtNomCliDes.getText().length()>0)
        {
            optFil.setSelected(true);
            if (txtNomCliHas.getText().length()==0)
                txtNomCliHas.setText(txtNomCliDes.getText());
        }
    }//GEN-LAST:event_txtNomCliDesFocusLost

    private void txtNomCliHasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliHasFocusGained
        txtNomCliHas.selectAll();
    }//GEN-LAST:event_txtNomCliHasFocusGained

    private void txtNomCliDesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliDesFocusGained
        txtNomCliDes.selectAll();
    }//GEN-LAST:event_txtNomCliDesFocusGained

    private void optTodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optTodItemStateChanged
        if (optTod.isSelected())
        {
            //txtCodCli.setText("");
            //txtDesLarCli.setText("");
            txtNomCliDes.setText("");
            txtNomCliHas.setText("");
        }
    }//GEN-LAST:event_optTodItemStateChanged

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
       //Realizar acción de acuerdo a la etiqueta del botón ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar"))
        {
            blnCon=true;
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
        }
        else
        {
            blnCon=false;
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JCheckBox chkDatCliMosMovReg;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblNomCliDes;
    private javax.swing.JLabel lblNomCliHas;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optFil;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panCreDeb;
    private javax.swing.JPanel panCreDebMovReg;
    private javax.swing.JPanel panCreDebReg;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panNomCli;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnCreDeb;
    private javax.swing.JScrollPane spnCreDebMovReg;
    private javax.swing.JSplitPane sppCreDeb;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDatCli;
    private javax.swing.JTable tblDatCliMovReg;
    private javax.swing.JTextField txtNomCliDes;
    private javax.swing.JTextField txtNomCliHas;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.2");
            lblTit.setText(strAux);
            //Configurar objetos.
            if (objParSis.getCodigoMenu()==515)
            {
                optTod.setText("Todos los proveedores");
                optFil.setText("Sólo los proveedores que cumplan el criterio seleccionado");
                ///lblCli.setText("Proveedor:");
                panNomCli.setBorder(new javax.swing.border.TitledBorder("Nombre de proveedor"));               
            }
            
            //Configurar los JTables.
            configurarTblDatCli();
            ///configurarTblCreDeb(); tblDatCliMovReg
            configurarTblDatCliMovReg();            
            //Obtener la fecha del servidor. Luego de un análisis se tomó la decisión de obtener la fecha del servidor al cargar el formulario y no cada vez que se efectúa una consulta.
            datFecSer=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
            if (datFecSer==null)
                datFecSer=new java.util.Date();
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función configura el JTable "tblDatCli".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDatCli()
    {
        boolean blnRes=true;
        try
        {
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(16);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_CLI_LIN,"");
            vecCab.add(INT_TBL_DAT_CLI_COD_CLI,"Cód.Cli.");
            vecCab.add(INT_TBL_DAT_CLI_IDE_CLI,"Identificación");
            vecCab.add(INT_TBL_DAT_CLI_NOM_CLI,"Cliente/Proveedor");
            vecCab.add(INT_TBL_DAT_CLI_SAL_CLI,"Saldo");
            //Configurar JTable: Establecer el modelo de la tabla.
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDatCli.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
            tblDatCli.setRowSelectionAllowed(true);
            tblDatCli.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDatCli);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDatCli.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDatCli.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_CLI_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_CLI_COD_CLI).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_CLI_IDE_CLI).setPreferredWidth(120);
            tcmAux.getColumn(INT_TBL_DAT_CLI_NOM_CLI).setPreferredWidth(360);
            tcmAux.getColumn(INT_TBL_DAT_CLI_SAL_CLI).setPreferredWidth(90);
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
//            tcmAux.getColumn(INT_TBL_DAT_BUT_CTA).setResizable(false);
            
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDatCli.getTableHeader().setReorderingAllowed(false);

            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDatCli.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Editor de búsqueda.
            objTblBus=new ZafTblBus(tblDatCli);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDatCli);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            tcmAux.getColumn(INT_TBL_DAT_CLI_COD_CLI).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_CLI_IDE_CLI).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_CLI_SAL_CLI).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
            //Configurar JTable: Establecer el ListSelectionListener.
            javax.swing.ListSelectionModel lsm=tblDatCli.getSelectionModel();
            lsm.addListSelectionListener(new ZafLisSelLisCre());
            
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    /**
     * Esta función configura el JTable "tblDatCliMovReg".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDatCliMovReg()
    {
        boolean blnRes=true;
        try
        {
            //Configurar JTable: Establecer el modelo.
            vecDatCmr=new Vector();    //Almacena los datos
            vecCabCmr=new Vector(15);  //Almacena las cabeceras
            vecCabCmr.clear();
            vecCabCmr.add(INT_TBL_DAT_LIN,"");
            vecCabCmr.add(INT_TBL_DAT_COD_LOC,"Cód.Loc.");
            vecCabCmr.add(INT_TBL_DAT_TIP_DOC,"Cód.Tip.Doc");
            vecCabCmr.add(INT_TBL_DAT_NUM_DOC,"Num.Doc.");
            vecCabCmr.add(INT_TBL_DAT_FEC_DOC,"Fec.Doc");
            vecCabCmr.add(INT_TBL_DAT_FEC_VEN,"Fec.Ven.");
            vecCabCmr.add(INT_TBL_DAT_POR_RET,"Por.Ret.");
            vecCabCmr.add(INT_TBL_DAT_VAL_DOC,"Val.Doc.");
            vecCabCmr.add(INT_TBL_DAT_VAL_ABO,"Val.Abo.");
            vecCabCmr.add(INT_TBL_DAT_VAL_PND,"Val.Pnd.");
            vecCabCmr.add(INT_TBL_DAT_COD_DOC,"Cod.Doc.");
            vecCabCmr.add(INT_TBL_DAT_COD_REG,"Cod.Reg.");

   
            //Configurar JTable: Establecer el modelo de la tabla.
            objTblModCmr=new ZafTblMod();
            objTblModCmr.setHeader(vecCabCmr);
            tblDatCliMovReg.setModel(objTblModCmr);
            //Configurar JTable: Establecer tipo de selección.
            tblDatCliMovReg.setRowSelectionAllowed(true);
            tblDatCliMovReg.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDatCliMovReg);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDatCliMovReg.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDatCliMovReg.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_TIP_DOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(55);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(110);
            tcmAux.getColumn(INT_TBL_DAT_FEC_VEN).setPreferredWidth(110);
            tcmAux.getColumn(INT_TBL_DAT_POR_RET).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_VAL_DOC).setPreferredWidth(65);
            tcmAux.getColumn(INT_TBL_DAT_VAL_ABO).setPreferredWidth(65);
            tcmAux.getColumn(INT_TBL_DAT_VAL_PND).setPreferredWidth(65);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(1);
            tcmAux.getColumn(INT_TBL_DAT_COD_REG).setPreferredWidth(1);

            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDatCliMovReg.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Ocultar columnas del sistema.
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setMaxWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setMinWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setResizable(false);
            
            tcmAux.getColumn(INT_TBL_DAT_COD_REG).setWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_REG).setMaxWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_REG).setMinWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_REG).setPreferredWidth(0);
            tcmAux.getColumn(INT_TBL_DAT_COD_REG).setResizable(false);
            
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            tblDatCliMovReg.getTableHeader().addMouseMotionListener(new ZafMouMotAdaCmr());
            //Configurar JTable: Editor de búsqueda.
            objTblBus=new ZafTblBus(tblDatCliMovReg);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDatCli);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_VAL_DOC).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VAL_ABO).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VAL_PND).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg()
    {
        int intCodEmp, intCodLoc, intNumTotReg, i;
        double dblSub, dblIva;
        boolean blnRes=true;
        try
        {
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            intCodEmp=objParSis.getCodigoEmpresa();
            intCodLoc=objParSis.getCodigoLocal();
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Obtener la condición.
                strAux="";
                
                if (txtNomCliDes.getText().length()>0 || txtNomCliHas.getText().length()>0)
                    strAux+=" AND ((LOWER(a4.tx_nom) BETWEEN '" + txtNomCliDes.getText().replaceAll("'", "''").toLowerCase() + "' AND '" + txtNomCliHas.getText().replaceAll("'", "''").toLowerCase() + "') OR LOWER(a4.tx_nom) LIKE '" + txtNomCliHas.getText().replaceAll("'", "''").toLowerCase() + "%')";
                
                //Obtener el número total de registros.
                strSQL="";
                strSQL+="SELECT COUNT(*)";
                strSQL+=" FROM (";
                strSQL+=" SELECT a4.co_cli as CODCLI, a4.tx_ide as IDE, a4.tx_nom as NOMBRE, sum(a2.mo_pag+a2.nd_abo) as SALDO";
                strSQL+=" FROM tbm_cabMovInv AS a1 ";
                strSQL+=" INNER JOIN tbm_pagMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) ";
                strSQL+=" INNER JOIN tbm_cabTipDoc AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                strSQL+=" INNER JOIN tbm_cli AS a4 ON (a1.co_emp=a4.co_emp AND a1.co_cli=a4.co_cli) ";
                strSQL+=" LEFT OUTER JOIN tbm_var AS a5 ON (a2.co_banChq=a5.co_reg) ";
                strSQL+=" WHERE a1.co_emp=" + intCodEmp;
                strSQL+=" AND a1.co_loc=" + intCodLoc;
                
                if (objParSis.getCodigoMenu()==326)
                    strSQL+=" AND a4.st_cli='S'";
                else
                    strSQL+=" AND a4.st_prv='S'";
                
                strSQL+=" AND a1.st_reg IN ('A','R','C','F') AND a2.st_reg IN ('A','C') AND (a2.mo_pag+a2.nd_abo)<>0";
                strSQL+=" AND a3.ne_mod in (1,2,3,4,5)  AND a1.co_tipdoc IN (1,51) AND a2.nd_porret IN(1,30,70)";
                ///strSQL+=" AND a2.fe_ven < current_date"; ///para retenciones vencidas//// AND a4.st_cieRetPen <>'N'
                strSQL+=" AND a4.st_cieRetPen <>'N'"; ///cuando es S es porque tiene retenciones pendientes y se le cerro el credito al cliente//// 
                strSQL+=strAux;
                strSQL+=" GROUP BY a4.co_cli, a4.tx_ide, a4.tx_nom";
                strSQL+=" ) AS b1";
                intNumTotReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intNumTotReg==-1)
                    return false;
                
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+=" SELECT a4.co_cli as CODCLI, a4.tx_ide as IDE, a4.tx_nom as NOMBRE, sum(a2.mo_pag+a2.nd_abo) as SALDO";
                strSQL+=" FROM tbm_cabMovInv AS a1 ";
                strSQL+=" INNER JOIN tbm_pagMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) ";
                strSQL+=" INNER JOIN tbm_cabTipDoc AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                strSQL+=" INNER JOIN tbm_cli AS a4 ON (a1.co_emp=a4.co_emp AND a1.co_cli=a4.co_cli) ";
                strSQL+=" LEFT OUTER JOIN tbm_var AS a5 ON (a2.co_banChq=a5.co_reg) ";
                strSQL+=" WHERE a1.co_emp=" + intCodEmp;
                strSQL+=" AND a1.co_loc=" + intCodLoc;
                
                if (objParSis.getCodigoMenu()==326)
                    strSQL+=" AND a4.st_cli='S'";
                else
                    strSQL+=" AND a4.st_prv='S'";
                
                strSQL+=" AND a1.st_reg IN ('A','R','C','F') AND a2.st_reg IN ('A','C') AND (a2.mo_pag+a2.nd_abo)<>0";
                strSQL+=" AND a3.ne_mod in (1,2,3,4,5)  AND a1.co_tipdoc IN (1,51) AND a2.nd_porret IN(1,30,70)";
                ///strSQL+=" AND a2.fe_ven < current_date"; ///para retenciones vencidas////
                strSQL+=" AND a4.st_cieRetPen <>'N'"; ///cuando es S es porque tiene retenciones pendientes y se le cerro el credito al cliente//// strSQL+=strAux;
                strSQL+=" GROUP BY a4.co_cli, a4.tx_ide, a4.tx_nom";
                strSQL+=" ORDER BY a4.co_cli ";
                System.out.println("Query para cargar Det de Clientes: " + strSQL);
               
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;
                while (rst.next())
                {
                    if (blnCon)
                    {
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_CLI_LIN,"");
                        vecReg.add(INT_TBL_DAT_CLI_COD_CLI,rst.getString("CODCLI"));
                        vecReg.add(INT_TBL_DAT_CLI_IDE_CLI,rst.getString("IDE"));
                        vecReg.add(INT_TBL_DAT_CLI_NOM_CLI,rst.getString("NOMBRE"));
                        vecReg.add(INT_TBL_DAT_CLI_SAL_CLI,rst.getString("SALDO"));
                        vecDat.add(vecReg);
                        i++;
                        pgrSis.setValue(i);
                    }
                    else
                    {
                        break;
                    }
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDatCli.setModel(objTblMod);
                vecDat.clear();
                if (intNumTotReg==tblDatCli.getRowCount())
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros.");
                else
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros pero sólo se procesaron " + tblDatCli.getRowCount() + ".");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite cargar el movimiento del crédito/débito seleccionado.
     * @return true: Si se pudo cargar el detalle del registro.
     * <BR>false: En el caso contrario.  //tblDatCliMovReg
     */
    private boolean cargarDatCliMovReg()
    {
        int intCodEmp, intCodLoc;
        boolean blnRes=true;
        try
        {
            if (tblDatCli.getSelectedRow()!=-1)
            {
//                objTooBar.setMenSis("Obteniendo datos...");
                con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
                if (con!=null)
                {
                    stm=con.createStatement();
                    intCodEmp=objParSis.getCodigoEmpresa();
                    intCodLoc=objParSis.getCodigoLocal();
                    
                    //Armar la sentencia SQL.
                    strSQL="";
                    strSQL+="SELECT a1.co_loc as CODLOC, a1.co_tipdoc, a3.tx_descor as TIPDOC, a1.ne_numDoc as NUMDOC, a1.fe_doc as FECDOC,";
                    strSQL+=" a2.fe_ven as FECVEN, round(a2.nd_porret,0) as PORRET, round(a2.mo_pag,2) as VALDOC, round(a2.nd_abo,2) as VALABO,";
                    strSQL+=" round(a2.mo_pag+a2.nd_abo,4) as VALPND, a1.co_doc as CODDOC, a2.co_reg as CODREG ";
                    strSQL+=" FROM tbm_cabMovInv AS a1";
                    strSQL+=" INNER JOIN tbm_pagMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) ";
                    strSQL+=" INNER JOIN tbm_cabTipDoc AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc) ";
                    strSQL+=" INNER JOIN tbm_cli AS a4 ON (a1.co_emp=a4.co_emp AND a1.co_cli=a4.co_cli) ";
                    strSQL+=" LEFT OUTER JOIN tbm_var AS a5 ON (a2.co_banChq=a5.co_reg) ";
                    strSQL+=" WHERE a1.co_emp=" + intCodEmp;
                    strSQL+=" AND a1.co_loc=" + intCodLoc;
                    strSQL+=" AND a1.co_cli=" + objTblMod.getValueAt(tblDatCli.getSelectedRow(), INT_TBL_DAT_CLI_COD_CLI);
                    strSQL+=" AND a1.st_reg IN ('A','R','C','F') AND a2.st_reg IN ('A','C')  AND a3.ne_mod in (1,2,3,4,5) ";
                    strSQL+=" AND a1.co_tipdoc IN (1,51) AND a2.nd_porret IN(1,30,70) AND (a2.mo_pag+a2.nd_abo)<>0 ";
                    ///strSQL+=" AND a2.fe_ven < current_date"; ///para retenciones vencidas////
                    strSQL+=" AND a4.st_cieRetPen <>'N'"; ///cuando es S es porque tiene retenciones pendientes y se le cerro el credito al cliente//// 
                    strSQL+=" ORDER BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc";
                    System.out.println("Query para Mostrar Retenciones Vencidas: " + strSQL);

                    rst=stm.executeQuery(strSQL);
                    //Limpiar vector de datos.
                    vecDatCmr.clear();

                    while (rst.next())
                    {
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_COD_LOC,rst.getString("CODLOC"));
                        vecReg.add(INT_TBL_DAT_TIP_DOC,rst.getString("TIPDOC"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC,rst.getString("NUMDOC"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC,rst.getString("FECDOC"));
                        vecReg.add(INT_TBL_DAT_FEC_VEN,rst.getString("FECVEN"));
                        vecReg.add(INT_TBL_DAT_POR_RET,rst.getString("PORRET"));
                        vecReg.add(INT_TBL_DAT_VAL_DOC,rst.getString("VALDOC"));                        
                        vecReg.add(INT_TBL_DAT_VAL_ABO,rst.getString("VALABO"));
                        vecReg.add(INT_TBL_DAT_VAL_PND,rst.getString("VALPND"));
                        vecReg.add(INT_TBL_DAT_COD_DOC,rst.getString("CODDOC"));
                        vecReg.add(INT_TBL_DAT_COD_REG,rst.getString("CODREG"));
                        vecDatCmr.add(vecReg);
                    }
                    rst.close();
                    stm.close();
                    con.close();
                    rst=null;
                    stm=null;
                    con=null;
                    //Asignar vectores al modelo.
                    objTblModCmr.setData(vecDatCmr);
                    tblDatCliMovReg.setModel(objTblModCmr);
                    vecDatCmr.clear();
//                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si y No. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    /**
     * Esta función muestra un mensaje de error al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos no se grabaron
     * y que debe comunicar de este particular al administrador del sistema.
     */
    private void mostrarMsgErr(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.ERROR_MESSAGE);
    }
 
    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podría presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaría informado en todo
     * momento de lo que ocurre. Si se desea hacer ésto es necesario utilizar ésta clase
     * ya que si no sólo se apreciaría los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            //Limpiar objetos.
            objTblModCmr.removeAllRows();
            ///objTblModCre.removeAllRows();
            
            if (!cargarDetReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sólo cuando haya datos.
            
            if (tblDatCli.getRowCount()>0)///tblCreDeb            
            {
                tabFrm.setSelectedIndex(1);
                tblDatCli.setRowSelectionInterval(0, 0);
                tblDatCli.requestFocus();
            }
            objThrGUI=null;
        }
    }
    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDatCli.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_CLI_LIN:
                    strMsg="";
                    break;
                case INT_TBL_DAT_CLI_COD_CLI:
                    strMsg="Código del cliente/proveedor";
                    break;
                case INT_TBL_DAT_CLI_IDE_CLI:
                    strMsg="Identificación del cliente/proveedor";
                    break;
                case INT_TBL_DAT_CLI_NOM_CLI:
                    strMsg="Nombre del cliente/proveedor";
                    break;
                case INT_TBL_DAT_CLI_SAL_CLI:
                    strMsg="Saldo del cliente/proveedor";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDatCli.getTableHeader().setToolTipText(strMsg);
        }
    }

    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAdaCmr extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDatCliMovReg.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_LIN:
                    strMsg="";
                    break;
                case INT_TBL_DAT_COD_LOC:
                    strMsg="Código del local";
                    break;
                case INT_TBL_DAT_TIP_DOC:
                    strMsg="Descripción corta del tipo de documento";
                    break;
                case INT_TBL_DAT_NUM_DOC:
                    strMsg="Número de documento";
                    break;
                case INT_TBL_DAT_FEC_DOC:
                    strMsg="Fecha del documento";
                    break;
                case INT_TBL_DAT_FEC_VEN:
                    strMsg="Fecha de vencimiento";
                    break;
                case INT_TBL_DAT_POR_RET:
                    strMsg="Porcentaje de Retencion";
                    break;
                case INT_TBL_DAT_VAL_DOC:
                    strMsg="Valor del documento";
                    break;
                case INT_TBL_DAT_VAL_ABO:
                    strMsg="Valor del abono";
                    break;
                case INT_TBL_DAT_VAL_PND:
                    strMsg="Valor Pendiente";
                    break;
                case INT_TBL_DAT_COD_DOC:
                    strMsg="Codigo del Documento";
                    break;
                case INT_TBL_DAT_COD_REG:
                    strMsg="Codigo del Registro";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDatCliMovReg.getTableHeader().setToolTipText(strMsg);
        }
    }        
    
    
    /**
     * Esta clase implementa la interface "ListSelectionListener" para determinar
     * cambios en la selección. Es decir, cada vez que se selecciona una fila
     * diferente en el JTable se ejecutará el "ListSelectionListener".
     */
    private class ZafLisSelLis implements javax.swing.event.ListSelectionListener
    {
        public void valueChanged(javax.swing.event.ListSelectionEvent e)
        {
            javax.swing.ListSelectionModel lsm=(javax.swing.ListSelectionModel)e.getSource();
            int intMax=lsm.getMaxSelectionIndex();
            String strAux;
            if (!lsm.isSelectionEmpty())
            {                
                cargarDetReg();
            }
        }
    }
    
    /**
     * Esta clase implementa la interface "ListSelectionListener" para determinar
     * cambios en la selección. Es decir, cada vez que se selecciona una fila
     * diferente en el JTable se ejecutará el "ListSelectionListener".
     */
    private class ZafLisSelLisCre implements javax.swing.event.ListSelectionListener
    {
        public void valueChanged(javax.swing.event.ListSelectionEvent e)
        {
            javax.swing.ListSelectionModel lsm=(javax.swing.ListSelectionModel)e.getSource();
            int intMax=lsm.getMaxSelectionIndex();
            String strAux;
            if (!lsm.isSelectionEmpty())
            {
                if (chkDatCliMosMovReg.isSelected())
                    cargarDatCliMovReg();
                else
                    objTblModCmr.removeAllRows();
            }
        }
    }
    
   
}