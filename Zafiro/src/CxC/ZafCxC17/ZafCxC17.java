/*
 * ZafCxC17.java
 * 
 *  Created on 22 de Diciembre de 2008, 11:25 PM
 * Listado de documentos por cobrar de acuerdo al vencimiento por(dia, semana, mes)
 * 
 */ 


package CxC.ZafCxC17;
import Librerias.ZafSelFec.ZafSelFec;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafToolBar.ZafToolBar;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import java.util.ArrayList;
import Librerias.ZafVenCon.ZafVenCon;
import Librerias.ZafTblUti.ZafTblTot.ZafTblTot;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafPopupMenu.ZafPopupMenu;

/**
 * 
 * @author  Lizbeth
 */

public class ZafCxC17 extends javax.swing.JInternalFrame 
{
/* Declaracion de Variables */
final int INT_TBL_LINEA =0; 
final int INT_TBL_CODEMP=1;
final int INT_TBL_CODCLI =2;
final int INT_TBL_NOMCLI =3;
final int INT_TBL_CODLOC=4;
final int INT_TBL_CODTIPDOC=5;
final int INT_TBL_DESCORTIPDOC=6;
final int INT_TBL_DESLARTIPDOC=7;
final int INT_TBL_CODDOC =8;
final int INT_TBL_CODREG =9;
final int INT_TBL_NUMDOC =10;
final int INT_TBL_FECDOC =11;
final int INT_TBL_FECVEN =12;
final int INT_TBL_PORRET =13;
final int INT_TBL_VALDOC =14;
final int INT_TBL_VALPEN =15;
final int INT_TBL_BUTFAC =16;
private ZafPopupMenu objPopMnu;
private java.util.Date datFecVen;        
javax.swing.JInternalFrame jfrThis;                                    
private ZafParSis objParSis;
private ZafUtil objUti;
private ZafTblBus objTblBus;             
private String strSQL, strAux;
private Vector vecDat, vecCab;                                                
private ZafColNumerada objColNum, objColNumValPnd;
private Vector vecTipCta, vecNatCta, vecEstReg, vecAux, vecAuxDat;
private boolean blnCon;
private String strAuxFec;
private ZafToolBar objToolBar;  
private java.util.Vector vecReg;
private ZafTblMod objTblMod;
private ZafThreadGUI objThrGUI;
private ZafThreadGUIImp objThrGUIImp;
private ZafTblTot objTblTot; 
private ZafTblOrd objTblOrd;  
private Statement stmCab, stm;
private ResultSet rstCab;
private Connection conCab;
private ZafMouMotAda objMouMotAda;                                    
private ZafTblCelRenLbl objTblCelRenLbl;
private ZafVenCon vcoLoc;
private String strCodLoc, strNomLoc;
private int intCodEmp, strDocTipDoc;
 private ZafSelFec objSelFec;
private double VAL_TOT_DOC;

private int NUMTOTREG=0;
private int intColTipDoc[];
private int intColTblTipDoc[];
private String Str_RegSel[]; 
public boolean blnAcepta = false; 
private ZafTblPopMnu objTblPopMnu;
/** Creates new form ZafCxC17 */
    public ZafCxC17(ZafParSis obj) 
    {
        try
        {
            initComponents();
            //Inicializar objetos.
            this.objParSis=obj;
            jfrThis = this;
            objParSis=(ZafParSis)obj.clone();   
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }

    public boolean acepta(){
        return blnAcepta;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        chkMosDatChqDep = new javax.swing.JCheckBox();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        panCon = new javax.swing.JPanel();
        chkMosDeb = new javax.swing.JCheckBox();
        lblLoc = new javax.swing.JLabel();
        txtCodLoc = new javax.swing.JTextField();
        txtDesLarLoc = new javax.swing.JTextField();
        butLoc = new javax.swing.JButton();
        chkMosRet = new javax.swing.JCheckBox();
        panDat = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        spnTot = new javax.swing.JScrollPane();
        tblTot = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        chkMosDatChqDep.setText("Mostrar sólo los Cheques que ya FUERON Depositados");
        chkMosDatChqDep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMosDatChqDepActionPerformed(evt);
            }
        });

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setLayout(new java.awt.BorderLayout());

        panCon.setPreferredSize(new java.awt.Dimension(100, 150));
        panCon.setLayout(null);

        chkMosDeb.setSelected(true);
        chkMosDeb.setText("Mostrar los débitos");
        chkMosDeb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMosDebActionPerformed(evt);
            }
        });
        panCon.add(chkMosDeb);
        chkMosDeb.setBounds(10, 40, 210, 20);

        lblLoc.setText("Local:"); // NOI18N
        lblLoc.setToolTipText("Beneficiario"); // NOI18N
        panCon.add(lblLoc);
        lblLoc.setBounds(20, 10, 55, 20);

        txtCodLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodLocActionPerformed(evt);
            }
        });
        txtCodLoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodLocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodLocFocusLost(evt);
            }
        });
        panCon.add(txtCodLoc);
        txtCodLoc.setBounds(80, 10, 60, 20);

        txtDesLarLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarLocActionPerformed(evt);
            }
        });
        txtDesLarLoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarLocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarLocFocusLost(evt);
            }
        });
        panCon.add(txtDesLarLoc);
        txtDesLarLoc.setBounds(140, 10, 220, 20);

        butLoc.setText("..."); // NOI18N
        butLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLocActionPerformed(evt);
            }
        });
        panCon.add(butLoc);
        butLoc.setBounds(360, 10, 20, 20);

        chkMosRet.setText("Mostrar las retenciones");
        chkMosRet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMosRetActionPerformed(evt);
            }
        });
        panCon.add(chkMosRet);
        chkMosRet.setBounds(370, 40, 200, 23);

        panFil.add(panCon, java.awt.BorderLayout.NORTH);

        panDat.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnDat.setViewportView(tblDat);
        tblDat.getAccessibleContext().setAccessibleParent(spnTot);

        panDat.add(spnDat, java.awt.BorderLayout.CENTER);

        spnTot.setPreferredSize(new java.awt.Dimension(452, 20));

        tblTot.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnTot.setViewportView(tblTot);

        panDat.add(spnTot, java.awt.BorderLayout.PAGE_END);

        panFil.add(panDat, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Filtro", panFil);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        // TODO add your handling code here:
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="¿Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                //Cerrar la conexiï¿½n si estï¿½ abierta.
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e)
        {
            dispose();
        } 
    }//GEN-LAST:event_exitForm

    
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed

        if (blnCon==true)
        {
           cargarDeb();
        }else{
          if (butCon.getText().equals("Consultar")) 
            {
                blnCon=true;
                if (objThrGUI==null)
                {
                    objThrGUI=new ZafThreadGUI();
                    objThrGUI.start();
                }
            }else{
                blnCon=false;
            }
        }  
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

        objUti=new ZafUtil();
        if (!configurarFrm())
          exitForm();
        vecDat.clear();
    }//GEN-LAST:event_formInternalFrameOpened

    private boolean cargarDeb()
    {
        int intCodEmp, intCodLoc, intNumTotReg, i;
        int intNumDia;
        String strFecSis, strFecIni;
        int intFecIni[];
        int intFecFin[];//para calcular los dias entre fechas
        double dblSub, dblIva, dblNumFacApl=0;
        String strEstAnaSolCre="", strFecDoc;
        boolean blnRes=true;
        try
        {
            pgrSis.setIndeterminate(true);
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
              conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
                if (conCab!=null)
                {
                    strAux="";
                    strAuxFec="";
                    stmCab=conCab.createStatement();
                    intCodEmp=objParSis.getCodigoEmpresa();
                    intCodLoc=objParSis.getCodigoLocal();
                     if (txtCodLoc.getText().length()>0)
                        strAux+=" AND a1.co_loc= " + txtCodLoc.getText();
                    
                    if(!(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())))
                    {
                        strAux+=" AND a1.co_loc=" + intCodLoc;  ///POR AHORA NO SE PROCESA POR LOCAL///
                    }
                    
                 // Condicion para filtro de Fechas/    
                 if (objSelFec.isCheckBoxChecked())
                {
                    switch (objSelFec.getTipoSeleccion())
                    {
                        case 0: //BÃ³squeda por rangos
                            strAuxFec+=" AND a2.fe_ven BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                            break;
                        case 1: //Fechas menores o iguales que "Hasta".
                            strAuxFec+=" AND a2.fe_ven<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                            break;
                        case 2: //Fechas mayores o iguales que "Desde".
                            strAuxFec+=" AND a2.fe_ven>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                            break;
                        case 3: //Todo.
                            break;
                    }
                }
                    strSQL="";
                    strSQL+=" SELECT co_forpag, tx_desforpag, a1.co_emp, a1.co_cli, a1.tx_nomcli, a1.co_loc, a1.co_tipDoc, a3.tx_desCor, a3.tx_desLar, a1.co_doc, a2.co_reg, a1.ne_numDoc,";
                    strSQL+=" a1.fe_doc, a2.fe_ven, a2.nd_porRet, a2.mo_pag, (a2.mo_pag+a2.nd_abo) AS nd_pen";
                    strSQL+=" FROM tbm_cabMovInv AS a1";
                    strSQL+=" INNER JOIN tbm_pagMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc)";
                    strSQL+=" INNER JOIN tbm_cabTipDoc AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                    strSQL+=" LEFT OUTER JOIN tbm_var AS a4 ON (a2.co_proChq=a4.co_reg)";
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                    strSQL+=" AND a1.st_reg IN ('A','R','C','F')";
                    strSQL+=" AND a2.st_reg IN ('A','C') ";
                    strSQL+=" AND a3.tx_natDoc='E'";
                    strSQL+=" AND  a3.ne_mod IN (1, 3)";
                   // strSQL+=" AND co_forpag in (14,39,13,45,2,19,3,4,40,28,24,16,47,29,8,18,36)";
                    if ((chkMosDeb.isSelected()))
                     {  
                     if (!(chkMosRet.isSelected()))
                        strSQL+=" AND (a2.mo_pag+a2.nd_abo)<0 AND (a2.nd_porRet IS NULL OR a2.nd_porRet=0)and (co_forpag is null or co_forpag in (14,39,13,45,2,19,3,4,40,28,24,16,47,29,8,18,36))"; 
                        else  
                        strSQL+=" AND (a2.mo_pag+a2.nd_abo)<0 AND (a2.mo_pag+a2.nd_abo)<0 and (co_forpag is null or co_forpag in (14,39,13,45,2,19,3,4,40,28,24,16,47,29,8,18,36)) ";
                       }   
                       if (!(chkMosDeb.isSelected()))
                        {  
                            if ((chkMosRet.isSelected()))
                            strSQL+=" AND (a2.nd_porRet<>0) and (co_forpag is null or co_forpag in (14,39,13,45,2,19,3,4,40,28,24,16,47,29,8,18,36)) ";   
                            else  
                            System.out.println("PAsa por segundo");   
                             strSQL+=" AND (a2.mo_pag+a2.nd_abo)<0";
                         }
                    if ((!(chkMosDeb.isSelected()))&& (!(chkMosRet.isSelected())) ) 
                    { 
                      strSQL+=" AND((a2.nd_porRet is NULL) and (a2.nd_porRet>0))";   
                     }
                    strSQL+=strAuxFec;
                    strSQL+=strAux;
                    strSQL+=" AND fe_venchq is null";
                    strSQL+=" ORDER BY a2.co_emp, a2.co_loc, a2.co_tipDoc, a2.co_doc, a2.co_reg";
                     System.out.println("cargarDeb() " +strSQL);
                    rstCab=stmCab.executeQuery(strSQL);
                    vecDat.clear();
                    lblMsgSis.setText("Cargando datos...");
                     i=0;
                    while (rstCab.next())
                    {
                         if (blnCon)
                    {
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_LINEA,"");
                        vecReg.add(INT_TBL_CODEMP,rstCab.getString("co_emp"));
                        vecReg.add(INT_TBL_CODCLI,rstCab.getString("co_cli"));
                        vecReg.add(INT_TBL_NOMCLI,rstCab.getString("tx_nomcli"));
                        vecReg.add(INT_TBL_CODLOC,rstCab.getString("co_loc"));
                        vecReg.add(INT_TBL_CODTIPDOC,rstCab.getString("co_tipdoc"));
                        vecReg.add(INT_TBL_DESCORTIPDOC,rstCab.getString("tx_descor"));
                        vecReg.add(INT_TBL_DESLARTIPDOC,rstCab.getString("tx_deslar"));
                        vecReg.add(INT_TBL_CODDOC,rstCab.getString("co_doc"));
                        vecReg.add(INT_TBL_CODREG,rstCab.getString("co_reg"));
                        vecReg.add(INT_TBL_NUMDOC,rstCab.getString("ne_numdoc"));
                        vecReg.add(INT_TBL_FECDOC,rstCab.getString("fe_doc"));
                        vecReg.add(INT_TBL_FECVEN,rstCab.getString("fe_ven"));
                        vecReg.add(INT_TBL_PORRET,rstCab.getString("nd_porret"));
                        vecReg.add(INT_TBL_VALDOC,rstCab.getString("mo_pag"));
                        vecReg.add(INT_TBL_VALPEN,rstCab.getString("nd_pen"));
                        vecReg.add(INT_TBL_BUTFAC, "");
                        vecDat.add(vecReg);
                        i++;
                    }    
                    else
                    {
                        break;
                    }    
                    }
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                    //Asignar vectores al modelo.
                    objTblMod.setData(vecDat);
                    tblDat.setModel(objTblMod);
                    vecDat.clear();
               //Calcular totales.
                objTblTot.calcularTotales();
                     if (blnCon)
                    lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");
                else
                    lblMsgSis.setText("Interrupción del usuario. Sólo se procesaron " + tblDat.getRowCount() + " registros.");
                    butCon.setText("Consultar");
                    pgrSis.setIndeterminate(false); 
                }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private void chkMosDebActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMosDebActionPerformed
 if (!(chkMosDeb.isSelected()))
        {
        cargarDeb();
        }
}//GEN-LAST:event_chkMosDebActionPerformed

    private void chkMosDatChqDepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMosDatChqDepActionPerformed

}//GEN-LAST:event_chkMosDatChqDepActionPerformed

private void txtCodLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodLocActionPerformed
txtCodLoc.transferFocus();
}//GEN-LAST:event_txtCodLocActionPerformed

private void txtCodLocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodLocFocusGained
// TODO add your handling code here:
        strCodLoc=txtCodLoc.getText();
        txtCodLoc.selectAll();
}//GEN-LAST:event_txtCodLocFocusGained

private void txtCodLocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodLocFocusLost
// TODO add your handling code here:
        if (txtCodLoc.isEditable())
        {
            //Validar el contenido de la celda sólo si ha cambiado.
            if (!txtCodLoc.getText().equalsIgnoreCase(strCodLoc))
            {
                if (txtCodLoc.getText().equals(""))
                {
                    txtCodLoc.setText("");
                    txtDesLarLoc.setText("");
                }
                else
                {
                    mostrarVenConLoc(1);
                }
            }
            else
                txtCodLoc.setText(strCodLoc);
        }
}//GEN-LAST:event_txtCodLocFocusLost


private void txtDesLarLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarLocActionPerformed
// TODO add your handling code here:
        txtDesLarLoc.transferFocus();
}//GEN-LAST:event_txtDesLarLocActionPerformed

private void txtDesLarLocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarLocFocusGained
// TODO add your handling code here:
        strNomLoc=txtDesLarLoc.getText();
        txtDesLarLoc.selectAll();
}//GEN-LAST:event_txtDesLarLocFocusGained

  /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConLoc(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoLoc.setCampoBusqueda(1);
                    vcoLoc.show();
                    if (vcoLoc.getSelectedButton()==vcoLoc.INT_BUT_ACE)
                    {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                    }
                    
                    break;
                case 1: //Búsqueda directa por "Código".
                    if (vcoLoc.buscar("a1.co_loc", txtCodLoc.getText()))
                    {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                    }
                    else
                    {
                        vcoLoc.setCampoBusqueda(0);
                        vcoLoc.setCriterio1(11);
                        vcoLoc.cargarDatos();
                        vcoLoc.show();
                        if (vcoLoc.getSelectedButton()==vcoLoc.INT_BUT_ACE)
                        {
                            txtCodLoc.setText(vcoLoc.getValueAt(1));
                            txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                        }
                        else
                        {
                            txtCodLoc.setText(strCodLoc);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Nombre".
                    if (vcoLoc.buscar("a1.tx_nom", txtDesLarLoc.getText()))
                    {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                    }
                    else
                    {
                        vcoLoc.setCampoBusqueda(1);
                        vcoLoc.setCriterio1(11);
                        vcoLoc.cargarDatos();
                        vcoLoc.show();
                        if (vcoLoc.getSelectedButton()==vcoLoc.INT_BUT_ACE)
                        {
                            txtCodLoc.setText(vcoLoc.getValueAt(1));
                            txtDesLarLoc.setText(vcoLoc.getValueAt(2));
                        }
                        else
                        {
                            txtDesLarLoc.setText(strNomLoc);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
private void txtDesLarLocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarLocFocusLost
// TODO add your handling code here:
        if (txtDesLarLoc.isEditable())
        {
            //Validar el contenido de la celda sólo si ha cambiado.
            if (!txtDesLarLoc.getText().equalsIgnoreCase(strNomLoc))
            {
                if (txtDesLarLoc.getText().equals(""))
                {
                    txtCodLoc.setText("");
                    txtDesLarLoc.setText("");
                }
                else
                {
                    mostrarVenConLoc(2);
                }
            }
            else
                txtDesLarLoc.setText(strNomLoc);
        }
}//GEN-LAST:event_txtDesLarLocFocusLost

private void butLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLocActionPerformed
mostrarVenConLoc(0);
}//GEN-LAST:event_butLocActionPerformed

private void chkMosRetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMosRetActionPerformed

    if(chkMosRet.isSelected())
        mostrarCol(INT_TBL_PORRET, 40);
    else
        ocultaCol(INT_TBL_PORRET);//1
    
    cargarDeb();
}//GEN-LAST:event_chkMosRetActionPerformed
    /** Cerrar la aplicaciï¿½n. */
    private void exitForm() {
        dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butLoc;
    private javax.swing.JCheckBox chkMosDatChqDep;
    private javax.swing.JCheckBox chkMosDeb;
    private javax.swing.JCheckBox chkMosRet;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblLoc;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panCon;
    private javax.swing.JPanel panDat;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JScrollPane spnTot;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblTot;
    private javax.swing.JTextField txtCodLoc;
    private javax.swing.JTextField txtDesLarLoc;
    // End of variables declaration//GEN-END:variables
  
    
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        int intCodUsr = objParSis.getCodigoUsuario();
        int intCodEmp = objParSis.getCodigoEmpresa();
        int intCodMnu = objParSis.getCodigoMenu();
        int intFilSel, intColSel, intNumFacApl;
        try
        {
            objSelFec=new ZafSelFec();
            objSelFec.setTitulo("Fecha de Vencimiento");
            objSelFec.setCheckBoxChecked(false);
            panCon.add(objSelFec);
            objSelFec.setBounds(20,65, 472, 72); 
            objSelFec.setCheckBoxChecked(true);
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu(); 
            //Configurar JTable: Establecer el modelo.//
            this.setTitle(objParSis.getNombreMenu()+"v 0.1.3");
            lblTit.setText(objParSis.getNombreMenu());
            //txtCodLoc.setBackground(objParSis.getColorCamposObligatorios());
            //txtDesLarLoc.setBackground(objParSis.getColorCamposObligatorios());
            vecDat=new Vector();           
            vecCab=new Vector(25);    
            vecCab.clear();
            vecCab.add(INT_TBL_LINEA,"");
            vecCab.add(INT_TBL_CODEMP,"Cod.Emp.");
	    vecCab.add(INT_TBL_CODCLI,"Cod.Cli.");
	    vecCab.add(INT_TBL_NOMCLI,"Nom.Cli");
	    vecCab.add(INT_TBL_CODLOC,"Cod.Loc");
	    vecCab.add(INT_TBL_CODTIPDOC,"Cod.Tip.Doc");
	    vecCab.add(INT_TBL_DESCORTIPDOC,"Tip.Doc.");
	    vecCab.add(INT_TBL_DESLARTIPDOC,"Tipo de Documento");
	    vecCab.add(INT_TBL_CODDOC,"Cod.Doc.");
	    vecCab.add(INT_TBL_CODREG,"Cod.Reg.");
            vecCab.add(INT_TBL_NUMDOC,"Nùm.Doc.");
	    vecCab.add(INT_TBL_FECDOC,"Fec.Doc.");
	    vecCab.add(INT_TBL_FECVEN,"Fec.Ven.");
	    vecCab.add(INT_TBL_PORRET,"%Ret.");
	    vecCab.add(INT_TBL_VALDOC,"Val.Doc.");    
            vecCab.add(INT_TBL_VALPEN,"Val.Pen."); 
            vecCab.add(INT_TBL_BUTFAC,"Fac.");
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            /*Configuracion de Ventanas de consulta*/            
            configurarVenConLoc();   
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de seleccion.
            tblDat.setRowSelectionAllowed(true);            
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            objColNum=new ZafColNumerada(tblDat,INT_TBL_LINEA);
//          objTblPopMnu=new ZafTblPopMnu(tblDat);
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);       
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            //Configurar ZafTblMod: Establecer las columnas que el modelo debe almacenar antes de eliminar una fila.         
            tblDat.getColumnModel().getColumn(INT_TBL_LINEA).setPreferredWidth(20);//0 
            tblDat.getColumnModel().getColumn(INT_TBL_CODEMP).setPreferredWidth(20);//1
            tblDat.getColumnModel().getColumn(INT_TBL_CODCLI).setPreferredWidth(40);//1
            tblDat.getColumnModel().getColumn(INT_TBL_NOMCLI).setPreferredWidth(150);//2
            tblDat.getColumnModel().getColumn(INT_TBL_CODLOC).setPreferredWidth(26);//3
            tblDat.getColumnModel().getColumn(INT_TBL_CODTIPDOC).setPreferredWidth(26);//4
            tblDat.getColumnModel().getColumn(INT_TBL_DESCORTIPDOC).setPreferredWidth(60);//5
            tblDat.getColumnModel().getColumn(INT_TBL_DESLARTIPDOC).setPreferredWidth(30);//6
            tblDat.getColumnModel().getColumn(INT_TBL_CODDOC).setPreferredWidth(26);//7
            tblDat.getColumnModel().getColumn(INT_TBL_CODREG).setPreferredWidth(26);//8            
            tblDat.getColumnModel().getColumn(INT_TBL_NUMDOC).setPreferredWidth(45);//9
            tblDat.getColumnModel().getColumn(INT_TBL_FECDOC).setPreferredWidth(75);//10           
            tblDat.getColumnModel().getColumn(INT_TBL_FECVEN).setPreferredWidth(75);//11
            tblDat.getColumnModel().getColumn(INT_TBL_PORRET).setPreferredWidth(40);//12
            tblDat.getColumnModel().getColumn(INT_TBL_VALDOC).setPreferredWidth(80);//13
            tblDat.getColumnModel().getColumn(INT_TBL_VALPEN).setPreferredWidth(80);//14
            tblDat.getColumnModel().getColumn(INT_TBL_BUTFAC).setPreferredWidth(30);//15
           
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            
            //Configurar JTable: Establecer Ocultas las columnas.
            ocultaCol(INT_TBL_CODTIPDOC);
            ocultaCol(INT_TBL_CODDOC);
            ocultaCol(INT_TBL_PORRET);
            ocultaCol(INT_TBL_FECDOC);
            ocultaCol(INT_TBL_CODEMP);
            ocultaCol(INT_TBL_CODREG);
            //para hacer editable las celdas
            vecAux=new Vector();
            vecAuxDat=new Vector();
            vecAux.add("" + INT_TBL_BUTFAC);///12
            objTblMod.setColumnasEditables(vecAux);
            vecAuxDat = vecAux;
            vecAux=null;
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
//          Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tblDat.getColumnModel().getColumn(INT_TBL_VALPEN).setResizable(false);
            //Configurar JTable: Editor de bï¿½squeda.
            objTblBus=new ZafTblBus(tblDat);
            
            ///renderizador para alinear a la izquierda los datos de las columnas///
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.LEFT);
            tblDat.getColumnModel().getColumn(INT_TBL_NOMCLI).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_CODCLI).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut objTblCelRenBut=new Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut();
            tcmAux.getColumn(INT_TBL_BUTFAC).setCellRenderer(objTblCelRenBut);
            objTblCelRenBut=null;
            new ButBod(tblDat, INT_TBL_BUTFAC);   //*****
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            ///renderizador para alinear a la derercha y en formato numerico decimal de las columnas///
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tblDat.getColumnModel().getColumn(INT_TBL_PORRET).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_VALDOC).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_VALPEN).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Establecer la clase que controla el ordenamiento.
            objTblOrd=new ZafTblOrd(tblDat);
            //Configurar JTable: Establecer relación entre el JTable de datos y JTable de totales.
            int intCol[]={INT_TBL_VALDOC, INT_TBL_VALPEN};
            objTblTot=new ZafTblTot(spnDat, spnTot, tblDat, tblTot, intCol);
            
            
            
             objTblPopMnu.addTblPopMnuListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTblPopMnuAdapter()
	    {
                 public void afterClick(Librerias.ZafTblUti.ZafTblEvt.ZafTblPopMnuEvent evt) 
                {   
                    System.out.println("---despues afterClick---CLICK PARA ELIMINAR UN REGISTRO INSERTADO---");
                    //objTblPopMnu.
                    if (objTblPopMnu.isClickEliminarFila())
                    {
                        System.out.println("---if en funcion isClickEliminraFila()---");
                    }                    
                }
            });
 
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean configurarVenConLoc()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_loc");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("492");
            /*Query mejorado para consultar LOCALES filtrado por local y empresa*/            
            //Armar la sentencia SQL.            
            if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario()))
            {
                //Armar la sentencia SQL. camposObligatorios
                strSQL="";
                strSQL+="SELECT a1.co_loc, a1.tx_nom";
                strSQL+=" FROM tbm_loc AS a1";
                if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                    strSQL+=" WHERE a1.co_emp IN (1,2,3,4)";
                else
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.st_reg IN ('A', 'P')";
                strSQL+=" ORDER BY a1.co_emp, a1.co_loc";
                System.out.println("---QUERY PARA CONLOC--admin--: " + strSQL);
            }
            else
            {
                strSQL="";
                strSQL="";
                strSQL+="SELECT a1.co_loc, a1.tx_nom";
                strSQL+=" FROM tbm_loc AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();
                strSQL+=" AND a1.st_reg IN ('A', 'P')";
                strSQL+=" ORDER BY a1.co_emp, a1.co_loc";
                System.out.println("---QUERY PARA CONLOC POR LOCAL---: " + strSQL);
            }
            vcoLoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de locales", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoLoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    private void ocultaCol(int intCol)
    {
        tblDat.getColumnModel().getColumn(intCol).setWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setMaxWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setMinWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setPreferredWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setResizable(false);         

    }
    
    private void mostrarCol(int intCol, int tamCol)
    {
        tblDat.getColumnModel().getColumn(intCol).setWidth(tamCol);
        tblDat.getColumnModel().getColumn(intCol).setMaxWidth(tamCol);
        tblDat.getColumnModel().getColumn(intCol).setMinWidth(tamCol);
        tblDat.getColumnModel().getColumn(intCol).setPreferredWidth(tamCol);
        tblDat.getColumnModel().getColumn(intCol).setResizable(false);
    } 
    
    public void setEditable(boolean editable)
    {
        if (editable==true)
        {
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
        }
        else
        {
            objTblMod.setModoOperacion(objTblMod.INT_TBL_NO_EDI);
        }
    }
    
    /**
     * Esta funciï¿½n muestra un mensaje informativo al usuario. Se podrï¿½a utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg) 
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    } 
    
    
    /**
     * Esta funciï¿½n muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si y No. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    
    
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta funciï¿½n muestra un mensaje de error al usuario. Se podrï¿½a utilizar
     * para mostrar al usuario un mensaje que indique que los datos no se grabaron
     * y que debe comunicar de este particular al administrador del sistema.
     */
    private void mostrarMsgErr(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    
    
    /**
     * Esta clase crea un hilo que permite manipular la interface grï¿½fica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que estï¿½ ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podrï¿½a presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estarï¿½a informado en todo
     * momento de lo que ocurre. Si se desea hacer ï¿½sto es necesario utilizar ï¿½sta clase
     * ya que si no sï¿½lo se apreciarï¿½a los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarDeb())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sï¿½lo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(0);
                ///tblDat.setRowSelectionInterval(0, 0);
                ///tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }
  
    /**
     * Esta clase crea un hilo que permite manipular la interface grï¿½fica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que estï¿½ ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podrï¿½a presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estarï¿½a informado en todo
     * momento de lo que ocurre. Si se desea hacer ï¿½sto es necesario utilizar ï¿½sta clase
     * ya que si no sï¿½lo se apreciarï¿½a los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUIImp extends Thread
    {
        private int intIndFun;
        
        public ZafThreadGUIImp()
        {
            intIndFun=0;
        }
        
        public void run()
        {
            switch (intIndFun)
            {
                case 0: //Botï¿½n "Imprimir".
                    ///objTooBar.setEnabledImprimir(false);
//                    generarRpt(1);
                    ///objTooBar.setEnabledImprimir(true);
                    break;
                case 1: //Botï¿½n "Vista Preliminar".
                    ///objTooBar.setEnabledVistaPreliminar(false);
//                    generarRpt(2);
                    ///objTooBar.setEnabledVistaPreliminar(true);
                    break;
            }
            objThrGUIImp=null;
        }
        
        /**
         * Esta funciï¿½n establece el indice de la funciï¿½n a ejecutar. En la clase Thread
         * se pueden ejecutar diferentes funciones. Esta funciï¿½n sirve para determinar
         * la funciï¿½n que debe ejecutar el Thread.
         * @param indice El indice de la funciï¿½n a ejecutar.
         */
        public void setIndFunEje(int indice)
        {
            intIndFun=indice;
        }
    }
    
    protected String rtnNomUsrSis()
    {
	java.sql.Connection conUltRegDoc;
        java.sql.Statement stmUltRegDoc;
        java.sql.ResultSet rstUltRegDoc;
        String strSQL, strNomUsr="";
        int intAux=0;
        int codusr= objParSis.getCodigoUsuario();
        try
        {
               conUltRegDoc=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
               conUltRegDoc.setAutoCommit(false);
                    if (conUltRegDoc!=null)
                    {                        
                        stmUltRegDoc=conUltRegDoc.createStatement();
                        strSQL="";
                        strSQL+="SELECT co_usr, tx_usr, tx_pwd, tx_nom";
                        strSQL+=" FROM tbm_usr AS a1";
                        strSQL+=" WHERE a1.co_usr= " + codusr;
                        strSQL+=" AND a1.st_usrSis='S'";
                        strSQL+=" AND a1.st_reg='A'";
                        ///System.out.println("---Query para el mostrar usuarios del sistema es: " + strSQL);
                        rstUltRegDoc=stmUltRegDoc.executeQuery(strSQL);
                        if (rstUltRegDoc.next())
                        {
                            strNomUsr = rstUltRegDoc.getString("tx_nom");
                        }
                        System.out.println("---El nombre del usuario --strNomUsr-- es: " + strNomUsr);
                    }
                }
                catch (java.sql.SQLException e)
                {
                    objUti.mostrarMsgErr_F1(this, e);
                }
                catch (Exception e)
                {
                    objUti.mostrarMsgErr_F1(this, e);
                }  
        return strNomUsr;
    }
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_LINEA:
                    strMsg="";
                    break;
               case INT_TBL_CODEMP:
                   strMsg="Código de empresa";
                    break;
                case INT_TBL_CODCLI:
                    strMsg="Código del cliente";
                    break;
                case INT_TBL_NOMCLI:
                    strMsg="Nombre del Cliente";
                    break;
                case INT_TBL_CODLOC:
                    strMsg="Codigo del Local";
                    break;    
                case INT_TBL_CODTIPDOC:
                    strMsg="Código de tipo de documento";
                    break;
                case INT_TBL_DESCORTIPDOC:
                    strMsg="Descripción corta del tipo de documento";
                    break;                                                             
                case INT_TBL_DESLARTIPDOC:
                    strMsg="Descripción larga del tipo de documento";
                    break;                                                            
                case INT_TBL_CODDOC:
                    strMsg="Código del documento";
                    break;
                case INT_TBL_CODREG:
                    strMsg="Código del registro";
                    break;
                case INT_TBL_NUMDOC:
                    strMsg="Número de documento";
                    break;
                case INT_TBL_FECDOC:
                    strMsg="Fecha del documento";
                    break;
                case INT_TBL_FECVEN:
                    strMsg="Fecha de vencimiento";
                    break;
                case INT_TBL_PORRET:
                    strMsg="Porcentaje de retención";
                    break;
                case INT_TBL_VALDOC:
                    strMsg="Valor del documentos";
                    break;
                case INT_TBL_VALPEN:
                    strMsg="Valor pendiente";
                    break;
                case INT_TBL_BUTFAC:
                    strMsg="Ver factura";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
   private class ButBod extends Librerias.ZafTableColBut.ZafTableColBut_uni
{
    public ButBod(javax.swing.JTable tbl, int intIdx){
        super(tbl,intIdx, "Ver Factura Comercial.");
    }
    public void butCLick() {
     int intCol = tblDat.getSelectedRow();
    int strDocTipDoc = Integer.parseInt( (tblDat.getValueAt(intCol,  INT_TBL_CODTIPDOC  )==null?"0":tblDat.getValueAt(intCol,  INT_TBL_CODTIPDOC  ).toString()) );
        if(strDocTipDoc==1 )
        {
         System.out.println("strDocTipDoc= "+strDocTipDoc);   
          llamarVentanaFac(intCol);  
        }
         if(strDocTipDoc==40 )
         {
        llamarVentanaDeb(intCol);  
         }
         if(strDocTipDoc==51)
         {    
         llamarVentanaCre(intCol);
         }
         else
      if((strDocTipDoc!=28 )&&(strDocTipDoc!=1)&&(strDocTipDoc!=40))
      {
        mostrarMsgInf("<HTML><No se puede visualizar el documento</HTML>");
      }
    }
} 

   
   private void llamarVentanaFac(int intCol){
     int intCodEmp = Integer.parseInt( (tblDat.getValueAt(intCol,  INT_TBL_CODEMP  )==null?"0":tblDat.getValueAt(intCol,  INT_TBL_CODEMP  ).toString()) );
     String strCocLoc = (tblDat.getValueAt(intCol,  INT_TBL_CODLOC  )==null?"0":tblDat.getValueAt(intCol,  INT_TBL_CODLOC  ).toString());
     String strDocTipDoc = ( tblDat.getValueAt(intCol,  INT_TBL_CODTIPDOC )==null?"0":tblDat.getValueAt(intCol,  INT_TBL_CODTIPDOC  ).toString());
     String strCocDoc =  (tblDat.getValueAt(intCol,  INT_TBL_CODDOC )==null?"0":tblDat.getValueAt(intCol,  INT_TBL_CODDOC ).toString());
     System.out.println("intCodEmp="+intCodEmp);
     System.out.println("strCocLoc="+strCocLoc);
     System.out.println("strDocTipDoc="+strDocTipDoc);
     System.out.println("strCocDoc="+strCocDoc);
     CxC.ZafCxC17.ZafCxC17_fac obj = new CxC .ZafCxC17.ZafCxC17_fac(javax.swing.JOptionPane.getFrameForComponent(this), false, objParSis, intCodEmp, strCocLoc, strDocTipDoc, strCocDoc);
     obj.show();  
}
   
   private void llamarVentanaDeb(int intCol){
     int intCodEmp = Integer.parseInt( (tblDat.getValueAt(intCol,  INT_TBL_CODEMP  )==null?"0":tblDat.getValueAt(intCol,  INT_TBL_CODEMP  ).toString()) );
     String strCocLoc = (tblDat.getValueAt(intCol,  INT_TBL_CODLOC  )==null?"0":tblDat.getValueAt(intCol,  INT_TBL_CODLOC  ).toString());
     String strDocTipDoc = ( tblDat.getValueAt(intCol,  INT_TBL_CODTIPDOC )==null?"0":tblDat.getValueAt(intCol,  INT_TBL_CODTIPDOC  ).toString());
     String strCocDoc =  (tblDat.getValueAt(intCol,  INT_TBL_CODDOC )==null?"0":tblDat.getValueAt(intCol,  INT_TBL_CODDOC ).toString());
     System.out.println("intCodEmp="+intCodEmp);
     System.out.println("strCocLoc="+strCocLoc);
     System.out.println("strDocTipDoc="+strDocTipDoc);
     System.out.println("strCocDoc="+strCocDoc);
     CxC.ZafCxC17.ZafCxC17_Deb obj = new CxC .ZafCxC17.ZafCxC17_Deb(javax.swing.JOptionPane.getFrameForComponent(this), false, objParSis, intCodEmp, strCocLoc, strDocTipDoc, strCocDoc);
     obj.show();  
}   
    private void llamarVentanaCre(int intCol){
     int intCodEmp = Integer.parseInt( (tblDat.getValueAt(intCol,  INT_TBL_CODEMP  )==null?"0":tblDat.getValueAt(intCol,  INT_TBL_CODEMP  ).toString()) );
     String strCocLoc = (tblDat.getValueAt(intCol,  INT_TBL_CODLOC  )==null?"0":tblDat.getValueAt(intCol,  INT_TBL_CODLOC  ).toString());
     String strDocTipDoc = ( tblDat.getValueAt(intCol,  INT_TBL_CODTIPDOC )==null?"0":tblDat.getValueAt(intCol,  INT_TBL_CODTIPDOC  ).toString());
     String strCocDoc =  (tblDat.getValueAt(intCol,  INT_TBL_CODDOC )==null?"0":tblDat.getValueAt(intCol,  INT_TBL_CODDOC ).toString());
     System.out.println("intCodEmp="+intCodEmp);
     System.out.println("strCocLoc="+strCocLoc);
     System.out.println("strDocTipDoc="+strDocTipDoc);
     System.out.println("strCocDoc="+strCocDoc);
     CxC.ZafCxC17.ZafCxC17_Cre obj = new CxC .ZafCxC17.ZafCxC17_Cre(javax.swing.JOptionPane.getFrameForComponent(this), false, objParSis, intCodEmp, strCocLoc, strDocTipDoc, strCocDoc);
     obj.show();  
}   
   
}
