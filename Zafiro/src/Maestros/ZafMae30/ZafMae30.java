/*
 * ZafMae30.java
 *
 * Created on December 19, 2008, 12:41 PM
 */
package Maestros.ZafMae30;

import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import Librerias.ZafTblUti.ZafTblCelRenCbo.ZafTblCelRenCbo;
import Librerias.ZafTblUti.ZafTblCelEdiCbo.ZafTblCelEdiCbo;

/**
 *
 * @author ilino
 */
public class ZafMae30 extends javax.swing.JInternalFrame 
{
    private ZafParSis objParSis;
    private ZafVenCon vcoPrg;
    private ZafUtil objUti;
    private MiToolBar objTooBar;
    private ZafTblMod objTblMod;
    private ZafColNumerada objColNum;
    private ZafTblPopMnu objTblPopMnu;
    private ZafMouMotAda objMouMotAda;
    private ZafTblCelRenChk objTblCelRenChk, objTblCelRenChkPrd;
    private ZafTblCelEdiChk objTblCelEdiChk, objTblCelEdiChkPrd;
    private ZafTblOrd objTblOrd;
    private ZafTblBus objTblBus;
    private ZafVenCon vcoUsr;
    private ZafTblCelRenCbo objTblCelRenCmbBox;
    private ZafTblCelEdiCbo objTblCelEdiCmbBox;
    private boolean blnHayCam;
    private String strSQL, strAux;
    private Vector vecDat, vecReg, vecCab, vecAux;
    private String strTipPrg;
    private String strNomPrg;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private int intSelPrd;
    private int intSelRepSelPrd;
    private final int INT_TBL_DAT_LIN = 0;
    private final int INT_TBL_DAT_CHK = 1;
    private final int INT_TBL_DAT_COD = 2;
    private final int INT_TBL_DAT_DES_COR = 3;
    private final int INT_TBL_DAT_DES_LAR = 4;
    private final int INT_TBL_DAT_CHK_PRD = 5;
    private final int INT_TBL_DAT_CMB_BOX = 6;
    private ZafDocLis objDocLis;
    private String strDesCorUsr, strDesLarUsr;

    /**
     * Creates new form ZafMae30
     */
    public ZafMae30(ZafParSis obj) 
    {
        try 
        {
            initComponents();
            //Inicializar objetos.
            objParSis = (ZafParSis) obj.clone();
            if (!configurarFrm()) {
                exitForm();
            }
         }
         catch (CloneNotSupportedException e) 
         {
            this.setTitle(this.getTitle() + " [ERROR]");
         }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panDat = new javax.swing.JPanel();
        panCab = new javax.swing.JPanel();
        lblTipDoc = new javax.swing.JLabel();
        txtTipPrg = new javax.swing.JTextField();
        txtNomPrg = new javax.swing.JTextField();
        butPrg = new javax.swing.JButton();
        txtNumCta = new javax.swing.JTextField();
        txtNumPro = new javax.swing.JTextField();
        txtCodUsr = new javax.swing.JTextField();
        lblUsr = new javax.swing.JLabel();
        txtDesCorUsr = new javax.swing.JTextField();
        txtDesLarUsr = new javax.swing.JTextField();
        butUsr = new javax.swing.JButton();
        panDet = new javax.swing.JPanel();
        spnDet = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Informaci√≥n del registro actual");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        tabFrm.setPreferredSize(new java.awt.Dimension(459, 473));

        panDat.setPreferredSize(new java.awt.Dimension(600, 80));
        panDat.setLayout(new java.awt.BorderLayout());

        panCab.setPreferredSize(new java.awt.Dimension(610, 60));
        panCab.setLayout(null);

        lblTipDoc.setText("Programa:");
        lblTipDoc.setToolTipText("Programa");
        panCab.add(lblTipDoc);
        lblTipDoc.setBounds(2, 4, 60, 20);

        txtTipPrg.setMaximumSize(null);
        txtTipPrg.setPreferredSize(new java.awt.Dimension(70, 20));
        txtTipPrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTipPrgActionPerformed(evt);
            }
        });
        txtTipPrg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTipPrgFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTipPrgFocusLost(evt);
            }
        });
        panCab.add(txtTipPrg);
        txtTipPrg.setBounds(72, 4, 80, 20);

        txtNomPrg.setMaximumSize(null);
        txtNomPrg.setPreferredSize(new java.awt.Dimension(70, 20));
        txtNomPrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomPrgActionPerformed(evt);
            }
        });
        txtNomPrg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomPrgFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomPrgFocusLost(evt);
            }
        });
        panCab.add(txtNomPrg);
        txtNomPrg.setBounds(152, 4, 368, 20);

        butPrg.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        butPrg.setText("...");
        butPrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrgActionPerformed(evt);
            }
        });
        panCab.add(butPrg);
        butPrg.setBounds(520, 4, 24, 20);

        txtNumCta.setMaximumSize(null);
        txtNumCta.setPreferredSize(new java.awt.Dimension(70, 20));
        panCab.add(txtNumCta);
        txtNumCta.setBounds(180, 25, 0, 0);

        txtNumPro.setMaximumSize(null);
        txtNumPro.setPreferredSize(new java.awt.Dimension(70, 20));
        panCab.add(txtNumPro);
        txtNumPro.setBounds(180, 46, 0, 0);
        panCab.add(txtCodUsr);
        txtCodUsr.setBounds(40, 26, 32, 20);

        lblUsr.setText("Usuario:");
        lblUsr.setToolTipText("Usuario");
        panCab.add(lblUsr);
        lblUsr.setBounds(0, 26, 100, 20);

        txtDesCorUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorUsrActionPerformed(evt);
            }
        });
        txtDesCorUsr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorUsrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorUsrFocusLost(evt);
            }
        });
        panCab.add(txtDesCorUsr);
        txtDesCorUsr.setBounds(72, 26, 80, 20);

        txtDesLarUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarUsrActionPerformed(evt);
            }
        });
        txtDesLarUsr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarUsrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarUsrFocusLost(evt);
            }
        });
        panCab.add(txtDesLarUsr);
        txtDesLarUsr.setBounds(152, 26, 368, 20);

        butUsr.setText("...");
        butUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUsrActionPerformed(evt);
            }
        });
        panCab.add(butUsr);
        butUsr.setBounds(520, 26, 24, 20);

        panDat.add(panCab, java.awt.BorderLayout.NORTH);

        panDet.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDet.setViewportView(tblDat);

        panDet.add(spnDet, java.awt.BorderLayout.CENTER);

        panDat.add(panDet, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panDat);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());
        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
    String strTit, strMsg;
    try 
    {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        strTit = "Mensaje del sistema Zafiro";
        strMsg = "¬øEst√° seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this, strMsg, strTit, javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE) == javax.swing.JOptionPane.YES_OPTION) {
            if (con != null) {
                con.close();
                con = null;
            }
            dispose();
        }
    }
    catch (java.sql.SQLException e)
    {
        dispose();
    }
}//GEN-LAST:event_exitForm

private void butPrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrgActionPerformed
    mostrarVenConPrg(0);
}//GEN-LAST:event_butPrgActionPerformed

private void txtTipPrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTipPrgActionPerformed
    txtTipPrg.transferFocus();
}//GEN-LAST:event_txtTipPrgActionPerformed

private void txtTipPrgFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTipPrgFocusGained
    strTipPrg = txtTipPrg.getText();
    txtTipPrg.selectAll();
}//GEN-LAST:event_txtTipPrgFocusGained

private void txtTipPrgFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTipPrgFocusLost
    if (!txtTipPrg.getText().equalsIgnoreCase(strTipPrg)) {
        if (txtTipPrg.getText().equals("")) {
            txtTipPrg.setText("");
            txtNomPrg.setText("");
        } else {
            mostrarVenConPrg(1);
        }
    } else {
        txtTipPrg.setText(strTipPrg);
    }
}//GEN-LAST:event_txtTipPrgFocusLost

private void txtNomPrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomPrgActionPerformed
    txtNomPrg.transferFocus();
}//GEN-LAST:event_txtNomPrgActionPerformed

private void txtNomPrgFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPrgFocusGained
    strNomPrg = txtNomPrg.getText();
    txtNomPrg.selectAll();
}//GEN-LAST:event_txtNomPrgFocusGained

private void txtNomPrgFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPrgFocusLost
    if (!txtNomPrg.getText().equalsIgnoreCase(strNomPrg)) {
        if (txtNomPrg.getText().equals("")) {
            txtTipPrg.setText("");
            txtNomPrg.setText("");
        } else {
            mostrarVenConPrg(2);
        }
    } else {
        txtNomPrg.setText(strNomPrg);
    }
}//GEN-LAST:event_txtNomPrgFocusLost

private void txtDesCorUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorUsrActionPerformed
    txtDesCorUsr.transferFocus();
}//GEN-LAST:event_txtDesCorUsrActionPerformed

private void txtDesCorUsrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorUsrFocusGained
    strDesCorUsr = txtDesCorUsr.getText();
    txtDesCorUsr.selectAll();
}//GEN-LAST:event_txtDesCorUsrFocusGained

private void txtDesCorUsrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorUsrFocusLost
    if (txtDesCorUsr.isEditable()) {
        //Validar el contenido de la celda s√≥lo si ha cambiado.
        if (!txtDesCorUsr.getText().equalsIgnoreCase(strDesCorUsr)) {
            if (txtDesCorUsr.getText().equals("")) {
                txtCodUsr.setText("");
                txtDesLarUsr.setText("");
            } else {
                mostrarVenConUsr(1);
            }
        } else {
            txtDesCorUsr.setText(strDesCorUsr);
        }
    }
}//GEN-LAST:event_txtDesCorUsrFocusLost

private void txtDesLarUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarUsrActionPerformed
    txtDesLarUsr.transferFocus();
}//GEN-LAST:event_txtDesLarUsrActionPerformed

private void txtDesLarUsrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarUsrFocusGained
    strDesLarUsr = txtDesLarUsr.getText();
    txtDesLarUsr.selectAll();
}//GEN-LAST:event_txtDesLarUsrFocusGained

private void txtDesLarUsrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarUsrFocusLost
    if (txtDesLarUsr.isEditable()) {
        //Validar el contenido de la celda s√≥lo si ha cambiado.
        if (!txtDesLarUsr.getText().equalsIgnoreCase(strDesLarUsr)) {
            if (txtDesLarUsr.getText().equals("")) {
                txtCodUsr.setText("");
                txtDesCorUsr.setText("");
            } else {
                mostrarVenConUsr(2);
            }
        } else {
            txtDesLarUsr.setText(strDesLarUsr);
        }
    }
}//GEN-LAST:event_txtDesLarUsrFocusLost

private void butUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUsrActionPerformed
    mostrarVenConUsr(0);
}//GEN-LAST:event_butUsrActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butPrg;
    private javax.swing.JButton butUsr;
    private javax.swing.JLabel lblTipDoc;
    private javax.swing.JLabel lblTit;
    private javax.swing.JLabel lblUsr;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panDat;
    private javax.swing.JPanel panDet;
    private javax.swing.JPanel panFrm;
    private javax.swing.JScrollPane spnDet;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodUsr;
    private javax.swing.JTextField txtDesCorUsr;
    private javax.swing.JTextField txtDesLarUsr;
    private javax.swing.JTextField txtNomPrg;
    private javax.swing.JTextField txtNumCta;
    private javax.swing.JTextField txtNumPro;
    private javax.swing.JTextField txtTipPrg;
    // End of variables declaration//GEN-END:variables

    /**
     * Cerrar la aplicaci√≥n.
     */
    private void exitForm() {
        dispose();
    }

    /**
     * Esta funcion permite utilizar la "Ventana de Consulta" para seleccionar
     * un registro de la base de datos. El tipo de b√∫squeda determina si se
     * debe hacer una busqueda directa (No se muestra la ventana de consulta a
     * menos que no exista lo que se est√° buscando) o presentar la ventana de
     * consulta para que el usuario seleccione la opci√≥n que desea utilizar.
     *
     * @param intTipBus El tipo de busqueda a realizar.
     * @return true: Si no se presenta ningun problema. <BR>false: En el caso
     * contrario.
     */
    private boolean mostrarVenConPrg(int intTipBus) 
    {
        boolean blnRes = true;
        try {
            switch (intTipBus) {
                case 0: //Mostrar la ventana de consulta.
                    vcoPrg.setCampoBusqueda(1);
                    vcoPrg.show();
                    if (vcoPrg.getSelectedButton() == vcoPrg.INT_BUT_ACE) {
                        txtTipPrg.setText(vcoPrg.getValueAt(1));
                        txtNomPrg.setText(vcoPrg.getValueAt(2));
                        if (objTooBar.getEstado() == 'n') {
                            cargarReportesSistema();
                        }
                    }
                    break;
                case 1: //B√∫squeda directa por "C√≥digo".
                    if (vcoPrg.buscar("a1.co_mnu", txtTipPrg.getText())) 
                    {
                        txtTipPrg.setText(vcoPrg.getValueAt(1));
                        txtNomPrg.setText(vcoPrg.getValueAt(2));
                        if (objTooBar.getEstado() == 'n') 
                        {
                            cargarReportesSistema();
                        }
                    } 
                    else
                    {
                        vcoPrg.setCampoBusqueda(0);
                        vcoPrg.setCriterio1(11);
                        vcoPrg.cargarDatos();
                        vcoPrg.show();
                        if (vcoPrg.getSelectedButton() == vcoPrg.INT_BUT_ACE) {
                            txtTipPrg.setText(vcoPrg.getValueAt(1));
                            txtNomPrg.setText(vcoPrg.getValueAt(2));
                            if (objTooBar.getEstado() == 'n') {
                                cargarReportesSistema();
                            }
                        } else {
                            txtTipPrg.setText(strTipPrg);
                        }
                    }
                    break;
                case 2: //B√∫squeda directa por "Nombre".
                    if (vcoPrg.buscar("a1.tx_nom", txtNomPrg.getText())) 
                    {
                        txtTipPrg.setText(vcoPrg.getValueAt(1));
                        txtNomPrg.setText(vcoPrg.getValueAt(2));
                        if (objTooBar.getEstado() == 'n') {
                            cargarReportesSistema();
                        }
                    } 
                    else 
                    {
                        vcoPrg.setCampoBusqueda(1);
                        vcoPrg.setCriterio1(11);
                        vcoPrg.cargarDatos();
                        vcoPrg.show();
                        if (vcoPrg.getSelectedButton() == vcoPrg.INT_BUT_ACE) 
                        {
                            txtTipPrg.setText(vcoPrg.getValueAt(1));
                            txtNomPrg.setText(vcoPrg.getValueAt(2));
                            if (objTooBar.getEstado() == 'n') {
                                cargarReportesSistema();
                            }
                        } 
                        else {
                            txtNomPrg.setText(strNomPrg);
                        }
                    }
                    break;
            }
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Configurar el formulario.
     */
    private boolean configurarFrm() {
        boolean blnRes = true;

        try {
            //Inicializar objetos.            
            objUti = new ZafUtil();
            objTooBar = new MiToolBar(this);
            panBar.add(objTooBar);
            intSelPrd = 0;
            this.setTitle(objParSis.getNombreMenu() + " v0.3");
            lblTit.setText(objParSis.getNombreMenu());
            //Configurar JTable: Establecer el modelo.
            vecDat = new Vector();    //Almacena los datos
            vecCab = new Vector(7);   //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN, "");
            vecCab.add(INT_TBL_DAT_CHK, "Sel");
            vecCab.add(INT_TBL_DAT_COD, "C√≥digo");
            vecCab.add(INT_TBL_DAT_DES_COR, "Descripci√≥n Corta");
            vecCab.add(INT_TBL_DAT_DES_LAR, "Descripci√≥n Larga");
            vecCab.add(INT_TBL_DAT_CHK_PRD, "Prd.");
            vecCab.add(INT_TBL_DAT_CMB_BOX, "");
            objTblMod = new ZafTblMod();
            objTblMod.setHeader(vecCab);
            
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selecci√≥n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            objColNum = new ZafColNumerada(tblDat, INT_TBL_DAT_LIN);
            //Configurar JTable: Establecer el men√∫ de contexto.
            objTblPopMnu = new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux = tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DES_COR).setPreferredWidth(280);
            tcmAux.getColumn(INT_TBL_DAT_DES_LAR).setPreferredWidth(150);
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRD).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_CMB_BOX).setPreferredWidth(70);

            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_DAT_CHK).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda = new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer columnas editables.
            vecAux = new Vector();
            vecAux.add("" + INT_TBL_DAT_CHK);
            vecAux.add("" + INT_TBL_DAT_CHK_PRD);
            vecAux.add("" + INT_TBL_DAT_CMB_BOX);
            objTblMod.setColumnasEditables(vecAux);
            vecAux = null;
            //Configurar JTable: Editor de la tabla.
            //objTblEdi=new ZafTblEdi(tblDat);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk = new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellRenderer(objTblCelRenChk);
            objTblCelEdiChk = new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }

                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if (objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)) {
                        if (intSelRepSelPrd == 0) {
                            intSelRepSelPrd++;
                            intSelPrd = 1;
                        }
                    } else {
                        objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRD);
                        objTblMod.setSelectedItem("", tblDat.getSelectedRow(), INT_TBL_DAT_CMB_BOX);
                    }
                }
            });


            objTblCelRenChkPrd = new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRD).setCellRenderer(objTblCelRenChkPrd);
            objTblCelEdiChkPrd = new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRD).setCellEditor(objTblCelEdiChkPrd);
            objTblCelEdiChkPrd.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }

                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if (!objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)) {
                        mostrarMsgInf("<HTML>El Reporte de Sistema no ha sido seleccionado.<BR>Seleccione el reporte y vuelva a intentarlo.</HTML>");
                    }
                }
            });

            objTblCelRenCmbBox = new ZafTblCelRenCbo();
            tcmAux.getColumn(INT_TBL_DAT_CMB_BOX).setCellRenderer(objTblCelRenCmbBox);

            objTblCelEdiCmbBox = new ZafTblCelEdiCbo(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CMB_BOX).setCellEditor(objTblCelEdiCmbBox);
            objTblCelEdiCmbBox.addItem("");
            objTblCelEdiCmbBox.addItem("1");
            objTblCelEdiCmbBox.addItem("2");
            objTblCelEdiCmbBox.addItem("3");
            objTblCelEdiCmbBox.addItem("4");
            objTblCelEdiCmbBox.addItem("5");
            objTblCelEdiCmbBox.addItem("6");
//          objTblCelEdiCmbBox.addItem("7");
//          objTblCelEdiCmbBox.addItem("8");
//          objTblCelEdiCmbBox.addItem("9");
//          objTblCelEdiCmbBox.addItem("10");

            objTblCelEdiCmbBox.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    for (int p = (tblDat.getSelectedRow()); p <= (tblDat.getSelectedRow()); p++) {
                        if (!objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)) {
                            mostrarMsgInf("<HTML>No se puede escoger el nivel si el reporte no ha sido seleccionado.<BR>Seleccione el reporte y vuelva a escoger el nivel del reporte.<HTML>");
                            objTblCelEdiCmbBox.setSelectedIndex(-1);
                            break;
                        }
                    }
                }
            });
            configurarVenConTipPrg();
            configurarVenConUsr();
            txtTipPrg.setBackground(objParSis.getColorCamposObligatorios());
            txtNomPrg.setBackground(objParSis.getColorCamposObligatorios());
            txtCodUsr.setBackground(objParSis.getColorCamposObligatorios());
            txtDesCorUsr.setBackground(objParSis.getColorCamposObligatorios());
            txtDesLarUsr.setBackground(objParSis.getColorCamposObligatorios());
            txtCodUsr.setVisible(false);
            txtCodUsr.setEnabled(false);

            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            objTblOrd = new ZafTblOrd(tblDat);
            objTblBus = new ZafTblBus(tblDat);
            objTooBar.setVisibleAnular(false);
            objDocLis = new ZafDocLis();
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci√≥n configura la "Ventana de consulta" que ser√° utilizada para
     * mostrar los "Programas".
     */
    private boolean configurarVenConTipPrg() {
        boolean blnRes = true;
        int intCodEmp, intCodEmpGrp, intCodMnu;
        try {
            intCodEmp = objParSis.getCodigoEmpresa();
            intCodEmpGrp = objParSis.getCodigoEmpresaGrupo();
            intCodMnu = objParSis.getCodigoMenu();
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("a1.co_mnu");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("C√≥digo");
            arlAli.add("Programa");
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("494");
            //Armar la sentencia SQL.
            strSQL = "";
            strSQL += "SELECT a1.co_mnu, a1.tx_nom";
            strSQL += " FROM tbm_mnuSis AS a1";
            strSQL += " WHERE (a1.tx_tipMnu='C'or a1.tx_tipMnu='R') and a1.tx_nom!=''";
            strSQL += " AND a1.st_reg<>'E' AND a1.tx_acc IS NOT NULL";
            strSQL += " ORDER BY a1.tx_nom";
            vcoPrg = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de programas", strSQL, arlCam, arlAli, arlAncCol);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;
            //Configurar columnas.
            vcoPrg.setConfiguracionColumna(1, javax.swing.JLabel.LEFT);
            vcoPrg.setConfiguracionColumna(2, javax.swing.JLabel.LEFT);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de
     * herramientas contiene los botones que realizan las diferentes operaciones
     * del sistema. Es decir, insertar, consultar, modificar, eliminar, etc.
     * Adem√°s de los botones de navegaci√≥n que permiten desplazarse al primero,
     * anterior, siguiente y √∫ltimo registro.
     */
    private class MiToolBar extends ZafToolBar {

        public MiToolBar(javax.swing.JInternalFrame ifrFrm) {
            super(ifrFrm, objParSis);
        }

        public boolean anular() {
            return true;
        }

        public void clickAceptar() {
        }

        public void clickAnterior() {
            try {
                if (!rstCab.isFirst()) {
                    if (blnHayCam || objTblMod.isDataModelChanged()) {
                        if (isRegPro()) {
                            rstCab.previous();
                            cargarReg();
                        }
                    } else {
                        rstCab.previous();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnular() {
        }

        public void clickCancelar() {
            intSelPrd = 0;
            limpiarFrm();
        }

        public void clickConsultar() {
        }

        public void clickEliminar() {
        }

        public void clickFin() {
            try {
                if (!rstCab.isLast()) {
                    if (blnHayCam || objTblMod.isDataModelChanged()) {
                        if (isRegPro()) {
                            rstCab.last();
                            cargarReg();
                        }
                    } else {
                        rstCab.last();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickImprimir() {
        }

        public void clickInicio() {
            try {
                if (!rstCab.isFirst()) {
                    if (blnHayCam || objTblMod.isDataModelChanged()) {
                        if (isRegPro()) {
                            rstCab.first();
                            cargarReg();
                        }
                    } else {
                        rstCab.first();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickInsertar() {
            try {
                if (blnHayCam) {
                    isRegPro();
                }
                if (rstCab != null) {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab = null;
                    stmCab = null;
                    conCab = null;
                }
                //cargarReportesSistema();
                intSelRepSelPrd = 0;
                txtNomPrg.requestFocus();
                blnHayCam = false;
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }

        }

        public void clickModificar() {
            txtTipPrg.setEditable(false);
            txtNomPrg.setEditable(false);
            butPrg.setEnabled(false);
            txtCodUsr.setEditable(false);
            txtDesCorUsr.setEditable(false);
            txtDesLarUsr.setEditable(false);
            butUsr.setEnabled(false);

            if (txtTipPrg.getText().equals("")) {
                tabFrm.setSelectedIndex(0);
                mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Programa</FONT> es obligatorio.<BR>Escriba o seleccione un programa y vuelva a intentarlo.</HTML>");
                txtNomPrg.requestFocus();
            } else if (txtCodUsr.getText().equals("")) {
                tabFrm.setSelectedIndex(0);
                mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">usuario</FONT> es obligatorio.<BR>Escriba o seleccione un usuario y vuelva a intentarlo.</HTML>");
                txtDesLarUsr.requestFocus();
            } else {
                cargarReg();
            }
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
        }

        public void clickSiguiente() {
            try {
                if (!rstCab.isLast()) {
                    if (blnHayCam || objTblMod.isDataModelChanged()) {
                        if (isRegPro()) {
                            rstCab.next();
                            cargarReg();
                        }
                    } else {
                        rstCab.next();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickVisPreliminar() {
        }

        public boolean consultar() 
        {
            consultarReg();
            return true;
        }

        public boolean eliminar() {
            try {
                if (!eliminarReg()) {
                    return false;
                }
                //Desplazarse al siguiente registro si es posible.
                if (!rstCab.isLast()) {
                    rstCab.next();
                    cargarReg();
                } else {
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                }
                blnHayCam = false;
            } catch (java.sql.SQLException e) {
                return true;
            }
            return true;
        }

        public boolean insertar() {
            if (!insertarReg()) {
                return false;
            }
            return true;
        }

        public boolean modificar() {
            if (!actualizarReg()) {
                return false;
            }
            return true;
        }

        public boolean cancelar() {
            boolean blnRes = true;
            try {
                if (blnHayCam) {
                    if (objTooBar.getEstado() == 'n' || objTooBar.getEstado() == 'm') {
                        if (!isRegPro()) {
                            return false;
                        }
                    }
                }
                if (rstCab != null) {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab = null;
                    stmCab = null;
                    conCab = null;
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
            limpiarFrm();
            blnHayCam = false;
            return blnRes;
        }

        public boolean vistaPreliminar() {
            return true;
        }

        public boolean aceptar() {
            return true;
        }

        public boolean imprimir() {
            return true;
        }

        public boolean beforeInsertar() {
            boolean blnRes = true;
            if (!isCamVal()) {
                blnRes = false;
            }
            return blnRes;
        }

        public boolean beforeConsultar() {
            boolean blnRes = true;
//            if(txtTipPrg.getText().length()<=0){
//                mostrarMsgInf("<HTML>El campo<FONT COLOR=\"blue\"> Programa es obligatorio</FONT>.<BR>Seleccione un programa y vuelva a intentarlo.</FONT>    </HTML>");
//                blnRes=false;
//            }
//            if(txtCodUsr.getText().length()<=0){
//                mostrarMsgInf("<HTML>El campo<FONT COLOR=\"blue\"> usuario es obligatorio</FONT>.<BR>Seleccione un usuario y vuelva a intentarlo.</FONT>    </HTML>");
//                blnRes=false;
//            }
            return blnRes;
        }

        public boolean beforeModificar() {

            return true;
        }

        public boolean beforeEliminar() {
            return true;
        }

        public boolean beforeAnular() {
            return true;
        }

        public boolean beforeImprimir() {
            return true;
        }

        public boolean beforeVistaPreliminar() {
            return true;
        }

        public boolean beforeAceptar() {
            return true;
        }

        public boolean beforeCancelar() {
            return true;
        }

        public boolean afterInsertar() {
            blnHayCam = false;
            //Configurar JFrame de acuerdo al estado del registro.
            objTooBar.setEstado('w');
            intSelPrd = 0;
            consultarReg();
            objTblMod.initRowsState();
            blnHayCam = false;
            return true;
        }

        public boolean afterConsultar() {
            intSelPrd = 0;
            objTblMod.initRowsState();
            return true;
        }

        public boolean afterModificar() {
            intSelPrd = 0;
            objTooBar.setEstado('w');
            consultarReg();
            blnHayCam = false;
            objTblMod.initRowsState();
            return true;
        }

        public boolean afterEliminar() {
            intSelPrd = 0;
            objTblMod.initRowsState();
            return true;
        }

        public boolean afterAnular() {
            intSelPrd = 0;
            objTblMod.initRowsState();
            return true;
        }

        public boolean afterImprimir() {
            return true;
        }

        public boolean afterVistaPreliminar() {
            return true;
        }

        public boolean afterAceptar() {
            return true;
        }

        public boolean afterCancelar() {
            return true;
        }
    }

    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar
     * eventos de del mouse (mover el mouse; arrastrar y soltar). Se la usa en
     * el sistema para mostrar el ToolTipText adecuado en la cabecera de las
     * columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren m√°s espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter {

        public void mouseMoved(java.awt.event.MouseEvent evt) {
            int intCol = tblDat.columnAtPoint(evt.getPoint());
            String strMsg = "";
            switch (intCol) {
                case INT_TBL_DAT_COD:
                    strMsg = "C√≥digo del Reporte del Sistema";
                    break;
                case INT_TBL_DAT_DES_COR:
                    strMsg = "Descripci√≥n Corta del Reporte del Sistema";
                    break;
                case INT_TBL_DAT_DES_LAR:
                    strMsg = "Descripci√≥n Larga del Reporte del Sistema";
                    break;
                case INT_TBL_DAT_CHK_PRD:
                    strMsg = "Reporte Predeterminado";
                    break;
                default:
                    strMsg = "";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }

    private boolean cargarReportesSistema() {
        boolean blnRes = true;
        try {
            con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con != null) {
                stm = con.createStatement();
                strSQL = "";
                strSQL += "SELECT a1.co_rpt, a1.tx_desCor, a1.tx_desLar, a1.tx_nomRpt";
                strSQL += " FROM tbm_rptSis AS a1 INNER JOIN tbr_rptSisPrg AS a2";
                strSQL += " ON a1.co_rpt=a2.co_rpt";
                strSQL += " WHERE a1.st_reg NOT IN('I','E')";
                strSQL += " AND a2.co_mnu=" + txtTipPrg.getText() + "";
                strSQL += " GROUP BY a1.co_rpt, a1.tx_desCor, a1.tx_desLar, a1.tx_nomRpt";
                strSQL += " ORDER BY a1.co_rpt, a1.tx_desLar";

                rst = stm.executeQuery(strSQL);
                while (rst.next()) {
                    vecReg = new Vector();
                    vecReg.add(INT_TBL_DAT_LIN, "");
                    vecReg.add(INT_TBL_DAT_CHK, "");
                    vecReg.add(INT_TBL_DAT_COD, "" + rst.getObject("co_rpt") == null ? "" : rst.getString("co_rpt"));
                    vecReg.add(INT_TBL_DAT_DES_COR, "" + rst.getObject("tx_desCor") == null ? "" : rst.getString("tx_desCor"));
                    vecReg.add(INT_TBL_DAT_DES_LAR, "" + rst.getString("tx_nomRpt") == null ? "" : rst.getString("tx_nomRpt"));
                    vecReg.add(INT_TBL_DAT_CHK_PRD, "");
                    vecReg.add(INT_TBL_DAT_CMB_BOX, "");
                    vecDat.add(vecReg);
                }

                stm.close();
                stm = null;
                rst.close();
                rst = null;
                con.close();
                con = null;
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
            }

        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes = false;
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes = false;
        }
        return blnRes;
    }

    private boolean isCamVal() {
        //Validar el "Tipo de documento".
        if (txtTipPrg.getText().equals("")) {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Programa</FONT> es obligatorio.<BR>Escriba o seleccione un programa y vuelva a intentarlo.</HTML>");
            txtNomPrg.requestFocus();
            return false;
        }
        if (txtCodUsr.getText().equals("")) {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">usuario</FONT> es obligatorio.<BR>Escriba o seleccione un usuario y vuelva a intentarlo.</HTML>");
            txtDesLarUsr.requestFocus();
            return false;
        }
        if (!objTblMod.isDataModelChanged()) {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>No existe ning√∫n Reporte de Sistema seleccionado.<BR>Seleccione un Reporte de Sistema y vuelva a intentarlo.</HTML>");
            tblDat.setRowSelectionInterval(0, 0);
            tblDat.changeSelection(0, INT_TBL_DAT_LIN, true, true);
            tblDat.requestFocus();
            return false;
        }
        if (isRegInsertados()) {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El programa seleccionado ya ha sido ingresado.<BR>Consulte el programa y luego modifiquelo.</HTML>");
            txtNomPrg.requestFocus();
            return false;
        }
        return true;
    }

    /**
     * Esta funciÔøΩn muestra un mensaje informativo al usuario. Se podrÔøΩa
     * utilizar para mostrar al usuario un mensaje que indique el campo que es
     * invalido y que debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg) {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        String strTit;
        strTit = "Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this, strMsg, strTit, javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    private boolean isRegInsertados() {
        boolean blnRes = false;
        try {
            con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con != null) {
                stm = con.createStatement();
                strSQL = "";
                strSQL += "SELECT * ";
                strSQL += " FROM tbr_rptSisUsr ";
                strSQL += " WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL += " AND co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL += " AND co_mnu=" + txtTipPrg.getText() + "";
                strSQL += " AND co_usr=" + txtCodUsr.getText() + "";
                rst = stm.executeQuery(strSQL);
                if (rst.next()) {
                    blnRes = true;
                }
                stm.close();
                stm = null;
                rst.close();
                rst = null;
                con.close();
                con = null;
            }

        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean insertarReg() {
        boolean blnRes = false;
        try {
            con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con != null) {
                if (insertar_tbrRptSisUsr()) {
                    con.commit();
                    blnRes = true;
                } else {
                    con.rollback();
                }
            }
            con.close();
            con = null;
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean insertar_tbrRptSisUsr() {
        boolean blnRes = true;
        String strSQLIns = "";
        String strLin = "";
        String strValCbo = "";
        try {
            if (con != null) {
                stm = con.createStatement();
                for (int i = 0; i < objTblMod.getRowCountTrue(); i++) {
                    if (objTblMod.isChecked(i, INT_TBL_DAT_CHK)) {
                        strSQL = "";
                        strSQL += "INSERT INTO tbr_rptsisusr(";
                        strSQL += " co_emp, co_loc, co_rpt, co_mnu, co_usr, ne_ord, st_reg)";
                        strSQL += " VALUES (";
                        strSQL += "" + objParSis.getCodigoEmpresa() + ",";//co_emp
                        strSQL += "" + objParSis.getCodigoLocal() + ",";//co_loc
                        strSQL += "" + objTblMod.getValueAt(i, INT_TBL_DAT_COD) + ",";//co_rpt
                        strSQL += "" + txtTipPrg.getText() + ",";//co_mnu
                        strSQL += "" + txtCodUsr.getText() + ",";//co_usr
                        strValCbo = objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX) == null ? "" : (objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX).equals("null") ? "" : objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX).toString());
                        if (strValCbo.equals("")) {
                            mostrarMsgInf("<HTML>Existe(n) registro(s) que no tiene(n) asignado el orden.<BR>Verifique el contenido de dichos registros y vuelva a intentarlo.</HTML>");
                            tblDat.setRowSelectionInterval(i, INT_TBL_DAT_CMB_BOX);
                            tblDat.changeSelection(i, INT_TBL_DAT_CMB_BOX, true, true);
                            tblDat.requestFocus();
                            blnRes = false;
                            i = objTblMod.getRowCountTrue();
                            break;
                        } else {
                            strSQL += "" + objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX) + ",";//ne_ord
                        }

                        if (objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRD)) {
                            strSQL += "'S'";//st_reg
                        } else {
                            strSQL += "'A'";//st_reg
                        }

                        strSQL += ");";
                        strSQLIns += strSQL;
                    }
                }
                stm.executeUpdate(strSQLIns);
                System.out.println("insertar_tbrRptSisUsr:"+strSQLIns);
                strSQLIns = "";
                stm.close();
                stm = null;
            }
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean limpiarFrm() {
        txtTipPrg.setText("");
        txtNomPrg.setText("");
        txtCodUsr.setText("");
        txtDesCorUsr.setText("");
        txtDesLarUsr.setText("");
        objTblMod.removeAllRows();
        return true;
    }

//    private boolean consultarReg(){
//        boolean blnRes=true;
//        try{
//            objTblMod.removeAllRows();
//            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
//            if(con!=null){
//                if (cargarReg()){
//                }
//                con.close();
//                con=null;
//            }
//        }
//        catch (Exception e){
//            blnRes=false;
//        }
//        return blnRes;
//    }
    /**
     * Esta funciÔøΩn permite consultar los registros de acuerdo al criterio
     * seleccionado.
     *
     * @return true: Si se pudo consultar los registros. <BR>false: En el caso
     * contrario.
     */
    private boolean consultarReg() {
        int intCodEmp, intCodLoc;
        boolean blnRes = true;
        try {
            intCodEmp = objParSis.getCodigoEmpresa();
            intCodLoc = objParSis.getCodigoLocal();
            conCab = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab != null) {
                stmCab = conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                //Validar que sÔøΩlo se muestre los documentos asignados al programa.
                strSQL = "";
                strSQL += "SELECT a4.co_emp, a4.co_loc, a1.co_mnu, a1.tx_nom, a3.st_reg, a5.co_usr, a5.tx_usr, a5.tx_nom";
                strSQL += " FROM tbm_mnuSis AS a1 INNER JOIN (    (tbr_rptSisPrg AS a2 INNER JOIN ";
                strSQL += "                                             (tbr_rptSisUsr AS a4 INNER JOIN tbm_usr AS a5 ON a4.co_usr=a5.co_usr)";
                strSQL += "                                     ON a2.co_rpt=a4.co_rpt AND a2.co_mnu=a4.co_mnu)";
                strSQL += "                                INNER JOIN tbm_rptSis AS a3 ON a2.co_rpt=a3.co_rpt)";
                strSQL += " ON a1.co_mnu=a2.co_mnu";
                strSQL += " WHERE a1.st_reg NOT IN('I','E') ";
                strSQL += " AND a4.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL += " AND a4.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL += " AND a1.tx_acc IS NOT NULL AND a5.st_reg NOT IN('I','E')";

                strAux = txtTipPrg.getText();
                if (!strAux.equals("")) {
                    strSQL += " AND a1.co_mnu = " + strAux.replaceAll("'", "''") + "";
                }

//                strAux=txtNomPrg.getText().toLowerCase();
//                if (!strAux.equals(""))
//                    strSQL+=" AND a1.tx_nom LIKE '" + strAux.replaceAll("'", "''") + "'";

                strAux = txtCodUsr.getText();
                if (!strAux.equals("")) {
                    strSQL += " AND a5.co_usr = " + strAux.replaceAll("'", "''") + "";
                }

//                strAux=txtDesCorUsr.getText().toLowerCase();
//                if (!strAux.equals(""))
//                    strSQL+=" AND a5.tx_usr LIKE '" + strAux.replaceAll("'", "''") + "'";
//                
//                strAux=txtDesLarUsr.getText().toLowerCase();
//                if (!strAux.equals(""))
//                    strSQL+=" AND a5.tx_nom LIKE '" + strAux.replaceAll("'", "''") + "'";

                strSQL += " GROUP BY a4.co_emp, a4.co_loc, a1.co_mnu, a1.tx_nom, a3.st_reg, a5.co_usr, a5.tx_usr, a5.tx_nom";
                strSQL += " ORDER BY a1.co_mnu";

                rstCab = stmCab.executeQuery(strSQL);
                if (rstCab.next()) {
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                } else {
                    mostrarMsgInf("No se ha encontrado ning√∫n registro que cumpla el criterio de b√∫squeda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funciÔøΩn permite cargar el registro seleccionado.
     *
     * @return true: Si se pudo cargar el registro. <BR>false: En el caso
     * contrario.
     */
    private boolean cargarReg() {
        boolean blnRes = true;
        try {
            if (cargarCabReg()) {
                if (cargarDetReg()) {
                }
            }
            blnHayCam = false;
        } catch (Exception e) {
            blnRes = false;
        }
        return blnRes;
    }

    /**
     * Esta funciÔøΩn permite cargar la cabecera del registro seleccionado.
     *
     * @return true: Si se pudo cargar la cabecera del registro. <BR>false: En
     * el caso contrario.
     */
    private boolean cargarCabReg() {
        int intPosRel;
        boolean blnRes = true;
        try {
            con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con != null) {
                stm = con.createStatement();
                strSQL = "";
                strSQL += "SELECT a1.co_mnu, a1.tx_nom AS tx_nomMnu, a3.st_reg, a5.co_usr, a5.tx_usr, a5.tx_nom AS tx_nomUsu";
                strSQL += " FROM tbm_mnuSis AS a1 INNER JOIN (    (tbr_rptSisPrg AS a2 INNER JOIN ";
                strSQL += "                                             (tbr_rptSisUsr AS a4 INNER JOIN tbm_usr AS a5 ON a4.co_usr=a5.co_usr)";
                strSQL += "                                     ON a2.co_rpt=a4.co_rpt AND a2.co_mnu=a4.co_mnu)";
                strSQL += "                                INNER JOIN tbm_rptSis AS a3 ON a2.co_rpt=a3.co_rpt)";
                strSQL += " ON a1.co_mnu=a2.co_mnu";
                strSQL += " WHERE a1.st_reg NOT IN('I','E') ";
                strSQL += " AND a4.co_emp=" + rstCab.getString("co_emp") + "";
                strSQL += " AND a4.co_loc=" + rstCab.getString("co_loc") + "";
                strSQL += " AND a1.tx_acc IS NOT NULL";
                strSQL += " AND a1.co_mnu=" + rstCab.getString("co_mnu") + "";
                strSQL += " AND a5.co_usr=" + rstCab.getString("co_usr") + "";
                strSQL += " GROUP BY a1.co_mnu, a1.tx_nom, a3.st_reg, a5.co_usr, a5.tx_usr, a5.tx_nom";
                strSQL += " ORDER BY a1.co_mnu, a5.tx_nom";
                rst = stm.executeQuery(strSQL);
                if (rst.next()) {
                    strAux = rst.getString("co_mnu");
                    txtTipPrg.setText((strAux == null) ? "" : strAux);
                    strAux = rst.getString("tx_nomMnu");
                    txtNomPrg.setText((strAux == null) ? "" : strAux);
                    strAux = rst.getString("co_usr");
                    txtCodUsr.setText((strAux == null) ? "" : strAux);
                    strAux = rst.getString("tx_usr");
                    txtDesCorUsr.setText((strAux == null) ? "" : strAux);
                    strAux = rst.getString("tx_nomUsu");
                    txtDesLarUsr.setText((strAux == null) ? "" : strAux);
                } else {
                    limpiarFrm();
                    blnRes = false;
                }
            }
            rst.close();
            stm.close();
            con.close();
            rst = null;
            stm = null;
            con = null;
            //Mostrar la posiciÔøΩn relativa del registro.
            intPosRel = rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funciÔøΩn permite cargar el detalle del registro seleccionado.
     *
     * @return true: Si se pudo cargar el detalle del registro. <BR>false: En el
     * caso contrario.
     */
    private boolean cargarDetReg() {
        int intCodEmp, intCodLoc;
        boolean blnRes = true;
//        int intExiReg=0;
        try {
            objTblMod.removeAllRows();
            if (!txtTipPrg.getText().equals("")) {
//                objTooBar.setMenSis("Obteniendo datos...");
                con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
                if (con != null) {
                    stm = con.createStatement();

                    if (objTooBar.getEstado() == 'x' || objTooBar.getEstado() == 'm') {
                        //Para el modo "Modificar" se muestra: documentos pendientes + documentos pagados.
                        strSQL = "";
                        strSQL += "SELECT a1.co_rpt, a1.tx_desCor, a1.tx_desLar, a1.tx_nomRpt";
                        strSQL += " ,CASE WHEN a3.co_mnu IS NULL THEN cast('N' as character varying) ELSE cast('S' as character varying) END AS st_sav";
                        strSQL += " ,CASE WHEN a3.st_reg IS NULL THEN cast('N' as character varying) ELSE a3.st_reg END AS st_reg";
                        strSQL += " ,CASE WHEN a3.ne_ord IS NULL THEN cast(0 as smallint) ELSE a3.ne_ord END AS ne_ord";
                        strSQL += " FROM tbm_rptSis AS a1 INNER JOIN tbr_rptSisPrg AS a2";
                        strSQL += " ON a1.co_rpt=a2.co_rpt AND a1.st_reg NOT IN('I','E') ";
                        strSQL += " LEFT OUTER JOIN tbr_rptSisUsr AS a3";
                        strSQL += " ON a2.co_rpt=a3.co_rpt AND a2.co_mnu=a3.co_mnu ";
                        strSQL += " AND a3.co_emp=" + rstCab.getString("co_emp") + " AND a3.co_loc=" + rstCab.getString("co_loc") + "";
                        strSQL += " AND a3.co_mnu=" + rstCab.getString("co_mnu") + " AND a3.co_usr=" + rstCab.getString("co_usr") + "";
                        strSQL += " AND a3.st_reg NOT IN('I','E')";
                        strSQL += " WHERE a2.co_mnu=" + rstCab.getString("co_mnu") + "";

                    } else {
                        //Para los demÔøΩs modos se muestra: sÔøΩlo los documentos pagados.
                        strSQL = "";
                        strSQL += "SELECT a1.co_rpt, a1.tx_desCor, a1.tx_desLar, a1.tx_nomRpt, a3.ne_ord, a3.st_reg, cast('S' as character varying) AS st_sav";
                        strSQL += " FROM tbm_rptSis AS a1 INNER JOIN tbr_rptSisPrg AS a2";
                        strSQL += " ON a1.co_rpt=a2.co_rpt ";
                        strSQL += " INNER JOIN tbr_rptSisUsr AS a3";
                        strSQL += " ON a2.co_rpt=a3.co_rpt AND a2.co_mnu=a3.co_mnu ";
                        strSQL += " WHERE a3.co_emp=" + rstCab.getString("co_emp") + " AND a3.co_loc=" + rstCab.getString("co_loc") + "";
                        strSQL += " AND a1.st_reg NOT IN('I','E')";
                        strSQL += " AND a3.st_reg NOT IN('I','E')";
                        strSQL += " AND a2.co_mnu=" + rstCab.getString("co_mnu") + "";
                        strSQL += " AND a3.co_usr=" + rstCab.getString("co_usr") + "";
                        strSQL += " ORDER by a3.ne_ord";
                    }
                    rst = stm.executeQuery(strSQL);
                    // Limpiar vector de datos.
                    vecDat.clear();
                    // intExiReg=0;
                    while (rst.next()) {
                    //  intExiReg++;
                        vecReg = new Vector();
                        vecReg.add(INT_TBL_DAT_LIN, "");
                        vecReg.add(INT_TBL_DAT_CHK, null);
                        vecReg.add(INT_TBL_DAT_COD, rst.getString("co_rpt"));
                        vecReg.add(INT_TBL_DAT_DES_COR, rst.getString("tx_desCor"));
                        vecReg.add(INT_TBL_DAT_DES_LAR, rst.getString("tx_nomRpt"));

                        vecReg.add(INT_TBL_DAT_CHK_PRD, "");
                        vecReg.add(INT_TBL_DAT_CMB_BOX, "");

                        if (rst.getString("st_sav").equals("S")) {
                            vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK);
                        } else if (rst.getString("st_sav").equals("N")) {
                            vecReg.setElementAt(new Boolean(false), INT_TBL_DAT_CHK);
                        } else {
                            vecReg.setElementAt(new Boolean(false), INT_TBL_DAT_CHK);
                        }

                        if (rst.getString("st_reg").equals("S")) {
                            vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK_PRD);
                        } else {
                            vecReg.setElementAt(new Boolean(false), INT_TBL_DAT_CHK_PRD);
                        }

                        if (rst.getInt("ne_ord") != 0) {
                            vecReg.setElementAt(new String(rst.getString("ne_ord")), INT_TBL_DAT_CMB_BOX);
                        }
                        vecDat.add(vecReg);
                    }
                    rst.close();
                    stm.close();
                    con.close();
                    rst = null;
                    stm = null;
                    con = null;
                    //Asignar vectores al modelo.
                    objTblMod.setData(vecDat);
                    tblDat.setModel(objTblMod);
                    vecDat.clear();
                    //  if(intExiReg==0)
                    //    limpiarFrm();
                }
            }
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean actualizarReg() {
        boolean blnRes = false;
        try 
        {
            con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con != null)
            {
                if (eliminar_tbrRptSisUsr()) 
                {                    
                    if (insertar_tbrRptSisUsr()) 
                    {
                        con.commit();
                        blnRes = true;
                    }
                    else 
                    {
                        con.rollback();
                    }
                } 
                else
                {
                    con.rollback();
                }
            }
            
            con.close();
            con = null;
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean eliminar_tbrRptSisUsr() {
        boolean blnRes = true;
        try {
            if (con != null) {
                stm = con.createStatement();
                strSQL = "";
                strSQL += "DELETE FROM tbr_rptsisUsr";
                strSQL += " WHERE co_emp=" + objParSis.getCodigoEmpresa();
                strSQL += " AND co_loc=" + objParSis.getCodigoLocal();
                strSQL += " AND co_mnu=" + txtTipPrg.getText();
                strSQL += " AND co_usr=" + txtCodUsr.getText();
                stm.executeUpdate(strSQL);
                System.out.println("eliminar_tbrRptSisUsr: "+strSQL);
                stm.close();
                stm = null;
            }
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

 
    private boolean eliminarReg() {
        boolean blnRes = false;
        try {
            con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con != null) {
                if (eliminar_tbrRptSisUsr()) {
                    con.commit();
                    blnRes = true;
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                } else {
                    con.rollback();
                }
                con.close();
                con = null;
            }
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci√≥n configura la "Ventana de consulta" que ser√° utilizada para
     * mostrar los "Usuarios".
     */
    private boolean configurarVenConUsr() {
        boolean blnRes = true;
        try {
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("a1.co_usr");
            arlCam.add("a1.tx_usr");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("C√≥digo");
            arlAli.add("Usuario");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            //Armar la sentencia SQL.
            strSQL = "";
            strSQL += "SELECT a1.co_usr, a1.tx_usr, a1.tx_nom";
            strSQL += " FROM tbm_usr AS a1";
            strSQL += " WHERE a1.st_usrSis='S'";
            strSQL += " AND a1.st_reg='A'";
            strSQL += " ORDER BY a1.tx_usr";
            vcoUsr = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de usuarios", strSQL, arlCam, arlAli, arlAncCol);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;
            //Configurar columnas.
            vcoUsr.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci√≥n permite utilizar la "Ventana de Consulta" para seleccionar
     * un registro de la base de datos. El tipo de b√∫squeda determina si se debe
     * hacer una b√∫squeda directa (No se muestra la ventana de consulta a menos
     * que no exista lo que se est√° buscando) o presentar la ventana de consulta
     * para que el usuario seleccione la opci√≥n que desea utilizar.
     *
     * @param intTipBus El tipo de b√∫squeda a realizar.
     * @return true: Si no se present√≥ ning√∫n problema. <BR>false: En el caso
     * contrario.
     */
    private boolean mostrarVenConUsr(int intTipBus) {
        boolean blnRes = true;
        try {
            switch (intTipBus) {
                case 0: //Mostrar la ventana de consulta.
                    vcoUsr.setCampoBusqueda(1);
                    vcoUsr.show();
                    if (vcoUsr.getSelectedButton() == vcoUsr.INT_BUT_ACE) {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    }
                    break;
                case 1: //B√∫squeda directa por "Descripci√≥n corta".
                    if (vcoUsr.buscar("a1.tx_usr", txtDesCorUsr.getText())) {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    } else {
                        vcoUsr.setCampoBusqueda(1);
                        vcoUsr.setCriterio1(11);
                        vcoUsr.cargarDatos();
                        vcoUsr.show();
                        if (vcoUsr.getSelectedButton() == vcoUsr.INT_BUT_ACE) {
                            txtCodUsr.setText(vcoUsr.getValueAt(1));
                            txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                            txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                        } else {
                            txtDesCorUsr.setText(strDesCorUsr);
                        }
                    }
                    break;
                case 2: //B√∫squeda directa por "Descripci√≥n larga".
                    if (vcoUsr.buscar("a1.tx_nom", txtDesLarUsr.getText())) {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    } else {
                        vcoUsr.setCampoBusqueda(2);
                        vcoUsr.setCriterio1(11);
                        vcoUsr.cargarDatos();
                        vcoUsr.show();
                        if (vcoUsr.getSelectedButton() == vcoUsr.INT_BUT_ACE) {
                            txtCodUsr.setText(vcoUsr.getValueAt(1));
                            txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                            txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                        } else {
                            txtDesLarUsr.setText(strDesLarUsr);
                        }
                    }
                    break;
            }
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta clase implementa la interface DocumentListener que observa los
     * cambios que se presentan en los objetos de tipo texto. Por ejemplo:
     * JTextField, JTextArea, etc. Se la usa en el sistema para determinar si
     * existe algÔøΩn cambio que se deba grabar antes de abandonar uno de los
     * modos o desplazarse a otro registro. Por ejemplo: si se ha hecho cambios
     * a un registro y quiere cancelar o moverse a otro registro se presentarÔøΩ
     * un mensaje advirtiendo que si no guarda los cambios los perderÔøΩ.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener {

        public void changedUpdate(javax.swing.event.DocumentEvent evt) {
            blnHayCam = true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) {
            blnHayCam = true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) {
            blnHayCam = true;
        }
    }

    /**
     * Esta funciÔøΩn se encarga de agregar el listener "DocumentListener" a los
     * objetos de tipo texto para poder determinar si su contenido a cambiado o
     * no.
     */
    private boolean isRegPro() {
        boolean blnRes = true;
        strAux = "ÔøΩDesea guardar los cambios efectuados a ÔøΩste registro?\n";
        strAux += "Si no guarda los cambios perderÔøΩ toda la informaciÔøΩn que no haya guardado.";
        switch (mostrarMsgCon(strAux)) {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado()) {
                    case 'n': //Insertar
                        blnRes = objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes = objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam = false;
                blnRes = true;
                break;
            case 2: //CANCEL_OPTION
                blnRes = false;
                break;
        }
        return blnRes;
    }

    /**
     * Esta funciÔøΩn muestra un mensaje "showConfirmDialog". Presenta las
     * opciones Si, No y Cancelar. El usuario es quien determina lo que debe
     * hacer el sistema seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg) {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        String strTit;
        strTit = "Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this, strMsg, strTit, javax.swing.JOptionPane.YES_NO_CANCEL_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta funci√≥n se encarga de agregar el listener "DocumentListener" a los
     * objetos de tipo texto para poder determinar si su contenido a cambiado o
     * no.
     */
    private void agregarDocLis() {
        txtTipPrg.getDocument().addDocumentListener(objDocLis);
        txtNomPrg.getDocument().addDocumentListener(objDocLis);
        txtCodUsr.getDocument().addDocumentListener(objDocLis);
        txtDesCorUsr.getDocument().addDocumentListener(objDocLis);
        txtDesLarUsr.getDocument().addDocumentListener(objDocLis);
    }
}
