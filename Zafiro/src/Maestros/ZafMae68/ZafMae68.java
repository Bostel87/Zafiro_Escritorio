/*
 * ZafMae03.java
 *
 * Created on March 11, 2010, 11:47 PM
 */
package Maestros.ZafMae68;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
/**
 *
 * @author  Gigi
 */

public class ZafMae68 extends javax.swing.JInternalFrame {
    
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private MiToolBar objTooBar;
    private String strAux;
    private boolean blnHayCam;
    private ZafDocLis objDocLis;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private String strSQL;
    private java.util.Date datFecAux;


    private String strDesCorGrp, strDesLarGrp;

    private String strCodGrpPad;
    private ZafVenCon vcoGrp;

    /** Creates new form ZafMae03 */
    public ZafMae68(ZafParSis obj) {
        try{
//            initComponents();
//            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();

            if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()) {
                initComponents();
                configurarFrm();
                agregarDocLis();
            }
            else{
                mostrarMsgInf("Este programa sólo puede ser ejecutado desde GRUPO.");
                dispose();
            }

        }
        catch (CloneNotSupportedException e){
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFrmFil = new javax.swing.JPanel();
        panFil = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtCodGrp = new javax.swing.JTextField();
        txtDesCorGrp = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDesLarGrp = new javax.swing.JTextField();
        lblObs1 = new javax.swing.JLabel();
        spnObs1 = new javax.swing.JScrollPane();
        txaObs1 = new javax.swing.JTextArea();
        lblGrp = new javax.swing.JLabel();
        txtCodGrpPad = new javax.swing.JTextField();
        txtDesCorGrpPad = new javax.swing.JTextField();
        txtDesLarGrpPad = new javax.swing.JTextField();
        butGrpPad = new javax.swing.JButton();
        txtNivGrpPad = new javax.swing.JTextField();
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("jLabel1");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFrmFil.setLayout(new java.awt.BorderLayout());

        panFil.setLayout(null);

        jLabel2.setText("Código:");
        panFil.add(jLabel2);
        jLabel2.setBounds(10, 8, 110, 14);
        panFil.add(txtCodGrp);
        txtCodGrp.setBounds(160, 6, 90, 20);
        panFil.add(txtDesCorGrp);
        txtDesCorGrp.setBounds(160, 28, 140, 20);

        jLabel3.setText("Descripción corta:");
        panFil.add(jLabel3);
        jLabel3.setBounds(10, 30, 140, 14);

        jLabel4.setText("Descripción larga:");
        panFil.add(jLabel4);
        jLabel4.setBounds(10, 54, 130, 14);
        panFil.add(txtDesLarGrp);
        txtDesLarGrp.setBounds(160, 50, 400, 20);

        lblObs1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblObs1.setText("Observación1:");
        panFil.add(lblObs1);
        lblObs1.setBounds(10, 106, 100, 14);

        txaObs1.setLineWrap(true);
        spnObs1.setViewportView(txaObs1);

        panFil.add(spnObs1);
        spnObs1.setBounds(160, 94, 400, 150);

        lblGrp.setText("Grupo padre:");
        lblGrp.setToolTipText("Tipo de documento");
        panFil.add(lblGrp);
        lblGrp.setBounds(10, 72, 100, 20);
        panFil.add(txtCodGrpPad);
        txtCodGrpPad.setBounds(98, 72, 26, 20);

        txtDesCorGrpPad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorGrpPadActionPerformed(evt);
            }
        });
        txtDesCorGrpPad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorGrpPadFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorGrpPadFocusLost(evt);
            }
        });
        panFil.add(txtDesCorGrpPad);
        txtDesCorGrpPad.setBounds(160, 72, 60, 20);

        txtDesLarGrpPad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarGrpPadActionPerformed(evt);
            }
        });
        txtDesLarGrpPad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarGrpPadFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarGrpPadFocusLost(evt);
            }
        });
        panFil.add(txtDesLarGrpPad);
        txtDesLarGrpPad.setBounds(220, 72, 340, 20);

        butGrpPad.setText("...");
        butGrpPad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGrpPadActionPerformed(evt);
            }
        });
        panFil.add(butGrpPad);
        butGrpPad.setBounds(560, 72, 20, 20);
        panFil.add(txtNivGrpPad);
        txtNivGrpPad.setBounds(126, 72, 32, 20);

        panFrmFil.add(panFil, java.awt.BorderLayout.CENTER);

        panBar.setPreferredSize(new java.awt.Dimension(0, 70));
        panBar.setLayout(new java.awt.BorderLayout());
        panFrmFil.add(panBar, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("General", panFrmFil);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        setBounds(0, 0, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
// TODO add your handling code here:
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="¿Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                //Cerrar la conexión si está abierta.
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e){
            dispose();
        }
}//GEN-LAST:event_exitForm

private void txtDesCorGrpPadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorGrpPadActionPerformed
    txtDesCorGrp.transferFocus();
}//GEN-LAST:event_txtDesCorGrpPadActionPerformed

private void txtDesCorGrpPadFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorGrpPadFocusGained
    strDesCorGrp = txtDesCorGrp.getText();
    txtDesCorGrp.selectAll();
}//GEN-LAST:event_txtDesCorGrpPadFocusGained

private void txtDesCorGrpPadFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorGrpPadFocusLost
    //Validar el contenido de la celda sálo si ha cambiado.
    if (!txtDesCorGrp.getText().equalsIgnoreCase(strDesCorGrp)) {
        if (txtDesCorGrp.getText().equals("")) {
            txtCodGrp.setText("");
            txtDesLarGrp.setText("");
        } else {
            mostrarVenConGrp(1);
        }
    } else {
        txtDesCorGrp.setText(strDesCorGrp);
    }
}//GEN-LAST:event_txtDesCorGrpPadFocusLost

private void txtDesLarGrpPadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarGrpPadActionPerformed
    txtDesLarGrp.transferFocus();
}//GEN-LAST:event_txtDesLarGrpPadActionPerformed

private void txtDesLarGrpPadFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarGrpPadFocusGained
    strDesLarGrp = txtDesLarGrp.getText();
    txtDesLarGrp.selectAll();
}//GEN-LAST:event_txtDesLarGrpPadFocusGained

private void txtDesLarGrpPadFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarGrpPadFocusLost
    //Validar el contenido de la celda sálo si ha cambiado.
    if (!txtDesLarGrp.getText().equalsIgnoreCase(strDesLarGrp)) {
        if (txtDesLarGrp.getText().equals("")) {
            txtCodGrp.setText("");
            txtDesCorGrp.setText("");
        } else {
            mostrarVenConGrp(2);
        }
    } else {
        txtDesLarGrp.setText(strDesLarGrp);
    }
}//GEN-LAST:event_txtDesLarGrpPadFocusLost

private void butGrpPadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGrpPadActionPerformed
    mostrarVenConGrp(0);
}//GEN-LAST:event_butGrpPadActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butGrpPad;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblGrp;
    private javax.swing.JLabel lblObs1;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panFrmFil;
    private javax.swing.JScrollPane spnObs1;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTextArea txaObs1;
    private javax.swing.JTextField txtCodGrp;
    private javax.swing.JTextField txtCodGrpPad;
    private javax.swing.JTextField txtDesCorGrp;
    private javax.swing.JTextField txtDesCorGrpPad;
    private javax.swing.JTextField txtDesLarGrp;
    private javax.swing.JTextField txtDesLarGrpPad;
    private javax.swing.JTextField txtNivGrpPad;
    // End of variables declaration//GEN-END:variables

    
    /** Configurar el formulario. */
    private boolean configurarFrm(){
        boolean blnRes=true;
        try{
            //Inicializar objetos.
            objUti=new ZafUtil();
            objTooBar=new MiToolBar(this);
            
            objDocLis=new ZafDocLis();
            panBar.add(objTooBar);
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.1");
            lblTit.setText(strAux);
            txtCodGrp.setBackground(objParSis.getColorCamposSistema());
            txtDesLarGrp.setBackground(objParSis.getColorCamposObligatorios());

            configurarVenConGrpPad();
            txtNivGrpPad.setVisible(false);
            txtNivGrpPad.setEditable(false);
            txtNivGrpPad.setEnabled(false);
            txtCodGrpPad.setVisible(false);
            txtCodGrpPad.setEditable(false);
            txtCodGrpPad.setEnabled(false);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta clase implementa la interface DocumentListener que observa los cambios que
     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
     * Se la usa en el sistema para determinar si existe algún cambio que se deba grabar
     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
     * presentará un mensaje advirtiendo que si no guarda los cambios los perderá.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener 
    {
        public void changedUpdate(javax.swing.event.DocumentEvent evt)        {
            blnHayCam=true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }
    }
    
    
    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private void agregarDocLis()
    {
        txtCodGrp.getDocument().addDocumentListener(objDocLis);
        txtDesCorGrp.getDocument().addDocumentListener(objDocLis);
        txtDesLarGrp.getDocument().addDocumentListener(objDocLis);
    } 
    
    /**
     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
     * insertar, consultar, modificar, eliminar, etc. Además de los botones de navegación
     * que permiten desplazarse al primero, anterior, siguiente y último registro.
     */
    private class MiToolBar extends ZafToolBar
    {
        public MiToolBar(javax.swing.JInternalFrame ifrFrm)
        {
            super(ifrFrm, objParSis);
        }

        public void clickInicio() {
            try{
                if (!rstCab.isFirst()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.first();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.first();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnterior() {
            try{
                if (!rstCab.isFirst()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.previous();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.previous();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            
        }

        public void clickSiguiente() {
            try{
                if (!rstCab.isLast()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.next();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.next();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            
            
        }

        public void clickFin() {
            try{
                if (!rstCab.isLast()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.last();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.last();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }

        }

        public void clickInsertar() {
            try{
                if (blnHayCam){
                    isRegPro();
                }
                limpiarFrm();
                txtCodGrp.setEditable(false);
                txtDesCorGrp.selectAll();
                txtDesCorGrp.requestFocus();
                //Inicializar las variables que indican cambios.
                blnHayCam=false;
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickConsultar() {            
        }

        public void clickModificar() {
            txtCodGrp.setEditable(false);
        }

        public void clickEliminar() {
            
        }

        public void clickAnular() {
            cargarCabReg();
        }

        public void clickImprimir() {
        }

        public void clickVisPreliminar() {
        }

        public void clickAceptar() {
        }

        public void clickCancelar() {
        }

        public boolean insertar() {
            if (!insertarReg())
                return false;
            return true;
        }

        public boolean consultar() {
            consultarReg();
            return true;
        }

        public boolean modificar() {
            if (!actualizarReg())
                return false;
            return true;
        }

        public boolean eliminar() {
            try{
                if (!eliminarReg())
                    return false;
                //Desplazarse al siguiente registro si es posible.
                if (!rstCab.isLast()){
                    rstCab.next();
                    cargarReg();
                }
                else{
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                }
                blnHayCam=false;
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
                return true;
            }
            return true;
        }

        public boolean anular() {
            if (!anularReg())
                return false;
            objTooBar.setEstadoRegistro("Anulado");
            blnHayCam=false;
            return true;
        }

        public boolean imprimir() {
            return true;
        }

        public boolean vistaPreliminar() {
            return true;
        }

        public boolean aceptar() {
            return true;
        }

        public boolean cancelar() {
            boolean blnRes=true;
            try{
                if (blnHayCam){
                    if (objTooBar.getEstado()=='n' || objTooBar.getEstado()=='m'){
                        if (!isRegPro())
                            return false;
                    }
                }
                if (rstCab!=null){
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            limpiarFrm();
            blnHayCam=false;
            return blnRes;
        }

        public boolean beforeInsertar() {
            if (!isCamVal())
                return false;
            return true;
        }

        public boolean beforeConsultar() {
            return true;
        }

        public boolean beforeModificar() {
            boolean blnRes=true;
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado")){
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible modificar un documento eliminado.");
                blnRes=false;
            }
//            if (strAux.equals("Anulado")){
//                mostrarMsgInf("El documento está ANULADO.\nNo es posible modificar un documento anulado.");
//                blnRes=false;
//            }
            return blnRes;
        }

        public boolean beforeEliminar() {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado")){
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible eliminar un documento eliminado.");
                return false;
            }
            return true;
        }

        public boolean beforeAnular() {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado")){
                mostrarMsgInf("El grupo está ELIMINADO.\nNo es posible anular un grupo eliminado.");
                return false;
            }
            if (strAux.equals("Anulado")){
                mostrarMsgInf("El grupo ya está ANULADO.\nNo es posible anular un grupo anulado.");
                return false;
            }

            if(asociadoGrupo()){
                mostrarMsgInf("El grupo seleccionado tiene subgrupos asociados.\nNo es posible anular un grupo con subgrupos asociados.");
                return false;
            }


            return true;
        }

        public boolean beforeImprimir() {
            return true;
        }

        public boolean beforeVistaPreliminar() {
            return true;
        }

        public boolean beforeAceptar() {
            return true;
        }

        public boolean beforeCancelar() {
            return true;
        }

        public boolean afterInsertar() {
            this.setEstado('w');
            blnHayCam=false;
            objTooBar.setEstado('w');
            consultarReg();
            blnHayCam=false;
            return true;
        }

        public boolean afterConsultar() {
            return true;
        }

        public boolean afterModificar() {
            blnHayCam=false;
            objTooBar.setEstado('w');
            cargarReg();
            return true;
        }

        public boolean afterEliminar() {
            return true;
        }

        public boolean afterAnular() {
            cargarReg();
            return true;
        }

        public boolean afterImprimir() {
            return true;
        }

        public boolean afterVistaPreliminar() {
            return true;
        }

        public boolean afterAceptar() {
            return true;
        }

        public boolean afterCancelar() {
            return true;
        }

        
        
        

        
    }



    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje de advertencia al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos se han cargado
     * con errores y que debe revisar dichos datos.
     */
    private void mostrarMsgAdv(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        if (strMsg.equals(""))
            strMsg="<HTML>Este registro tiene <FONT COLOR=\"red\">problemas</FONT>. <BR>Notifíquelo a su administrador del sistema.</HTML>";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.WARNING_MESSAGE);
    }
    

    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private boolean isRegPro()
    {
        boolean blnRes=true;
        strAux="¿Desea guardar los cambios efectuados a éste registro?\n";
        strAux+="Si no guarda los cambios perderá toda la información que no haya guardado.";
        switch (mostrarMsgCon(strAux))
        {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado())
                {
                    case 'n': //Insertar
                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite limpiar el formulario.
     * @return true: Si se pudo limpiar la ventana sin ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean limpiarFrm(){
        boolean blnRes=true;
        try{
            txtCodGrp.setText("");
            txtDesCorGrp.setText("");
            txtDesLarGrp.setText("");
            txtCodGrpPad.setText("");
            txtDesCorGrpPad.setText("");
            txtDesLarGrpPad.setText("");
            txtNivGrpPad.setText("");
            txaObs1.setText("");
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
    
    
    
    

    /**
     * Esta función inserta el registro en la base de datos.
     * @return true: Si se pudo insertar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (insertar()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite insertar la cabecera de un registro.
     * @return true: Si se pudo insertar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertar(){
        int intUltReg;
        boolean blnRes=true;
        int intNiv=-1;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;

                //Obtener el código del último registro.
                strSQL="";
                strSQL+="SELECT MAX(a1.co_grp)";
                strSQL+=" FROM tbm_grpCliActEco AS a1";
                intUltReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intUltReg==-1)
                    return false;
                intUltReg++;
                txtCodGrp.setText("" + intUltReg);

                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="INSERT INTO tbm_grpCliActEco (co_grp, tx_descor, tx_deslar, co_grpPad";
                strSQL+=", ne_niv, tx_obs1, st_reg,fe_ing, fe_ultmod, co_usring, co_usrmod)";
                strSQL+=" VALUES (";
                strSQL+="" + txtCodGrp.getText(); //co_grp
                strSQL+=", " + objUti.codificar(txtDesCorGrp.getText()) + ""; //tx_desCor
                strSQL+=", " + objUti.codificar(txtDesLarGrp.getText()) + ""; //tx_desLar
                if(txtCodGrpPad.getText().length()>0)
                    strSQL+=", " + txtCodGrpPad.getText() + ""; //co_grpPad
                else
                    strSQL+=", Null";
                
                intNiv=Integer.parseInt(txtNivGrpPad.getText()==null?"0":(txtNivGrpPad.getText().equals("")?"0":txtNivGrpPad.getText()));
                
                strSQL+=", " + (intNiv + 1) + ""; //ne_niv


                strSQL+=", " + objUti.codificar(txaObs1.getText()) + ""; //tx_obs1
                strSQL+=", 'A'";//st_reg
                strAux=objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos());

                strSQL+=", '" + strAux + "'"; //fe_ing
                strSQL+=", '" + strAux + "'"; //fe_ultMod
                strSQL+="," + objParSis.getCodigoUsuario() + "";//co_usring
                strSQL+="," + objParSis.getCodigoUsuario() + "";//co_usrmod
                strSQL+=");";
                System.out.println("insertar: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
  

    /**
     * Esta función actualiza el registro en la base de datos.
     * @return true: Si se pudo actualizar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (actualizarGrp()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite actualizar la cabecera de un registro.
     * @return true: Si se pudo actualizar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarGrp(){
        boolean blnRes=true;
        int intNiv=-1;
        try{
            if (con!=null){
                stm=con.createStatement();

                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_grpCliActEco";
                strSQL+=" SET tx_desCor=" + objUti.codificar(txtDesCorGrp.getText()) + "";
                strSQL+=", tx_desLar=" + objUti.codificar(txtDesLarGrp.getText()) + "";
                strSQL+=", tx_obs1=" + objUti.codificar(txaObs1.getText()) + "";
                strSQL+=", fe_ultMod='" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "'";
                strSQL+=", co_usrMod=" + objParSis.getCodigoUsuario();
                if(txtCodGrpPad.getText().length()>0)
                    strSQL+=", co_grpPad=" + objUti.codificar(txtCodGrpPad.getText()) + ""; //co_grpPad
                else
                    strSQL+=", co_grpPad=Null";

                intNiv=Integer.parseInt(txtNivGrpPad.getText()==null?"0":(txtNivGrpPad.getText().equals("")?"0":txtNivGrpPad.getText()));

                strSQL+=", ne_niv=" + (intNiv + 1) + ""; //ne_niv
                strSQL+=" WHERE co_grp=" + txtCodGrp.getText() +"";
                System.out.println("actualizarGrp: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean consultarReg(){
        boolean blnRes=true;
        try{
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null){
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                //Validar que sólo se muestre los documentos asignados al programa.
                strSQL="";
                strSQL+="SELECT a1.co_grp";
                strSQL+=" FROM tbm_grpCliActEco AS a1";
                strSQL+=" WHERE a1.st_reg NOT IN('E')";

                strAux=txtCodGrp.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_grp=" + strAux.replaceAll("'", "''") + "";

                strAux=txtDesCorGrp.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND LOWER(a1.tx_desCor) LIKE '" + strAux.replaceAll("'", "''").replace('*', '%').toLowerCase() + "' ";

                strAux=txtDesLarGrp.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND LOWER(a1.tx_desLar) LIKE '" + strAux.replaceAll("'", "''").replace('*', '%').toLowerCase() + "' ";

                strSQL+=" ORDER BY a1.co_grp";
                //System.out.println("consultarReg: " + strSQL);
                rstCab=stmCab.executeQuery(strSQL);
                if (rstCab.next()){
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                }
                else
                {
                    mostrarMsgInf("No se ha encontrado ningún registro que cumpla el criterio de búsqueda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    

    /**
     * Esta función permite cargar el registro seleccionado.
     * @return true: Si se pudo cargar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            if (cargarCabReg()){
            }
            blnHayCam=false;
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
    
    /**
     * Esta función permite cargar la cabecera del registro seleccionado.
     * @return true: Si se pudo cargar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarCabReg(){
        int intPosRel;
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT x.co_grp, x.tx_desCorGrp, x.tx_desLarGrp, x.st_reg, x.tx_obs1, x.co_grpPad";
                strSQL+=" , y.tx_desCorGrpPad, y.tx_desLarGrpPad, y.ne_niv";
                strSQL+=" FROM(";
                strSQL+=" 	SELECT a1.co_grp, a1.tx_desCor AS tx_desCorGrp, a1.tx_desLar AS tx_desLarGrp";
                strSQL+="       , a1.st_reg, a1.tx_obs1, a1.co_grpPad, a1.ne_niv";
                strSQL+=" 	FROM tbm_grpCliActEco AS a1";
                strSQL+=" 	WHERE a1.co_grp=" + rstCab.getString("co_grp") + "";
                strSQL+=" 	AND a1.st_reg NOT IN('E')";
                strSQL+=") AS x";
                strSQL+=" LEFT OUTER JOIN(";
                strSQL+=" 	SELECT a1.co_grp, a1.tx_desCor AS tx_desCorGrpPad, a1.tx_desLar AS tx_desLarGrpPad, a1.ne_niv";
                strSQL+=" 	FROM tbm_grpCliActEco AS a1";
                strSQL+=" 	WHERE a1.st_reg NOT IN('E')";
                strSQL+=" ) AS y";
                strSQL+=" ON x.co_grpPad=y.co_grp";
                System.out.println("cargarCabReg: " + strSQL);
                rst=stm.executeQuery(strSQL);
                if (rst.next()){
                    strAux=rst.getString("co_grp");
                    txtCodGrp.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_desCorGrp");
                    txtDesCorGrp.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_desLarGrp");
                    txtDesLarGrp.setText((strAux==null)?"":strAux);

                    strAux=rst.getString("co_grpPad");
                    txtCodGrpPad.setText((strAux==null)?"":strAux);

                    strAux=rst.getString("tx_desCorGrpPad");
                    txtDesCorGrpPad.setText((strAux==null)?"":strAux);

                    strAux=rst.getString("tx_desLarGrpPad");
                    txtDesLarGrpPad.setText((strAux==null)?"":strAux);

                    strAux=rst.getString("ne_niv");
                    txtNivGrpPad.setText((strAux==null)?"":strAux);

                    //Mostrar el estado del registro.
                    strAux=rst.getString("st_reg");
                    objTooBar.setEstadoRegistro(getEstReg(strAux));

                    strAux=rst.getString("tx_obs1");
                    txaObs1.setText((strAux==null)?"":strAux);
                }
                else{
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                    blnRes=false;
                }
            }
            rst.close();
            stm.close();
            con.close();
            rst=null;
            stm=null;
            con=null;
            //Mostrar la posición relativa del registro.
            intPosRel=rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función obtiene la descripción larga del estado del registro.
     * @param estado El estado del registro. Por ejemplo: A, I, etc.
     * @return La descripción larga del estado del registro.
     * <BR>Nota.- Si la cadena recibida es <I>null</I> la función devuelve una cadena vacía.
     */
    private String getEstReg(String estado)
    {
        if (estado==null)
            estado="";
        else
            switch (estado.charAt(0))
            {
                case 'A':
                    estado="Activo";
                    break;
                case 'I':
                    estado="Anulado";
                    break;
                case 'P':
                    estado="Pendiente de autorizar";
                    break;
                case 'D':
                    estado="Autorización denegada";
                    break;
                case 'R':
                    estado="Pendiente de impresión";
                    break;
                case 'C':
                    estado="Pendiente confirmación de inventario";
                    break;
                case 'F':
                    estado="Existen diferencias de inventario";
                    break;
                default:
                    estado="Desconocido";
                    break;
            }
        return estado;
    }
    

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }

    /**
     * Esta función determina si los campos son válidos.
     * @return true: Si los campos son válidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal(){
        if (txtDesLarGrp.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Descripción larga</FONT> es obligatorio.<BR>Escriba una descripción larga y vuelva a intentarlo.</HTML>");
            txtDesLarGrp.requestFocus();
            return false;
        }

        return true;
    }
    

    /**
     * Esta función anula el registro de la base de datos.
     * @return true: Si se pudo anular el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean anularReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (anularGrp()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    

    /**
     * Esta función permite anular la cabecera de un registro.
     * @return true: Si se pudo anular la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean anularGrp(){
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_grpCliActEco";
                strSQL+=" SET st_reg='I'";
                strSQL+=" WHERE co_grp=" + rstCab.getString("co_grp");
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función elimina el registro de la base de datos.
     * @return true: Si se pudo eliminar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (eliminarGrp()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite eliminar la cabecera de un registro.
     * @return true: Si se pudo eliminar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminarGrp(){
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_grpCliActEco";
                strSQL+=" SET st_reg='E'";
                strSQL+=" WHERE co_grp=" + rstCab.getString("co_grp");
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }





    /**
     * Esta funcián configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConGrpPad()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_grp");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            arlCam.add("a1.ne_niv");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Alias");
            arlAli.add("Grupo padre");
            arlAli.add("Nivel");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("50");
            arlAncCol.add("400");
            arlAncCol.add("100");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_grp, a1.tx_desCor, a1.tx_desLar, a1.ne_niv";
            strSQL+=" FROM tbm_grpCliActEco AS a1";
            strSQL+=" WHERE a1.st_reg='A'";
            strSQL+=" ORDER BY a1.co_grp";

            //Ocultar columnas.
            int intColOcu[]=new int[1];
            intColOcu[0]=4;

            vcoGrp=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de Clientes por Actividad Económica", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoGrp.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConGrp(int intTipBus) {
        boolean blnRes = true;
        try {
            switch (intTipBus) {
                case 0: //Mostrar la ventana de consulta.
                    vcoGrp.setCampoBusqueda(1);
                    vcoGrp.show();
                    if (vcoGrp.getSelectedButton() == vcoGrp.INT_BUT_ACE) {
                        txtCodGrpPad.setText(vcoGrp.getValueAt(1));
                        txtDesCorGrpPad.setText(vcoGrp.getValueAt(2));
                        txtDesLarGrpPad.setText(vcoGrp.getValueAt(3));
                        txtNivGrpPad.setText(vcoGrp.getValueAt(4));
                    }
                    break;
                case 1: //Básqueda directa por "Descripcián corta".
                    if (vcoGrp.buscar("a1.tx_desCor", txtDesCorGrp.getText())) {
                        txtCodGrpPad.setText(vcoGrp.getValueAt(1));
                        txtDesCorGrpPad.setText(vcoGrp.getValueAt(2));
                        txtDesLarGrpPad.setText(vcoGrp.getValueAt(3));
                        txtNivGrpPad.setText(vcoGrp.getValueAt(4));
                    } else {
                        vcoGrp.setCampoBusqueda(1);
                        vcoGrp.setCriterio1(11);
                        vcoGrp.cargarDatos();
                        vcoGrp.show();
                        if (vcoGrp.getSelectedButton() == vcoGrp.INT_BUT_ACE) {
                            txtCodGrpPad.setText(vcoGrp.getValueAt(1));
                            txtDesCorGrpPad.setText(vcoGrp.getValueAt(2));
                            txtDesLarGrpPad.setText(vcoGrp.getValueAt(3));
                            txtNivGrpPad.setText(vcoGrp.getValueAt(4));
                        } else {
                            txtDesCorGrpPad.setText(strDesCorGrp);
                        }
                    }
                    break;
                case 2: //Básqueda directa por "Descripcián larga".
                    if (vcoGrp.buscar("a1.tx_desLar", txtDesLarGrp.getText())) {
                        txtCodGrpPad.setText(vcoGrp.getValueAt(1));
                        txtDesCorGrpPad.setText(vcoGrp.getValueAt(2));
                        txtDesLarGrpPad.setText(vcoGrp.getValueAt(3));
                        txtNivGrpPad.setText(vcoGrp.getValueAt(4));
                    } else {
                        vcoGrp.setCampoBusqueda(2);
                        vcoGrp.setCriterio1(11);
                        vcoGrp.cargarDatos();
                        vcoGrp.show();
                        if (vcoGrp.getSelectedButton() == vcoGrp.INT_BUT_ACE) {
                            txtCodGrpPad.setText(vcoGrp.getValueAt(1));
                            txtDesCorGrpPad.setText(vcoGrp.getValueAt(2));
                            txtDesLarGrpPad.setText(vcoGrp.getValueAt(3));
                            txtNivGrpPad.setText(vcoGrp.getValueAt(4));
                        } else {
                            txtDesLarGrpPad.setText(strDesLarGrp);
                        }
                    }
                    break;
            }
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    private boolean asociadoGrupo(){
        boolean blnRes=false;
        Connection conAsoGrp;
        Statement stmAsoGrp;
        ResultSet rstAsoGrp;
        try{
            conAsoGrp=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conAsoGrp!=null){
                stmAsoGrp=conAsoGrp.createStatement();
                strSQL="";
                strSQL+=" SELECT a1.co_grp, a1.tx_desCor, a1.tx_desLar, a1.ne_niv";
                strSQL+=" FROM tbm_grpCliActEco AS a1";
                strSQL+=" WHERE a1.co_grpPad=" + rstCab.getString("co_grp") + "";
                strSQL+=" AND a1.st_reg NOT IN('E')";
                rstAsoGrp=stmAsoGrp.executeQuery(strSQL);
                if(rstAsoGrp.next())
                    blnRes=true;

                conAsoGrp.close();
                conAsoGrp=null;
                stmAsoGrp.close();
                stmAsoGrp=null;
                rstAsoGrp.close();
                rstAsoGrp=null;
            }

        }
        catch(java.sql.SQLException e){
            blnRes = true;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes = true;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
}