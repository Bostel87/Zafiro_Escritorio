/*
 * ZafMae63.java
 *
 * Created on Enero 16, 2014, 10:22 PM
 */

package Maestros.ZafMae63;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import Librerias.ZafTblUti.ZafTblCelRenCbo.ZafTblCelRenCbo;
import Librerias.ZafTblUti.ZafTblCelEdiCbo.ZafTblCelEdiCbo;
/**
 *
 * @author  José Marín 
 */
public class ZafMae63 extends javax.swing.JInternalFrame {
    
    private ZafParSis objParSis;
    private ZafVenCon vcoPrg;
    private ZafUtil objUti;
    private MiToolBar objTooBar;
    private ZafTblMod objTblMod;
    private ZafColNumerada objColNum;
    private ZafTblPopMnu objTblPopMnu;
    private ZafMouMotAda objMouMotAda;
    private ZafTblCelRenChk objTblCelRenChk, objTblCelRenChkPrd;
    private ZafTblCelEdiChk objTblCelEdiChk, objTblCelEdiChkPrd;
    private ZafTblOrd objTblOrd;
    private ZafTblBus objTblBus;
    private ZafVenCon vcoUsr;
    private ZafTblCelEdiChk objTblCelEdiChkPre;         //Editor: JCheckBox en celda.
    private ZafTblCelRenCbo objTblCelRenCmbBox;
    private ZafTblCelEdiCbo objTblCelEdiCmbBox;
    private boolean blnHayCam;
    
    private String strSQL, strAux;
    private Vector vecDat, vecReg, vecCab, vecAux;
    private String strTipPrg;
    private String strNomPrg;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private int intSelPrd;
    private int intSelRepSelPrd;
    private Vector vecCodVeh, vecPlaca, vecDesLar;
    
    private final int INT_TBL_DAT_LIN=0;
    private final int INT_TBL_DAT_CHK=1;
    
    private final int INT_TBL_DAT_COD_DEP=2;
    private final int INT_TBL_DAT_NOM_DEP=3;
    private final int INT_TBL_DAT_CHK_PRD=4;
    private boolean blnPre;
    
    private ZafDocLis objDocLis;
    private String strDesCorUsr, strDesLarUsr;
    
    private String strVersion="v 0.3";
    //José Marín M 22/Ene/2014
    
    /** Creates new form ZafMae63 */
    public ZafMae63(ZafParSis obj) {
        try{
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
            if (!configurarFrm())
                exitForm();
        }
        catch (CloneNotSupportedException e){
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }

//    /** This method is called from within the constructor to
//     * initialize the form.
//     * WARNING: Do NOT modify this code. The content of this method is
//     * always regenerated by the Form Editor.
//     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panDat = new javax.swing.JPanel();
        panCab = new javax.swing.JPanel();
        lblTipDoc = new javax.swing.JLabel();
        txtTipPrg = new javax.swing.JTextField();
        txtNomPrg = new javax.swing.JTextField();
        butPrg = new javax.swing.JButton();
        txtNumCta = new javax.swing.JTextField();
        txtNumPro = new javax.swing.JTextField();
        lblUsr = new javax.swing.JLabel();
        txtCodUsr = new javax.swing.JTextField();
        txtDesCorUsr = new javax.swing.JTextField();
        txtDesLarUsr = new javax.swing.JTextField();
        butUsr = new javax.swing.JButton();
        panDet = new javax.swing.JPanel();
        spnDet = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Información del registro actual");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        tabFrm.setPreferredSize(new java.awt.Dimension(459, 473));

        panDat.setPreferredSize(new java.awt.Dimension(600, 80));
        panDat.setLayout(new java.awt.BorderLayout());

        panCab.setPreferredSize(new java.awt.Dimension(610, 50));
        panCab.setLayout(null);

        lblTipDoc.setText("Programa:");
        lblTipDoc.setToolTipText("Programa");
        panCab.add(lblTipDoc);
        lblTipDoc.setBounds(2, 4, 70, 20);

        txtTipPrg.setMaximumSize(null);
        txtTipPrg.setPreferredSize(new java.awt.Dimension(70, 20));
        txtTipPrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTipPrgActionPerformed(evt);
            }
        });
        txtTipPrg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTipPrgFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTipPrgFocusLost(evt);
            }
        });
        panCab.add(txtTipPrg);
        txtTipPrg.setBounds(72, 4, 80, 20);

        txtNomPrg.setMaximumSize(null);
        txtNomPrg.setPreferredSize(new java.awt.Dimension(70, 20));
        txtNomPrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomPrgActionPerformed(evt);
            }
        });
        txtNomPrg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomPrgFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomPrgFocusLost(evt);
            }
        });
        panCab.add(txtNomPrg);
        txtNomPrg.setBounds(152, 4, 500, 20);

        butPrg.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        butPrg.setText("...");
        butPrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrgActionPerformed(evt);
            }
        });
        panCab.add(butPrg);
        butPrg.setBounds(655, 4, 20, 20);

        txtNumCta.setMaximumSize(null);
        txtNumCta.setPreferredSize(new java.awt.Dimension(70, 20));
        panCab.add(txtNumCta);
        txtNumCta.setBounds(180, 25, 0, 0);

        txtNumPro.setMaximumSize(null);
        txtNumPro.setPreferredSize(new java.awt.Dimension(70, 20));
        panCab.add(txtNumPro);
        txtNumPro.setBounds(180, 46, 0, 0);

        lblUsr.setText("Usuario:");
        lblUsr.setToolTipText("Tipo de documento");
        panCab.add(lblUsr);
        lblUsr.setBounds(0, 25, 50, 20);

        txtCodUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodUsrActionPerformed(evt);
            }
        });
        panCab.add(txtCodUsr);
        txtCodUsr.setBounds(40, 25, 32, 20);

        txtDesCorUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorUsrActionPerformed(evt);
            }
        });
        txtDesCorUsr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorUsrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorUsrFocusLost(evt);
            }
        });
        panCab.add(txtDesCorUsr);
        txtDesCorUsr.setBounds(72, 25, 80, 20);

        txtDesLarUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarUsrActionPerformed(evt);
            }
        });
        txtDesLarUsr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarUsrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarUsrFocusLost(evt);
            }
        });
        panCab.add(txtDesLarUsr);
        txtDesLarUsr.setBounds(152, 25, 500, 20);

        butUsr.setText("...");
        butUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUsrActionPerformed(evt);
            }
        });
        panCab.add(butUsr);
        butUsr.setBounds(655, 25, 20, 20);

        panDat.add(panCab, java.awt.BorderLayout.NORTH);

        panDet.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDet.setViewportView(tblDat);

        panDet.add(spnDet, java.awt.BorderLayout.CENTER);

        panDat.add(panDet, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panDat);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());
        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
// TODO add your handling code here:
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="¿Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                if(con!=null){
                    con.close();
                    con=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e)
        {
            dispose();
        }
            
}//GEN-LAST:event_exitForm

private void butPrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrgActionPerformed
// TODO add your handling code here:
    mostrarVenConPrg(0);
}//GEN-LAST:event_butPrgActionPerformed

private void txtTipPrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTipPrgActionPerformed
// TODO add your handling code here:
    txtTipPrg.transferFocus();
}//GEN-LAST:event_txtTipPrgActionPerformed

private void txtTipPrgFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTipPrgFocusGained
// TODO add your handling code here:
    strTipPrg=txtTipPrg.getText();
    txtTipPrg.selectAll();
}//GEN-LAST:event_txtTipPrgFocusGained

private void txtTipPrgFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTipPrgFocusLost
// TODO add your handling code here:
      if (!txtTipPrg.getText().equalsIgnoreCase(strTipPrg)){
            if (txtTipPrg.getText().equals("")){
                txtTipPrg.setText("");
                txtNomPrg.setText("");
            }
            else{
                mostrarVenConPrg(1);
            }
        }
        else
            txtTipPrg.setText(strTipPrg);
}//GEN-LAST:event_txtTipPrgFocusLost

private void txtNomPrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomPrgActionPerformed
// TODO add your handling code here:
    txtNomPrg.transferFocus();
}//GEN-LAST:event_txtNomPrgActionPerformed

private void txtNomPrgFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPrgFocusGained
// TODO add your handling code here:
    strNomPrg=txtNomPrg.getText();
    txtNomPrg.selectAll();
}//GEN-LAST:event_txtNomPrgFocusGained

private void txtNomPrgFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPrgFocusLost
// TODO add your handling code here:
      if (!txtNomPrg.getText().equalsIgnoreCase(strNomPrg)){
            if (txtNomPrg.getText().equals("")){
                txtTipPrg.setText("");
                txtNomPrg.setText("");
            }
            else{
                mostrarVenConPrg(2);
            }
        }
        else   
            txtNomPrg.setText(strNomPrg); 
}//GEN-LAST:event_txtNomPrgFocusLost

    private void txtCodUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodUsrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodUsrActionPerformed

    private void txtDesCorUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorUsrActionPerformed
        txtDesCorUsr.transferFocus();
    }//GEN-LAST:event_txtDesCorUsrActionPerformed

    private void txtDesCorUsrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorUsrFocusGained
        strDesCorUsr=txtDesCorUsr.getText();
        txtDesCorUsr.selectAll();
    }//GEN-LAST:event_txtDesCorUsrFocusGained

    private void txtDesCorUsrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorUsrFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesCorUsr.getText().equalsIgnoreCase(strDesCorUsr))
        {
            if (txtDesCorUsr.getText().equals(""))
            {
                txtCodUsr.setText("");
                txtDesLarUsr.setText("");
            }
            else
            {
                mostrarVenConUsr(1);
            }
        }
        else
        txtDesCorUsr.setText(strDesCorUsr);
    }//GEN-LAST:event_txtDesCorUsrFocusLost

    private void txtDesLarUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarUsrActionPerformed
        txtDesLarUsr.transferFocus();
    }//GEN-LAST:event_txtDesLarUsrActionPerformed

    private void txtDesLarUsrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarUsrFocusGained
        strDesLarUsr=txtDesLarUsr.getText();
        txtDesLarUsr.selectAll();
    }//GEN-LAST:event_txtDesLarUsrFocusGained

    private void txtDesLarUsrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarUsrFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesLarUsr.getText().equalsIgnoreCase(strDesLarUsr))
        {
            if (txtDesLarUsr.getText().equals(""))
            {
                txtCodUsr.setText("");
                txtDesCorUsr.setText("");
            }
            else
            {
                mostrarVenConUsr(2);
            }
        }
        else
        txtDesLarUsr.setText(strDesLarUsr);
    }//GEN-LAST:event_txtDesLarUsrFocusLost

    private void butUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUsrActionPerformed
        mostrarVenConUsr(0);
    }//GEN-LAST:event_butUsrActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butPrg;
    private javax.swing.JButton butUsr;
    private javax.swing.JLabel lblTipDoc;
    private javax.swing.JLabel lblTit;
    private javax.swing.JLabel lblUsr;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panDat;
    private javax.swing.JPanel panDet;
    private javax.swing.JPanel panFrm;
    private javax.swing.JScrollPane spnDet;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodUsr;
    private javax.swing.JTextField txtDesCorUsr;
    private javax.swing.JTextField txtDesLarUsr;
    private javax.swing.JTextField txtNomPrg;
    private javax.swing.JTextField txtNumCta;
    private javax.swing.JTextField txtNumPro;
    private javax.swing.JTextField txtTipPrg;
    // End of variables declaration//GEN-END:variables

//    /** Cerrar la aplicación. */
    private void exitForm(){
        dispose();
    }   
    
    
//       /**
//     * Esta funcion permite utilizar la "Ventana de Consulta" para seleccionar un
//     * registro de la base de datos. El tipo de bï¿½squeda determina si se debe hacer
//     * una busqueda directa (No se muestra la ventana de consulta a menos que no 
//     * exista lo que se estï¿½ buscando) o presentar la ventana de consulta para que
//     * el usuario seleccione la opciï¿½n que desea utilizar.
//     * @param intTipBus El tipo de busqueda a realizar.
//     * @return true: Si no se presenta ningun problema.
//     * <BR>false: En el caso contrario.
//     */   
   private boolean mostrarVenConPrg(int intTipBus){
        boolean blnRes=true;
        try{
            System.out.println("mostrarVenConPrg....");
            switch (intTipBus){
                case 0: //Mostrar la ventana de consulta.
                    vcoPrg.setCampoBusqueda(1);
                    vcoPrg.show();
                    if (vcoPrg.getSelectedButton()==vcoPrg.INT_BUT_ACE){
                        txtTipPrg.setText(vcoPrg.getValueAt(1));
                        txtNomPrg.setText(vcoPrg.getValueAt(2));
                        if(objTooBar.getEstado()=='n')
                            cargarProgramas();
                    }
                    break;
                case 1: //Búsqueda directa por "Código".
                    if (vcoPrg.buscar("a1.co_mnu", txtTipPrg.getText())){
                        txtTipPrg.setText(vcoPrg.getValueAt(1));
                        txtNomPrg.setText(vcoPrg.getValueAt(2));
                        if(objTooBar.getEstado()=='n')
                            cargarProgramas();
                    }
                    else{
                        vcoPrg.setCampoBusqueda(0);
                        vcoPrg.setCriterio1(11);
                        vcoPrg.cargarDatos();
                        vcoPrg.show();
                        if (vcoPrg.getSelectedButton()==vcoPrg.INT_BUT_ACE)
                        {
                            txtTipPrg.setText(vcoPrg.getValueAt(1));
                            txtNomPrg.setText(vcoPrg.getValueAt(2));
                            if(objTooBar.getEstado()=='n')
                            cargarProgramas();
                        }
                        else
                        {
                            txtTipPrg.setText(strTipPrg);
                        }
                    }
                    
                    break;
                case 2: //Búsqueda directa por "Nombre".
                    if (vcoPrg.buscar("a1.tx_nom", txtNomPrg.getText())){
                        txtTipPrg.setText(vcoPrg.getValueAt(1));
                        txtNomPrg.setText(vcoPrg.getValueAt(2));
                        if(objTooBar.getEstado()=='n')
                            cargarProgramas();
                    }
                    else{
                        vcoPrg.setCampoBusqueda(1);
                        vcoPrg.setCriterio1(11);
                        vcoPrg.cargarDatos();
                        vcoPrg.show();
                        if (vcoPrg.getSelectedButton()==vcoPrg.INT_BUT_ACE)
                        {
                            txtTipPrg.setText(vcoPrg.getValueAt(1));
                            txtNomPrg.setText(vcoPrg.getValueAt(2));
                        if(objTooBar.getEstado()=='n')
                            cargarProgramas();
                        }
                        else
                        {
                            txtNomPrg.setText(strNomPrg);
                        }
                    }
                    break;
            }  
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
//    /** Configurar el formulario. */
    private boolean configurarFrm(){
        boolean blnRes=true;
        
        try{
            //Inicializar objetos.
            System.out.println("configurarFrm....");
            objUti=new ZafUtil();
            objTooBar=new MiToolBar(this);
            panBar.add(objTooBar);
            blnPre=false;
            intSelPrd=0;
            this.setTitle(objParSis.getNombreMenu() + strVersion);
            lblTit.setText(objParSis.getNombreMenu());
            txtTipPrg.setBackground(objParSis.getColorCamposObligatorios());
            txtNomPrg.setBackground(objParSis.getColorCamposObligatorios());
            txtDesCorUsr.setBackground(objParSis.getColorCamposObligatorios());
            txtCodUsr.setBackground(objParSis.getColorCamposObligatorios());
            txtDesLarUsr.setBackground(objParSis.getColorCamposObligatorios());
            configurarVenConUsr();
             txtCodUsr.setVisible(false);
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(7);   //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_CHK,"");
            vecCab.add(INT_TBL_DAT_COD_DEP,"Cód.Ofi.");
            vecCab.add(INT_TBL_DAT_NOM_DEP,"Oficina");
            vecCab.add(INT_TBL_DAT_CHK_PRD,"Pre.");
            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_DEP).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_NOM_DEP).setPreferredWidth(200);
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRD).setPreferredWidth(30);
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_DAT_CHK).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_CHK);
            vecAux.add("" + INT_TBL_DAT_CHK_PRD);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            //Configurar JTable: Editor de la tabla.
            //objTblEdi=new ZafTblEdi(tblDat);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk=new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellRenderer(objTblCelRenChk);
            objTblCelEdiChk=new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {

                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)){
                        if(intSelRepSelPrd==0){
                            intSelRepSelPrd++;
                            intSelPrd=1;
                        }
                    }
                    else{
                        objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRD);
                    }
                }
            });
            objTblCelRenChkPrd=new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRD).setCellRenderer(objTblCelRenChkPrd);
            objTblCelEdiChkPrd=new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRD).setCellEditor(objTblCelEdiChkPrd);
            objTblCelEdiChkPrd.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if( ! objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)){
                        mostrarMsgInf("<HTML>El programa no ha sido seleccionado.<BR>Seleccione el programa y vuelva a intentarlo.</HTML>");
                    }
                }
            });

            objTblCelEdiChkPre = new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRD).setCellEditor(objTblCelEdiChkPre);
            objTblCelEdiChkPre.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK))
                    objTblCelEdiChkPre.setCancelarEdicion(false);
                else
                    objTblCelEdiChkPre.setCancelarEdicion(true);

            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRD)){
                    blnPre=true;
                    quitarPredeterminadoAnterior(tblDat.getSelectedRow());
                }
                else
                    blnPre=false;
            }
            });
            
            configurarVenConTipPrg();
            txtTipPrg.setBackground(objParSis.getColorCamposObligatorios());
            txtNomPrg.setBackground(objParSis.getColorCamposObligatorios());
            
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            objTblOrd=new ZafTblOrd(tblDat);
            objTblBus=new ZafTblBus(tblDat);
            
            objTooBar.setVisibleAnular(false);
            objDocLis=new ZafDocLis();
            System.out.println("Se configuara la tabla!!!!... ");
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    
//    /**
//     * Esta función configura la "Ventana de consulta" que será utilizada para
//     * mostrar los "Programas".
//     */
    private boolean configurarVenConTipPrg()
    {
     boolean blnRes=true;
    int intCodEmp, intCodEmpGrp, intCodMnu;
        try
        { 
            System.out.println("configurarVenConTipPrg....");
            intCodEmp=objParSis.getCodigoEmpresa();
            intCodEmpGrp = objParSis.getCodigoEmpresaGrupo();
            intCodMnu= objParSis.getCodigoMenu(); 
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_mnu");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Programa");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            
            arlAncCol.add("50");
            arlAncCol.add("494");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+=" SELECT DISTINCT a1.co_mnu, a1.tx_nom";
            strSQL+=" FROM tbm_mnuSis AS a1";
            strSQL+=" WHERE (a1.tx_tipMnu='C' or a1.tx_tipMnu='R') and a1.tx_nom!=''";
            strSQL+=" AND a1.st_reg<>'E' AND a1.tx_acc IS NOT NULL";
            strSQL+=" ORDER BY a1.tx_nom";
            System.out.println("configurarVenConTipPrg " + strSQL);
            vcoPrg=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de programas", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoPrg.setConfiguracionColumna(1, javax.swing.JLabel.LEFT);
            vcoPrg.setConfiguracionColumna(2, javax.swing.JLabel.LEFT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
//    /**
//     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
//     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
//     * insertar, consultar, modificar, eliminar, etc. Además de los botones de navegación
//     * que permiten desplazarse al primero, anterior, siguiente y último registro.
//     */
    private class MiToolBar extends ZafToolBar{
        public MiToolBar(javax.swing.JInternalFrame ifrFrm)
        {
            super(ifrFrm, objParSis);
        }

        public boolean anular()
        {
            return true;
        }

        public void clickAceptar()
        {
            System.out.println("clickAceptar....");
        }

        public void clickAnterior() 
        {
            try{
                System.out.println("clickAnterior....");
                if (!rstCab.isFirst()){
                    if (blnHayCam || objTblMod.isDataModelChanged()){
                        if (isRegPro()){
                            rstCab.previous();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.previous();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnular()
        {
            
        }

        public void clickCancelar()
        {
            System.out.println("clickCancelar....");
            intSelPrd=0;
            limpiarFrm();
        }

        public void clickConsultar(){
            System.out.println("clickConsultar::..");
             cargarDetReg();
        }

        public void clickEliminar()
        {
            
        }

        public void clickFin() 
        {
            try{
                System.out.println("clickFin....");
                if (!rstCab.isLast()){
                    if (blnHayCam  || objTblMod.isDataModelChanged()){
                        if (isRegPro()){
                            rstCab.last();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.last();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickImprimir()
        {
            
        }

        public void clickInicio()
        {
            try{
                System.out.println("clickInicio....");
                if (!rstCab.isFirst()){
                    if (blnHayCam  || objTblMod.isDataModelChanged()){
                        if (isRegPro()){
                            rstCab.first();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.first();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickInsertar(){
            try{
                System.out.println("clickInsertar....");
                if (blnHayCam){
                    isRegPro();
                }
                if (rstCab!=null){
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                //cargarReportesSistema();
                intSelRepSelPrd=0;
                limpiarFrm();
               // consultarReg();
              // cargarOpcMnu();
                txtNomPrg.requestFocus();
                objTblMod.setModoOperacion(ZafTblMod.INT_TBL_EDI);
                txtNomPrg.requestFocus();
                blnHayCam=false;
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            
            
            
            
        }

        public void clickModificar()
        {
            System.out.println("clickModificar....");
            txtTipPrg.setEditable(false);
            txtNomPrg.setEditable(false);
            butPrg.setEnabled(false);
            
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            cargarDetReg();
            //blnPre=true;
        }

        public void clickSiguiente()
        {
            try{
                System.out.println("clickSiguiente....");
                if (!rstCab.isLast()){
                    if (blnHayCam  || objTblMod.isDataModelChanged()){
                        if (isRegPro()){
                            rstCab.next();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.next();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickVisPreliminar() 
        {
        }

        public boolean consultar(){
            System.out.println("consultar....");
            consultarReg();
             return true;
        }

        public boolean eliminar(){
            try{
                System.out.println("eliminar....");
                if (!eliminarReg())
                    return false;
                //Desplazarse al siguiente registro si es posible.
                if (!rstCab.isLast()){
                    rstCab.next();
                    cargarReg();
                }
                else{
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                }
                blnHayCam=false;
            }
            catch (java.sql.SQLException e){
                return true;
            }
            return true;
            
            
            
            
            
        }

        public boolean insertar()
        {
            System.out.println("insertar....");
            if (!insertarReg())
                return false;
            return true;
        }

        public boolean modificar(){
        System.out.println("modificar....");
            if (!actualizarReg())
                return false;
            return true;
        }
        
        public boolean cancelar()
        {
            System.out.println("cancelar....");
            boolean blnRes=true;
            try{
                if (blnHayCam){
                    if (objTooBar.getEstado()=='n' || objTooBar.getEstado()=='m'){
                        if (!isRegPro())
                            return false;
                    }
                }
                if (rstCab!=null){
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            limpiarFrm();
            blnHayCam=false;
            return blnRes;
        }
        
        public boolean vistaPreliminar()
        {
            return true;
        }
        
        public boolean aceptar()
        {
            return true;
        }
        
        public boolean imprimir()
        {
            return true;
        }
        
        public boolean beforeInsertar(){
            System.out.println("beforeInsertar....");
            boolean blnRes=true;
            if(!isCamVal()){
                blnRes=false;
            }
            return blnRes;
        }
        
        public boolean beforeConsultar(){
            
            return true;
        }

        public boolean beforeModificar()
        {

            return true;
        }

        public boolean beforeEliminar()
        {

            return true;
        }

        public boolean beforeAnular()
        {
            return true;
        }

        public boolean beforeImprimir()
        {
            return true;
        }

        public boolean beforeVistaPreliminar()
        {
            return true;
        }

        public boolean beforeAceptar()
        {
            return true;
        }
        
        public boolean beforeCancelar()
        {
            return true;
        }
        
        public boolean afterInsertar()
        {
            System.out.println("afterInsertar....");
            blnHayCam=false;
            //Configurar JFrame de acuerdo al estado del registro.
            objTooBar.setEstado('n');
            intSelPrd=0;
           // consultarReg();
            objTblMod.initRowsState();
            blnHayCam=false;
            return true;
        }

        public boolean afterConsultar()
        {
            System.out.println("afterConsultar....");
            intSelPrd=0;
            objTblMod.initRowsState();
            return true;
        }

        public boolean afterModificar()
        {
            System.out.println("afterModificar....");
            intSelPrd=0;
            blnHayCam=false;
            objTblMod.initRowsState();
           // limpiarFrm();
            return true;
        }

        public boolean afterEliminar()
        {
            System.out.println("afterEliminar....");
            intSelPrd=0;
            objTblMod.initRowsState();
            return true;
        }

        public boolean afterAnular()
        {
            System.out.println("afterAnular....");
            intSelPrd=0;
            objTblMod.initRowsState();
            return true;
        }

        public boolean afterImprimir()
        {
            return true;
        }

        public boolean afterVistaPreliminar()
        {
            return true;
        }

        public boolean afterAceptar()
        {
            return true;
        }
        
        public boolean afterCancelar()
        {
            return true;
        }
        
    }
    
    
//    /**
//     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
//     * del mouse (mover el mouse; arrastrar y soltar).
//     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
//     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
//     * resulta muy corto para mostrar leyendas que requieren más espacio.
//     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD_DEP:
                    strMsg="Código del departamento";
                    break;
                case INT_TBL_DAT_NOM_DEP:
                    strMsg="Nombre del departamento";
                    break;
                case INT_TBL_DAT_CHK_PRD:
                    strMsg="Predeterminado";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
    
    private boolean isCamVal(){
        
        
        //Validar el "Tipo de documento".
        if (txtTipPrg.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Programa</FONT> es obligatorio.<BR>Escriba o seleccione un programa y vuelva a intentarlo.</HTML>");
            txtNomPrg.requestFocus();
            return false;
        }
        if (txtDesCorUsr.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Usuario</FONT> es obligatorio.<BR>Escriba o seleccione un usuario y vuelva a intentarlo</HTML>");
            txtDesCorUsr.requestFocus();
            return false;
        }
        if(isRegInsertados()){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El registro seleccionado ya ha sido ingresado.<BR>Consulte el registro y luego modifiquelo.</HTML>");
            txtNomPrg.requestFocus();
            return false;
        }
        
        if(isRegAlgunInsertado()){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>No ha seleccionado ningun Registro.</HTML>");
            txtNomPrg.requestFocus();
            return false;
        }
        
        
        return true;
    }
    
    /**
     * Esta funci�n muestra un mensaje informativo al usuario. Se podr�a utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
  
    private boolean isRegInsertados(){
        boolean blnRes=false;
        try{
            System.out.println("isRegInsertados....");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                        if (objTblMod.isChecked(i, INT_TBL_DAT_CHK)) {
                strSQL="";
                strSQL+="SELECT *";
                strSQL+=" FROM tbr_ofiLocPrgUsr WHERE";
                strSQL+=" co_mnu=" +  txtTipPrg.getText() + "";
                strSQL+=" AND co_usr=" +  txtCodUsr.getText() + "";
                strSQL+=" AND co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND co_loc=" + objParSis.getCodigoLocal() + "";
                System.out.println(strSQL);
                rst=stm.executeQuery(strSQL);
                if(rst.next()){
                    blnRes=true;
                }
                        }
                }
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                con.close();
                con=null;
            }
            
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    private boolean insertarReg(){
        boolean blnRes=false;
        try{
            System.out.println("insertarReg.....");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (insertar_tbrRptSisUsr()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean insertar_tbrRptSisUsr(){
        boolean blnRes=true;
        try{
            System.out.println("insertar_tbrRptSisUsr.....");
            if (con!=null){
                stm=con.createStatement();
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    if ((objUti.parseString(objTblMod.getValueAt(i,0)).equals("M")) ||  (objTblMod.isChecked(i, INT_TBL_DAT_CHK))) {
                        if(objTblMod.isChecked(i, INT_TBL_DAT_CHK)){
                            strSQL="";
                            strSQL+="INSERT INTO tbr_ofiLocPrgUsr(";
                            strSQL+="co_emp,co_loc,co_mnu,co_usr,co_ofi,st_reg)";
                            strSQL+="VALUES (";
                            strSQL+="" + objParSis.getCodigoEmpresa() + ",";
                            strSQL+="" + objParSis.getCodigoLocal() + ",";
                            strSQL+="" + txtTipPrg.getText() + ",";
                            strSQL+="" + txtCodUsr.getText() + ",";
                            strSQL+="" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_DEP) + ",";//co_emp
                           if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRD)){
                                strSQL+="'P'";//st_reg
                            }
                            else{
                                strSQL+="'A'";//st_reg
                            }
                            strSQL+=");";
                            stm.executeUpdate(strSQL);
                        }
                        else{
                            strSQL="";
                            strSQL+=" DELETE FROM tbr_ofiLocPrgUsr WHERE";
                            strSQL+=" co_emp=" + objParSis.getCodigoEmpresa() + " AND";
                            strSQL+=" co_loc=" + objParSis.getCodigoLocal() + " AND";
                            strSQL+=" co_mnu=" + txtTipPrg.getText() + " AND";
                            strSQL+=" co_usr=" + txtCodUsr.getText() + " AND";
                            strSQL+=" co_ofi=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_DEP) + ";";
                            System.out.println(strSQL);
                            stm.executeUpdate(strSQL);
                        }
                    }
                }           
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean limpiarFrm(){
        txtTipPrg.setText("");
        txtNomPrg.setText("");
        txtCodUsr.setText("");
            txtDesCorUsr.setText("");
            txtDesLarUsr.setText("");
        objTblMod.removeAllRows();
        return true;
    }

    
    /**
     * Esta funci�n permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean consultarReg(){
        int intCodEmp, intCodLoc;
        boolean blnRes=true;
        try{
            intCodEmp=objParSis.getCodigoEmpresa();
            intCodLoc=objParSis.getCodigoLocal();
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null){
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                //Validar que s�lo se muestre los documentos asignados al programa.
                strSQL="";
                strSQL+=" SELECT DISTINCT a1.co_mnu, a1.co_usr";
                strSQL+=" FROM tbr_ofiLocPrgUsr a1 ";
                strSQL+=" WHERE a1.st_reg in ('A','P')  ";
                if (!txtTipPrg.getText().equals(""))
                    strSQL+=" and a1.co_mnu=" + txtTipPrg.getText();
                if (!txtCodUsr.getText().equals(""))
                    strSQL+=" and a1.co_usr=" + txtCodUsr.getText();
                strSQL+=" AND a1.co_emp="+ objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a1.co_loc="+ objParSis.getCodigoLocal() + "";
                System.out.println("consultarReg......rstCab: " + strSQL);
                rstCab=stmCab.executeQuery(strSQL);
                if (rstCab.next())
                {
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    cargarReg();
                }
                else
                {
                    mostrarMsgInf("No se ha encontrado ning�n registro que cumpla el criterio de b�squeda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
//    /**
//     * Esta funci�n permite cargar el registro seleccionado.
//     * @return true: Si se pudo cargar el registro.
//     * <BR>false: En el caso contrario.
//     */
    private boolean cargarReg()
    {
        boolean blnRes=true;
        try
        {
            System.out.println("cargarReg....");
            if (cargarCabReg())
            {
                cargarDetReg();
            }
            blnHayCam=false;
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }
    
//    /**
//     * Esta funci�n permite cargar la cabecera del registro seleccionado.
//     * @return true: Si se pudo cargar la cabecera del registro.
//     * <BR>false: En el caso contrario.
//     */
    private boolean cargarCabReg(){
        int intPosRel;
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+=" SELECT DISTINCT a1.co_mnu, a3.tx_nom, a1.co_usr,a5.tx_usr, a5.tx_nom as tx_nomUsr";
                strSQL+=" FROM tbr_ofiLocPrgUsr as a1"; 
                strSQL+=" INNER JOIN tbm_ofi as a2 ON(a1.co_ofi=a2.co_ofi)";
                strSQL+=" INNER JOIN tbm_mnuSis as a3 ON (a1.co_mnu=a3.co_mnu)";
                strSQL+=" INNER JOIN tbm_usr as a5 ON (a1.co_usr=a5.co_usr)";
                strSQL+=" WHERE a1.st_reg='A'";
                strSQL+=" and a1.co_mnu="+ rstCab.getString("co_mnu") + "";
                strSQL+=" and a1.co_usr="+ rstCab.getString("co_usr") + "";
                strSQL+=" AND a1.co_emp="+ objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a1.co_loc="+ objParSis.getCodigoLocal() + "";
                System.out.println("cargarCabReg::.. " + strSQL);
                rst=stm.executeQuery(strSQL);
                if (rst.next()){
                    strAux=rst.getString("co_mnu");
                    txtTipPrg.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_nom");
                    txtNomPrg.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("co_usr");
                    txtCodUsr.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_usr");
                    txtDesCorUsr.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_nomUsr");
                    txtDesLarUsr.setText((strAux==null)?"":strAux);
                    objTooBar.setEstadoRegistro("");
                }
                else
                {
                    limpiarFrm();
                    blnRes=false;
                }
            }
            rst.close();
            stm.close();
            con.close();
            rst=null;
            stm=null;
            con=null;
            //Mostrar la posici�n relativa del registro.
            intPosRel=rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
   
//    /**
//     * Esta funci�n permite cargar el detalle del registro seleccionado.
//     * @return true: Si se pudo cargar el detalle del registro.
//     * <BR>false: En el caso contrario.
//     */
    private boolean cargarDetReg(){
        int intCodEmp, intCodLoc;
        boolean blnRes=true;
        try{
            objTblMod.removeAllRows();
            if (!txtTipPrg.getText().equals("")){
//                objTooBar.setMenSis("Obteniendo datos...");
                con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
                if (con!=null){
                    stm=con.createStatement();
                    
                    if (objTooBar.getEstado()=='x' || objTooBar.getEstado()=='m'){
                        strSQL="";
                        strSQL+=" SELECT a.co_ofi, a.tx_nom,CASE WHEN b.st_reg IS NULL THEN 'N' ELSE b.st_reg END as st_reg";
                        strSQL+=" FROM (";
                        strSQL+=" SELECT a1.co_ofi, a1.tx_nom";
                        strSQL+=" FROM tbm_ofi as a1";
                        strSQL+=" ) as a ";
                        strSQL+=" LEFT OUTER JOIN (";
                        strSQL+=" SELECT a1.co_ofi, a2.tx_nom, a1.st_reg";
                        strSQL+=" FROM tbr_ofiLocPrgUsr as a1 ";
                        strSQL+=" INNER JOIN tbm_ofi as a2 ON (a1.co_ofi=a2.co_ofi) ";
                        strSQL+=" WHERE a1.st_reg in ('A','P') and a1.co_mnu=" + rstCab.getString("co_mnu") +" AND";
                        strSQL+=" a1.co_usr=" + rstCab.getString("co_usr");
                        strSQL+=" AND a1.co_emp="+ objParSis.getCodigoEmpresa() + "";
                        strSQL+=" AND a1.co_loc="+ objParSis.getCodigoLocal() + " ";
                        strSQL+=" ) as b ON (a.co_ofi=b.co_ofi)";
                        strSQL+=" ORDER BY a.co_ofi";
                    }
                    else{
                        strSQL="";
                        strSQL+=" SELECT a1.co_ofi, a2.tx_nom, a1.st_reg ";
                        strSQL+=" FROM tbr_ofiLocPrgUsr as a1"; 
                        strSQL+=" INNER JOIN tbm_ofi as a2 ON (a1.co_ofi=a2.co_ofi)";
                        strSQL+=" WHERE a1.st_reg in ('A','P') and a1.co_mnu=" + rstCab.getString("co_mnu") + "";
                        strSQL+=" and a1.co_usr=" + rstCab.getString("co_usr") + "";
                        strSQL+=" AND a1.co_emp="+ objParSis.getCodigoEmpresa() + "";
                        strSQL+=" AND a1.co_loc="+ objParSis.getCodigoLocal() + "";
                    }
                    
                System.out.println("cargarDetReg::.." + strSQL);
                    rst=stm.executeQuery(strSQL);
                    //Limpiar vector de datos.
                    vecDat.clear();
                while (rst.next()){
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN,"");
                    if(rst.getString("st_reg").equals("A") || rst.getString("st_reg").equals("P"))
                        vecReg.add(INT_TBL_DAT_CHK,true);
                    else
                        vecReg.add(INT_TBL_DAT_CHK,false);
                    vecReg.add(INT_TBL_DAT_COD_DEP, rst.getString("co_ofi"));
                    vecReg.add(INT_TBL_DAT_NOM_DEP,rst.getString("tx_nom"));
                    if(rst.getString("st_reg").equals("P"))
                        vecReg.add(INT_TBL_DAT_CHK_PRD,true);
                    else
                        vecReg.add(INT_TBL_DAT_CHK_PRD,false);
                    
                    vecDat.add(vecReg);
                }

                    rst.close();
                    stm.close();
                    con.close();
                    rst=null;
                    stm=null;
                    con=null;
                    //Asignar vectores al modelo.
                    objTblMod.setData(vecDat);
                    tblDat.setModel(objTblMod);
                    vecDat.clear();
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean actualizarReg(){
        boolean blnRes=false;
        try{
            System.out.println("actualizarReg....");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (eliminar_tbrRptSisUsr()){
                    if (insertar_tbrRptSisUsr()){
                        con.commit();
                        blnRes=true;
                    }
                    else
                        con.rollback();
                }
                else
                    con.rollback();


            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean eliminar_tbrRptSisUsr(){
        boolean blnRes=true;
        try{
            System.out.println("eliminar_tbrRptSisUsr....");
            if (con!=null){
                 stm=con.createStatement();
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                        if (objTblMod.isChecked(i, INT_TBL_DAT_CHK)) {
                            strSQL="";
                            strSQL+="DELETE FROM tbr_ofiLocPrgUsr";
                            strSQL+=" WHERE co_mnu=" + txtTipPrg.getText() + "";
                            strSQL+=" and co_usr=" + txtCodUsr.getText() + "";
                            strSQL+=" and co_ofi=" + objTblMod.getValueAt(i,INT_TBL_DAT_COD_DEP);
                            strSQL+=" and co_emp=" + objParSis.getCodigoEmpresa();
                            strSQL+=" and co_loc=" + objParSis.getCodigoLocal(); 
                            System.out.println(strSQL);
                            stm.executeUpdate(strSQL);
                        }
                }
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean eliminarReg(){
        boolean blnRes=false;
        try{
            System.out.println("eliminarReg....");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (eliminar_tbrRptSisUsr()){
                    con.commit();
                    blnRes=true;
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                }
                else
                    con.rollback();
                con.close();
                con=null;
            }
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
   
//    /**
//     * Esta clase implementa la interface DocumentListener que observa los cambios que
//     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
//     * Se la usa en el sistema para determinar si existe alg�n cambio que se deba grabar
//     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
//     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
//     * presentar� un mensaje advirtiendo que si no guarda los cambios los perder�.
//     */
    class ZafDocLis implements javax.swing.event.DocumentListener 
    {
        public void changedUpdate(javax.swing.event.DocumentEvent evt)        {
            blnHayCam=true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }
    }
    
    
//    /**
//     * Esta funci�n se encarga de agregar el listener "DocumentListener" a los objetos
//     * de tipo texto para poder determinar si su contenido a cambiado o no.
//     */
    private boolean isRegPro()
    {
        System.out.println("isRegPro....");
        boolean blnRes=true;
        strAux="�Desea guardar los cambios efectuados a �ste registro?\n";
        strAux+="Si no guarda los cambios perder� toda la informaci�n que no haya guardado.";
        switch (mostrarMsgCon(strAux))
        {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado())
                {
                    case 'n': //Insertar
                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }
    
//    /**
//     * Esta funci�n muestra un mensaje "showConfirmDialog". Presenta las opciones
//     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
//     * seleccionando una de las opciones que se presentan.
//     */
    
    private int mostrarMsgCon(String strMsg){
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    
//    /**
//     * Esta funci�n se encarga de agregar el listener "DocumentListener" a los objetos
//     * de tipo texto para poder determinar si su contenido a cambiado o no.
//     */
    
    private void agregarDocLis()
    {
        System.out.println("agregarDocLis....");
        txtTipPrg.getDocument().addDocumentListener(objDocLis);
        txtNomPrg.getDocument().addDocumentListener(objDocLis);

    }
    
    //    /**
//     * Esta función permite cargar las opciones del menú.
//     * @return true: Si se pudo cargar el detalle del registro.
//     * <BR>false: En el caso contrario.
//     */
    
    private boolean quitarPredeterminadoAnterior(int fila){
        boolean blnRes=true;
        try{
            for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRD)){
                    if(i!=fila)
                        objTblMod.setChecked(false, i, INT_TBL_DAT_CHK_PRD);
                }
            }
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
//    /**
//     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
//     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
//     * una búsqueda directa (No se muestra la ventana de consulta a menos que no 
//     * exista lo que se está buscando) o presentar la ventana de consulta para que
//     * el usuario seleccione la opción que desea utilizar.
//     * @param intTipBus El tipo de búsqueda a realizar.
//     * @return true: Si no se presentó ningún problema.
//     * <BR>false: En el caso contrario.
//     */
    
    private boolean mostrarVenConUsr(int intTipBus)
    {
        //System.out.println("mostrarVenConUsr...");
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoUsr.setCampoBusqueda(2);
                    vcoUsr.setVisible(true);
                    if (vcoUsr.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                    {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Descripción corta".
                    if (vcoUsr.buscar("a1.tx_usr", txtDesCorUsr.getText()))
                    {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    }
                    else
                    {
                        vcoUsr.setCampoBusqueda(1);
                        vcoUsr.setCriterio1(11);
                        vcoUsr.cargarDatos();
                        vcoUsr.setVisible(true);
                        if (vcoUsr.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodUsr.setText(vcoUsr.getValueAt(1));
                            txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                            txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                        }
                        else
                        {
                            txtDesCorUsr.setText(strDesCorUsr);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoUsr.buscar("a1.tx_nom", txtDesLarUsr.getText()))
                    {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    }
                    else
                    {
                        vcoUsr.setCampoBusqueda(2);
                        vcoUsr.setCriterio1(11);
                        vcoUsr.cargarDatos();
                        vcoUsr.setVisible(true);
                        if (vcoUsr.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodUsr.setText(vcoUsr.getValueAt(1));
                            txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                            txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                        }
                        else
                        {
                            txtDesLarUsr.setText(strDesLarUsr);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
//    /**
//     * Esta función configura la "Ventana de consulta" que será utilizada para
//     * mostrar los "Usuarios".
//     */
    private boolean configurarVenConUsr()
    {
        boolean blnRes=true;
        try
        {
            
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_usr");
            arlCam.add("a1.tx_usr");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Usuario");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("120");
            arlAncCol.add("374");
            //Armar la sentencia SQL.
            if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()){
                 strSQL=" ";
                 strSQL+=" SELECT DISTINCT a2.co_usr, a2.tx_usr, a2.tx_nom";
                 strSQL+=" FROM tbr_usremp as a1";
                 strSQL+=" INNER JOIN tbm_usr as a2 ON (a1.co_usr=a2.co_usr)";
                 strSQL+=" WHERE a2.st_reg='A'";
                 strSQL+=" ORDER BY a2.tx_nom ";
            }
            else{
                 strSQL=" ";
                 strSQL+=" SELECT DISTINCT a2.co_usr, a2.tx_usr, a2.tx_nom";
                 strSQL+=" FROM tbr_usremp as a1";
                 strSQL+=" INNER JOIN tbm_usr as a2 ON (a1.co_usr=a2.co_usr)";
                 strSQL+=" WHERE a2.st_reg='A' ";
                 strSQL+=" and a1.co_emp=" + objParSis.getCodigoEmpresa();
                 strSQL+=" ORDER BY a2.tx_nom ";          
            }   
            System.out.println("configurarVenConUsr...." + strSQL);
            vcoUsr=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de usuarios", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoUsr.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
        private boolean cargarProgramas(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT DISTINCT a1.co_ofi, a1.tx_nom";
                strSQL+=" from tbm_ofi as a1 ";
                strSQL+=" where a1.st_reg='A' ORDER BY a1.co_ofi";
                 System.out.println("cargarProgramas..." + strSQL);
                rst=stm.executeQuery(strSQL);
                while(rst.next()){
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN, "");
                    vecReg.add(INT_TBL_DAT_CHK, "");
                    vecReg.add(INT_TBL_DAT_COD_DEP, "" + rst.getObject("co_ofi")==null?"":rst.getString("co_ofi"));
                    vecReg.add(INT_TBL_DAT_NOM_DEP, "" + rst.getObject("tx_nom")==null?"":    rst.getString("tx_nom"));
                    vecReg.add(INT_TBL_DAT_CHK_PRD, "");
                    vecDat.add(vecReg);
                    blnRes=true;
                }
                if(blnRes==false)
                {
                    mostrarMsgInf("<HTML>No excisten <FONT COLOR=\"blue\">Oficinas </FONT> configurado para este programa.</HTML>");
                    
                    txtNomPrg.requestFocus();
                }
                
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                con.close();
                con=null;
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
            }
            
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
 
      private boolean isRegAlgunInsertado(){
            System.out.println("isRegAlgunInsertado....");
        if (objTblMod.isCheckedAnyRow(INT_TBL_DAT_CHK))
             return false; 
        else
            return true;
      }
        
}
