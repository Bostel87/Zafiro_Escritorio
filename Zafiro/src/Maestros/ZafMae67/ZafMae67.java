/*
 * ZafMae67.java
 *
 * Created on 1 de Agosto de 2013, 09:30 PM
 */
package Maestros.ZafMae67;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaColGrp;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaGrp;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafVenCon.ZafVenCon;
import Librerias.ZafToolBar.ZafToolBar;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;
import java.util.ArrayList;

/**
 *
 * @author  José Marín
 */
public class ZafMae67 extends javax.swing.JInternalFrame 
{
    //Constantes: Columnas del JTable.
    private static final int INT_TBL_DAT_LIN=0;                //Línea.
    private static final int INT_TBL_DAT_CHK=1;                //Casilla de verificación.
    private static final int INT_TBL_DAT_COD_EMP=2;            //Código empresa.
    private static final int INT_TBL_DAT_NOM_EMP=3;            //Nombre empresa.
    private static final int INT_TBL_DAT_COD_LOC=4;            //Código local.
    private static final int INT_TBL_DAT_NOM_LOC=5;            //Nombre local.
    private static final int INT_TBL_DAT_COD_EMP_REL=6;        //Código empresa relacionada.
    private static final int INT_TBL_DAT_NOM_EMP_REL=7;        //Nombre empresa relacionada.
    private static final int INT_TBL_DAT_COD_LOC_REL=8;        //Código local relacionado.
    private static final int INT_TBL_DAT_NOM_LOC_REL=9;        //Nombre local relacionado.
    private static final int INT_TBL_DAT_CHK_PRE=10;           //Casilla de Predeterminado.
    
    //Variables generales.
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblCelRenLbl objTblCelRenLbl;                    //Render: Presentar JLabel en JTable.
    private ZafTblCelRenLbl objTblCelRenLblLeft;                   //Render: Presentar JLabel en JTable.
    private ZafTblCelRenChk objTblCelRenChk;                    //Render: Presentar JCheckBox en JTable.
    private ZafTblCelEdiChk objTblCelEdiChk;                    //Editor: JCheckBox en celda.
    private ZafTblCelEdiChk objTblCelEdiChkPre;                 //Editor: JCheckBox en celda.
    private ZafTblFilCab objTblFilCab;
    private ZafTblMod objTblMod;
    private ZafTblEdi objTblEdi;                                //Editor: Editor del JTable.
    private ZafMouMotAda objMouMotAda;                          //ToolTipText en TableHeader.
    private ZafTblPopMnu objTblPopMnu;                          //PopupMenu: Establecer PeopuMenú en JTable.
    private ZafDocLis objDocLis;
    private ZafVenCon vcoUsr;                                   //Ventana de consulta "Usuario".
    private ZafVenCon vcoPrg;
    private ZafTblBus objTblBus;                                //Editor de búsqueda.
    private ZafTblOrd objTblOrd;                                //JTable de ordenamiento.
    private MiToolBar objTooBar;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg, vecAux;
    private int intSelPrd;
    private boolean blnHayCam, blnPre;                                  //Determina si hay cambios en el formulario.
    private String strDesCorUsr, strDesLarUsr,strTipPrg;        //Contenido del campo al obtener el foco.
    private String strNomPrg;

    /**
     * Crea una nueva instancia de la clase ZafMae67.
     */
    public ZafMae67(ZafParSis obj) 
    {
        try
        {
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
            if (!configurarFrm())
                exitForm();
            agregarDocLis();
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGen = new javax.swing.JPanel();
        panGenCab = new javax.swing.JPanel();
        lblUsr = new javax.swing.JLabel();
        txtCodUsr = new javax.swing.JTextField();
        txtDesCorUsr = new javax.swing.JTextField();
        txtDesLarUsr = new javax.swing.JTextField();
        butUsr = new javax.swing.JButton();
        lblTipDoc = new javax.swing.JLabel();
        txtTipPrg = new javax.swing.JTextField();
        txtNomPrg = new javax.swing.JTextField();
        butPrg = new javax.swing.JButton();
        panGenDet = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panGen.setLayout(new java.awt.BorderLayout());

        panGenCab.setPreferredSize(new java.awt.Dimension(0, 44));
        panGenCab.setLayout(null);

        lblUsr.setText("Usuario:");
        lblUsr.setToolTipText("Tipo de documento");
        panGenCab.add(lblUsr);
        lblUsr.setBounds(10, 20, 90, 20);
        panGenCab.add(txtCodUsr);
        txtCodUsr.setBounds(70, 20, 32, 20);

        txtDesCorUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorUsrActionPerformed(evt);
            }
        });
        txtDesCorUsr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorUsrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorUsrFocusLost(evt);
            }
        });
        panGenCab.add(txtDesCorUsr);
        txtDesCorUsr.setBounds(100, 20, 100, 20);

        txtDesLarUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarUsrActionPerformed(evt);
            }
        });
        txtDesLarUsr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarUsrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarUsrFocusLost(evt);
            }
        });
        panGenCab.add(txtDesLarUsr);
        txtDesLarUsr.setBounds(200, 20, 460, 20);

        butUsr.setText("...");
        butUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUsrActionPerformed(evt);
            }
        });
        panGenCab.add(butUsr);
        butUsr.setBounds(660, 20, 20, 20);

        lblTipDoc.setText("Programa:");
        lblTipDoc.setToolTipText("Programa");
        panGenCab.add(lblTipDoc);
        lblTipDoc.setBounds(10, 0, 90, 20);

        txtTipPrg.setMaximumSize(null);
        txtTipPrg.setPreferredSize(new java.awt.Dimension(70, 20));
        txtTipPrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTipPrgActionPerformed(evt);
            }
        });
        txtTipPrg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTipPrgFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTipPrgFocusLost(evt);
            }
        });
        panGenCab.add(txtTipPrg);
        txtTipPrg.setBounds(100, 0, 100, 20);

        txtNomPrg.setMaximumSize(null);
        txtNomPrg.setPreferredSize(new java.awt.Dimension(70, 20));
        txtNomPrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomPrgActionPerformed(evt);
            }
        });
        txtNomPrg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomPrgFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomPrgFocusLost(evt);
            }
        });
        panGenCab.add(txtNomPrg);
        txtNomPrg.setBounds(200, 0, 460, 20);

        butPrg.setText("...");
        butPrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrgActionPerformed(evt);
            }
        });
        panGenCab.add(butPrg);
        butPrg.setBounds(660, 0, 20, 20);

        panGen.add(panGenCab, java.awt.BorderLayout.NORTH);

        panGenDet.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDat.setViewportView(tblDat);

        panGenDet.add(spnDat, java.awt.BorderLayout.CENTER);

        panGen.add(panGenDet, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panGen);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());
        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void txtDesLarUsrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarUsrFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesLarUsr.getText().equalsIgnoreCase(strDesLarUsr))
        {
            if (txtDesLarUsr.getText().equals(""))
            {
                txtCodUsr.setText("");
                txtDesCorUsr.setText("");
            }
            else
            {
                mostrarVenConUsr(2);
            }
        }
        else
            txtDesLarUsr.setText(strDesLarUsr);
    }//GEN-LAST:event_txtDesLarUsrFocusLost

    private void txtDesCorUsrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorUsrFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesCorUsr.getText().equalsIgnoreCase(strDesCorUsr))
        {
            if (txtDesCorUsr.getText().equals(""))
            {
                txtCodUsr.setText("");
                txtDesLarUsr.setText("");
            }
            else
            {
                mostrarVenConUsr(1);
            }
        }
        else
            txtDesCorUsr.setText(strDesCorUsr);
    }//GEN-LAST:event_txtDesCorUsrFocusLost

    private void txtDesLarUsrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarUsrFocusGained
        strDesLarUsr=txtDesLarUsr.getText();
        txtDesLarUsr.selectAll();
    }//GEN-LAST:event_txtDesLarUsrFocusGained

    private void txtDesLarUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarUsrActionPerformed
        txtDesLarUsr.transferFocus();
    }//GEN-LAST:event_txtDesLarUsrActionPerformed

    private void txtDesCorUsrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorUsrFocusGained
        strDesCorUsr=txtDesCorUsr.getText();
        txtDesCorUsr.selectAll();
    }//GEN-LAST:event_txtDesCorUsrFocusGained

    private void txtDesCorUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorUsrActionPerformed
        txtDesCorUsr.transferFocus();
    }//GEN-LAST:event_txtDesCorUsrActionPerformed

    private void butUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUsrActionPerformed
        mostrarVenConUsr(0);
    }//GEN-LAST:event_butUsrActionPerformed

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        try
        {
            strTit="Mensaje del sistema Zafiro";
            strMsg="¿Está seguro que desea cerrar este programa?";
            if (javax.swing.JOptionPane.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                //Cerrar la conexión si está abierta.
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void txtTipPrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTipPrgActionPerformed
        txtTipPrg.transferFocus();
    }//GEN-LAST:event_txtTipPrgActionPerformed

    private void txtTipPrgFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTipPrgFocusGained
        strTipPrg=txtTipPrg.getText();
        txtTipPrg.selectAll();
    }//GEN-LAST:event_txtTipPrgFocusGained

    private void txtTipPrgFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTipPrgFocusLost
        if (!txtTipPrg.getText().equalsIgnoreCase(strTipPrg)){
            if (txtTipPrg.getText().equals("")){
                txtTipPrg.setText("");
                txtNomPrg.setText("");
            }
            else{
                mostrarVenConPrg(1);
            }
        }
        else
        txtTipPrg.setText(strTipPrg);
    }//GEN-LAST:event_txtTipPrgFocusLost

    private void txtNomPrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomPrgActionPerformed
        txtNomPrg.transferFocus();
    }//GEN-LAST:event_txtNomPrgActionPerformed

    private void txtNomPrgFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPrgFocusGained
        strNomPrg=txtNomPrg.getText();
        txtNomPrg.selectAll();
    }//GEN-LAST:event_txtNomPrgFocusGained

    private void txtNomPrgFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPrgFocusLost
        if (!txtNomPrg.getText().equalsIgnoreCase(strNomPrg)){
            if (txtNomPrg.getText().equals("")){
                txtTipPrg.setText("");
                txtNomPrg.setText("");
            }
            else{
                mostrarVenConPrg(2);
            }
        }
        else
        txtNomPrg.setText(strNomPrg);
    }//GEN-LAST:event_txtNomPrgFocusLost

    private void butPrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrgActionPerformed
        mostrarVenConPrg(0);
    }//GEN-LAST:event_butPrgActionPerformed

    ///** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butPrg;
    private javax.swing.JButton butUsr;
    private javax.swing.JLabel lblTipDoc;
    private javax.swing.JLabel lblTit;
    private javax.swing.JLabel lblUsr;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGen;
    private javax.swing.JPanel panGenCab;
    private javax.swing.JPanel panGenDet;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodUsr;
    private javax.swing.JTextField txtDesCorUsr;
    private javax.swing.JTextField txtDesLarUsr;
    private javax.swing.JTextField txtNomPrg;
    private javax.swing.JTextField txtTipPrg;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            intSelPrd=0;
            objUti=new ZafUtil();
            objTooBar=new MiToolBar(this);
            objDocLis=new ZafDocLis();
            panBar.add(objTooBar);
            //objTooBar.setVisibleEliminar(false);
            objTooBar.setVisibleAnular(false);
            this.setTitle(objParSis.getNombreMenu() + " v0.7 ");
            lblTit.setText(objParSis.getNombreMenu());
            txtTipPrg.setBackground(objParSis.getColorCamposObligatorios());
            txtNomPrg.setBackground(objParSis.getColorCamposObligatorios());
            txtCodUsr.setBackground(objParSis.getColorCamposObligatorios());
            txtDesCorUsr.setBackground(objParSis.getColorCamposObligatorios());
            txtDesLarUsr.setBackground(objParSis.getColorCamposObligatorios());
            //Configurar ZafVenCon.
            configurarVenConUsr();
            configurarVenConTipPrg();
            //Configurar los JTables.
            configurarTblDat();
            //Ocultar objetos del sistema.
            txtCodUsr.setVisible(false);
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función configura el JTable "tblDat".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDat()
    {
        boolean blnRes=true;
        try
        {
            blnPre=false;
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector();    //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_CHK,"");
            vecCab.add(INT_TBL_DAT_COD_EMP,"Cód.Emp.");
            vecCab.add(INT_TBL_DAT_NOM_EMP,"Empresa");
            vecCab.add(INT_TBL_DAT_COD_LOC,"Cód.Loc.");
            vecCab.add(INT_TBL_DAT_NOM_LOC,"Local");
            vecCab.add(INT_TBL_DAT_COD_EMP_REL,"Cód.Emp.");
            vecCab.add(INT_TBL_DAT_NOM_EMP_REL,"Empresa");
            vecCab.add(INT_TBL_DAT_COD_LOC_REL,"Cód.Loc.");
            vecCab.add(INT_TBL_DAT_NOM_LOC_REL,"Local");
            vecCab.add(INT_TBL_DAT_CHK_PRE,"Pred.");
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);

            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(55);
            tcmAux.getColumn(INT_TBL_DAT_NOM_EMP).setPreferredWidth(90);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(55);
            tcmAux.getColumn(INT_TBL_DAT_NOM_LOC).setPreferredWidth(150);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP_REL).setPreferredWidth(55);
            tcmAux.getColumn(INT_TBL_DAT_NOM_EMP_REL).setPreferredWidth(90);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC_REL).setPreferredWidth(55);
            tcmAux.getColumn(INT_TBL_DAT_NOM_LOC_REL).setPreferredWidth(150);
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRE).setPreferredWidth(35);
            //Configurar JTable: Establecer las columnas que no se pueden 
            tcmAux.getColumn(INT_TBL_DAT_CHK).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRE).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
                  
            //Configurar JTable: Establecer la clase que controla el ordenamiento.
            objTblOrd=new ZafTblOrd(tblDat);
            
            //Configurar JTable: Editor de búsqueda.
            objTblBus=new ZafTblBus(tblDat);
            
            //Configurar JTable: Ocultar columnas del sistema.
           // objTblMod.addSystemHiddenColumn(INT_TBL_DAT_NIV, tblDat);
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            
//            //Agrupamiento de Columnas.
//            ZafTblHeaGrp objTblHeaGrpLoc=(ZafTblHeaGrp)tblDat.getTableHeader();
//            objTblHeaGrpLoc.setHeight(16*2);
//
//            ZafTblHeaColGrp objTblHeaColGrpLocIng=new ZafTblHeaColGrp(" LOCAL POR EL QUE SE INGRESA ");
//            objTblHeaColGrpLocIng.setHeight(16);
//            objTblHeaColGrpLocIng.add(tcmAux.getColumn(INT_TBL_DAT_COD_EMP));
//            objTblHeaColGrpLocIng.add(tcmAux.getColumn(INT_TBL_DAT_NOM_EMP));
//            objTblHeaColGrpLocIng.add(tcmAux.getColumn(INT_TBL_DAT_COD_LOC));
//            objTblHeaColGrpLocIng.add(tcmAux.getColumn(INT_TBL_DAT_NOM_LOC));
//            objTblHeaGrpLoc.addColumnGroup(objTblHeaColGrpLocIng);
//            objTblHeaColGrpLocIng=null;
//            
//            ZafTblHeaColGrp objTblHeaColGrpLocRel=new ZafTblHeaColGrp(" LOCAL AL QUE SE TIENE ACCESO ");
//            objTblHeaColGrpLocRel.setHeight(16);
//            objTblHeaColGrpLocRel.add(tcmAux.getColumn(INT_TBL_DAT_COD_EMP_REL));
//            objTblHeaColGrpLocRel.add(tcmAux.getColumn(INT_TBL_DAT_NOM_EMP_REL));
//            objTblHeaColGrpLocRel.add(tcmAux.getColumn(INT_TBL_DAT_COD_LOC_REL));
//            objTblHeaColGrpLocRel.add(tcmAux.getColumn(INT_TBL_DAT_NOM_LOC_REL));
//            objTblHeaGrpLoc.addColumnGroup(objTblHeaColGrpLocRel);
//            objTblHeaColGrpLocRel=null;
            
            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_CHK);
            vecAux.add("" + INT_TBL_DAT_CHK_PRE);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            //Configurar JTable: Editor de la tabla.
            objTblEdi=new ZafTblEdi(tblDat);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk=new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellRenderer(objTblCelRenChk);
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRE).setCellRenderer(objTblCelRenChk);
            
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC_REL).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP_REL).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl = null;
            
            objTblCelRenLblLeft=new ZafTblCelRenLbl();
            objTblCelRenLblLeft.setHorizontalAlignment(javax.swing.JLabel.LEFT);
            tcmAux.getColumn(INT_TBL_DAT_NOM_LOC).setCellRenderer(objTblCelRenLblLeft);
            tcmAux.getColumn(INT_TBL_DAT_NOM_EMP).setCellRenderer(objTblCelRenLblLeft);
            tcmAux.getColumn(INT_TBL_DAT_NOM_LOC_REL).setCellRenderer(objTblCelRenLblLeft);
            tcmAux.getColumn(INT_TBL_DAT_NOM_EMP_REL).setCellRenderer(objTblCelRenLblLeft);
            objTblCelRenLblLeft = null;
            
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRE).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk=null;
            
            //Manejador de Eventos
             objTblCelEdiChk = new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
//                    if( (objTooBar.getEstado()=='x') || (objTooBar.getEstado()=='m') )
//                        blnPre=true;
                }

            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)){
                    if(! blnPre){
                        objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);
                        blnPre=true;
                    }
                }
                else
                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);
            }
            });

            objTblCelEdiChkPre = new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRE).setCellEditor(objTblCelEdiChkPre);
            objTblCelEdiChkPre.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK))
                    objTblCelEdiChkPre.setCancelarEdicion(false);
                else
                    objTblCelEdiChkPre.setCancelarEdicion(true);

            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE)){
                    blnPre=true;
                    quitarPredeterminadoAnterior(tblDat.getSelectedRow());
                }
                else
                    blnPre=false;

            }
            });
            objTblCelRenLbl=null;
            
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
      /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD_EMP:
                    strMsg="Código empresa";
                    break;
                case INT_TBL_DAT_NOM_EMP:
                    strMsg="Nombre de empresa";
                    break;
                case INT_TBL_DAT_COD_LOC:
                    strMsg="Código local";
                    break;
                case INT_TBL_DAT_NOM_LOC:
                    strMsg="Nombre local";
                    break;
                case INT_TBL_DAT_COD_EMP_REL:
                    strMsg="Código empresa Relacionada";
                    break;
                case INT_TBL_DAT_NOM_EMP_REL:
                    strMsg="Nombre de empresa Relacionada";
                    break;
                case INT_TBL_DAT_COD_LOC_REL:
                    strMsg="Código local Relacionado";
                    break;
                case INT_TBL_DAT_NOM_LOC_REL:
                    strMsg="Nombre local Relacionado";
                    break;    
                case INT_TBL_DAT_CHK_PRE:
                    strMsg="Predeterminado";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
    /**
     * Esta funcion permite utilizar la "Ventana de Consulta" para seleccionar
     * un registro de la base de datos. El tipo de búsqueda determina si se debe
     * hacer una busqueda directa (No se muestra la ventana de consulta a menos
     * que no exista lo que se está buscando) o presentar la ventana de
     * consulta para que el usuario seleccione la opción que desea utilizar.
     *
     * @param intTipBus El tipo de busqueda a realizar.
     * @return true: Si no se presenta ningun problema. <BR>false: En el caso
     * contrario.
     */   
    private boolean mostrarVenConPrg(int intTipBus) 
    {
        boolean blnRes = true;
        try 
        {
            switch (intTipBus) 
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoPrg.setCampoBusqueda(1);
                    vcoPrg.show();
                    if (vcoPrg.getSelectedButton() == vcoPrg.INT_BUT_ACE) 
                    {
                        txtTipPrg.setText(vcoPrg.getValueAt(1));
                        txtNomPrg.setText(vcoPrg.getValueAt(2));
                    }
                    break;
                case 1: //Búsqueda directa por "Código".
                    if (vcoPrg.buscar("a1.co_mnu", txtTipPrg.getText()))
                    {
                        txtTipPrg.setText(vcoPrg.getValueAt(1));
                        txtNomPrg.setText(vcoPrg.getValueAt(2));
                    }
                    else
                    {
                        vcoPrg.setCampoBusqueda(0);
                        vcoPrg.setCriterio1(11);
                        vcoPrg.cargarDatos();
                        vcoPrg.show();
                        if (vcoPrg.getSelectedButton()==vcoPrg.INT_BUT_ACE)
                        {
                            txtTipPrg.setText(vcoPrg.getValueAt(1));
                            txtNomPrg.setText(vcoPrg.getValueAt(2));
                        }
                        else
                        {
                            txtTipPrg.setText(strTipPrg);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Nombre".
                    if (vcoPrg.buscar("a1.tx_nom", txtNomPrg.getText()))
                    {
                        txtTipPrg.setText(vcoPrg.getValueAt(1));
                        txtNomPrg.setText(vcoPrg.getValueAt(2));
                    }
                    else
                    {
                        vcoPrg.setCampoBusqueda(1);
                        vcoPrg.setCriterio1(11);
                        vcoPrg.cargarDatos();
                        vcoPrg.show();
                        if (vcoPrg.getSelectedButton()==vcoPrg.INT_BUT_ACE)
                        {
                            txtTipPrg.setText(vcoPrg.getValueAt(1));
                            txtNomPrg.setText(vcoPrg.getValueAt(2));
                        }
                        else
                        {
                            txtNomPrg.setText(strNomPrg);
                        }
                    }
                    break;
            }  
        }
        catch (Exception e) 
        {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
       
    private boolean configurarVenConTipPrg() 
    {
        boolean blnRes = true;
        try 
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_mnu");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Programa");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("494");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+=" SELECT a1.co_mnu, a1.tx_nom";
            strSQL+=" FROM tbm_mnuSis AS a1";
            strSQL+=" WHERE (a1.tx_tipMnu='C'or a1.tx_tipMnu='R') and a1.tx_nom!=''";
            strSQL+=" AND a1.st_reg<>'E' AND a1.tx_acc IS NOT NULL";
            strSQL+=" ORDER BY a1.tx_nom";
            vcoPrg=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de programas", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoPrg.setConfiguracionColumna(1, javax.swing.JLabel.LEFT);
            vcoPrg.setConfiguracionColumna(2, javax.swing.JLabel.LEFT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean quitarPredeterminadoAnterior(int fila) 
    {
        boolean blnRes = true;
        try 
        {
            for (int i = 0; i < objTblMod.getRowCountTrue(); i++) {
                if (objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRE)) {
                    if (i != fila) {
                        objTblMod.setChecked(false, i, INT_TBL_DAT_CHK_PRE);
                    }
                }
            }
        }
        catch (Exception e) 
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes = false;
        }
        return blnRes;
    }
    
    
    /**
     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
     * insertar, consultar, modificar, eliminar, etc. Además de los botones de navegación
     * que permiten desplazarse al primero, anterior, siguiente y último registro.
     */
    private class MiToolBar extends ZafToolBar
    {
        public MiToolBar(javax.swing.JInternalFrame ifrFrm)
        {
            super(ifrFrm, objParSis);
        }

        public boolean anular()
        {
            return true;
        }

        public void clickAceptar()
        {
            
        }

        public void clickAnterior() 
        {
            try
            {
                if (!rstCab.isFirst())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.previous();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.previous();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnular()
        {
            
        }

        public void clickCancelar()
        {
            intSelPrd=0;
            limpiarFrm();
        }

        public void clickConsultar() 
        {
            cargarDetReg();
        }

        public void clickEliminar() {
            cargarDetReg();
        }

        public void clickFin() 
        {
            try
            {
                if (!rstCab.isLast())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.last();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.last();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickImprimir()
        {
            
        }

        public void clickInicio()
        {
            try
            {
                if (!rstCab.isFirst())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.first();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.first();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickInsertar()
        {
            try
            {
                if (blnHayCam)
                {
                    isRegPro();
                }
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                limpiarFrm();
                cargarOpcMnu();
                txtNomPrg.requestFocus();
                objTblMod.setModoOperacion(ZafTblMod.INT_TBL_EDI);
                //Inicializar las variables que indican cambios.
                blnHayCam=false;
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickModificar()
        {
            txtTipPrg.setEditable(false);
            txtNomPrg.setEditable(false);
            butPrg.setEnabled(false);
            txtDesCorUsr.setEditable(false);
            txtDesLarUsr.setEditable(false);
            butUsr.setEnabled(false);
            objTblMod.setModoOperacion(ZafTblMod.INT_TBL_EDI);
            cargarDetReg();
            blnPre=true;
        }

        public void clickSiguiente()
        {
            try
            {
                if (!rstCab.isLast())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.next();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.next();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickVisPreliminar() 
        {
        }

        public boolean consultar() 
        {
            consultarReg();
            return true;
        }

        public boolean eliminar()
        {
            try
            {
                if (!eliminarReg())
                    return false;
                //Desplazarse al siguiente registro si es posible.
                if (!rstCab.isLast())
                {
                    rstCab.next();
                    cargarReg();
                }
                else
                {
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                }
                blnHayCam=false;
                
            }
            catch (java.sql.SQLException e)
            {
                return true;
            }
            return true;
        }

        public boolean insertar()
        {
            if (!insertarReg())
                return false;
            limpiarFrm();
            return true;
            
        }

        public boolean modificar()
        {
            if (!actualizarReg())
                return false;
            return true;
        }
        
        public boolean cancelar()
        {
            boolean blnRes=true;
            try
            {
                if (blnHayCam)
                {
                    if (objTooBar.getEstado()=='n' || objTooBar.getEstado()=='m')
                    {
                        if (!isRegPro())
                            return false;
                    }
                }
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            limpiarFrm();
            blnHayCam=false;
            return blnRes;
        }
        
        public boolean vistaPreliminar()
        {
            return true;
        }
        
        public boolean aceptar()
        {
            return true;
        }
        
        public boolean imprimir()
        {
            return true;
        }
        
        public boolean beforeInsertar()
        {
           boolean blnRes=true;
            if(!isCamVal()){
                blnRes=false;
            }
            return blnRes;
        }
        
        public boolean beforeConsultar()
        {
            return true;
        }

        public boolean beforeModificar()
        {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible modificar un documento eliminado.");
                return false;
            }
            if (strAux.equals("Anulado"))
            {
                mostrarMsgInf("El documento está ANULADO.\nNo es posible modificar un documento anulado.");
                return false;
            }
            if (!isCamVal())
                return false;
            return true;
        }

        public boolean beforeEliminar()
        {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                mostrarMsgInf("El documento ya está ELIMINADO.\nNo es posible eliminar un documento eliminado.");
                return false;
            }
            return true;
        }

        public boolean beforeAnular()
        {
            return true;
        }

        public boolean beforeImprimir()
        {
            return true;
        }

        public boolean beforeVistaPreliminar()
        {
            return true;
        }

        public boolean beforeAceptar()
        {
            return true;
        }
        
        public boolean beforeCancelar()
        {
            return true;
        }
        
        public boolean afterInsertar()
        {
            blnHayCam=false;
            objTooBar.setEstado('n');
            intSelPrd=0;
            //consultarReg();
            objTblMod.initRowsState();
            blnHayCam=false;
            return true;
        }

        public boolean afterConsultar()
        {
            intSelPrd=0;
            objTblMod.initRowsState();
            blnHayCam=false;
            return true;
        }

        public boolean afterModificar()
        {
            intSelPrd=0;
            //objTblMod.initRowsState();
            blnHayCam=false;
            return true;
        }

        public boolean afterEliminar()
        {
            intSelPrd=0;
            objTblMod.initRowsState();
            return true;
        }

        public boolean afterAnular()
        {
            intSelPrd=0;
            objTblMod.initRowsState();
            return true;
        }

        public boolean afterImprimir()
        {
            return true;
        }

        public boolean afterVistaPreliminar()
        {
            return true;
        }

        public boolean afterAceptar()
        {
            return true;
        }
        
        public boolean afterCancelar()
        {
            return true;
        }
        
    }
    
    /**
     * Esta función determina si los campos son válidos.
     * @return true: Si los campos son válidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal()
    {
        //Validar el "Tipo de documento".
        if (txtTipPrg.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Programa</FONT> es obligatorio.<BR>Escriba o seleccione un programa y vuelva a intentarlo.</HTML>");
            txtNomPrg.requestFocus();
            return false;
        }
        //Validar el "Usuario".
        if (txtCodUsr.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">usuario</FONT> es obligatorio.<BR>Escriba o seleccione un usuario y vuelva a intentarlo.</HTML>");
            txtDesLarUsr.requestFocus();
            return false;
        }
        if(!objTblMod.isDataModelChanged()){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>No existe ningún local seleccionado.<BR>Seleccione un local y vuelva a intentarlo.</HTML>");
            tblDat.setRowSelectionInterval(0, 0);
            tblDat.changeSelection(0, INT_TBL_DAT_LIN, true, true);
            tblDat.requestFocus();
            return false;
        }
        return true;
    }

    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        javax.swing.JOptionPane.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return javax.swing.JOptionPane.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje de advertencia al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos se han cargado
     * con errores y que debe revisar dichos datos.
     */
    private void mostrarMsgAdv(String strMsg)
    {
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        if (strMsg.equals(""))
            strMsg="<HTML>Este registro tiene <FONT COLOR=\"red\">problemas</FONT>. <BR>Notifíquelo a su administrador del sistema.</HTML>";
        javax.swing.JOptionPane.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.WARNING_MESSAGE);
    }

    /**
     * Esta función permite cargar las opciones del menú.
     * @return true: Si se pudo cargar el detalle del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarOpcMnu()
    {
        boolean blnRes=true;
        try
        {
            objTooBar.setMenSis("Obteniendo datos...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+=" SELECT distinct x.co_emp, x.tx_nomEmp, x.co_loc, x.tx_nomLoc ";
                strSQL+="        ,y.co_empRel, y.tx_nomEmpRel, y.co_locRel, y.tx_nomLocRel";
                strSQL+=" FROM(";
                strSQL+="    SELECT distinct a1.co_emp,a2.tx_nom as tx_nomEmp,a1.co_loc,a1.tx_nom as tx_nomLoc ";
                strSQL+="    FROM tbm_loc as a1";
                strSQL+="    INNER JOIN tbm_emp as a2 ON (a1.co_emp=a2.co_emp) ";
                strSQL+="    WHERE a1.st_Reg not in ('I') AND a2.st_reg not in ('I')";
                strSQL+=" ) as x";
                strSQL+=" INNER JOIN( ";
                strSQL+="    SELECT distinct a1.co_emp as co_empRel,a2.tx_nom as tx_nomEmpRel,a1.co_loc as co_locRel,a1.tx_nom as tx_nomLocRel";
                strSQL+="    FROM tbm_loc as a1 ";
                strSQL+="    INNER JOIN tbm_emp as a2 ON (a1.co_emp=a2.co_emp)";
                strSQL+=" )as y on(1=1)";
                if(objParSis.getCodigoEmpresa()!=objParSis.getCodigoEmpresaGrupo())
                {        
                    strSQL+=" WHERE x.co_emp=" + objParSis.getCodigoEmpresa();
                    strSQL+=" AND y.co_emprel=" + objParSis.getCodigoEmpresa();
                }
                strSQL+=" ORDER BY x.co_emp,x.co_loc,y.co_empRel,y.co_locRel";
               
                //System.out.println("cargarOpcMnu: " + strSQL);
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                objTooBar.setMenSis("Cargando datos...");
                
                
                while (rst.next())
                {
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN,"");
                    vecReg.add(INT_TBL_DAT_CHK,null);
                    vecReg.add(INT_TBL_DAT_COD_EMP,rst.getString("co_emp"));
                    vecReg.add(INT_TBL_DAT_NOM_EMP,rst.getString("tx_nomEmp"));
                    vecReg.add(INT_TBL_DAT_COD_LOC,rst.getString("co_loc"));
                    vecReg.add(INT_TBL_DAT_NOM_LOC,rst.getString("tx_nomLoc"));
                    vecReg.add(INT_TBL_DAT_COD_EMP_REL,rst.getString("co_empRel"));
                    vecReg.add(INT_TBL_DAT_NOM_EMP_REL,rst.getString("tx_nomEmpRel"));
                    vecReg.add(INT_TBL_DAT_COD_LOC_REL,rst.getString("co_locRel"));
                    vecReg.add(INT_TBL_DAT_NOM_LOC_REL,rst.getString("tx_nomLocRel"));
                    vecReg.add(INT_TBL_DAT_CHK_PRE,null);
                    vecDat.add(vecReg);    
                }
                rst.close();
                stm.close();
                con.close();
                
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
              
                objTooBar.setMenSis("Listo");
            }
  
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función inserta el registro en la base de datos.
     * @return true: Si se pudo insertar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarReg()
    {
        boolean blnRes=false;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null)
            {
                if(insertarDet())
                {
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean consultarReg(){
       boolean blnRes=true;
        try{
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null){
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                strSQL="";
                strSQL+=" SELECT a1.co_mnu, a1.co_usr";
                strSQL+=" FROM tbr_locprgusr a1";
                strSQL+=" WHERE 1=1";
                if(objParSis.getCodigoEmpresa()!=objParSis.getCodigoEmpresaGrupo()){
                     strSQL+=" AND a1.co_emp=" + objParSis.getCodigoEmpresa();
                 }
                if (!txtCodUsr.getText().equals(""))
                    strSQL+=" AND a1.co_usr=" + txtCodUsr.getText();
                if (!txtTipPrg.getText().equals(""))
                    strSQL+=" AND a1.co_mnu=" + txtTipPrg.getText();
                strSQL+=" GROUP BY co_mnu, co_usr";
                strSQL+=" ORDER BY co_mnu, co_usr";
                //System.out.println("consultarReg: " + strSQL);
                rstCab=stmCab.executeQuery(strSQL);
                if (rstCab.next()){
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                }
                else{
                    mostrarMsgInf("No se ha encontrado ningún registro que cumpla el criterio de búsqueda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función actualiza el registro en la base de datos.
     * @return true: Si se pudo actualizar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarReg()
    {
        boolean blnRes=false;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null)
            {
                if (eliminarDet())
                {
                    if (insertarDet())
                    {
                        con.commit();
                        limpiarFrm();
                        blnRes=true;
                    }
                    else
                        con.rollback();
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
            cargarReg();
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función elimina el registro de la base de datos.
     * @return true: Si se pudo eliminar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminarReg()
    {
        boolean blnRes=false;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null)
            {
                if (eliminarDet()) {
                    con.commit();
                    blnRes = true;
                } else {
                    con.rollback();
                }
             
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función anula el registro de la base de datos.
     * @return true: Si se pudo anular el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean anularReg()
    {
        return false;
    }

    /**
     * Esta función permite insertar el detalle de un registro.
     * @return true: Si se pudo insertar el detalle del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarDet()
    {
        int i;
        boolean blnRes=true;
        try
        {
            if (con!=null)
            {
                stm=con.createStatement();
                for (i=0;i<objTblMod.getRowCountTrue();i++)
                {
                    if (objTblMod.isChecked(i, INT_TBL_DAT_CHK))
                     {
                         //Armar la sentencia SQL.
                         strSQL="";
                         strSQL+=" INSERT INTO tbr_locPrgUsr (co_emp, co_loc, co_usr, co_mnu, co_emprel, co_locrel, st_reg)";
                         strSQL+=" VALUES (";
                         strSQL+="  "+ objTblMod.getValueAt(i,INT_TBL_DAT_COD_EMP);
                         strSQL+=", "+ objTblMod.getValueAt(i,INT_TBL_DAT_COD_LOC);
                         strSQL+=", "+ txtCodUsr.getText();
                         strSQL+=", "+ txtTipPrg.getText();
                         strSQL+=", "+ objTblMod.getValueAt(i,INT_TBL_DAT_COD_EMP_REL);
                         strSQL+=", "+ objTblMod.getValueAt(i,INT_TBL_DAT_COD_LOC_REL);
                         if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRE)){
                            strSQL+=",'P'";//st_reg
                         }
                         else{
                            strSQL+=",'A'";//st_reg
                         }
                         strSQL+=")";
                         //System.out.println("insertarDet...." + strSQL);
                         stm.executeUpdate(strSQL);
                     }    
                }
                stm.close();
                stm=null;
            }
           
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            //System.out.println(e.getErrorCode());
            if(e.getErrorCode()==0)
            {   
                tabFrm.setSelectedIndex(0);//ubica el tab correspondiente
                mostrarMsgInf("<HTML>El programa <BR><FONT COLOR=\"blue\">" + txtNomPrg.getText() + "</FONT> <BR>ya fue ingresado.Seleccione un programa aún no <BR>ingresado y vuelva a intentarlo.</HTML>");
                txtTipPrg.requestFocus();
                return false;
            }
            else
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite cargar el registro seleccionado.
     * @return true: Si se pudo cargar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg()
    {
        boolean blnRes=true;
        try
        {
            if (cargarCabReg())
            {
                cargarDetReg();
            }
            blnHayCam=false;
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }
    
    /**
     * Esta función permite cargar la cabecera del registro seleccionado.
     * @return true: Si se pudo cargar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarCabReg()
    {
        int intPosRel;
        boolean blnRes=true;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                strSQL="";
                strSQL+=" SELECT a1.co_emp, a1.co_loc, a1.co_mnu,a3.tx_nom as tx_nomMnu, a1.co_usr, a2.tx_usr, a2.tx_nom as tx_nomUsr, a2.st_reg";
                strSQL+=" FROM tbr_locprgusr as a1";
                strSQL+=" INNER JOIN tbm_usr as a2 ON (a1.co_usr=a2.co_usr)";
                strSQL+=" INNER JOIN tbm_mnuSis as a3 ON (a1.co_mnu=a3.co_mnu) ";
                strSQL+=" WHERE a1.co_mnu=" + rstCab.getString("co_mnu");
                strSQL+=" AND a1.co_usr=" + rstCab.getString("co_usr");
                if(objParSis.getCodigoEmpresa()!=objParSis.getCodigoEmpresaGrupo()){
                     strSQL+=" AND a1.co_emp=" + objParSis.getCodigoEmpresa();
                 }
                strSQL+=" GROUP BY a1.co_emp, a1.co_loc,a1.co_mnu,a3.tx_nom, a1.co_usr, a2.tx_usr, a2.tx_nom, a2.st_reg";
                strSQL+=" ORDER BY a1.co_emp, a1.co_loc, a1.co_usr";              
                rst=stm.executeQuery(strSQL);
                //System.out.println("cargarCabReg: "+ strSQL);
                if(rst.next()){
                    strAux=rst.getString("co_mnu");
                    txtTipPrg.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_nomMnu");
                    txtNomPrg.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("co_usr");
                    txtCodUsr.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_usr");
                    txtDesCorUsr.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_nomUsr");
                    txtDesLarUsr.setText((strAux==null)?"":strAux);
                    objTooBar.setEstadoRegistro("");
                }
                else{
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                    blnRes=false;
                }
            }
            rst.close();
            stm.close();
            con.close();
            rst=null;
            stm=null;
            con=null;
            //Mostrar la posición relativa del registro.
            intPosRel=rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite cargar el detalle del registro seleccionado.
     * @return true: Si se pudo cargar el detalle del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg()
    {
        boolean blnRes=true;
        try
        {
            if (!txtCodUsr.getText().equals("") || !txtTipPrg.getText().equals(""))
            {
                //objTooBar.setMenSis("Obteniendo datos...");
                con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
                if (con!=null)
                {
                    stm=con.createStatement();
                    //Armar la sentencia SQL.
                    if (objTooBar.getEstado()=='x' || objTooBar.getEstado()=='m')
                    {
                        //Para el modo "Modificar" se muestra: opciones del menú + permisos del usuario.
                        strSQL="";
                        strSQL+=" SELECT A1.co_emp,A1.tx_nomEmp,A1.co_loc,A1.tx_nomLoc,A1.co_empRel,A1.tx_nomEmpRel,";
                        strSQL+="        A1.co_locRel ,A1.tx_nomLocRel,A2.co_mnu,case when A2.co_usr is null then 0 else A2.co_usr end,";
                        strSQL+="        case when A2.st_reg is null then '' else A2.st_reg end";
                        strSQL+=" FROM(";
                        strSQL+="      SELECT x.co_emp,x.tx_nomEmp,x.co_loc,x.tx_nomLoc,y.co_empRel,y.tx_nomEmpRel,y.co_locRel,y.tx_nomLocRel";
                        strSQL+="      FROM(";
                        strSQL+="            SELECT distinct a1.co_emp,a2.tx_nom as tx_nomEmp,a1.co_loc,a1.tx_nom as tx_nomLoc";
                        strSQL+="            FROM tbm_loc as a1";
                        strSQL+="            INNER JOIN tbm_emp as a2 ON (a1.co_emp=a2.co_emp) ";
                        strSQL+="            WHERE a1.st_Reg not in ('I') AND a2.st_reg not in ('I')";
                        strSQL+="      ) as x ";
                        strSQL+="      INNER JOIN(";
                        strSQL+="            SELECT distinct a1.co_emp as co_empRel, a2.tx_nom as tx_nomEmpRel,a1.co_loc as co_locRel, a1.tx_nom as tx_nomLocRel";
                        strSQL+="            FROM tbm_loc as a1";
                        strSQL+="            INNER JOIN tbm_emp as a2 ON (a1.co_emp=a2.co_emp) ";
                        strSQL+="            WHERE a1.st_Reg not in ('I') AND a2.st_reg not in ('I')";
                        strSQL+="      )as y ON (1=1)";
                        strSQL+=" WHERE 1=1";
                        if(objParSis.getCodigoEmpresa()!=objParSis.getCodigoEmpresaGrupo()){
                            strSQL+=" AND x.co_emp=" + objParSis.getCodigoEmpresa();
                            strSQL+=" AND y.co_empRel=" + objParSis.getCodigoEmpresa();
                        }
                        strSQL+=" ) as A1";
                        strSQL+=" LEFT OUTER JOIN (";
                        strSQL+="      SELECT b.co_emp,a.tx_nomEmp,b.co_loc,a.tx_nomLoc,a.co_empRel,a.tx_nomEmpRel,a.co_locRel,a.tx_nomLocRel,b.co_mnu,b.co_usr,b.st_reg";
                        strSQL+="      FROM(";
                        strSQL+="           SELECT distinct x.co_emp,x.tx_nomEmp,x.co_loc,x.tx_nomLoc,y.co_empRel,y.tx_nomEmpRel, y.co_locRel,y.tx_nomLocRel";
                        strSQL+="           FROM(";
                        strSQL+="                SELECT distinct a1.co_emp,a2.tx_nom as tx_nomEmp,a1.co_loc,a1.tx_nom as tx_nomLoc";
                        strSQL+="                FROM tbm_loc as a1";
                        strSQL+="                INNER JOIN tbm_emp as a2 ON (a1.co_emp=a2.co_emp)";
                        strSQL+="                WHERE a1.st_Reg not in ('I') AND a2.st_reg not in ('I')";
                        strSQL+="           ) as x";
                        strSQL+="           INNER JOIN( ";
                        strSQL+="                SELECT distinct a1.co_emp as co_empRel, a2.tx_nom as tx_nomEmpRel,a1.co_loc as co_locRel, a1.tx_nom as tx_nomLocRel";
                        strSQL+="                FROM tbm_loc as a1";
                        strSQL+="                INNER JOIN tbm_emp as a2 ON (a1.co_emp=a2.co_emp)";
                        strSQL+="                WHERE a1.st_Reg not in ('I') AND a2.st_reg not in ('I')";
                        strSQL+="           )as y ON (1=1)";
                        strSQL+="      ) as a";
                        strSQL+="      INNER JOIN tbr_locprgusr as b ";
                        strSQL+="      ON(a.co_emp=b.co_emp and a.co_loc=b.co_loc and a.co_empRel=b.co_empRel and a.co_locRel=b.co_locRel)";
                        strSQL+="      WHERE b.co_mnu="+ rstCab.getString("co_mnu");
                        strSQL+="      AND b.co_usr="+ rstCab.getString("co_usr");
                        if(objParSis.getCodigoEmpresa()!=objParSis.getCodigoEmpresaGrupo()){
                            strSQL+="      AND b.co_emp=" + objParSis.getCodigoEmpresa();
                            strSQL+="      AND a.co_empRel=" + objParSis.getCodigoEmpresa();
                        }
                        strSQL+=" ) as A2 ON (A1.co_emp=A2.co_emp and A1.co_loc=A2.co_loc and A1.co_empRel=A2.co_empRel and A1.co_locRel=A2.co_locRel)";
                        strSQL+=" ORDER BY A1.co_emp,A1.co_loc,A1.co_empRel,A1.co_locRel";
                    }
                    else
                    {
                        //Para los demás modos se muestra: sólo los permisos del usuario.
                        strSQL="";
                        strSQL+=" SELECT b.co_emp,a.tx_nomEmp,b.co_loc,a.tx_nomLoc,a.co_empRel,a.tx_nomEmpRel,a.co_locRel ,a.tx_nomLocRel, b.co_usr, b.co_mnu,b.st_reg";
                        strSQL+=" FROM( ";
                        strSQL+="      SELECT distinct x.co_emp,x.tx_nomEmp,x.co_loc,x.tx_nomLoc,y.co_empRel,y.tx_nomEmpRel,y.co_locRel,y.tx_nomLocRel";
                        strSQL+="      FROM( ";
                        strSQL+="           SELECT distinct a1.co_emp,a2.tx_nom as tx_nomEmp,a1.co_loc,a1.tx_nom as tx_nomLoc";
                        strSQL+="           FROM tbm_loc as a1 INNER JOIN tbm_emp as a2 ON (a1.co_emp=a2.co_emp)";
                        strSQL+="      ) as x";
                        strSQL+="      INNER JOIN( ";
                        strSQL+="            SELECT distinct a1.co_emp as co_empRel,a2.tx_nom as tx_nomEmpRel,a1.co_loc as co_locRel,a1.tx_nom as tx_nomLocRel ";
                        strSQL+="            FROM tbm_loc as a1 INNER JOIN tbm_emp as a2 ON (a1.co_emp=a2.co_emp)";
                        strSQL+="      )as y ON (1=1)";
                        strSQL+=" ) as a";
                        strSQL+=" INNER JOIN tbr_locprgusr as b";
                        strSQL+=" ON (a.co_emp=b.co_emp AND a.co_loc=b.co_loc AND a.co_empRel=b.co_empRel AND a.co_locRel=b.co_locRel)";
                        strSQL+=" WHERE b.co_mnu=" + rstCab.getString("co_mnu");
                        strSQL+=" AND b.co_usr=" + rstCab.getString("co_usr");
                        if(objParSis.getCodigoEmpresa()!=objParSis.getCodigoEmpresaGrupo()){
                            strSQL+=" AND b.co_emp=" + objParSis.getCodigoEmpresa();
                            strSQL+=" AND a.co_empRel=" + objParSis.getCodigoEmpresa();
                        }
                        strSQL+=" ORDER BY b.co_emp, b.co_loc, a.co_empRel, a.co_locRel ";
                    }
                    //System.out.println("cargarDetReg.Modificar:" + strSQL);
                    rst=stm.executeQuery(strSQL);
                    //Limpiar vector de datos.
                    vecDat.clear();
                    //Obtener los registros.
                    //objTooBar.setMenSis("Cargando datos...");
                    while (rst.next())
                    {
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_CHK, new Boolean (rst.getString("co_usr").equals("0")? false: true));                   
                        vecReg.add(INT_TBL_DAT_COD_EMP,rst.getString("co_emp"));
                        vecReg.add(INT_TBL_DAT_NOM_EMP,rst.getString("tx_nomEmp"));
                        vecReg.add(INT_TBL_DAT_COD_LOC,rst.getString("co_loc"));
                        vecReg.add(INT_TBL_DAT_NOM_LOC,rst.getString("tx_nomLoc"));
                        vecReg.add(INT_TBL_DAT_COD_EMP_REL,rst.getString("co_empRel"));
                        vecReg.add(INT_TBL_DAT_NOM_EMP_REL,rst.getString("tx_nomEmpRel"));
                        vecReg.add(INT_TBL_DAT_COD_LOC_REL,rst.getString("co_locRel"));
                        vecReg.add(INT_TBL_DAT_NOM_LOC_REL,rst.getString("tx_nomLocRel"));
                        if(rst.getString("st_reg").equals("P")){
                            vecReg.add(INT_TBL_DAT_CHK_PRE,true);
                        }
                        else{
                            vecReg.add(INT_TBL_DAT_CHK_PRE,false);
                        }  
                        vecDat.add(vecReg);
                    }
                    rst.close();
                    stm.close();
                    con.close();
                    rst=null;
                    stm=null;
                    con=null;
                    //Asignar vectores al modelo.
                    objTblMod.setData(vecDat);
                    tblDat.setModel(objTblMod);
                    vecDat.clear();
                    //objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite eliminar el detalle de un registro.
     * @return true: Si se pudo eliminar el detalle del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminarDet()
    {
        boolean blnRes=true;
        try
        {
            if (con!=null)
            {  
                stm=con.createStatement();
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                        
                    if ((objUti.parseString(objTblMod.getValueAt(i,0)).equals("M")) || (objTblMod.isChecked(i, INT_TBL_DAT_CHK))) 
                    { 
                        if (objTblMod.isChecked(i, INT_TBL_DAT_CHK)||!(objTblMod.isChecked(i, INT_TBL_DAT_CHK))) 
                        {
                            //Armar la sentencia SQL.
                            strSQL="";
                            strSQL+=" DELETE FROM tbr_locprgusr";
                            strSQL+=" WHERE co_emp=" + objTblMod.getValueAt(i,INT_TBL_DAT_COD_EMP);
                            strSQL+=" AND co_loc=" + objTblMod.getValueAt(i,INT_TBL_DAT_COD_LOC);
                            strSQL+=" AND co_mnu=" + txtTipPrg.getText();
                            strSQL+=" AND co_usr=" + txtCodUsr.getText();
                            strSQL+=" AND co_emprel=" + objTblMod.getValueAt(i,INT_TBL_DAT_COD_EMP_REL);
                            strSQL+=" AND co_locrel=" + objTblMod.getValueAt(i,INT_TBL_DAT_COD_LOC_REL);
                            //System.out.println("eliminarDet..."+ strSQL);
                            stm.executeUpdate(strSQL);
                        }
                    }
                }
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite limpiar el formulario.
     * @return true: Si se pudo limpiar la ventana sin ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean limpiarFrm()
    {
        boolean blnRes=true;
        try
        {
            txtTipPrg.setText("");
            txtNomPrg.setText("");
            txtCodUsr.setText("");
            txtDesCorUsr.setText("");
            txtDesLarUsr.setText("");
            objTblMod.removeAllRows();
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }

    /**
     * Esta función configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Usuarios".
     */
    private boolean configurarVenConUsr()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_usr");
            arlCam.add("a1.tx_usr");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Usuario");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("120");
            arlAncCol.add("374");
            //Armar la sentencia SQL.
            strSQL=" ";
            strSQL+=" SELECT DISTINCT a2.co_usr, a2.tx_usr, a2.tx_nom ";
            strSQL+=" FROM tbr_locPrgUsr as a1 ";
            strSQL+=" INNER JOIN tbr_locusr as a4 ON(a1.co_emprel=a4.co_emp AND a1.co_locrel=a4.co_loc)";
            strSQL+=" INNER JOIN tbm_usr as a2 ON (a4.co_usr=a2.co_usr)";
            strSQL+=" INNER JOIN tbr_usremp as a3 ON (a2.co_usr=a3.co_usr AND a3.co_emp=a4.co_emp)";
            strSQL+=" WHERE a2.st_reg='A' AND a3.co_emp!="+objParSis.getCodigoEmpresaGrupo();
            if(objParSis.getCodigoEmpresa()!=objParSis.getCodigoEmpresaGrupo())
               strSQL+=" AND a3.co_emp="+ objParSis.getCodigoEmpresa();
            strSQL+=" GROUP BY a2.co_usr,a2.tx_usr,a2.tx_nom ";
            strSQL+=" ORDER BY a2.tx_nom";            
 
            //System.out.println("configurarVenConUsr:" + strSQL);
            vcoUsr=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de usuarios", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoUsr.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConUsr(int intTipBus)
    {
        //System.out.println("mostrarVenConUsr...");
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoUsr.setCampoBusqueda(2);
                    vcoUsr.setVisible(true);
                    if (vcoUsr.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                    {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Descripción corta".
                    if (vcoUsr.buscar("a1.tx_usr", txtDesCorUsr.getText()))
                    {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    }
                    else
                    {
                        vcoUsr.setCampoBusqueda(1);
                        vcoUsr.setCriterio1(11);
                        vcoUsr.cargarDatos();
                        vcoUsr.setVisible(true);
                        if (vcoUsr.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodUsr.setText(vcoUsr.getValueAt(1));
                            txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                            txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                        }
                        else
                        {
                            txtDesCorUsr.setText(strDesCorUsr);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoUsr.buscar("a1.tx_nom", txtDesLarUsr.getText()))
                    {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    }
                    else
                    {
                        vcoUsr.setCampoBusqueda(2);
                        vcoUsr.setCriterio1(11);
                        vcoUsr.cargarDatos();
                        vcoUsr.setVisible(true);
                        if (vcoUsr.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodUsr.setText(vcoUsr.getValueAt(1));
                            txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                            txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                        }
                        else
                        {
                            txtDesLarUsr.setText(strDesLarUsr);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta clase implementa la interface DocumentListener que observa los cambios que
     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
     * Se la usa en el sistema para determinar si existe algún cambio que se deba grabar
     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
     * presentará un mensaje advirtiendo que si no guarda los cambios los perderá.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener 
    {
        public void changedUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }
    }

    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private void agregarDocLis()
    {
        txtTipPrg.getDocument().addDocumentListener(objDocLis);
        txtNomPrg.getDocument().addDocumentListener(objDocLis);
        txtCodUsr.getDocument().addDocumentListener(objDocLis);
        txtDesCorUsr.getDocument().addDocumentListener(objDocLis);
        txtDesLarUsr.getDocument().addDocumentListener(objDocLis);
    }   

    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private boolean isRegPro()
    {
        boolean blnRes=true;
        strAux="¿Desea guardar los cambios efectuados a éste registro?\n";
        strAux+="Si no guarda los cambios perderá toda la información que no haya guardado.";
        switch (mostrarMsgCon(strAux))
        {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado())
                {
                    case 'n': //Insertar
                        blnRes = objTooBar.beforeInsertar();
                        if (blnRes) {
                            blnRes = objTooBar.insertar();
                        }
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }     
                break;
            case 1: //NO_OPTION
                blnHayCam=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }
    
    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podría presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaría informado en todo
     * momento de lo que ocurre. Si se desea hacer ésto es necesario utilizar ésta clase
     * ya que si no sólo se apreciaría los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        int intCodEmp, intLoc, intTipDoc, intCodDia;
        
        public ZafThreadGUI(int empresa, int local, int tipoDocumento, int diario)
        {
            intCodEmp=empresa;
            intLoc=local;
            intTipDoc=tipoDocumento;
            intCodDia=diario;
        }
        
        public void run()
        {
            //<editor-fold defaultstate="collapsed" desc="/* comentado */">
//            if (!cargarDetReg(intCodEmp,intLoc,intTipDoc,intCodDia))
//            {
//                //Inicializar objetos si no se pudo cargar los datos.
////                lblMsgSis.setText("Listo");
////                pgrSis.setValue(0);
////                butCon.setText("Consultar");
//                System.out.println("Carga Ok...");
//            }
//            //Establecer el foco en el JTable sólo cuando haya datos.
//            if (tblDat.getRowCount()>0)
//            {
////                tabFrm.setSelectedIndex(1);
//                tblDat.setRowSelectionInterval(0, 0);
//                tblDat.requestFocus();
//            }
//            objThrGUI=null;
            //</editor-fold>
        }
    }

  
    
    
              
}