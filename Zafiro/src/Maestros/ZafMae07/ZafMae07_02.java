/*
 * ZafMae07_02.java
 *
 * 
 */
package Maestros.ZafMae07;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.util.Vector;
/**
 *
 * @author jayapata
 */
public class ZafMae07_02 extends javax.swing.JDialog 
{
    //Constantes: Columnas del JTable.
    final int INT_TBL_DAT_LIN = 0;                        //Línea
    final int INT_TBL_DAT_COD_CLI = 1;                    //Código del cliente.
    final int INT_TBL_DAT_NOM_CLI = 2;                    //Nombre de cliente.
    final int INT_TBL_DAT_DIR_CLI = 3;                    //Direccion del cliente.

    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod;
    private ZafMouMotAda objMouMotAda;                    //ToolTipText en TableHeader.
    private ZafTblBus objTblBus;                              //Editor de búsqueda.
    private ZafTblOrd objTblOrd;                              //JTable de ordenamiento.
    //private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMenú en JTable.
    
    private Connection con, conRemGlo = null;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg;
    private Vector vecAux;

    private String Str_RegSel[];
    public boolean blnAcepta = false;
    Librerias.ZafObtConCen.ZafObtConCen objObtConCen;
    int INTCODREGCEN = 0;
    int INTVERCONCEN = 0;

    /**
     * Creates new form ZafMae07_02
     */
    public ZafMae07_02(java.awt.Frame parent, boolean modal, ZafParSis obj) 
    {
        super(parent, modal);
        initComponents();
        //Inicializar objetos.
        objParSis = obj;

        objObtConCen = new Librerias.ZafObtConCen.ZafObtConCen(objParSis);
        INTCODREGCEN = objObtConCen.intCodReg;

        if (!configurarFrm()) {
            exitForm();
        }

    }

    public boolean abrirConRem() 
    {
        boolean blnres = false;
        try 
        {
            int intIndEmp = INTCODREGCEN;
            if (intIndEmp != 0) 
            {
                conRemGlo = DriverManager.getConnection(objParSis.getStringConexion(intIndEmp), objParSis.getUsuarioBaseDatos(intIndEmp), objParSis.getClaveBaseDatos(intIndEmp));
                conRemGlo.setAutoCommit(false);
            }
            blnres = true;
        } 
        catch (java.sql.SQLException e) {
            mostrarMsg("NO SE PUEDE ESTABLECER LA CONEXION REMOTA CON LA BASE CENTRAL..");
            INTVERCONCEN = 1;
            return false;
        }
        return blnres;
    }

    private void mostrarMsg(String strMsg) 
    {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        String strTit;
        strTit = "Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this, strMsg, strTit, javax.swing.JOptionPane.OK_OPTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGen = new javax.swing.JPanel();
        panGenCab = new javax.swing.JPanel();
        panGenDet = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butAce = new javax.swing.JButton();
        butCan = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        PanFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título");
        PanFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panGen.setLayout(new java.awt.BorderLayout());

        panGenCab.setPreferredSize(new java.awt.Dimension(0, 24));
        panGenCab.setLayout(null);
        panGen.add(panGenCab, java.awt.BorderLayout.NORTH);

        panGenDet.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDat.setViewportView(tblDat);

        panGenDet.add(spnDat, java.awt.BorderLayout.CENTER);

        panGen.add(panGenDet, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panGen);

        PanFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butAce.setText("Aceptar");
        butAce.setPreferredSize(new java.awt.Dimension(92, 25));
        butAce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAceActionPerformed(evt);
            }
        });
        panBot.add(butAce);

        butCan.setText("Cancelar");
        butCan.setPreferredSize(new java.awt.Dimension(92, 25));
        butCan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCanActionPerformed(evt);
            }
        });
        panBot.add(butCan);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        PanFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(PanFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-400)/2, 600, 400);
    }// </editor-fold>//GEN-END:initComponents

    private void butCanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCanActionPerformed
        cerrarVen();
    }//GEN-LAST:event_butCanActionPerformed

    private void butAceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAceActionPerformed
        if (!((tblDat.getSelectedColumn() == -1) || (tblDat.getSelectedRow() == -1)))
        {
            Str_RegSel[0] = tblDat.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_COD_CLI).toString();
            blnAcepta = true;
        }
        dispose();
    }//GEN-LAST:event_butAceActionPerformed

    private void cerrarVen() 
    {
        String strMsg = "¿Está Seguro que desea cerrar este programa?";
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        String strTit;
        strTit = "Mensaje del sistema Zafiro";
        if (oppMsg.showConfirmDialog(this, strMsg, strTit, javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE) == 0) 
        {
            System.gc();
            dispose();
        }
    }

    public void cargaTexto(String sql) 
    {
        strSQL = sql;
        cargarDetReg();
    }

    private void exitForm() 
    {
        dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanFrm;
    private javax.swing.JButton butAce;
    private javax.swing.JButton butCan;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panGen;
    private javax.swing.JPanel panGenCab;
    private javax.swing.JPanel panGenDet;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables

    private boolean cargarDetReg() 
    {
        boolean blnRes = true;
        try 
        {

            if (!abrirConRem()) {
                return false;
            }

            if (INTCODREGCEN == 0) {
                conRemGlo = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            }

            if (conRemGlo != null) {
                stm = conRemGlo.createStatement();
                rst = stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                while (rst.next())
                {
                    vecReg = new Vector();
                    vecReg.add(INT_TBL_DAT_LIN, "");
                    vecReg.add(INT_TBL_DAT_COD_CLI, rst.getString("co_cli"));
                    vecReg.add(INT_TBL_DAT_NOM_CLI, rst.getString("tx_nom"));
                    vecReg.add(INT_TBL_DAT_DIR_CLI, rst.getString("tx_dir"));
                    vecDat.add(vecReg);

                }
                rst.close();
                stm.close();
                rst = null;
                stm = null;
                conRemGlo.close();
                conRemGlo = null;

                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
            }
        } 
        catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } 
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Configurar el formulario.
     */
    private boolean configurarFrm() 
    {
        boolean blnRes = true;
        try
        {
            //Inicializar objetos.
            objUti = new ZafUtil();
            strAux = objParSis.getNombreMenu();
            this.setTitle(strAux);
            lblTit.setText(strAux);
            //Configurar JTable: Establecer el modelo.
            vecDat = new Vector();    //Almacena los datos
            vecCab = new Vector(8);   //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN, "");
            vecCab.add(INT_TBL_DAT_COD_CLI, "Cód.Cli.");
            vecCab.add(INT_TBL_DAT_NOM_CLI, "Nom.Cli.");
            vecCab.add(INT_TBL_DAT_DIR_CLI, "Dir.Cli.");

            objTblMod = new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            new ZafColNumerada(tblDat, INT_TBL_DAT_LIN);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux = tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(90);
            tcmAux.getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(170);
            tcmAux.getColumn(INT_TBL_DAT_DIR_CLI).setPreferredWidth(180);
            tblDat.getTableHeader().setReorderingAllowed(false);
            
            objTblBus = new ZafTblBus(tblDat);
            objTblOrd = new ZafTblOrd(tblDat);            

            Str_RegSel = new String[1];
            tblDat.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    if (!((tblDat.getSelectedColumn() == -1) || (tblDat.getSelectedRow() == -1))) {
                        if (evt.getClickCount() == 2) {

                            Str_RegSel[0] = tblDat.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_COD_CLI).toString();

                            blnAcepta = true;
                            dispose();
                        }
                    }
                }
            });

            objMouMotAda = new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer columnas editables.
            vecAux = new Vector();
            objTblMod.setColumnasEditables(vecAux);
            vecAux = null;
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            tcmAux = null;
        } catch (Exception e) {
            blnRes = false;
        }
        return blnRes;
    }

    public String GetCamSel(int Idx) 
    {
        if (!(Str_RegSel == null)) {
            if (Idx <= 0 || Idx > Str_RegSel.length) {
                return "El parametro debe ser entre 1 y " + Integer.toString(Str_RegSel.length);
            } else {
                return Str_RegSel[Idx - 1];
            }
        } else {
            return "";
        }
    }

    public boolean acepta() 
    {
        return blnAcepta;
    }

    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter 
    {
        public void mouseMoved(java.awt.event.MouseEvent evt) 
        {
            int intCol = tblDat.columnAtPoint(evt.getPoint());
            String strMsg = "";
            switch (intCol) 
            {
                case INT_TBL_DAT_LIN:
                    strMsg = "";
                    break;

                case INT_TBL_DAT_COD_CLI:
                    strMsg = "Codígo de cliente";
                    break;

                case INT_TBL_DAT_NOM_CLI:
                    strMsg = "Nombre de cliente";
                    break;

                case INT_TBL_DAT_DIR_CLI:
                    strMsg = "Dirección del cliente";
                    break;

                default:
                    strMsg = "";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }

}
