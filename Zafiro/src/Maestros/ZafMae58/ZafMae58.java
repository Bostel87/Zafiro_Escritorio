/*
 * ZafCon06.java
 *
 * Created on 03 de enero de 2006, 08:30 PM
 */
package Maestros.ZafMae58;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafToolBar.ZafToolBar;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.util.ArrayList;
import java.util.Vector;

/**
 *
 * @author  Eddye Lino
 */
public class ZafMae58 extends javax.swing.JInternalFrame
{
    //Constantes: Columnas del JTable.
    final int INT_TBL_DAT_LIN=0;                        //Línea.
    final int INT_TBL_DAT_CHK=1;                        //Casilla de verificación.
    final int INT_TBL_DAT_COD=2;                        //Código del menú.
    final int INT_TBL_DAT_NOM=3;                        //Nombre del menú.
    //Variables generales.
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafColNumerada objColNum, objColNumGrpUsr;
    private ZafTblMod objTblMod, objTblModGrpUsr;
    private ZafTblEdi objTblEdi, objTblEdiGrpUsu;                        //Editor: Editor del JTable.
//    private ZafThreadGUI objThrGUI;
    private ZafTblCelRenLbl objTblCelRenLbl;            //Render: Presentar JLabel en JTable.
    private ZafTblCelRenChk objTblCelRenChk, objTblCelRenChkColAdd, objTblCelRenChkUsu;            //Render: Presentar JCheckBox en JTable.
    private ZafTblCelEdiChk objTblCelEdiChk, objTblCelEdiChkColAdd, objTblCelEdiChkUsu;            //Editor: JCheckBox en celda.
    private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
    private ZafTblPopMnu objTblPopMnu, objTblPopMnuGrpUsr;                  //PopupMenu: Establecer PeopuMenú en JTable.
    private MiToolBar objTooBar;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private String strSQL, strAux, strSQLCon;
    private Vector vecDat, vecCab, vecReg;
    private Vector vecAux;
    private boolean blnCon;                             //true: Continua la ejecución del hilo.
    private boolean blnHayCam;                          //Determina si hay cambios en el formulario.
    private String strDesCorUsr, strDesLarUsr;          //Contenido del campo al obtener el foco.

    
    private Vector vecCabGrpUsr, vecRegGrpUsr, vecDatGrpUsr;
    final int INT_TBL_GRP_USU_LIN=0;
    final int INT_TBL_GRP_USU_CHK=1;
    final int INT_TBL_GRP_USU_COD=2;
    final int INT_TBL_GRP_USU_DES_COR=3;
    final int INT_TBL_GRP_USU_DES_LAR=4;
    private ArrayList arlDatCodGrpUsr;
    private int intNumDatVecDat;
    final int INT_ARR_COD_GRP_COD_USR=0;
    final int INT_ARR_COD_GRP_NOM_USR=1;
    private int iniRec;
    private String strVecDat[][];
    private int numColModIni;
    private int numColModFinGlb;
    private int intNumColIni;
    
    /** Crea una nueva instancia de la clase ZafCon06. */
    public ZafMae58(ZafParSis obj)
    {
        try
        {
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
            if (!configurarFrm())
                exitForm();
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGrl = new javax.swing.JPanel();
        panCab = new javax.swing.JPanel();
        optUsu = new javax.swing.JRadioButton();
        optGrp = new javax.swing.JRadioButton();
        panGrlGrp = new javax.swing.JPanel();
        spnGrlGrpUsu = new javax.swing.JScrollPane();
        tblDatGrpUsu = new javax.swing.JTable();
        panGen = new javax.swing.JPanel();
        panGenDet = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panGrl.setLayout(new java.awt.BorderLayout());

        panCab.setPreferredSize(new java.awt.Dimension(100, 60));
        panCab.setLayout(null);

        optUsu.setText("Por Usuario");
        optUsu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optUsuActionPerformed(evt);
            }
        });
        panCab.add(optUsu);
        optUsu.setBounds(0, 20, 290, 18);

        optGrp.setText("Por Grupo");
        optGrp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optGrpActionPerformed(evt);
            }
        });
        panCab.add(optGrp);
        optGrp.setBounds(0, 0, 220, 18);

        panGrl.add(panCab, java.awt.BorderLayout.NORTH);

        panGrlGrp.setBorder(javax.swing.BorderFactory.createTitledBorder("Grupo de usuarios"));
        panGrlGrp.setLayout(new java.awt.BorderLayout());

        tblDatGrpUsu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnGrlGrpUsu.setViewportView(tblDatGrpUsu);

        panGrlGrp.add(spnGrlGrpUsu, java.awt.BorderLayout.CENTER);

        panGrl.add(panGrlGrp, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Filtro", panGrl);

        panGen.setLayout(new java.awt.BorderLayout());

        panGenDet.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDat.setViewportView(tblDat);

        panGenDet.add(spnDat, java.awt.BorderLayout.CENTER);

        panGen.add(panGenDet, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panGen);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());
        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="¿Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                //Cerrar la conexión si está abierta.
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

private void optGrpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optGrpActionPerformed
// TODO add your handling code here:
    if(optGrp.isSelected()){
        optUsu.setSelected(false);
        if(! (cargarGrpUsr()) )
            mostrarMsgInf("Advertencia: No se cargaron correctamente los datos de Grupos de Usuarios");
    }
    else{
        optUsu.setSelected(true);
            if(! (cargarUsr()) )
                mostrarMsgInf("Advertencia: No se cargaron correctamente los datos de Usuarios");
    }
}//GEN-LAST:event_optGrpActionPerformed

private void optUsuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optUsuActionPerformed
// TODO add your handling code here:
    if(optUsu.isSelected()){
        optGrp.setSelected(false);
        if(! (cargarUsr()) )
            mostrarMsgInf("Advertencia: No se cargaron correctamente los datos de Usuarios");
    }
    else{
        optGrp.setSelected(true);
        if(! (cargarGrpUsr()) )
            mostrarMsgInf("Advertencia: No se cargaron correctamente los datos de Grupos de Usuarios");
    }
}//GEN-LAST:event_optUsuActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optGrp;
    private javax.swing.JRadioButton optUsu;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGen;
    private javax.swing.JPanel panGenDet;
    private javax.swing.JPanel panGrl;
    private javax.swing.JPanel panGrlGrp;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JScrollPane spnGrlGrpUsu;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblDatGrpUsu;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            objTooBar=new MiToolBar(this);
            panBar.add(objTooBar);
            objTooBar.setVisibleEliminar(false);
            objTooBar.setVisibleAnular(false);
            this.setTitle(objParSis.getNombreMenu() + " v0.2");
            lblTit.setText(objParSis.getNombreMenu());
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(4);   //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_CHK,"");
            vecCab.add(INT_TBL_DAT_COD,"Código");
            vecCab.add(INT_TBL_DAT_NOM,"Nombre");
            objTblMod=new ZafTblMod();
            strVecDat=new String [50][50];
            objTblMod.setHeader(vecCab);
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_COD).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_NOM).setPreferredWidth(200);
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_DAT_CHK).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_CHK);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            //Configurar JTable: Editor de la tabla.
            //objTblEdi=new ZafTblEdi(tblDat);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk=new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellRenderer(objTblCelRenChk);

            
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            tcmAux.getColumn(INT_TBL_DAT_COD).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
            //Configurar JTable: Editor de celdas.
            objTblCelEdiChk=new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {

                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), tblDat.getSelectedColumn())){
                    }
                    else{
                        for(int p=(intNumColIni); p<objTblMod.getColumnCount();p++){
                            objTblMod.setChecked(false, tblDat.getSelectedRow(), p);
                        }
                    }
                }
            });
            
            
            
//            objTblCelEdiChk=null;
            //Ocultar objetos del sistema.
            
            configurarGrpUsr();
            objTooBar.setVisibleInsertar(false);
            objTooBar.setEnabledInsertar(false);
            
            intNumColIni=objTblMod.getColumnCount();

            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_DAT_CHK).setResizable(false);

            //Configurar JTable: Ocultar columnas del sistema.
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_CHK, tblDat);

            
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
     * insertar, consultar, modificar, eliminar, etc. Además de los botones de navegación
     * que permiten desplazarse al primero, anterior, siguiente y último registro.
     */
    private class MiToolBar extends ZafToolBar
    {
        public MiToolBar(javax.swing.JInternalFrame ifrFrm)
        {
            super(ifrFrm, objParSis);
        }

        public boolean anular()
        {
            return true;
        }

        public void clickAceptar()
        {
            
        }

        public void clickAnterior() 
        {
        }

        public void clickAnular()
        {
            
        }

        public void clickCancelar()
        {
            objTblModGrpUsr.removeAllRows();
            objTblMod.removeAllRows();
            eliminaColTblDatAdicionadas();
            optGrp.setSelected(false);
            optUsu.setSelected(false);
            strVecDat=null;
            strVecDat=new String [50][50];
            
        }

        public void clickConsultar(){
            objTblModGrpUsr.setModoOperacion(objTblModGrpUsr.INT_TBL_EDI);
        }

        public void clickEliminar()
        {
            
        }

        public void clickFin() 
        {
        }

        public void clickImprimir()
        {
            
        }

        public void clickInicio()
        {

        }

        public void clickInsertar()
        {
        }

        public void clickModificar()
        {
            cargarOpcMnu();
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            objTblModGrpUsr.setModoOperacion(objTblModGrpUsr.INT_TBL_NO_EDI);
        }

        public void clickSiguiente()
        {

        }

        public void clickVisPreliminar() 
        {
        }

        public boolean consultar(){
            if(generaNumColChk()){
                if( agregarColTblDat() ){
                    cargarOpcMnu();
                }
            }
            
            

             return true;
        }

        public boolean eliminar()
        {
            return true;
        }

        public boolean insertar()
        {
            return true;
        }

        public boolean modificar()
        {
            boolean blnRes=true;
            if( ! (actualizaTbrPerUsr())  )
                blnRes=false;
            return blnRes;
            
            
        }
        
        public boolean cancelar()
        {
            boolean blnRes=true;
            try
            {
                if (blnHayCam)
                {
                    if (objTooBar.getEstado()=='n' || objTooBar.getEstado()=='m')
                    {
                    }
                }
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            blnHayCam=false;
            return blnRes;
        }
        
        public boolean vistaPreliminar()
        {
            return true;
        }
        
        public boolean aceptar()
        {
            return true;
        }
        
        public boolean imprimir()
        {
            return true;
        }
        
        public boolean beforeInsertar()
        {

            return true;
        }
        
        public boolean beforeConsultar()
        {
            boolean blnRes=true;
            if(! isCamVal())
                blnRes=false;
            return blnRes;
        }

        public boolean beforeModificar()
        {
            boolean blnRes=true;
            if(! isCamVal())
                blnRes=false;
            return blnRes;
        }

        public boolean beforeEliminar()
        {

            return true;
        }

        public boolean beforeAnular()
        {
            return true;
        }

        public boolean beforeImprimir()
        {
            return true;
        }

        public boolean beforeVistaPreliminar()
        {
            return true;
        }

        public boolean beforeAceptar()
        {
            return true;
        }
        
        public boolean beforeCancelar()
        {
            return true;
        }
        
        public boolean afterInsertar()
        {
            return true;
        }

        public boolean afterConsultar()
        {
            return true;
        }

        public boolean afterModificar()
        {
            blnHayCam=false;
            return true;
        }

        public boolean afterEliminar()
        {
            return true;
        }

        public boolean afterAnular()
        {
            return true;
        }

        public boolean afterImprimir()
        {
            return true;
        }

        public boolean afterVistaPreliminar()
        {
            return true;
        }

        public boolean afterAceptar()
        {
            return true;
        }
        
        public boolean afterCancelar()
        {
            return true;
        }
        
    }
    


    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje de advertencia al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos se han cargado
     * con errores y que debe revisar dichos datos.
     */
    private void mostrarMsgAdv(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        if (strMsg.equals(""))
            strMsg="<HTML>Este registro tiene <FONT COLOR=\"red\">problemas</FONT>. <BR>Notifíquelo a su administrador del sistema.</HTML>";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.WARNING_MESSAGE);
    }

    /**
     * Esta función permite cargar las opciones del menú.
     * @return true: Si se pudo cargar el detalle del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarOpcMnu()
    {
        int i;
        boolean blnRes=true;
        int intTmp=0;
        String strCodUsrGrp="";
        String strCodUsr="";
        int intColSet=0;
        int w=0;
        String strCodMnu="", strCodMnuTbl;
        String strCodUsrFilEli="";
        try
        {
            objTooBar.setMenSis("Obteniendo datos...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                System.out.println("ESTADO: " +  objTooBar.getEstado());
                if(  (objTooBar.getEstado()=='x') || (objTooBar.getEstado()=='m')  ){
                    strSQL="";
                    strSQL+="SELECT a1.co_emp, a1.co_grp";
                    strSQL+=", a1.tx_desCor, a1.tx_desLar";
                    strSQL+=" FROM tbm_grpClaInv AS a1 LEFT OUTER JOIN tbr_grpClaInvUsr AS a2";
                    strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_grp=a2.co_grp";
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + " AND a1.tx_tipGrp='R'";
                    strSQL+=" GROUP BY a1.co_emp, a1.co_grp, a1.tx_desCor, a1.tx_desLar";
                    strSQL+=" ORDER BY a1.co_grp";
                }
                else{
                    strSQL="";
                    strSQL+=" SELECT a1.co_emp, a1.co_grp";
                    strSQL+=" , a2.tx_desCor, a2.tx_desLar";
                    strSQL+=" FROM (tbr_grpClaInvUsr AS a1 INNER JOIN tbm_grpClaInv AS a2";
                    strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_grp=a2.co_grp)";
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + " AND a2.tx_tipGrp='R'";
                    if(optGrp.isSelected()){
                        strSQL+=" AND a1.co_usr IN (SELECT a2.co_usr FROM tbm_grpUsr AS a1 INNER JOIN tbm_usr AS a2 ";
                        strSQL+=" ON a1.co_grp=a2.co_grpUsr ";
                        strAux="";
                        intTmp=0;
                        for(int j=iniRec-1;j>=0;j--){
                            if(intTmp==0){
                                strAux+=" WHERE a1.co_grp IN(";                            intTmp++;
                            }
                            if(j==0){
                                strAux+=objUti.getIntValueAt(arlDatCodGrpUsr, j, INT_ARR_COD_GRP_COD_USR);
                                strAux+=")";
                            }
                            else
                                strAux+=objUti.getStringValueAt(arlDatCodGrpUsr, j, INT_ARR_COD_GRP_COD_USR) + ",";
                        }
                        strSQL+=strAux;
                        strSQL+=")";
                    }
                    else if(optUsu.isSelected()){
                        for (int s=0; s<intNumDatVecDat; s++){
                            if(s==0){
                                strCodUsrFilEli=strVecDat[s][0];
                            }
                            else{
                                strCodUsrFilEli+="," + strVecDat[s][0];
                            }
                        }
                        strSQL+=" AND a1.co_usr IN(";
                        strSQL+=" " + strCodUsrFilEli + "";
                        strSQL+=" )";
                    }

                    strSQL+=" GROUP BY a1.co_emp, a1.co_grp, a2.tx_desCor, a2.tx_desLar";
                    strSQL+=" ORDER BY a1.co_grp";
                }







                System.out.println("CARGA GRUPOS: " + strSQL);
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                objTooBar.setMenSis("Cargando datos...");
                while (rst.next())
                {
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN,"");
                    vecReg.add(INT_TBL_DAT_CHK,"");
                    vecReg.add(INT_TBL_DAT_COD,rst.getString("co_grp"));
                    //Generar la tabulación para el campo "tx_nom".
                    vecReg.add(INT_TBL_DAT_NOM, rst.getString("tx_desLar"));
                    
                    
                    //para adicionar el componente CHK en las columnas adicionadas
                    vecAux=new Vector();
                    vecAux.add("" + INT_TBL_DAT_CHK);
                    for (int j=0; j<intNumDatVecDat; j++){
                        vecReg.add(intNumColIni+j, "");
                        //agregar al vector las columnas que van a ser editables
                        vecAux.add("" + (intNumColIni+j));
                    }
                    
                    
                    vecDat.add(vecReg);
                    
                }
                //para hacer editable las celdas
                objTblMod.setColumnasEditables(vecAux);
//              Configurar JTable: Editor de la tabla.
                objTblEdi=new ZafTblEdi(tblDat);
                
                rst.close();
                stm.close();
//                con.close();
                rst=null;
                stm=null;
//                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                
                
                
                
////////////////////////////////////////////////////////////////////////////////////////////////////                
                //por GRUPO DE USUARIO
                if(optGrp.isSelected()){
                    stm=con.createStatement();
                    strSQL="";
                    strSQL+=" SELECT a1.co_usr, a1.tx_usr, a1.tx_nom, c1.co_emp, c1.co_grp, ";
                    strSQL+=" c1.co_usr, a2.co_grp, a2.tx_desCor, a2.tx_desLar";
                    if(objParSis.getCodigoUsuario()==1){
                        strSQL+=" FROM (tbm_usr AS a1    ";
                    }
                    else{
                        strSQL+=" FROM ((tbm_usr AS a1 INNER JOIN tbr_usrEmp AS b1 ON a1.co_usr=b1.co_usr)   ";
                    }                    
                    strSQL+="         INNER JOIN tbr_grpClaInvUsr AS c1 ON ";
                    strSQL+="         a1.co_usr=c1.co_usr AND c1.co_emp=" + objParSis.getCodigoEmpresa() + ")";
                    strSQL+=" INNER JOIN tbm_grpUsr AS a2";
                    strSQL+=" ON a1.co_grpUsr=a2.co_grp";
                    strSQL+=" where c1.co_emp=" + objParSis.getCodigoEmpresa() + "";

                    strAux="";
                    intTmp=0;
                    for(int j=iniRec-1;j>=0;j--){
                        if(intTmp==0){
                            strAux+=" and a2.co_grp in (";
                            intTmp++;
                        }                                        
                        if(j==0){
                            strAux+=objUti.getIntValueAt(arlDatCodGrpUsr, j, INT_ARR_COD_GRP_COD_USR);
                            strAux+=")";
                        }
                        else{
                            strAux+=objUti.getStringValueAt(arlDatCodGrpUsr, j, INT_ARR_COD_GRP_COD_USR) + ",";
                        }
                    }
                    strSQL+=strAux;
                    strSQL+=" AND a1.st_reg NOT IN('I','E')";
                    strSQL+=" ORDER BY a1.co_usr, c1.co_emp, c1.co_usr";
                    
                }




                else{//POR USUARIO
                    stm=con.createStatement();
                    strSQL="";
                    strSQL+=" SELECT a1.co_usr, a1.tx_usr, a1.tx_nom, c1.co_emp, c1.co_grp, ";
                    strSQL+=" c1.co_usr";
                    if(objParSis.getCodigoUsuario()==1){
                        strSQL+=" FROM (tbm_usr AS a1   ";
                    }
                    else{
                        strSQL+=" FROM ((tbm_usr AS a1 INNER JOIN tbr_usrEmp AS b1 ON a1.co_usr=b1.co_usr)   ";
                    }
                    strSQL+="         INNER JOIN tbr_grpClaInvUsr AS c1 ON ";
                    strSQL+="         a1.co_usr=c1.co_usr AND c1.co_emp=" + objParSis.getCodigoEmpresa() + ")";
                    strSQL+=" where c1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    
                    for (int s=0; s<intNumDatVecDat; s++){
                        if(s==0){
                            strCodUsrFilEli=strVecDat[s][0];
                        }
                        else{
                            strCodUsrFilEli+="," + strVecDat[s][0];
                        }
                    }                    
                    strSQL+=" AND a1.co_usr IN(";
                    strSQL+=" " + strCodUsrFilEli + "";
                    strSQL+=" )";
                    strSQL+=" AND a1.st_reg NOT IN('I','E')";
                    strSQL+=" ORDER BY a1.co_usr, c1.co_emp, c1.co_usr";
                }
                
                System.out.println("FALLA: " + strSQL);
                rst=stm.executeQuery(strSQL);
                strCodUsrGrp=strVecDat[w][0]==null?"":strVecDat[w][0];
                while (rst.next()){
                    
                    strCodUsr=rst.getString("co_usr");
                    while( !(strCodUsrGrp.equals(""))  ){
                        strCodUsrGrp=strVecDat[w][0]==null?"":strVecDat[w][0];
                        if(strCodUsr.toString().equals(strCodUsrGrp)){
                            intColSet=Integer.parseInt(strVecDat[w][2]);
                            
                            
                            strCodMnu=rst.getString("co_grp");
                            for(int y=0; y<objTblMod.getRowCountTrue(); y++){
                                strCodMnuTbl=""+(objTblMod.getValueAt(y, INT_TBL_DAT_COD)==null?"":objTblMod.getValueAt(y, INT_TBL_DAT_COD));
                                if(strCodMnu.toString().equals(strCodMnuTbl)){
                                    objTblMod.setValueAt(new Boolean(true), y, intColSet);
                                    objTblMod.setChecked(true, y, INT_TBL_DAT_CHK);
                                }
                            }
                             
                        }
                    w++;
                    }
                    w=0;
                    strCodUsrGrp=strVecDat[w][0]==null?"":strVecDat[w][0];
                }
                
                
/////////////////////////////////////////////////////////////////////////////////////////////////////                
                
                objTooBar.setMenSis("Listo");
                tabFrm.setSelectedIndex(1);
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    




    /**

    


    


    
 

    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD:
                    strMsg="Código del menú";
                    break;
                case INT_TBL_DAT_NOM:
                    strMsg="Nombre del menú";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
    private void configurarGrpUsr(){
        vecDatGrpUsr=new Vector();
        vecDatGrpUsr.clear();
        vecCabGrpUsr=new Vector(5);
        vecCabGrpUsr.clear();
        vecCabGrpUsr.add(INT_TBL_GRP_USU_LIN, "");
        vecCabGrpUsr.add(INT_TBL_GRP_USU_CHK, "SEL.");
        vecCabGrpUsr.add(INT_TBL_GRP_USU_COD, "CÓDIGO DE GRUPO DE USUARIO");
        vecCabGrpUsr.add(INT_TBL_GRP_USU_DES_COR, "DESC. CORTA DE GRUPO DE USUARIO.");
        vecCabGrpUsr.add(INT_TBL_GRP_USU_DES_LAR, "DESC. LARGA DE GRUPO DE USUARIO.");

        objTblModGrpUsr=new ZafTblMod();
        objTblModGrpUsr.setHeader(vecCabGrpUsr);            
        //Configurar JTable: Establecer el modelo de la tabla.
        tblDatGrpUsu.setModel(objTblModGrpUsr);
        objColNumGrpUsr=new ZafColNumerada(tblDatGrpUsu, INT_TBL_GRP_USU_LIN);
        //Configurar JTable: Establecer tipo de selecci�n.
        tblDatGrpUsu.setRowSelectionAllowed(true);
        tblDatGrpUsu.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        //Configurar JTable: Establecer el men� de contexto.
        objTblPopMnuGrpUsr=new ZafTblPopMnu(tblDatGrpUsu);
        //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
        tblDatGrpUsu.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        //Configurar JTable: Establecer el ancho de las columnas.
        javax.swing.table.TableColumnModel tcmAux=tblDatGrpUsu.getColumnModel();
        tcmAux.getColumn(INT_TBL_GRP_USU_LIN).setPreferredWidth(40);
        tcmAux.getColumn(INT_TBL_GRP_USU_CHK).setPreferredWidth(30);
        tcmAux.getColumn(INT_TBL_GRP_USU_COD).setPreferredWidth(60);
        tcmAux.getColumn(INT_TBL_GRP_USU_DES_COR).setPreferredWidth(80);                
        tcmAux.getColumn(INT_TBL_GRP_USU_DES_LAR).setPreferredWidth(200);
        //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
        tcmAux.getColumn(INT_TBL_GRP_USU_CHK).setResizable(false);
        tcmAux.getColumn(INT_TBL_GRP_USU_COD).setResizable(false);
        //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
        tblDatGrpUsu.getTableHeader().setReorderingAllowed(false);
        
        objTblCelRenChkUsu=new ZafTblCelRenChk();
        tblDatGrpUsu.getColumnModel().getColumn(INT_TBL_GRP_USU_CHK).setCellRenderer(objTblCelRenChkUsu);
        objTblCelEdiChkUsu=new ZafTblCelEdiChk(tblDatGrpUsu);
        tblDatGrpUsu.getColumnModel().getColumn(INT_TBL_GRP_USU_CHK).setCellEditor(objTblCelEdiChkUsu);            
//        objTblCelEdiChkUsu.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
//
//            });
        //para hacer editable las celdas
        vecAux=new Vector();                       
        vecAux.add("" + INT_TBL_GRP_USU_CHK);
        objTblModGrpUsr.setColumnasEditables(vecAux);            
        vecAux=null;

         //Configurar JTable: Editor de la tabla.
        objTblEdiGrpUsu=new ZafTblEdi(tblDatGrpUsu);
        objTblModGrpUsr.setModoOperacion(objTblModGrpUsr.INT_TBL_EDI);
    }
    
    
    private boolean cargarGrpUsr(){
        boolean blnRes=true;
        try{                        
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="select co_grp, tx_descor, tx_deslar";
                strSQL+=" from tbm_grpusr";
                strSQL+=" where st_reg='A'";
                strSQL+=" order by tx_descor";
                rst=stm.executeQuery(strSQL);
                while (rst.next()){
                    vecRegGrpUsr=new Vector();
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_LIN, "");
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_CHK, "");
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_COD, "" + rst.getInt("co_grp"));
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_DES_COR, "" + (rst.getString("tx_descor")==null?"":rst.getString("tx_descor")) );
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_DES_LAR, "" + (rst.getString("tx_deslar")==null?"":rst.getString("tx_deslar")) );
                    vecDatGrpUsr.add(vecRegGrpUsr);
                }
                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                objTblModGrpUsr.setData(vecDatGrpUsr);
                tblDatGrpUsu.setModel(objTblModGrpUsr);
                vecDatGrpUsr.clear();
            }            
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }                
        return blnRes;
    }
    
    
    private boolean cargarUsr(){
        boolean blnRes=true;
        try{                        
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                if(objParSis.getCodigoUsuario()==1){
                    strSQL="";
                    strSQL+="SELECT a1.co_usr, a1.tx_usr, a1.tx_nom ";
                    strSQL+=" FROM tbm_usr AS a1";
                    strSQL+=" WHERE ";
                    strSQL+=" a1.st_reg NOT IN('I','E')";
                    strSQL+=" ORDER BY a1.tx_nom";
                }
                else{
                    strSQL="";
                    strSQL+="SELECT a1.co_usr, a1.tx_usr, a1.tx_nom ";
                    strSQL+=" FROM tbm_usr AS a1 INNER JOIN tbr_usrEmp AS a2";
                    strSQL+=" ON a1.co_usr=a2.co_usr";
                    strSQL+=" WHERE a2.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+=" AND a1.st_reg NOT IN('I','E')";
                    strSQL+=" ORDER BY a1.tx_nom";
                }

                
                rst=stm.executeQuery(strSQL);
                while (rst.next()){
                    vecRegGrpUsr=new Vector();
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_LIN, "");
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_CHK, "");
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_COD, "" + rst.getInt("co_usr"));
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_DES_COR, "" + (rst.getString("tx_usr")==null?"":rst.getString("tx_usr")) );
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_DES_LAR, "" + (rst.getString("tx_nom")==null?"":rst.getString("tx_nom")) );
                    vecDatGrpUsr.add(vecRegGrpUsr);
                }
                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                objTblModGrpUsr.setData(vecDatGrpUsr);
                tblDatGrpUsu.setModel(objTblModGrpUsr);
                vecDatGrpUsr.clear();
            }            
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }                
        return blnRes;
    }
    
    
    private boolean generaNumColChk(){
        int z=0,intTmp=0;
        boolean blnRes=true;
        arlDatCodGrpUsr=new ArrayList();
        arlDatCodGrpUsr.clear();
        strAux="";
        intNumDatVecDat=0;
        Connection conNumCol;
        try{
            conNumCol=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conNumCol!=null){
                stm=conNumCol.createStatement();
                if(optGrp.isSelected()){
                    if(objParSis.getCodigoUsuario()==1){
                        strSQL="";
                        strSQL+="select a2.co_usr, a2.tx_usr";
                        strSQL+=" from tbm_grpusr as a1 inner join tbm_usr as a2";
                        strSQL+=" on a1.co_grp=a2.co_grpusr";
                        strSQL+=" where a1.st_reg='A' and a2.st_reg='A'";                    
                    }
                    else{
                        strSQL="";
                        strSQL+="select a2.co_usr, a2.tx_usr, a3.co_emp";
                        strSQL+=" from tbm_grpusr as a1 inner join tbm_usr as a2";
                        strSQL+=" on a1.co_grp=a2.co_grpusr";
                        strSQL+=" inner join tbr_usremp as a3";
                        strSQL+=" on a2.co_usr=a3.co_usr and a3.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+=" where a1.st_reg='A' and a2.st_reg='A'";
                    }
                    for(int i=0; i<objTblModGrpUsr.getRowCountTrue();i++){
                        if(objTblModGrpUsr.isChecked(i, INT_TBL_GRP_USU_CHK)){
                            ArrayList arlRegCodGrpUsr=new ArrayList();
                            arlRegCodGrpUsr.add(INT_ARR_COD_GRP_COD_USR, objTblModGrpUsr.getValueAt(i, INT_TBL_GRP_USU_COD));
                            arlRegCodGrpUsr.add(INT_ARR_COD_GRP_NOM_USR, objTblModGrpUsr.getValueAt(i, INT_TBL_GRP_USU_DES_COR));
                            arlDatCodGrpUsr.add(arlRegCodGrpUsr);
                            z++;
                            }
                    }
                    iniRec=z;
                    for(int j=z-1;j>=0;j--){
                        if(intTmp==0){
                            strAux+=" and a2.co_grpusr in (";
                            intTmp++;
                        }
                        if(j==0){
                            strAux+=objUti.getIntValueAt(arlDatCodGrpUsr, j, INT_ARR_COD_GRP_COD_USR);
                            strAux+=")";
                        }
                        else{
                            strAux+=objUti.getStringValueAt(arlDatCodGrpUsr, j, INT_ARR_COD_GRP_COD_USR) + ",";
                        }
                    }
                    strSQL+=strAux;
                    strSQL+=" order by a2.co_usr";
                    
                    
                    
                    
                }
                else{
                    if(objParSis.getCodigoUsuario()==1){
                        strSQL="";
                        strSQL+="select a2.co_usr, a2.tx_usr";
                        strSQL+=" from tbm_usr as a2";
                        strSQL+=" where a2.st_reg='A'";                    
                    }
                    else{
                        strSQL="";
                        strSQL+="select a2.co_usr, a2.tx_usr, a3.co_emp";
                        strSQL+=" from tbm_usr as a2";
                        strSQL+=" inner join tbr_usremp as a3";
                        strSQL+=" on a2.co_usr=a3.co_usr and a3.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+=" where a2.st_reg='A'";
                    }
                    
                    
                    
                    for(int i=0; i<objTblModGrpUsr.getRowCountTrue();i++){
                        if(objTblModGrpUsr.isChecked(i, INT_TBL_GRP_USU_CHK)){
                            ArrayList arlRegCodGrpUsr=new ArrayList();
                            arlRegCodGrpUsr.add(INT_ARR_COD_GRP_COD_USR, objTblModGrpUsr.getValueAt(i, INT_TBL_GRP_USU_COD));
                            arlRegCodGrpUsr.add(INT_ARR_COD_GRP_NOM_USR, objTblModGrpUsr.getValueAt(i, INT_TBL_GRP_USU_DES_COR));
                            arlDatCodGrpUsr.add(arlRegCodGrpUsr);
                            z++;
                            }
                    }
                    iniRec=z;
                    for(int j=z-1;j>=0;j--){
                        if(intTmp==0){
                            strAux+=" and a2.co_usr in (";
                            intTmp++;
                        }
                        if(j==0){
                            strAux+=objUti.getIntValueAt(arlDatCodGrpUsr, j, INT_ARR_COD_GRP_COD_USR);
                            strAux+=")";
                        }
                        else{
                            strAux+=objUti.getStringValueAt(arlDatCodGrpUsr, j, INT_ARR_COD_GRP_COD_USR) + ",";
                        }
                    }
                    strSQL+=strAux;
                    strSQL+=" order by a2.co_usr";
                    
                }
                rst=stm.executeQuery(strSQL);
                
                for(int i=0; rst.next(); i++){
                    
                    strVecDat[i][0]="" + rst.getInt("co_usr");
                    strVecDat[i][1]=rst.getString("tx_usr");
                    intNumDatVecDat++;
                }
                stm.close();
                rst.close();
                stm=null;
                rst=null;
                conNumCol.close();
                conNumCol=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    private boolean agregarColTblDat(){
        int z=0,intTmp=0;
        boolean blnRes=true;
        strAux="";
        javax.swing.table.TableColumn tbc;
        
        try{
            numColModIni=tblDat.getColumnCount();
            for (int i=0; i<intNumDatVecDat; i++)
            {
                tbc=new javax.swing.table.TableColumn(intNumColIni+i);
                tbc.setHeaderValue(" " + strVecDat[i][1] + " ");
                strVecDat[i][2]=String.valueOf((intNumColIni+i));
                //Configurar JTable: Establecer el ancho de la columna.
                tbc.setPreferredWidth(70);

                objTblCelRenChkColAdd=new ZafTblCelRenChk();
                tbc.setCellRenderer(objTblCelRenChkColAdd);
                
                
                
                objTblCelEdiChkColAdd=new ZafTblCelEdiChk(tblDat);
                tbc.setCellEditor(objTblCelEdiChkColAdd);
                objTblCelEdiChkColAdd.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                    public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {

                    }
                    public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                        if(objTblMod.isChecked(tblDat.getSelectedRow(), tblDat.getSelectedColumn())){
                            objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                        }
                        else{
                            int t=0;//si cambia de valor es porq alguna columna de usuario esta seleccionada
                            for(int p=(intNumColIni); p<objTblMod.getColumnCount();p++){
                                if(objTblMod.isChecked(tblDat.getSelectedRow(), p)){
                                    t++;
                                }
                            }
                            if(t==0){
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                            }
                        }
                    }
                });
                
                objTblMod.addColumn(tblDat, tbc);
            }
            numColModFinGlb=tblDat.getColumnCount();
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }        
                        
        return blnRes;
    }
    
    
    private boolean actualizaTbrPerUsr(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if(con!=null){
                //ACTUALIZA EN LA TABLA tbr_ctaTipDocUsrMod
                if(eliminaTbrPerUsr()){
                    if(insertaTbrPerUsr()){
                        con.commit();
                    }
                    else{
                        con.rollback();
                        blnRes=false;
                    }
                }
                else{
                    con.rollback();
                    blnRes=false;                    
                }
            con.close();
            con=null;            
            }            
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean eliminaTbrPerUsr(){
        boolean blnRes=true;
        String strCodUsrFilEli="";
        int intTmp=0;
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="DELETE FROM tbr_grpClaInvUsr";
                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                if(optGrp.isSelected()){
                    strSQL+=" AND co_usr IN (SELECT a2.co_usr FROM tbm_grpUsr AS a1 INNER JOIN tbm_usr AS a2 ";
                    strSQL+=" ON a1.co_grp=a2.co_grpUsr ";
                    strAux="";
                    intTmp=0;
                    for(int j=iniRec-1;j>=0;j--){
                        if(intTmp==0){
                            strAux+=" WHERE a1.co_grp IN(";                            intTmp++;
                        }
                        if(j==0){
                            strAux+=objUti.getIntValueAt(arlDatCodGrpUsr, j, INT_ARR_COD_GRP_COD_USR);
                            strAux+=")";
                        }
                        else
                            strAux+=objUti.getStringValueAt(arlDatCodGrpUsr, j, INT_ARR_COD_GRP_COD_USR) + ",";
                    }
                    strSQL+=strAux;
                    strSQL+=")";
                }
                else if(optUsu.isSelected()){
                    for (int s=0; s<intNumDatVecDat; s++){
                        if(s==0){
                            strCodUsrFilEli=strVecDat[s][0];
                        }
                        else{
                            strCodUsrFilEli+="," + strVecDat[s][0];
                        }
                    }
                    strSQL+=" AND co_usr IN(";
                    strSQL+=" " + strCodUsrFilEli + "";
                    strSQL+=" )";
                }









                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    
    
    //ACTUALIZA EN LA TABLA tbr_ctaTipDocUsrMod
    private boolean insertaTbrPerUsr(){
        boolean blnRes=true;
        String strColVec="";
        int w=0;
        String strColTbl="";
        String strCodUsrGrp="";
        int intCodCta=0;
        String strSQLIns="";
        try{
            if(con!=null){
                stm=con.createStatement();
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    if(objTblMod.getValueAt(i, INT_TBL_DAT_LIN)=="M"){
                        if(objTblMod.isChecked(i, INT_TBL_DAT_CHK)){
                            for( int j=(numColModIni); j<=numColModFinGlb; j++ ){
                                strColVec=strVecDat[w][2]==null?"":strVecDat[w][2];
                                strColTbl=""+j;
                                while( !(strColVec.equals(""))  ){
                                    if(strColVec.toString().equals(strColTbl)){
                                        if(objTblMod.isChecked(i, j)){
                                            strCodUsrGrp=strVecDat[w][0]==null?"":strVecDat[w][0];
                                            intCodCta=Integer.parseInt(""+objTblMod.getValueAt(i, INT_TBL_DAT_COD));
                                            
                                            strSQL="";
                                            strSQL+="INSERT INTO tbr_grpClaInvUsr(";
                                            strSQL+=" co_emp, co_grp, co_usr, st_regrep)";
                                            strSQL+=" VALUES (";
                                            strSQL+="" + objParSis.getCodigoEmpresa() + ",";
                                            strSQL+=" " + intCodCta + ",";
                                            strSQL+=" " + strCodUsrGrp + ",";
                                            strSQL+=" 'I'";
                                            strSQL+=" );";
                                            System.out.println("tbr_grpClaInvUsr: " + strSQL);
                                            //stm.executeUpdate(strSQL);
                                            strSQLIns+=strSQL;

                                        }
                                    }
                                    w++;
                                    strColVec=strVecDat[w][2]==null?"":strVecDat[w][2];
                                }
                                w=0;
                            }                              
                        }
                        
                    }
                }
                stm.executeUpdate(strSQLIns);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    
    private void eliminaColTblDatAdicionadas(){
        int numColModFin=tblDat.getColumnCount();
        numColModFinGlb=numColModFin;
        try{
            for (int i=(numColModFin-1); i>=numColModIni; i--){
                objTblMod.removeColumn(tblDat, i);
            }
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
    }

    private boolean isCamVal(){
        int intNumRegSel=0;
        for(int i=0; i<objTblModGrpUsr.getRowCountTrue(); i++){
            if(objTblModGrpUsr.isChecked(i, +INT_TBL_GRP_USU_CHK)){
                intNumRegSel++;
                break;
            }
        }
        if(intNumRegSel<=0){
            mostrarMsgInf("<HTML>Debe seleccionar algún usuario o código de usuario para realizar la consulta</HTML>");
            return false;
        }
        return true;
    }
    
    
    
}