/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ZafMae56.java
 *
 * Created on Aug 24, 2009, 11:34:14 AM
 */

package Maestros.ZafMae56;

import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaGrp;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafVenCon.ZafVenCon;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;

/**
 *
 * @author ilino
 */
public class ZafMae56 extends javax.swing.JInternalFrame {

    private ZafParSis objParSis;
    private ZafUtil objUti;


    private String strSQL, strAux;
    private Vector vecCab, vecReg, vecDat, vecAux;
    private ZafTblMod objTblMod;
    private ZafColNumerada objColNum;
    private ZafTblFilCab objTblFilCab;
    private ZafTblEdi objTblEdi;
    private ZafDocLis objDocLis;

    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;

    private final int INT_TBL_DAT_LIN=0;
    private final int INT_TBL_DAT_CHK=1;
    private final int INT_TBL_DAT_COD_PRV=2;
    private final int INT_TBL_DAT_NOM_PRV=3;
    private final int INT_TBL_DAT_CHK_ACT=4;
    private final int INT_TBL_DAT_CHK_INA=5;
    private final int INT_TBL_DAT_CHK_PRE=6;
    private ZafTblPopMnu objTblPopMnu;
    private ZafTblBus objTblBus;
    private ZafTblOrd objTblOrd;
    private int intNumColIzq;
    private ArrayList arlRegAniAdd, arlDatAniAdd;
    private final int INT_ARL_ANI=0;
    private final int INT_ARL_NUM_MES=1;
    private final int INT_ARL_MES=2;
    private final int INT_ARL_COL=3;
    private boolean blnCon;
    private boolean blnHayCam;

    private ZafTblCelRenLbl objTblCelRenLbl;
    private MiToolBar objTooBar;
    private ZafVenCon vcoCla;
    private String strDesCorCla, strDesLarCla;
    private String strCodAlt, strNomItm;

    private ZafTblCelRenChk objTblCelRenChk, objTblCelRenChkAct, objTblCelRenChkIna, objTblCelRenChkPre;
    private ZafTblCelEdiChk objTblCelEdiChk, objTblCelEdiChkAct, objTblCelEdiChkIna, objTblCelEdiChkPre;            //Editor: JCheckBox en celda.

    private int intPrvPre;
    private ZafVenCon vcoItm;
    private String strAgrPrv, strQuiPrv, strCamPrv;
    private int intExiRegSel;

    /** Crea una nueva instancia de la clase ZafCon06. */
    public ZafMae56(ZafParSis obj) {
        try {
            initComponents();
            //Inicializar objetos.
            objParSis = (ZafParSis) obj.clone();
            arlDatAniAdd=new ArrayList();

        } catch (CloneNotSupportedException e) {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panCon = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panConFil = new javax.swing.JPanel();
        panParRep = new javax.swing.JPanel();
        lblItm = new javax.swing.JLabel();
        txtCodItm = new javax.swing.JTextField();
        txtCodAltItm = new javax.swing.JTextField();
        txtNomItm = new javax.swing.JTextField();
        butItm = new javax.swing.JButton();
        panDat = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable() {
            protected javax.swing.table.JTableHeader createDefaultTableHeader()
            {
                return new ZafTblHeaGrp(columnModel);
            }
        };
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panCon.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("jLabel1");
        panCon.add(lblTit, java.awt.BorderLayout.PAGE_START);

        panConFil.setLayout(new java.awt.BorderLayout());

        panParRep.setPreferredSize(new java.awt.Dimension(344, 30));
        panParRep.setLayout(null);

        lblItm.setText("Item:");
        lblItm.setToolTipText("Beneficiario");
        panParRep.add(lblItm);
        lblItm.setBounds(6, 6, 40, 14);

        txtCodItm.setEditable(false);
        txtCodItm.setEnabled(false);
        panParRep.add(txtCodItm);
        txtCodItm.setBounds(30, 4, 20, 20);

        txtCodAltItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodAltItmActionPerformed(evt);
            }
        });
        txtCodAltItm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodAltItmFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodAltItmFocusLost(evt);
            }
        });
        panParRep.add(txtCodAltItm);
        txtCodAltItm.setBounds(52, 4, 88, 20);

        txtNomItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomItmActionPerformed(evt);
            }
        });
        txtNomItm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomItmFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomItmFocusLost(evt);
            }
        });
        panParRep.add(txtNomItm);
        txtNomItm.setBounds(140, 4, 310, 20);

        butItm.setText("...");
        butItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butItmActionPerformed(evt);
            }
        });
        panParRep.add(butItm);
        butItm.setBounds(450, 4, 20, 20);

        panConFil.add(panParRep, java.awt.BorderLayout.NORTH);

        panDat.setPreferredSize(new java.awt.Dimension(100, 160));
        panDat.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDat.setViewportView(tblDat);

        panDat.add(spnDat, java.awt.BorderLayout.CENTER);

        panConFil.add(panDat, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Filtro", panConFil);

        panCon.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());
        panCon.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panCon);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        configurarFrm();
        agregarDocLis();
    }//GEN-LAST:event_formInternalFrameOpened

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        // TODO add your handling code here:
        String strTit, strMsg;
        try{
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="¿Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                //Cerrar la conexi�n si est� abierta.
                if (rst!=null){
                    rst.close();
                    stm.close();
                    con.close();
                    rst=null;
                    stm=null;
                    con=null;
                }
                dispose();
            }
        }
        catch (Exception e){
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void txtCodAltItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodAltItmActionPerformed
        // TODO add your handling code here:
        txtCodAltItm.transferFocus();
}//GEN-LAST:event_txtCodAltItmActionPerformed

    private void txtCodAltItmFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltItmFocusGained
        // TODO add your handling code here:
        strCodAlt=txtCodAltItm.getText();
        txtCodAltItm.selectAll();
}//GEN-LAST:event_txtCodAltItmFocusGained

    private void txtCodAltItmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltItmFocusLost
        // TODO add your handling code here:
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtCodAltItm.getText().equalsIgnoreCase(strCodAlt)) {
            if (txtCodAltItm.getText().equals("")) {
                txtCodItm.setText("");
                txtCodAltItm.setText("");
                txtNomItm.setText("");
            } else {
                mostrarVenConItm(1);
            }
        } else
            txtCodAltItm.setText(strCodAlt);

}//GEN-LAST:event_txtCodAltItmFocusLost

    private void txtNomItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomItmActionPerformed
        // TODO add your handling code here:
        txtNomItm.transferFocus();
}//GEN-LAST:event_txtNomItmActionPerformed

    private void txtNomItmFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomItmFocusGained
        // TODO add your handling code here:
        strNomItm=txtNomItm.getText();
        txtNomItm.selectAll();
}//GEN-LAST:event_txtNomItmFocusGained

    private void txtNomItmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomItmFocusLost
        // TODO add your handling code here:
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtNomItm.getText().equalsIgnoreCase(strNomItm)) {
            if (txtNomItm.getText().equals("")) {
                txtCodItm.setText("");
                txtCodAltItm.setText("");
                txtNomItm.setText("");
            } else {
                mostrarVenConItm(2);
            }
        } else
            txtNomItm.setText(strNomItm);

}//GEN-LAST:event_txtNomItmFocusLost

    private void butItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butItmActionPerformed
        mostrarVenConItm(0);

}//GEN-LAST:event_butItmActionPerformed






    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butItm;
    private javax.swing.JLabel lblItm;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panCon;
    private javax.swing.JPanel panConFil;
    private javax.swing.JPanel panDat;
    private javax.swing.JPanel panParRep;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodAltItm;
    private javax.swing.JTextField txtCodItm;
    private javax.swing.JTextField txtNomItm;
    // End of variables declaration//GEN-END:variables


    /** Configurar el formulario. */
    private boolean configurarFrm() {
        boolean blnRes = true;
        try {
            objUti = new ZafUtil();
            //Inicializar objetos.
            strAux = objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.2");
            lblTit.setText(strAux);
            txtCodItm.setBackground(objParSis.getColorCamposObligatorios());
            txtCodAltItm.setBackground(objParSis.getColorCamposObligatorios());
            txtNomItm.setBackground(objParSis.getColorCamposObligatorios());


            objTooBar=new MiToolBar(this);
            panBar.add(objTooBar);
            //Configurar los JTables.
            configurarTblDat();
            configurarVenConItm();

            txtCodItm.setVisible(false);
            txtCodItm.setEditable(false);
            txtCodItm.setEnabled(false);

            objTooBar.setVisibleInsertar(false);
            objTooBar.setVisibleEliminar(false);
            objTooBar.setVisibleAnular(false);


        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



        /**
     * Esta funci�n configura el JTable "tblDat".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDat() {
        boolean blnRes = true;
        try {
            //Configurar JTable: Establecer el modelo.
            vecDat = new Vector();    //Almacena los datos
            vecCab = new Vector(7);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN, "");
            vecCab.add(INT_TBL_DAT_CHK, "");
            vecCab.add(INT_TBL_DAT_COD_PRV, "Cod.Prv.");
            vecCab.add(INT_TBL_DAT_NOM_PRV, "Proveedor");
            vecCab.add(INT_TBL_DAT_CHK_ACT, "Activo");
            vecCab.add(INT_TBL_DAT_CHK_INA, "Inactivo");
            vecCab.add(INT_TBL_DAT_CHK_PRE, "Predeterminado");

            objTblMod = new ZafTblMod();
            objTblMod.setHeader(vecCab);

            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selecci�n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.getTableHeader().setReorderingAllowed(false);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            objColNum = new ZafColNumerada(tblDat, INT_TBL_DAT_LIN);

            //Configurar JTable: Establecer el men� de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);

            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux = tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(26);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_PRV).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_NOM_PRV).setPreferredWidth(200);
            tcmAux.getColumn(INT_TBL_DAT_CHK_ACT).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_CHK_INA).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRE).setPreferredWidth(50);

            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab = new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);



            if(objTooBar.isOpcionEnabled(2321))
                strAgrPrv="S";//agregar proveedores
            else
                strAgrPrv="N";

            if(objTooBar.isOpcionEnabled(2322))
                strQuiPrv="S";//quitar proveedores
            else
                strQuiPrv="N";

            if(objTooBar.isOpcionEnabled(2323))
                strCamPrv="S";//cambiar estado de proveedores
            else
                strCamPrv="N";





            objTblCelRenChk=new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk=null;

            objTblCelRenChkAct=new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK_ACT).setCellRenderer(objTblCelRenChkAct);
            objTblCelRenChkAct=null;

            objTblCelRenChkIna=new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK_INA).setCellRenderer(objTblCelRenChkIna);
            objTblCelRenChkIna=null;

            objTblCelRenChkPre=new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRE).setCellRenderer(objTblCelRenChkPre);
            objTblCelRenChkPre=null;



            //Configurar JTable: Editor de celdas.
            objTblCelEdiChk=new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                String strLin="";
                String strChk="N", strChkAct="N", strChkIna="N", strChkPre="N";
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    strLin=objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_LIN).toString();
//                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE))
//                        intPrvPre=1;
                    if(strLin.toString().equals(""))
                        objTblMod.setValueAt("I", tblDat.getSelectedRow(), INT_TBL_DAT_LIN);
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK))
                        strChk="S";

                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT))
                        strChkAct="S";
                    else
                        strChkAct="N";
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_INA))
                        strChkIna="S";
                    else
                        strChkIna="N";
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE))
                        strChkPre="S";
                    else
                        strChkPre="N";

                    if(strLin.equals("M")){//para cambiar y quitar
                        if((strQuiPrv.equals("S")) && (strChk.equals("S"))){
                            objTblCelEdiChk.setCancelarEdicion(false);
                        }
                        else if((strAgrPrv.equals("S")) && (strChk.equals("N"))){
                            objTblCelEdiChk.setCancelarEdicion(false);
                        }
                        else if( (strAgrPrv.equals("N"))  || (strQuiPrv.equals("N")) || (strCamPrv.equals("N")) || (strCamPrv.equals("S"))  ){
                            objTblCelEdiChk.setCancelarEdicion(true);
                        }
                    }
                    else if( (strLin.equals("I")) || (strLin.equals(""))  ){//para agregar
                        if(strAgrPrv.equals("S")){
                            objTblCelEdiChk.setCancelarEdicion(false);
                            System.out.println("S");
                        }
                        else if(  (strCamPrv.equals("S")) || (strCamPrv.equals("N")) || (strQuiPrv.equals("S"))  || (strQuiPrv.equals("N")) || (strAgrPrv.equals("N")) ){
                            objTblCelEdiChk.setCancelarEdicion(true);
                        }
                    }
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(strLin.equals("M")){
                        if(strQuiPrv.equals("S")){
                            if( ! objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)){
                                if(desmarcar()){

                                    if(strChkPre.equals("S"))
                                        intPrvPre=0;


                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT);
                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_INA);
                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);
                                }
                                else{
                                    objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                                }
                            }
                            else{
                                if( ! strAgrPrv.equals("S")){
                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                                }
                            }
                        }
                        if(strAgrPrv.equals("S")){
                            System.out.println("strChkAct: " + strChkAct + "  strChkIna: " + strChkIna + "  strChkPre: " + strChkPre);
                            if((objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)) && (intPrvPre==0)  ){
                                if(  (strChkAct.equals("N")) && (strChkIna.equals("N")) && (strChkPre.equals("N")) ){
                                    objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);
                                    intPrvPre=1;
                                }
                            }
                            else if((objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)) && (intPrvPre!=0)  ){
                                if(  (strChkAct.equals("N")) && (strChkIna.equals("N")) && (strChkPre.equals("N")) ){
                                    objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT);
                                }
                            }
                            else if( ! objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)){
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_INA);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);

                                    if(strChkPre.equals("S"))
                                        intPrvPre=0;


                            }
                        }
                    }
                    else if( (strLin.equals("I")) || (strLin.equals(""))  ){
                        if(strAgrPrv.equals("S")){
                            if((objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)) && (intPrvPre==0)  ){
                                objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);
                                intPrvPre=1;
                            }
                            else if((objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)) && (intPrvPre!=0)  )
                                objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT);
                            else if( ! objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)){
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_INA);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);


                                    if(strChkPre.equals("S"))
                                        intPrvPre=0;

                            }
                        }
                    }
                }
            });



            //Configurar JTable: Editor de celdas. ACTIVOS
            objTblCelEdiChkAct=new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK_ACT).setCellEditor(objTblCelEdiChkAct);
            objTblCelEdiChkAct.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                String strLin="", strChkAct="N", strChkIna="N", strChkPre="N";
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    strLin=objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_LIN).toString();

                    if(strLin.toString().equals("")){
                        objTblMod.setValueAt("I", tblDat.getSelectedRow(), INT_TBL_DAT_LIN);
                    }
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT))
                        strChkAct="S";
                    else
                        strChkAct="N";
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_INA))
                        strChkIna="S";
                    else
                        strChkIna="N";
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE))
                        strChkPre="S";
                    else
                        strChkPre="N";

                    if(strLin.equals("M")){//para cambiar y quitar
                        if(strCamPrv.equals("S")){
                            objTblCelEdiChkAct.setCancelarEdicion(false);
                        }
                        else{
                            objTblCelEdiChkAct.setCancelarEdicion(true);
                        }
                    }
                    else if( (strLin.equals("I")) || (strLin.equals(""))  ){//para agregar
                        if(strAgrPrv.equals("S") ){
                            objTblCelEdiChkAct.setCancelarEdicion(false);
                        }
                        else{
                            objTblCelEdiChkAct.setCancelarEdicion(true);
                        }
                    }

                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(strLin.equals("M")){//cambiar
                        if(strCamPrv.equals("S") ){
                            if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)){
                                if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT)){

                                    if(strChkPre.equals("S"))
                                        intPrvPre=0;


                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_INA);
                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);
                                }
                                else{
                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_INA);
                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);


                                    if(strChkPre.equals("S"))
                                        intPrvPre=0;

                                }
                            }
                            else{
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT);
                            }
                        }
                    }
                    else if( (strLin.equals("I")) || (strLin.equals(""))  ){
                        if(strAgrPrv.equals("S") ){
                            if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT)){
                                objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_INA);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);

                                    if(strChkPre.equals("S"))
                                        intPrvPre=0;


                            }
                            else{
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_INA);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);

                                    if(strChkPre.equals("S"))
                                        intPrvPre=0;

                            }
                        }
                    }
                }

            });

            //Configurar JTable: Editor de celdas.
            objTblCelEdiChkIna=new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK_INA).setCellEditor(objTblCelEdiChkIna);
            objTblCelEdiChkIna.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                String strLin="", strChkAct="N", strChkIna="N", strChkPre="N";;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    strLin=objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_LIN).toString();

                    if(strLin.toString().equals("")){
                        objTblMod.setValueAt("I", tblDat.getSelectedRow(), INT_TBL_DAT_LIN);
                    }

                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT))
                        strChkAct="S";
                    else
                        strChkAct="N";
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_INA))
                        strChkIna="S";
                    else
                        strChkIna="N";
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE))
                        strChkPre="S";
                    else
                        strChkPre="N";


                    if(strLin.equals("M")){//para cambiar y quitar
                        if(strCamPrv.equals("S")){
                            objTblCelEdiChkIna.setCancelarEdicion(false);
                        }
                        else{
                            objTblCelEdiChkIna.setCancelarEdicion(true);
                        }
                    }
                    else if( (strLin.equals("I")) || (strLin.equals(""))  ){//para agregar
                        if(strAgrPrv.equals("S") ){
                            objTblCelEdiChkIna.setCancelarEdicion(false);
                        }
                        else{
                            objTblCelEdiChkIna.setCancelarEdicion(true);
                        }
                    }
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(strLin.equals("M")){//cambiar
                        if(strCamPrv.equals("S") ){
                            if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)){
                                if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_INA)){
                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT);
                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);

                                    if(strChkPre.equals("S"))
                                        intPrvPre=0;

                                }
                                else{
                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT);
                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);

                                    if(strChkPre.equals("S"))
                                        intPrvPre=0;

                                }
                            }
                            else{
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_INA);
                            }
                        }
                    }
                    else if( (strLin.equals("I")) || (strLin.equals(""))  ){
                        if(strAgrPrv.equals("S") ){
                            if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_INA)){
                                objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);

                                    if(strChkPre.equals("S"))
                                        intPrvPre=0;

                            }
                            else{
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);

                                    if(strChkPre.equals("S"))
                                        intPrvPre=0;

                            }
                        }
                    }
                }
            });

        //Configurar JTable: Editor de celdas.
        objTblCelEdiChkPre=new ZafTblCelEdiChk(tblDat);
        tcmAux.getColumn(INT_TBL_DAT_CHK_PRE).setCellEditor(objTblCelEdiChkPre);
        objTblCelEdiChkPre.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            String strLin="";
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {

                    strLin=objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_LIN).toString();

                    if(strLin.toString().equals("")){
                        objTblMod.setValueAt("I", tblDat.getSelectedRow(), INT_TBL_DAT_LIN);
                    }

                    if(strLin.equals("M")){//para cambiar y quitar
                        if(strCamPrv.equals("S")){
                            objTblCelEdiChkPre.setCancelarEdicion(false);
                        }
                        else{
                            objTblCelEdiChkPre.setCancelarEdicion(true);
                        }
                    }
                    else if( (strLin.equals("I")) || (strLin.equals(""))  ){//para agregar
                        if(strAgrPrv.equals("S") ){
                            objTblCelEdiChkPre.setCancelarEdicion(false);
                        }
                        else{
                            objTblCelEdiChkPre.setCancelarEdicion(true);
                        }
                    }
            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(strLin.equals("M")){//cambiar
                        if(strCamPrv.equals("S") ){
                            if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)){
                                if( (objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE)) && (intPrvPre==0)  ){
                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT);
                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_INA);
                                    intPrvPre=1;
                                }
                                else if( (objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE)) && (intPrvPre!=0)  ){
                                    mostrarMsgInf("Ya existe un proveedor predeterminado");
                                    objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);
                                }
                                else if( ! objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE)){
                                    intPrvPre=0;
                                }
                            }
                            else{
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);
                            }
                        }
                    }
                    else if( (strLin.equals("I")) || (strLin.equals(""))  ){
                        if(strAgrPrv.equals("S") ){
                            if(  (objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE)) && (intPrvPre==0)   ){
                                objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ACT);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_INA);
                                intPrvPre=1;
                            }
                            else if(  (objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE)) && (intPrvPre!=0)   ){
                                mostrarMsgInf("Ya existe un proveedor predeterminado");
                                objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);
                            }
                            else if( ! objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE)){
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                                objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);
                                intPrvPre=0;
                            }
                        }
                    }
            }
        });



            //para hacer editable las celdas
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_CHK);
            vecAux.add("" + INT_TBL_DAT_CHK_ACT);
            vecAux.add("" + INT_TBL_DAT_CHK_INA);
            vecAux.add("" + INT_TBL_DAT_CHK_PRE);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;




            //Configurar JTable: Editor de b�squeda.
            objTblBus=new ZafTblBus(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);

            //Libero los objetos auxiliares.
            tcmAux = null;

        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }





    /**
     * Esta funci�n se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private void agregarDocLis() {
        txtCodItm.getDocument().addDocumentListener(objDocLis);
        txtCodAltItm.getDocument().addDocumentListener(objDocLis);
        txtNomItm.getDocument().addDocumentListener(objDocLis);
    }


    /**
     * Esta clase implementa la interface DocumentListener que observa los cambios que
     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
     * Se la usa en el sistema para determinar si existe alg�n cambio que se deba grabar
     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
     * presentar� un mensaje advirtiendo que si no guarda los cambios los perder�.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener {

        public void changedUpdate(javax.swing.event.DocumentEvent evt) {
            blnHayCam = true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) {
            blnHayCam = true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) {
            blnHayCam = true;
        }
    }



    /**
     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
     * insertar, consultar, modificar, eliminar, etc. Adem�s de los botones de navegaci�n
     * que permiten desplazarse al primero, anterior, siguiente y �ltimo registro.
     */
    private class MiToolBar extends ZafToolBar
    {
        public MiToolBar(javax.swing.JInternalFrame ifrFrm)
        {
            super(ifrFrm, objParSis);
        }

        public boolean anular()
        {
            return true;
        }

        public void clickAceptar()
        {

        }

        public void clickAnterior()
        {
            try{
                if (!rstCab.isFirst()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.previous();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.previous();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnular()
        {
        }

        public void clickCancelar()
        {
            limpiarFrm();
        }

        public void clickConsultar()
        {
        }

        public void clickEliminar()
        {
        }

        public void clickFin()
        {
            try{
                if (!rstCab.isLast()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.last();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.last();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickImprimir(){




        }

        public void clickInicio()
        {
            try{
                if (!rstCab.isFirst()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.first();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.first();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickInsertar()
        {
        }

        public void clickModificar(){
            cargarReg();
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
        }

        public void clickSiguiente()
        {
            try{
                if (!rstCab.isLast()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.next();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.next();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickVisPreliminar()
        {

        }

        public boolean consultar()
        {
            consultarReg();
            return true;
        }

        public boolean eliminar()
        {
            return true;
        }

        public boolean insertar()
        {
            return true;
        }

        public boolean modificar()
        {
            boolean blnRes=true;

            if( ! (actualiza_tbrPrvInv())  )
                blnRes=false;

            return true;
        }

        public boolean cancelar()
        {
            boolean blnRes=true;
            return blnRes;
        }

        public boolean vistaPreliminar(){
                return true;

        }

        public boolean aceptar()
        {
            return true;
        }

        public boolean imprimir(){
            return true;

        }

        public boolean beforeInsertar(){
            boolean blnRes=true;
            return blnRes;
        }

        public boolean beforeConsultar()
        {
            boolean blnRes=true;
            if( ! isCamVal())
                blnRes=false;
            return blnRes;
        }

        public boolean beforeModificar()
        {
            boolean blnRes=true;
            if( ! isCamValMod())
                blnRes=false;
            return blnRes;
        }

        public boolean beforeEliminar()
        {
            return true;
        }

        public boolean beforeAnular()
        {
            return true;
        }

        public boolean beforeImprimir(){
            boolean blnRes=true;
            return blnRes;
        }

        public boolean beforeVistaPreliminar()
        {
            boolean blnRes=true;
            return blnRes;
        }

        public boolean beforeAceptar()
        {
            return true;
        }

        public boolean beforeCancelar()
        {
            return true;
        }

        public boolean afterInsertar()
        {
            return true;
        }

        public boolean afterConsultar()
        {
            
            return true;
        }

        public boolean afterModificar()
        {
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            return true;
        }

        public boolean afterEliminar()
        {
            return true;
        }

        public boolean afterAnular()
        {
            return true;
        }

        public boolean afterImprimir()
        {
            return true;
        }

        public boolean afterVistaPreliminar()
        {
            return true;
        }

        public boolean afterAceptar()
        {
            return true;
        }

        public boolean afterCancelar()
        {
            return true;
        }

    }




    /**
     * Esta funci�n muestra un mensaje informativo al usuario. Se podr�a utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }


    private boolean consultarReg()
    {
        int intCodEmp, intCodLoc;
        boolean blnRes=true;
        strAux="";
        try
        {
            intCodEmp=objParSis.getCodigoEmpresa();
            intCodLoc=objParSis.getCodigoLocal();
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null)
            {
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                //Validar que s�lo se muestre los documentos asignados al programa.
                if( ! txtCodItm.getText().equals("")){
                    strAux+=" AND a2.co_itm=" + txtCodItm.getText() + "";
                }
                strSQL="";
                strSQL+=" SELECT a2.co_emp, a2.co_itm";
                strSQL+=" FROM tbm_inv as a2 left outer join tbr_prvInv AS a1";
                strSQL+="  ON a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm";
                strSQL+=" WHERE a2.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="" + strAux;
                strSQL+=" GROUP BY a2.co_emp, a2.co_itm";
                strSQL+=" ORDER BY a2.co_itm";
                System.out.println("consultarReg: " + strSQL);
                rstCab=stmCab.executeQuery(strSQL);
                if (rstCab.next())
                {
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                }
                else
                {
                    mostrarMsgInf("No se ha encontrado ning�n registro que cumpla el criterio de b�squeda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    /**
     * Esta funci�n permite cargar el registro seleccionado.
     * @return true: Si se pudo cargar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            if (cargarCabReg()){
                if (cargarDetReg()){
                }
            }
            blnHayCam=false;
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }


    /**
     * Esta funci�n permite cargar la cabecera del registro seleccionado.
     * @return true: Si se pudo cargar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarCabReg(){
        int intPosRel;
        boolean blnRes=true;
        strAux="";
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                strSQL="";
                strSQL+=" SELECT a1.co_itm, a1.tx_codAlt, a1.tx_nomItm, a2.st_reg";
                strSQL+=" FROM tbm_inv AS a1 LEFT OUTER JOIN tbr_prvInv AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm";
                strSQL+=" WHERE a1.co_emp=" + rstCab.getString("co_emp") + "";
                strSQL+=" AND a1.co_itm=" + rstCab.getString("co_itm") + "";
                strSQL+=" GROUP BY a1.co_itm, a1.tx_codAlt, a1.tx_nomItm, a2.st_reg";
                strSQL+=" ORDER BY a1.co_itm";
                rst=stm.executeQuery(strSQL);
                if (rst.next())
                {
                    strAux=rst.getString("co_itm");
                    txtCodItm.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_codAlt");
                    txtCodAltItm.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_nomItm");
                    txtNomItm.setText((strAux==null)?"":strAux);

                    //Mostrar el estado del registro.
                    strAux=rst.getString("st_reg");
                    //objTooBar.setEstadoRegistro(getEstReg(strAux));
                    objTooBar.setEstadoRegistro("Otro");
                }
                else
                {
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                    blnRes=false;
                }
            }
            rst.close();
            stm.close();
            con.close();
            rst=null;
            stm=null;
            con=null;
            //Mostrar la posici�n relativa del registro.
            intPosRel=rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    /**
     * Esta funci�n permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg(){
        int intCodEmp, intCodLoc;
        boolean blnRes=true;
        try{
            strAux="";
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                //Validar que s�lo se muestre los documentos asignados al programa.
                if( ! txtCodItm.getText().equals("")){
                    strAux+=" AND a1.co_itm=" + rstCab.getString("co_itm") + "";
                }

                if( (objTooBar.getEstado()=='x') ||  (objTooBar.getEstado()=='m') ){
                    strSQL="";
                    strSQL+=" SELECT a2.co_cli, a2.tx_nom, CASE WHEN a1.st_reg IS NULL THEN NULL ELSE a1.st_reg END AS st_reg";
                    strSQL+=" , a1.co_prv";
                    strSQL+=" FROM tbm_cli AS a2 LEFT OUTER JOIN tbr_prvInv AS a1  ";
                    //strSQL+=" ON a2.co_emp=a1.co_emp AND a2.co_cli=a1.co_prv  " + strAux + "";
                    strSQL+=" ON a2.co_emp=a1.co_emp AND a2.co_cli=a1.co_prv  ";
                    strSQL+=" WHERE a2.co_emp=" + rstCab.getString("co_emp") + "";
                    strSQL+=" AND a2.st_prv='S'";
                    strSQL+=" ORDER BY a2.tx_nom";
                }
                else{
                    strSQL="";
                    strSQL+=" SELECT a2.co_cli, a2.tx_nom, a1.st_reg";
                    strSQL+=" , a1.co_prv";
                    strSQL+=" FROM tbr_prvInv AS a1 INNER JOIN tbm_cli AS a2";
                    strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_prv=a2.co_cli";
                    strSQL+=" WHERE a1.co_emp=" + rstCab.getString("co_emp") + "";
                    strSQL+=" AND a2.st_prv='S'";
                    strSQL+="" + strAux;
                    strSQL+=" ORDER BY a2.tx_nom";
                }
                System.out.println("consultarReg: " + strSQL);
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                objTooBar.setMenSis("Cargando datos...");
                while (rst.next()){
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN,"");
                    vecReg.add(INT_TBL_DAT_CHK,null);
                    vecReg.add(INT_TBL_DAT_COD_PRV,     "" + rst.getString("co_cli"));
                    vecReg.add(INT_TBL_DAT_NOM_PRV,     "" + rst.getString("tx_nom"));
                    vecReg.add(INT_TBL_DAT_CHK_ACT,     null);
                    vecReg.add(INT_TBL_DAT_CHK_INA,     null);
                    vecReg.add(INT_TBL_DAT_CHK_PRE,     null);

                    strAux=rst.getObject("co_prv")==null?"":rst.getString("co_prv");
                    if( ! strAux.equals("")){
                        vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK);
                    }

                    strAux=rst.getObject("st_reg")==null?"":rst.getString("st_reg");
                    if(strAux.equals("A")){
                        vecReg.setElementAt("M", INT_TBL_DAT_LIN);
                        vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK);
                        vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK_ACT);
                    }
                    else if(strAux.equals("I")){
                        vecReg.setElementAt("M", INT_TBL_DAT_LIN);
                        vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK);
                        vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK_INA);
                    }
                    else if(strAux.equals("P")){
                        vecReg.setElementAt("M", INT_TBL_DAT_LIN);
                        vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK);
                        vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK_PRE);
                    }
                    vecDat.add(vecReg);
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();



                intPrvPre=0;
                for(int k=0; k<objTblMod.getRowCountTrue(); k++){
                    if(objTblMod.isChecked(k, INT_TBL_DAT_CHK_PRE)){
                        intPrvPre++;
                        break;
                    }
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    /**
     * Esta funci�n obtiene la descripci�n larga del estado del registro.
     * @param estado El estado del registro. Por ejemplo: A, I, etc.
     * @return La descripci�n larga del estado del registro.
     * <BR>Nota.- Si la cadena recibida es <I>null</I> la funci�n devuelve una cadena vac�a.
     */
    private String getEstReg(String estado)
    {
        if (estado==null)
            estado="";
        else
            switch (estado.charAt(0))
            {
                case 'A':
                    estado="Activo";
                    break;
                case 'I':
                    estado="Anulado";
                    break;
                case 'P':
                    estado="Pendiente de autorizar";
                    break;
                case 'D':
                    estado="Autorizaci�n denegada";
                    break;
                case 'R':
                    estado="Pendiente de impresi�n";
                    break;
                case 'C':
                    estado="Pendiente confirmaci�n de inventario";
                    break;
                case 'F':
                    estado="Existen diferencias de inventario";
                    break;
                default:
                    estado="Desconocido";
                    break;
            }
        return estado;
    }


    private boolean actualiza_tbrPrvInv(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if(con!=null){                
                    //ACTUALIZA EN LA TABLA tbr_ctaTipDocUsrMod
                    if(eliminaTbrPrvInv()){
                        if(insertaTbrPrvInv()){
                            con.commit();
                        }
                        else{
                            con.rollback();
                            blnRes=false;
                        }
                    }
                    else{
                        con.rollback();
                        blnRes=false;
                    }


            con.close();
            con=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    private boolean eliminaTbrPrvInv(){
        boolean blnRes=true;
        String strLin="";
        String strCodPrv="";
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="DELETE FROM tbr_prvInv";
                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND co_itm=" + txtCodItm.getText() + "";
                System.out.println("eliminaTbrPrvInv: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    


    //ACTUALIZA EN LA TABLA tbr_ctaTipDocUsrMod
    private boolean insertaTbrPrvInv(){
        boolean blnRes=true;
        String strLin="";
        String strSQLIns;
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQLIns="";
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    strLin=objTblMod.getValueAt(i, INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_LIN).toString();
                    if(strLin.equals("M")){
                        if(objTblMod.isChecked(i, INT_TBL_DAT_CHK)){
                            strSQL="";
                            strSQL+="INSERT INTO tbr_prvInv(";
                            strSQL+=" co_emp, co_itm, co_prv, st_reg, fe_ing, st_regrep)";
                            strSQL+=" VALUES (";
                            strSQL+="" + objParSis.getCodigoEmpresa() + ",";
                            strSQL+=" " + txtCodItm.getText() + ",";
                            strSQL+=" " + objTblMod.getValueAt(i, INT_TBL_DAT_COD_PRV).toString() + ",";

                            if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_ACT))
                                strSQL+=" 'A',";
                            else if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_INA))
                                strSQL+=" 'I',";
                            else if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRE))
                                strSQL+=" 'P',";
                            strSQL+=" " + objParSis.getFuncionFechaHoraBaseDatos() + ",";
                            strSQL+=" 'I'";
                            strSQL+=" );";
                            strSQLIns+=strSQL;
                        }
                    }
                }
                System.out.println("insertaTbrPrvInv: " + strSQLIns);
                stm.executeUpdate(strSQLIns);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    

    private void limpiarFrm(){
        txtCodItm.setText("");
        txtCodAltItm.setText("");
        txtNomItm.setText("");
        objTblMod.removeAllRows();
    }


    /**
     * Esta funci�n se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private boolean isRegPro()
    {
        boolean blnRes=true;
        strAux="�Desea guardar los cambios efectuados a �ste registro?\n";
        strAux+="Si no guarda los cambios perder� toda la informaci�n que no haya guardado.";
        switch (mostrarMsgCon(strAux))
        {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado())
                {
                    case 'n': //Insertar
                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }


    /**
     * Esta funci�n muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }


    /**
     * Esta funci�n determina si los campos son v�lidos.
     * @return true: Si los campos son v�lidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamValMod(){
        //Validar el "Tipo de documento".
        String strLin="";
        int intCon=0, intLin=-1;
        intExiRegSel=0;

        if( ! restauraEstadosRegistros())
            return false;

        if(intExiRegSel>0){
            if (intPrvPre==0){
                tabFrm.setSelectedIndex(0);
                mostrarMsgInf("<HTML>Verifique que existe algún proveedor predeterminado e intente nuevamente.</HTML>");
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.changeSelection(0, INT_TBL_DAT_COD_PRV, true, true);
                tblDat.requestFocus();
                return false;
            }
        }

        


        for(int i=0; i<objTblMod.getRowCountTrue(); i++){
            strLin=objTblMod.getValueAt(i, INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_LIN).toString();
            if(strLin.equals("M")){
                if(objTblMod.isChecked(i, INT_TBL_DAT_CHK)){
                    if(  (objTblMod.isChecked(i, INT_TBL_DAT_CHK_ACT)) || (objTblMod.isChecked(i, INT_TBL_DAT_CHK_INA)) || (objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRE)) ){
                    }
                    else{
                        intCon++;
                        intLin=i;
                        break;
                    }
                }
            }
        }

        if(intCon!=0){
            mostrarMsgInf("<HTML>Existem proveedores seleccionados sin estado.<BR>Verifique esos proveedores y vuelva a intentarlo.</HTML>");
            tblDat.setRowSelectionInterval(0, 0);
            tblDat.changeSelection(intLin, INT_TBL_DAT_CHK, true, true);
            tblDat.requestFocus();
            return false;
        }



        return true;
    }

    /**
     * Esta funci�n determina si los campos son v�lidos.
     * @return true: Si los campos son v�lidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal(){
        //Validar el "Tipo de documento".
        if (txtCodItm.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">item</FONT> es obligatorio.<BR>Escriba o seleccione un item y vuelva a intentarlo.</HTML>");
            txtCodAltItm.requestFocus();
            return false;
        }
        return true;
    }


    /**
     * Esta función configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Items".
     */
    private boolean configurarVenConItm(){
        boolean blnRes=true;
        try{
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_itm");
            arlCam.add("a1.tx_codAlt");
            arlCam.add("a1.tx_nomItm");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Cód.Itm.");
            arlAli.add("Alterno");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("60");
            arlAncCol.add("70");
            arlAncCol.add("350");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_itm, a1.tx_codAlt, a1.tx_nomItm";
            strSQL+=" FROM tbm_inv AS a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" AND a1.tx_codAlt LIKE '%S'";
            strSQL+=" ORDER BY a1.tx_codAlt";
            vcoItm=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de inventario", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoItm.setConfiguracionColumna(3, javax.swing.JLabel.LEFT);
            vcoItm.setCampoBusqueda(1);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }




    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConItm(int intTipBus){
        boolean blnRes=true;
        try{
            switch (intTipBus){
                case 0: //Mostrar la ventana de consulta.
                    vcoItm.setCampoBusqueda(1);
                    vcoItm.show();
                    if (vcoItm.getSelectedButton()==vcoItm.INT_BUT_ACE){
                        txtCodItm.setText(vcoItm.getValueAt(1));
                        txtCodAltItm.setText(vcoItm.getValueAt(2));
                        txtNomItm.setText(vcoItm.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Codigo alterno".
                    if (vcoItm.buscar("a1.tx_codAlt", txtCodAltItm.getText())){
                        txtCodItm.setText(vcoItm.getValueAt(1));
                        txtCodAltItm.setText(vcoItm.getValueAt(2));
                        txtNomItm.setText(vcoItm.getValueAt(3));
                    }
                    else{
                        vcoItm.setCampoBusqueda(1);
                        vcoItm.setCriterio1(11);
                        vcoItm.cargarDatos();
                        vcoItm.show();
                        if (vcoItm.getSelectedButton()==vcoItm.INT_BUT_ACE){
                            txtCodItm.setText(vcoItm.getValueAt(1));
                            txtCodAltItm.setText(vcoItm.getValueAt(2));
                            txtNomItm.setText(vcoItm.getValueAt(3));
                        }
                        else{
                            txtCodAltItm.setText(strCodAlt);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Nombre del item".
                    if (vcoItm.buscar("a1.tx_nomItm", txtNomItm.getText())){
                        txtCodItm.setText(vcoItm.getValueAt(1));
                        txtCodAltItm.setText(vcoItm.getValueAt(2));
                        txtNomItm.setText(vcoItm.getValueAt(3));
                    }
                    else{
                        vcoItm.setCampoBusqueda(2);
                        vcoItm.setCriterio1(11);
                        vcoItm.cargarDatos();
                        vcoItm.show();
                        if (vcoItm.getSelectedButton()==vcoItm.INT_BUT_ACE){
                            txtCodItm.setText(vcoItm.getValueAt(1));
                            txtCodAltItm.setText(vcoItm.getValueAt(2));
                            txtNomItm.setText(vcoItm.getValueAt(3));
                        }
                        else{
                            txtNomItm.setText(strNomItm);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    


    private boolean desmarcar(){
        boolean blnRes=false;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit="Mensaje del sistema Zafiro";
        String strMsg="<HTML>Está seguro que desea quitar el proveedor seleccionado?<BR>Tenga presente que una vez desmarcado no podrá volver a marcarse si<BR> ud. no cuenta con el permiso de agregar proveedores.</HTML>";
        if (oppMsg.showConfirmDialog(this, strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            blnRes=true;
        }
        return blnRes;
    }


    private boolean restauraEstadosRegistros(){
        boolean blnRes=true;
        try{
            objTblMod.initRowsState();
            for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                if(objTblMod.isChecked(i, INT_TBL_DAT_CHK)){
                    objTblMod.setValueAt("M", i, INT_TBL_DAT_LIN);
                    intExiRegSel++;
                }
            }
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            objTblMod.removeEmptyRows();
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }




}
