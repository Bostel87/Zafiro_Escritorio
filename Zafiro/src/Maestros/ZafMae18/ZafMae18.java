/*
 * ZafMae18.java
 *
 * Created on 1 de noviembre de 2005, 12:02
 */

package Maestros.ZafMae18;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import java.util.Vector;
/**
 *
 * @author  jsalazar
 * ultima actualizacion 28/dic/2005
 */
public class ZafMae18 extends javax.swing.JInternalFrame {
    java.sql.Connection conCab;       //Variable para conexiÃ³n a la Base de Datos
    java.sql.Statement stmCab;        //Variable para ejecuciÃ³n de sentencias SQL
    java.sql.ResultSet rstCab;        //Variable para manipular registro de la tabla en ejecuciÃ³n    
    private ZafParSis objZafParSis;
    private ZafUtil objUti;
    private Librerias.ZafUtil.ZafCtaCtb objCtaCtb;
    mitoolbar objTooBar;
    LisTextos objlisCambios;     // Instancia de clase que detecta cambios
    private boolean blnCmb=false;
    private String strSQL,strAux;
    /** Creates new form ZafMae18 */
    public ZafMae18(ZafParSis obj) {
        initComponents();
        try{
            objZafParSis =(ZafParSis) obj.clone();
            objUti = new ZafUtil();
            objCtaCtb = new Librerias.ZafUtil.ZafCtaCtb(objZafParSis);
            objTooBar = new mitoolbar(this);
            panBar.add(objTooBar,"Center");
            this.setTitle(objZafParSis.getNombreMenu());
            txtCodRet.setBackground(objZafParSis.getColorCamposSistema());
            txtCodAlt.setBackground(objZafParSis.getColorCamposObligatorios());
            txtNom.setBackground(objZafParSis.getColorCamposObligatorios());            
            txtPorRet.setBackground(objZafParSis.getColorCamposObligatorios());
            cboApl.setBackground(objZafParSis.getColorCamposObligatorios());            
            cboEst.setBackground(objZafParSis.getColorCamposObligatorios());            
            txtCodCtaRet.setBackground(objZafParSis.getColorCamposObligatorios());            
            txtAltCtaRet.setBackground(objZafParSis.getColorCamposObligatorios());            
            txtNomCtaRet.setBackground(objZafParSis.getColorCamposObligatorios());            
            this.setBounds(10,10, 700,450);
        }catch (CloneNotSupportedException e){
           objUti.mostrarMsgErr_F1(this, e);
        } 
    }
    private void clearTextos(){
        txtCodRet.setText("");
        txtAltCtaRet.setText("");
        txtCodAlt.setText("");
        txtCodCtaRet.setText("");
        txtNom.setText("");
        txtNomCtaRet.setText("");
        txtPorRet.setText("");
        txaObs.setText("");
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panGen = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaObs = new javax.swing.JTextArea();
        cboApl = new javax.swing.JComboBox();
        cboEst = new javax.swing.JComboBox();
        txtCodRet = new javax.swing.JTextField();
        txtCodAlt = new javax.swing.JTextField();
        txtNom = new javax.swing.JTextField();
        txtPorRet = new javax.swing.JTextField();
        txtCodCtaRet = new javax.swing.JTextField();
        txtAltCtaRet = new javax.swing.JTextField();
        txtNomCtaRet = new javax.swing.JTextField();
        butCtaCtb = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        panBar = new javax.swing.JPanel();

        getContentPane().setLayout(null);

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        panGen.setLayout(null);

        jLabel1.setText("C\u00f3digo:");
        panGen.add(jLabel1);
        jLabel1.setBounds(20, 10, 60, 15);

        jLabel2.setText("C\u00f3digo Alterno");
        panGen.add(jLabel2);
        jLabel2.setBounds(20, 40, 130, 15);

        jLabel3.setText("Nombre:");
        panGen.add(jLabel3);
        jLabel3.setBounds(20, 70, 80, 15);

        jLabel4.setText("Porcentaje retenci\u00f3n:");
        panGen.add(jLabel4);
        jLabel4.setBounds(20, 100, 160, 15);

        jLabel5.setText("Aplicado a :");
        panGen.add(jLabel5);
        jLabel5.setBounds(20, 130, 120, 15);

        jLabel6.setText("Cuenta Contable:");
        panGen.add(jLabel6);
        jLabel6.setBounds(20, 160, 130, 15);

        jLabel7.setText("Estado del registro:");
        panGen.add(jLabel7);
        jLabel7.setBounds(20, 190, 130, 15);

        jLabel8.setText("Observaci\u00f3n:");
        panGen.add(jLabel8);
        jLabel8.setBounds(20, 250, 110, 15);

        jScrollPane1.setViewportView(txaObs);

        panGen.add(jScrollPane1);
        jScrollPane1.setBounds(120, 230, 490, 40);

        cboApl.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Subtotal", "IVA" }));
        panGen.add(cboApl);
        cboApl.setBounds(150, 130, 100, 19);

        cboEst.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Activo", "Inactivo" }));
        panGen.add(cboEst);
        cboEst.setBounds(150, 190, 100, 19);

        panGen.add(txtCodRet);
        txtCodRet.setBounds(150, 10, 60, 20);

        panGen.add(txtCodAlt);
        txtCodAlt.setBounds(150, 40, 60, 20);

        panGen.add(txtNom);
        txtNom.setBounds(150, 70, 260, 20);

        txtPorRet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPorRetActionPerformed(evt);
            }
        });
        txtPorRet.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPorRetFocusLost(evt);
            }
        });

        panGen.add(txtPorRet);
        txtPorRet.setBounds(150, 100, 60, 20);

        txtCodCtaRet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodCtaRetActionPerformed(evt);
            }
        });

        panGen.add(txtCodCtaRet);
        txtCodCtaRet.setBounds(150, 160, 60, 20);

        txtAltCtaRet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAltCtaRetActionPerformed(evt);
            }
        });

        panGen.add(txtAltCtaRet);
        txtAltCtaRet.setBounds(210, 160, 120, 20);

        txtNomCtaRet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomCtaRetActionPerformed(evt);
            }
        });

        panGen.add(txtNomCtaRet);
        txtNomCtaRet.setBounds(330, 160, 250, 20);

        butCtaCtb.setText("...");
        butCtaCtb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCtaCtbActionPerformed(evt);
            }
        });

        panGen.add(butCtaCtb);
        butCtaCtb.setBounds(580, 160, 20, 20);

        jLabel9.setText("%");
        panGen.add(jLabel9);
        jLabel9.setBounds(210, 100, 30, 15);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        panGen.add(jButton1);
        jButton1.setBounds(490, 30, 71, 23);

        jTabbedPane1.addTab("General", panGen);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(20, 30, 640, 330);

        panBar.setLayout(new java.awt.BorderLayout());

        getContentPane().add(panBar);
        panBar.setBounds(60, 370, 600, 50);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Maestros.ZafMae26.ZafMae26 objMae26=new Maestros.ZafMae26.ZafMae26(objZafParSis);
        this.getParent().add(objMae26,javax.swing.JLayeredPane.DEFAULT_LAYER);
        objMae26.show();
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void butCtaCtbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCtaCtbActionPerformed
        // TODO add your handling code here:
        FndCta("", 0);
    }//GEN-LAST:event_butCtaCtbActionPerformed

    private void txtNomCtaRetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomCtaRetActionPerformed

        FndCta(txtNomCtaRet.getText(), 2);
    }//GEN-LAST:event_txtNomCtaRetActionPerformed

    private void txtAltCtaRetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAltCtaRetActionPerformed
        // TODO add your handling code here:
        FndCta(txtAltCtaRet.getText(), 3);
    }//GEN-LAST:event_txtAltCtaRetActionPerformed

    private void txtCodCtaRetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodCtaRetActionPerformed
        // TODO add your handling code here:
        FndCta(txtCodCtaRet.getText(), 1);
    }//GEN-LAST:event_txtCodCtaRetActionPerformed

    private void txtPorRetFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPorRetFocusLost
        // TODO add your handling code here:
        if (!objUti.isNumero(txtPorRet.getText())){
            txtPorRet.setText("0.0");
        }
    }//GEN-LAST:event_txtPorRetFocusLost

    private void txtPorRetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPorRetActionPerformed
        // TODO add your handling code here:
        if (!objUti.isNumero(txtPorRet.getText())){
            MensajeInf("Solo ingrese valores numericos");
            txtPorRet.setText("0.0");
        }
    }//GEN-LAST:event_txtPorRetActionPerformed

      private void FndCta(String strBusqueda,int TipoBusqueda)
    {
        Librerias.ZafConsulta.ZafConsulta  objFnd = 
        new Librerias.ZafConsulta.ZafConsulta( javax.swing.JOptionPane.getFrameForComponent(this),
           "Codigo,Alias,Descripcion,Debe/Haber","cta.co_cta , tx_codcta,tx_deslar , tx_natcta",
             "select  cta.co_cta , tx_codcta,tx_deslar , tx_natcta from tbm_placta as cta " +
                " where   cta.co_emp = " + objZafParSis.getCodigoEmpresa()    ,strBusqueda, 
         objZafParSis.getStringConexion(), 
         objZafParSis.getUsuarioBaseDatos(), 
         objZafParSis.getClaveBaseDatos()
         );        

        objFnd.setTitle("Listado Cuentas");
        
        switch (TipoBusqueda)
        {
            case 1:                                        
                 objFnd.setSelectedCamBus(0);
                if(!objFnd.buscar("cta.co_cta = " + strBusqueda))
                    objFnd.show();
                 break;
            case 2:
                 objFnd.setSelectedCamBus(2);
                if(!objFnd.buscar("tx_deslar = '" + strBusqueda+"'"))
                    objFnd.show();                 
                 break;
            case 3:
                 objFnd.setSelectedCamBus(1);
                if(!objFnd.buscar("tx_codcta = '" + strBusqueda+"'"))
                    objFnd.show();                 
                 break;
            default:
                objFnd.show();
                break;             
         }
        if(!objFnd.GetCamSel(1).equals("")){
            txtCodCtaRet.setText(objFnd.GetCamSel(1).toString());
            txtAltCtaRet.setText(objFnd.GetCamSel(2).toString());
            txtNomCtaRet.setText(objFnd.GetCamSel(3).toString());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCtaCtb;
    private javax.swing.JComboBox cboApl;
    private javax.swing.JComboBox cboEst;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panGen;
    private javax.swing.JTextArea txaObs;
    private javax.swing.JTextField txtAltCtaRet;
    private javax.swing.JTextField txtCodAlt;
    private javax.swing.JTextField txtCodCtaRet;
    private javax.swing.JTextField txtCodRet;
    private javax.swing.JTextField txtNom;
    private javax.swing.JTextField txtNomCtaRet;
    private javax.swing.JTextField txtPorRet;
    // End of variables declaration//GEN-END:variables

    private void MensajeInf(String strMsg) 
    {
            javax.swing.JOptionPane obj =new javax.swing.JOptionPane();
            String strTit;
            strTit="Zafiro";            
            obj.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);        
    }
    
    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
      /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objTooBars
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private boolean isRegPro()
    {
        boolean blnRes=true;
        String strAux="¿Desea guardar los cambios efectuados a éste registro?\n";
        strAux+="Si no guarda los cambios perderá toda la información que no haya guardado.";
        switch (mostrarMsgCon(strAux))
        {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado())
                {
                    case 'n': //Insertar
                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnCmb=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }   
    
  /**
     * Esta función permite cargar el registro seleccionado.
     * @return true: Si se pudo cargar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg()
    {
        boolean blnRes=true;
        try
        {
            if (!cargarCabReg())      
            {
                MensajeInf("Error al cargar registro");
                blnCmb=false;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }        
    private boolean cargarCabReg()
    {
        int intPosRel;
        boolean blnRes=true;
        try
        {
            java.sql.Connection con = java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
            if (con!=null)
            {
                java.sql.Statement stm=con.createStatement();
                String strSQL="";
                strSQL= "SELECT * FROM tbm_cabTipret" +
                      " Where  co_emp=" + rstCab.getString("co_emp") +
                      " AND co_tipret=" + rstCab.getString("co_tipret") ;
//                System.out.println(strSQL);
                java.sql.ResultSet rst=stm.executeQuery(strSQL);
                if (rst.next())
                {
                    txtCodRet.setText(rst.getString("co_tipret")==null?"":rst.getString("co_tipret"));
                    txtCodAlt.setText(rst.getString("tx_descor")==null?"":rst.getString("tx_descor"));
                    txtNom.setText(rst.getString("tx_deslar")==null?"":rst.getString("tx_deslar"));
                    txtCodCtaRet.setText(rst.getString("co_cta")==null?"":rst.getString("co_cta"));
                    txtAltCtaRet.setText(objCtaCtb.getNumCtaCtb((rst.getString("co_cta")==null?0:rst.getInt("co_cta"))));
                    txtNomCtaRet.setText(objCtaCtb.getNomCta((rst.getString("co_cta")==null?0:rst.getInt("co_cta"))));
                    txtPorRet.setText(rst.getString("nd_porret")==null?"":rst.getString("nd_porret"));
                    txaObs.setText(rst.getString("tx_obs1")==null?"":rst.getString("tx_obs1"));
                    if (rst.getString("tx_aplret").equals("S"))
                        cboApl.setSelectedIndex(0);
                    else
                        cboApl.setSelectedIndex(1);
                    
                    if (rst.getString("st_reg").equals("A"))
                        cboEst.setSelectedIndex(0);
                    else
                        cboEst.setSelectedIndex(1);
                    
                    
                    
                    strAux=rst.getString("st_reg");
                    if (strAux.equals("A"))
                        strAux="Activo";
                    else if (strAux.equals("I"))
                        strAux="Anulado";
                    else
                        strAux="Otro";
                    objTooBar.setEstadoRegistro(strAux);
                }
                else
                {
                    objTooBar.setEstadoRegistro("Eliminado");
                    clearTextos();
                }
            
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Mostrar la posición relativa del registro.
                intPosRel=rstCab.getRow();
                rstCab.last();
                objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
                rstCab.absolute(intPosRel);
                blnCmb=false;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    private boolean anularDoc()
    {
        try{
            java.sql.Connection con = java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());
            try{
                if (con!=null){
                    java.sql.PreparedStatement pstReg;
                    String strSQL="";
                    strSQL = " Update tbm_cabtipret set st_reg= 'I' where co_emp = " + objZafParSis.getCodigoEmpresa() + 
                             " and co_tipret = " + txtCodRet.getText();
//                    System.out.println(strSQL);
                    pstReg = con.prepareStatement(strSQL);
                    pstReg.executeUpdate();
                    con.commit();
                    con.close();
                }
            }catch(java.sql.SQLException e){
                con.rollback();
                con.close();
                objUti.mostrarMsgErr_F1(this, e);                
            }
        }catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return true;
    }
       
    public class mitoolbar extends Librerias.ZafToolBar.ZafToolBar{
        public mitoolbar(javax.swing.JInternalFrame jfrThis){
            super(jfrThis, objZafParSis);
        }
        
       public boolean anular()
        {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                MensajeInf("El documento está ELIMINADO.\nNo es posible anular un documento eliminado.");
                return false;
            }
            if (strAux.equals("Anulado"))
            {
                MensajeInf("El documento ya está ANULADO.\nNo es posible anular un documento anulado.");
                return false;
            }
            if (!anularReg())
                return false;
            objTooBar.setEstadoRegistro("Anulado");
            blnCmb=false;
            return true;
        }

        public void clickAnterior() 
        {
            try
            {
                if (!rstCab.isFirst())
                {
                    if (blnCmb)
                    {
                        if (isRegPro())
                        {
                            rstCab.previous();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.previous();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickFin() 
        {
            try
            {
                if (!rstCab.isLast())
                {
                    if (blnCmb)
                    {
                        if (isRegPro())
                        {
                            rstCab.last();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.last();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickInicio()
        {
            try
            {
                if (!rstCab.isFirst())
                {
                    if (blnCmb)
                    {
                        if (isRegPro())
                        {
                            rstCab.first();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.first();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }
        public void clickSiguiente()
        {
            try
            {
                if (!rstCab.isLast())
                {
                    if (blnCmb)
                    {
                        if (isRegPro())
                        {
                            rstCab.next();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.next();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }
        
        public boolean eliminar()
        {
            try
            {
                strAux=objTooBar.getEstadoRegistro();
                if (strAux.equals("Eliminado"))
                {
                    MensajeInf("El documento ya está ELIMINADO.\nNo es posible eliminar un documento eliminado.");
                    return false;
                }
                if (!eliminarReg())
                    return false;
                //Desplazarse al siguiente registro si es posible.
                if (!rstCab.isLast())
                {
                    rstCab.next();
                    cargarReg();
                }
                else
                {
                    objTooBar.setEstadoRegistro("Eliminado");
                    clearTextos();
                }
                blnCmb=false;
            }
            catch (java.sql.SQLException e)
            {
                return true;
            }
            return true;
        }

        public boolean insertar()
        {
            if (!validar())
                return false;
            if (!insertarReg())
                return false;
            clearTextos();
            blnCmb=false;
            return true;
        }

        public boolean modificar()
        {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                MensajeInf("El documento está ELIMINADO.\nNo es posible modificar un documento eliminado.");
                return false;
            }
            if (strAux.equals("Anulado"))
            {
                   if (mensaje("Para modificar primero debe reactivar el tipo de retencion \n ¿Desea reactivarlo?")==javax.swing.JOptionPane.YES_OPTION){
                       return Reactivar();            
                   }
            }
            if (!validar())
                return false;
            if (!modificarReg())
                return false;
            blnCmb=false;
            return true;
        }
        
        public boolean cancelar()
        {
            boolean blnRes=true;
            try
            {
                if (blnCmb)
                {
                    if (objTooBar.getEstado()=='n' || objTooBar.getEstado()=='m')
                    {
                        if (!isRegPro())
                            return false;
                    }
                }
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            clearTextos();
            blnCmb=false;
            return blnRes;
        }
     
        public void clickAceptar() {
        }
           
        public boolean aceptar() {  
            return true;
        }
        
        public boolean afterAceptar() {
            return true;
        }
        
        public boolean afterAnular() {
            return true;
        }
        
        public boolean afterCancelar() {
            return true;
        }
        
        public boolean afterConsultar() {
            return true;
        }
        
        public boolean afterEliminar() {
            return true;
        }
        
        public boolean afterImprimir() {
            return true;
        }
        
        public boolean afterInsertar() {
            return true;
        }
        
        public boolean afterModificar() {
            return true;
        }
        
        public boolean afterVistaPreliminar() {
            return true;
        }
                
        public boolean beforeAceptar() {
            return true;
        }
        
        public boolean beforeAnular() {
            return true;
        }
        
        public boolean beforeCancelar() {
            return true;
        }
        
        public boolean beforeConsultar() {
            return true;
        }
        
        public boolean beforeEliminar() {
            return true;
        }
        
        public boolean beforeImprimir() {
            return true;
        }
        
        public boolean beforeInsertar() {
            return true;
        }
        
        public boolean beforeModificar() {
            return true;
        }
        
        public boolean beforeVistaPreliminar() {
            return true;
        }
        
        public void clickAnular() {
        }
        
        public void clickCancelar() {
            clearTextos();
        }
        
        public void clickConsultar() {
            txtCodRet.setEnabled(true);
        }
        
        public void clickEliminar() {
        }
        
        public void clickImprimir() {
        }
        
        public void clickInsertar() {
     try
            {
                if (blnCmb)
                {
                    isRegPro();
                }
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                clearTextos();
                txtCodRet.setEnabled(false);
                blnCmb=false;
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }            
        }
        
        public void clickModificar() {
        }
        
        public void clickVisPreliminar() {
        }
        
        public boolean consultar() {
            return _consultar(sqlFil());
        }
        
        public boolean imprimir() {
            return true;
        }
                
        public boolean vistaPreliminar() {
            return true;
        }
        
    }    

   private int mensaje(String strMsg){
       javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        return oppMsg.showConfirmDialog(this,strMsg,"Zafiro.- Retenciones",javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);                
    }     
    private boolean Reactivar()
    {
        try{
            java.sql.Connection con = java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());
            try{
                if (con!=null){
                    java.sql.PreparedStatement pstReg;
                    String strFecSis = objUti.getFechaServidor(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos(),objZafParSis.getQueryFechaHoraBaseDatos(),objZafParSis.getFormatoFechaHoraBaseDatos());
                    String strSQL="";
                    strSQL = " Update tbm_cabtipret set " +
                                       "fe_ultmod='"+strFecSis + "'" +
                                       ",co_usrmod=" + objZafParSis.getCodigoUsuario()+
                                       ",st_reg='A'" ;
                             strSQL += " where co_emp= "+ objZafParSis.getCodigoEmpresa() + " and co_tipret = " + txtCodRet.getText();
//                    System.out.println(strSQL);
                    pstReg = con.prepareStatement(strSQL);
                    pstReg.executeUpdate();
                    con.commit();
                    con.close();
                    objTooBar.setEstadoRegistro("Activo");
                }
            }catch(java.sql.SQLException e){
                con.rollback();
                con.close();
                objUti.mostrarMsgErr_F1(this, e);   
                return false;
            }
        }catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            return false;
        }
        return true;        
    }
    private boolean _consultar(String strFlt){
       String strFil = strFlt;
       try{
             conCab = java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());
             try{
                if (conCab!=null){

                    stmCab = conCab.createStatement(java.sql.ResultSet.TYPE_SCROLL_SENSITIVE, java.sql.ResultSet.CONCUR_READ_ONLY );
                    
                    //Agregando el Sql de Consulta para el Maestro
                    String strSql = "";
                    strSql = strSql + "SELECT * FROM tbm_cabtipret";
                    strSql = strSql + " WHERE co_emp = "+ objZafParSis.getCodigoEmpresa();
                    strSql = strSql + strFil + " ORDER BY co_tipret";
//                    System.out.println(strSql);

                    rstCab = stmCab.executeQuery(strSql);

                    if(rstCab.next()){
                        rstCab.last();
                        objTooBar.setMenSis("Se encontraron " + rstCab.getRow()+ " registros.");
                        cargarReg();
                    } 
                    else{
                        objTooBar.setMenSis("Se encontraron 0 registros...");
                        MensajeInf("No se ha encontrado ningún registro que cumpla el criterio de busqueda específicado.");
                        rstCab = null;
                        rstCab = null;
                        stmCab.close();
                        conCab.close();
                        stmCab=null;
                        conCab=null;                        
                        clearTextos();
                        return false;
                    }
                    blnCmb = false;
                }
            }catch(java.sql.SQLException Evt){
                conCab.close();
                objUti.mostrarMsgErr_F1(this, Evt);
                return false;
            }
       }catch(Exception Evt){
          objUti.mostrarMsgErr_F1(this, Evt);
          return false;
        }                       
    return true;     
    }
    
    private boolean modificarReg(){
        try{
            java.sql.Connection con = java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());
            try{
                if (con!=null){
                    java.sql.PreparedStatement pstReg;
                    String strFecSis = objUti.getFechaServidor(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos(),objZafParSis.getQueryFechaHoraBaseDatos(),objZafParSis.getFormatoFechaHoraBaseDatos());
                    strSQL = " Update tbm_cabtipret set " +
                                "tx_descor='" + txtCodAlt.getText() + "'" +
                                ",tx_deslar='" + txtNom.getText()    + "'" +
                                ",nd_porret=" + txtPorRet.getText()  ;
                             if (cboApl.getSelectedIndex()==0)
                                 strSQL += ",tx_aplret='S'" ;
                             else
                                 strSQL += ",tx_aplret='I'" ;
                             strSQL += ",co_cta="+txtCodCtaRet.getText() + 
                                       ",tx_obs1='" + txaObs.getText() + "'" +                                       
                                       ",fe_ultmod='"+strFecSis + "'" +
                                       ",co_usrmod=" + objZafParSis.getCodigoUsuario();
                             if (cboEst.getSelectedIndex()==0)
                                 strSQL += ",st_reg='A'" ;
                             else
                                 strSQL += ",st_reg='I'" ;

                             strSQL += " where co_emp= "+ objZafParSis.getCodigoEmpresa()  + " and co_tipret = " + txtCodRet.getText();
//                    System.out.println(strSQL);
                    pstReg  = con.prepareStatement(strSQL);
                    pstReg.executeUpdate();                                                          
                    con.commit();
                    con.close();
                }
            }catch(java.sql.SQLException e){
                con.rollback();
                con.close();
                objUti.mostrarMsgErr_F1(this,e);
                return false;
            }
        }catch(Exception e){
            objUti.mostrarMsgErr_F1(this,e);
            return false;
        }
        return true;

    }
    private boolean insertarReg(){
        try{
            java.sql.Connection con = java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());
            try{
                if (con!=null){
                    java.sql.Statement stm = con.createStatement();
                    strSQL = " SELECT max(co_tipret)+ 1 as ult_cod FROM tbm_cabtipret WHERE co_emp = " + objZafParSis.getCodigoEmpresa();
                    java.sql.ResultSet rst = stm.executeQuery(strSQL);
                    if (rst.next()){
                        txtCodRet.setText(rst.getString("ult_cod"));
                    }else{
                        MensajeInf("Error!! Llamar as Dpto. de Sistemas ZafMae18.Metodo insertarReg()");
                        rst.close();
                        stm.close();
                        con.close();
                        return false;
                    }
                    rst.close();
                    stm.close();                    
                    java.sql.PreparedStatement pstReg;
                    String strFecSis = objUti.getFechaServidor(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos(),objZafParSis.getQueryFechaHoraBaseDatos(),objZafParSis.getFormatoFechaHoraBaseDatos());
                    strSQL = " Insert Into tbm_cabtipret (co_emp,co_tipret,tx_descor,tx_deslar,nd_porret,tx_aplret,co_cta,tx_obs1,fe_ing,co_usring,st_reg)" +
                             " values ( " + objZafParSis.getCodigoEmpresa() + ","+
                             txtCodRet.getText() + ",'" + txtCodAlt.getText() + "','" + txtNom.getText()    + "'," +
                             txtPorRet.getText()  ;
                             if (cboApl.getSelectedIndex()==0)
                                 strSQL += ",'S'," ;
                             else
                                 strSQL += ",'I'," ;
                             strSQL += txtCodCtaRet.getText() + ",'" + txaObs.getText() + "','"+strFecSis + "'," + objZafParSis.getCodigoUsuario();
                             if (cboEst.getSelectedIndex()==0)
                                 strSQL += ",'A')" ;
                             else
                                 strSQL += ",'I')" ;                             
//                    System.out.println(strSQL);
                    pstReg  = con.prepareStatement(strSQL);
                    pstReg.executeUpdate();                                                          
                    con.commit();
                    con.close();
                }
            }catch(java.sql.SQLException e){
                con.rollback();
                con.close();
                objUti.mostrarMsgErr_F1(this,e);
                return false;
            }
        }catch(Exception e){
            objUti.mostrarMsgErr_F1(this,e);
            return false;
        }
        return true;
    }
    private boolean validar(){
        try{
            if (txtCodAlt.getText().equals("")){
                MensajeInf("Error! Codigo Alterno de retencion con problemas");
                return false;                
            }
            if (txtNom.getText().equals("")){
                MensajeInf("Error! Ingrese descripcion del tipo de retencion");
                return false;                               
            }            
            if (txtPorRet.getText().equals("")){
                MensajeInf("Error! Porcentaje de retencion con problemas");
                return false;                
            }                
            if (txtCodCtaRet.getText().equals("")){
                MensajeInf("Error! Codigo Cuenta Contable que debe aplicar la retencion con problemas");
                return false;
            }            
        }catch(Exception e){
            objUti.mostrarMsgErr_F1(this,e);
            return false;
        }        
        return true;
    }
    private boolean eliminarReg(){
        try{
            java.sql.Connection con = java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());
            try{
                if (con!=null){
                    java.sql.PreparedStatement pstReg;
                    String strFecSis = objUti.getFechaServidor(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos(),objZafParSis.getQueryFechaHoraBaseDatos(),objZafParSis.getFormatoFechaHoraBaseDatos());
                    strSQL = " Delete from tbm_cabtipret " +
                             " where co_emp= "+ objZafParSis.getCodigoEmpresa()  + " and co_tipret = " + txtCodRet.getText();
//                    System.out.println(strSQL);
                    pstReg  = con.prepareStatement(strSQL);
                    pstReg.executeUpdate();                                                          
                    con.commit();
                    con.close();
                }
            }catch(java.sql.SQLException e){
                con.rollback();
                con.close();
                objUti.mostrarMsgErr_F1(this,e);
                return false;
            }
        }catch(Exception e){
            objUti.mostrarMsgErr_F1(this,e);
            return false;
        }
        return true;

    }
    private boolean anularReg(){
        try{
            java.sql.Connection con = java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());
            try{
                if (con!=null){
                    java.sql.PreparedStatement pstReg;
                    String strFecSis = objUti.getFechaServidor(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos(),objZafParSis.getQueryFechaHoraBaseDatos(),objZafParSis.getFormatoFechaHoraBaseDatos());
                    strSQL = " Update tbm_cabtipret set " +
                                       "fe_ultmod='"+strFecSis + "'" +
                                       ",co_usrmod=" + objZafParSis.getCodigoUsuario()+
                                       ",st_reg='I'" ;
                             strSQL += " where co_emp= "+ objZafParSis.getCodigoEmpresa() + " and co_tipret = " + txtCodRet.getText();
//                    System.out.println(strSQL);
                    pstReg  = con.prepareStatement(strSQL);
                    pstReg.executeUpdate();                                                          
                    con.commit();
                    con.close();
                }
            }catch(java.sql.SQLException e){
                con.rollback();
                con.close();
                objUti.mostrarMsgErr_F1(this,e);
                return false;
            }
        }catch(Exception e){
            objUti.mostrarMsgErr_F1(this,e);
            return false;
        }
        return true;

    }
    private String sqlFil(){
        String strFil="";
        if (!txtCodRet.getText().equals("")){
            strFil += " and co_tipret=" +txtCodRet.getText();
        }
        if (!txtCodAlt.getText().equals("")){
            strFil += " and tx_descor LIKE '" + txtCodAlt.getText() + "%'";
        }
        if (!txtNom.getText().equals("")){
            strFil += " and tx_deslar LIKE '" + txtNom.getText() + "%'";
        }
        if (!txtCodCtaRet.getText().equals("")){
            strFil += " and co_cta = "+txtCodCtaRet.getText();
        }
        return strFil;
    }
    /* Agrega el listener para detectar que hubo algun cambio en la caja de texto*/
    private void addListenerCambios(){
        objlisCambios = new LisTextos();
            txtCodCtaRet.getDocument().addDocumentListener(objlisCambios);
            txtCodAlt.getDocument().addDocumentListener(objlisCambios);
            txtNom.getDocument().addDocumentListener(objlisCambios);
            txtCodRet.getDocument().addDocumentListener(objlisCambios);
            txtPorRet.getDocument().addDocumentListener(objlisCambios);
            txaObs.getDocument().addDocumentListener(objlisCambios);
    }   
    
     /* Clase de tipo documenet listener para detectar los cambios en los textcomponent*/
    class LisTextos implements javax.swing.event.DocumentListener {
        public void changedUpdate(javax.swing.event.DocumentEvent e) {
            blnCmb = true;
        }
        
        public void insertUpdate(javax.swing.event.DocumentEvent e) {
            blnCmb = true;
        }
        
        public void removeUpdate(javax.swing.event.DocumentEvent e) {
            blnCmb = true; 
        }
    }
    
}
    