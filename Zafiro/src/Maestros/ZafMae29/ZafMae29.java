/*
 * ZafMae29.java
 *
 * Created on December 19, 2008, 12:41 PM
 */

package Maestros.ZafMae29;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;

/**
 *
 * @author  ilino
 */
public class ZafMae29 extends javax.swing.JInternalFrame {
    
    private ZafParSis objParSis;
    private ZafVenCon vcoPrg;
    private ZafUtil objUti;
    private MiToolBar objTooBar;
    private ZafTblMod objTblMod;
    private ZafColNumerada objColNum;
    private ZafTblPopMnu objTblPopMnu;
    private ZafMouMotAda objMouMotAda;
    private ZafTblCelRenChk objTblCelRenChk;
    private ZafTblCelEdiChk objTblCelEdiChk;
    private ZafTblOrd objTblOrd;
    private ZafTblBus objTblBus;
    private boolean blnHayCam;
    private String strSQL, strAux;
    private Vector vecDat, vecReg, vecCab, vecAux;
    private String strTipPrg;
    private String strNomPrg;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private int intSelPrd;
    private int intSelRepSelPrd;
    private ZafDocLis objDocLis;
    
    private final int INT_TBL_DAT_LIN=0;
    private final int INT_TBL_DAT_CHK=1;
    private final int INT_TBL_DAT_COD=2;
    private final int INT_TBL_DAT_DES_COR=3;
    private final int INT_TBL_DAT_DES_LAR=4;

    /** Creates new form ZafMae29 */
    public ZafMae29(ZafParSis obj) {
        try{
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
            if (!configurarFrm())
                exitForm();
        }
        catch (CloneNotSupportedException e){
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panDat = new javax.swing.JPanel();
        panCab = new javax.swing.JPanel();
        lblTipDoc = new javax.swing.JLabel();
        txtTipPrg = new javax.swing.JTextField();
        txtNomPrg = new javax.swing.JTextField();
        butPrg = new javax.swing.JButton();
        txtNumCta = new javax.swing.JTextField();
        txtNumPro = new javax.swing.JTextField();
        panDet = new javax.swing.JPanel();
        spnDet = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Información del registro actual");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        tabFrm.setPreferredSize(new java.awt.Dimension(459, 473));

        panDat.setPreferredSize(new java.awt.Dimension(600, 80));
        panDat.setLayout(new java.awt.BorderLayout());

        panCab.setPreferredSize(new java.awt.Dimension(610, 30));
        panCab.setLayout(null);

        lblTipDoc.setText("Programa:");
        lblTipDoc.setToolTipText("Programa");
        panCab.add(lblTipDoc);
        lblTipDoc.setBounds(2, 4, 60, 20);

        txtTipPrg.setMaximumSize(null);
        txtTipPrg.setPreferredSize(new java.awt.Dimension(70, 20));
        txtTipPrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTipPrgActionPerformed(evt);
            }
        });
        txtTipPrg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTipPrgFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTipPrgFocusLost(evt);
            }
        });
        panCab.add(txtTipPrg);
        txtTipPrg.setBounds(62, 4, 80, 20);

        txtNomPrg.setMaximumSize(null);
        txtNomPrg.setPreferredSize(new java.awt.Dimension(70, 20));
        txtNomPrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomPrgActionPerformed(evt);
            }
        });
        txtNomPrg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomPrgFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomPrgFocusLost(evt);
            }
        });
        panCab.add(txtNomPrg);
        txtNomPrg.setBounds(142, 4, 310, 20);

        butPrg.setFont(new java.awt.Font("SansSerif", 1, 12));
        butPrg.setText("...");
        butPrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrgActionPerformed(evt);
            }
        });
        panCab.add(butPrg);
        butPrg.setBounds(452, 4, 24, 20);

        txtNumCta.setMaximumSize(null);
        txtNumCta.setPreferredSize(new java.awt.Dimension(70, 20));
        panCab.add(txtNumCta);
        txtNumCta.setBounds(180, 25, 0, 0);

        txtNumPro.setMaximumSize(null);
        txtNumPro.setPreferredSize(new java.awt.Dimension(70, 20));
        panCab.add(txtNumPro);
        txtNumPro.setBounds(180, 46, 0, 0);

        panDat.add(panCab, java.awt.BorderLayout.NORTH);

        panDet.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDet.setViewportView(tblDat);

        panDet.add(spnDet, java.awt.BorderLayout.CENTER);

        panDat.add(panDet, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panDat);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());
        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
// TODO add your handling code here:
        String strTit, strMsg;
//        try
//        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="¿Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
//                if(con!=null){
//                    con.close();
//                    con=null;
//                }
                dispose();
            }
//        }
//        catch (java.sql.SQLException e)
//        {
//            dispose();
//        }
            
}//GEN-LAST:event_exitForm

private void butPrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrgActionPerformed
// TODO add your handling code here:
    mostrarVenConPrg(0);
}//GEN-LAST:event_butPrgActionPerformed

private void txtTipPrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTipPrgActionPerformed
// TODO add your handling code here:
    txtTipPrg.transferFocus();
}//GEN-LAST:event_txtTipPrgActionPerformed

private void txtTipPrgFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTipPrgFocusGained
// TODO add your handling code here:
    strTipPrg=txtTipPrg.getText();
    txtTipPrg.selectAll();
}//GEN-LAST:event_txtTipPrgFocusGained

private void txtTipPrgFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTipPrgFocusLost
// TODO add your handling code here:
      if (!txtTipPrg.getText().equalsIgnoreCase(strTipPrg)){
            if (txtTipPrg.getText().equals("")){
                txtTipPrg.setText("");
                txtNomPrg.setText("");
            }
            else{
                mostrarVenConPrg(1);
            }
        }
        else
            txtTipPrg.setText(strTipPrg);
}//GEN-LAST:event_txtTipPrgFocusLost

private void txtNomPrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomPrgActionPerformed
// TODO add your handling code here:
    txtNomPrg.transferFocus();
}//GEN-LAST:event_txtNomPrgActionPerformed

private void txtNomPrgFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPrgFocusGained
// TODO add your handling code here:
    strNomPrg=txtNomPrg.getText();
    txtNomPrg.selectAll();
}//GEN-LAST:event_txtNomPrgFocusGained

private void txtNomPrgFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPrgFocusLost
// TODO add your handling code here:
      if (!txtNomPrg.getText().equalsIgnoreCase(strNomPrg)){
            if (txtNomPrg.getText().equals("")){
                txtTipPrg.setText("");
                txtNomPrg.setText("");
            }
            else{
                mostrarVenConPrg(2);
            }
        }
        else   
            txtNomPrg.setText(strNomPrg); 
}//GEN-LAST:event_txtNomPrgFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butPrg;
    private javax.swing.JLabel lblTipDoc;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panDat;
    private javax.swing.JPanel panDet;
    private javax.swing.JPanel panFrm;
    private javax.swing.JScrollPane spnDet;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtNomPrg;
    private javax.swing.JTextField txtNumCta;
    private javax.swing.JTextField txtNumPro;
    private javax.swing.JTextField txtTipPrg;
    // End of variables declaration//GEN-END:variables

    /** Cerrar la aplicación. */
    private void exitForm(){
        dispose();
    }   
    
    
       /**
     * Esta funcion permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de bï¿½squeda determina si se debe hacer
     * una busqueda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se estï¿½ buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opciï¿½n que desea utilizar.
     * @param intTipBus El tipo de busqueda a realizar.
     * @return true: Si no se presenta ningun problema.
     * <BR>false: En el caso contrario.
     */   
   private boolean mostrarVenConPrg(int intTipBus){
        boolean blnRes=true;
        try{
            switch (intTipBus){
                case 0: //Mostrar la ventana de consulta.
                    vcoPrg.setCampoBusqueda(1);
                    vcoPrg.show();
                    if (vcoPrg.getSelectedButton()==vcoPrg.INT_BUT_ACE){
                        txtTipPrg.setText(vcoPrg.getValueAt(1));
                        txtNomPrg.setText(vcoPrg.getValueAt(2));
                    }
                    break;
                case 1: //Búsqueda directa por "Código".
                    if (vcoPrg.buscar("a1.co_mnu", txtTipPrg.getText())){
                        txtTipPrg.setText(vcoPrg.getValueAt(1));
                        txtNomPrg.setText(vcoPrg.getValueAt(2));
                    }
                    else{
                        vcoPrg.setCampoBusqueda(0);
                        vcoPrg.setCriterio1(11);
                        vcoPrg.cargarDatos();
                        vcoPrg.show();
                        if (vcoPrg.getSelectedButton()==vcoPrg.INT_BUT_ACE)
                        {
                            txtTipPrg.setText(vcoPrg.getValueAt(1));
                            txtNomPrg.setText(vcoPrg.getValueAt(2));
                        }
                        else
                        {
                            txtTipPrg.setText(strTipPrg);
                        }
                    }
                    
                    break;
                case 2: //Búsqueda directa por "Nombre".
                    if (vcoPrg.buscar("a1.tx_nom", txtNomPrg.getText())){
                        txtTipPrg.setText(vcoPrg.getValueAt(1));
                        txtNomPrg.setText(vcoPrg.getValueAt(2));
                    }
                    else{
                        vcoPrg.setCampoBusqueda(1);
                        vcoPrg.setCriterio1(11);
                        vcoPrg.cargarDatos();
                        vcoPrg.show();
                        if (vcoPrg.getSelectedButton()==vcoPrg.INT_BUT_ACE)
                        {
                            txtTipPrg.setText(vcoPrg.getValueAt(1));
                            txtNomPrg.setText(vcoPrg.getValueAt(2));
                        }
                        else
                        {
                            txtNomPrg.setText(strNomPrg);
                        }
                    }
                    break;
            }  
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    /** Configurar el formulario. */
    private boolean configurarFrm(){
        boolean blnRes=true;
        
        try{
            //Inicializar objetos.
            objUti=new ZafUtil();
            objTooBar=new MiToolBar(this);
            panBar.add(objTooBar);
            intSelPrd=0;
            this.setTitle(objParSis.getNombreMenu() + " v0.2 ");
            lblTit.setText(objParSis.getNombreMenu());
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(5);   //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_CHK,"Sel");
            vecCab.add(INT_TBL_DAT_COD,"Código");
            vecCab.add(INT_TBL_DAT_DES_COR,"Descripción Corta");
            vecCab.add(INT_TBL_DAT_DES_LAR,"Descripción Larga");
            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DES_COR).setPreferredWidth(350);
            tcmAux.getColumn(INT_TBL_DAT_DES_LAR).setPreferredWidth(150);
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_DAT_CHK).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_CHK);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            //Configurar JTable: Editor de la tabla.
            //objTblEdi=new ZafTblEdi(tblDat);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk=new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellRenderer(objTblCelRenChk);
            objTblCelEdiChk=new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intCanQuiSel=-1;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {

                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)){
                        if(intSelRepSelPrd==0){
                            intSelRepSelPrd++;
                            intSelPrd=1;
                        }
                        
                    }
                    else{
                        if(intCanQuiSel==1){
                            mostrarMsgInf("<HTML>El Reporte de Sistema que quiere quitar es también el reporte predeterminado.<BR>Seleccione otro reporte como predeterminado y vuelva a intentarlo.</HTML>");
                            objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                        }
                    }
                }
            });
            
            configurarVenConTipPrg();
            txtTipPrg.setBackground(objParSis.getColorCamposObligatorios());
            txtNomPrg.setBackground(objParSis.getColorCamposObligatorios());
            
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            objTblOrd=new ZafTblOrd(tblDat);
            objTblBus=new ZafTblBus(tblDat);
            
            objTooBar.setVisibleAnular(false);
            objDocLis=new ZafDocLis();
            
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    
    /**
     * Esta función configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Programas".
     */
    private boolean configurarVenConTipPrg()
    {
     boolean blnRes=true;
    int intCodEmp, intCodEmpGrp, intCodMnu;
        try
        { 
            intCodEmp=objParSis.getCodigoEmpresa();
            intCodEmpGrp = objParSis.getCodigoEmpresaGrupo();
            intCodMnu= objParSis.getCodigoMenu(); 
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_mnu");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Programa");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            
            arlAncCol.add("50");
            arlAncCol.add("494");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_mnu, a1.tx_nom";
            strSQL+=" FROM tbm_mnuSis AS a1";
            strSQL+=" WHERE (a1.tx_tipMnu='C'or a1.tx_tipMnu='R') /*and a1.tx_nom!=''*/";
            strSQL+=" AND a1.st_reg<>'E' AND a1.tx_acc IS NOT NULL";
            strSQL+=" ORDER BY a1.tx_nom";
            vcoPrg=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de programas", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoPrg.setConfiguracionColumna(1, javax.swing.JLabel.LEFT);
            vcoPrg.setConfiguracionColumna(2, javax.swing.JLabel.LEFT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
     * insertar, consultar, modificar, eliminar, etc. Además de los botones de navegación
     * que permiten desplazarse al primero, anterior, siguiente y último registro.
     */
    private class MiToolBar extends ZafToolBar{
        public MiToolBar(javax.swing.JInternalFrame ifrFrm)
        {
            super(ifrFrm, objParSis);
        }

        public boolean anular()
        {
            return true;
        }

        public void clickAceptar()
        {
            
        }

        public void clickAnterior(){
            try{
                if (!rstCab.isFirst()){
                    if (blnHayCam || objTblMod.isDataModelChanged()){
                        if (isRegPro()){
                            rstCab.previous();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.previous();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnular()
        {
            
        }

        public void clickCancelar()
        {
            intSelPrd=0;
            limpiarFrm();
        }

        public void clickConsultar(){
        }

        public void clickEliminar()
        {
            
        }

        public void clickFin() 
        {
            try{
                if (!rstCab.isLast()){
                    if (blnHayCam  || objTblMod.isDataModelChanged()){
                        if (isRegPro()){
                            rstCab.last();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.last();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickImprimir()
        {
            
        }

        public void clickInicio(){
            try{
                if (!rstCab.isFirst()){
                    if (blnHayCam  || objTblMod.isDataModelChanged()){
                        if (isRegPro()){
                            rstCab.first();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.first();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickInsertar(){
            try{
                if (blnHayCam){
                    isRegPro();
                }
                if (rstCab!=null){
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                cargarReportesSistema();
                intSelRepSelPrd=0;
                txtNomPrg.requestFocus();
                blnHayCam=false;
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }

        }

        public void clickModificar()
        {
            cargarReg();
            txtTipPrg.setEditable(false);
            txtNomPrg.setEditable(false);
            butPrg.setEnabled(false);
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
        }

        public void clickSiguiente(){
            try{
                if (!rstCab.isLast()){
                    if (blnHayCam  || objTblMod.isDataModelChanged()){
                        if (isRegPro()){
                            rstCab.next();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.next();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickVisPreliminar() 
        {
        }

        public boolean consultar(){

            consultarReg();
             return true;
        }

        public boolean eliminar(){
            try{
                if (!eliminarReg())
                    return false;
                //Desplazarse al siguiente registro si es posible.
                if (!rstCab.isLast()){
                    rstCab.next();
                    cargarReg();
                }
                else{
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                }
                blnHayCam=false;
            }
            catch (java.sql.SQLException e){
                return true;
            }
            return true;
            
            
            
            
        }

        public boolean insertar()
        {
            if (!insertarReg())
                return false;
            return true;
        }

        public boolean modificar(){
            if (!actualizarReg())
                return false;
            return true;
            
            
        }
        
        public boolean cancelar(){
            boolean blnRes=true;
            try{
                if (blnHayCam){
                    if (objTooBar.getEstado()=='n' || objTooBar.getEstado()=='m'){
                        if (!isRegPro())
                            return false;
                    }
                }
                if (rstCab!=null){
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            limpiarFrm();
            blnHayCam=false;
            return blnRes;
        }
        
        public boolean vistaPreliminar()
        {
            return true;
        }
        
        public boolean aceptar()
        {
            return true;
        }
        
        public boolean imprimir()
        {
            return true;
        }
        
        public boolean beforeInsertar(){
            boolean blnRes=true;
            if(!isCamVal()){
                blnRes=false;
            }
            return blnRes;
        }
        
        public boolean beforeConsultar(){
            boolean blnRes=true;
//            if(txtTipPrg.getText().length()<=0){
//                mostrarMsgInf("<HTML>El campo<FONT COLOR=\"blue\">Programa es obligatorio</FONT>.<BR>Seleccione un programa y vuelva a intentarlo.</FONT>    </HTML>");
//                blnRes=false;
//            }
            return blnRes;
        }

        public boolean beforeModificar()
        {

            return true;
        }

        public boolean beforeEliminar()
        {

            return true;
        }

        public boolean beforeAnular()
        {
            return true;
        }

        public boolean beforeImprimir()
        {
            return true;
        }

        public boolean beforeVistaPreliminar()
        {
            return true;
        }

        public boolean beforeAceptar()
        {
            return true;
        }
        
        public boolean beforeCancelar()
        {
            return true;
        }
        
        public boolean afterInsertar(){
            blnHayCam=false;
            //Configurar JFrame de acuerdo al estado del registro.
            objTooBar.setEstado('w');
            intSelPrd=0;
            consultarReg();
            objTblMod.initRowsState();
            blnHayCam=false;
            return true;
        }

        public boolean afterConsultar()
        {
            intSelPrd=0;
            objTblMod.initRowsState();
            return true;
        }

        public boolean afterModificar()
        {
            intSelPrd=0;
            //objTooBar.setEstado('w');
            blnHayCam=false;
            //consultarReg();
            objTblMod.initRowsState();
            return true;
        }

        public boolean afterEliminar()
        {
            intSelPrd=0;
            objTblMod.initRowsState();
            return true;
        }

        public boolean afterAnular()
        {
            intSelPrd=0;
            objTblMod.initRowsState();
            return true;
        }

        public boolean afterImprimir()
        {
            return true;
        }

        public boolean afterVistaPreliminar()
        {
            return true;
        }

        public boolean afterAceptar()
        {
            return true;
        }
        
        public boolean afterCancelar()
        {
            return true;
        }
        
    }
    
    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD:
                    strMsg="Código del Reporte del Sistema";
                    break;
                case INT_TBL_DAT_DES_COR:
                    strMsg="Descripción Corta del Reporte del Sistema";
                    break;
                case INT_TBL_DAT_DES_LAR:
                    strMsg="Descripción Larga del Reporte del Sistema";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
    private boolean cargarReportesSistema(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT co_rpt, tx_desCor, tx_desLar, tx_nomRpt";
                strSQL+=" FROM tbm_rptSis";
                strSQL+=" WHERE st_reg NOT IN('I','E')";
                rst=stm.executeQuery(strSQL);
                while(rst.next()){
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN, "");
                    vecReg.add(INT_TBL_DAT_CHK, "");
                    vecReg.add(INT_TBL_DAT_COD, "" + rst.getObject("co_rpt")==null?"":rst.getString("co_rpt"));
                    vecReg.add(INT_TBL_DAT_DES_COR, "" + rst.getObject("tx_desCor")==null?"":    rst.getString("tx_desCor"));
                    vecReg.add(INT_TBL_DAT_DES_LAR, "" + rst.getString("tx_nomRpt")==null?"":    rst.getString("tx_nomRpt"));
                    vecDat.add(vecReg);
                }

                
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                con.close();
                con=null;
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
            }
            
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    private boolean isCamVal(){
        //Validar el "Tipo de documento".
        if (txtTipPrg.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Programa</FONT> es obligatorio.<BR>Escriba o seleccione un programa y vuelva a intentarlo.</HTML>");
            txtNomPrg.requestFocus();
            return false;
        }
        if(!objTblMod.isDataModelChanged()){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>No existe ningún Reporte de Sistema seleccionado.<BR>Seleccione un Reporte de Sistema y vuelva a intentarlo.</HTML>");
            tblDat.setRowSelectionInterval(0, 0);
            tblDat.changeSelection(0, INT_TBL_DAT_LIN, true, true);
            tblDat.requestFocus();
            return false;
        }
        if(isRegInsertados()){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El programa seleccionado ya ha sido ingresado.<BR>Consulte el programa y luego modifiquelo.</HTML>");
            txtNomPrg.requestFocus();
            return false;
        }
        
        
        return true;
    }
    
    /**
     * Esta funci�n muestra un mensaje informativo al usuario. Se podr�a utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
  
    private boolean isRegInsertados(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT * ";
                strSQL+=" FROM tbr_rptSisPrg ";
                strSQL+=" WHERE co_mnu=" + txtTipPrg.getText() + "";
                rst=stm.executeQuery(strSQL);
                if(rst.next()){
                    blnRes=true;
                }
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                con.close();
                con=null;
            }
            
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    private boolean insertarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (insertar_tbrRptSisPrg()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean insertar_tbrRptSisPrg(){
        boolean blnRes=true;
        String strSQLIns="";
        String strLin="";
        try{
            if (con!=null){
                stm=con.createStatement();
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    if(objTblMod.isChecked(i, INT_TBL_DAT_CHK)){
                        strSQL="";
                        strSQL+="INSERT INTO tbr_rptsisprg(";
                        strSQL+="             co_rpt, co_mnu)";
                        strSQL+="    VALUES (";
                        strSQL+="" + objTblMod.getValueAt(i, INT_TBL_DAT_COD) + ",";//co_rpt
                        strSQL+="" + txtTipPrg.getText() + "";//co_mnu
                        strSQL+=");";
                        strSQLIns+=strSQL;
                    }
                }
                stm.executeUpdate(strSQLIns);
                strSQLIns="";
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean limpiarFrm(){
        txtTipPrg.setText("");
        txtNomPrg.setText("");
        objTblMod.removeAllRows();
        return true;
    }
    
//    private boolean consultarReg(){
//        boolean blnRes=true;
//        try{
//            objTblMod.removeAllRows();
//            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
//            if(con!=null){
//                if (cargarReg()){
//                }
//                con.close();
//                con=null;
//            }
//        }
//        catch (Exception e){
//            blnRes=false;
//        }
//        return blnRes;
//    }

    
    /**
     * Esta funci�n permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean consultarReg(){
        int intCodEmp, intCodLoc;
        boolean blnRes=true;
        try{
            intCodEmp=objParSis.getCodigoEmpresa();
            intCodLoc=objParSis.getCodigoLocal();
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null){
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                //Validar que s�lo se muestre los documentos asignados al programa.
                strSQL="";    
                strSQL+="SELECT a1.co_mnu, a1.tx_nom, a3.st_reg";
                strSQL+=" FROM tbm_mnuSis AS a1 INNER JOIN (tbr_rptSisPrg AS a2 INNER JOIN tbm_rptSis AS a3 ON a2.co_rpt=a3.co_rpt)";
                strSQL+=" ON a1.co_mnu=a2.co_mnu";
                strSQL+=" WHERE a1.st_reg NOT IN('I','E') ";
                strSQL+=" AND a1.tx_acc IS NOT NULL";
                strAux=txtTipPrg.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_mnu = " + strAux.replaceAll("'", "''") + "";
                
//                strAux=txtNomPrg.getText().toLowerCase();
//                if (!strAux.equals(""))
//                    strSQL+=" AND a1.tx_nom LIKE '" + strAux.replaceAll("'", "''") + "'";
                
                
                strSQL+=" GROUP BY a1.co_mnu, a1.tx_nom, a3.st_reg";
                strSQL+=" ORDER BY a1.tx_nom";
                rstCab=stmCab.executeQuery(strSQL);
                if (rstCab.next())
                {
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                }
                else
                {
                    mostrarMsgInf("No se ha encontrado ning�n registro que cumpla el criterio de b�squeda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta funci�n permite cargar el registro seleccionado.
     * @return true: Si se pudo cargar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg()
    {
        boolean blnRes=true;
        try
        {
            if (cargarCabReg())
            {
                if (cargarDetReg())
                {
                }
            }
            blnHayCam=false;
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }
    
    
    
    /**
     * Esta clase implementa la interface DocumentListener que observa los cambios que
     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
     * Se la usa en el sistema para determinar si existe alg�n cambio que se deba grabar
     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
     * presentar� un mensaje advirtiendo que si no guarda los cambios los perder�.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener 
    {
        public void changedUpdate(javax.swing.event.DocumentEvent evt)        {
            blnHayCam=true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }
    }
    
    
    /**
     * Esta funci�n permite cargar la cabecera del registro seleccionado.
     * @return true: Si se pudo cargar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarCabReg(){
        int intPosRel;
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT a1.co_mnu, a1.tx_nom, a3.st_reg";
                strSQL+=" FROM tbm_mnuSis AS a1 INNER JOIN (tbr_rptSisPrg AS a2 INNER JOIN tbm_rptSis AS a3 ON a2.co_rpt=a3.co_rpt)";
                strSQL+=" ON a1.co_mnu=a2.co_mnu";
                strSQL+=" WHERE a1.st_reg NOT IN('I','E') ";
                strSQL+=" AND tx_acc IS NOT NULL";
                strSQL+=" AND a1.co_mnu=" + rstCab.getString("co_mnu") + "";
                rst=stm.executeQuery(strSQL);
                if (rst.next()){
                    strAux=rst.getString("co_mnu");
                    txtTipPrg.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_nom");
                    txtNomPrg.setText((strAux==null)?"":strAux);

                }
                else
                {
                    limpiarFrm();
                    blnRes=false;
                }
            }
            rst.close();
            stm.close();
            con.close();
            rst=null;
            stm=null;
            con=null;
            //Mostrar la posici�n relativa del registro.
            intPosRel=rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta funci�n permite cargar el detalle del registro seleccionado.
     * @return true: Si se pudo cargar el detalle del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg(){
        int intCodEmp, intCodLoc;
        boolean blnRes=true;
        try{
            objTblMod.removeAllRows();
            if (!txtTipPrg.getText().equals("")){
//                objTooBar.setMenSis("Obteniendo datos...");
                con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
                if (con!=null){
                    stm=con.createStatement();
                    
                    if (objTooBar.getEstado()=='x' || objTooBar.getEstado()=='m'){
                        //Para el modo "Modificar" se muestra: documentos pendientes + documentos pagados.
                        strSQL="";
                        strSQL+="SELECT a1.co_rpt, a1.tx_desCor, a1.tx_desLar, a1.tx_nomRpt,";
                        strSQL+=" CASE WHEN a2.co_mnu IS NULL THEN 'N' ELSE 'S' END AS st_sav";
                        strSQL+=" FROM tbm_rptSis AS a1 LEFT OUTER JOIN tbr_rptSisPrg AS a2";
                        strSQL+=" ON a1.co_rpt=a2.co_rpt AND a2.co_mnu=" + rstCab.getString("co_mnu") + "";
                        strSQL+=" WHERE a1.st_reg NOT IN('I','E') ";
                        //strSQL+=" AND a2.co_mnu=" + rstCab.getString("co_mnu") + "";
                        strSQL+=" ORDER BY co_rpt ";
                    }
                    else{
                        //Para los dem�s modos se muestra: s�lo los documentos pagados.
                        strSQL="";
                        strSQL+="SELECT a1.co_rpt, a1.tx_desCor, a1.tx_desLar, a1.tx_nomRpt, CAST('S' as character varying) AS st_sav";
                        strSQL+=" FROM tbm_rptSis AS a1 INNER JOIN tbr_rptSisPrg AS a2";
                        strSQL+=" ON a1.co_rpt=a2.co_rpt";
                        strSQL+=" WHERE a1.st_reg NOT IN('I','E')";
                        strSQL+=" AND a2.co_mnu=" + rstCab.getString("co_mnu") + "";
                    }
                    rst=stm.executeQuery(strSQL);
                    //Limpiar vector de datos.
                    vecDat.clear();
                    while (rst.next()){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_CHK,null);
                        vecReg.add(INT_TBL_DAT_COD, rst.getString("co_rpt"));
                        vecReg.add(INT_TBL_DAT_DES_COR,rst.getString("tx_desCor"));
                        vecReg.add(INT_TBL_DAT_DES_LAR,rst.getString("tx_nomRpt"));
                        if(rst.getString("st_sav").equals("S")){
                            vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                        }
                        else if(rst.getString("st_sav").equals("N")){
                            vecReg.setElementAt(new Boolean(false),INT_TBL_DAT_CHK);
                        }
                        else {
                            vecReg.setElementAt(new Boolean(false),INT_TBL_DAT_CHK);
                        }
                        vecDat.add(vecReg);
                    }
                    
                    rst.close();
                    stm.close();
                    con.close();
                    rst=null;
                    stm=null;
                    con=null;
                    //Asignar vectores al modelo.
                    objTblMod.setData(vecDat);
                    tblDat.setModel(objTblMod);
                    vecDat.clear();
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    

    private boolean actualizarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (eliminar_tbrRptSisPrg()){
                    if (insertar_tbrRptSisPrg()){
                        con.commit();
                        blnRes=true;
                    }
                    else
                        con.rollback();
                }
                else
                    con.rollback();


            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean eliminar_tbrRptSisPrg(){
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="DELETE FROM tbr_rptsisprg";
                strSQL+=" WHERE co_mnu=" + txtTipPrg.getText() + "";
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean eliminarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (eliminar_tbrRptSisPrg()){
                    con.commit();
                    blnRes=true;
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                }
                else
                    con.rollback();
                con.close();
                con=null;
            }
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta funci�n obtiene la descripci�n larga del estado del registro.
     * @param estado El estado del registro. Por ejemplo: A, I, etc.
     * @return La descripci�n larga del estado del registro.
     * <BR>Nota.- Si la cadena recibida es <I>null</I> la funci�n devuelve una cadena vac�a.
     */
    private String getEstReg(String estado)
    {
        if (estado==null)
            estado="";
        else
            switch (estado.charAt(0))
            {
                case 'A':
                    estado="Activo";
                    break;
                case 'I':
                    estado="Anulado";
                    break;
                case 'P':
                    estado="Pendiente de autorizar";
                    break;
                case 'D':
                    estado="Autorizaci�n denegada";
                    break;
                case 'R':
                    estado="Pendiente de impresi�n";
                    break;
                case 'C':
                    estado="Pendiente confirmaci�n de inventario";
                    break;
                case 'F':
                    estado="Existen diferencias de inventario";
                    break;
                default:
                    estado="Desconocido";
                    break;
            }
        return estado;
    }
    
    /**
     * Esta funci�n se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private boolean isRegPro()
    {
        boolean blnRes=true;
        strAux="�Desea guardar los cambios efectuados a �ste registro?\n";
        strAux+="Si no guarda los cambios perder� toda la informaci�n que no haya guardado.";
        switch (mostrarMsgCon(strAux))
        {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado())
                {
                    case 'n': //Insertar
                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }
    
    /**
     * Esta funci�n muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg){
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    /**
     * Esta funci�n se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private void agregarDocLis()
    {
        txtTipPrg.getDocument().addDocumentListener(objDocLis);
        txtNomPrg.getDocument().addDocumentListener(objDocLis);
    }
    
    
    
}
