/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ZafMae05.java
 *
 * Created on Jun 2, 2010, 8:32:49 AM
 */

package Maestros.ZafMae05;

import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafUtil.ZafUtil; /**/
import Librerias.ZafVenCon.ZafVenCon;
import java.util.ArrayList;
  
/**
 *
 * @author jayapata
 */
public class ZafMae05 extends javax.swing.JInternalFrame {

  Librerias.ZafParSis.ZafParSis objZafParSis;
  ZafUtil objUti; /**/
  mitoolbar objTooBar;
  ZafVenCon objVenConGrp;

  String strVersion=" Ver 0.1 ";
  String strCodGrp="";
  String strDesCor="";
  String strDesLar="";

  java.sql.Connection CONN_GLO=null;
  java.sql.Statement  STM_GLO=null;
  java.sql.ResultSet  rstCab=null;

  boolean blnHayCam=false;
  
    /** Creates new form ZafMae05 */
    public ZafMae05(Librerias.ZafParSis.ZafParSis obj) {
        try{ /**/
	    this.objZafParSis = (Librerias.ZafParSis.ZafParSis) obj.clone();
	    initComponents();

            this.setTitle(objZafParSis.getNombreMenu()+" "+ strVersion ); /**/
            lblTit.setText(objZafParSis.getNombreMenu());  /**/

            panUniMed.setVisible(false);

	     objUti = new ZafUtil(); /**/
	     objTooBar = new mitoolbar(this);
             objTooBar.setVisibleAnular(false);
             objTooBar.setVisibleEliminar(false);
	     this.getContentPane().add(objTooBar,"South");

	 }catch (CloneNotSupportedException e){  objUti.mostrarMsgErr_F1(this, e); }  /**/
    }



    private boolean configurarVenConGrupo() {
        boolean blnRes=true;
        try {
            ArrayList arlCam=new ArrayList();
            arlCam.add("a.co_grp");
            arlCam.add("a.tx_descor");
            arlCam.add("a.tx_deslar");

            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Des.Cor");
            arlAli.add("Des.Lar.");

            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("60");
            arlAncCol.add("130");
            arlAncCol.add("350");

            //Armar la sentencia SQL.
            String  strSQL;

             strSQL="SELECT a.co_grp, a.tx_descor, a.tx_deslar FROM tbm_grpvar as a where a.st_reg='A' ";

            objVenConGrp=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objZafParSis, objZafParSis.getNombreMenu() , strSQL, arlCam, arlAli, arlAncCol );
            arlCam=null;
            arlAli=null;
            arlAncCol=null;

        }
        catch (Exception e) {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    public void abrirCon(){
        try{
            CONN_GLO=java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());
        }
        catch(java.sql.SQLException  Evt){  objUti.mostrarMsgErr_F1(this, Evt); }
    }

    public void CerrarCon(){
        try{
            CONN_GLO.close();
            CONN_GLO=null;
        }
        catch(java.sql.SQLException  Evt){  objUti.mostrarMsgErr_F1(this, Evt); }
    }




    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panNor = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabGen = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        lblCodDoc = new javax.swing.JLabel();
        txtCodDoc = new javax.swing.JTextField();
        txtDesCor = new javax.swing.JTextField();
        txtDesLar = new javax.swing.JTextField();
        butRec = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDesLarga = new javax.swing.JTextField();
        txtDesCorta = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObs = new javax.swing.JTextArea();
        cboEst = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        panUniMed = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        radEnt = new javax.swing.JRadioButton();
        radFra = new javax.swing.JRadioButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        panNor.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("titulo"); // NOI18N
        panNor.add(lblTit, java.awt.BorderLayout.CENTER);

        getContentPane().add(panNor, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(null);

        lblCodDoc.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        lblCodDoc.setText("Código :"); // NOI18N
        jPanel1.add(lblCodDoc);
        lblCodDoc.setBounds(10, 10, 60, 20);

        txtCodDoc.setBackground(objZafParSis.getColorCamposSistema());
        jPanel1.add(txtCodDoc);
        txtCodDoc.setBounds(100, 10, 110, 20);

        txtDesCor.setBackground(objZafParSis.getColorCamposObligatorios());
        txtDesCor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorActionPerformed(evt);
            }
        });
        txtDesCor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorFocusLost(evt);
            }
        });
        jPanel1.add(txtDesCor);
        txtDesCor.setBounds(100, 70, 70, 20);

        txtDesLar.setBackground(objZafParSis.getColorCamposObligatorios());
        txtDesLar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarActionPerformed(evt);
            }
        });
        txtDesLar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarFocusLost(evt);
            }
        });
        jPanel1.add(txtDesLar);
        txtDesLar.setBounds(170, 70, 230, 20);

        butRec.setText(".."); // NOI18N
        butRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRecActionPerformed(evt);
            }
        });
        jPanel1.add(butRec);
        butRec.setBounds(400, 70, 20, 20);

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        jLabel3.setText("Descripción corta:"); // NOI18N
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 30, 90, 20);

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        jLabel4.setText("Descripción larga:"); // NOI18N
        jPanel1.add(jLabel4);
        jLabel4.setBounds(10, 50, 90, 20);

        txtDesLarga.setBackground(objZafParSis.getColorCamposObligatorios());
        jPanel1.add(txtDesLarga);
        txtDesLarga.setBounds(100, 50, 300, 20);
        jPanel1.add(txtDesCorta);
        txtDesCorta.setBounds(100, 30, 110, 20);

        jLabel5.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        jLabel5.setText("Grupo :"); // NOI18N
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 70, 90, 20);

        jLabel6.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        jLabel6.setText("Observación:"); // NOI18N
        jPanel1.add(jLabel6);
        jLabel6.setBounds(10, 90, 90, 20);

        txtObs.setColumns(20);
        txtObs.setLineWrap(true);
        txtObs.setRows(5);
        jScrollPane1.setViewportView(txtObs);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(100, 90, 300, 60);

        cboEst.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Activo", "Inactivo" }));
        jPanel1.add(cboEst);
        cboEst.setBounds(100, 150, 170, 20);

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        jLabel7.setText("Est. del registro:"); // NOI18N
        jPanel1.add(jLabel7);
        jLabel7.setBounds(10, 150, 100, 20);

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        jLabel2.setText("Tipo de unidad de medida:"); // NOI18N

        buttonGroup1.add(radEnt);
        radEnt.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        radEnt.setText("Unidad entera");

        buttonGroup1.add(radFra);
        radFra.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        radFra.setSelected(true);
        radFra.setText("Unidad en fracción");

        javax.swing.GroupLayout panUniMedLayout = new javax.swing.GroupLayout(panUniMed);
        panUniMed.setLayout(panUniMedLayout);
        panUniMedLayout.setHorizontalGroup(
            panUniMedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panUniMedLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radEnt)
                .addGap(18, 18, 18)
                .addComponent(radFra, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );
        panUniMedLayout.setVerticalGroup(
            panUniMedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panUniMedLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panUniMedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radEnt, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radFra, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.add(panUniMed);
        panUniMed.setBounds(10, 180, 440, 40);

        tabGen.addTab("General", jPanel1);

        getContentPane().add(tabGen, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void txtDesCorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorActionPerformed
        // TODO add your handling code here:
        txtDesCor.transferFocus();
}//GEN-LAST:event_txtDesCorActionPerformed

    private void txtDesCorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorFocusGained
        // TODO add your handling code here:
        strDesCor=txtDesCor.getText();
        txtDesCor.selectAll();
}//GEN-LAST:event_txtDesCorFocusGained

    private void txtDesCorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorFocusLost
        // TODO add your handling code here:
        if (!txtDesCor.getText().equalsIgnoreCase(strDesCor)) {
            if(txtDesCor.getText().equals("")) {
                strCodGrp="";
                txtDesCor.setText("");
                txtDesLar.setText("");
                panUniMed.setVisible(false);
            }else
                BuscarGrupo("a.tx_descor",txtDesCor.getText(),1);
        }else
            txtDesCor.setText(strDesCor);
}//GEN-LAST:event_txtDesCorFocusLost

    private void txtDesLarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarActionPerformed
        // TODO add your handling code here:
        txtDesLar.transferFocus();
}//GEN-LAST:event_txtDesLarActionPerformed

    private void txtDesLarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarFocusGained
        // TODO add your handling code here:
        strDesLar=txtDesLar.getText();
        txtDesLar.selectAll();
}//GEN-LAST:event_txtDesLarFocusGained

    private void txtDesLarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarFocusLost
        // TODO add your handling code here:
        if (!txtDesLar.getText().equalsIgnoreCase(strDesLar)) {
            if(txtDesLar.getText().equals("")) {
                strCodGrp="";
                txtDesCor.setText("");
                txtDesLar.setText("");
                panUniMed.setVisible(false);
            }else
                BuscarGrupo("a.tx_deslar",txtDesLar.getText(),2);
        }else
            txtDesLar.setText(strDesLar);
}//GEN-LAST:event_txtDesLarFocusLost

    private void butRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRecActionPerformed
        // TODO add your handling code here:
        objVenConGrp.setTitle("Listado de Grupo");
        objVenConGrp.setCampoBusqueda(1);
        objVenConGrp.show();
        if (objVenConGrp.getSelectedButton()==objVenConGrp.INT_BUT_ACE) {
            strCodGrp=objVenConGrp.getValueAt(1);
            txtDesCor.setText(objVenConGrp.getValueAt(2));
            txtDesLar.setText(objVenConGrp.getValueAt(3));
            if(strCodGrp.equals("5")) panUniMed.setVisible(true);
             else panUniMed.setVisible(false);
        }
}//GEN-LAST:event_butRecActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:

        configurarVenConGrupo();
        
    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:

         exitForm();


    }//GEN-LAST:event_formInternalFrameClosing


    /**
     * Para salir de la pantalla en donde estamos y pide confirmacion de salidad.
     */
    private void exitForm(){

        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            cerrarObj();
            System.gc();
            dispose();
        }

    }


    public void cerrarObj(){
        try{
            objVenConGrp.dispose(); //***
            objVenConGrp=null;  //****

            objUti=null;
            objTooBar=null;

            objZafParSis=null;

        }
        catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }

    

    
 public void BuscarGrupo(String campo,String strBusqueda,int tipo){
  objVenConGrp.setTitle("Listado de Grupo");
  if(objVenConGrp.buscar(campo, strBusqueda )) {
        strCodGrp=objVenConGrp.getValueAt(1);
        txtDesCor.setText(objVenConGrp.getValueAt(2));
        txtDesLar.setText(objVenConGrp.getValueAt(3));
         if(strCodGrp.equals("5")) panUniMed.setVisible(true);
          else panUniMed.setVisible(false);
  }else{
        objVenConGrp.setCampoBusqueda(tipo);
        objVenConGrp.cargarDatos();
        objVenConGrp.show();
        if (objVenConGrp.getSelectedButton()==objVenConGrp.INT_BUT_ACE) {
            strCodGrp=objVenConGrp.getValueAt(1);
            txtDesCor.setText(objVenConGrp.getValueAt(2));
            txtDesLar.setText(objVenConGrp.getValueAt(3));
             if(strCodGrp.equals("5")) panUniMed.setVisible(true);
             else panUniMed.setVisible(false);
        }else{
            txtDesCor.setText(strDesCor);
            txtDesLar.setText(strDesLar);
  }}}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butRec;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cboEst;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCodDoc;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panNor;
    private javax.swing.JPanel panUniMed;
    private javax.swing.JRadioButton radEnt;
    private javax.swing.JRadioButton radFra;
    private javax.swing.JTabbedPane tabGen;
    private javax.swing.JTextField txtCodDoc;
    private javax.swing.JTextField txtDesCor;
    private javax.swing.JTextField txtDesCorta;
    private javax.swing.JTextField txtDesLar;
    private javax.swing.JTextField txtDesLarga;
    private javax.swing.JTextArea txtObs;
    // End of variables declaration//GEN-END:variables





      private void MensajeInf(String strMensaje){
        javax.swing.JOptionPane obj =new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        obj.showMessageDialog(this,strMensaje,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }





      public class mitoolbar extends ZafToolBar{
        public mitoolbar(javax.swing.JInternalFrame jfrThis){
            super(jfrThis, objZafParSis);
        }


public boolean anular() {
  boolean blnRes=false;
  
  return blnRes;
}



        public void clickAceptar() {
            setEstadoBotonMakeFac();
        }



public void clickAnterior() {
 try{
  if(rstCab != null ) {
     abrirCon();
     if(!rstCab.isFirst()) {
         if(blnHayCam) {
              if(isRegPro()) {
                 rstCab.previous();
                 refrescaDatos(CONN_GLO, rstCab);
           }}else {
               rstCab.previous();
               refrescaDatos(CONN_GLO, rstCab);
       }}
      CerrarCon();

  }}catch (java.sql.SQLException e){ objUti.mostrarMsgErr_F1(this, e); }
    catch (Exception e){ objUti.mostrarMsgErr_F1(this, e); }
}




        public void clickAnular() {

        }


        public void clickConsultar() {

            noEditable(false);

           

	}

        public void clickEliminar() {

	}





public void clickFin(){
 try{
    if(rstCab != null ){
     abrirCon();
      if(!rstCab.isLast()){
       if (blnHayCam){
        if(isRegPro()){
           rstCab.last();
           refrescaDatos(CONN_GLO, rstCab);
       }}else{
            rstCab.last();
            refrescaDatos(CONN_GLO, rstCab);
      }}
     CerrarCon();
   }}catch (java.sql.SQLException e) { objUti.mostrarMsgErr_F1(this, e); }
     catch (Exception e) { objUti.mostrarMsgErr_F1(this, e); }
}






public void clickInicio(){
 try{
   if(rstCab != null ){
       abrirCon();
     if(!rstCab.isFirst()) {
      if(blnHayCam){
       if(isRegPro()){
          rstCab.first();
          refrescaDatos(CONN_GLO, rstCab);
        }}else{
            rstCab.first();
            refrescaDatos(CONN_GLO, rstCab);
        }}
      CerrarCon();
  }}catch (java.sql.SQLException e) {  objUti.mostrarMsgErr_F1(this, e); }
    catch (Exception e) { objUti.mostrarMsgErr_F1(this, e);  }
}




public void clickInsertar() {
 try{
    clnTextos();

    java.awt.Color colBack;
    colBack = txtCodDoc.getBackground();
    txtCodDoc.setEditable(false);
    txtCodDoc.setBackground(colBack);


      if(rstCab!=null) {
          rstCab.close();
          rstCab=null;
      }

   }catch (Exception e) {  objUti.mostrarMsgErr_F1(this, e); }
}




        public void setEstadoBotonMakeFac(){
            switch(getEstado()) {
                case 'l'://Estado 0 => Listo
                    break;
                case 'x'://Estado click modificar
                    break;
                case 'c'://Estado Consultar
                    break;
                case 'y':
                    break;
                case 'z':
                    break;
                default:
                    break;
            }
        }



public void clickSiguiente(){
 try{
   if(rstCab != null ){
       abrirCon();
      if(!rstCab.isLast()) {
       if(blnHayCam ) {
          if(isRegPro()) {
              rstCab.next();
              refrescaDatos(CONN_GLO, rstCab);
          }}else{
               rstCab.next();
               refrescaDatos(CONN_GLO, rstCab);
       }}
    CerrarCon();
  }}catch (java.sql.SQLException e){ objUti.mostrarMsgErr_F1(this, e); }
    catch (Exception e) { objUti.mostrarMsgErr_F1(this, e); }
}








public boolean eliminar() {
  boolean blnRes=false;

  return blnRes;
}








/**
 * validad campos requeridos antes de insertar o modificar
 * @return  true si esta todo bien   false   falta algun dato
 */
 private boolean validaCampos(){

   
  if(txtDesLarga.getText().trim().equals("") ){
    tabGen.setSelectedIndex(0);
    MensajeInf("El campo << Descripción larga >> es obligatorio.\nEscoja y vuelva a intentarlo.");
    txtDesLarga.setText(txtDesLarga.getText().trim());
    txtDesLarga.requestFocus();
    return false;
    }


   if(txtDesCor.getText().equals("") ){
    tabGen.setSelectedIndex(0);
    MensajeInf("El campo << Grupo >> es obligatorio.\nEscoja y vuelva a intentarlo.");
    txtDesCor.requestFocus();
    return false;
    }


 
   return true;
 }







public boolean insertar() {
  boolean blnRes=false;
  java.sql.Connection conn;
  java.sql.Statement stmLoc;
  java.sql.ResultSet rstLoc;
  String strSql="";
  int intCodReg=0;
  try{

    if(validaCampos()){

     conn=java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());
     if(conn!=null){
       conn.setAutoCommit(false);
       stmLoc=conn.createStatement();

        strSql="SELECT case when (Max(co_reg)+1) is null then 1 else Max(co_reg)+1 end as coreg  FROM tbm_var  ";
        rstLoc = stmLoc.executeQuery(strSql);
        if(rstLoc.next())
            intCodReg = rstLoc.getInt("coreg");
         rstLoc.close();
         rstLoc=null;

        if(insertarReg(conn, intCodReg)){
            conn.commit();
            txtCodDoc.setText(""+intCodReg);
            blnRes=true;
        }else conn.rollback();
              
       stmLoc.close();
       stmLoc=null;
       conn.close();
       conn=null;
    }

   }}catch(java.sql.SQLException Evt) { blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt);  }
     catch(Exception  Evt){ blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt); }
 return blnRes;
}

private boolean insertarReg(java.sql.Connection conn, int intCodReg){
 boolean blnRes=false;
 java.sql.Statement stmLoc;
 String strSql="";
 String strEst="I", strUniMed="";
 try{
    if(conn!=null){
        stmLoc=conn.createStatement();

        if(cboEst.getSelectedIndex()==0) strEst="A";


        if(strCodGrp.equals("5")){
          if(radEnt.isSelected()) strUniMed="E";
          if(radFra.isSelected()) strUniMed="F";
        }
        strSql="INSERT INTO tbm_var(co_reg, tx_descor, tx_deslar, co_grp, tx_obs1, st_reg, st_regrep, tx_tipUniMed ) " +
        " VALUES("+intCodReg+",'"+txtDesCorta.getText()+"', '"+txtDesLarga.getText()+"', "+strCodGrp+", '"+txtObs.getText()+"', " +
        "'"+strEst+"', 'I' , "+(strUniMed.equals("")?null:"'"+strUniMed+"'")+" ) ";

        stmLoc.executeUpdate(strSql);

      stmLoc.close();
      stmLoc=null;
    blnRes=true;
 }}catch(java.sql.SQLException Evt) { blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt);  }
  catch(Exception  Evt){ blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt); }
 return blnRes;
}






public boolean modificar(){
  boolean blnRes=false;
  java.sql.Connection conn;
  int intCodReg=0;
  try{

      
    if(validaCampos()){

     conn=java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());
     if(conn!=null){
       conn.setAutoCommit(false);


        intCodReg=Integer.parseInt(txtCodDoc.getText());

        if(modificarReg(conn, intCodReg )){
               conn.commit();
               blnRes=true;
        }else conn.rollback();

       conn.close();
       conn=null;
   }

  }}catch(java.sql.SQLException Evt) { blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt);  }
    catch(Exception  Evt){ blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt); }
 return blnRes;
}



/**
 * Se encarga de modificar la cabezera del registro
 * @param conn  coneccion de la base
 * @param intCodReg      codigo de documento
 * @return
 */
private boolean modificarReg(java.sql.Connection conn, int intCodReg ){
 boolean blnRes=true;
 java.sql.Statement stmLoc;
 java.sql.ResultSet rstLoc;
 String strSql="";
 String strEst="I", strUniMed="", strSqlAux="";
 try{
    if(conn!=null){
        stmLoc=conn.createStatement();

        if(cboEst.getSelectedIndex()==0) strEst="A";

       strSqlAux =" , tx_tipUniMed=null ";

       if(strCodGrp.equals("5")){
         if(radEnt.isSelected()) strUniMed="E";
         if(radFra.isSelected()) strUniMed="F";
         strSqlAux =" , tx_tipUniMed='"+strUniMed+"' ";
       }
         strSql="UPDATE tbm_var SET  tx_descor='"+txtDesCorta.getText()+"', tx_deslar='"+txtDesLarga.getText()+"', "+
         " co_grp="+strCodGrp+", tx_obs1='"+txtObs.getText()+"', st_reg='"+strEst+"', st_regrep='M' "+strSqlAux+" "+
         " WHERE co_reg="+intCodReg;
        
         stmLoc.executeUpdate(strSql);

      stmLoc.close();
      stmLoc=null;

 }}catch(java.sql.SQLException Evt) { blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt);  }
  catch(Exception  Evt){ blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt); }
 return blnRes;
}





     private void bloquea(javax.swing.JTextField txtFiel,  java.awt.Color colBack, boolean blnEst){
        colBack = txtFiel.getBackground();
        txtFiel.setEditable(blnEst);
        txtFiel.setBackground(colBack);
    }

     private void noEditable(boolean blnEst){

      }








 public void  clnTextos(){
    strCodGrp=""; strDesCor=""; strDesLar="";
  
  
    txtDesCorta.setText("");
    txtDesLarga.setText("");
    txtDesCor.setText("");
    txtDesLar.setText("");
    txtObs.setText("");
    txtCodDoc.setText("");
    radFra.setSelected(true);

 }




        public boolean cancelar() {
            boolean blnRes=true;

            try {
                if (blnHayCam ) {
                    if (objTooBar.getEstado()=='n' || objTooBar.getEstado()=='m') {
                        if (!isRegPro())
                            return false;
                    }
                }
                if (rstCab!=null) {
                    rstCab.close();
                    if (STM_GLO!=null){
                        STM_GLO.close();
                        STM_GLO=null;
                    }
                    rstCab=null;

                }
            }
            catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
            clnTextos();
            blnHayCam=false;

            return blnRes;
        }




        public boolean aceptar() {
            return true;
        }

        public boolean afterAceptar() {
            return true;
        }

        public boolean afterAnular() {
            return true;
        }

        public boolean afterCancelar() {

            return true;
        }

        public boolean afterConsultar() {

            return true;
        }

        public boolean afterEliminar() {
            return true;
        }

        public boolean afterImprimir() {
            return true;
        }

        public boolean afterInsertar() {
            this.setEstado('w');

            return true;
        }

        public boolean afterModificar() {

           this.setEstado('w');

            return true;
        }

        public boolean afterVistaPreliminar() {
            return true;
        }







          /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg) {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }






  /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objTooBars
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private boolean isRegPro() {
        boolean blnRes=true;
//        String strAux="¿Desea guardar los cambios efectuados a éste registro?\n";
//        strAux+="Si no guarda los cambios perderá toda la información que no haya guardado.";
//        switch (mostrarMsgCon(strAux)) {
//            case 0: //YES_OPTION
//                switch (objTooBar.getEstado()) {
//                    case 'n': //Insertar
//                        blnRes=objTooBar.insertar();
//                        break;
//                    case 'm': //Modificar
////                        blnRes=objTooBar.modificar();
//                        break;
//                }
//                break;
//            case 1: //NO_OPTION
//                objTblMod.setDataModelChanged(false);
//                blnHayCam=false;
//                blnRes=true;
//                break;
//            case 2: //CANCEL_OPTION
//                blnRes=false;
//                break;
//        }
        return blnRes;
    }





        public boolean consultar() {
                /*
                 * Esto Hace en caso de que el modo de operacion sea Consulta
                 */
           return _consultar(FilSql());
        }







private boolean _consultar(String strFil){
  boolean blnRes=false;
  String strSql="";
   try{
     
        abrirCon();
        if(CONN_GLO!=null) {
            STM_GLO=CONN_GLO.createStatement(java.sql.ResultSet.TYPE_SCROLL_SENSITIVE, java.sql.ResultSet.CONCUR_READ_ONLY );

           if(!(strFil.equals(""))) strFil=" WHERE "+strFil+" ";

           strSql="SELECT  a.co_reg  FROM tbm_var AS a "+strFil+" "+
           " ORDER BY a.co_reg  ";
           rstCab=STM_GLO.executeQuery(strSql);
           if(rstCab.next()){
              rstCab.last();
              setMenSis("Se encontraron " + rstCab.getRow() + " registros");
              refrescaDatos(CONN_GLO, rstCab);
              blnRes=true;
           }else{
                setMenSis("0 Registros encontrados");
                clnTextos();
           }

      CerrarCon();
   }}catch(java.sql.SQLException Evt) { blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt);  }
     catch(Exception Evt) { blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt);  }

    System.gc();
    return blnRes;
}


/**
 * Carga los datos  de la reccion previo a la consulta
 * @param conn  coneccion de la base
 * @param rstDatRec  resulset de los datos consultados
 * @return  true si se cargo con exito  false si no cargo
 */
private boolean refrescaDatos(java.sql.Connection conn, java.sql.ResultSet rstDatRec ){
    boolean blnRes=false;
    java.sql.Statement stmLoc;
    java.sql.ResultSet rstLoc;
    String strSql="";
    try{
      if(conn!=null){
        stmLoc=conn.createStatement();
      
       strSql="SELECT a.co_reg, a.tx_descor, a.tx_deslar, a.co_grp, a.tx_obs1, a.st_reg, a.st_regrep " +
       " ,a1.tx_descor as dcgrp, a1.tx_deslar as dlgrp,  case when a.tx_tipUniMed is null then '' else a.tx_tipUniMed end as unimed " +
       " FROM tbm_var as a " +
       " LEFT JOIN tbm_grpvar as a1 on (a1.co_grp=a.co_grp) " +
       " WHERE a.co_reg="+rstDatRec.getInt("co_reg")+" ";
       rstLoc=stmLoc.executeQuery(strSql);
       if(rstLoc.next()){

           txtCodDoc.setText(rstLoc.getString("co_reg"));
           txtDesCorta.setText(rstLoc.getString("tx_descor"));
           txtDesLarga.setText(rstLoc.getString("tx_deslar"));
           strCodGrp=rstLoc.getString("co_grp");
           txtDesCor.setText(rstLoc.getString("dcgrp"));
           txtDesLar.setText(rstLoc.getString("dlgrp"));
           txtObs.setText(rstLoc.getString("tx_obs1"));

           if(rstLoc.getString("st_reg").equals("A")) cboEst.setSelectedIndex(0);
           else cboEst.setSelectedIndex(1);
           
           if(strCodGrp.equals("5")) panUniMed.setVisible(true);
             else panUniMed.setVisible(false);

          if(rstLoc.getString("unimed").equals("E")) radEnt.setSelected(true);
          if(rstLoc.getString("unimed").equals("F")) radFra.setSelected(true);

      }
      rstLoc.close();
      rstLoc=null;

        stmLoc.close();
        stmLoc=null;

        int intPosRel=rstDatRec.getRow();
        rstDatRec.last();
        objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstDatRec.getRow());
        rstDatRec.absolute(intPosRel);

        blnRes=true;
 }}catch(java.sql.SQLException Evt) { blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt);  }
   catch(Exception Evt) { blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt);  }
  return blnRes;
}







private String FilSql() {
    String sqlFiltro = "";
    //Agregando filtro por Numero de Cotizacion
   
    if(!txtDesCor.getText().equals(""))
        sqlFiltro =" a.co_grp="+strCodGrp;

   
    return sqlFiltro ;
}





public void clickModificar(){
 try{
 

  java.awt.Color colBack;
  colBack = txtCodDoc.getBackground();

  bloquea(txtCodDoc, colBack, false);

 blnHayCam=false;


 }catch(Exception evt){ objUti.mostrarMsgErr_F1(this, evt); }
}





        //******************************************************************************************************

        public boolean vistaPreliminar(){
            
            return true;
        }







        public boolean imprimir(){
           
            return true;
        }


        //******************************************************************************************************


        public void clickImprimir(){
        }
        public void clickVisPreliminar(){
        }

        public void clickCancelar(){

        }

        public void cierraConnections(){

        }


        public boolean beforeAceptar() {
            return true;
        }
        public boolean beforeAnular() {
            return true;
        }
        public boolean beforeCancelar() {
            return true;
        }
        public boolean beforeConsultar() {
            return true;
        }
        public boolean beforeEliminar() {
            return true;
        }
        public boolean beforeImprimir() {

            return true;
        }
        public boolean beforeInsertar() {
            return true;
        }
        public boolean beforeModificar() {
            return true;
        }
        public boolean beforeVistaPreliminar() {

            return true;
        }




    }


 protected void finalize() throws Throwable
    {   System.gc();
        super.finalize();
    }



}
