/*
 * ZafMae28.java
 *
 * Created on Oct 15, 2013, 11:47 PM
 */
package Maestros.ZafMae28;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafUtil.ZafUtil;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut;
import Librerias.ZafTblUti.ZafTblCelEdiButDlg.ZafTblCelEdiButDlg;
import Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt;
import Librerias.ZafVenCon.ZafVenCon;
import java.util.ArrayList;

/**
 *
 * @author  José Marín
 */
public class ZafMae28 extends javax.swing.JInternalFrame {
    
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private MiToolBar objTooBar;
    private String strAux;
    private boolean blnHayCam;
    private ZafDocLis objDocLis;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private String strSQL;
    private java.util.Date datFecAux;
    private ZafVenCon vcoPrg;
    private String strTipPrg;
    private String strNomPrg;
    private ZafVenCon vcoPai;
    

    /** Creates new form ZafMae28 */
    public ZafMae28(ZafParSis obj) {
        try{
            objParSis=(ZafParSis)obj.clone();
            initComponents();
            configurarFrm();
            agregarDocLis();
        }
        catch (CloneNotSupportedException e){
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        panBar = new javax.swing.JPanel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtCodRpt = new javax.swing.JTextField();
        txtDesLarRpt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNomRpt = new javax.swing.JTextField();
        lblObs1 = new javax.swing.JLabel();
        lblObs2 = new javax.swing.JLabel();
        cboEstReg = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        lblObs3 = new javax.swing.JLabel();
        txtDesCorRpt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        butRpt = new javax.swing.JButton();
        txtRutAbsRpt = new javax.swing.JTextField();
        txtRutRelRpt = new javax.swing.JTextField();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("jLabel1");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panBar.setPreferredSize(new java.awt.Dimension(0, 70));
        panBar.setLayout(new java.awt.BorderLayout());
        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        panFil.setLayout(null);

        jLabel2.setText("Código:");
        panFil.add(jLabel2);
        jLabel2.setBounds(10, 8, 110, 15);

        txtCodRpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodRptActionPerformed(evt);
            }
        });
        txtCodRpt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodRptFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodRptFocusLost(evt);
            }
        });
        panFil.add(txtCodRpt);
        txtCodRpt.setBounds(180, 10, 90, 19);

        txtDesLarRpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarRptActionPerformed(evt);
            }
        });
        panFil.add(txtDesLarRpt);
        txtDesLarRpt.setBounds(180, 50, 410, 19);

        jLabel3.setText("Descripción Larga:");
        panFil.add(jLabel3);
        jLabel3.setBounds(10, 50, 130, 15);
        panFil.add(txtNomRpt);
        txtNomRpt.setBounds(180, 110, 410, 19);

        lblObs1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblObs1.setText("Descripción Corta:");
        panFil.add(lblObs1);
        lblObs1.setBounds(10, 30, 120, 14);

        lblObs2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblObs2.setText("Estado del Registro:");
        panFil.add(lblObs2);
        lblObs2.setBounds(10, 130, 140, 14);

        cboEstReg.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Activo", "Inactivo" }));
        panFil.add(cboEstReg);
        cboEstReg.setBounds(180, 130, 160, 24);

        jLabel5.setText("Ruta relativa del Reporte:");
        panFil.add(jLabel5);
        jLabel5.setBounds(10, 90, 160, 15);

        lblObs3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblObs3.setText("Nombre del Reporte:");
        panFil.add(lblObs3);
        lblObs3.setBounds(10, 110, 150, 14);

        txtDesCorRpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorRptActionPerformed(evt);
            }
        });
        txtDesCorRpt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorRptFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorRptFocusLost(evt);
            }
        });
        panFil.add(txtDesCorRpt);
        txtDesCorRpt.setBounds(180, 30, 410, 19);

        jLabel6.setText("Ruta absoluta del Reporte:");
        panFil.add(jLabel6);
        jLabel6.setBounds(10, 70, 170, 15);

        butRpt.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        butRpt.setText("...");
        butRpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRptActionPerformed(evt);
            }
        });
        panFil.add(butRpt);
        butRpt.setBounds(270, 10, 20, 20);
        panFil.add(txtRutAbsRpt);
        txtRutAbsRpt.setBounds(180, 70, 410, 19);

        txtRutRelRpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRutRelRptActionPerformed(evt);
            }
        });
        panFil.add(txtRutRelRpt);
        txtRutRelRpt.setBounds(180, 90, 410, 19);

        tabFrm.addTab("General", panFil);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
// TODO add your handling code here:

}//GEN-LAST:event_formInternalFrameOpened

private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
// TODO add your handling code here:
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="¿Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                //Cerrar la conexión si está abierta.
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e){
            dispose();
        }
}//GEN-LAST:event_exitForm

    private void txtDesCorRptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorRptActionPerformed
        // TODO add your handling code here:
        txtDesLarRpt.requestFocus();
    }//GEN-LAST:event_txtDesCorRptActionPerformed

    private void txtDesCorRptFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorRptFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDesCorRptFocusGained

    private void txtDesCorRptFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorRptFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.    
    }//GEN-LAST:event_txtDesCorRptFocusLost

    private void butRptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRptActionPerformed
        // TODO add your handling code here:
        if (objTooBar.getEstado()=='n'){
            mostrarReportes2(0);
        }
        else{
            mostrarReportes(0);
        }      
    }//GEN-LAST:event_butRptActionPerformed

    private void txtCodRptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodRptActionPerformed
        // TODO add your handling code here:
         txtDesCorRpt.requestFocus();
    }//GEN-LAST:event_txtCodRptActionPerformed

    private void txtCodRptFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodRptFocusGained
        // TODO add your handling code here:
        strTipPrg=txtCodRpt.getText();
        txtCodRpt.selectAll();
    }//GEN-LAST:event_txtCodRptFocusGained

    private void txtCodRptFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodRptFocusLost
        // TODO add your handling code here:
        if (!txtCodRpt.getText().equalsIgnoreCase(strTipPrg)){
            if (txtCodRpt.getText().equals("")){
                txtCodRpt.setText("");
                txtDesCorRpt.setText("");
            }
            else{
                mostrarReportes(1);
            }
        }
        else
        txtCodRpt.setText(strTipPrg);
    }//GEN-LAST:event_txtCodRptFocusLost

    private void txtDesLarRptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarRptActionPerformed
        // TODO add your handling code here:
        txtRutRelRpt.requestFocus();
    }//GEN-LAST:event_txtDesLarRptActionPerformed

    private void txtRutRelRptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRutRelRptActionPerformed
        // TODO add your handling code here:
        txtNomRpt.requestFocus();
    }//GEN-LAST:event_txtRutRelRptActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butRpt;
    private javax.swing.JComboBox cboEstReg;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblObs1;
    private javax.swing.JLabel lblObs2;
    private javax.swing.JLabel lblObs3;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTextField txtCodRpt;
    private javax.swing.JTextField txtDesCorRpt;
    private javax.swing.JTextField txtDesLarRpt;
    private javax.swing.JTextField txtNomRpt;
    private javax.swing.JTextField txtRutAbsRpt;
    private javax.swing.JTextField txtRutRelRpt;
    // End of variables declaration//GEN-END:variables

    
    /** Configurar el formulario. */
    private boolean configurarFrm(){
        boolean blnRes=true;
        try{
            //Inicializar objetos.
            objUti=new ZafUtil();
            objTooBar=new MiToolBar(this);
            
            objDocLis=new ZafDocLis();
            panBar.add(objTooBar);
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.1.1");
            lblTit.setText(strAux);
            txtCodRpt.setBackground(objParSis.getColorCamposSistema());
            txtRutAbsRpt.setBackground(objParSis.getColorCamposSistema());
            txtDesCorRpt.setBackground(objParSis.getColorCamposObligatorios());
            txtNomRpt.setBackground(objParSis.getColorCamposObligatorios());
            txtRutRelRpt.setBackground(objParSis.getColorCamposObligatorios());
            configurarReportes();
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

 

    
    /**
     * Esta clase implementa la interface DocumentListener que observa los cambios que
     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
     * Se la usa en el sistema para determinar si existe algún cambio que se deba grabar
     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
     * presentará un mensaje advirtiendo que si no guarda los cambios los perderá.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener 
    {
        public void changedUpdate(javax.swing.event.DocumentEvent evt)        {
            blnHayCam=true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }
    }
    
    
    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private void agregarDocLis()
    {
        txtCodRpt.getDocument().addDocumentListener(objDocLis);
        txtDesLarRpt.getDocument().addDocumentListener(objDocLis);
        txtDesCorRpt.getDocument().addDocumentListener(objDocLis);
        txtRutAbsRpt.getDocument().addDocumentListener(objDocLis);
        txtRutRelRpt.getDocument().addDocumentListener(objDocLis);
        txtNomRpt.getDocument().addDocumentListener(objDocLis);
    } 
    
    /**
     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
     * insertar, consultar, modificar, eliminar, etc. Además de los botones de navegación
     * que permiten desplazarse al primero, anterior, siguiente y último registro.
     */
    private class MiToolBar extends ZafToolBar
    {
        public MiToolBar(javax.swing.JInternalFrame ifrFrm)
        {
            super(ifrFrm, objParSis);
        }

        public void clickInicio() {
            try{
                if (!rstCab.isFirst()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.first();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.first();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnterior() {
            try{
                if (!rstCab.isFirst()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.previous();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.previous();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            
        }

        public void clickSiguiente() {
            try{
                if (!rstCab.isLast()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.next();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.next();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            
            
        }

        public void clickFin() {
            try{
                if (!rstCab.isLast()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.last();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.last();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }

        }

        public void clickInsertar() {
            try{
                if (blnHayCam){
                    isRegPro();
                }
                limpiarFrm();
                txtCodRpt.setEditable(false);
                txtRutAbsRpt.setEditable(false);
                txtDesLarRpt.selectAll();
                txtDesCorRpt.requestFocus();
                txtRutRelRpt.setText("/Reportes/NombrePaquete/NombreClase/");
                txtRutAbsRpt.setText("//172.16.1.2/Zafiro");
                //Inicializar las variables que indican cambios.
                blnHayCam=false;                
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickConsultar() {            
        }

        public void clickModificar() {
            txtCodRpt.setEditable(false);
            txtRutAbsRpt.setEditable(false);
        }

        public void clickEliminar() {
            
        }

        public void clickAnular() {
            cargarCabReg();
        }

        public void clickImprimir() {
        }

        public void clickVisPreliminar() {
        }

        public void clickAceptar() {
        }

        public void clickCancelar() {
        }

        public boolean insertar() {
            if (!insertarReg())
                return false;
            return true;
        }

        public boolean consultar() {
            consultarReg();
            return true;
        }

        public boolean modificar() {
            if (!actualizarReg())
                return false;
            return true;
        }

        public boolean eliminar() {
            try{
                if (!eliminarReg())
                    return false;
                //Desplazarse al siguiente registro si es posible.
                if (!rstCab.isLast()){
                    rstCab.next();
                    cargarReg();
                }
                else{
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                }
                blnHayCam=false;
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
                return true;
            }
            return true;
        }

        public boolean anular() {
            if (!anularReg())
                return false;
            objTooBar.setEstadoRegistro("Anulado");
            blnHayCam=false;
            return true;
        }

        public boolean imprimir() {
            return true;
        }

        public boolean vistaPreliminar() {
            return true;
        }

        public boolean aceptar() {
            return true;
        }

        public boolean cancelar() {
            boolean blnRes=true;
            try{
                if (blnHayCam){
                    if (objTooBar.getEstado()=='n' || objTooBar.getEstado()=='m'){
                        if (!isRegPro())
                            return false;
                    }
                }
                if (rstCab!=null){
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            limpiarFrm();
            blnHayCam=false;
            return blnRes;
        }

        public boolean beforeInsertar() {
            if (!isCamVal())
                return false;
            return true;
        }

        public boolean beforeConsultar() {
            return true;
        }

        public boolean beforeModificar() {
            boolean blnRes=true;
            strAux=objTooBar.getEstadoRegistro();
            if (!isCamVal())
                return false;
            if (strAux.equals("Eliminado")){
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible modificar un documento eliminado.");
                blnRes=false;
            }
//            strAux=objTooBar.getEstadoRegistro();
//            if (strAux.equals("Anulado")){
//                mostrarMsgInf("El documento está ANULADO.\nNo es posible modificar un documento anulados.");
//                blnRes=false;
//            }
            return blnRes;
        }

        public boolean beforeEliminar() {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado")){
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible eliminar un documento eliminado.");
                return false;
            }
            return true;
        }

        public boolean beforeAnular() {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado")){
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible anular un documento eliminado.");
                return false;
            }
            if (strAux.equals("Anulado")){
                mostrarMsgInf("El documento ya está ANULADO.\nNo es posible anular un documento anulado.");
                return false;
            }
            return true;
        }

        public boolean beforeImprimir() {
            return true;
        }

        public boolean beforeVistaPreliminar() {
            return true;
        }

        public boolean beforeAceptar() {
            return true;
        }

        public boolean beforeCancelar() {
            return true;
        }

        public boolean afterInsertar() {
            this.setEstado('w');
            blnHayCam=false;
            objTooBar.setEstado('w');
            consultarReg();
            blnHayCam=false;
            return true;
        }

        public boolean afterConsultar() {
            return true;
        }

        public boolean afterModificar() {
            blnHayCam=false;
            objTooBar.setEstado('w');
            cargarReg();
            objTooBar.afterConsultar();
            return true;
        }

        public boolean afterEliminar() {
            return true;
        }

        public boolean afterAnular() {
            cargarReg();
            return true;
        }

        public boolean afterImprimir() {
            return true;
        }

        public boolean afterVistaPreliminar() {
            return true;
        }

        public boolean afterAceptar() {
            return true;
        }

        public boolean afterCancelar() {
            return true;
        }

        

        
    }



    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje de advertencia al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos se han cargado
     * con errores y que debe revisar dichos datos.
     */
    private void mostrarMsgAdv(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        if (strMsg.equals(""))
            strMsg="<HTML>Este registro tiene <FONT COLOR=\"red\">problemas</FONT>. <BR>Notifíquelo a su administrador del sistema.</HTML>";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.WARNING_MESSAGE);
    }
    

    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private boolean isRegPro()
    {
        boolean blnRes=true;
        strAux="¿Desea guardar los cambios efectuados a éste registro?\n";
        strAux+="Si no guarda los cambios perderá toda la información que no haya guardado.";
        switch (mostrarMsgCon(strAux))
        {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado())
                {
                    case 'n': //Insertar
                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite limpiar el formulario.
     * @return true: Si se pudo limpiar la ventana sin ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean limpiarFrm(){
        boolean blnRes=true;
        try{
            txtCodRpt.setText("");
            txtDesLarRpt.setText("");
            txtNomRpt.setText("");
            txtDesCorRpt.setText("");
            txtRutAbsRpt.setText("");
            txtRutRelRpt.setText("");
            cboEstReg.setSelectedIndex(0);
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
    

    /**
     * Esta función inserta el registro en la base de datos.
     * @return true: Si se pudo insertar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (insertarPro()){
                    con.commit();
                    blnRes=true;           
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite insertar la cabecera de un registro.
     * @return true: Si se pudo insertar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarPro(){
        int intUltReg;
        int temp=0;
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;

                //Obtener el código del último registro.
                strSQL="";
                strSQL+="SELECT MAX(a1.co_rpt)";
                strSQL+=" FROM tbm_rptSis AS a1";
                intUltReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intUltReg==-1)
                    return false;
                intUltReg++;
                txtCodRpt.setText("" + intUltReg);

                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="INSERT INTO tbm_rptSis (co_rpt, tx_descor, tx_deslar, tx_rutAbsRpt, tx_rutRelRpt, tx_nomRpt, st_reg, ";
                strSQL+="fe_ing,co_usring)";
                strSQL+=" VALUES (";                
                strSQL+="" + txtCodRpt.getText(); //co_pro
                strSQL+=", " + objUti.codificar(txtDesCorRpt.getText()) + ""; //tx_descor
                strSQL+=", " + objUti.codificar(txtDesLarRpt.getText()) + ""; //tx_descor
                strSQL+=", '//172.16.1.2/Zafiro'"; //RUTA ABSOLUTA
                strSQL+=", " + objUti.codificar(txtRutRelRpt.getText()) + ""; //tx_descor
                
                strAux=txtNomRpt.getText();
                strAux=strAux.toLowerCase();
                if(strAux.endsWith(".jasper")){
                     strSQL+=", " + objUti.codificar(txtNomRpt.getText() + "");
                }
                else{
                    strSQL+=", " + objUti.codificar(txtNomRpt.getText()+ ".jasper") + ""; //tx_deslar
                }
                if(cboEstReg.getSelectedIndex()==0)
                    strSQL+=", 'A'";//st_reg
                else
                    strSQL+=", 'I'";//st_reg
                strAux=objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos());
                strSQL+=", '" + strAux + "'"; //fe_ing
                strSQL+="," + objParSis.getCodigoUsuario() + "";//co_usring
                strSQL+=");";
                System.out.println("INSERT: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función actualiza el registro en la base de datos.
     * @return true: Si se pudo actualizar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (actualizarPro()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite actualizar la cabecera de un registro.
     * @return true: Si se pudo actualizar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarPro(){
        boolean blnRes=true;
        try{
            if (con!=null){
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;

                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_rptSis";
                strSQL+=" SET tx_desCor=" + objUti.codificar(txtDesCorRpt.getText()) + "";
                strSQL+=", tx_desLar=" + objUti.codificar(txtDesLarRpt.getText()) + "";
                strSQL+=", tx_rutRelRpt=" + objUti.codificar(txtRutRelRpt.getText()) + "";
                strAux=txtNomRpt.getText();
                strAux=strAux.toLowerCase();
                if(strAux.endsWith(".jasper")){
                     strSQL+=", tx_nomRpt=" + objUti.codificar(txtNomRpt.getText() + "");
                }
                else{
                    strSQL+=", tx_nomRpt=" + objUti.codificar(txtNomRpt.getText()+ ".jasper") + ""; //tx_deslar
                }
                if(cboEstReg.getSelectedIndex()==0)
                    strSQL+=", st_reg='A'";//st_reg
                else
                    strSQL+=", st_reg='I'";//st_reg                
                
                strAux=objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos());
                strSQL+=", fe_ultmod='" + strAux + "'";
                strSQL+=", co_usrmod=" + objParSis.getCodigoUsuario() + "";
                strSQL+=" WHERE co_rpt=" + rstCab.getString("co_rpt") + "";
                strSQL+=";";
                System.out.println("UPDATE: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean consultarReg(){
        boolean blnRes=true;
        try{
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null){
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                //Validar que sólo se muestre los documentos asignados al programa.
                strSQL="";
                strSQL+="SELECT a1.co_rpt";
                strSQL+=" FROM tbm_rptSis AS a1";
                strSQL+=" WHERE a1.st_reg NOT IN('E')";
                if(txtCodRpt.getText().length()>0)
                strSQL+=" AND a1.co_rpt=" +  txtCodRpt.getText();
                strSQL+=" ORDER BY a1.co_rpt";
                //System.out.println("consultarReg: " + strSQL);
                rstCab=stmCab.executeQuery(strSQL);
                if (rstCab.next()){
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                }
                else
                {
                    mostrarMsgInf("No se ha encontrado ningún registro que cumpla el criterio de búsqueda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    

    /**
     * Esta función permite cargar el registro seleccionado.
     * @return true: Si se pudo cargar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            if (cargarCabReg()){
               
            }
            blnHayCam=false;
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
    
    /**
     * Esta función permite cargar la cabecera del registro seleccionado.
     * @return true: Si se pudo cargar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarCabReg(){
        int intPosRel;
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+=" SELECT a1.co_rpt, a1.tx_desCor AS tx_desCorRpt, a1.tx_desLar AS tx_desLarRpt,";
                strSQL+=" a1.tx_rutAbsRpt, a1.tx_rutRelRpt, a1.tx_nomRpt,a1.st_reg";
                strSQL+=" FROM tbm_rptSis AS a1 ";
                strSQL+=" WHERE a1.co_rpt=" + rstCab.getString("co_rpt");
                strSQL+=" AND a1.st_reg NOT IN('E')";
                System.out.println("ZafMae28:" + strSQL);
                rst=stm.executeQuery(strSQL);
                if (rst.next()){
                    strAux=rst.getString("co_rpt");
                    txtCodRpt.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_desCorRpt");
                    txtDesCorRpt.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_desLarRpt");
                    txtDesLarRpt.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_rutAbsRpt");
                    txtRutAbsRpt.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_rutRelRpt");
                    txtRutRelRpt.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_nomRpt");
                    txtNomRpt.setText((strAux==null)?"":strAux);
                    //Mostrar el estado del registro.
                    strAux=rst.getString("st_reg");
                    objTooBar.setEstadoRegistro(getEstReg(strAux));
                    if(strAux.equals("A"))
                        cboEstReg.setSelectedIndex(0);
                    else
                        cboEstReg.setSelectedIndex(1);

                }
                else{
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                    blnRes=false;
                }
            }
            rst.close();
            stm.close();
            con.close();
            rst=null;
            stm=null;
            con=null;
            //Mostrar la posición relativa del registro.
            intPosRel=rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    /**
     * Esta función obtiene la descripción larga del estado del registro.
     * @param estado El estado del registro. Por ejemplo: A, I, etc.
     * @return La descripción larga del estado del registro.
     * <BR>Nota.- Si la cadena recibida es <I>null</I> la función devuelve una cadena vacía.
     */
    private String getEstReg(String estado)
    {
        if (estado==null)
            estado="";
        else
            switch (estado.charAt(0))
            {
                case 'A':
                    estado="Activo";
                    break;
                case 'I':
                    estado="Anulado";
                    break;
                case 'P':
                    estado="Pendiente de autorizar";
                    break;
                case 'D':
                    estado="Autorización denegada";
                    break;
                case 'R':
                    estado="Pendiente de impresión";
                    break;
                case 'C':
                    estado="Pendiente confirmación de inventario";
                    break;
                case 'F':
                    estado="Existen diferencias de inventario";
                    break;
                default:
                    estado="Desconocido";
                    break;
            }
        return estado;
    }
    

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }

    /**
     * Esta función determina si los campos son válidos.
     * @return true: Si los campos son válidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal(){
            
        if (txtDesCorRpt.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\"> Descripción corta</FONT> es obligatorio.<BR>Escriba una descripción corta y vuelva a intentarlo.</HTML>");
            txtDesLarRpt.requestFocus();
            return false;
        }        
        
        
        if (txtRutRelRpt.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\"> Ruta relativa</FONT> es obligatorio.<BR>Escriba una ruta relativa y vuelva a intentarlo.</HTML>");
            txtDesLarRpt.requestFocus();
            return false;
        } 
        if (txtNomRpt.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\"> Nombre del Reporte</FONT> es obligatorio.<BR>Escriba un nombre y vuelva a intentarlo.</HTML>");
            txtNomRpt.requestFocus();
            return false;
        }
       
        return true;
    }
    

    /**
     * Esta función anula el registro de la base de datos.
     * @return true: Si se pudo anular el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean anularReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (anularGrp()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    

    /**
     * Esta función permite anular la cabecera de un registro.
     * @return true: Si se pudo anular la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean anularGrp(){
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_rptSis";
                strSQL+=" SET st_reg='I'";
                strSQL+=" WHERE co_rpt=" + rstCab.getString("co_rpt");
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función elimina el registro de la base de datos.
     * @return true: Si se pudo eliminar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (eliminarGrp()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite eliminar la cabecera de un registro.
     * @return true: Si se pudo eliminar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminarGrp(){
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_rptSis";
                strSQL+=" SET st_reg='E'";
                strSQL+=" WHERE co_rpt=" + rstCab.getString("co_rpt");
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
 
    private boolean mostrarReportes(int intTipBus){
        boolean blnRes=true;
        try{
          //  System.out.println("mostrarReportes....");
            switch (intTipBus){
                case 0: //Mostrar la ventana de consulta.
                    vcoPrg.setCampoBusqueda(1);
                    vcoPrg.show();
                    if (vcoPrg.getSelectedButton()==vcoPrg.INT_BUT_ACE){
                        txtCodRpt.setText(vcoPrg.getValueAt(1));
                        txtDesCorRpt.setText(vcoPrg.getValueAt(2));
                    }
                    break;
                case 1: //Búsqueda directa por "Código".
                    if (vcoPrg.buscar("a1.co_rpt", txtCodRpt.getText())){
                        txtCodRpt.setText(vcoPrg.getValueAt(1));
                        txtDesCorRpt.setText(vcoPrg.getValueAt(2));
                    }
                    else{
                        vcoPrg.setCampoBusqueda(0);
                        vcoPrg.setCriterio1(11);
                        vcoPrg.cargarDatos();
                        vcoPrg.show();
                        if (vcoPrg.getSelectedButton()==vcoPrg.INT_BUT_ACE)
                        {
                            txtCodRpt.setText(vcoPrg.getValueAt(1));
                            txtDesCorRpt.setText(vcoPrg.getValueAt(2));
                        }
                        else
                        {
                            txtCodRpt.setText(strTipPrg);
                        }
                    }
                    
                    break;
                case 2: //Búsqueda directa por "Nombre".
                    if (vcoPrg.buscar("a1.tx_desCor", txtDesCorRpt.getText())){
                        txtCodRpt.setText(vcoPrg.getValueAt(1));
                        txtDesCorRpt.setText(vcoPrg.getValueAt(2));
                    }
                    else{
                        vcoPrg.setCampoBusqueda(1);
                        vcoPrg.setCriterio1(11);
                        vcoPrg.cargarDatos();
                        vcoPrg.show();
                        if (vcoPrg.getSelectedButton()==vcoPrg.INT_BUT_ACE)
                        {
                            txtCodRpt.setText(vcoPrg.getValueAt(1));
                            txtDesCorRpt.setText(vcoPrg.getValueAt(2));
                        }
                        else
                        {
                            txtDesCorRpt.setText(strNomPrg);
                        }
                    }
                    break;
            }  
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean mostrarReportes2(int intTipBus){
        boolean blnRes=true;
        try{
          //  System.out.println("mostrarReportes....");
            switch (intTipBus){
                case 0: //Mostrar la ventana de consulta.
                    vcoPrg.setCampoBusqueda(1);
                    vcoPrg.show();
                    if (vcoPrg.getSelectedButton()==vcoPrg.INT_BUT_ACE){
                       // txtCodRpt.setText(vcoPrg.getValueAt(1));
                        txtDesCorRpt.setText(vcoPrg.getValueAt(2));
                    }
                    break;
            }        
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
      /*
     * llenar la consulta de marcas  
     */
    
    private boolean configurarReportes()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_rpt");
            arlCam.add("a1.tx_desCor");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("500");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+=" SELECT a1.co_rpt, a1.tx_desCor";
            strSQL+=" FROM tbm_rptSis a1 WHERE a1.st_reg ='A'";
            strSQL+=" ORDER BY a1.co_rpt";
            System.out.println("configurarReportes:.." + strSQL);
            vcoPrg=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de Reportes", strSQL, arlCam, arlAli, arlAncCol);        
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoPrg.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }      
}