/*
 * ZafMae59.java
 *
 * Created on 16 de enero de 2005, 17:10 PM
 */
package Maestros.ZafMae59;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafPerUsr.ZafPerUsr;
import Librerias.ZafSelFec.ZafSelFec;
import Librerias.ZafTblUti.ZafTblTot.ZafTblTot;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import java.util.ArrayList;
import java.sql.*;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafVenCon.ZafVenCon;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;

/**
 *
 * @author  Ingrid Lino
 */
public class ZafMae59 extends javax.swing.JInternalFrame 
{
    //Constantes: Columnas del JTable:
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_REG=1;
    final int INT_TBL_DAT_DES_COR=2;
    final int INT_TBL_DAT_DES_LAR=3;
    final int INT_TBL_DAT_CHK_ENT=4;
    final int INT_TBL_DAT_CHK_FRC=5;


    
    private ZafTblOrd objTblOrd;                        //JTable de ordenamiento.
    
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafColNumerada objColNum;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMen� en JTable.
    private ZafThreadGUI objThrGUI;
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
    
    
    private Vector vecDat, vecCab, vecReg, vecAux;
    private boolean blnCon;                     //true: Continua la ejecuci�n del hilo.
    private String strMsg="";
    private javax.swing.JOptionPane oppMsg;
    private ZafTblBus objTblBus;
   
    private ZafTblCelEdiChk objTblCelEdiChkEnt, objTblCelEdiChkFrc;
    private ZafTblCelRenChk objTblCelRenChkEnt, objTblCelRenChkFrc;

    private boolean blnBotCon, blnBotGua, blnBotCer;
    private ZafPerUsr objPerUsr;

    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafMae59(ZafParSis obj) 
    {
        initComponents();
        //Inicializar objetos.
        objParSis=obj;
        objUti=new ZafUtil();
        objPerUsr=new ZafPerUsr(objParSis);
        
        if (!configurarFrm())
            exitForm();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        chkUnidEnt = new javax.swing.JCheckBox();
        chkUnidFrc = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butGua = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panFil.setLayout(new java.awt.BorderLayout());

        jPanel2.setPreferredSize(new java.awt.Dimension(100, 40));
        jPanel2.setLayout(null);

        chkUnidEnt.setSelected(true);
        chkUnidEnt.setText("Unidades enteras");
        chkUnidEnt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUnidEntActionPerformed(evt);
            }
        });
        jPanel2.add(chkUnidEnt);
        chkUnidEnt.setBounds(10, 0, 270, 16);

        chkUnidFrc.setSelected(true);
        chkUnidFrc.setText("Unidades en fracción");
        chkUnidFrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUnidFrcActionPerformed(evt);
            }
        });
        jPanel2.add(chkUnidFrc);
        chkUnidFrc.setBounds(10, 16, 270, 16);

        panFil.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel1.setPreferredSize(new java.awt.Dimension(0, 140));
        jPanel1.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDat);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panFil.add(jPanel1, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Filtro", panFil);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butGua.setText("Guardar");
        butGua.setToolTipText("Guardar datos");
        butGua.setPreferredSize(new java.awt.Dimension(92, 25));
        butGua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGuaActionPerformed(evt);
            }
        });
        panBot.add(butGua);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    
                        
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acci�n de acuerdo a la etiqueta del bot�n ("Consultar" o "Detener").
        objTblMod.removeAllRows();
        lblMsgSis.setText("");
        if (butCon.getText().equals("Consultar")){
            blnCon=true;
            if (objThrGUI==null){
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }
        }
        else{
            blnCon=false;
        }

    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicaci�n. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void butGuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGuaActionPerformed
        // TODO add your handling code here:
        if(guardar()){
            mostrarMsgInf("<HTML>La información se guardó correctamente.</HTML>");
        }
        else{
            mostrarMsgInf("<HTML>La información no se pudo guardar.</HTML>");
        }

    }//GEN-LAST:event_butGuaActionPerformed

    private void chkUnidEntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUnidEntActionPerformed
        // TODO add your handling code here:
        objTblMod.removeAllRows();
        if( ! chkUnidEnt.isSelected())
            chkUnidFrc.setSelected(true);
    }//GEN-LAST:event_chkUnidEntActionPerformed

    private void chkUnidFrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUnidFrcActionPerformed
        // TODO add your handling code here:
        objTblMod.removeAllRows();
        if( ! chkUnidFrc.isSelected())
            chkUnidEnt.setSelected(true);
    }//GEN-LAST:event_chkUnidFrcActionPerformed



    /** Cerrar la aplicaci�n. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butGua;
    private javax.swing.JCheckBox chkUnidEnt;
    private javax.swing.JCheckBox chkUnidFrc;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            blnBotCon=false;
            blnBotGua=false;
            blnBotCer=false;


            if(objPerUsr.isOpcionEnabled(2556)){
                blnBotCon=true;
            }
            if(objPerUsr.isOpcionEnabled(2557)){
                blnBotGua=true;
            }
            if(objPerUsr.isOpcionEnabled(2558)){
                blnBotCer=true;
            }

            strAux=objParSis.getNombreMenu() + "v0.1";
            this.setTitle(strAux);
            lblTit.setText(strAux);
                        
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(6);    //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_REG,"Código");
            vecCab.add(INT_TBL_DAT_DES_COR,"Des.Cor.");
            vecCab.add(INT_TBL_DAT_DES_LAR,"Des.Lar.");
            vecCab.add(INT_TBL_DAT_CHK_ENT,"Entera");
            vecCab.add(INT_TBL_DAT_CHK_FRC,"Fracción");

            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);            

            //Configurar JTable: Establecer tipo de selecci�n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el men� de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Tama�o de las celdas
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_LIN).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DES_COR).setPreferredWidth(54);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DES_LAR).setPreferredWidth(200);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_ENT).setPreferredWidth(54);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_FRC).setPreferredWidth(54);
                                         
            tblDat.getTableHeader().setReorderingAllowed(false);

            objTblBus=new ZafTblBus(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);
            
            
            //Configurar JTable: Renderizar celdas.
            objTblCelRenChkEnt=new ZafTblCelRenChk();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_ENT).setCellRenderer(objTblCelRenChkEnt);
            objTblCelRenChkEnt=null;

            //Configurar JTable: Editor de celdas.
            objTblCelEdiChkEnt=new ZafTblCelEdiChk(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_ENT).setCellEditor(objTblCelEdiChkEnt);
            objTblCelEdiChkEnt.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intEnt=-1;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ENT))
                        intEnt=1;//esta seleccionado
                    else
                        intEnt=0;//no esta seleccionado
                }
                
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    System.out.println("intEnt: " + intEnt);
                    if(intEnt==1){
                        if( ! objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ENT)){
                            System.out.println("1");
                            objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_FRC);
                        }
                    }
                    else if(intEnt==0){
                        objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_FRC);
                    }
                }
            });



            //Configurar JTable: Renderizar celdas.
            objTblCelRenChkFrc=new ZafTblCelRenChk();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_FRC).setCellRenderer(objTblCelRenChkFrc);
            objTblCelRenChkFrc=null;

            //Configurar JTable: Editor de celdas.
            objTblCelEdiChkFrc=new ZafTblCelEdiChk(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_FRC).setCellEditor(objTblCelEdiChkFrc);
            objTblCelEdiChkFrc.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFrc=-1;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_FRC))
                        intFrc=1;//esta seleccionado
                    else
                        intFrc=0;//no esta seleccionado
                }

                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(intFrc==1){
                        if( ! objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_FRC)){
                            objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ENT);
                        }
                    }
                    else if(intFrc==0){
                        objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_ENT);
                    }
                }
            });




            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_CHK_ENT);
            vecAux.add("" + INT_TBL_DAT_CHK_FRC);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;

            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);

            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();

        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci�n muestra un mensaje informativo al usuario. Se podr�a utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta clase crea un hilo que permite manipular la interface gr�fica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que est� ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podr�a presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estar�a informado en todo
     * momento de lo que ocurre. Si se desea hacer �sto es necesario utilizar �sta clase
     * ya que si no s�lo se apreciar�a los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable s�lo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(0);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }
    
    /**
     * Esta función permite establecer la conexión para consultas DML
     * @return true: Si se pudo establecer conexión y cargar datos.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg(){
        int i;
        boolean blnRes=true;
        strAux="";
        try{
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
           
            if (con!=null){
                stm=con.createStatement();

                if( (chkUnidEnt.isSelected()) && (chkUnidFrc.isSelected()) )
                    strAux=" AND tx_tipUniMed IN ('E','F')";

                else if(chkUnidEnt.isSelected())
                    strAux=" AND tx_tipUniMed='E'";
                else if(chkUnidFrc.isSelected())
                    strAux=" AND tx_tipUniMed='F'";
                           
                
                //PARA FACTURAS Y NOTAS DE CREDITO
                strSQL="";
                strSQL+="SELECT co_reg, tx_desCor, tx_desLar, tx_tipUniMed";
                strSQL+=" FROM tbm_var ";
                strSQL+=" WHERE co_grp=5 AND st_reg NOT IN('I','E') ";
                strSQL+="" + strAux;
                strSQL+=" ORDER BY co_reg";
                System.out.println("SQL cargarDetReg: " + strSQL);
                rst=stm.executeQuery(strSQL);

                vecDat.clear();
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                //pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;                

                lblMsgSis.setText("Listo");
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_COD_REG, "" + rst.getObject("co_reg")==null?"":rst.getString("co_reg"));
                        vecReg.add(INT_TBL_DAT_DES_COR, "" + rst.getObject("tx_desCor")==null?"":rst.getString("tx_desCor"));
                        vecReg.add(INT_TBL_DAT_DES_LAR, "" + rst.getObject("tx_desLar")==null?"":rst.getString("tx_desLar"));
                        vecReg.add(INT_TBL_DAT_CHK_ENT, null);
                        vecReg.add(INT_TBL_DAT_CHK_FRC, null);

                        strAux=rst.getObject("tx_tipUniMed")==null?"":rst.getString("tx_tipUniMed");
                        if(strAux.equals("F")){
                            vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK_FRC);
                        }
                        if(strAux.equals("E")){
                            vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK_ENT);
                        }


                        vecDat.add(vecReg);                                                                                                
                        i++;
                        pgrSis.setValue(i);                        
                        lblMsgSis.setText("Se encontraron " + rst.getRow() + " registros.");                        
                    }
                    else{
                        lblMsgSis.setText("Se encontraron " + rst.getRow() + " registros.");
                        break;
                    }                    
                }
                rst.close();
                stm.close();
                rst=null;
                stm=null;

                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);                
                pgrSis.setValue(0);
                butCon.setText("Consultar");
                objTblMod.initRowsState();

            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite establecer la conexión
     * @return true: Si se pudo establecer conexión y cargar datos.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                if(cargarDetReg()){

                }
                con.close();
                con=null;
            }            
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }

    /**
     * Esta función establece la conexión y contiene las funciones que insertan y modifican campos de auditoria.
     * @return true: Si se pudo modificar.
     * <BR>false: En el caso contrario.
     */
    private boolean guardar(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                con.setAutoCommit(false);
                if(guardarDatos()){
                    con.commit();
                }
                else{
                    con.rollback();
                    blnRes=false;
                }
                con.close();
                con=null;
            }
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }

    /**
     * Esta función permite actualizar en tbm_cabDia los campos para consignación bancaria.
     * @return true: Si se pudo modificar.
     * <BR>false: En el caso contrario.
     */
    private boolean guardarDatos(){
        boolean blnRes=true;
        String strLin="";
        String strUpd="";
        try{
            if(con!=null){
                stm=con.createStatement();
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    strLin=objTblMod.getValueAt(i, INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_LIN).toString();
                    if(strLin.equals("M")){
                        strSQL="";
                        strSQL+="UPDATE tbm_var";
                        if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_ENT))
                            strSQL+=" SET tx_tipUniMed='E'";
                        if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_FRC))
                            strSQL+=" SET tx_tipUniMed='F'";
                        strSQL+=" WHERE co_grp=5";
                        strSQL+=" AND co_reg=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_REG) + "";
                        strSQL+=";";
                        strUpd+=strSQL;
                    }
                }
                System.out.println("strUpd: " + strUpd);
                stm.executeUpdate(strUpd);
                stm.close();
                stm=null;
                cargarDetReg();
            }

        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }


    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren m�s espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD_REG:
                    strMsg="Codigo de la unidad de medida";
                    break;
                case INT_TBL_DAT_DES_COR:
                    strMsg="Descripción corta de la unidad de medida";
                    break;
                case INT_TBL_DAT_DES_LAR:
                    strMsg="Descripción larga de la unidad de medida";
                    break;
                case INT_TBL_DAT_CHK_ENT:
                    strMsg="Unidad entera";
                    break;
                case INT_TBL_DAT_CHK_FRC:
                    strMsg="Unidad en fracción";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }


    
}