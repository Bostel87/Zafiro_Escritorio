/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Maestros.ZafMae74;

import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt;
import Librerias.ZafTblUti.ZafTblCelEdiTxtVco.ZafTblCelEdiTxtVco;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafUtil.ZafUtil;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.sql.DriverManager;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Sistemas6
 */
public class ZafMae74_01 extends javax.swing.JDialog {
    private java.awt.Frame Frame;
    private String strSql;
    private int intCodCla, intCodItm;
    private ZafUtil objUti;
    private ZafParSis objParSis;
    private ZafTblMod objTblMod;
    
    private boolean blnAcepta=false;
    private String strTitu="Grupos de Inventario";
    private String strVersion=" v0.02";
    
    final int INT_TBL_LINEA =0; 
    final int INT_TBL_CODGRU=1;      //CODIGO DEL ITEM 
    final int INT_TBL_DESCOR=2;      //CODIGO DE LA EMPRESA
    final int INT_TBL_DESLAR=3;      //CODIGO DE LA BODEGA
    final int INT_TBL_ESTADO=4;      //NOMBRE DE LA EMPRESA
    
    
    /**
     * Creates new form ZafMaeAA_01
     */
    public ZafMae74_01(java.awt.Frame parent, ZafParSis ZafParSis, boolean modal, int CodCla, int CodItm) {
        super(parent, modal);
        Frame=parent;
        this.objParSis = ZafParSis;
        objUti = new ZafUtil();
        intCodCla=CodCla;
        intCodItm=CodItm;
        initComponents();
        this.setTitle( strTitu );
        lblTit.setText( strTitu + strVersion);  // JoséMario 
        configurarFrm();       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panTit = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        panFrm = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBut = new javax.swing.JPanel();
        panSubBot = new javax.swing.JPanel();
        butAce = new javax.swing.JButton();
        butCan = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        panPrgSis = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panTit.setPreferredSize(new java.awt.Dimension(528, 48));

        lblTit.setText("titulo");

        javax.swing.GroupLayout panTitLayout = new javax.swing.GroupLayout(panTit);
        panTit.setLayout(panTitLayout);
        panTitLayout.setHorizontalGroup(
            panTitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 546, Short.MAX_VALUE)
            .addGroup(panTitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panTitLayout.createSequentialGroup()
                    .addGap(0, 123, Short.MAX_VALUE)
                    .addComponent(lblTit, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 123, Short.MAX_VALUE)))
        );
        panTitLayout.setVerticalGroup(
            panTitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
            .addGroup(panTitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panTitLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(lblTit)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        getContentPane().add(panTit, java.awt.BorderLayout.NORTH);

        panFrm.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblDat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDatMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDat);

        panFrm.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        panBut.setPreferredSize(new java.awt.Dimension(0, 52));
        panBut.setLayout(new java.awt.BorderLayout());

        panSubBot.setPreferredSize(new java.awt.Dimension(100, 35));
        panSubBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butAce.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        butAce.setText("Aceptar");
        butAce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAceActionPerformed(evt);
            }
        });
        panSubBot.add(butAce);

        butCan.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        butCan.setText("Cancelar");
        butCan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCanActionPerformed(evt);
            }
        });
        panSubBot.add(butCan);

        panBut.add(panSubBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        panPrgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panPrgSis.setMinimumSize(new java.awt.Dimension(24, 26));
        panPrgSis.setPreferredSize(new java.awt.Dimension(200, 15));
        panPrgSis.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        panPrgSis.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(panPrgSis, java.awt.BorderLayout.EAST);

        panBut.add(panBarEst, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panBut, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butAceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAceActionPerformed

        try{
            blnAcepta = false;
            if(procesoGrupos()){
                blnAcepta=true;
            }else{
                MensajeInf("Error al momento de guardar...");
            }

            //dispose();
            this.setVisible(false);
        }
        catch(Exception Evt){
            objUti.mostrarMsgErr_F1(null, Evt);
            blnAcepta = false;
        }
    }//GEN-LAST:event_butAceActionPerformed

    private void butCanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCanActionPerformed
        // TODO add your handling code here:
        cerrarVen();
    }//GEN-LAST:event_butCanActionPerformed

    private void tblDatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDatMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount()==2)
        {
            butAce.doClick();
        }
    }//GEN-LAST:event_tblDatMouseClicked

     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butAce;
    private javax.swing.JButton butCan;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBut;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panPrgSis;
    private javax.swing.JPanel panSubBot;
    private javax.swing.JPanel panTit;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables


    private void cerrarVen(){
        String strMsg = "¿Está Seguro que desea cerrar este programa?";
        //JOptionPane oppMsg=new JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        if(JOptionPane.showConfirmDialog(this,strMsg,strTit,JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) == 0 ) {
            System.gc();
            blnAcepta=false;
            dispose();
        }
    }



    private void MensajeInf(String strMensaje){
        String strTit="Mensaje del sistema Zafiro";
        JOptionPane.showMessageDialog(this,strMensaje,strTit,JOptionPane.INFORMATION_MESSAGE);
    }

    private void configurarFrm(){
        try{
            if(configuraTbl()){
                if(cargarDat()){
                    System.out.println("OK CARGA ZafMaeAA_01");
                }
            }      
            
        }
        catch(Exception Evt){
            objUti.mostrarMsgErr_F1(null, Evt);
            blnAcepta = false;
        }
    } 
    
    public boolean acepta(){
      return blnAcepta;
    }
    
    Vector vecCab=new Vector(); 
    
    private ZafTblPopMnu objTblPopMnu;
    private ZafTblCelEdiTxt objTblCelEdiTxt;
    private ZafTblEdi objTblEdi;                                //Editor: Editor del JTable.
  
    private boolean configuraTbl(){
       boolean blnRes=false;
       try{
            
            //Configurar JTable: Establecer el modelo.
            vecCab.clear();
            vecCab.add(INT_TBL_LINEA,"..");
            vecCab.add(INT_TBL_CODGRU,"Cód.Gru");
            vecCab.add(INT_TBL_DESCOR,"Des.Cor.");
            vecCab.add(INT_TBL_DESLAR,"Des.Lar.");
            vecCab.add(INT_TBL_ESTADO,"Estado");
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  // PILAS JOTA
            ZafColNumerada zafColNumerada = new ZafColNumerada(tblDat,INT_TBL_LINEA);


            ZafMae74_01.ZafMouMotAda objMouMotAda=new ZafMae74_01.ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);


	    //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            TableColumnModel tcmAux=tblDat.getColumnModel();
	    
	    //Tamaño de las celdas
            tcmAux.getColumn(INT_TBL_LINEA).setPreferredWidth(25);
            tcmAux.getColumn(INT_TBL_CODGRU).setPreferredWidth(30);
            
            tcmAux.getColumn(INT_TBL_DESCOR).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_DESLAR).setPreferredWidth(200);
            tcmAux.getColumn(INT_TBL_ESTADO).setPreferredWidth(30);
             
            /* Aqui se agrega las columnas que van 
                ha hacer ocultas
             * */
            ArrayList arlColHid=new ArrayList();
            arlColHid.add(""+INT_TBL_CODGRU);
            arlColHid.add(""+INT_TBL_ESTADO);
            objTblMod.setSystemHiddenColumns(arlColHid, tblDat);
            arlColHid=null;
            //Configurar JTable: Establecer columnas editables.
            Vector vecAux=new Vector();
            vecAux.add("" + INT_TBL_DESCOR);
            vecAux.add("" + INT_TBL_DESLAR);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
 
            //Configurar JTable: Editor de la tabla.
            objTblEdi=new ZafTblEdi(tblDat);
            
            objTblCelEdiTxt=new ZafTblCelEdiTxt(tblDat);
            tcmAux.getColumn(INT_TBL_DESCOR).setCellEditor(objTblCelEdiTxt);
            tcmAux.getColumn(INT_TBL_DESLAR).setCellEditor(objTblCelEdiTxt);
            objTblCelEdiTxt.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                String strAntes="";
                int intFilSel ;
                int intColSel ;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFilSel = tblDat.getSelectedRow();
                    intColSel = tblDat.getSelectedColumn();
                    if(objTblMod.getValueAt(intFilSel,intColSel)!=null){
                        if(objTblMod.getValueAt(intFilSel,intColSel).toString().length()>0){
                            strAntes=objTblMod.getValueAt(intFilSel,intColSel).toString();
                        }
                    }
                }
                
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                   
                    if(INT_TBL_DESCOR==intColSel){
                        if(objTblMod.getValueAt(intFilSel,intColSel)!=null){
                            if(objTblMod.getValueAt(intFilSel,intColSel).toString().length()>10){
                                MensajeInf("La descripcion corta solo puede tener 10 caracteres...");
                                objTblMod.setValueAt(strAntes, intFilSel, intColSel); 
                            }
                            else{
                                objTblEdi.seleccionarCelda(intFilSel,INT_TBL_DESLAR);
                            }
                            
                            
                        }
                    }
                    else if(INT_TBL_DESLAR==intColSel){
                        if(objTblMod.getValueAt(intFilSel,intColSel)!=null){
                            objTblEdi.seleccionarCelda(intFilSel,INT_TBL_DESLAR); // Misma fila
                        }
                    }
                }
            });
            
            ZafTblEdi zafTblEdi = new ZafTblEdi(tblDat);
            tblDat.getTableHeader().setReorderingAllowed(false);
            
            ZafTblPopMnu zafTblPopMnu = new ZafTblPopMnu(tblDat);

           blnRes=true;
	 }
        catch(Exception e) {  
            blnRes=false;   
            objUti.mostrarMsgErr_F1(this,e);  
        }
        return blnRes;
    }
    
//    
//    
//    /**
//     * Esta clase implementa la interface "ListSelectionListener" para determinar
//     * cambios en la selección. Es decir, cada vez que se selecciona una fila
//     * diferente en el JTable se ejecutará el "ListSelectionListener".
//     */
//    private class ZafLisSelLis implements javax.swing.event.ListSelectionListener
//    {
//        public void valueChanged(javax.swing.event.ListSelectionEvent e)
//        {
//            javax.swing.ListSelectionModel lsm=(javax.swing.ListSelectionModel)e.getSource();
//            int intMax=lsm.getMaxSelectionIndex();
//            String strAux;
//            if (!lsm.isSelectionEmpty())
//            {
//                butAce.doClick();
//            }
//        }
//    }
    
    private Vector vecDat, vecReg;
    
    
    private boolean cargarDat(){
        boolean blnRes=false;
        java.sql.Connection conLoc;
        java.sql.Statement stmLoc;
        java.sql.ResultSet rstLoc;
        try{    
            vecDat = new Vector();
            conLoc=DriverManager.getConnection(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos());
            if(conLoc!=null){
                stmLoc = conLoc.createStatement();
                strSql="";
                strSql+=" SELECT a1.co_emp, a1.co_claModInv, a1.tx_desCor, a1.tx_desLar, a2.co_grp, a2.tx_desCor as tx_desCorGrupo, a2.tx_desLar as tx_desLarGrupo, a2.st_reg \n";
                strSql+=" FROM tbm_claModInv as a1  \n";
                strSql+=" INNER JOIN tbm_grpClaModInv as a2 ON (a1.co_emp=a2.co_emp AND a1.co_claModInv=a2.co_claModInv)  \n";
                strSql+=" WHERE a1.co_emp="+objParSis.getCodigoEmpresaGrupo()+"  and a1.co_claModInv="+intCodCla+"  \n";
                strSql+=" ORDER BY a1.co_emp, a1.co_claModInv, a2.co_grp ";  	 
                System.out.println("cargarDat " + strSql);
                rstLoc=stmLoc.executeQuery(strSql);
                while(rstLoc.next()){
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_LINEA,"");
                    vecReg.add(INT_TBL_CODGRU,rstLoc.getString("co_grp"));
                    vecReg.add(INT_TBL_DESCOR,rstLoc.getString("tx_desCorGrupo"));
                    vecReg.add(INT_TBL_DESLAR,rstLoc.getString("tx_desLarGrupo"));
                    vecReg.add(INT_TBL_ESTADO,rstLoc.getString("st_reg"));
                    vecDat.add(vecReg);
                }
                
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);         
                rstLoc.close();
                rstLoc=null;
                conLoc.close();
                conLoc=null;
                stmLoc.close();
                stmLoc=null;
              
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                pgrSis.setIndeterminate(false);    

                objTblMod.setModoOperacion(ZafTblMod.INT_TBL_INS);

                blnRes=true;
            }
        }
        catch(java.sql.SQLException Evt) {  
            blnRes=false; 
            objUti.mostrarMsgErr_F1(this, Evt);  
        }
        catch(Exception Evt) { 
            blnRes=false; 
            objUti.mostrarMsgErr_F1(this, Evt); 
        }
        return blnRes;          
    }   



    private class ZafMouMotAda extends MouseMotionAdapter
    {
         @Override
        public void mouseMoved(MouseEvent evt)
        {
        int intCol=tblDat.columnAtPoint(evt.getPoint());
        String strMsg="";
        switch (intCol)
        {
            case INT_TBL_LINEA:
                strMsg="";
            break;
            
            case INT_TBL_CODGRU:
                strMsg="Código del grupo";
            break;
             
            case INT_TBL_DESCOR:
                strMsg="Descripción corta del grupo";
            break;
            case INT_TBL_DESLAR:
                strMsg="Descripción larga del grupo";
            break;
            
            default:
                strMsg=" ";
            break;
            
        }
        tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }


    private boolean procesoGrupos(){
        boolean blnRes=false;
        try{
            
            if(isSeleccionado()){
                if(guardarGrupo()){
                    if(cargarSeleccion()){
                         blnRes=true;
                    }
                }
            }
            else{
                MensajeInf("No ha seleccionado ninguna fila...");
            }
        }
        catch(Exception Evt) { 
            blnRes=false; 
            objUti.mostrarMsgErr_F1(this, Evt); 
        }
        return blnRes;        
    }
    
    
    private boolean guardarGrupo(){
        boolean blnRes=true;
        try{
            for(int i=0; i<tblDat.getRowCount(); i++){
                if(!(objTblMod.getValueAt(i,INT_TBL_DESCOR)==null) && !(objTblMod.getValueAt(i,INT_TBL_DESLAR)==null)){
                    if (objUti.parseString(objTblMod.getValueAt(i,INT_TBL_LINEA)).equals("I")){  /* Insertando algo nuevo */
                        if(datosCompletos(i)){
                            if(insertaNuevoGrupo(i)){
                                 
                            }
                            else{
                                blnRes=false; 
                            }
                        }
                        else{
                            blnRes=false; 
                            MensajeInf("Revise los datos que desea ingresar...");
                        }

                    }
                    else if(objUti.parseString(objTblMod.getValueAt(i,INT_TBL_LINEA)).equals("M")){
                        if(datosCompletos(i)){
                            if(modificarGrupo(i)){
                                
                            }
                            else{
                                blnRes=false; 
                            }
                        }
                        else{
                            blnRes=false; 
                            MensajeInf("Revise los datos que desea ingresar...");
                        }
                    }
                }
            }
        }
        catch(Exception Evt) { 
            blnRes=false; 
            objUti.mostrarMsgErr_F1(this, Evt); 
        }
        return blnRes;  
    }
    
    private boolean modificarGrupo(int Row){
        boolean blnRes=false;
        java.sql.Connection conLoc;
        java.sql.ResultSet rstLoc;
        java.sql.Statement stmLoc;
        try{
            conLoc=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conLoc!=null){
                conLoc.setAutoCommit(false);
                stmLoc=conLoc.createStatement();
                 
                strSql="";
                strSql+=" SELECT a1.* ";
                strSql+=" FROM tbm_grpClaModInv as a1  \n";
                strSql+=" WHERE a1.co_emp="+objParSis.getCodigoEmpresaGrupo()+" AND a1.co_grp="+objTblMod.getValueAt(Row,INT_TBL_CODGRU)+" AND   \n ";
                strSql+="       a1.co_claModInv="+intCodCla;
                rstLoc = stmLoc.executeQuery(strSql);
                if(rstLoc.next()){
                    strSql="";
                    strSql+=" UPDATE tbm_grpClaModInv SET tx_desCor="+objUti.codificar(objTblMod.getValueAt(Row,INT_TBL_DESCOR), 0) +", ";
                    strSql+=" tx_desLar="+objUti.codificar(objTblMod.getValueAt(Row,INT_TBL_DESLAR),0)+",  ";
                    strSql+=" co_usrMod="+objParSis.getCodigoUsuario()+"," ;
                    strSql+=" fe_ultMod=CURRENT_TIMESTAMP ";
                    strSql+=" WHERE co_emp="+rstLoc.getInt("co_emp")+" AND co_grp="+objTblMod.getValueAt(Row,INT_TBL_CODGRU)+" AND co_claModInv="+intCodCla+" ;  ";
                    stmLoc.executeUpdate(strSql);
                }
                rstLoc.close();
                rstLoc=null;
                stmLoc.close();
                stmLoc=null;
               
                blnRes=true;
                if(blnRes){
                    conLoc.commit();
                }
                else{
                    conLoc.rollback();
                }
                conLoc.close();
                conLoc=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception Evt) { 
            blnRes=false; 
            objUti.mostrarMsgErr_F1(this, Evt); 
        }
        return blnRes;  
    }
    
    
    private boolean datosCompletos(int Row){
        boolean blnRes=true;
        try{
            if(!(objTblMod.getValueAt(Row,INT_TBL_DESCOR).toString().length()>0)){
                blnRes=false;
            }
            if(!(objTblMod.getValueAt(Row,INT_TBL_DESLAR).toString().length()>0)){
                blnRes=false;
            }
        }
        catch(Exception Evt) { 
            blnRes=false; 
            objUti.mostrarMsgErr_F1(this, Evt); 
        }
        return blnRes; 
    }
    
    
    private boolean cargarSeleccion(){
        boolean blnRes=true;
        try{
            for(int Row=0; Row<tblDat.getRowCount(); Row++){
                if(tblDat.isRowSelected(Row)){
                    strCodGrp = objTblMod.getValueAt(Row,INT_TBL_CODGRU).toString() ;
                    strNomGru = objTblMod.getValueAt(Row,INT_TBL_DESCOR).toString() ;
                    strNomLarGru = objTblMod.getValueAt(Row,INT_TBL_DESLAR).toString() ;
                }
            }
        }
        catch(Exception Evt) { 
            blnRes=false; 
            objUti.mostrarMsgErr_F1(this, Evt); 
        }
        return blnRes;  
    }
    
    
    /**
     * No se uso nunca :(
     * @param Row
     * @return 
     */
    
    private boolean asignaGrupo(int Row){
        boolean blnRes=false;
        java.sql.Connection conLoc;
        java.sql.ResultSet rstLoc;
        java.sql.Statement stmLoc;
        try{
            conLoc=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conLoc!=null){
                conLoc.setAutoCommit(false);
                stmLoc=conLoc.createStatement();
                strSql="";
                strSql+=" SELECT a1.* ";
                strSql+=" FROM tbr_grpClaModInv as a1 \n";
                strSql+=" INNER JOIN tbm_grpClaModInv as a2 ON (a1.co_emp=a2.co_emp AND a1.co_grp=a2.co_grp ) \n";
                strSql+=" WHERE a1.co_emp="+objParSis.getCodigoEmpresaGrupo()+" AND a1.co_itm="+intCodItm+" AND   \n ";
                strSql+="       a2.co_claModInv="+intCodCla;
                rstLoc = stmLoc.executeQuery(strSql);
                if(rstLoc.next()){
                    strSql="";
                    strSql+=" UPDATE tbr_grpClaModInv SET co_grp="+objTblMod.getValueAt(Row,INT_TBL_CODGRU)+", co_usrMod="+objParSis.getCodigoUsuario()+", ";
                    strSql+=" fe_ultMod=CURRENT_TIMESTAMP ";
                    strSql+=" WHERE co_emp="+rstLoc.getInt("co_emp")+" AND co_grp="+rstLoc.getInt("co_grp")+" AND co_itm="+rstLoc.getInt("co_itm")+";  ";
                    stmLoc.executeUpdate(strSql);
                }
                else{
                    strSql="";
                    strSql+=" INSERT INTO tbr_grpClaModInv (co_emp, co_grp, co_itm, st_reg, fe_ing, co_usrIng) ";
                    strSql+=" VALUES ( "+objParSis.getCodigoEmpresaGrupo()+", "+objTblMod.getValueAt(Row,INT_TBL_CODGRU)+", "+intCodItm+", 'A', CURRENT_TIMESTAMP, "+objParSis.getCodigoUsuario()+" ) ; ";
                    stmLoc.executeUpdate(strSql);
                }
                rstLoc.close();
                rstLoc=null;
                stmLoc.close();
                stmLoc=null;
                
                blnRes=true;
                if(blnRes){
                    conLoc.commit();
                }
                else{
                    conLoc.rollback();
                }
                conLoc.close();
                conLoc=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception Evt) { 
            blnRes=false; 
            objUti.mostrarMsgErr_F1(this, Evt); 
        }
        return blnRes;  
    }
    
    
    public String strCodGrp, strNomGru, strNomLarGru;
    
    private boolean insertaNuevoGrupo(int Row){
        boolean blnRes=false;
        java.sql.Connection conLoc;
        java.sql.ResultSet rstLoc;
        java.sql.Statement stmLoc;
        int CodMax=-1;
        try{
            conLoc=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conLoc!=null){
                conLoc.setAutoCommit(false);
                stmLoc=conLoc.createStatement();
                
                strSql="";
                strSql+=" SELECT CASE WHEN MAX(co_grp) IS NULL THEN 0 ELSE MAX(co_grp) END + 1 as MAX ";
                strSql+=" FROM tbm_grpClaModInv WHERE co_emp="+objParSis.getCodigoEmpresaGrupo()+"   ";
                System.out.println("insertaNuevoGrupo " + strSql);
                rstLoc = stmLoc.executeQuery(strSql);
                if(rstLoc.next()){
                    CodMax = rstLoc.getInt("MAX");
                }
                
                
                
                strSql="";
                strSql+=" INSERT INTO tbm_grpClaModInv (co_emp, co_grp, co_claModInv, co_grpPad, tx_desCor, tx_desLar, ne_niv, tx_obs1, st_reg, fe_ing, co_usrIng) ";
                strSql+=" VALUES ( "+objParSis.getCodigoEmpresaGrupo()+", "+CodMax+", "+intCodCla+", null, "+objUti.codificar(objTblMod.getValueAt(Row,INT_TBL_DESCOR).toString())+",  ";
                strSql+=" "+objUti.codificar(objTblMod.getValueAt(Row,INT_TBL_DESLAR).toString())+",1, null, 'A', CURRENT_TIMESTAMP, "+objParSis.getCodigoUsuario()+"  ); "  ;
                System.out.println("insertaNuevoGrupo "+strSql);
                stmLoc.executeUpdate(strSql);
                objTblMod.setValueAt(CodMax, Row, INT_TBL_CODGRU); 
                
//                strCodGrp = CodMax+"";
//                strNomGru = objTblMod.getValueAt(Row,INT_TBL_DESCOR).toString() ;
                 
                rstLoc.close();
                rstLoc=null;
                stmLoc.close();
                stmLoc=null;
               
                blnRes=true;
                if(blnRes){
                    conLoc.commit();
                }
                else{
                    conLoc.rollback();
                }
                conLoc.close();
                conLoc=null;
            }
            
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception Evt) { 
            blnRes=false; 
            objUti.mostrarMsgErr_F1(this, Evt); 
        }
        return blnRes;  
    }
    
    
    /**
     * Revisa si hay algo seleccionado
     * @return 
     */
    
    private boolean isSeleccionado(){
        boolean blnRes=false;
        try{
            for(int i=0; i<tblDat.getRowCount(); i++){
                if(tblDat.isRowSelected(i)){
                    if(objTblMod.getValueAt(i,INT_TBL_DESCOR)!=null){
                        blnRes=true;
                    }
                }
            }
        }
        catch(Exception Evt) { 
            blnRes=false; 
            objUti.mostrarMsgErr_F1(this, Evt); 
        }
        return blnRes;     
    }
    

}
