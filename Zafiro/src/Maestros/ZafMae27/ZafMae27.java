/*
 * ZafMae27.java
 *
 * Created on 27 de mayo de 2007, 07:41 PM
 * Tipos de documentos por cabecera de programa y usuario
 * Tipos de documentos por detalle de programa y usuario
 * 
 */
package Maestros.ZafMae27;

import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafVenCon.ZafVenCon;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;
import java.util.ArrayList;
import Librerias.ZafTblUti.ZafTblCelRenCbo.ZafTblCelRenCbo;
import Librerias.ZafTblUti.ZafTblCelEdiCbo.ZafTblCelEdiCbo;

/**
 *
 * @author  Eddye Lino
 */
public class ZafMae27 extends javax.swing.JInternalFrame {
    //Constantes: Columnas del JTable.

    final int INT_TBL_DAT_LIN = 0;                        //Línea
    final int INT_TBL_DAT_CHK = 1;                        //Casilla de verificación.
    final int INT_TBL_DAT_COD_TIP_DOC = 2;                //Código del Tipo de Documento.
    final int INT_TBL_DAT_DEC_TIP_DOC = 3;                //Descripción corta del Tipo de Documento.
    final int INT_TBL_DAT_DEL_TIP_DOC = 4;                //Descripción larga del Tipo de Documento.
    final int INT_TBL_DAT_CHK_PRE = 5;                    //Casilla de verificación:  Tipo de Documento predeterminado.
    final int INT_TBL_DAT_CMB_BOX_FEC = 6;
    final int INT_TBL_DAT_CMB_BOX_MOD = 7;
    //Variables generales.
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblFilCab objTblFilCab;
    private ZafTblMod objTblMod;
    private ZafTblEdi objTblEdi;                        //Editor: Editor del JTable.
    private ZafThreadGUI objThrGUI;
    private ZafTblCelRenLbl objTblCelRenLbl;            //Render: Presentar JLabel en JTable.
    private ZafTblCelRenChk objTblCelRenChk;            //Render: Presentar JCheckBox en JTable.
    private ZafTblCelEdiChk objTblCelEdiChk;            //Editor: JCheckBox en celda.
    private ZafTblCelEdiChk objTblCelEdiChkPre;         //Editor: JCheckBox en celda.
    private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMenú en JTable.
    private ZafVenCon vcoPrg;                           //Ventana de consulta "Programa".
    private ZafVenCon vcoUsr;                           //Ventana de consulta "Usuario".
    private MiToolBar objTooBar;                        //Barra de botones.
//    private ZafRptSis objRptSis;                        //Reportes del Sistema.
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private String strSQL, strAux, strSQLCon;
    private Vector vecDat, vecCab, vecReg;
    private Vector vecAux;
    private boolean blnCon;                             //true: Continua la ejecución del hilo.
    private boolean blnHayCam;                          //Determina si hay cambios en el formulario.
    private String strCodPrg, strNomPrg;                //Contenido del campo al obtener el foco.
    private String strDesCorUsr, strDesLarUsr;          //Contenido del campo al obtener el foco.
    private int intVarPre, intVar;
    private int clickbutcon = 0;
    private ZafTblOrd objTblOrd;
    private ZafTblCelRenCbo objTblCelRenCmbBoxFec, objTblCelRenCmbBoxMod;
    private ZafTblCelEdiCbo objTblCelEdiCmbBoxFec, objTblCelEdiCmbBoxMod;
    private boolean blnPre;

    /** Crea una nueva instancia de la clase ZafMae27. */
    public ZafMae27(ZafParSis obj) {
        try {
            initComponents();
            //Inicializar objetos.
            objParSis = (ZafParSis) obj.clone();
        } catch (CloneNotSupportedException e) {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGen = new javax.swing.JPanel();
        panGenCab = new javax.swing.JPanel();
        txtDesCorUsr = new javax.swing.JTextField();
        lblUsr = new javax.swing.JLabel();
        butUsr = new javax.swing.JButton();
        txtDesLarUsr = new javax.swing.JTextField();
        txtCodUsr = new javax.swing.JTextField();
        lblPrg = new javax.swing.JLabel();
        txtCodPrg = new javax.swing.JTextField();
        txtNomPrg = new javax.swing.JTextField();
        butPrg = new javax.swing.JButton();
        panGenDet = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panGen.setLayout(new java.awt.BorderLayout());

        panGenCab.setPreferredSize(new java.awt.Dimension(0, 44));
        panGenCab.setLayout(null);

        txtDesCorUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorUsrActionPerformed(evt);
            }
        });
        txtDesCorUsr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorUsrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorUsrFocusLost(evt);
            }
        });
        panGenCab.add(txtDesCorUsr);
        txtDesCorUsr.setBounds(100, 24, 56, 20);

        lblUsr.setText("Usuario:");
        lblUsr.setToolTipText("Usuario");
        panGenCab.add(lblUsr);
        lblUsr.setBounds(0, 24, 100, 20);

        butUsr.setText("...");
        butUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUsrActionPerformed(evt);
            }
        });
        panGenCab.add(butUsr);
        butUsr.setBounds(664, 24, 20, 20);

        txtDesLarUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarUsrActionPerformed(evt);
            }
        });
        txtDesLarUsr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarUsrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarUsrFocusLost(evt);
            }
        });
        panGenCab.add(txtDesLarUsr);
        txtDesLarUsr.setBounds(156, 24, 508, 20);
        panGenCab.add(txtCodUsr);
        txtCodUsr.setBounds(68, 24, 32, 20);

        lblPrg.setText("Programa:");
        lblPrg.setToolTipText("Programa");
        panGenCab.add(lblPrg);
        lblPrg.setBounds(0, 4, 100, 20);

        txtCodPrg.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtCodPrg.setToolTipText("Código del programa");
        txtCodPrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodPrgActionPerformed(evt);
            }
        });
        txtCodPrg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodPrgFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodPrgFocusLost(evt);
            }
        });
        panGenCab.add(txtCodPrg);
        txtCodPrg.setBounds(100, 4, 56, 20);

        txtNomPrg.setToolTipText("Nombre del programa");
        txtNomPrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomPrgActionPerformed(evt);
            }
        });
        txtNomPrg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomPrgFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomPrgFocusLost(evt);
            }
        });
        panGenCab.add(txtNomPrg);
        txtNomPrg.setBounds(156, 4, 508, 20);

        butPrg.setText("...");
        butPrg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrgActionPerformed(evt);
            }
        });
        panGenCab.add(butPrg);
        butPrg.setBounds(664, 4, 20, 20);

        panGen.add(panGenCab, java.awt.BorderLayout.NORTH);

        panGenDet.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDat.setViewportView(tblDat);

        panGenDet.add(spnDat, java.awt.BorderLayout.CENTER);

        panGen.add(panGenDet, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panGen);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());
        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void butPrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrgActionPerformed
        if (objTooBar.getEstado() == 'n') {
            strCodPrg = txtCodPrg.getText();
            mostrarVenConPrg(0);
            if (!txtCodPrg.getText().equals("")) {
                //Cargar los tipos de documentos sólo si ha cambiado el programa.
                if (!txtCodPrg.getText().equalsIgnoreCase(strCodPrg)) {
                    cargarDetReg();
                }
            }
        } else {
            strCodPrg = txtCodPrg.getText();
            mostrarVenConPrg(0);
            if (!txtCodPrg.getText().equals("")) {
            }
        }
    }//GEN-LAST:event_butPrgActionPerformed

    private void txtNomPrgFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPrgFocusLost

        if (objTooBar.getEstado() == 'n') {
            if (!txtNomPrg.getText().equalsIgnoreCase(strNomPrg)) {
                if (txtNomPrg.getText().equals("")) {
                    txtCodPrg.setText("");
                    txtNomPrg.setText("");
                } else {
                    mostrarVenConPrg(2);
                    cargarDetReg();
                }
            } else {
                txtNomPrg.setText(strNomPrg);
            }
        } else {
            if (!txtNomPrg.getText().equalsIgnoreCase(strNomPrg)) {
                if (txtNomPrg.getText().equals("")) {
                    txtCodPrg.setText("");
                    txtNomPrg.setText("");
                } else {
                    mostrarVenConPrg(2);
                }
            } else {
                txtNomPrg.setText(strNomPrg);
            }
        }
    }//GEN-LAST:event_txtNomPrgFocusLost
    private void txtNomPrgFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPrgFocusGained
        strNomPrg = txtNomPrg.getText();
        txtNomPrg.selectAll();
    }//GEN-LAST:event_txtNomPrgFocusGained

    private void txtNomPrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomPrgActionPerformed
        txtNomPrg.transferFocus();
    }//GEN-LAST:event_txtNomPrgActionPerformed
    private void txtCodPrgFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrgFocusLost
        if (objTooBar.getEstado() == 'n') {
            if (!txtCodPrg.getText().equalsIgnoreCase(strCodPrg)) {
                if (txtCodPrg.getText().equals("")) {
                    txtCodPrg.setText("");
                    txtNomPrg.setText("");
                } else {
                    mostrarVenConPrg(1);
                    cargarDetReg();
                }
            } else {
                txtCodPrg.setText(strCodPrg);
            }
        } else {
            if (!txtCodPrg.getText().equalsIgnoreCase(strCodPrg)) {
                if (txtCodPrg.getText().equals("")) {
                    txtCodPrg.setText("");
                    txtNomPrg.setText("");
                } else {
                    mostrarVenConPrg(1);
                }

            } else {
                txtCodPrg.setText(strCodPrg);
            }
        }
    }//GEN-LAST:event_txtCodPrgFocusLost

    private void txtCodPrgFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrgFocusGained
        strCodPrg = txtCodPrg.getText();
        txtCodPrg.selectAll();
    }//GEN-LAST:event_txtCodPrgFocusGained

    private void txtCodPrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodPrgActionPerformed
        txtCodPrg.transferFocus();
    }//GEN-LAST:event_txtCodPrgActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        configurarFrm();
    }//GEN-LAST:event_formInternalFrameOpened

    private void txtDesLarUsrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarUsrFocusLost
        if (txtDesLarUsr.isEditable()) {
            //Validar el contenido de la celda sólo si ha cambiado.
            if (!txtDesLarUsr.getText().equalsIgnoreCase(strDesLarUsr)) {
                if (txtDesLarUsr.getText().equals("")) {
                    txtCodUsr.setText("");
                    txtDesCorUsr.setText("");
                } else {
                    mostrarVenConUsr(2);
                }
            } else {
                txtDesLarUsr.setText(strDesLarUsr);
            }
        }
    }//GEN-LAST:event_txtDesLarUsrFocusLost

    private void txtDesCorUsrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorUsrFocusLost
        if (txtDesCorUsr.isEditable()) {
            //Validar el contenido de la celda sólo si ha cambiado.
            if (!txtDesCorUsr.getText().equalsIgnoreCase(strDesCorUsr)) {
                if (txtDesCorUsr.getText().equals("")) {
                    txtCodUsr.setText("");
                    txtDesLarUsr.setText("");
                } else {
                    mostrarVenConUsr(1);
                }
            } else {
                txtDesCorUsr.setText(strDesCorUsr);
            }
        }
    }//GEN-LAST:event_txtDesCorUsrFocusLost

    private void txtDesLarUsrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarUsrFocusGained
        strDesLarUsr = txtDesLarUsr.getText();
        txtDesLarUsr.selectAll();
    }//GEN-LAST:event_txtDesLarUsrFocusGained

    private void txtDesLarUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarUsrActionPerformed
        txtDesLarUsr.transferFocus();
    }//GEN-LAST:event_txtDesLarUsrActionPerformed

    private void txtDesCorUsrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorUsrFocusGained
        strDesCorUsr = txtDesCorUsr.getText();
        txtDesCorUsr.selectAll();
    }//GEN-LAST:event_txtDesCorUsrFocusGained

    private void txtDesCorUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorUsrActionPerformed
        txtDesCorUsr.transferFocus();
    }//GEN-LAST:event_txtDesCorUsrActionPerformed

    private void butUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUsrActionPerformed
        mostrarVenConUsr(0);
    }//GEN-LAST:event_butUsrActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        try {
            javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
            strTit = "Mensaje del sistema Zafiro";
            strMsg = "¿Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this, strMsg, strTit, javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE) == javax.swing.JOptionPane.YES_OPTION) {
                //Cerrar la conexión si está abierta.
                if (rstCab != null) {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab = null;
                    stmCab = null;
                    conCab = null;
                }
                dispose();
            }
        } catch (java.sql.SQLException e) {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    /** Cerrar la aplicación. */
    private void exitForm() {
        dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butPrg;
    private javax.swing.JButton butUsr;
    private javax.swing.JLabel lblPrg;
    private javax.swing.JLabel lblTit;
    private javax.swing.JLabel lblUsr;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGen;
    private javax.swing.JPanel panGenCab;
    private javax.swing.JPanel panGenDet;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodPrg;
    private javax.swing.JTextField txtCodUsr;
    private javax.swing.JTextField txtDesCorUsr;
    private javax.swing.JTextField txtDesLarUsr;
    private javax.swing.JTextField txtNomPrg;
    // End of variables declaration//GEN-END:variables

//    /** Configurar el formulario. */
    private boolean configurarFrm() {
        boolean blnRes = true;
        try {
            //Inicializar objetos.
            System.out.println("configurarFrm");
            objUti = new ZafUtil();
            objTooBar = new MiToolBar(this);
            objTooBar.setVisibleAnular(false);
            panBar.add(objTooBar);
            this.setTitle(objParSis.getNombreMenu() + " v0.1.5"); //27/Dic/2013
            lblTit.setText(objParSis.getNombreMenu());
            //Configurar objetos.
            txtCodPrg.setBackground(objParSis.getColorCamposObligatorios());
            txtNomPrg.setBackground(objParSis.getColorCamposObligatorios());
            txtDesCorUsr.setBackground(objParSis.getColorCamposObligatorios());
            txtDesLarUsr.setBackground(objParSis.getColorCamposObligatorios());
            txtCodUsr.setVisible(false);
            //Configurar ZafVenCon.
            configurarVenConPrg();
            configurarVenConUsr();
            //Configurar los JTables.
            configurarTblDat();
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función configura el JTable "tblDat".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDat() {
        boolean blnRes = true;
        try {
            System.out.println("configurarTblDat");
            blnPre=false;
            //Configurar JTable: Establecer el modelo.
            vecDat = new Vector();    //Almacena los datos
            vecCab = new Vector(8);   //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN, "");
            vecCab.add(INT_TBL_DAT_CHK, "");
            vecCab.add(INT_TBL_DAT_COD_TIP_DOC, "Código");
            vecCab.add(INT_TBL_DAT_DEC_TIP_DOC, "Tip.Doc.");
            vecCab.add(INT_TBL_DAT_DEL_TIP_DOC, "Tipo de documento");
            vecCab.add(INT_TBL_DAT_CHK_PRE, "Pred.");
            vecCab.add(INT_TBL_DAT_CMB_BOX_FEC, "Cam.Fec.");
            vecCab.add(INT_TBL_DAT_CMB_BOX_MOD, "Mod.Doc.");


            //Configurar JTable: Establecer el modelo de la tabla.
            objTblMod = new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu = new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux = tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DEC_TIP_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DEL_TIP_DOC).setPreferredWidth(350);
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRE).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_CMB_BOX_FEC).setPreferredWidth(40);
            tcmAux.getColumn(INT_TBL_DAT_CMB_BOX_MOD).setPreferredWidth(40);
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_DAT_CHK).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda = new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer columnas editables.
            vecAux = new Vector();
            vecAux.add("" + INT_TBL_DAT_CHK);
            vecAux.add("" + INT_TBL_DAT_CHK_PRE);
            vecAux.add("" + INT_TBL_DAT_CMB_BOX_FEC);
            vecAux.add("" + INT_TBL_DAT_CMB_BOX_MOD);
            objTblMod.setColumnasEditables(vecAux);
            vecAux = null;
//            //Configurar JTable: Editor de la tabla.
//            objTblEdi=new ZafTblEdi(tblDat);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab = new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk = new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellRenderer(objTblCelRenChk);
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRE).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk = null;

            objTblCelRenLbl = new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl = null;
            //Configurar JTable: Editor de celdas.
            objTblCelEdiChk = new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
//                    if( (objTooBar.getEstado()=='x') || (objTooBar.getEstado()=='m') )
//                        blnPre=true;
                }

                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK)){
                        if(! blnPre){
                            objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);
                            blnPre=true;
                        }
                        objTblMod.setValueAt("1", tblDat.getSelectedRow(), INT_TBL_DAT_CMB_BOX_FEC);
                        objTblMod.setValueAt("1", tblDat.getSelectedRow(), INT_TBL_DAT_CMB_BOX_MOD);
                    }
                    else
                        objTblMod.setChecked(false, tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE);
                }
            });

            objTblCelEdiChkPre = new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK_PRE).setCellEditor(objTblCelEdiChkPre);
            objTblCelEdiChkPre.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK))
                        objTblCelEdiChkPre.setCancelarEdicion(false);
                    else
                        objTblCelEdiChkPre.setCancelarEdicion(true);

                }

                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_PRE)){
                        blnPre=true;
                        quitarPredeterminadoAnterior(tblDat.getSelectedRow());
                    }
                    else
                        blnPre=false;

                }
            });

            objTblCelRenCmbBoxFec = new ZafTblCelRenCbo();
            tcmAux.getColumn(INT_TBL_DAT_CMB_BOX_FEC).setCellRenderer(objTblCelRenCmbBoxFec);
            objTblCelRenCmbBoxFec = null;

            objTblCelEdiCmbBoxFec = new ZafTblCelEdiCbo(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CMB_BOX_FEC).setCellEditor(objTblCelEdiCmbBoxFec);
            objTblCelEdiCmbBoxFec.addItem("1");
            objTblCelEdiCmbBoxFec.addItem("2");
            objTblCelEdiCmbBoxFec.addItem("3");
            objTblCelEdiCmbBoxFec.addItem("4");
            objTblCelEdiCmbBoxFec.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {

                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
            });


            objTblCelRenCmbBoxMod = new ZafTblCelRenCbo();
            tcmAux.getColumn(INT_TBL_DAT_CMB_BOX_MOD).setCellRenderer(objTblCelRenCmbBoxMod);
            objTblCelRenCmbBoxMod = null;

            objTblCelEdiCmbBoxMod = new ZafTblCelEdiCbo(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CMB_BOX_MOD).setCellEditor(objTblCelEdiCmbBoxMod);
            objTblCelEdiCmbBoxMod.addItem("1");
            objTblCelEdiCmbBoxMod.addItem("2");
            objTblCelEdiCmbBoxMod.addItem("3");
            objTblCelEdiCmbBoxMod.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {

                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
            });

            if(objParSis.getCodigoMenu()==1814){
                //Configurar JTable: Ocultar columnas del sistema.
                objTblMod.addSystemHiddenColumn(INT_TBL_DAT_CMB_BOX_FEC, tblDat);
                objTblMod.addSystemHiddenColumn(INT_TBL_DAT_CMB_BOX_MOD, tblDat);
            }


            //Libero los objetos auxiliares.
            tcmAux = null;
            objTblOrd = new ZafTblOrd(tblDat);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    private boolean quitarPredeterminadoAnterior(int fila){
        boolean blnRes=true;
        try{
            System.out.println("quitarPredeterminadoAnterior");
            for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRE)){
                    if(i!=fila)
                        objTblMod.setChecked(false, i, INT_TBL_DAT_CHK_PRE);
                }
            }
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }


    /**
     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
     * insertar, consultar, modificar, eliminar, etc. Además de los botones de navegación
     * que permiten desplazarse al primero, anterior, siguiente y último registro.
     */
    private class MiToolBar extends ZafToolBar {

        public MiToolBar(javax.swing.JInternalFrame ifrFrm) {
            super(ifrFrm, objParSis);
        }

        public boolean anular() {
            System.out.println("anular");
            if (!anularReg()) {
                return false;
            }
            objTooBar.setEstadoRegistro("Anulado");
            blnHayCam = false;
            return true;
        }

        public void clickAceptar() {
        }

        public void clickAnterior() {
            try {
                if (!rstCab.isFirst()) {
                    if (blnHayCam || objTblMod.isDataModelChanged()) {
                        if (isRegPro()) {
                            rstCab.previous();
                            cargarReg();
                        }
                    } else {
                        rstCab.previous();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnular() {
        }

        public void clickCancelar() {
        }

        public void clickConsultar() {
            switch (objTooBar.getEstado()) {
                case 'c':
                case 'x':
                case 'y':
                case 'z':
                    txtCodPrg.requestFocus();
                    break;
                case 'j':
                    cargarDetReg();
                    break;
            }
            //Inicializar las variables que indican cambios.
            blnHayCam = false;
        }

        public void clickEliminar() {
            System.out.println("clickEliminar");
            cargarDetReg();
        }

        public void clickFin() {
            try {
                if (!rstCab.isLast()) {
                    if (blnHayCam || objTblMod.isDataModelChanged()) {
                        if (isRegPro()) {
                            rstCab.last();
                            cargarReg();
                        }
                    } else {
                        rstCab.last();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickImprimir() {
        }

        public void clickInicio() {
            try {
                if (!rstCab.isFirst()) {
                    if (blnHayCam || objTblMod.isDataModelChanged()) {
                        if (isRegPro()) {
                            rstCab.first();
                            cargarReg();
                        }
                    } else {
                        rstCab.first();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickInsertar() {
            try {
                if (blnHayCam || objTblMod.isDataModelChanged()) {
                    isRegPro();
                }
                if (rstCab != null) {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab = null;
                    stmCab = null;
                    conCab = null;
                }
                limpiarFrm();
                objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
                txtCodPrg.requestFocus();
                //Inicializar las variables que indican cambios.
                objTblMod.setDataModelChanged(false);
                blnHayCam = false;
                blnPre=false;
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickModificar() {
            System.out.println("clickModificar");
            txtCodPrg.setEditable(false);
            txtNomPrg.setEditable(false);
            butPrg.setEnabled(false);
            txtCodUsr.setEditable(false);
            txtDesCorUsr.setEditable(false);
            txtDesLarUsr.setEditable(false);
            butUsr.setEnabled(false);
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            cargarDetReg();
            //Inicializar las variables que indican cambios.
            objTblMod.setDataModelChanged(false);
            blnHayCam = false;

            blnPre=true;


        }

        public void clickSiguiente() {
            try {
                if (!rstCab.isLast()) {
                    if (blnHayCam || objTblMod.isDataModelChanged()) {
                        if (isRegPro()) {
                            rstCab.next();
                            cargarReg();
                        }
                    } else {
                        rstCab.next();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickVisPreliminar() {
        }

        public boolean consultar() {
            System.out.println("consultar");
            consultarReg();
            return true;
        }

        public boolean eliminar() {
            try {
                if (!eliminarReg()) {
                    return false;
                }
                //Desplazarse al siguiente registro si es posible.
                if (!rstCab.isLast()) {
                    rstCab.next();
                    cargarReg();
                } else {
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                }
                blnHayCam = false;
            } catch (java.sql.SQLException e) {
                return true;
            }
            return true;
        }

        public boolean insertar() {
            if (!insertarReg()) {
                return false;
            }
            return true;
        }

        public boolean modificar() {
            System.out.println("modificar");
            if (!actualizarReg()) {
                return false;
            }
            return true;
        }

        public boolean cancelar() {
            boolean blnRes = true;
            try {
                if (blnHayCam || objTblMod.isDataModelChanged()) {
                    if (objTooBar.getEstado() == 'n' || objTooBar.getEstado() == 'm') {
                        if (!isRegPro()) {
                            return false;
                        }
                    }
                }
                if (rstCab != null) {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab = null;
                    stmCab = null;
                    conCab = null;
                }
                objTblMod.clearRowHeaderRaise();
                limpiarFrm();
                //Inicializar las variables que indican cambios.
                objTblMod.setDataModelChanged(false);
                blnHayCam = false;
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
            return blnRes;
        }

        public boolean vistaPreliminar() {
            if (objThrGUI == null) {
                objThrGUI = new ZafThreadGUI();
                objThrGUI.setIndFunEje(1);
                objThrGUI.start();
            }
            return true;
        }

        public boolean aceptar() {
            return true;
        }

        public boolean imprimir() {
            if (objThrGUI == null) {
                objThrGUI = new ZafThreadGUI();
                objThrGUI.setIndFunEje(1);
                objThrGUI.start();
            }
            return true;
        }

        public boolean beforeInsertar() {
            if (!isCamVal()) {
                return false;
            }
            return true;
        }

        public boolean beforeConsultar() {
            return true;
        }

        public boolean beforeModificar() {
            System.out.println("beforeModificar");
            strAux = objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado")) {
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible modificar un documento eliminado.");
                return false;
            }
            if (strAux.equals("Anulado")) {
                mostrarMsgInf("El documento está ANULADO.\nNo es posible modificar un documento anulado.");
                return false;
            }
            if (!isCamVal()) {
                return false;
            }
            return true;
        }

        public boolean beforeEliminar() {
            return true;
        }

        public boolean beforeAnular() {
            System.out.println("beforeAnular");
            strAux = objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado")) {
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible anular un documento eliminado.");
                return false;
            }
            if (strAux.equals("Anulado")) {
                mostrarMsgInf("El documento ya está ANULADO.\nNo es posible anular un documento anulado.");
                return false;
            }
            return true;
        }

        public boolean beforeImprimir() {
            return true;
        }

        public boolean beforeVistaPreliminar() {
            return true;
        }

        public boolean beforeAceptar() {
            return true;
        }

        public boolean beforeCancelar() {
            return true;
        }

        public boolean afterInsertar() {
            blnHayCam = false;
            objTooBar.setEstado('w');
            blnHayCam = false;
            consultarReg();
            return true;
        }

        public boolean afterConsultar() {
            return true;
        }

        public boolean afterModificar() {
            blnHayCam = false;
            objTooBar.setEstado('w');
            cargarReg();
            return true;
        }

        public boolean afterEliminar() {
            blnHayCam = false;
            return true;
        }

        public boolean afterAnular() {
            return true;
        }

        public boolean afterImprimir() {
            return true;
        }

        public boolean afterVistaPreliminar() {
            return true;
        }

        public boolean afterAceptar() {
            return true;
        }

        public boolean afterCancelar() {
            return true;
        }
    }

    /**
     * Esta función determina si los campos son válidos.
     * @return true: Si los campos son válidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal() {

        if(objTooBar.getEstado()=='n'){
            if(existeTipoDocumentoIngresado()){
                tabFrm.setSelectedIndex(0);//ubica el tab correspondiente
                mostrarMsgInf("<HTML>El programa <FONT COLOR=\"blue\">" + txtNomPrg.getText() + "</FONT> ya fue ingresado.<BR>Seleccione un programa aún no ingresado y vuelva a intentarlo.</HTML>");
                txtCodPrg.requestFocus();
                return false;
            }
        }

        //Validar el "Programa".
        if (txtCodPrg.getText().equals("")) {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Programa</FONT> es obligatorio.<BR>Escriba o seleccione un programa y vuelva a intentarlo.</HTML>");
            txtCodPrg.requestFocus();
            return false;
        }
        //Validar el "Usuario".
        if (txtCodUsr.getText().equals("")) {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Usuario</FONT> es obligatorio.<BR>Escriba o seleccione un usuario y vuelva a intentarlo.</HTML>");
            txtDesCorUsr.requestFocus();
            return false;
        }

        if ( ! isPredeterminado()) {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>Se requiere haber seleccionado un tipo de documento como predeterminado.<BR>Seleccione algún tipo de documento como predeterminado y vuelva a intentarlo.</HTML>");
            return false;
        }

        if (objTblMod.getRowCountChecked(INT_TBL_DAT_CHK)<=0) {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>No se ha seleccionado ningún tipo de documento.<BR>Seleccione algún tipo de documento y vuelva a intentarlo o cancele el proceso.</HTML>");
            return false;
        }


        if(objParSis.getCodigoMenu()==1223){
            if( ! isCompletePermisoFecha()){
                tabFrm.setSelectedIndex(0);
                mostrarMsgInf("<HTML>Existe un tipo de documento seleccionado sin permiso de fecha establecido<BR>Seleccione el tipo de permiso para fecha y vuelva a intentarlo.</HTML>");
                return false;
            }

            if( ! isCompletePermisoModificacion()){
                tabFrm.setSelectedIndex(0);
                mostrarMsgInf("<HTML>Existe un tipo de documento seleccionado sin permiso de modificación de documento establecido<BR>Seleccione el tipo de permiso para modificar el documento y vuelva a intentarlo.</HTML>");
                return false;
            }
        }



        return true;
    }

    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg) {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        String strTit;
        strTit = "Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this, strMsg, strTit, javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg) {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        String strTit;
        strTit = "Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this, strMsg, strTit, javax.swing.JOptionPane.YES_NO_CANCEL_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje de advertencia al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos se han cargado
     * con errores y que debe revisar dichos datos.
     */
    private void mostrarMsgAdv(String strMsg) {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        String strTit;
        strTit = "Mensaje del sistema Zafiro";
        if (strMsg.equals("")) {
            strMsg = "<HTML>Este registro tiene <FONT COLOR=\"red\">problemas</FONT>. <BR>Notifíquelo a su administrador del sistema.</HTML>";
        }
        oppMsg.showMessageDialog(this, strMsg, strTit, javax.swing.JOptionPane.WARNING_MESSAGE);
    }


    /**
     * Esta función permite validar la selecciòn obligatoria de un documento
     * predeterminado antes de realizar la respectiva inserción, modificación.
     * @return true: Si existe un documento predeterminado seleccionado
     * <BR>false: En el caso contrario.
     */
    private boolean isPredeterminado() {
        boolean blnRes=false;
        try {
            for (int i=0; i<objTblMod.getRowCountTrue(); i++) {
                if (objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRE)) {
                    blnRes = true;
                    break;
                }
            }
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes = false;
        }
        return blnRes;
    }



    /**
     * Esta función inserta el registro en la base de datos.
     * @return true: Si se pudo insertar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarReg() {
        boolean blnRes = false;
        try {
            con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con != null) {
                if (insertarDet()) {
                    con.commit();
                    blnRes = true;
                }
                else
                    con.rollback();

            }
            con.close();
            con = null;
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean consultarReg() {
        int intCodEmp, intCodLoc;
        boolean blnRes = true;
        try {
            intCodEmp = objParSis.getCodigoEmpresa();
            intCodLoc = objParSis.getCodigoLocal();
            conCab = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab != null) {
                stmCab = conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                if(objParSis.getCodigoMenu()==1223){
                    strSQL = "";
                    strSQL += "SELECT a1.co_emp, a1.co_loc, a1.co_mnu, a2.tx_nom AS a2_tx_nom, a1.co_usr, a3.tx_usr, a3.tx_nom AS a3_tx_nom";
                    strSQL += " FROM tbr_tipDocUsr AS a1";
                    strSQL += " INNER JOIN tbm_mnuSis AS a2 ON (a1.co_mnu=a2.co_mnu)";
                    strSQL += " INNER JOIN tbm_usr AS a3 ON (a1.co_usr=a3.co_usr)";
                    strSQL += " WHERE a1.co_emp=" + intCodEmp;
                    strSQL += " AND a1.co_loc=" + intCodLoc;
                    strAux = txtCodPrg.getText();
                    if (!strAux.equals("")) {
                        strSQL += " AND a1.co_mnu =" + strAux + "";
                    }
                    strAux = txtCodUsr.getText();
                    if (!strAux.equals("")) {
                        strSQL += " AND a1.co_usr=" + strAux + "";
                    }

                    strSQL += " AND a3.st_reg='A'";

                    strSQL += " GROUP BY a1.co_emp, a1.co_loc, a1.co_mnu, a2.tx_nom, a1.co_usr, a3.tx_usr, a3.tx_nom";
                    strSQL += " ORDER BY a1.co_mnu, a1.co_usr";
                }
                if(objParSis.getCodigoMenu()==1814){
                    strSQL = "";
                    strSQL += "SELECT a1.co_emp, a1.co_loc, a1.co_mnu, a2.tx_nom AS a2_tx_nom, a1.co_usr, a3.tx_usr, a3.tx_nom AS a3_tx_nom";
                    strSQL += " FROM tbr_tipDocDetUsr AS a1";
                    strSQL += " INNER JOIN tbm_mnuSis AS a2 ON (a1.co_mnu=a2.co_mnu)";
                    strSQL += " INNER JOIN tbm_usr AS a3 ON (a1.co_usr=a3.co_usr)";
                    strSQL += " WHERE a1.co_emp=" + intCodEmp;
                    strSQL += " AND a1.co_loc=" + intCodLoc;
                    strAux = txtCodPrg.getText();
                    if (!strAux.equals("")) {
                        strSQL += " AND a1.co_mnu=" + strAux + "";
                    }
                    strAux = txtCodUsr.getText();
                    if (!strAux.equals("")) {
                        strSQL += " AND a1.co_usr=" + strAux + "";
                    }
                    strSQL += " AND a3.st_reg='A'";
                    strSQL += " GROUP BY a1.co_emp, a1.co_loc, a1.co_mnu, a2.tx_nom, a1.co_usr, a3.tx_usr, a3.tx_nom";
                    strSQL += " ORDER BY a1.co_mnu, a1.co_usr";
                }
                rstCab = stmCab.executeQuery(strSQL);
                if(rstCab.next()){
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                    strSQLCon = strSQL;
                } else {
                    mostrarMsgInf("No se ha encontrado ningún registro que cumpla el criterio de búsqueda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función actualiza el registro en la base de datos.
     * @return true: Si se pudo actualizar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarReg() {
        boolean blnRes = false;
        try {
            con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con != null) {
//                if (eliminarDet()) {
//                    if (insertarDet()) {
//                        con.commit();
//                        blnRes = true;
//                    }
//                    else {
//                        con.rollback();
//                    }
//                }
                
               //José Mario Marín
                if(actualizarDet()){
                    con.commit();
                    blnRes = true;
                }
                else{
                    con.rollback();
                }
                
            }
            con.close();
            con = null;
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
   }

    /**
     * Esta función permite validar que el documento que se encuentra
     * como predeterminado deba ser seleccionado en relación a un tipo
     * de documento
     * @return true: Si el documento predeterminado 
     * tiene seleccionado un tipo de documento
     * <BR>false: En el caso contrario.
     */
    private boolean seleccionarPreSel() {
        boolean blnRes = true;
        intVar = 0;
        for (int i = 0; i < objTblMod.getRowCountTrue(); i++) {
            if (objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRE)) {
                if (objTblMod.isChecked(i, INT_TBL_DAT_CHK)) {
                    {
                    }
                    intVar++;
                }
            }
        }
        if (intVar == 0) {
            mostrarMsgInf("<HTML>La configuración requiere que el documento Preterminado <BR> Seleccione un tipo de documento, seleccione y  vuelva a intentarlo.</HTML>");
            blnRes = false;
        } else {
            blnRes = true;
        }
        return blnRes;
    }

    /**
     * Esta función permite validar la selecciòn obligatoria de un documento 
     * predeterminado antes de realizar la respectiva inserción, modificación.
     * @return true: Si existe un documento predeterminado seleccionado
     * <BR>false: En el caso contrario.
     */
    private boolean seleccionarPre() {
        boolean blnRes = true;
        intVarPre = 0;
        for (int i = 0; i < objTblMod.getRowCountTrue(); i++) {
            if (objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRE)) {
                intVarPre++;
            }
        }
        if (intVarPre == 0) {
            mostrarMsgInf("<HTML>La configuración requiere que el documento Preterminado esté seleccionado.<BR>Seleccione un tipo de documento como predeterminado y vuelva a intentarlo.</HTML>");
            blnRes = false;
        } else {
            blnRes = true;
        }
        return blnRes;
    }

    /**
     * Esta función elimina el registro de la base de datos.
     * @return true: Si se pudo eliminar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminarReg() {
        System.out.println("eliminarReg");
        boolean blnRes = false;
        try {
            con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con != null) {
                if (eliminarDet()) {
                    con.commit();
                    blnRes = true;
                } else {
                    con.rollback();
                }
            }
            con.close();
            con = null;
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función anula el registro de la base de datos.
     * @return true: Si se pudo anular el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean anularReg() {
        boolean blnRes = false;
//        try
//        {
//            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
//            con.setAutoCommit(false);
//            if (con!=null)
//            {
//                if (anularCab())
//                {
//                    if (actualizarTbmInvBod(3))
//                    {
//                        if (actualizarTbmInv())
//                        {
//                            con.commit();
//                            recostearItm();
//                            blnRes=true;
//                        }
//                        else
//                            con.rollback();
//                    }
//                    else
//                        con.rollback();
//                }
//                else
//                    con.rollback();
//            }
//            con.close();
//            con=null;
//        }
//        catch (java.sql.SQLException e)
//        {
//            objUti.mostrarMsgErr_F1(this, e);
//        }
//        catch (Exception e)
//        {
//            objUti.mostrarMsgErr_F1(this, e);
//        }
        return blnRes;
    }

    /**
     * Esta función permite insertar el detalle de un registro.
     * @return true: Si se pudo insertar el detalle del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarDet() {
        boolean blnRes = true;
        String strUpd="";
        try {
            System.out.println("insertarDet");
            if (con != null) {
                stm = con.createStatement();
                if(objParSis.getCodigoMenu()==1223){
                    for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                        if (objTblMod.isChecked(i, INT_TBL_DAT_CHK)) {
                            strSQL= "";
                            strSQL+="INSERT INTO tbr_tipDocUsr(";
                            strSQL+=" co_emp, co_loc, co_tipdoc, co_mnu, co_usr, st_reg, ne_tipresmodfecdoc, ne_tipresmoddoc)";
                            strSQL+=" VALUES (";
                            strSQL+="" + objParSis.getCodigoEmpresa();//co_emp
                            strSQL+=", " + objParSis.getCodigoLocal();//co_loc
                            strSQL+=", " + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC); //co_tipDoc
                            strSQL+=", " + txtCodPrg.getText();//co_mnu
                            strSQL+=", " + txtCodUsr.getText();//co_usr
                            if (objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRE))
                                strSQL += ", 'S'";//st_reg
                            else
                                strSQL += ", 'N'";//st_reg
                            strSQL+=", " + objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX_FEC);//ne_tipresmodfecdoc
                            strSQL+=", " + objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX_MOD);//ne_tipresmoddoc
                            strSQL += ");";
                            strUpd+=strSQL;
                        }
                    }
           
                }
                if (objParSis.getCodigoMenu() == 1814) {
                    for (int i = 0; i < objTblMod.getRowCountTrue(); i++) {
                        if (objTblMod.isChecked(i, INT_TBL_DAT_CHK)) {
                            strSQL = "";
                            strSQL += "INSERT INTO tbr_tipDocDetUsr (co_emp, co_loc, co_tipDoc, co_mnu, co_usr, st_reg)";
                            strSQL += " VALUES (";
                            strSQL += "" + objParSis.getCodigoEmpresa();
                            strSQL += ", " + objParSis.getCodigoLocal();
                            strSQL += ", " + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC); //co_tipDoc
                            strSQL += ", " + txtCodPrg.getText();
                            strSQL += ", " + txtCodUsr.getText();
                            if (objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRE)) {
                                strSQL += ", 'S'";
                            } else {
                                strSQL += ", 'N'";
                            }
                            strSQL += ");";
                            strUpd+=strSQL;
                        }
                    }
                }
                System.out.println("insert tbr_tipDocDetUsr: " + strUpd);
                stm.executeUpdate(strUpd);
                stm.close();
                stm = null;
            }
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite cargar el registro seleccionado.
     * @return true: Si se pudo cargar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg() {
        System.out.println("cargarReg");
        boolean blnRes = true;
        try {
            if (cargarCabReg()) {
                cargarDetReg();
            }
            blnHayCam = false;
        } catch (Exception e) {
            blnRes = false;
        }
        return blnRes;
    }

    /**
     * Esta función permite cargar la cabecera del registro seleccionado.
     * @return true: Si se pudo cargar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarCabReg() {
        System.out.println("cargarCabReg");
        int intPosRel;
        boolean blnRes = true;
        try {
            txtCodPrg.setText(rstCab.getString("co_mnu"));
            txtNomPrg.setText(rstCab.getString("a2_tx_nom"));
            txtCodUsr.setText(rstCab.getString("co_usr"));
            txtDesCorUsr.setText(rstCab.getString("tx_usr"));
            txtDesLarUsr.setText(rstCab.getString("a3_tx_nom"));
            //Mostrar la posición relativa del registro.
            intPosRel = rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite cargar el detalle del registro seleccionado.
     * @return true: Si se pudo cargar el detalle del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg() {
        System.out.println("cargarDetReg");
        boolean blnRes = true;
        String strPerFec="", strPerModDoc="";
        try {
            objTooBar.setMenSis("Obteniendo datos...");
            con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con != null) {
                stm = con.createStatement();
                //Armar la sentencia SQL.
                if (objParSis.getCodigoMenu() == 1223) {//tbr_tipDocUsr
                    if (objTooBar.getEstado() == 'n') {
                        strSQL = "";
                        strSQL += " SELECT 'N' AS st_sel, a1.co_tipDoc, a1.tx_desCor, a1.tx_desLar, 'N' AS st_pre, 0 AS ne_tipResModFecDoc, 0 AS ne_tipResModDoc";
                        strSQL += " FROM tbm_cabTipDoc AS a1";
                        strSQL += " INNER JOIN tbr_tipDocPrg AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc)";
                        strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL += " AND a1.co_loc=" + objParSis.getCodigoLocal();
                        strSQL += " AND a2.co_mnu=" + txtCodPrg.getText();
                        strSQL += " AND a1.st_reg='A'";
                        strSQL += " ORDER BY a1.tx_desCor";
                    } else if (objTooBar.getEstado() == 'x' || objTooBar.getEstado() == 'm') {
                        strSQL = "";
                        strSQL += "SELECT 'N' AS st_sel, a1.co_tipDoc, a1.tx_desCor, a1.tx_desLar, 'N' AS st_pre, 0 AS ne_tipResModFecDoc, 0 AS ne_tipResModDoc";
                        strSQL += " FROM tbm_cabTipDoc AS a1";
                        strSQL += " INNER JOIN tbr_tipDocPrg AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc)";
                        strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL += " AND a1.co_loc=" + objParSis.getCodigoLocal();
                        strSQL += " AND a2.co_mnu=" + txtCodPrg.getText();
                        strSQL += " AND a1.st_reg='A'";
                        strSQL += " AND a1.co_tipDoc NOT IN (SELECT co_tipDoc FROM tbr_tipDocUsr WHERE co_emp=" + objParSis.getCodigoEmpresa() + " AND co_loc=" + objParSis.getCodigoLocal() + " AND co_mnu=" + txtCodPrg.getText() + " AND co_usr=" + txtCodUsr.getText() + ")";
                        strSQL += " UNION ALL";
                        strSQL += " SELECT 'S' AS st_sel, a1.co_tipDoc, a1.tx_desCor, a1.tx_desLar, a2.st_reg, a2.ne_tipResModFecDoc, a2.ne_tipResModDoc";
                        strSQL += " FROM tbm_cabTipDoc AS a1";
                        strSQL += " INNER JOIN tbr_tipDocUsr AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc)";
                        strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL += " AND a1.co_loc=" + objParSis.getCodigoLocal();
                        strSQL += " AND a2.co_mnu=" + txtCodPrg.getText();
                        strSQL += " AND a2.co_usr=" + txtCodUsr.getText();
                        strSQL += " ORDER BY tx_desCor";
                    } else {
                        strSQL = "";
                        strSQL += "SELECT 'S' AS st_sel, a1.co_tipDoc, a1.tx_desCor, a1.tx_desLar, a2.st_reg AS st_pre, a2.ne_tipResModFecDoc, a2.ne_tipResModDoc";
                        strSQL += " FROM tbm_cabTipDoc AS a1";
                        strSQL += " INNER JOIN tbr_tipDocUsr AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc)";
                        strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL += " AND a1.co_loc=" + objParSis.getCodigoLocal();
                        strSQL += " AND a2.co_mnu=" + txtCodPrg.getText();
                        strSQL += " AND a2.co_usr=" + txtCodUsr.getText();
                        strSQL += " ORDER BY a1.tx_desCor";
                    }
                }

                if (objParSis.getCodigoMenu() == 1814) {
                    if (objTooBar.getEstado() == 'n') {
                        strSQL = "";
                        strSQL += "SELECT 'N' AS st_sel, a1.co_tipDoc, a1.tx_desCor, a1.tx_desLar, 'N' AS st_pre, 0 AS ne_tipResModFecDoc, 0 AS ne_tipResModDoc";
                        strSQL += " FROM tbm_cabTipDoc AS a1";
                        strSQL += " INNER JOIN tbr_tipDocDetPrg AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc)";
                        strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL += " AND a1.co_loc=" + objParSis.getCodigoLocal();
                        strSQL += " AND a2.co_mnu=" + txtCodPrg.getText();
                        strSQL += " AND a1.st_reg='A'";
                        strSQL += " ORDER BY a1.tx_desCor";
                    } else if (objTooBar.getEstado() == 'x' || objTooBar.getEstado() == 'm') {
                        strSQL = "";
                        strSQL += "SELECT 'N' AS st_sel, a1.co_tipDoc, a1.tx_desCor, a1.tx_desLar, 'N' AS st_pre, 0 AS ne_tipResModFecDoc, 0 AS ne_tipResModDoc";
                        strSQL += " FROM tbm_cabTipDoc AS a1";
                        strSQL += " INNER JOIN tbr_tipDocDetPrg AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc)";
                        strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL += " AND a1.co_loc=" + objParSis.getCodigoLocal();
                        strSQL += " AND a2.co_mnu=" + txtCodPrg.getText();
                        strSQL += " AND a1.st_reg='A'";
                        strSQL += " AND a1.co_tipDoc NOT IN (SELECT co_tipDoc FROM tbr_tipDocDetUsr WHERE co_emp=" + objParSis.getCodigoEmpresa() + " AND co_loc=" + objParSis.getCodigoLocal() + " AND co_mnu=" + txtCodPrg.getText() + " AND co_usr=" + txtCodUsr.getText() + ")";
                        strSQL += " UNION ALL";
                        strSQL += " SELECT 'S' AS st_sel, a1.co_tipDoc, a1.tx_desCor, a1.tx_desLar, a2.st_reg, 0 AS ne_tipResModFecDoc, 0 AS ne_tipResModDoc";
                        strSQL += " FROM tbm_cabTipDoc AS a1";
                        strSQL += " INNER JOIN tbr_tipDocDetUsr AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc)";
                        strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL += " AND a1.co_loc=" + objParSis.getCodigoLocal();
                        strSQL += " AND a2.co_mnu=" + txtCodPrg.getText();
                        strSQL += " AND a2.co_usr=" + txtCodUsr.getText();
                        strSQL += " ORDER BY tx_desCor";
                    } else {
                        strSQL = "";
                        strSQL += "SELECT 'S' AS st_sel, a1.co_tipDoc, a1.tx_desCor, a1.tx_desLar, a2.st_reg AS st_pre, 0 AS ne_tipResModFecDoc, 0 AS ne_tipResModDoc";
                        strSQL += " FROM tbm_cabTipDoc AS a1";
                        strSQL += " INNER JOIN tbr_tipDocDetUsr AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc)";
                        strSQL += " WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL += " AND a1.co_loc=" + objParSis.getCodigoLocal();
                        strSQL += " AND a2.co_mnu=" + txtCodPrg.getText();
                        strSQL += " AND a2.co_usr=" + txtCodUsr.getText();
                        strSQL += " ORDER BY a1.tx_desCor";
                    }
                }
                rst = stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
//          Obtener los registros.
                objTooBar.setMenSis("Cargando datos...");
                while (rst.next()) {
                    vecReg = new Vector();
                    vecReg.add(INT_TBL_DAT_LIN, "");
                    if (rst.getString("st_sel").equals("S")) {
                        vecReg.add(INT_TBL_DAT_CHK, new Boolean(true));
                    } else {
                        vecReg.add(INT_TBL_DAT_CHK, null);
                    }
                    vecReg.add(INT_TBL_DAT_COD_TIP_DOC, rst.getString("co_tipDoc"));
                    vecReg.add(INT_TBL_DAT_DEC_TIP_DOC, rst.getString("tx_desCor"));
                    vecReg.add(INT_TBL_DAT_DEL_TIP_DOC, rst.getString("tx_desLar"));
                    if (rst.getString("st_pre").equals("S")) {
                        vecReg.add(INT_TBL_DAT_CHK_PRE, new Boolean(true));
                    } else {
                        vecReg.add(INT_TBL_DAT_CHK_PRE, null);
                    }

                    vecReg.add(INT_TBL_DAT_CMB_BOX_FEC, "");
                    vecReg.add(INT_TBL_DAT_CMB_BOX_MOD, "");


                    strPerFec=rst.getObject("ne_tipResModFecDoc")==null?"0":rst.getString("ne_tipResModFecDoc");
                    if( ! strPerFec.equals("0"))
                        vecReg.setElementAt(strPerFec, INT_TBL_DAT_CMB_BOX_FEC);

                    strPerModDoc=rst.getObject("ne_tipResModDoc")==null?"0":rst.getString("ne_tipResModDoc");
                    if( ! strPerModDoc.equals("0"))
                        vecReg.setElementAt(strPerModDoc, INT_TBL_DAT_CMB_BOX_MOD);
                    
                    vecDat.add(vecReg);
                }
                rst.close();
                stm.close();
                con.close();
                rst = null;
                stm = null;
                con = null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                objTooBar.setMenSis("Listo");
            }
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite eliminar el detalle de un registro.
     * @return true: Si se pudo eliminar el detalle del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminarDet() {
        System.out.println("EliminarDet");
        boolean blnRes = true;
        try {
            if (con != null) {
                stm = con.createStatement();
                //Armar la sentencia SQL.
                //"Tipos de documentos por cabecera de programa y usuario..."
                if (objParSis.getCodigoMenu() == 1223) {
                    strSQL = "";
                    strSQL += "DELETE FROM tbr_tipDocUsr";
                    strSQL += " WHERE co_emp=" + rstCab.getString("co_emp");
                    strSQL += " AND co_loc=" + rstCab.getString("co_loc");
                    strSQL += " AND co_mnu=" + rstCab.getString("co_mnu");
                    strSQL += " AND co_usr=" + rstCab.getString("co_usr");
                }
                //"Tipos de documentos por detalle de programa y usuario..."
                if (objParSis.getCodigoMenu() == 1814) {
                    strSQL = "";
                    strSQL += "DELETE FROM tbr_tipDocDetUsr";
                    strSQL += " WHERE co_emp=" + rstCab.getString("co_emp");
                    strSQL += " AND co_loc=" + rstCab.getString("co_loc");
                    strSQL += " AND co_mnu=" + rstCab.getString("co_mnu");
                    strSQL += " AND co_usr=" + rstCab.getString("co_usr");
                }
                stm.executeUpdate(strSQL);
                stm.close();
                stm = null;
            }
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite eliminar el detalle de un registro.
     * @return true: Si se pudo eliminar el detalle del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarDet() {
        System.out.println("actualizarDet");
        String strSQL2="";
        boolean blnRes = true;
        try {
            if (con != null) {
                //Armar la sentencia SQL.
                //"Tipos de documentos por cabecera de programa y usuario..."
                stm = con.createStatement();
                if(objParSis.getCodigoMenu()==1223){
                    for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                        if ((objUti.parseString(objTblMod.getValueAt(i,0)).equals("M")) ||  (objTblMod.isChecked(i, INT_TBL_DAT_CHK))) {
                           if ((objUti.parseString(objTblMod.getValueAt(i,0)).equals("M")) &&  (objTblMod.isChecked(i, INT_TBL_DAT_CHK))) {
                                //CONSULTA 
                               strSQL2="";
                               strSQL2+=" SELECT a1.co_tipDoc, a1.co_mnu, a1.co_usr"; 
                               strSQL2+=" FROM tbr_tipDocUsr as a1";
                               strSQL2+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                               strSQL2+=" and a1.co_loc=" + objParSis.getCodigoLocal();
                               strSQL2+=" and a1.co_mnu=" + txtCodPrg.getText();
                               strSQL2+=" and a1.co_usr=" + txtCodUsr.getText();
                               strSQL2+=" and a1.co_TipDoc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC);
                               System.out.println("CONSULTA SI EXISTE::..." + strSQL2);
                               rst=stm.executeQuery(strSQL2);
                                 if(rst.next()){
                                   //intento de UPDATE
                                   strSQL="";
                                   strSQL+=" UPDATE tbr_tipDocUsr set";
                                   if (objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRE))
                                      strSQL += " st_reg='S'";//st_reg
                                   else
                                      strSQL += " st_reg='N'";//st_reg
                                   strSQL+=" ,ne_tipresmodfecdoc=" + objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX_FEC);
                                   strSQL+=" ,ne_tipresmoddoc=" + objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX_MOD);
                                   strSQL+=" where co_emp=" + objParSis.getCodigoEmpresa();
                                   strSQL+=" and co_loc=" + objParSis.getCodigoLocal();
                                   strSQL+=" and co_mnu=" + txtCodPrg.getText();
                                   strSQL+=" and co_usr=" + txtCodUsr.getText();
                                   strSQL+=" and co_tipDoc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC);
                                }
                                 else{
                                        strSQL= "";
                                       strSQL+="INSERT INTO tbr_tipDocUsr(";
                                       strSQL+=" co_emp, co_loc, co_tipdoc, co_mnu, co_usr, st_reg, ne_tipresmodfecdoc, ne_tipresmoddoc)";
                                       strSQL+=" VALUES (";
                                       strSQL+="" + objParSis.getCodigoEmpresa();//co_emp
                                       strSQL+=", " + objParSis.getCodigoLocal();//co_loc
                                       strSQL+=", " + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC); //co_tipDoc
                                       strSQL+=", " + txtCodPrg.getText();//co_mnu
                                       strSQL+=", " + txtCodUsr.getText();//co_usr
                                       if (objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRE))
                                           strSQL += ", 'S'";//st_reg
                                       else
                                           strSQL += ", 'N'";//st_reg
                                       strSQL+=", " + objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX_FEC);//ne_tipresmodfecdoc
                                       strSQL+=", " + objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX_MOD);//ne_tipresmoddoc
                                       strSQL += ");";
                                 }
                                 System.out.println("1: " + strSQL);
                                 stm.executeUpdate(strSQL);
                            }
                           else if((objUti.parseString(objTblMod.getValueAt(i,0)).equals("M")) &&  (!objTblMod.isChecked(i, INT_TBL_DAT_CHK))){
                                    strSQL = "";
                                    strSQL += "DELETE FROM tbr_tipDocUsr";
                                    strSQL += " WHERE co_emp=" + rstCab.getString("co_emp");
                                    strSQL += " AND co_loc=" + rstCab.getString("co_loc");
                                    strSQL += " AND co_mnu=" + rstCab.getString("co_mnu");
                                    strSQL += " AND co_usr=" + rstCab.getString("co_usr");
                                    strSQL += " AND co_tipDoc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC);
                                    System.out.println(strSQL);
                                    stm.executeUpdate(strSQL);
                            }
                        }
                    }
           
                }
                if (objParSis.getCodigoMenu() == 1814) {
                    for (int i = 0; i < objTblMod.getRowCountTrue(); i++) {
                         if ((objUti.parseString(objTblMod.getValueAt(i,0)).equals("M")) ||  (objTblMod.isChecked(i, INT_TBL_DAT_CHK))) {
                            if ((objUti.parseString(objTblMod.getValueAt(i,0)).equals("M")) &&  (objTblMod.isChecked(i, INT_TBL_DAT_CHK))) {
                                //CONSULTA 
                               strSQL2="";
                               strSQL2+=" SELECT a1.co_tipDoc, a1.co_mnu, a1.co_usr"; 
                               strSQL2+=" FROM tbr_tipDocDetUsr as a1";
                               strSQL2+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                               strSQL2+=" and a1.co_loc=" + objParSis.getCodigoLocal();
                               strSQL2+=" and a1.co_mnu=" + txtCodPrg.getText();
                               strSQL2+=" and a1.co_usr=" + txtCodUsr.getText();
                               strSQL2+=" and a1.co_TipDoc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC);
                               System.out.println("CONSULTA SI EXISTE::..." + strSQL2);
                               rst=stm.executeQuery(strSQL2);
                                 if(rst.next()){
                                   //intento de UPDATE
                                   strSQL="";
                                   strSQL+=" UPDATE tbr_tipDocDetUsr set";
                                   if (objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRE))
                                      strSQL += " st_reg='S'";//st_reg
                                   else
                                      strSQL += " st_reg='N'";//st_reg
                                    strSQL+=" where co_emp=" + objParSis.getCodigoEmpresa();
                                   strSQL+=" and co_loc=" + objParSis.getCodigoLocal();
                                   strSQL+=" and co_mnu=" + txtCodPrg.getText();
                                   strSQL+=" and co_usr=" + txtCodUsr.getText();
                                   strSQL+=" and co_tipDoc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC);  
                                }
                                 else{
                                        strSQL= "";
                                       strSQL+="INSERT INTO tbr_tipDocDetUsr(";
                                       strSQL+=" co_emp, co_loc, co_tipdoc, co_mnu, co_usr, st_reg";
                                           strSQL+=" )";
                                       strSQL+=" VALUES (";
                                       strSQL+="" + objParSis.getCodigoEmpresa();//co_emp
                                       strSQL+=", " + objParSis.getCodigoLocal();//co_loc
                                       strSQL+=", " + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC); //co_tipDoc
                                       strSQL+=", " + txtCodPrg.getText();//co_mnu
                                       strSQL+=", " + txtCodUsr.getText();//co_usr
                                       if (objTblMod.isChecked(i, INT_TBL_DAT_CHK_PRE))
                                           strSQL += ", 'S'";//st_reg
                                       else
                                           strSQL += ", 'N'";//st_reg
                                       strSQL += ");";
                                 }
                                 System.out.println("2: " + strSQL);
                                 stm.executeUpdate(strSQL);
                           }
                       }
                         else if((objUti.parseString(objTblMod.getValueAt(i,0)).equals("M")) &&  (!objTblMod.isChecked(i, INT_TBL_DAT_CHK))){
                             strSQL = "";
                             strSQL += "DELETE FROM tbr_tipDocDetUsr";
                             strSQL += " WHERE co_emp=" + rstCab.getString("co_emp");
                             strSQL += " AND co_loc=" + rstCab.getString("co_loc");
                             strSQL += " AND co_mnu=" + rstCab.getString("co_mnu");
                             strSQL += " AND co_usr=" + rstCab.getString("co_usr");
                             strSQL += " AND co_tipDoc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC) + ";";
                             System.out.println(strSQL);
                             stm.executeUpdate(strSQL);
                         }  
                    }
                }
                stm.close();
                stm = null;
            }
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite anular la cabecera de un registro.
     * @return true: Si se pudo anular la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean anularCab() {
        boolean blnRes = true;
//        try
//        {
//            if (con!=null)
//            {
//                stm=con.createStatement();
//                //Obtener la fecha del servidor.
//                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
//                if (datFecAux==null)
//                    return false;
//                //Armar la sentencia SQL.
//                strSQL="";
//                strSQL+="UPDATE tbm_cabMovInv";
//                strSQL+=" SET st_reg='I'";
//                strSQL+=", fe_ultMod='" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "'";
//                strSQL+=", co_usrMod=" + objParSis.getCodigoUsuario();
//                if (!strEstRegRep.equals("I"))
//                    strSQL+=", st_regRep='M'";
//                strSQL+=" WHERE co_emp=" + rstCab.getString("co_emp");
//                strSQL+=" AND co_loc=" + rstCab.getString("co_loc");
//                strSQL+=" AND co_tipDoc=" + rstCab.getString("co_tipDoc");
//                strSQL+=" AND co_doc=" + rstCab.getString("co_doc");
//                stm.executeUpdate(strSQL);
//                stm.close();
//                stm=null;
//                datFecAux=null;
//            }
//        }
//        catch (java.sql.SQLException e)
//        {
//            blnRes=false;
//            objUti.mostrarMsgErr_F1(this, e);
//        }
//        catch (Exception e)
//        {
//            blnRes=false;
//            objUti.mostrarMsgErr_F1(this, e);
//        }
        return blnRes;
    }

    /**
     * Esta función permite limpiar el formulario.
     * @return true: Si se pudo limpiar la ventana sin ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean limpiarFrm() {
        boolean blnRes = true;
        try {
            txtCodPrg.setText("");
            txtNomPrg.setText("");
            txtCodUsr.setText("");
            txtDesCorUsr.setText("");
            txtDesLarUsr.setText("");
            objTblMod.removeAllRows();
        } catch (Exception e) {
            blnRes = false;
        }
        return blnRes;
    }

    /**
     * Esta función configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Programas".
     */
    private boolean configurarVenConPrg() {
        boolean blnRes = true;
        int intCodEmp, intCodEmpGrp, intCodMnu;
        try {
            intCodEmp = objParSis.getCodigoEmpresa();
            intCodEmpGrp = objParSis.getCodigoEmpresaGrupo();
            intCodMnu = objParSis.getCodigoMenu();
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("a1.co_mnu");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("Código");
            arlAli.add("Programa");
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("494");
            //Armar la sentencia SQL.
            strSQL = "";
            strSQL += "SELECT a1.co_mnu, a1.tx_nom";
            strSQL += " FROM tbm_mnuSis AS a1";
            strSQL += " WHERE (a1.tx_tipMnu='C'or a1.tx_tipMnu='R') and a1.tx_nom!=''";
            strSQL += " AND a1.st_reg<>'E'";
            strSQL += " ORDER BY a1.tx_nom";
            vcoPrg = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de programas", strSQL, arlCam, arlAli, arlAncCol);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;
            //Configurar columnas.
            vcoPrg.setConfiguracionColumna(1, javax.swing.JLabel.LEFT);
            vcoPrg.setConfiguracionColumna(2, javax.swing.JLabel.LEFT);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Usuarios".
     */
    private boolean configurarVenConUsr() {
        boolean blnRes = true;
        try {
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("a1.co_usr");
            arlCam.add("a1.tx_usr");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("Código");
            arlAli.add("Usuario");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            //Armar la sentencia SQL.
            strSQL = "";
            strSQL += "SELECT a1.co_usr, a1.tx_usr, a1.tx_nom";
            strSQL += " FROM tbm_usr AS a1";
            strSQL += " WHERE a1.st_usrSis='S'";
            strSQL += " AND a1.st_reg='A'";
            strSQL += " ORDER BY a1.tx_usr";
            vcoUsr = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de usuarios", strSQL, arlCam, arlAli, arlAncCol);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;
            //Configurar columnas.
            vcoUsr.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConPrg(int intTipBus) {
        boolean blnRes = true;
        try {
            switch (intTipBus) {
                case 0: //Mostrar la ventana de consulta.
                    vcoPrg.setCampoBusqueda(1);
                    vcoPrg.show();
                    if (vcoPrg.getSelectedButton() == vcoPrg.INT_BUT_ACE) {
                        txtCodPrg.setText(vcoPrg.getValueAt(1));
                        txtNomPrg.setText(vcoPrg.getValueAt(2));
                    }
                    break;
                case 1: //Búsqueda directa por "Código".
                    if (vcoPrg.buscar("a1.co_mnu", txtCodPrg.getText())) {
                        txtCodPrg.setText(vcoPrg.getValueAt(1));
                        txtNomPrg.setText(vcoPrg.getValueAt(2));
                    } else {
                        vcoPrg.setCampoBusqueda(0);
                        vcoPrg.setCriterio1(11);
                        vcoPrg.cargarDatos();
                        vcoPrg.show();
                        if (vcoPrg.getSelectedButton() == vcoPrg.INT_BUT_ACE) {
                            txtCodPrg.setText(vcoPrg.getValueAt(1));
                            txtNomPrg.setText(vcoPrg.getValueAt(2));
                        } else {
                            txtCodPrg.setText(strCodPrg);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Nombre".
                    if (vcoPrg.buscar("a1.tx_nom", txtNomPrg.getText())) {
                        txtCodPrg.setText(vcoPrg.getValueAt(1));
                        txtNomPrg.setText(vcoPrg.getValueAt(2));
                    } else {
                        vcoPrg.setCampoBusqueda(1);
                        vcoPrg.setCriterio1(11);
                        vcoPrg.cargarDatos();
                        vcoPrg.show();
                        if (vcoPrg.getSelectedButton() == vcoPrg.INT_BUT_ACE) {
                            txtCodPrg.setText(vcoPrg.getValueAt(1));
                            txtNomPrg.setText(vcoPrg.getValueAt(2));
                        } else {
                            txtNomPrg.setText(strNomPrg);
                        }
                    }
                    break;
            }

        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConUsr(int intTipBus) {
        boolean blnRes = true;
        try {
            switch (intTipBus) {
                case 0: //Mostrar la ventana de consulta.
                    vcoUsr.setCampoBusqueda(1);
                    vcoUsr.show();
                    if (vcoUsr.getSelectedButton() == vcoUsr.INT_BUT_ACE) {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Descripción corta".
                    if (vcoUsr.buscar("a1.tx_usr", txtDesCorUsr.getText())) {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    } else {
                        vcoUsr.setCampoBusqueda(1);
                        vcoUsr.setCriterio1(11);
                        vcoUsr.cargarDatos();
                        vcoUsr.show();
                        if (vcoUsr.getSelectedButton() == vcoUsr.INT_BUT_ACE) {
                            txtCodUsr.setText(vcoUsr.getValueAt(1));
                            txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                            txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                        } else {
                            txtDesCorUsr.setText(strDesCorUsr);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoUsr.buscar("a1.tx_nom", txtDesLarUsr.getText())) {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    } else {
                        vcoUsr.setCampoBusqueda(2);
                        vcoUsr.setCriterio1(11);
                        vcoUsr.cargarDatos();
                        vcoUsr.show();
                        if (vcoUsr.getSelectedButton() == vcoUsr.INT_BUT_ACE) {
                            txtCodUsr.setText(vcoUsr.getValueAt(1));
                            txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                            txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                        } else {
                            txtDesLarUsr.setText(strDesLarUsr);
                        }
                    }
                    break;
            }
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta clase implementa la interface DocumentListener que observa los cambios que
     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
     * Se la usa en el sistema para determinar si existe algún cambio que se deba grabar
     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
     * presentará un mensaje advirtiendo que si no guarda los cambios los perderá.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener {

        public void changedUpdate(javax.swing.event.DocumentEvent evt) {
            blnHayCam = true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) {
            blnHayCam = true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) {
            blnHayCam = true;
        }
    }

    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private boolean isRegPro() {
        boolean blnRes = true;
        strAux = "¿Desea guardar los cambios efectuados a éste registro?\n";
        strAux += "Si no guarda los cambios perderá toda la información que no haya guardado.";
        switch (mostrarMsgCon(strAux)) {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado()) {
                    case 'n': //Insertar
                        blnRes = objTooBar.beforeInsertar();
                        if (blnRes) {
                            blnRes = objTooBar.insertar();
                        }
//                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes = objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam = false;
                blnRes = true;
                break;
            case 2: //CANCEL_OPTION
                blnRes = false;
                break;
        }
        return blnRes;
    }

    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podría presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaría informado en todo
     * momento de lo que ocurre. Si se desea hacer ésto es necesario utilizar ésta clase
     * ya que si no sólo se apreciaría los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread {

        private int intIndFun;

        public ZafThreadGUI() {
            intIndFun = 0;
        }

        public void run() {
            switch (intIndFun) {
                case 0: //Botón "Imprimir".
                    objTooBar.setEnabledImprimir(false);
                    objTooBar.setEnabledImprimir(true);
                    break;
                case 1: //Botón "Vista Preliminar".
                    objTooBar.setEnabledVistaPreliminar(false);
                    objTooBar.setEnabledVistaPreliminar(true);
                    break;
            }
            objThrGUI = null;
        }

        /**
         * Esta función establece el indice de la función a ejecutar. En la clase Thread
         * se pueden ejecutar diferentes funciones. Esta función sirve para determinar
         * la función que debe ejecutar el Thread.
         * @param indice El indice de la función a ejecutar.
         */
        public void setIndFunEje(int indice) {
            intIndFun = indice;
        }
    }

    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter {

        public void mouseMoved(java.awt.event.MouseEvent evt) {
            int intCol = tblDat.columnAtPoint(evt.getPoint());
            String strMsg = "";
            switch (intCol) {
                case INT_TBL_DAT_CHK:
                    strMsg = "Autorizar tipo de documento";
                    break;
                case INT_TBL_DAT_COD_TIP_DOC:
                    strMsg = "Código del tipo de documento";
                    break;
                case INT_TBL_DAT_DEC_TIP_DOC:
                    strMsg = "Descripción corta del tipo de documento";
                    break;
                case INT_TBL_DAT_DEL_TIP_DOC:
                    strMsg = "Descripción larga del tipo de documento";
                    break;
                case INT_TBL_DAT_CHK_PRE:
                    strMsg = "Tipo de documento predeterminado";
                    break;
                default:
                    strMsg = "";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }

    private boolean isCompletePermisoFecha(){
        boolean blnRes=true;
        String strPerFec="";
        try{
            for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                if(objTblMod.isChecked(i, INT_TBL_DAT_CHK)){
                    strPerFec=objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX_FEC)==null?"":(objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX_FEC).toString().equals("")?"":objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX_FEC).toString());
                    if(strPerFec.equals("")){
                        blnRes=false;
                        break;
                    }
                }
            }
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }



    private boolean isCompletePermisoModificacion(){
        System.out.println("isCompletePermisoModificacion");
        boolean blnRes=true;
        String strPerMod="";
        try{
            for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                if(objTblMod.isChecked(i, INT_TBL_DAT_CHK)){
                    strPerMod=objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX_MOD)==null?"":(objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX_MOD).toString().equals("")?"":objTblMod.getValueAt(i, INT_TBL_DAT_CMB_BOX_MOD).toString());
                    if(strPerMod.equals("")){
                        blnRes=false;
                        break;
                    }
                }
            }
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }


    private boolean existeTipoDocumentoIngresado(){
        boolean blnRes=false;
        try{
            System.out.println("existeTipoDocumentoIngresado");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                if(objParSis.getCodigoMenu()==1223){//tbr_tipDocUsr
                    strSQL="";
                    strSQL+="SELECT a1.co_mnu FROM tbr_tipDocUsr AS a1";
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                    strSQL+=" AND a1.co_mnu=" + txtCodPrg.getText() + "";
                    strSQL+=" AND a1.co_usr=" + txtCodUsr.getText() + "";
                }
                else if(objParSis.getCodigoMenu()==1814){//tbr_tipDocDetUsr
                    strSQL="";
                    strSQL+="SELECT a1.co_mnu FROM tbr_tipDocDetUsr AS a1";
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                    strSQL+=" AND a1.co_mnu=" + txtCodPrg.getText() + "";
                    strSQL+=" AND a1.co_usr=" + txtCodUsr.getText() + "";
                }
                rst=stm.executeQuery(strSQL);
                if(rst.next()){
                    blnRes=true;
                }
                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
            }

        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=true;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=true;
        }
        return blnRes;
    }




}
