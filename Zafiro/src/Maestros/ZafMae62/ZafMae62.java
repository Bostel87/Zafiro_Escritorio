/*
 * ZafMae62.java
 *
 * Created on March 14, 2010, 8:09 PM
 */

package Maestros.ZafMae62;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafRptSis.ZafRptSis;
import Librerias.ZafTblUti.ZafTblCelEdiButDlg.ZafTblCelEdiButDlg;
import Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt;
import Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;

import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JRException;
import java.util.HashMap;
import java.util.Map;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.util.JRLoader;

/**
 *
 * @author  Gigi
 */
public class ZafMae62 extends javax.swing.JInternalFrame {
    private String strSQL;
    private ZafParSis objParSis;
    private ZafVenCon vcoBco, vcoCtaCtb;
    private ZafUtil objUti;
    private MiToolBar objTooBar;
    private ZafDocLis objDocLis;
    private String strAux;
    private boolean blnHayCam;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private java.util.Date datFecAux;
    

    private String strDesCorCtaCtb, strDesLarCtaCtb, strDesCorBco, strDesLarBco;
    private String strCodPrvLoc, strNomPrvLoc, strCodExp, strNomExp, strNomCiuBco, strCodCiuBco;
    private ZafVenCon vcoPrvLoc, vcoCtaBan, vcoExp, vcoCiuBco;


    /** Creates new form ZafMae07 */
    public ZafMae62(ZafParSis obj) {
        try{
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
        }
        catch (CloneNotSupportedException e){
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTit = new javax.swing.JLabel();
        panCon = new javax.swing.JPanel();
        tabFrm = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        panGen = new javax.swing.JPanel();
        lblCodCli = new javax.swing.JLabel();
        lblIde = new javax.swing.JLabel();
        lblDirCli = new javax.swing.JLabel();
        lblFaxCli = new javax.swing.JLabel();
        lblWebCli = new javax.swing.JLabel();
        txtCodCtaBan = new javax.swing.JTextField();
        txtFirAut1 = new javax.swing.JTextField();
        txtCarFirAut1 = new javax.swing.JTextField();
        txtNumCtaBan = new javax.swing.JTextField();
        lblCiu = new javax.swing.JLabel();
        lblDirCli1 = new javax.swing.JLabel();
        txtEjeAsi = new javax.swing.JTextField();
        lblTelCli1 = new javax.swing.JLabel();
        txtFirAut2 = new javax.swing.JTextField();
        lblCiu1 = new javax.swing.JLabel();
        txtCodBco = new javax.swing.JTextField();
        txtDesCorBco = new javax.swing.JTextField();
        txtDesLarBco = new javax.swing.JTextField();
        butCodCtaCtb = new javax.swing.JButton();
        lblSubCla = new javax.swing.JLabel();
        txtCodCtaCtb = new javax.swing.JTextField();
        txtNomCtaCtb = new javax.swing.JTextField();
        txtNumCtaCtb = new javax.swing.JTextField();
        butCtaCtb = new javax.swing.JButton();
        optTipCtaAho = new javax.swing.JRadioButton();
        optTipCtaCte = new javax.swing.JRadioButton();
        optFirConSi = new javax.swing.JRadioButton();
        optFirConNo = new javax.swing.JRadioButton();
        lblWebCli1 = new javax.swing.JLabel();
        txtCarFirAut2 = new javax.swing.JTextField();
        butBco1 = new javax.swing.JButton();
        lblIde1 = new javax.swing.JLabel();
        txtCodIba = new javax.swing.JTextField();
        lblIde2 = new javax.swing.JLabel();
        txtCodSwi = new javax.swing.JTextField();
        lblIde3 = new javax.swing.JLabel();
        txtCodAba = new javax.swing.JTextField();
        lblTelCli2 = new javax.swing.JLabel();
        optProCtaEmp = new javax.swing.JRadioButton();
        optProCtaPrvLoc = new javax.swing.JRadioButton();
        optProCtaExp = new javax.swing.JRadioButton();
        lblBen = new javax.swing.JLabel();
        txtCodPrvLoc = new javax.swing.JTextField();
        txtNomPrvLoc = new javax.swing.JTextField();
        butPrvLoc = new javax.swing.JButton();
        lblBen1 = new javax.swing.JLabel();
        txtCodExp = new javax.swing.JTextField();
        txtNomExp = new javax.swing.JTextField();
        butExp = new javax.swing.JButton();
        lblBen2 = new javax.swing.JLabel();
        txtCodCiuBco = new javax.swing.JTextField();
        txtNomCiuBco = new javax.swing.JTextField();
        butCiuBco = new javax.swing.JButton();
        lblWebCli2 = new javax.swing.JLabel();
        txtDirBco = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtRucBco = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaObs1 = new javax.swing.JTextArea();
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        lblTit.setFont(new java.awt.Font("SansSerif", 1, 11));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Maestro Clientes"); // NOI18N
        lblTit.setName(""); // NOI18N
        lblTit.setPreferredSize(new java.awt.Dimension(95, 12));
        getContentPane().add(lblTit, java.awt.BorderLayout.NORTH);

        panCon.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        panGen.setLayout(null);

        lblCodCli.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        lblCodCli.setText("Codigo :"); // NOI18N
        lblCodCli.setToolTipText("Codigo del cliente/proveedor"); // NOI18N
        panGen.add(lblCodCli);
        lblCodCli.setBounds(4, 4, 100, 20);

        lblIde.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        lblIde.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblIde.setText("Numero de cuenta:"); // NOI18N
        panGen.add(lblIde);
        lblIde.setBounds(4, 23, 120, 20);

        lblDirCli.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        lblDirCli.setText("Tipo de cuenta:"); // NOI18N
        lblDirCli.setToolTipText("Direccion del cliente/proveedor"); // NOI18N
        panGen.add(lblDirCli);
        lblDirCli.setBounds(330, 21, 100, 20);

        lblFaxCli.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblFaxCli.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblFaxCli.setText("Firma autorizada 1:"); // NOI18N
        lblFaxCli.setToolTipText("Fax del cliente/proveedor"); // NOI18N
        panGen.add(lblFaxCli);
        lblFaxCli.setBounds(4, 183, 120, 16);

        lblWebCli.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblWebCli.setText("Cargo firma autorizada 1:"); // NOI18N
        lblWebCli.setToolTipText("Direccion de la pagina del cliente/proveedor"); // NOI18N
        panGen.add(lblWebCli);
        lblWebCli.setBounds(4, 202, 130, 20);
        panGen.add(txtCodCtaBan);
        txtCodCtaBan.setBounds(130, 2, 140, 20);

        txtFirAut1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFirAut1FocusGained(evt);
            }
        });
        panGen.add(txtFirAut1);
        txtFirAut1.setBounds(130, 182, 360, 20);

        txtCarFirAut1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCarFirAut1FocusGained(evt);
            }
        });
        panGen.add(txtCarFirAut1);
        txtCarFirAut1.setBounds(130, 202, 360, 20);
        panGen.add(txtNumCtaBan);
        txtNumCtaBan.setBounds(130, 22, 160, 20);

        lblCiu.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblCiu.setText("Firma autorizada 2:"); // NOI18N
        panGen.add(lblCiu);
        lblCiu.setBounds(4, 222, 100, 20);

        lblDirCli1.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblDirCli1.setText("Ejecutivo asignado:"); // NOI18N
        lblDirCli1.setToolTipText("Direccion del cliente/proveedor"); // NOI18N
        panGen.add(lblDirCli1);
        lblDirCli1.setBounds(4, 144, 120, 20);

        txtEjeAsi.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEjeAsiFocusGained(evt);
            }
        });
        panGen.add(txtEjeAsi);
        txtEjeAsi.setBounds(130, 144, 550, 20);

        lblTelCli1.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblTelCli1.setText("Firma en conjunto:"); // NOI18N
        lblTelCli1.setToolTipText("Telefonos del cliente/proveedor"); // NOI18N
        panGen.add(lblTelCli1);
        lblTelCli1.setBounds(4, 164, 100, 20);

        txtFirAut2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFirAut2FocusGained(evt);
            }
        });
        panGen.add(txtFirAut2);
        txtFirAut2.setBounds(130, 222, 360, 20);

        lblCiu1.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblCiu1.setText("Banco:"); // NOI18N
        panGen.add(lblCiu1);
        lblCiu1.setBounds(4, 44, 90, 20);
        panGen.add(txtCodBco);
        txtCodBco.setBounds(97, 42, 32, 20);

        txtDesCorBco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorBcoActionPerformed(evt);
            }
        });
        txtDesCorBco.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorBcoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorBcoFocusLost(evt);
            }
        });
        panGen.add(txtDesCorBco);
        txtDesCorBco.setBounds(130, 42, 80, 20);

        txtDesLarBco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarBcoActionPerformed(evt);
            }
        });
        txtDesLarBco.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarBcoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarBcoFocusLost(evt);
            }
        });
        panGen.add(txtDesLarBco);
        txtDesLarBco.setBounds(210, 42, 150, 20);

        butCodCtaCtb.setLabel("..."); // NOI18N
        butCodCtaCtb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCodCtaCtbActionPerformed(evt);
            }
        });
        panGen.add(butCodCtaCtb);
        butCodCtaCtb.setBounds(270, 2, 20, 20);

        lblSubCla.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblSubCla.setText("Cuenta contable:"); // NOI18N
        panGen.add(lblSubCla);
        lblSubCla.setBounds(4, 260, 88, 20);
        panGen.add(txtCodCtaCtb);
        txtCodCtaCtb.setBounds(100, 262, 32, 20);

        txtNomCtaCtb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomCtaCtbActionPerformed(evt);
            }
        });
        txtNomCtaCtb.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomCtaCtbFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomCtaCtbFocusLost(evt);
            }
        });
        panGen.add(txtNomCtaCtb);
        txtNomCtaCtb.setBounds(250, 262, 400, 20);

        txtNumCtaCtb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumCtaCtbActionPerformed(evt);
            }
        });
        txtNumCtaCtb.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNumCtaCtbFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNumCtaCtbFocusLost(evt);
            }
        });
        panGen.add(txtNumCtaCtb);
        txtNumCtaCtb.setBounds(130, 262, 120, 20);

        butCtaCtb.setLabel("..."); // NOI18N
        butCtaCtb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCtaCtbActionPerformed(evt);
            }
        });
        panGen.add(butCtaCtb);
        butCtaCtb.setBounds(650, 262, 20, 20);

        optTipCtaAho.setFont(new java.awt.Font("SansSerif", 0, 11));
        optTipCtaAho.setText("Ahorros");
        optTipCtaAho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTipCtaAhoActionPerformed(evt);
            }
        });
        panGen.add(optTipCtaAho);
        optTipCtaAho.setBounds(440, 25, 80, 16);

        optTipCtaCte.setFont(new java.awt.Font("SansSerif", 0, 11));
        optTipCtaCte.setSelected(true);
        optTipCtaCte.setText("Corriente");
        optTipCtaCte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTipCtaCteActionPerformed(evt);
            }
        });
        panGen.add(optTipCtaCte);
        optTipCtaCte.setBounds(520, 25, 80, 16);

        optFirConSi.setText("Si");
        optFirConSi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optFirConSiActionPerformed(evt);
            }
        });
        panGen.add(optFirConSi);
        optFirConSi.setBounds(130, 164, 40, 16);

        optFirConNo.setSelected(true);
        optFirConNo.setText("No");
        optFirConNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optFirConNoActionPerformed(evt);
            }
        });
        panGen.add(optFirConNo);
        optFirConNo.setBounds(180, 164, 50, 16);

        lblWebCli1.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblWebCli1.setText("Cargo firma autorizada 2:"); // NOI18N
        lblWebCli1.setToolTipText("Direccion de la pagina del cliente/proveedor"); // NOI18N
        panGen.add(lblWebCli1);
        lblWebCli1.setBounds(4, 240, 130, 20);

        txtCarFirAut2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCarFirAut2FocusGained(evt);
            }
        });
        panGen.add(txtCarFirAut2);
        txtCarFirAut2.setBounds(130, 242, 360, 20);

        butBco1.setLabel("..."); // NOI18N
        butBco1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBco1ActionPerformed(evt);
            }
        });
        panGen.add(butBco1);
        butBco1.setBounds(360, 42, 20, 20);

        lblIde1.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblIde1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblIde1.setText("Codigo ABA:"); // NOI18N
        panGen.add(lblIde1);
        lblIde1.setBounds(272, 82, 66, 20);
        panGen.add(txtCodIba);
        txtCodIba.setBounds(130, 82, 140, 20);

        lblIde2.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblIde2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblIde2.setText("Codigo IBAN:"); // NOI18N
        panGen.add(lblIde2);
        lblIde2.setBounds(4, 82, 120, 20);
        panGen.add(txtCodSwi);
        txtCodSwi.setBounds(550, 82, 130, 20);

        lblIde3.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblIde3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblIde3.setText("Codigo SWIFT:"); // NOI18N
        panGen.add(lblIde3);
        lblIde3.setBounds(470, 82, 80, 20);
        panGen.add(txtCodAba);
        txtCodAba.setBounds(338, 82, 130, 20);

        lblTelCli2.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblTelCli2.setText("Propietario de la cuenta:"); // NOI18N
        lblTelCli2.setToolTipText("Telefonos del cliente/proveedor"); // NOI18N
        panGen.add(lblTelCli2);
        lblTelCli2.setBounds(4, 106, 130, 20);

        optProCtaEmp.setFont(new java.awt.Font("SansSerif", 0, 11));
        optProCtaEmp.setSelected(true);
        optProCtaEmp.setText("Empresa");
        optProCtaEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optProCtaEmpActionPerformed(evt);
            }
        });
        panGen.add(optProCtaEmp);
        optProCtaEmp.setBounds(130, 104, 110, 16);

        optProCtaPrvLoc.setFont(new java.awt.Font("SansSerif", 0, 11));
        optProCtaPrvLoc.setText("Proveedor local");
        optProCtaPrvLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optProCtaPrvLocActionPerformed(evt);
            }
        });
        panGen.add(optProCtaPrvLoc);
        optProCtaPrvLoc.setBounds(270, 104, 120, 16);

        optProCtaExp.setFont(new java.awt.Font("SansSerif", 0, 11));
        optProCtaExp.setText("Exportador");
        optProCtaExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optProCtaExpActionPerformed(evt);
            }
        });
        panGen.add(optProCtaExp);
        optProCtaExp.setBounds(430, 104, 120, 16);

        lblBen.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblBen.setText("Proveedor local:");
        lblBen.setToolTipText("Beneficiario");
        panGen.add(lblBen);
        lblBen.setBounds(4, 124, 100, 20);

        txtCodPrvLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodPrvLocActionPerformed(evt);
            }
        });
        txtCodPrvLoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodPrvLocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodPrvLocFocusLost(evt);
            }
        });
        panGen.add(txtCodPrvLoc);
        txtCodPrvLoc.setBounds(130, 124, 50, 20);

        txtNomPrvLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomPrvLocActionPerformed(evt);
            }
        });
        txtNomPrvLoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomPrvLocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomPrvLocFocusLost(evt);
            }
        });
        panGen.add(txtNomPrvLoc);
        txtNomPrvLoc.setBounds(180, 124, 170, 20);

        butPrvLoc.setText("...");
        butPrvLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrvLocActionPerformed(evt);
            }
        });
        panGen.add(butPrvLoc);
        butPrvLoc.setBounds(350, 124, 20, 20);

        lblBen1.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblBen1.setText("Exportador:");
        lblBen1.setToolTipText("Beneficiario");
        panGen.add(lblBen1);
        lblBen1.setBounds(370, 124, 62, 20);

        txtCodExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodExpActionPerformed(evt);
            }
        });
        txtCodExp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodExpFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodExpFocusLost(evt);
            }
        });
        panGen.add(txtCodExp);
        txtCodExp.setBounds(430, 124, 50, 20);

        txtNomExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomExpActionPerformed(evt);
            }
        });
        txtNomExp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomExpFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomExpFocusLost(evt);
            }
        });
        panGen.add(txtNomExp);
        txtNomExp.setBounds(480, 124, 180, 20);

        butExp.setText("...");
        butExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butExpActionPerformed(evt);
            }
        });
        panGen.add(butExp);
        butExp.setBounds(660, 124, 20, 20);

        lblBen2.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblBen2.setText("Ciudad del banco:");
        lblBen2.setToolTipText("Beneficiario");
        panGen.add(lblBen2);
        lblBen2.setBounds(380, 43, 90, 20);

        txtCodCiuBco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodCiuBcoActionPerformed(evt);
            }
        });
        txtCodCiuBco.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodCiuBcoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodCiuBcoFocusLost(evt);
            }
        });
        panGen.add(txtCodCiuBco);
        txtCodCiuBco.setBounds(470, 42, 30, 20);

        txtNomCiuBco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomCiuBcoActionPerformed(evt);
            }
        });
        txtNomCiuBco.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomCiuBcoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomCiuBcoFocusLost(evt);
            }
        });
        panGen.add(txtNomCiuBco);
        txtNomCiuBco.setBounds(500, 42, 160, 20);

        butCiuBco.setText("...");
        butCiuBco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCiuBcoActionPerformed(evt);
            }
        });
        panGen.add(butCiuBco);
        butCiuBco.setBounds(660, 42, 20, 20);

        lblWebCli2.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblWebCli2.setText("Direccion del banco:"); // NOI18N
        lblWebCli2.setToolTipText("Direccion de la pagina del cliente/proveedor"); // NOI18N
        panGen.add(lblWebCli2);
        lblWebCli2.setBounds(4, 60, 120, 20);

        txtDirBco.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDirBcoFocusGained(evt);
            }
        });
        panGen.add(txtDirBco);
        txtDirBco.setBounds(130, 62, 338, 20);

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 11));
        jLabel1.setText("Ruc del banco:");
        panGen.add(jLabel1);
        jLabel1.setBounds(472, 70, 80, 14);
        panGen.add(txtRucBco);
        txtRucBco.setBounds(550, 62, 130, 20);

        jPanel1.add(panGen, java.awt.BorderLayout.CENTER);

        jPanel4.setPreferredSize(new java.awt.Dimension(100, 48));
        jPanel4.setRequestFocusEnabled(false);
        jPanel4.setLayout(new java.awt.GridLayout(1, 1));

        jPanel5.setPreferredSize(new java.awt.Dimension(296, 90));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 11));
        jLabel3.setText("  Observacion:");
        jLabel3.setPreferredSize(new java.awt.Dimension(130, 0));
        jPanel5.add(jLabel3, java.awt.BorderLayout.WEST);

        jPanel6.setLayout(new java.awt.GridLayout(1, 0));

        txaObs1.setColumns(20);
        txaObs1.setLineWrap(true);
        txaObs1.setRows(5);
        jScrollPane1.setViewportView(txaObs1);

        jPanel6.add(jScrollPane1);

        jPanel5.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel5);

        jPanel1.add(jPanel4, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("General", jPanel1);

        panCon.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setPreferredSize(new java.awt.Dimension(100, 44));
        panBar.setLayout(new java.awt.BorderLayout());
        panCon.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panCon, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
// TODO add your handling code here:
    configurarFrm();
    agregarDocLis();
}//GEN-LAST:event_formInternalFrameOpened

private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
    // TODO add your handling code here:
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="¿Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                //Cerrar la conexión si está abierta.
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e)
        {
            dispose();
        }
}//GEN-LAST:event_exitForm

private void txtDesCorBcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorBcoActionPerformed
    // TODO add your handling code here:
    txtDesCorBco.transferFocus();
}//GEN-LAST:event_txtDesCorBcoActionPerformed

private void txtDesCorBcoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorBcoFocusGained
    // TODO add your handling code here:
    strDesCorBco=txtDesCorBco.getText();
    txtDesCorBco.selectAll();
}//GEN-LAST:event_txtDesCorBcoFocusGained

private void txtDesCorBcoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorBcoFocusLost
    // TODO add your handling code here:
    //Validar el contenido de la celda sólo si ha cambiado.
    if (!txtDesCorBco.getText().equalsIgnoreCase(strDesCorBco)) {
        if (txtDesCorBco.getText().equals("")) {
            txtCodBco.setText("");
            txtDesLarBco.setText("");

            txtCodCtaCtb.setText("");
            txtNumCtaCtb.setText("");
            txtNomCtaCtb.setText("");

        } else {
            mostrarVenConBco(1);
        }
    } else
        txtDesCorBco.setText(strDesCorBco);
}//GEN-LAST:event_txtDesCorBcoFocusLost

private void txtDesLarBcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarBcoActionPerformed
    // TODO add your handling code here:
    txtDesLarBco.transferFocus();
}//GEN-LAST:event_txtDesLarBcoActionPerformed

private void txtDesLarBcoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarBcoFocusGained
    // TODO add your handling code here:
    strDesLarBco=txtDesLarBco.getText();
    txtDesLarBco.selectAll();
}//GEN-LAST:event_txtDesLarBcoFocusGained

private void txtDesLarBcoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarBcoFocusLost
    // TODO add your handling code here:
    //Validar el contenido de la celda sólo si ha cambiado.
    if (!txtDesLarBco.getText().equalsIgnoreCase(strDesLarBco)) {
        if (txtDesLarBco.getText().equals("")) {
            txtCodBco.setText("");
            txtDesCorBco.setText("");
            
            txtCodCtaCtb.setText("");
            txtNumCtaCtb.setText("");
            txtNomCtaCtb.setText("");

        } else {
            mostrarVenConBco(2);
        }
    } else
        txtDesLarBco.setText(strDesLarBco);
}//GEN-LAST:event_txtDesLarBcoFocusLost

private void butCodCtaCtbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCodCtaCtbActionPerformed
    // TODO add your handling code here:
    mostrarVenConCtaBan(0);
}//GEN-LAST:event_butCodCtaCtbActionPerformed

private void txtNomCtaCtbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomCtaCtbActionPerformed
    // TODO add your handling code here:
    txtNomCtaCtb.transferFocus();
}//GEN-LAST:event_txtNomCtaCtbActionPerformed

private void txtNomCtaCtbFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCtaCtbFocusGained
    // TODO add your handling code here:
    strDesLarCtaCtb=txtNomCtaCtb.getText();
    txtNomCtaCtb.selectAll();
}//GEN-LAST:event_txtNomCtaCtbFocusGained

private void txtNomCtaCtbFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCtaCtbFocusLost
    // TODO add your handling code here:
    //Validar el contenido de la celda sólo si ha cambiado.
    if (!txtNomCtaCtb.getText().equalsIgnoreCase(strDesLarCtaCtb)) {
        if (txtNomCtaCtb.getText().equals("")) {
            txtCodCtaCtb.setText("");
            txtNumCtaCtb.setText("");
        } else {
            mostrarVenConCtaCtb(2);
        }
    } else
        txtNomCtaCtb.setText(strDesLarCtaCtb);
}//GEN-LAST:event_txtNomCtaCtbFocusLost

private void txtNumCtaCtbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumCtaCtbActionPerformed
    // TODO add your handling code here:
    txtNumCtaCtb.transferFocus();
}//GEN-LAST:event_txtNumCtaCtbActionPerformed

private void txtNumCtaCtbFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumCtaCtbFocusGained
    // TODO add your handling code here:
    strDesCorCtaCtb=txtNumCtaCtb.getText();
    txtNumCtaCtb.selectAll();
}//GEN-LAST:event_txtNumCtaCtbFocusGained

private void txtNumCtaCtbFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumCtaCtbFocusLost
    // TODO add your handling code here:
    //Validar el contenido de la celda sólo si ha cambiado.
    if (!txtNumCtaCtb.getText().equalsIgnoreCase(strDesCorCtaCtb)) {
        if (txtNumCtaCtb.getText().equals("")) {
            txtCodCtaCtb.setText("");
            txtNomCtaCtb.setText("");
        } else {
            mostrarVenConCtaCtb(1);
        }
    } else
        txtNumCtaCtb.setText(strDesCorCtaCtb);
}//GEN-LAST:event_txtNumCtaCtbFocusLost

private void butCtaCtbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCtaCtbActionPerformed
    // TODO add your handling code here:
    mostrarVenConCtaCtb(0);
}//GEN-LAST:event_butCtaCtbActionPerformed

private void optTipCtaAhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTipCtaAhoActionPerformed
    // TODO add your handling code here:
    if(optTipCtaAho.isSelected())
        optTipCtaCte.setSelected(false);
    else
        optTipCtaCte.setSelected(true);
}//GEN-LAST:event_optTipCtaAhoActionPerformed

private void optTipCtaCteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTipCtaCteActionPerformed
    // TODO add your handling code here:
    if(optTipCtaCte.isSelected())
        optTipCtaAho.setSelected(false);
    else
        optTipCtaAho.setSelected(true);
}//GEN-LAST:event_optTipCtaCteActionPerformed

private void optFirConSiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optFirConSiActionPerformed
    // TODO add your handling code here:
    if(optFirConSi.isSelected())
        optFirConNo.setSelected(false);
    else
        optFirConNo.setSelected(true);
}//GEN-LAST:event_optFirConSiActionPerformed

private void optFirConNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optFirConNoActionPerformed
    // TODO add your handling code here:
    if(optFirConNo.isSelected())
        optFirConSi.setSelected(false);
    else
        optFirConSi.setSelected(true);
}//GEN-LAST:event_optFirConNoActionPerformed

private void butBco1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBco1ActionPerformed
    // TODO add your handling code here:
    mostrarVenConBco(0);
}//GEN-LAST:event_butBco1ActionPerformed

private void optProCtaEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optProCtaEmpActionPerformed
    // TODO add your handling code here:
    if(optProCtaEmp.isSelected()){
        optProCtaPrvLoc.setSelected(false);
        optProCtaExp.setSelected(false);
    }
    else{
        optProCtaEmp.setSelected(true);
        optProCtaPrvLoc.setSelected(false);
        optProCtaExp.setSelected(false);
    }
}//GEN-LAST:event_optProCtaEmpActionPerformed

private void optProCtaPrvLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optProCtaPrvLocActionPerformed
    if(optProCtaPrvLoc.isSelected()){
        optProCtaEmp.setSelected(false);
        optProCtaExp.setSelected(false);
    }
    else{
        optProCtaPrvLoc.setSelected(true);
        optProCtaEmp.setSelected(false);
        optProCtaExp.setSelected(false);
    }
}//GEN-LAST:event_optProCtaPrvLocActionPerformed

private void optProCtaExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optProCtaExpActionPerformed
    // TODO add your handling code here:
    if(optProCtaExp.isSelected()){
        optProCtaPrvLoc.setSelected(false);
        optProCtaEmp.setSelected(false);
    }
    else{
        optProCtaExp.setSelected(true);
        optProCtaPrvLoc.setSelected(false);
        optProCtaEmp.setSelected(false);
    }
}//GEN-LAST:event_optProCtaExpActionPerformed

private void txtCodPrvLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodPrvLocActionPerformed
    txtCodPrvLoc.transferFocus();
}//GEN-LAST:event_txtCodPrvLocActionPerformed

private void txtCodPrvLocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvLocFocusLost
    if (txtCodPrvLoc.isEditable()) {
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtCodPrvLoc.getText().equalsIgnoreCase(strCodPrvLoc)) {
            if (txtCodPrvLoc.getText().equals("")) {
                txtCodPrvLoc.setText("");
                txtNomPrvLoc.setText("");
            } else {
                mostrarVenConPrvLoc(1);
            }
        } else
            txtCodPrvLoc.setText(strCodPrvLoc);
    }
}//GEN-LAST:event_txtCodPrvLocFocusLost

private void txtNomPrvLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomPrvLocActionPerformed
    txtNomPrvLoc.transferFocus();
}//GEN-LAST:event_txtNomPrvLocActionPerformed

private void txtNomPrvLocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPrvLocFocusGained
    strNomPrvLoc=txtNomPrvLoc.getText();
    txtNomPrvLoc.selectAll();
}//GEN-LAST:event_txtNomPrvLocFocusGained

private void txtNomPrvLocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPrvLocFocusLost
    if (txtNomPrvLoc.isEditable()) {
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtNomPrvLoc.getText().equalsIgnoreCase(strNomPrvLoc)) {
            if (txtNomPrvLoc.getText().equals("")) {
                txtCodPrvLoc.setText("");
                txtNomPrvLoc.setText("");
            } else {
                mostrarVenConPrvLoc(2);
            }
        } else
            txtNomPrvLoc.setText(strNomPrvLoc);
    }
}//GEN-LAST:event_txtNomPrvLocFocusLost

private void butPrvLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrvLocActionPerformed
    strCodPrvLoc=txtCodPrvLoc.getText();
    mostrarVenConPrvLoc(0);

}//GEN-LAST:event_butPrvLocActionPerformed

private void txtCodExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodExpActionPerformed
    // TODO add your handling code here:
    txtCodExp.transferFocus();
}//GEN-LAST:event_txtCodExpActionPerformed

private void txtCodExpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodExpFocusLost
    // TODO add your handling code here:
    if (txtCodExp.isEditable()) {
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtCodExp.getText().equalsIgnoreCase(strCodExp)) {
            if (txtCodExp.getText().equals("")) {
                txtCodExp.setText("");
                txtNomExp.setText("");
            } else {
                mostrarVenConExp(1);
            }
        } else
            txtCodExp.setText(strCodExp);
    }
}//GEN-LAST:event_txtCodExpFocusLost

private void txtNomExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomExpActionPerformed
    // TODO add your handling code here:
    txtNomExp.transferFocus();
}//GEN-LAST:event_txtNomExpActionPerformed

private void txtNomExpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomExpFocusGained
    // TODO add your handling code here:
    strNomExp=txtNomExp.getText();
    txtNomExp.selectAll();
}//GEN-LAST:event_txtNomExpFocusGained

private void txtNomExpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomExpFocusLost
    // TODO add your handling code here:
    if (txtNomExp.isEditable()) {
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtNomExp.getText().equalsIgnoreCase(strNomExp)) {
            if (txtNomExp.getText().equals("")) {
                txtCodExp.setText("");
                txtNomExp.setText("");
            } else {
                mostrarVenConExp(2);
            }
        } else
            txtNomExp.setText(strNomExp);
    }
}//GEN-LAST:event_txtNomExpFocusLost

private void butExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butExpActionPerformed
    // TODO add your handling code here:
    strCodExp=txtCodExp.getText();
    mostrarVenConExp(0);

}//GEN-LAST:event_butExpActionPerformed

private void txtCodPrvLocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvLocFocusGained
    // TODO add your handling code here:
    txtCodPrvLoc.selectAll();
    txtCodPrvLoc.requestFocus();
}//GEN-LAST:event_txtCodPrvLocFocusGained

private void txtEjeAsiFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEjeAsiFocusGained
    // TODO add your handling code here:
    txtEjeAsi.selectAll();
    txtEjeAsi.requestFocus();
}//GEN-LAST:event_txtEjeAsiFocusGained

private void txtFirAut1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFirAut1FocusGained
    // TODO add your handling code here:
    txtFirAut1.selectAll();
    txtFirAut1.requestFocus();
}//GEN-LAST:event_txtFirAut1FocusGained

private void txtCarFirAut1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCarFirAut1FocusGained
    // TODO add your handling code here:
    txtCarFirAut1.selectAll();
    txtCarFirAut1.requestFocus();
}//GEN-LAST:event_txtCarFirAut1FocusGained

private void txtFirAut2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFirAut2FocusGained
    // TODO add your handling code here:
    txtFirAut2.selectAll();
    txtFirAut2.requestFocus();
}//GEN-LAST:event_txtFirAut2FocusGained

private void txtCarFirAut2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCarFirAut2FocusGained
    // TODO add your handling code here:
        txtCarFirAut2.selectAll();
        txtCarFirAut2.requestFocus();
}//GEN-LAST:event_txtCarFirAut2FocusGained

private void txtCodExpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodExpFocusGained
    // TODO add your handling code here:
    txtCodExp.selectAll();
    txtCodExp.requestFocus();
}//GEN-LAST:event_txtCodExpFocusGained

private void txtCodCiuBcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodCiuBcoActionPerformed
    // TODO add your handling code here:
    txtCodCiuBco.transferFocus();
}//GEN-LAST:event_txtCodCiuBcoActionPerformed

private void txtCodCiuBcoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCiuBcoFocusGained
    // TODO add your handling code here:
    txtCodCiuBco.selectAll();
    txtCodCiuBco.requestFocus();
}//GEN-LAST:event_txtCodCiuBcoFocusGained

private void txtCodCiuBcoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCiuBcoFocusLost
    // TODO add your handling code here:
    if (txtCodCiuBco.isEditable()) {
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtCodCiuBco.getText().equalsIgnoreCase(strCodCiuBco)) {
            if (txtCodCiuBco.getText().equals("")) {
                txtCodCiuBco.setText("");
                txtNomCiuBco.setText("");
            } else {
                mostrarVenConCiuBco(1);
            }
        } else
            txtCodCiuBco.setText(strCodCiuBco);
    }
}//GEN-LAST:event_txtCodCiuBcoFocusLost

private void txtNomCiuBcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomCiuBcoActionPerformed
    // TODO add your handling code here:
    txtNomCiuBco.transferFocus();
}//GEN-LAST:event_txtNomCiuBcoActionPerformed

private void txtNomCiuBcoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCiuBcoFocusGained
    // TODO add your handling code here:
    strNomCiuBco=txtNomCiuBco.getText();
    txtNomCiuBco.selectAll();
}//GEN-LAST:event_txtNomCiuBcoFocusGained

private void txtNomCiuBcoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCiuBcoFocusLost
    // TODO add your handling code here:
    if (txtNomCiuBco.isEditable()) {
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtNomCiuBco.getText().equalsIgnoreCase(strNomCiuBco)) {
            if (txtNomCiuBco.getText().equals("")) {
                txtCodCiuBco.setText("");
                txtNomCiuBco.setText("");
            } else {
                mostrarVenConCiuBco(2);
            }
        } else
            txtNomCiuBco.setText(strNomCiuBco);
    }
}//GEN-LAST:event_txtNomCiuBcoFocusLost

private void butCiuBcoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCiuBcoActionPerformed
    // TODO add your handling code here:
    strCodCiuBco=txtCodCiuBco.getText();
    mostrarVenConCiuBco(0);

}//GEN-LAST:event_butCiuBcoActionPerformed

private void txtDirBcoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDirBcoFocusGained
    // TODO add your handling code here:
}//GEN-LAST:event_txtDirBcoFocusGained

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butBco1;
    private javax.swing.JButton butCiuBco;
    private javax.swing.JButton butCodCtaCtb;
    private javax.swing.JButton butCtaCtb;
    private javax.swing.JButton butExp;
    private javax.swing.JButton butPrvLoc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBen;
    private javax.swing.JLabel lblBen1;
    private javax.swing.JLabel lblBen2;
    private javax.swing.JLabel lblCiu;
    private javax.swing.JLabel lblCiu1;
    private javax.swing.JLabel lblCodCli;
    private javax.swing.JLabel lblDirCli;
    private javax.swing.JLabel lblDirCli1;
    private javax.swing.JLabel lblFaxCli;
    private javax.swing.JLabel lblIde;
    private javax.swing.JLabel lblIde1;
    private javax.swing.JLabel lblIde2;
    private javax.swing.JLabel lblIde3;
    private javax.swing.JLabel lblSubCla;
    private javax.swing.JLabel lblTelCli1;
    private javax.swing.JLabel lblTelCli2;
    private javax.swing.JLabel lblTit;
    private javax.swing.JLabel lblWebCli;
    private javax.swing.JLabel lblWebCli1;
    private javax.swing.JLabel lblWebCli2;
    private javax.swing.JRadioButton optFirConNo;
    private javax.swing.JRadioButton optFirConSi;
    private javax.swing.JRadioButton optProCtaEmp;
    private javax.swing.JRadioButton optProCtaExp;
    private javax.swing.JRadioButton optProCtaPrvLoc;
    private javax.swing.JRadioButton optTipCtaAho;
    private javax.swing.JRadioButton optTipCtaCte;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panCon;
    private javax.swing.JPanel panGen;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTextArea txaObs1;
    private javax.swing.JTextField txtCarFirAut1;
    private javax.swing.JTextField txtCarFirAut2;
    private javax.swing.JTextField txtCodAba;
    private javax.swing.JTextField txtCodBco;
    private javax.swing.JTextField txtCodCiuBco;
    private javax.swing.JTextField txtCodCtaBan;
    private javax.swing.JTextField txtCodCtaCtb;
    private javax.swing.JTextField txtCodExp;
    private javax.swing.JTextField txtCodIba;
    private javax.swing.JTextField txtCodPrvLoc;
    private javax.swing.JTextField txtCodSwi;
    private javax.swing.JTextField txtDesCorBco;
    private javax.swing.JTextField txtDesLarBco;
    private javax.swing.JTextField txtDirBco;
    private javax.swing.JTextField txtEjeAsi;
    private javax.swing.JTextField txtFirAut1;
    private javax.swing.JTextField txtFirAut2;
    private javax.swing.JTextField txtNomCiuBco;
    private javax.swing.JTextField txtNomCtaCtb;
    private javax.swing.JTextField txtNomExp;
    private javax.swing.JTextField txtNomPrvLoc;
    private javax.swing.JTextField txtNumCtaBan;
    private javax.swing.JTextField txtNumCtaCtb;
    private javax.swing.JTextField txtRucBco;
    // End of variables declaration//GEN-END:variables


    /** Configurar el formulario. */
    private boolean configurarFrm(){
        boolean blnRes=true;
        try{
            //Inicializar objetos.
            objUti=new ZafUtil();
            objTooBar=new MiToolBar(this);
            
            objDocLis=new ZafDocLis();
            panBar.add(objTooBar);
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.1.2");
            lblTit.setText(strAux);
            txtCodCtaBan.setBackground(objParSis.getColorCamposSistema());
            txtNumCtaBan.setBackground(objParSis.getColorCamposObligatorios());

            txtCodBco.setBackground(objParSis.getColorCamposObligatorios());
            txtDesCorBco.setBackground(objParSis.getColorCamposObligatorios());
            txtDesLarBco.setBackground(objParSis.getColorCamposObligatorios());

            configurarVenConBco();
            configurarVenConCtaCtb();
            configurarVenConCtaBan();
            configurarVenConPrvLoc();
            configurarVenConExp();
            configurarVenConCiuBco();

            
            txtCodBco.setVisible(false);
            txtCodCtaCtb.setVisible(false);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta clase implementa la interface DocumentListener que observa los cambios que
     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
     * Se la usa en el sistema para determinar si existe algún cambio que se deba grabar
     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
     * presentará un mensaje advirtiendo que si no guarda los cambios los perderá.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener 
    {
        public void changedUpdate(javax.swing.event.DocumentEvent evt)        {
            blnHayCam=true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }
    }
    
    
    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private void agregarDocLis()
    {
        txtCodCtaBan.getDocument().addDocumentListener(objDocLis);
        txtNumCtaBan.getDocument().addDocumentListener(objDocLis);
        txtDesCorBco.getDocument().addDocumentListener(objDocLis);
        txtDesLarBco.getDocument().addDocumentListener(objDocLis);
        txtEjeAsi.getDocument().addDocumentListener(objDocLis);
        txtFirAut1.getDocument().addDocumentListener(objDocLis);
        txtCarFirAut1.getDocument().addDocumentListener(objDocLis);
        txtFirAut2.getDocument().addDocumentListener(objDocLis);
        txtCarFirAut2.getDocument().addDocumentListener(objDocLis);
        txtNumCtaCtb.getDocument().addDocumentListener(objDocLis);
        txtNomCtaCtb.getDocument().addDocumentListener(objDocLis);
    } 
    
    

    
    /**
     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
     * insertar, consultar, modificar, eliminar, etc. Además de los botones de navegación
     * que permiten desplazarse al primero, anterior, siguiente y último registro.
     */
    private class MiToolBar extends ZafToolBar
    {
        public MiToolBar(javax.swing.JInternalFrame ifrFrm)
        {
            super(ifrFrm, objParSis);
        }

        public boolean aceptar() {
            return true;
        }

        public boolean afterAceptar() {
            return true;
        }

        public boolean afterAnular() {
            return true;
        }

        public boolean afterCancelar() {
            return true;
        }

        public boolean afterConsultar() {
            return true;
        }

        public boolean afterEliminar() {
            return true;
        }

        public boolean afterImprimir() {
            return true;
        }

        public boolean afterInsertar() {
            blnHayCam=false;
            objTooBar.setEstado('w');
            consultarReg();
            blnHayCam=false;
            return true;
        }

        public boolean afterModificar() {
            blnHayCam=false;
            objTooBar.setEstado('w');
            cargarReg();
            return true;
        }

        public boolean afterVistaPreliminar() {
            return true;
        }

        public boolean anular() {
            if (!anularReg())
                return false;
            objTooBar.setEstadoRegistro("Anulado");
            blnHayCam=false;
            return true;
        }

        public boolean beforeAceptar() {
            return true;
        }

        public boolean beforeAnular() {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible anular un documento eliminado.");
                return false;
            }
            if (strAux.equals("Anulado"))
            {
                mostrarMsgInf("El documento ya está ANULADO.\nNo es posible anular un documento anulado.");
                return false;
            }
            return true;
        }

        public boolean beforeCancelar() {
            return true;
        }

        public boolean beforeConsultar() {
            return true;
        }

        public boolean beforeEliminar() {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                mostrarMsgInf("El documento ya está ELIMINADO.\nNo es posible eliminar un documento eliminado.");
                return false;
            }
            return true;
        }

        public boolean beforeImprimir() {
            return true;
        }

        public boolean beforeInsertar() {
            if (!isCamVal())
                return false;
            return true;
        }

        public boolean beforeModificar() {
            boolean blnRes=true;
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible modificar un documento eliminado.");
                blnRes=false;
            }
            if (strAux.equals("Anulado"))
            {
                mostrarMsgInf("El documento está ANULADO.\nNo es posible modificar un documento anulado.");
                blnRes=false;
            }
            if (!isCamVal())
                return false;
            return blnRes;
        }

        public boolean beforeVistaPreliminar() {
            return true;
        }

        public boolean cancelar() {
            boolean blnRes=true;
            try
            {
                if (blnHayCam)
                {
                    if (objTooBar.getEstado()=='n' || objTooBar.getEstado()=='m')
                    {
                        if (!isRegPro())
                            return false;
                    }
                }
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            limpiarFrm();
            blnHayCam=false;
            return blnRes;
        }

        public void clickAceptar() {
            
        }

        public void clickAnterior() {
            try
            {
                if (!rstCab.isFirst())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.previous();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.previous();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnular() {
            
        }

        public void clickCancelar() {
            
        }

        public void clickConsultar() {
            txtCodCtaBan.requestFocus();
        }

        public void clickEliminar() {
            
        }

        public void clickFin() {
            try
            {
                if (!rstCab.isLast())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.last();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.last();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickImprimir() {
            
        }

        public void clickInicio() {
            try
            {
                if (!rstCab.isFirst())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.first();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.first();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickInsertar() {
            try{
                if (blnHayCam){
                    isRegPro();
                }
                limpiarFrm();
                txtCodCtaBan.setEditable(false);
                txtNumCtaBan.selectAll();
                txtNumCtaBan.requestFocus();
                //Inicializar las variables que indican cambios.
                blnHayCam=false;
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickModificar() {
            txtCodCtaBan.setEditable(false);
            cargarReg();
            txtNumCtaBan.selectAll();
            txtNumCtaBan.requestFocus();
        }

        public void clickSiguiente() {
            try
            {
                if (!rstCab.isLast())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.next();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.next();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickVisPreliminar() {
            
        }

        public boolean consultar() {
            consultarReg();
            return true;
        }

        public boolean eliminar() {
            try{
                if (!eliminarReg())
                    return false;
                //Desplazarse al siguiente registro si es posible.
                if (!rstCab.isLast()){
                    rstCab.next();
                    cargarReg();
                }
                else{
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                }
                blnHayCam=false;
            }
            catch (java.sql.SQLException e){
                return true;
            }
            return true;
        }

        public boolean imprimir() {
            return true;
        }

        public boolean insertar() {
            if (!insertarReg())
                return false;
            return true;
        }

        public boolean modificar() {
            if (!actualizarReg())
                return false;
            return true;
        }

        public boolean vistaPreliminar() {
            return true;
        }
        
    }

 
    /**
     * Esta función determina si los campos son válidos.
     * @return true: Si los campos son válidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal(){
        if (txtNumCtaBan.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">número de cuenta</FONT> es obligatorio.<BR>Escriba un número de cuenta y vuelva a intentarlo.</HTML>");
            txtNumCtaBan.requestFocus();
            txtNumCtaBan.selectAll();
            return false;
        }

        if(txtCodBco.getText().trim().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">banco</FONT> es obligatorio.<BR>Escriba o seleccione un banco y vuelva a intentarlo.</HTML>");
            txtDesCorBco.requestFocus();
            txtDesCorBco.selectAll();
            return false;
        }

        return true;
    }
    
    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje de advertencia al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos se han cargado
     * con errores y que debe revisar dichos datos.
     */
    private void mostrarMsgAdv(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        if (strMsg.equals(""))
            strMsg="<HTML>Este registro tiene <FONT COLOR=\"red\">problemas</FONT>. <BR>Notifíquelo a su administrador del sistema.</HTML>";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.WARNING_MESSAGE);
    }
    
    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private boolean isRegPro()
    {
        boolean blnRes=true;
        strAux="¿Desea guardar los cambios efectuados a éste registro?\n";
        strAux+="Si no guarda los cambios perderá toda la información que no haya guardado.";
        switch (mostrarMsgCon(strAux))
        {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado())
                {
                    case 'n': //Insertar
                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }
    
    /**
     * Esta función permite limpiar el formulario.
     * @return true: Si se pudo limpiar la ventana sin ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean limpiarFrm(){
        boolean blnRes=true;
        try{
            txtCodCtaBan.setText("");
            txtNumCtaBan.setText("");
            txtCodBco.setText("");
            txtDesCorBco.setText("");
            txtDesLarBco.setText("");
            optTipCtaAho.setSelected(false);
            optTipCtaCte.setSelected(true);
            txtEjeAsi.setText("");
            optFirConSi.setSelected(false);
            optFirConNo.setSelected(true);
            txtFirAut1.setText("");
            txtCarFirAut1.setText("");
            txtFirAut2.setText("");
            txtCarFirAut2.setText("");
            txtCodCtaCtb.setText("");
            txtNumCtaCtb.setText("");
            txtNomCtaCtb.setText("");
            txaObs1.setText("");
            txtDirBco.setText("");

            txtCodCiuBco.setText("");
            txtNomCiuBco.setText("");
            txtCodIba.setText("");
            txtCodAba.setText("");
            txtCodSwi.setText("");
            txtCodPrvLoc.setText("");
            txtNomPrvLoc.setText("");
            txtCodExp.setText("");
            txtNomExp.setText("");
            
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
   
    
    
    /**
     * Esta función inserta el registro en la base de datos.
     * @return true: Si se pudo insertar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (insertar_tbmCtaBan()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
        
    
    
    /**
     * Esta función permite insertar la cabecera de un registro.
     * @return true: Si se pudo insertar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertar_tbmCtaBan(){
        int intUltReg;
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;

                //Obtener el código del último registro.
                strSQL="";
                strSQL+="SELECT MAX(a1.co_ctaban)";
                strSQL+=" FROM tbm_ctaban AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa()+ "";
                intUltReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intUltReg==-1)
                    return false;
                intUltReg++;
                txtCodCtaBan.setText("" + intUltReg);
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="INSERT INTO tbm_ctaban(";
                strSQL+="             co_emp, co_ctaban, tx_numctaban, co_ban, tx_tipctaban, ";
                strSQL+="             tx_codIba,tx_codAba,tx_codSwi,";
                strSQL+="             tx_proCtaBan,co_ctaPrvLoc,co_ctaExp,tx_ejeasi,";
                strSQL+="             st_fircon, tx_firaut1, tx_carfiraut1, tx_firaut2, tx_carfiraut2,";
                strSQL+="             co_cta, tx_obs1, st_reg, fe_ing, fe_ultmod, co_usring, co_usrmod,";
                strSQL+="             co_ciuCtaBan,tx_dirBan, tx_rucBan)";
                strSQL+=" VALUES (";
                strSQL+="" + objParSis.getCodigoEmpresa() + "";//co_emp
                strSQL+="," + txtCodCtaBan.getText() + "";//co_ctaban
                strSQL+="," + objUti.codificar(txtNumCtaBan.getText()) + "";//tx_numctaban
                strSQL+="," + txtCodBco.getText() + "";//co_ban                
                if(optTipCtaAho.isSelected())
                    strSQL+=", 'A'"; //tx_tipctaban
                else
                    strSQL+=", 'C'"; //tx_tipctaban


                strSQL+="," + objUti.codificar(txtCodIba.getText()) + "";//tx_codIba
                strSQL+="," + objUti.codificar(txtCodAba.getText()) + "";//tx_codAba
                strSQL+="," + objUti.codificar(txtCodSwi.getText()) + "";//tx_codSwi
                if(optProCtaEmp.isSelected())
                    strSQL+=", 'E'";//tx_proCtaBan
                else if(optProCtaPrvLoc.isSelected())
                    strSQL+=", 'L'";//tx_proCtaBan
                else if(optProCtaExp.isSelected())
                    strSQL+=", 'X'";//tx_proCtaBan

                if(txtCodPrvLoc.getText().length()>0)
                    strSQL+="," + txtCodPrvLoc.getText() + "";//co_ctaPrvLoc
                else
                    strSQL+=",Null";//co_ctaPrvLoc

                if(txtCodExp.getText().length()>0)
                    strSQL+=", " + txtCodExp.getText() + "";//co_ctaExp
                else
                    strSQL+=", Null";//co_ctaExp
                
                strSQL+=", " + objUti.codificar(txtEjeAsi.getText()) + ""; //tx_ejeasi
                if(optFirConSi.isSelected())
                    strSQL+=",'S'";//st_fircon
                else
                    strSQL+=",'N'";//st_fircon
                strSQL+="," + objUti.codificar(txtFirAut1.getText()) + "";//tx_firaut1
                strSQL+="," + objUti.codificar(txtCarFirAut1.getText()) + "";//tx_carfiraut1
                strSQL+="," + objUti.codificar(txtFirAut2.getText()) + "";//tx_firaut2
                strSQL+="," + objUti.codificar(txtCarFirAut2.getText()) + "";//tx_carfiraut2



                if(txtCodCtaCtb.getText().length()>0)
                    strSQL+="," + txtCodCtaCtb.getText() + "";//co_cta
                else
                    strSQL+=",Null";//co_cta


                strSQL+="," + objUti.codificar(txaObs1.getText()) + "";//tx_obs1
                strSQL+=",'A'";//st_reg
                strAux=objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos());
                strSQL+=",'" + strAux + "'";//fe_ing
                strSQL+=",'" + strAux + "'";//fe_ultmod
                strSQL+="," + objParSis.getCodigoUsuario() + "";//co_usring
                strSQL+="," + objParSis.getCodigoUsuario() + "";//co_usrmod

                if(txtCodCiuBco.getText().length()>0)
                    strSQL+="," + txtCodCiuBco.getText() + "";//co_ciuCtaBan
                else
                    strSQL+=",Null";//co_ciuCtaBan

                if(txtDirBco.getText().length()>0)
                    strSQL+=",'" + txtDirBco.getText() + "'";//tx_dirBan
                else
                    strSQL+=",Null";//tx_dirBan



                if(txtRucBco.getText().length()>0)
                    strSQL+=",'" + txtRucBco.getText() + "'";//tx_rucBan
                else
                    strSQL+=",Null";//tx_rucBan

                strSQL+=");";
//                System.out.println("insertar_tbmCtaBan: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función obtiene la descripción larga del estado del registro.
     * @param estado El estado del registro. Por ejemplo: A, I, etc.
     * @return La descripción larga del estado del registro.
     * <BR>Nota.- Si la cadena recibida es <I>null</I> la función devuelve una cadena vacía.
     */
    private String getEstReg(String estado)
    {
        if (estado==null)
            estado="";
        else
            switch (estado.charAt(0))
            {
                case 'A':
                    estado="Activo";
                    break;
                case 'I':
                    estado="Anulado";
                    break;
                case 'P':
                    estado="Pendiente de autorizar";
                    break;
                case 'D':
                    estado="Autorización denegada";
                    break;
                case 'R':
                    estado="Pendiente de impresión";
                    break;
                case 'C':
                    estado="Pendiente confirmación de inventario";
                    break;
                case 'F':
                    estado="Existen diferencias de inventario";
                    break;
                default:
                    estado="Desconocido";
                    break;
            }
        return estado;
    }


    
    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean consultarReg(){
        boolean blnRes=true;
        try{
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null){
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                //Validar que sólo se muestre los documentos asignados al programa.
                strSQL="";
                strSQL+="SELECT a1.co_emp, a1.co_ctaban";
                strSQL+=" FROM tbm_ctaban AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a1.st_reg NOT IN('E')";
                    
                strAux=txtCodCtaBan.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_ctaban=" + strAux.replaceAll("'", "''") + "";
                strAux=txtNumCtaBan.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND LOWER(a1.tx_numctaban) LIKE '" + strAux.replaceAll("'", "''").replace('*', '%').toLowerCase() + "' ";

                strAux=txtCodBco.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_ban=" + strAux.replaceAll("'", "''") + "";

                strAux=txtCodCtaCtb.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_cta=" + strAux.replaceAll("'", "''") + "";

                strAux=txtEjeAsi.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND LOWER(a1.tx_ejeasi) LIKE '" + strAux.replaceAll("'", "''").replace('*', '%').toLowerCase() + "' ";

                strSQL+=" ORDER BY a1.co_ctaban";
//                System.out.println("consultarReg:" + strSQL);
                rstCab=stmCab.executeQuery(strSQL);
                if (rstCab.next())
                {
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                }
                else
                {
                    mostrarMsgInf("No se ha encontrado ningún registro que cumpla el criterio de búsqueda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite cargar el registro seleccionado.
     * @return true: Si se pudo cargar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            if (cargarCabReg()){
            }
            blnHayCam=false;
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite cargar la cabecera del registro seleccionado.
     * @return true: Si se pudo cargar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarCabReg(){
        int intPosRel;
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT a1.co_emp, a1.co_ctaban, a1.tx_numctaban, a1.co_ban, a1.tx_tipctaban, a1.tx_ejeasi,";
                strSQL+=" a1.st_fircon, a1.tx_firaut1, a1.tx_carfiraut1, a1.tx_firaut2, a1.tx_carfiraut2,";
                strSQL+=" a1.co_cta, a1.tx_obs1, a1.st_reg, a1.fe_ing, a1.fe_ultmod, a1.co_usring, a1.co_usrmod";
                strSQL+=" , a2.tx_desCor AS tx_desCorBco, a2.tx_desLar AS tx_desLarBco";
                strSQL+=" , a3.tx_codCta, a3.tx_desLar AS tx_nomCta";
                strSQL+=" , a1.tx_codIba, a1.tx_codAba, a1.tx_codSwi, a1.tx_proCtaBan, a1.co_ctaPrvLoc, a1.co_ctaExp";
                strSQL+=" , a5.tx_nom AS tx_nomPrvLoc";
                strSQL+=" , a4.co_exp, a4.tx_nom AS tx_nomExp";
                strSQL+=" , a1.co_ciuCtaBan, a1.tx_dirBan, a1.tx_rucBan, z1.tx_deslar AS tx_nomCiu";
                strSQL+=" FROM      (    (        (   (   (tbm_ctaban AS a1 LEFT OUTER JOIN tbm_ciu AS z1 ON a1.co_ciuCtaBan=z1.co_ciu)";
                strSQL+="                        INNER JOIN tbm_var AS a2 ON a1.co_ban=a2.co_reg)";
                strSQL+="                           LEFT OUTER JOIN tbm_plaCta AS a3 ON a1.co_emp=a3.co_emp AND a1.co_cta=a3.co_cta";
                strSQL+="                          )";
                strSQL+="                    LEFT OUTER JOIN tbm_expImp AS a4  ON a1.co_ctaExp=a4.co_exp";
                strSQL+="                )";
                strSQL+="               LEFT OUTER JOIN tbm_cli AS a5";
                strSQL+="               ON a1.co_emp=a5.co_emp AND a1.co_ctaPrvLoc=a5.co_cli)";
                strSQL+=" WHERE a1.co_emp=" + rstCab.getString("co_emp");
                strSQL+=" AND a1.co_ctaban=" + rstCab.getString("co_ctaban");
                strSQL+=" AND a1.st_reg NOT IN('E')";
//                System.out.println("cargarCabReg:" + strSQL);
                rst=stm.executeQuery(strSQL);
                if (rst.next()){
                    strAux=rst.getString("co_ctaban");
                    txtCodCtaBan.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_numctaban");
                    txtNumCtaBan.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("co_ban");
                    txtCodBco.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_desCorBco");
                    txtDesCorBco.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_desLarBco");
                    txtDesLarBco.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_tipctaban");
                    if(strAux.equals("A")){
                        optTipCtaAho.setSelected(true);
                        optTipCtaCte.setSelected(false);
                    }
                    else{
                        optTipCtaCte.setSelected(true);
                        optTipCtaAho.setSelected(false);
                    }
                    strAux=rst.getString("tx_ejeasi");
                    txtEjeAsi.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("st_fircon");
                    if(strAux.equals("S")){
                        optFirConSi.setSelected(true);
                        optFirConNo.setSelected(false);
                    }
                    else{
                        optFirConNo.setSelected(true);
                        optFirConSi.setSelected(false);
                    }
                    strAux=rst.getString("tx_firaut1");
                    txtFirAut1.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_carfiraut1");
                    txtCarFirAut1.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_firaut2");
                    txtFirAut2.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_carfiraut2");
                    txtCarFirAut2.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("co_cta");
                    txtCodCtaCtb.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_codCta");
                    txtNumCtaCtb.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_nomCta");
                    txtNomCtaCtb.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("co_exp");
                    txtCodExp.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_nomExp");
                    txtNomExp.setText((strAux==null)?"":strAux);

                    strAux=rst.getString("tx_codIba");
                    txtCodIba.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_codAba");
                    txtCodAba.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_codSwi");
                    txtCodSwi.setText((strAux==null)?"":strAux);

                    strAux=rst.getString("co_ciuCtaBan");
                    txtCodCiuBco.setText((strAux==null)?"":strAux);

                    strAux=rst.getString("tx_nomCiu");
                    txtNomCiuBco.setText((strAux==null)?"":strAux);

                    strAux=rst.getString("tx_dirBan");
                    txtDirBco.setText((strAux==null)?"":strAux);


                    strAux=rst.getString("tx_rucBan");
                    txtRucBco.setText((strAux==null)?"":strAux);


                    strAux=rst.getString("tx_proCtaBan");
                    if(strAux.equals("E")){
                        optProCtaEmp.setSelected(true);
                        optProCtaPrvLoc.setSelected(false);
                        optProCtaExp.setSelected(false);
                    }
                    if(strAux.equals("L")){
                        optProCtaEmp.setSelected(false);
                        optProCtaPrvLoc.setSelected(true);
                        optProCtaExp.setSelected(false);
                    }
                    if(strAux.equals("X")){
                        optProCtaEmp.setSelected(false);
                        optProCtaPrvLoc.setSelected(false);
                        optProCtaExp.setSelected(true);
                    }

                    strAux=rst.getString("co_ctaPrvLoc");
                    txtCodPrvLoc.setText((strAux==null)?"":strAux);

                    strAux=rst.getString("tx_nomPrvLoc");
                    txtNomPrvLoc.setText((strAux==null)?"":strAux);

                    strAux=rst.getString("tx_obs1");
                    txaObs1.setText((strAux==null)?"":strAux);
                                       
                    //Mostrar el estado del registro.
                    strAux=rst.getString("st_reg");
                    objTooBar.setEstadoRegistro(getEstReg(strAux));
                }
                else
                {
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                    blnRes=false;
                }
            }
            rst.close();
            stm.close();
            con.close();
            rst=null;
            stm=null;
            con=null;
            //Mostrar la posición relativa del registro.
            intPosRel=rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    

    /**
     * Esta función actualiza el registro en la base de datos.
     * @return true: Si se pudo actualizar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (actualizar_tbmCtaban()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();

            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función permite actualizar la cabecera de un registro.
     * @return true: Si se pudo actualizar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizar_tbmCtaban(){
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_ctaban";
                strSQL+=" SET tx_numctaban=" + objUti.codificar(txtNumCtaBan.getText()) + "";
                strSQL+=", co_ban=" + txtCodBco.getText() + "";
                if(optTipCtaAho.isSelected())
                    strSQL+=", tx_tipctaban='A'";
                else if(optTipCtaCte.isSelected())
                    strSQL+=", tx_tipctaban='C'";
                strSQL+=", tx_ejeasi=" + objUti.codificar(txtEjeAsi.getText()) + "";
                if(optFirConSi.isSelected())
                    strSQL+=", st_fircon='S'";
                else if(optFirConNo.isSelected())
                    strSQL+=", st_fircon='N'";

                strSQL+=", tx_codiba=" + objUti.codificar(txtCodIba.getText()) + "";
                strSQL+=", tx_codaba=" + objUti.codificar(txtCodAba.getText()) + "";
                strSQL+=", tx_codswi=" + objUti.codificar(txtCodSwi.getText()) + "";


                if(optProCtaEmp.isSelected())
                    strSQL+=", tx_proCtaBan='E'";//
                else if(optProCtaPrvLoc.isSelected())
                    strSQL+=", tx_proCtaBan='L'";//
                else if(optProCtaExp.isSelected())
                    strSQL+=", tx_proCtaBan='X'";//

                if(txtCodPrvLoc.getText().length()>0)
                    strSQL+=",co_ctaPrvLoc=" + txtCodPrvLoc.getText() + "";//
                else
                    strSQL+=",co_ctaPrvLoc=Null";//

                if(txtCodExp.getText().length()>0)
                    strSQL+=", co_ctaExp=" + txtCodExp.getText() + "";//
                else
                    strSQL+=", co_ctaExp=Null";//



                if(txtCodCiuBco.getText().length()>0)
                    strSQL+=",co_ciuCtaBan=" + txtCodCiuBco.getText() + "";//
                else
                    strSQL+=",co_ciuCtaBan=Null";//co_ciuCtaBan

                if(txtDirBco.getText().length()>0)
                    strSQL+=",tx_dirBan='" + txtDirBco.getText() + "'";//
                else
                    strSQL+=",tx_dirBan=Null";//tx_dirBan




                if(txtRucBco.getText().length()>0)
                    strSQL+=",tx_rucBan='" + txtRucBco.getText() + "'";//tx_rucBan
                else
                    strSQL+=",tx_rucBan=Null";//tx_rucBan



                strSQL+=", tx_firaut1=" + objUti.codificar(txtFirAut1.getText()) + "";
                strSQL+=", tx_carfiraut1=" + objUti.codificar(txtCarFirAut1.getText()) + "";
                strSQL+=", tx_firaut2=" + objUti.codificar(txtFirAut2.getText()) + "";
                strSQL+=", tx_carfiraut2=" + objUti.codificar(txtCarFirAut2.getText()) + "";
                
                if(txtCodCtaCtb.getText().length()>0)
                    strSQL+=", co_cta=" + txtCodCtaCtb.getText() + "";
                else
                    strSQL+=", co_cta=Null";
                strSQL+=", tx_obs1=" + objUti.codificar(txaObs1.getText()) + "";
                strSQL+=", fe_ultMod='" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "'";
                strSQL+=", co_usrMod=" + objParSis.getCodigoUsuario();
                strSQL+=" WHERE co_emp=" + rstCab.getString("co_emp");
                strSQL+=" AND co_ctaban=" + rstCab.getString("co_ctaban");
//                System.out.println("UPDATE tbm_ctaban: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
                datFecAux=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función permite eliminar el detalle de un registro.
     * @return true: Si se pudo eliminar el detalle del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminar_tbmConCli(){
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="DELETE FROM tbm_conCli";
                strSQL+=" WHERE co_emp=" + rstCab.getString("co_emp");
                strSQL+=" AND co_cli=" + rstCab.getString("co_cli");
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    /**
     * Esta función anula el registro de la base de datos.
     * @return true: Si se pudo anular el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean anularReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (anular_tbmCtaban()){//no se anula tbm_conCli
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función permite anular la cabecera de un registro.
     * @return true: Si se pudo anular la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean anular_tbmCtaban(){
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_ctaban";
                strSQL+=" SET st_reg='I'";
                strSQL+=", fe_ultMod='" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "'";
                strSQL+=", co_usrMod=" + objParSis.getCodigoUsuario();
                strSQL+=" WHERE co_emp=" + rstCab.getString("co_emp");
                strSQL+=" AND co_ctaban=" + rstCab.getString("co_ctaban");
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
                datFecAux=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función elimina el registro de la base de datos.
     * @return true: Si se pudo eliminar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (eliminar_tbmCtaban()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función permite anular la cabecera de un registro.
     * @return true: Si se pudo anular la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminar_tbmCtaban(){
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_ctaban";
                strSQL+=" SET st_reg='E'";
                strSQL+=", fe_ultMod='" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "'";
                strSQL+=", co_usrMod=" + objParSis.getCodigoUsuario();
                strSQL+=" WHERE co_emp=" + rstCab.getString("co_emp");
                strSQL+=" AND co_ctaban=" + rstCab.getString("co_ctaban");
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
                datFecAux=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }




    private boolean existeIdentificacion(){//devuelve true si existe ya ese numero
        boolean blnRes=false;
        Connection conIde;
        Statement stIde;
        ResultSet rstIde;
        String strSQLIde="";
        String strIdeExi="";
        try{
            conIde=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conIde!=null){
                stIde=conIde.createStatement();
                strSQLIde="SELECT tx_ide FROM tbm_cli WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQLIde+=" AND tx_ide='"  + txtNumCtaBan.getText().trim() + "'";
                rstIde=stIde.executeQuery(strSQLIde);
                if(rstIde.next()){
                    strIdeExi=rstIde.getString("tx_ide");
                }
                if( ! strIdeExi.equals(""))
                    blnRes=true;
                conIde.close();
                conIde=null;
                stIde.close();
                stIde=null;
                rstIde.close();
                rstIde=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=true;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=true;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Tipos de documentos".
     */
    private boolean configurarVenConBco()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_reg");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Alias");
            arlAli.add("Nombre de banco");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_reg, a1.tx_desCor, a1.tx_desLar ";
            strSQL+=" FROM tbm_var AS a1";
            strSQL+=" WHERE a1.co_grp=8";
            strSQL+=" AND a1.st_reg='A'";

            vcoBco=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de bancos", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoBco.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoBco.setConfiguracionColumna(3, javax.swing.JLabel.LEFT);


        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConBco(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoBco.setCampoBusqueda(1);
                    vcoBco.show();
                    if (vcoBco.getSelectedButton()==vcoBco.INT_BUT_ACE)
                    {
                        txtCodBco.setText(vcoBco.getValueAt(1));
                        txtDesCorBco.setText(vcoBco.getValueAt(2));
                        txtDesLarBco.setText(vcoBco.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Descripción corta".
                    if (vcoBco.buscar("a1.tx_desCor", txtDesCorBco.getText()))
                    {
                        txtCodBco.setText(vcoBco.getValueAt(1));
                        txtDesCorBco.setText(vcoBco.getValueAt(2));
                        txtDesLarBco.setText(vcoBco.getValueAt(3));
                    }
                    else
                    {
                        vcoBco.setCampoBusqueda(1);
                        vcoBco.setCriterio1(11);
                        vcoBco.cargarDatos();
                        vcoBco.show();
                        if (vcoBco.getSelectedButton()==vcoBco.INT_BUT_ACE)
                        {
                            txtCodBco.setText(vcoBco.getValueAt(1));
                            txtDesCorBco.setText(vcoBco.getValueAt(2));
                            txtDesLarBco.setText(vcoBco.getValueAt(3));
                        }
                        else
                        {
                            txtDesCorBco.setText(strDesCorBco);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoBco.buscar("a1.tx_desLar", txtDesLarBco.getText()))
                    {
                        txtCodBco.setText(vcoBco.getValueAt(1));
                        txtDesCorBco.setText(vcoBco.getValueAt(2));
                        txtDesLarBco.setText(vcoBco.getValueAt(3));
                    }
                    else
                    {
                        vcoBco.setCampoBusqueda(2);
                        vcoBco.setCriterio1(11);
                        vcoBco.cargarDatos();
                        vcoBco.show();
                        if (vcoBco.getSelectedButton()==vcoBco.INT_BUT_ACE)
                        {
                            txtCodBco.setText(vcoBco.getValueAt(1));
                            txtDesCorBco.setText(vcoBco.getValueAt(2));
                            txtDesLarBco.setText(vcoBco.getValueAt(3));
                        }
                        else
                        {
                            txtDesLarBco.setText(strDesLarBco);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Tipos de documentos".
     */
    private boolean configurarVenConCtaCtb()
    {
        boolean blnRes=true;
        try
        {
                //Listado de campos.
                ArrayList arlCam=new ArrayList();
                arlCam.add("a1.co_cta");
                arlCam.add("a1.tx_codCta");
                arlCam.add("a1.tx_desLar");
                //Alias de los campos.
                ArrayList arlAli=new ArrayList();
                arlAli.add("Código");
                arlAli.add("Número de cuenta");
                arlAli.add("Nombre de cuenta");
                //Ancho de las columnas.
                ArrayList arlAncCol=new ArrayList();
                arlAncCol.add("50");
                arlAncCol.add("80");
                arlAncCol.add("334");
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT a1.co_cta, a1.tx_codCta, a1.tx_desLar";
                strSQL+=" FROM tbm_plaCta AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a1.st_reg='A'";
                strSQL+=" AND a1.st_ctaBan='S'";
                vcoCtaCtb=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de cuentas contables", strSQL, arlCam, arlAli, arlAncCol);
                arlCam=null;
                arlAli=null;
                arlAncCol=null;
                //Configurar columnas.
                vcoCtaCtb.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
                vcoCtaCtb.setConfiguracionColumna(3, javax.swing.JLabel.LEFT);


        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConCtaCtb(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoCtaCtb.setCampoBusqueda(1);
                    vcoCtaCtb.show();
                    if (vcoCtaCtb.getSelectedButton()==vcoCtaCtb.INT_BUT_ACE)
                    {
                        txtCodCtaCtb.setText(vcoCtaCtb.getValueAt(1));
                        txtNumCtaCtb.setText(vcoCtaCtb.getValueAt(2));
                        txtNomCtaCtb.setText(vcoCtaCtb.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Descripción corta".
                    if (vcoCtaCtb.buscar("a1.tx_codCta", txtNumCtaCtb.getText()))
                    {
                        txtCodCtaCtb.setText(vcoCtaCtb.getValueAt(1));
                        txtNumCtaCtb.setText(vcoCtaCtb.getValueAt(2));
                        txtNomCtaCtb.setText(vcoCtaCtb.getValueAt(3));
                    }
                    else
                    {
                        vcoCtaCtb.setCampoBusqueda(1);
                        vcoCtaCtb.setCriterio1(11);
                        vcoCtaCtb.cargarDatos();
                        vcoCtaCtb.show();
                        if (vcoCtaCtb.getSelectedButton()==vcoCtaCtb.INT_BUT_ACE)
                        {
                            txtCodCtaCtb.setText(vcoCtaCtb.getValueAt(1));
                            txtNumCtaCtb.setText(vcoCtaCtb.getValueAt(2));
                            txtNomCtaCtb.setText(vcoCtaCtb.getValueAt(3));
                        }
                        else
                        {
                            txtNumCtaCtb.setText(strDesCorCtaCtb);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoCtaCtb.buscar("a1.tx_desLar", txtNomCtaCtb.getText()))
                    {
                        txtCodCtaCtb.setText(vcoCtaCtb.getValueAt(1));
                        txtNumCtaCtb.setText(vcoCtaCtb.getValueAt(2));
                        txtNomCtaCtb.setText(vcoCtaCtb.getValueAt(3));
                    }
                    else
                    {
                        vcoCtaCtb.setCampoBusqueda(2);
                        vcoCtaCtb.setCriterio1(11);
                        vcoCtaCtb.cargarDatos();
                        vcoCtaCtb.show();
                        if (vcoCtaCtb.getSelectedButton()==vcoCtaCtb.INT_BUT_ACE)
                        {
                            txtCodCtaCtb.setText(vcoCtaCtb.getValueAt(1));
                            txtNumCtaCtb.setText(vcoCtaCtb.getValueAt(2));
                            txtNomCtaCtb.setText(vcoCtaCtb.getValueAt(3));
                        }
                        else
                        {
                            txtNomCtaCtb.setText(strDesLarCtaCtb);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConPrvLoc(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoPrvLoc.setCampoBusqueda(2);
                    vcoPrvLoc.show();
                    if (vcoPrvLoc.getSelectedButton()==vcoPrvLoc.INT_BUT_ACE)
                    {
                        txtCodPrvLoc.setText(vcoPrvLoc.getValueAt(1));
                        txtNomPrvLoc.setText(vcoPrvLoc.getValueAt(3));
                    }
                    break;
                case 1: //Básqueda directa por "Námero de cuenta".
                    if (vcoPrvLoc.buscar("a1.co_cli", txtCodPrvLoc.getText()))
                    {
                        txtCodPrvLoc.setText(vcoPrvLoc.getValueAt(1));
                        txtNomPrvLoc.setText(vcoPrvLoc.getValueAt(3));
                    }
                    else
                    {
                        vcoPrvLoc.setCampoBusqueda(0);
                        vcoPrvLoc.setCriterio1(11);
                        vcoPrvLoc.cargarDatos();
                        vcoPrvLoc.show();
                        if (vcoPrvLoc.getSelectedButton()==vcoPrvLoc.INT_BUT_ACE)
                        {
                            txtCodPrvLoc.setText(vcoPrvLoc.getValueAt(1));
                            txtNomPrvLoc.setText(vcoPrvLoc.getValueAt(3));
                        }
                        else
                        {
                            txtCodPrvLoc.setText(strCodPrvLoc);
                        }
                    }
                    break;
                case 2: //Básqueda directa por "Descripcián larga".
                    if (vcoPrvLoc.buscar("a1.tx_nom", txtNomPrvLoc.getText()))
                    {
                        txtCodPrvLoc.setText(vcoPrvLoc.getValueAt(1));
                        txtNomPrvLoc.setText(vcoPrvLoc.getValueAt(3));
                    }
                    else
                    {
                        vcoPrvLoc.setCampoBusqueda(2);
                        vcoPrvLoc.setCriterio1(11);
                        vcoPrvLoc.cargarDatos();
                        vcoPrvLoc.show();
                        if (vcoPrvLoc.getSelectedButton()==vcoPrvLoc.INT_BUT_ACE)
                        {
                            txtCodPrvLoc.setText(vcoPrvLoc.getValueAt(1));
                            txtNomPrvLoc.setText(vcoPrvLoc.getValueAt(3));
                        }
                        else
                        {
                            txtNomPrvLoc.setText(strNomPrvLoc);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funcián configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConPrvLoc()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Cádigo");
            arlAli.add("Identificacián");
            arlAli.add("Nombre");
            arlAli.add("Direccián");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
            strSQL+=" FROM tbm_cli AS a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" AND a1.st_prv='S'";
            strSQL+=" AND a1.st_reg='A'";
            strSQL+=" ORDER BY a1.tx_nom";
            //Ocultar columnas.
            int intColOcu[]=new int[1];
            intColOcu[0]=4;
            vcoPrvLoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de proveedores locales", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoPrvLoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConCtaBan(int intTipBus)
    {
        boolean blnRes=true;
        try{
            switch (intTipBus){
                case 0: //Mostrar la ventana de consulta.
                    vcoCtaBan.setCampoBusqueda(0);
                    vcoCtaBan.show();
                    if (vcoCtaBan.getSelectedButton()==vcoCtaBan.INT_BUT_ACE){
                        txtCodPrvLoc.setText(vcoCtaBan.getValueAt(1));
                        txtNomPrvLoc.setText(vcoCtaBan.getValueAt(3));
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funcián configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConCtaBan()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_ctaban");
            arlCam.add("a1.tx_numctaban");
            arlCam.add("a1.tx_desCor");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Número");
            arlAli.add("Banco");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+=" SELECT a1.co_ctaban, a1.tx_numctaban";
            strSQL+=" , a2.tx_desCor";
            strSQL+=" from tbm_ctaban AS a1 INNER JOIN tbm_var AS a2";
            strSQL+=" ON a1.co_ban=a2.co_reg";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" AND a2.st_reg='A'";
            strSQL+=" AND a1.st_reg NOT IN('E','I')";
            strSQL+=" ORDER BY a1.co_ctaban, a1.tx_numctaban";

            vcoCtaBan=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de cuentas bancarias", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoCtaBan.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    private boolean configurarVenConExp()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_exp");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("414");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_exp, a1.tx_nom";
            strSQL+=" FROM tbm_expimp as a1";
            strSQL+=" WHERE a1.st_reg NOT IN('I','E')";

            vcoExp=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de exportadores", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoExp.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConExp(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoExp.setCampoBusqueda(2);
                    vcoExp.show();
                    if (vcoExp.getSelectedButton()==vcoExp.INT_BUT_ACE)
                    {
                        txtCodExp.setText(vcoExp.getValueAt(1));
                        txtNomExp.setText(vcoExp.getValueAt(2));
                    }
                    break;
                case 1: //Básqueda directa por "Námero de cuenta".
                    if (vcoExp.buscar("a1.co_exp", txtCodExp.getText()))
                    {
                        txtCodExp.setText(vcoExp.getValueAt(1));
                        txtNomExp.setText(vcoExp.getValueAt(2));
                    }
                    else
                    {
                        vcoExp.setCampoBusqueda(0);
                        vcoExp.setCriterio1(11);
                        vcoExp.cargarDatos();
                        vcoExp.show();
                        if (vcoExp.getSelectedButton()==vcoExp.INT_BUT_ACE)
                        {
                            txtCodExp.setText(vcoExp.getValueAt(1));
                            txtNomExp.setText(vcoExp.getValueAt(2));
                        }
                        else
                        {
                            txtCodExp.setText(strCodExp);
                        }
                    }
                    break;
                case 2: //Básqueda directa por "Descripcián larga".
                    if (vcoExp.buscar("a1.tx_nom", txtNomExp.getText()))
                    {
                        txtCodExp.setText(vcoExp.getValueAt(1));
                        txtNomExp.setText(vcoExp.getValueAt(2));
                    }
                    else
                    {
                        vcoExp.setCampoBusqueda(2);
                        vcoExp.setCriterio1(11);
                        vcoExp.cargarDatos();
                        vcoExp.show();
                        if (vcoExp.getSelectedButton()==vcoExp.INT_BUT_ACE)
                        {
                            txtCodExp.setText(vcoExp.getValueAt(1));
                            txtNomExp.setText(vcoExp.getValueAt(2));
                        }
                        else
                        {
                            txtNomExp.setText(strNomExp);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConCiuBco(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoCiuBco.setCampoBusqueda(2);
                    vcoCiuBco.show();
                    if (vcoCiuBco.getSelectedButton()==vcoCiuBco.INT_BUT_ACE)
                    {
                        txtCodCiuBco.setText(vcoCiuBco.getValueAt(1));
                        txtNomCiuBco.setText(vcoCiuBco.getValueAt(3));
                    }
                    break;
                case 1: //Básqueda directa por "Námero de cuenta".
                    if (vcoCiuBco.buscar("a1.co_ciu", txtCodCiuBco.getText()))
                    {
                        txtCodCiuBco.setText(vcoCiuBco.getValueAt(1));
                        txtNomCiuBco.setText(vcoCiuBco.getValueAt(3));
                    }
                    else
                    {
                        vcoCiuBco.setCampoBusqueda(0);
                        vcoCiuBco.setCriterio1(11);
                        vcoCiuBco.cargarDatos();
                        vcoCiuBco.show();
                        if (vcoCiuBco.getSelectedButton()==vcoCiuBco.INT_BUT_ACE)
                        {
                            txtCodCiuBco.setText(vcoCiuBco.getValueAt(1));
                            txtNomCiuBco.setText(vcoCiuBco.getValueAt(3));
                        }
                        else
                        {
                            txtCodCiuBco.setText(strCodCiuBco);
                        }
                    }
                    break;
                case 2: //Básqueda directa por "Descripcián larga".
                    if (vcoCiuBco.buscar("a1.tx_descor", txtNomCiuBco.getText()))
                    {
                        txtCodCiuBco.setText(vcoCiuBco.getValueAt(1));
                        txtNomCiuBco.setText(vcoCiuBco.getValueAt(3));
                    }
                    else
                    {
                        vcoCiuBco.setCampoBusqueda(2);
                        vcoCiuBco.setCriterio1(11);
                        vcoCiuBco.cargarDatos();
                        vcoCiuBco.show();
                        if (vcoCiuBco.getSelectedButton()==vcoCiuBco.INT_BUT_ACE)
                        {
                            txtCodCiuBco.setText(vcoCiuBco.getValueAt(1));
                            txtNomCiuBco.setText(vcoCiuBco.getValueAt(3));
                        }
                        else
                        {
                            txtNomCiuBco.setText(strNomCiuBco);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    private boolean configurarVenConCiuBco()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_ciu");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Alias");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT co_ciu, tx_descor, tx_deslar";
            strSQL+=" FROM tbm_ciu WHERE st_reg NOT IN('I','E')";

            vcoCiuBco=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de ciudades", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoCiuBco.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }





}
