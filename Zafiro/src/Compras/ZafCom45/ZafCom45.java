/*  
 *  ZafCom15.java
 *    
 *  Created on 31 de Julio de 2007, 10:10 PM
 */  
package Compras.ZafCom45;
      
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import java.sql.Connection;
import java.sql.DriverManager;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import java.util.Vector;
import java.util.ArrayList;  //*******************
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaGrp;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaColGrp;



/**
 *
 * @author  Javier Ayapata
 */
public class ZafCom45 extends javax.swing.JInternalFrame
{
    //Constantes: Columnas del JTable:
    final int INT_TBL_LIN=0;                        //Línea
    final int INT_TBL_CODITM =1;                    //Código del item (Sistema).
    final int INT_TBL_CODALT =2;                    //Código del item (Sistema).
    final int INT_TBL_NOMITM =3;                    //Código del item (Alterno).
    final int INT_TBL_UNIITM =4;                    //Nombre del item.
    final int INT_TBL_SALTCAS=5;                    //Descripción corta de la unidad de medida.
    final int INT_TBL_SALTDIM=6;                    //Stock consolidado.
    final int INT_TBL_SALCTUV=7;                   //Precio de venta 1.
    final int INT_TBL_SALCDIM=8;                   //Precio de venta 1.
    final int INT_TBL_SALDTUV=9;                   //Precio de venta 1.
    final int INT_TBL_SALDCAS=10;                   //Precio de venta 1.

    
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod;
    private ZafThreadGUI objThrGUI;
    private ZafTblCelRenLbl objTblCelRenLbl;            //Render: Presentar JLabel en JTable.
    private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
    private Connection con;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg;
    private boolean blnCon;                             //true: Continua la ejecución del hilo.
   
    /** Crea una nueva instancia de la clase ZafIndRpt. */
       public ZafCom45(ZafParSis obj)
    {
        initComponents();
        //Inicializar objetos.
        objParSis=obj;
     
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        optTod = new javax.swing.JRadioButton();
        optFil = new javax.swing.JRadioButton();
        panNomCli = new javax.swing.JPanel();
        lblCodAltDes = new javax.swing.JLabel();
        txtCodAltDes = new javax.swing.JTextField();
        lblCodAltHas = new javax.swing.JLabel();
        txtCodAltHas = new javax.swing.JTextField();
        panRpt = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable() {
            protected javax.swing.table.JTableHeader createDefaultTableHeader()
            {
                return new ZafTblHeaGrp(columnModel);
            }
        };
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setLayout(null);

        bgrFil.add(optTod);
        optTod.setSelected(true);
        optTod.setText("Todos los items");
        optTod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optTodItemStateChanged(evt);
            }
        });
        optTod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTodActionPerformed(evt);
            }
        });
        panFil.add(optTod);
        optTod.setBounds(4, 4, 400, 20);

        bgrFil.add(optFil);
        optFil.setText("Sólo los items que cumplan el criterio seleccionado");
        panFil.add(optFil);
        optFil.setBounds(4, 24, 400, 20);

        panNomCli.setBorder(javax.swing.BorderFactory.createTitledBorder("Código alterno del item"));
        panNomCli.setLayout(null);

        lblCodAltDes.setText("Desde:");
        panNomCli.add(lblCodAltDes);
        lblCodAltDes.setBounds(12, 20, 44, 20);

        txtCodAltDes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodAltDesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodAltDesFocusLost(evt);
            }
        });
        panNomCli.add(txtCodAltDes);
        txtCodAltDes.setBounds(56, 20, 268, 20);

        lblCodAltHas.setText("Hasta:");
        panNomCli.add(lblCodAltHas);
        lblCodAltHas.setBounds(336, 20, 44, 20);

        txtCodAltHas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodAltHasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodAltHasFocusLost(evt);
            }
        });
        panNomCli.add(txtCodAltHas);
        txtCodAltHas.setBounds(380, 20, 268, 20);

        panFil.add(panNomCli);
        panNomCli.setBounds(20, 50, 660, 52);

        tabFrm.addTab("Filtro", panFil);

        panRpt.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnDat.setViewportView(tblDat);

        panRpt.add(spnDat, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Reporte", panRpt);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void optTodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_optTodActionPerformed

    
    
         
       
    
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
          Configura_ventana_consulta();
         configurarFrm();
        
    }//GEN-LAST:event_formInternalFrameOpened

    
    private void txtCodAltHasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltHasFocusLost
        if (txtCodAltHas.getText().length()>0)
            optFil.setSelected(true);
    }//GEN-LAST:event_txtCodAltHasFocusLost

    private void txtCodAltDesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltDesFocusLost
        if (txtCodAltDes.getText().length()>0)
        {
            optFil.setSelected(true);
            if (txtCodAltHas.getText().length()==0)
                txtCodAltHas.setText(txtCodAltDes.getText());
        }
    }//GEN-LAST:event_txtCodAltDesFocusLost

    private void txtCodAltHasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltHasFocusGained
        txtCodAltHas.selectAll();
    }//GEN-LAST:event_txtCodAltHasFocusGained

    private void txtCodAltDesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltDesFocusGained
        txtCodAltDes.selectAll();
    }//GEN-LAST:event_txtCodAltDesFocusGained

    private void optTodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optTodItemStateChanged
        if (optTod.isSelected())
        {
            txtCodAltDes.setText("");
            txtCodAltHas.setText("");
     
        }
    }//GEN-LAST:event_optTodItemStateChanged

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acción de acuerdo a la etiqueta del botón ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar"))
        {
            blnCon=true;
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
        }
        else
        {
            blnCon=false;
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblCodAltDes;
    private javax.swing.JLabel lblCodAltHas;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optFil;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panNomCli;
    private javax.swing.JPanel panRpt;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodAltDes;
    private javax.swing.JTextField txtCodAltHas;
    // End of variables declaration//GEN-END:variables
   
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux+" v 0.2");
            lblTit.setText(strAux);
            
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(8);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_LIN,"");
            vecCab.add(INT_TBL_CODITM,"Cod.Itm.");
            vecCab.add(INT_TBL_CODALT,"Cod.Alt.");
            vecCab.add(INT_TBL_NOMITM,"Nom.Itm");
            vecCab.add(INT_TBL_UNIITM,"Uni.Med");
            vecCab.add(INT_TBL_SALTCAS,"CASTEK");
            vecCab.add(INT_TBL_SALTDIM,"DIMULTI");
            vecCab.add(INT_TBL_SALCTUV,"TUVAL");
            vecCab.add(INT_TBL_SALCDIM,"DIMULTI");
            vecCab.add(INT_TBL_SALDTUV,"TUVAL");
            vecCab.add(INT_TBL_SALDCAS,"CASTEK");


           // vecCab.add(INT_TBL_DAT_TOT_COS,"Total.Costo");
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            new ZafColNumerada(tblDat,INT_TBL_LIN);
            //Configurar JTable: Establecer el menú de contexto.
            new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
         
             tcmAux.getColumn(INT_TBL_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_CODITM).setPreferredWidth(40);
            tcmAux.getColumn(INT_TBL_CODALT).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_NOMITM).setPreferredWidth(95);
            tcmAux.getColumn(INT_TBL_UNIITM).setPreferredWidth(40);
            tcmAux.getColumn(INT_TBL_SALTCAS).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_SALTDIM).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_SALCTUV).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_SALCDIM).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_SALDTUV).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_SALDCAS).setPreferredWidth(70);

                 
            
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Editor de búsqueda.
            new ZafTblBus(tblDat);
            //Configurar JTable: Renderizar celdas.
            
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_SALTCAS).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_SALTDIM).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_SALCTUV).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_SALCDIM).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_SALDTUV).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_SALDCAS).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            //Libero los objetos auxiliares.
            new ZafTblOrd(tblDat);

              ArrayList arlColHid=new ArrayList();
              arlColHid.add(""+INT_TBL_CODITM);
              objTblMod.setSystemHiddenColumns(arlColHid, tblDat);
              arlColHid=null;

             ZafTblHeaGrp objTblHeaGrp=(ZafTblHeaGrp)tblDat.getTableHeader();
             objTblHeaGrp.setHeight(16*2);

              ZafTblHeaColGrp objTblHeaColGrpAmeSur=new ZafTblHeaColGrp("TUVAL");
              objTblHeaColGrpAmeSur.setHeight(16);
                 objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_SALTCAS));
                 objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_SALTDIM));
               objTblHeaGrp.addColumnGroup(objTblHeaColGrpAmeSur);
               objTblHeaColGrpAmeSur=null;

              objTblHeaColGrpAmeSur=new ZafTblHeaColGrp("CASTEK");
              objTblHeaColGrpAmeSur.setHeight(16);
                 objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_SALCTUV));
                 objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_SALCDIM));
               objTblHeaGrp.addColumnGroup(objTblHeaColGrpAmeSur);
               objTblHeaColGrpAmeSur=null;

              objTblHeaColGrpAmeSur=new ZafTblHeaColGrp("DIMULTI");
              objTblHeaColGrpAmeSur.setHeight(16);
                 objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_SALDTUV));
                 objTblHeaColGrpAmeSur.add(tcmAux.getColumn(INT_TBL_SALDCAS));
               objTblHeaGrp.addColumnGroup(objTblHeaColGrpAmeSur);
               objTblHeaColGrpAmeSur=null;

            tcmAux=null;
              
            
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
      public void Configura_ventana_consulta(){
        //configurarVenConProducto();
    }
     
      
/**
* Esta función permite consultar los registros de acuerdo al criterio seleccionado.
* @return true: Si se pudo consultar los registros.
* <BR>false: En el caso contrario.
*/
private boolean cargarDetReg(){
 boolean blnRes=true;
 java.sql.Statement stm;
 java.sql.ResultSet rst;
 int intNumTotReg=0, i=0;
 String strSql="";
 try{
    butCon.setText("Detener");
    lblMsgSis.setText("Obteniendo datos...");
    con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
    if (con!=null){
        stm=con.createStatement();
                //Obtener la condición.
        strAux="";
        if (txtCodAltDes.getText().length()>0 || txtCodAltHas.getText().length()>0)
            strAux=" WHERE ((LOWER(tx_codAlt) BETWEEN '" + txtCodAltDes.getText().replaceAll("'", "''").toLowerCase() + "' AND '" + txtCodAltHas.getText().replaceAll("'", "''").toLowerCase() + "') OR LOWER(tx_codAlt) LIKE '" + txtCodAltHas.getText().replaceAll("'", "''").toLowerCase() + "%')";


        strSql="SELECT * FROM ( select x.*, (x1.nd_salven+x1.nd_salcom) as salcastuv, (x2.nd_salven+x2.nd_salcom) as salcasdim, (x3.nd_salven+x3.nd_salcom) as saldimtuv , (x4.nd_salven+x4.nd_salcom) as saldimcas from ( " +
        " select x.*,  x1.co_emprel as empdim, x1.co_itmrel as itmdim, (x1.nd_salven+x1.nd_salcom)  as saltuvdim  from ( "+
        " select a.co_emp, a1.co_itm, a1.tx_codalt,  a1.tx_nomitm, var.tx_descor,   a.co_emprel as empcas, co_itmrel as itmcas, (a.nd_salven+a.nd_salcom) as saltuvcas from  tbm_invmovempgrp as a " +
        " inner join tbm_inv as a1 on (a1.co_emp=a.co_emp and a1.co_itm=a.co_itm) " +
        " left join tbm_var as var on (var.co_reg=a1.co_uni) "+
        " where a.co_emp=1  and a.co_emprel=2  AND trim(SUBSTR (UPPER(a1.tx_codalt), length(a1.tx_codalt) ,1)) = 'I'  " +
        " ) as x " +
        " inner join tbm_invmovempgrp as x1 on (x1.co_emp=x.co_emp and x1.co_itm=x.co_itm and x1.co_emprel=4 )  "+
        " ) as x " +
        " inner join tbm_invmovempgrp as x1 on (x1.co_emp=x.empcas and x1.co_itm=x.itmcas and x1.co_emprel=x.co_emp ) " +
        " inner join tbm_invmovempgrp as x2 on (x2.co_emp=x.empcas and x2.co_itm=x.itmcas and x2.co_emprel=x.empdim ) " +
        " inner join tbm_invmovempgrp as x3 on (x3.co_emp=x.empdim and x3.co_itm=x.itmdim and x3.co_emprel=x.co_emp ) " +
        " inner join tbm_invmovempgrp as x4 on (x4.co_emp=x.empdim and x4.co_itm=x.itmdim and x4.co_emprel=x.empcas ) " +
        " ) AS x  "+strAux+"  ";


        strSQL="SELECT COUNT(*) FROM ( "+strSql+" ) AS X ";

         intNumTotReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
         if (intNumTotReg==-1)
            return false;

        strSQL="SELECT * FROM ( "+strSql+" ) AS X  ORDER BY tx_nomitm ";

        //System.out.println("-->"+ strSQL );
        rst=stm.executeQuery(strSQL);
        vecDat.clear();
        lblMsgSis.setText("Cargando datos...");
        pgrSis.setMinimum(0);
        pgrSis.setMaximum(intNumTotReg);
        pgrSis.setValue(0);
        i=0;
        while (rst.next())
        {
            if (blnCon)
            {
            vecReg=new Vector();
            vecReg.add(INT_TBL_LIN,"");
            vecReg.add(INT_TBL_CODITM, rst.getString("co_itm"));
            vecReg.add(INT_TBL_CODALT, rst.getString("tx_codalt"));
            vecReg.add(INT_TBL_NOMITM, rst.getString("tx_nomitm"));
            vecReg.add(INT_TBL_UNIITM,  rst.getString("tx_descor"));
            vecReg.add(INT_TBL_SALTCAS, rst.getString("saltuvcas"));
            vecReg.add(INT_TBL_SALTDIM, rst.getString("saltuvdim"));
            vecReg.add(INT_TBL_SALCTUV, rst.getString("salcastuv"));
            vecReg.add(INT_TBL_SALCDIM, rst.getString("salcasdim"));
            vecReg.add(INT_TBL_SALDTUV, rst.getString("saldimtuv"));
            vecReg.add(INT_TBL_SALDCAS, rst.getString("saldimcas"));
            vecDat.add(vecReg);
            i++;
            pgrSis.setValue(i);
        }
        else
        {
            break;
        }
    }
    rst.close();
    rst=null;
    stm.close();
    stm=null;
    con.close();
    con=null;
    //Asignar vectores al modelo.
    objTblMod.setData(vecDat);
    tblDat.setModel(objTblMod);
    vecDat.clear();


    if (intNumTotReg==tblDat.getRowCount())
        lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros.");
    else
        lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros pero sólo se procesaron " + tblDat.getRowCount() + ".");
    pgrSis.setValue(0);
    butCon.setText("Consultar");
}
}
catch (java.sql.SQLException e)
{
blnRes=false;
objUti.mostrarMsgErr_F1(this, e);
}
catch (Exception e)
{
blnRes=false;
objUti.mostrarMsgErr_F1(this, e);
}
return blnRes;
}

    
    
      

  
    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podría presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaría informado en todo
     * momento de lo que ocurre. Si se desea hacer ésto es necesario utilizar ésta clase
     * ya que si no sólo se apreciaría los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
    
                
             if (!cargarDetReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
         
            
            //Establecer el foco en el JTable sólo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }
    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_LIN:
                    strMsg="";
                    break;
              
//                case INT_TBL_DAT_COD_SIS:
//                    strMsg="Código del item (Sistema)";
//                    break;
//                case INT_TBL_DAT_COD_ALT:
//                    strMsg="Código alterno del item";
//                    break;
//                case INT_TBL_DAT_NOM_ITM:
//                    strMsg="Nombre del item";
//                    break;
//                case INT_TBL_DAT_DEC_UNI:
//                    strMsg="Unidad de medida";
//                    break;
//                case INT_TBL_DAT_STK_CON:
//                    strMsg="Stock ";
//                    break;
//                case INT_TBL_DAT_PRE_COS:
//                    strMsg="Precio de Costo";
//                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
}