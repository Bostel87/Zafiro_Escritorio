/*  
 *  ZafCom15.java
 *    
 *  Created on 31 de Julio de 2007, 10:10 PM  
 */
package Compras.ZafCom15;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import Librerias.ZafTblUti.ZafTblTot.ZafTblTot;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import java.util.Vector;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.SQLException;
import java.util.ArrayList;

/**
 *
 * @author  Javier Ayapata
 */
public class ZafCom15 extends javax.swing.JInternalFrame 
{
      // TABLA DE BODEGAS
    static final int INT_TBL_LIN   = 0 ;
    static final int INT_TBL_CHKBOD= 1 ;
    static final int INT_TBL_CODBOD= 2 ;
    static final int INT_TBL_NOMBOD= 3 ;
    
    //Constantes: Columnas del JTable:
    static final int INT_TBL_DAT_LIN=0;                        //Línea
    static final int INT_TBL_DAT_COD_SIS=1;                    //Código del item (Sistema).
    static final int INT_TBL_DAT_COD_ALT=2;                    //Código del item (Alterno).
    static final int INT_TBL_DAT_NOM_ITM=3;                    //Nombre del item.
    static final int INT_TBL_DAT_DEC_UNI=4;                    //Descripción corta de la unidad de medida.
    static final int INT_TBL_DAT_STK_CON=5;                    //Stock consolidado.
    static final int INT_TBL_DAT_PRE_COS=6;                    //Precio de venta 1.
    static final int INT_TBL_DAT_TOT_COS=7;                    //Precio de venta 1.
    static final int INT_TBL_DAT_STKGRPBOD=8;                  //Precio de venta 1.
    static final int INT_TBL_DAT_BUT_KARDEX=9;                  //Precio de venta 1.
    
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod, objTblModBE;
    private ZafThreadGUI objThrGUI;
    private ZafTblCelRenLbl objTblCelRenLbl;            //Render: Presentar JLabel en JTable.
    private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg;
    private boolean blnCon;                             //true: Continua la ejecución del hilo.
    private Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk objTblCelRenChkBE;
    private Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk objTblCelEdiChkBE;
    private ZafTblTot objTblTot;                        //JTable de totales.
    private boolean blnMarTodCanTblBod=true;
    ZafVenCon objVenCon;
    private Librerias.ZafDate.ZafDatePicker txtFecDoc;
    
    
    /* JM: 2018/Oct/11 */
    private String strDesLarCta, strDesCorCta;
    private ZafVenCon vcoCta;                           //Ventana de consulta "Cuentas".
    private Vector vecAux;
    /* JM: 2018/Oct/11 */
    
       
    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafCom15(ZafParSis obj) 
    {
        try
        {
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
            chkSolStk.setVisible(false);
            chkTer.setVisible(false);
            txtTer.setVisible(false);
            txtFecDoc = new Librerias.ZafDate.ZafDatePicker(((javax.swing.JFrame)this.getParent()),"d/m/y"); 
            txtFecDoc.setPreferredSize(new java.awt.Dimension(70, 20));
            txtFecDoc.setText("");
            panFil.add(txtFecDoc); 
            txtFecDoc.setBounds(200, 236, 92, 20);
            intCodMnuSis = objParSis.getCodigoMenu();
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        bgpFilOPt1 = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        optTod = new javax.swing.JRadioButton();
        optFil = new javax.swing.JRadioButton();
        panNomCli = new javax.swing.JPanel();
        lblCodAltDes = new javax.swing.JLabel();
        txtCodAltDes = new javax.swing.JTextField();
        lblCodAltHas = new javax.swing.JLabel();
        txtCodAltHas = new javax.swing.JTextField();
        lblItm = new javax.swing.JLabel();
        txtCodAlt = new javax.swing.JTextField();
        txtNomItm = new javax.swing.JTextField();
        butItm = new javax.swing.JButton();
        txtCodItm = new javax.swing.JTextField();
        chkSolStk = new javax.swing.JCheckBox();
        chkTer = new javax.swing.JCheckBox();
        txtTer = new javax.swing.JTextField();
        chkStkGrp = new javax.swing.JCheckBox();
        optFecAct = new javax.swing.JRadioButton();
        optFecSel = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblBod = new javax.swing.JTable();
        panRpt = new javax.swing.JPanel();
        panCab = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCodCta = new javax.swing.JTextField();
        txtDesCorCta = new javax.swing.JTextField();
        txtDesLarCta = new javax.swing.JTextField();
        txtFecCor = new javax.swing.JTextField();
        txtSalCta = new javax.swing.JTextField();
        butCta = new javax.swing.JButton();
        panTbl = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        spnTot = new javax.swing.JScrollPane();
        tblTot = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setLayout(null);

        bgrFil.add(optTod);
        optTod.setSelected(true);
        optTod.setText("Todos los items");
        optTod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optTodItemStateChanged(evt);
            }
        });
        panFil.add(optTod);
        optTod.setBounds(4, 96, 400, 20);

        bgrFil.add(optFil);
        optFil.setText("Sólo los items que cumplan el criterio seleccionado");
        panFil.add(optFil);
        optFil.setBounds(4, 116, 400, 20);

        panNomCli.setBorder(javax.swing.BorderFactory.createTitledBorder("Código alterno del item"));
        panNomCli.setLayout(null);

        lblCodAltDes.setText("Desde:");
        panNomCli.add(lblCodAltDes);
        lblCodAltDes.setBounds(12, 20, 44, 20);

        txtCodAltDes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodAltDesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodAltDesFocusLost(evt);
            }
        });
        panNomCli.add(txtCodAltDes);
        txtCodAltDes.setBounds(56, 20, 190, 20);

        lblCodAltHas.setText("Hasta:");
        panNomCli.add(lblCodAltHas);
        lblCodAltHas.setBounds(270, 20, 44, 20);

        txtCodAltHas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodAltHasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodAltHasFocusLost(evt);
            }
        });
        panNomCli.add(txtCodAltHas);
        txtCodAltHas.setBounds(310, 20, 190, 20);

        panFil.add(panNomCli);
        panNomCli.setBounds(24, 156, 590, 52);

        lblItm.setText("Item:");
        lblItm.setToolTipText("Beneficiario");
        panFil.add(lblItm);
        lblItm.setBounds(24, 136, 50, 20);

        txtCodAlt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodAltActionPerformed(evt);
            }
        });
        txtCodAlt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodAltFocusGained(evt);
            }
        });
        panFil.add(txtCodAlt);
        txtCodAlt.setBounds(144, 136, 92, 20);

        txtNomItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomItmActionPerformed(evt);
            }
        });
        txtNomItm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomItmFocusGained(evt);
            }
        });
        panFil.add(txtNomItm);
        txtNomItm.setBounds(236, 136, 404, 20);

        butItm.setText("...");
        butItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butItmActionPerformed(evt);
            }
        });
        panFil.add(butItm);
        butItm.setBounds(640, 136, 20, 20);
        panFil.add(txtCodItm);
        txtCodItm.setBounds(88, 136, 56, 20);

        chkSolStk.setText("Sólo items con stock");
        chkSolStk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSolStkActionPerformed(evt);
            }
        });
        panFil.add(chkSolStk);
        chkSolStk.setBounds(370, 216, 160, 20);

        chkTer.setText("Por Teminal:");
        chkTer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTerActionPerformed(evt);
            }
        });
        panFil.add(chkTer);
        chkTer.setBounds(370, 236, 90, 20);
        panFil.add(txtTer);
        txtTer.setBounds(470, 250, 80, 20);

        chkStkGrp.setSelected(true);
        chkStkGrp.setText("Mostrar el stock del Grupo");
        panFil.add(chkStkGrp);
        chkStkGrp.setBounds(4, 256, 220, 20);

        bgpFilOPt1.add(optFecAct);
        optFecAct.setText("Listado a la fecha actual");
        panFil.add(optFecAct);
        optFecAct.setBounds(24, 216, 170, 20);

        bgpFilOPt1.add(optFecSel);
        optFecSel.setSelected(true);
        optFecSel.setText("Listado a fecha");
        optFecSel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optFecSelActionPerformed(evt);
            }
        });
        panFil.add(optFecSel);
        optFecSel.setBounds(24, 236, 170, 20);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Listado de bodegas"));
        jPanel4.setPreferredSize(new java.awt.Dimension(294, 100));
        jPanel4.setRequestFocusEnabled(false);
        jPanel4.setLayout(new java.awt.BorderLayout());

        tblBod.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblBod);

        jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        panFil.add(jPanel4);
        jPanel4.setBounds(4, 4, 660, 92);

        tabFrm.addTab("Filtro", panFil);

        panRpt.setLayout(new java.awt.BorderLayout());

        panCab.setPreferredSize(new java.awt.Dimension(735, 60));
        panCab.setLayout(null);

        jLabel1.setText("Cuenta:");
        panCab.add(jLabel1);
        jLabel1.setBounds(10, 10, 70, 20);

        jLabel2.setText("Corte:");
        panCab.add(jLabel2);
        jLabel2.setBounds(10, 32, 70, 14);

        txtCodCta.setEditable(false);
        panCab.add(txtCodCta);
        txtCodCta.setBounds(60, 10, 50, 20);

        txtDesCorCta.setEditable(false);
        txtDesCorCta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorCtaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorCtaFocusLost(evt);
            }
        });
        txtDesCorCta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorCtaActionPerformed(evt);
            }
        });
        panCab.add(txtDesCorCta);
        txtDesCorCta.setBounds(110, 10, 120, 20);

        txtDesLarCta.setEditable(false);
        panCab.add(txtDesLarCta);
        txtDesLarCta.setBounds(230, 10, 300, 20);

        txtFecCor.setEditable(false);
        panCab.add(txtFecCor);
        txtFecCor.setBounds(60, 30, 90, 20);

        txtSalCta.setEditable(false);
        txtSalCta.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panCab.add(txtSalCta);
        txtSalCta.setBounds(530, 10, 80, 20);

        butCta.setText("jButton1");
        butCta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCtaActionPerformed(evt);
            }
        });
        panCab.add(butCta);
        butCta.setBounds(612, 10, 30, 20);

        panRpt.add(panCab, java.awt.BorderLayout.NORTH);

        panTbl.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnDat.setViewportView(tblDat);

        panTbl.add(spnDat, java.awt.BorderLayout.CENTER);

        spnTot.setPreferredSize(new java.awt.Dimension(454, 18));

        tblTot.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnTot.setViewportView(tblTot);

        panTbl.add(spnTot, java.awt.BorderLayout.SOUTH);

        panRpt.add(panTbl, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Reporte", panRpt);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        setBounds(0, 0, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void optFecSelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optFecSelActionPerformed
         txtFecDoc.setHoy();
    }//GEN-LAST:event_optFecSelActionPerformed

    private void chkTerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTerActionPerformed
       if(!(chkTer.isSelected()))
            txtTer.setText("");
    }//GEN-LAST:event_chkTerActionPerformed
    
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        Configura_ventana_consulta();
        configurarVenConCta();
        
        configurarFrm();
        configurarFormBE();
        cargarBod();
        if(objParSis.getCodigoEmpresa()!=objParSis.getCodigoEmpresaGrupo()){
            cargarTipoDoc();
        }
        
    }//GEN-LAST:event_formInternalFrameOpened

    private void chkSolStkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSolStkActionPerformed
        if (chkSolStk.isSelected())
            optFil.setSelected(true);
    }//GEN-LAST:event_chkSolStkActionPerformed

    private void butItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butItmActionPerformed
        objVenCon.setTitle("Listado de Producto");         
        objVenCon.setCampoBusqueda(1);
        objVenCon.setVisible(true);
        if (objVenCon.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
        {
        txtCodItm.setText(objVenCon.getValueAt(1));
        txtCodAlt.setText(objVenCon.getValueAt(2));
        txtNomItm.setText(objVenCon.getValueAt(3));
        } 
    }//GEN-LAST:event_butItmActionPerformed

    private boolean cargarBod()
    {
        java.sql.Connection con;
        java.sql.Statement stm;
        java.sql.ResultSet rst;
        boolean blnRes=true;
        String strSQL="";
        try
        {
            con=java.sql.DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Si es el usuario Administrador (Código=1) tiene acceso a todas las bodegas.
                if (objParSis.getCodigoUsuario()==1)
                {
                    //Armar la sentencia SQL.
                    strSQL="";
                    strSQL+="SELECT a2.co_bod, a2.tx_nom ";
                    strSQL+=" FROM tbm_emp AS a1";
                    strSQL+=" INNER JOIN tbm_bod AS a2 ON (a1.co_emp=a2.co_emp)";
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresaGrupo();
                    strSQL+=" ORDER BY a1.co_emp, a2.co_bod";
                    rst=stm.executeQuery(strSQL);
                }
                else
                {
                    //Armar la sentencia SQL.
                    if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                    {
                        strSQL=" select  a2.co_bod, a2.tx_nom   from tbr_bodLocPrgUsr as a "
                        + " inner join tbm_bod as a2  on (a2.co_emp=a.co_emp and a2.co_bod=a.co_bod ) "
                        + " where a.co_emp="+objParSis.getCodigoEmpresa()+"  and a.co_loc="+objParSis.getCodigoLocal()+" "
                        + " and a.co_usr= "+objParSis.getCodigoUsuario()+"  and  a.co_mnu="+objParSis.getCodigoMenu()+" "
                        + " and a.tx_natBod IN  ('A') "
                        + " group by a2.co_bod, a2.tx_nom  order by a2.co_bod ";
                    }
                    else
                    {
                        strSQL="select  a1.co_bodgrp as co_bod, a2.tx_nom   from tbr_bodLocPrgUsr as a " +
                        " inner join tbr_bodEmpBodGrp as a1  on (a1.co_emp=a.co_emp and a1.co_bod=a.co_bod ) " +
                        " inner join tbm_bod as a2  on (a2.co_emp=a1.co_empgrp and a2.co_bod=a1.co_bodgrp ) " +
                        " where a.co_emp="+objParSis.getCodigoEmpresa()+" and a.co_loc="+objParSis.getCodigoLocal()+" " +
                        " and a.co_usr="+objParSis.getCodigoUsuario()+" and  a.co_mnu="+objParSis.getCodigoMenu()+" " +
                        "  and a.tx_natBod IN  ('A') " +
                        " group by a1.co_bodgrp, a2.tx_nom  order by co_bodgrp ";
                    }
                    rst=stm.executeQuery(strSQL);
                }
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                while (rst.next())
                {
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_LIN,"");
                    vecReg.add(INT_TBL_CHKBOD,new Boolean(true));
                    vecReg.add(INT_TBL_CODBOD,rst.getString("co_bod"));
                    vecReg.add(INT_TBL_NOMBOD,rst.getString("tx_nom"));
                    vecDat.add(vecReg);
                }
                rst.close();
                stm.close();
                rst=null;
                stm=null;
                con.close();
                con=null;
                //Asignar vectores al modelo.
                objTblModBE.setData(vecDat);
                tblBod.setModel(objTblModBE);
                vecDat.clear();
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

   public void BuscarCliente(String campo,String strBusqueda,int tipo)
   {
        objVenCon.setTitle("Listado de Producto"); 
        if (objVenCon.buscar(campo, strBusqueda ))
        {
            txtCodItm.setText(objVenCon.getValueAt(1));
            txtCodAlt.setText(objVenCon.getValueAt(2));
            txtNomItm.setText(objVenCon.getValueAt(3));
        }
        else
        {
            objVenCon.setCampoBusqueda(tipo);
            objVenCon.cargarDatos();
            objVenCon.setVisible(true);
            if (objVenCon.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
            {
                txtCodItm.setText(objVenCon.getValueAt(1));
                txtCodAlt.setText(objVenCon.getValueAt(2));
                txtNomItm.setText(objVenCon.getValueAt(3));
            }
        }
   }
    
    private void txtNomItmFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomItmFocusGained
        txtNomItm.selectAll();
    }//GEN-LAST:event_txtNomItmFocusGained

    private void txtNomItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomItmActionPerformed
         BuscarCliente("a.tx_nomitm",txtNomItm.getText(),2);
    }//GEN-LAST:event_txtNomItmActionPerformed

    private void txtCodAltFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltFocusGained
         txtCodAlt.selectAll();
    }//GEN-LAST:event_txtCodAltFocusGained

    private void txtCodAltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodAltActionPerformed
         BuscarCliente("a.tx_codalt",txtCodAlt.getText(),1);
    }//GEN-LAST:event_txtCodAltActionPerformed

    private void txtCodAltHasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltHasFocusLost
        if (txtCodAltHas.getText().length()>0)
            optFil.setSelected(true);
    }//GEN-LAST:event_txtCodAltHasFocusLost

    private void txtCodAltDesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltDesFocusLost
        if (txtCodAltDes.getText().length()>0)
        {
            optFil.setSelected(true);
            if (txtCodAltHas.getText().length()==0)
                txtCodAltHas.setText(txtCodAltDes.getText());
        }
    }//GEN-LAST:event_txtCodAltDesFocusLost

    private void txtCodAltHasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltHasFocusGained
        txtCodAltHas.selectAll();
    }//GEN-LAST:event_txtCodAltHasFocusGained

    private void txtCodAltDesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltDesFocusGained
        txtCodAltDes.selectAll();
    }//GEN-LAST:event_txtCodAltDesFocusGained

    private void optTodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optTodItemStateChanged
        if (optTod.isSelected())
        {
            txtCodItm.setText("");
            txtCodAlt.setText("");
            txtNomItm.setText("");
            txtCodAltDes.setText("");
            txtCodAltHas.setText("");
            chkSolStk.setSelected(false);
        }
    }//GEN-LAST:event_optTodItemStateChanged

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acción de acuerdo a la etiqueta del botón ("Consultar" o "Detener").
        if(validarDat())
        {
            if (butCon.getText().equals("Consultar"))
            {
                blnCon=true;
                if (objThrGUI==null)
                {
                    objThrGUI=new ZafThreadGUI();
                    objThrGUI.start();
                }            
            }
            else
            {
                blnCon=false;
            }
        }
    }//GEN-LAST:event_butConActionPerformed

    private boolean validarDat()
    {
        boolean blnRes=true;
        int intEstBod=0;
        for (int j=0; j< tblBod.getRowCount(); j++)
        {
            if (tblBod.getValueAt(j, INT_TBL_CHKBOD)!=null)
            {
                if (tblBod.getValueAt(j, INT_TBL_CHKBOD).toString().equals("true"))
                {
                    intEstBod=1;
                }
            }
        }
        if (intEstBod==0)
        {
            MensajeInf("La Bodega es obligatoria...");
            tabFrm.setSelectedIndex(0);
            return false;
        }
        return blnRes;
    }

    private void MensajeInf(String strMensaje)
    {
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        javax.swing.JOptionPane.showMessageDialog(this,strMensaje,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (javax.swing.JOptionPane.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void butCtaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCtaActionPerformed
        // TODO add your handling code here:
        mostrarVenConCta(0);
        
    }//GEN-LAST:event_butCtaActionPerformed

    private void txtDesCorCtaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorCtaActionPerformed
        // TODO add your handling code here:
        txtDesCorCta.transferFocus();
        setPuntosCta();
    }//GEN-LAST:event_txtDesCorCtaActionPerformed

    private void txtDesCorCtaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorCtaFocusGained
        // TODO add your handling code here:
        strDesCorCta=txtDesCorCta.getText();
        txtDesCorCta.selectAll();        
    }//GEN-LAST:event_txtDesCorCtaFocusGained

    private void txtDesCorCtaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorCtaFocusLost
        // TODO add your handling code here:
        if (!txtDesCorCta.getText().equalsIgnoreCase(strDesCorCta)) {
            if (txtDesCorCta.getText().equals("")) {
                txtCodCta.setText("");
                txtDesLarCta.setText("");
                objTblMod.removeAllRows();
            } else {
                mostrarVenConCta(1);
            }
        } else
            txtDesCorCta.setText(strDesCorCta);

        
    }//GEN-LAST:event_txtDesCorCtaFocusLost

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgpFilOPt1;
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butCta;
    private javax.swing.JButton butItm;
    private javax.swing.JCheckBox chkSolStk;
    private javax.swing.JCheckBox chkStkGrp;
    private javax.swing.JCheckBox chkTer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCodAltDes;
    private javax.swing.JLabel lblCodAltHas;
    private javax.swing.JLabel lblItm;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optFecAct;
    private javax.swing.JRadioButton optFecSel;
    private javax.swing.JRadioButton optFil;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panNomCli;
    private javax.swing.JPanel panRpt;
    private javax.swing.JPanel panTbl;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JScrollPane spnTot;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblBod;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblTot;
    private javax.swing.JTextField txtCodAlt;
    private javax.swing.JTextField txtCodAltDes;
    private javax.swing.JTextField txtCodAltHas;
    private javax.swing.JTextField txtCodCta;
    private javax.swing.JTextField txtCodItm;
    private javax.swing.JTextField txtDesCorCta;
    private javax.swing.JTextField txtDesLarCta;
    private javax.swing.JTextField txtFecCor;
    private javax.swing.JTextField txtNomItm;
    private javax.swing.JTextField txtSalCta;
    private javax.swing.JTextField txtTer;
    // End of variables declaration//GEN-END:variables

    private boolean configurarFormBE()
    {
        boolean blnres=false;
        Vector vecCab=new Vector();    //Almacena las cabeceras
        vecCab.clear();
        vecCab.add(INT_TBL_LIN,"");
        vecCab.add(INT_TBL_CHKBOD," ");
        vecCab.add(INT_TBL_CODBOD,"Cód.Bod");
        vecCab.add(INT_TBL_NOMBOD,"Nom.Bod");
        objTblModBE=new Librerias.ZafTblUti.ZafTblMod.ZafTblMod();
        objTblModBE.setHeader(vecCab);
        tblBod.setModel(objTblModBE);
        //Configurar JTable: Establecer la fila de cabecera.
        new Librerias.ZafColNumerada.ZafColNumerada(tblBod, INT_TBL_LIN);
        tblBod.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        javax.swing.table.TableColumnModel tcmAux=tblBod.getColumnModel();
        tblBod.getTableHeader().setReorderingAllowed(false);
        //Tamaño de las celdas
        tcmAux.getColumn(INT_TBL_LIN).setPreferredWidth(25);
        tcmAux.getColumn(INT_TBL_CODBOD).setPreferredWidth(70);
        tcmAux.getColumn(INT_TBL_NOMBOD).setPreferredWidth(380);
        tcmAux.getColumn(INT_TBL_CHKBOD).setPreferredWidth(60);
        //Configurar JTable: Establecer columnas editables.
        Vector vecAux=new Vector();
        vecAux.add("" + INT_TBL_CHKBOD);
        objTblModBE.setColumnasEditables(vecAux);
        vecAux=null;
        //Configurar JTable: Editor de la tabla.
        new Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi(tblBod);
        objTblCelRenChkBE = new Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk();
        tcmAux.getColumn(INT_TBL_CHKBOD).setCellRenderer(objTblCelRenChkBE);
        objTblCelRenChkBE=null;
        objTblCelEdiChkBE = new Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk();
        tcmAux.getColumn(INT_TBL_CHKBOD).setCellEditor(objTblCelEdiChkBE);
        objTblCelEdiChkBE.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt){
            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
            }
        });
        //Configurar JTable: Establecer los listener para el TableHeader.
        tblBod.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDatMouseClickedBE(evt);
            }
        });
        objTblModBE.setModoOperacion(objTblModBE.INT_TBL_EDI);
        return blnres;
    }

    private void tblDatMouseClickedBE(java.awt.event.MouseEvent evt)
    {
        int i, intNumFil;
        try
        {
            intNumFil=tblBod.getRowCount();
            //Marcar la casilla sólo si se da 1 click con el botón izquierdo.
            if (evt.getButton()==java.awt.event.MouseEvent.BUTTON1 && evt.getClickCount()==1 && tblBod.columnAtPoint(evt.getPoint())==INT_TBL_CHKBOD)
            {
                if (blnMarTodCanTblBod)
                {
                    //Mostrar todas las columnas.
                    for (i=0; i<intNumFil; i++)
                    {
                        tblBod.setValueAt(Boolean.FALSE, i, INT_TBL_CHKBOD);
                    }
                    blnMarTodCanTblBod=false;
                }
                else
                {
                    //Ocultar todas las columnas.
                    for (i=0; i<intNumFil; i++)
                    {
                        tblBod.setValueAt(Boolean.TRUE, i, INT_TBL_CHKBOD);
                    }
                    blnMarTodCanTblBod=true;
                }
            }
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }
    
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {   
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux +" v 2.61");
            lblTit.setText(strAux);
            //Configurar objetos.
            txtCodItm.setVisible(false);
            butCta.setVisible(false);
            
            if(objParSis.getCodigoUsuario()!=1){
                optFecAct.setVisible(false);
            }
            
            if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()){
                txtCodCta.setVisible(false);
                txtDesCorCta.setVisible(false);
                txtDesLarCta.setVisible(false);
            }
            
            txtCodCta.setBackground(objParSis.getColorCamposObligatorios());
            txtDesCorCta.setBackground(objParSis.getColorCamposObligatorios());
            txtDesLarCta.setBackground(objParSis.getColorCamposObligatorios());
            
            
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(9);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_SIS,"Cód.Sis.");
            vecCab.add(INT_TBL_DAT_COD_ALT,"Cód.Alt.");
            vecCab.add(INT_TBL_DAT_NOM_ITM,"Nombre");
            vecCab.add(INT_TBL_DAT_DEC_UNI,"Unidad");
            vecCab.add(INT_TBL_DAT_STK_CON,"Stock");
            vecCab.add(INT_TBL_DAT_PRE_COS,"Cos.Uni.");
            vecCab.add(INT_TBL_DAT_TOT_COS,"Cos.Tot.");
            vecCab.add(INT_TBL_DAT_STKGRPBOD, "Stk.Grp.");
            vecCab.add(INT_TBL_DAT_BUT_KARDEX, "");
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            //Configurar JTable: Establecer el menú de contexto.
            new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_SIS).setPreferredWidth(52);
            tcmAux.getColumn(INT_TBL_DAT_COD_ALT).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_NOM_ITM).setPreferredWidth(250);
            tcmAux.getColumn(INT_TBL_DAT_DEC_UNI).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_STK_CON).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_PRE_COS).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_TOT_COS).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_STKGRPBOD).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_BUT_KARDEX).setPreferredWidth(30);
            tblDat.getTableHeader().setReorderingAllowed(false);
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Editor de búsqueda.
            new ZafTblBus(tblDat);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            tcmAux.getColumn(INT_TBL_DAT_DEC_UNI).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_STK_CON).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_PRE_COS).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_TOT_COS).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_STKGRPBOD).setCellRenderer(objTblCelRenLbl);
            txtFecDoc.setHoy();
            objTblCelRenLbl=null;
            
             ButKardex ObjKardex = new ButKardex(tblDat, INT_TBL_DAT_BUT_KARDEX);   //*****
            
             //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_BUT_KARDEX);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            
            //Configurar JTable: Editor de la tabla.
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
             
            //Libero los objetos auxiliares.
            new ZafTblOrd(tblDat);
            int intCol[]={INT_TBL_DAT_STK_CON, INT_TBL_DAT_TOT_COS};
            objTblTot=new ZafTblTot(spnDat, spnTot, tblDat, tblTot, intCol);
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    public void Configura_ventana_consulta()
    {
        configurarVenConProducto();
    }
    
    private boolean configurarVenConProducto()
    {
        boolean blnRes=true;
        try
        {
            ArrayList arlCam=new ArrayList();
            arlCam.add("a7.co_itm");
            arlCam.add("a7.tx_codAlt");
            arlCam.add("a7.tx_nomItm");
            ArrayList arlAli=new ArrayList();
            arlAli.add("Cód.Sis.");
            arlAli.add("Código");
            arlAli.add("Nombre");
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("60");
            arlAncCol.add("90");
            arlAncCol.add("390");
            String Str_Sql="";
            Str_Sql+="SELECT a1.co_itm, a1.tx_codAlt, a1.tx_nomItm";
            Str_Sql+=" FROM tbm_inv AS a1";
            Str_Sql+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            objVenCon=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, objParSis.getNombreMenu(), Str_Sql, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
      
    /**
    * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
    * @return true: Si se pudo consultar los registros.
    * <BR>false: En el caso contrario.
    */
    private boolean cargarDetReg_Inv()
    {
        boolean blnRes=true;
        try  
        {
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Obtener la condición.
                strAux="";
                if (txtCodItm.getText().length()>0)
                    strAux+=" AND a.co_itm=" + txtCodItm.getText();
                if (txtCodAltDes.getText().length()>0 || txtCodAltHas.getText().length()>0)
                    strAux+=" AND ((LOWER(a.tx_codAlt) BETWEEN '" + txtCodAltDes.getText().replaceAll("'", "''").toLowerCase() + "' AND '" + txtCodAltHas.getText().replaceAll("'", "''").toLowerCase() + "') OR LOWER(a.tx_codAlt) LIKE '" + txtCodAltHas.getText().replaceAll("'", "''").toLowerCase() + "%')";
                if (chkSolStk.isSelected())
                    strAux+=" AND a.nd_stkAct>0";
                String strAuxBod="";
                for (int j=0; j< tblBod.getRowCount(); j++)
                {
                    if (tblBod.getValueAt(j, INT_TBL_CHKBOD)!=null)
                    {
                        if (tblBod.getValueAt(j, INT_TBL_CHKBOD).toString().equals("true"))
                        {
                            if(strAuxBod.equals(""))
                                strAuxBod +=  tblBod.getValueAt(j, INT_TBL_CODBOD).toString();
                            else
                                strAuxBod += ","+tblBod.getValueAt(j, INT_TBL_CODBOD).toString();
                        }
                    }
                }
                if (!chkStkGrp.isSelected())
                {
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setWidth(0);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setMaxWidth(0);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setMinWidth(0);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setPreferredWidth(0);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setResizable(false);
                    
                    tblTot.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setWidth(0);
                    tblTot.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setMaxWidth(0);
                    tblTot.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setMinWidth(0);
                    tblTot.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setPreferredWidth(0);
                    tblTot.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setResizable(false);
                }
                else
                {
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setWidth(80);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setMaxWidth(80);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setMinWidth(80);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setPreferredWidth(80);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setResizable(false);
                    
                    tblTot.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setWidth(80);
                    tblTot.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setMaxWidth(80);
                    tblTot.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setMinWidth(80);
                    tblTot.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setPreferredWidth(80);
                    tblTot.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setResizable(false);
                }
                if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                {
                    strSQL=" select * from ( "
                    + " select co_itm, tx_codalt, tx_nomitm, tx_desCor, nd_stkact, nd_cosuni, round((nd_stkact*nd_cosuni),2) as total  "
                    + " from ( "
                    + " select a.co_itm, a.tx_codalt,a.tx_nomitm, b.tx_desCor, a.nd_cosuni "
                    + " ,( "
                    + "  select sum(x1.nd_stkact) as nd_stkact  "
                    + "  from  tbm_inv as x   "
                    + "  Inner join tbm_invbod as x1 on (x1.co_emp=x.co_emp and x1.co_itm=x.co_itm )  "
                    + "  inner join tbm_equinv as x2 on (x2.co_emp=x.co_emp and x2.co_itm=x.co_itm )  "
                    + "  INNER JOIN tbr_bodEmpBodGrp AS x7 ON (x1.co_emp=x7.co_emp AND x1.co_bod=x7.co_bod)  "
                    + "  WHERE  x2.co_emp != a.co_emp and x2.co_itmmae=a2.co_itmmae  "
                    + "  AND ( x7.co_empGrp="+objParSis.getCodigoEmpresa()+" AND x7.co_bodGrp in ( "+strAuxBod+"  )  )   "
                    + "  ) as nd_stkact  "
                    + "  from  tbm_inv as a  "
                    + "  inner join tbm_equinv as a2 on (a2.co_emp=a.co_emp and a2.co_itm=a.co_itm ) "
                    + "  left JOIN tbm_var AS b ON (a.co_uni=b.co_reg)   "
                    + "  WHERE a.co_emp ="+objParSis.getCodigoEmpresa()+"     "
                    + "  "+strAux+"  "
                    + "  ORDER BY a.tx_codalt   "
                    + "  ) as x  ) as x   ";
                }
                else
                {
                    strSQL=" select * from ( "
                    + "  select co_itm, tx_codalt, tx_nomitm, tx_desCor, nd_stkact, nd_cosuni, round((nd_stkact*nd_cosuni),2) as total "
                    + " from ( "
                    + " select a.co_itm,a.tx_codalt,a.tx_nomitm,b.tx_desCor,a.nd_cosuni "
                    + " , sum(a1.nd_stkact) as nd_stkact "
                    + " from  tbm_inv as a "
                    + " Inner join tbm_invbod as a1 on (a1.co_emp=a.co_emp and a1.co_itm=a.co_itm ) "
                    + " INNER JOIN tbr_bodEmpBodGrp AS a7 ON (a1.co_emp=a7.co_emp AND a1.co_bod=a7.co_bod) "
                    + " left JOIN tbm_var AS b ON (a.co_uni=b.co_reg)  "
                    + " WHERE a.co_emp="+objParSis.getCodigoEmpresa()+" "
                    + "  AND ( a7.co_empGrp="+objParSis.getCodigoEmpresaGrupo()+" AND a7.co_bodGrp in ( "+strAuxBod+" )  )  "
                    + " "+strAux+" "
                    + " GROUP BY a.co_itm,a.tx_codalt,a.tx_nomitm,b.tx_desCor,a.nd_cosuni  "
                    + " ORDER BY a.tx_codalt "
                    + "  ) as x  ) as x ";
                }
                if(chkTer.isSelected())
                    strSQL+= " where LOWER(x.tx_codalt) like '%"+txtTer.getText().trim().toLowerCase()+"'"; 
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                while (rst.next())
                {
                    if (blnCon)
                    {
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_COD_SIS,rst.getString("co_itm"));
                        vecReg.add(INT_TBL_DAT_COD_ALT,rst.getString("tx_codAlt"));
                        vecReg.add(INT_TBL_DAT_NOM_ITM,rst.getString("tx_nomItm"));
                        vecReg.add(INT_TBL_DAT_DEC_UNI,rst.getString("tx_descor"));
                        vecReg.add(INT_TBL_DAT_STK_CON,rst.getString("nd_stkAct"));
                        vecReg.add(INT_TBL_DAT_PRE_COS,rst.getString("nd_cosuni"));
                        vecReg.add(INT_TBL_DAT_TOT_COS,rst.getString("Total"));
                        vecReg.add(INT_TBL_DAT_STKGRPBOD,"");
                        vecReg.add(INT_TBL_DAT_BUT_KARDEX, "");
                        vecDat.add(vecReg);
                    }
                    else
                    {
                        break;
                    }
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                objTblTot.calcularTotales();  
                objTblTot.igualarAnchoColumnas();
//                objTblTot.setValueAt("" +  objTblTot.getValueAt(0,INT_TBL_DAT_TOT_COS),0,0 );
                lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros .");
                butCon.setText("Consultar");
            }
            }
            catch (java.sql.SQLException e)
            {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
       
    /**
    * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
    * @return true: Si se pudo consultar los registros.
    * <BR>false: En el caso contrario.   tbr_bodemp
    */
    private boolean cargarDetReg_Fec(){
        boolean blnRes=true;
        try{
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                //Obtener la condición.
                strAux="";
                if (txtCodItm.getText().length()>0)
                    strAux+=" AND x.co_itm=" + txtCodItm.getText();
                if (txtCodAltDes.getText().length()>0 || txtCodAltHas.getText().length()>0)
                    strAux+=" AND ((LOWER(x.tx_codAlt) BETWEEN '" + txtCodAltDes.getText().replaceAll("'", "''").toLowerCase() + "' AND '" + txtCodAltHas.getText().replaceAll("'", "''").toLowerCase() + "') OR LOWER(x.tx_codAlt) LIKE '" + txtCodAltHas.getText().replaceAll("'", "''").toLowerCase() + "%')";
                //**************************** VALIDA FECHA ******************************************//
                String fecdesde="";   
                if (optFecSel.isSelected()){
                    fecdesde =  objUti.formatearFecha(txtFecDoc.getText(),"dd/MM/yyyy","yyyy-MM-dd");
                }   
                strSQL = "DELETE FROM tbm_invval WHERE co_emp="+objParSis.getCodigoEmpresa()+" ";
                java.sql.PreparedStatement pstCabMovInv = con.prepareStatement(strSQL);
                pstCabMovInv.executeUpdate();
                String strAuxBod="";
                for (int j=0; j< tblBod.getRowCount(); j++){
                    if (tblBod.getValueAt(j, INT_TBL_CHKBOD)!=null){
                        if (tblBod.getValueAt(j, INT_TBL_CHKBOD).toString().equals("true")){
                            if(strAuxBod.equals(""))
                                strAuxBod +=  tblBod.getValueAt(j, INT_TBL_CODBOD).toString();
                            else
                                strAuxBod += ","+tblBod.getValueAt(j, INT_TBL_CODBOD).toString();
                        }
                    }
                }
                if (!chkStkGrp.isSelected()){
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setWidth(0);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setMaxWidth(0);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setMinWidth(0);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setPreferredWidth(0);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setResizable(false); 
                }
                else{
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setWidth(80);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setMaxWidth(80);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setMinWidth(80);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setPreferredWidth(80);
                    tblDat.getColumnModel().getColumn(INT_TBL_DAT_STKGRPBOD).setResizable(false); 
                }
                if(objParSis.getCodigoEmpresaGrupo()==objParSis.getCodigoEmpresa()){
                    strSQL = " insert into tbm_invval(co_emp,co_itm,fe_doc,ne_secemp,tx_codalt,tx_nomitm,tx_uni,nd_exi,nd_cospro,nd_valexi) "
                    +" SELECT  coempgrp,  co_itm , fe_doc  , ne_secgrp, tx_codalt , tx_nomitm, tx_desCor , nd_exigrp, nd_cosprogrp, nd_valexigrp "
                    + " FROM ( "
                    + " SELECT  coempgrp,  co_itm , fe_doc  , ne_secgrp, tx_codalt , tx_nomitm, tx_desCor , nd_exigrp, nd_cosprogrp, nd_valexigrp , co_reg "
                    + " FROM ( "
                    + " SELECT 0 as coempgrp  ,a2.co_emp as coemp "
                    + " ,( SELECT x.co_itm FROM tbm_equInv as x WHERE x.co_emp="+objParSis.getCodigoEmpresa()+" AND x.co_itmMae=a6.co_itmMae ) as co_itm "
                    + " , a1.fe_doc AS fe_doc  , a1.ne_secgrp AS ne_secgrp, a2.tx_codalt ,a2.tx_nomitm, c.tx_desCor , a2.nd_exigrp, a2.nd_cosprogrp "
                    + " ,a2.nd_valexigrp , a2.co_reg "
                    + " FROM tbm_cabMovInv AS a1 "
                    + " INNER JOIN tbm_detMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) "
                    + " INNER JOIN tbr_bodEmpBodGrp AS a7 ON (a2.co_emp=a7.co_emp AND a2.co_bod=a7.co_bod) "
                    + " INNER JOIN tbm_inv AS a3 ON (a2.co_emp=a3.co_emp AND a2.co_itm=a3.co_itm) "
                    + " left join tbm_cli as a4 on (a4.co_emp=a1.co_emp and a4.co_cli=a1.co_cli) "
                    + " LEFT JOIN tbm_var AS c ON (a3.co_uni=c.co_reg) "
                    + " INNER JOIN tbm_equInv AS a6 ON (a2.co_emp=a6.co_emp AND a2.co_itm=a6.co_itm) "
                    + " WHERE   ( a7.co_empGrp="+objParSis.getCodigoEmpresa()+" AND a7.co_bodGrp in ( "+strAuxBod+"  )  )   AND "
                    + " a6.co_itmMae in ( "
                    + "   SELECT x1.co_itmMae FROM tbm_inv as x "
                    + "  inner join  tbm_equInv as x1 on (x1.co_emp=x.co_emp and x1.co_itm=x.co_itm ) "
                    + "  WHERE x.co_emp="+objParSis.getCodigoEmpresa()+" AND x.st_ser='N'  "+strAux+" "
                    + "  ) "
                    + " and a4.co_empgrp is null "
                    + " AND a1.fe_doc<='"+fecdesde+"'  and  a1.st_reg not in ('I','E')  and  a1.st_tipdev='C' "
                    + " AND NOT (a1.co_emp<>"+objParSis.getCodigoEmpresa()+" AND a1.co_tipDoc=46) "
                    + " GROUP BY a2.co_emp, a6.co_itm , a6.co_itmMae ,a1.fe_doc ,a1.ne_secgrp  ,a2.co_reg ,  a2.tx_codalt ,a2.tx_nomitm, c.tx_desCor,  a2.nd_exigrp, a2.nd_cosprogrp, a2.nd_valexigrp "
                    + " ) AS x where x.tx_codalt like '%%' "
                    + " ORDER BY x.coempgrp, x.co_itm  ,x.fe_doc ,x.ne_secgrp, x.co_reg  ) AS x ";
                }
                else{
                    strSQL = " insert into tbm_invval(co_emp,co_itm,fe_doc,ne_secemp,tx_codalt,tx_nomitm,tx_uni,nd_exi,nd_cospro,nd_valexi)" +
                    " SELECT * FROM (" +
                    " SELECT "+objParSis.getCodigoEmpresa()+" , a2.co_itm,  a1.fe_doc AS fe_doc  , a1.ne_secEmp AS ne_secEmp, a2.tx_codalt ,a2.tx_nomitm, c.tx_desCor , a2.nd_exi, a2.nd_cospro, a2.nd_valexi " +
                    " FROM tbm_cabMovInv AS a1" +
                    " INNER JOIN tbm_detMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc)" +
                    " INNER JOIN tbr_bodEmpBodGrp AS a7 ON (a2.co_emp=a7.co_emp AND a2.co_bod=a7.co_bod) "
                    + " INNER JOIN tbm_inv AS a3 ON (a2.co_emp=a3.co_emp AND a2.co_itm=a3.co_itm)" +
                    " LEFT JOIN tbm_var AS c ON (a3.co_uni=c.co_reg)" +
                    " WHERE a1.co_emp="+objParSis.getCodigoEmpresa()+"  AND a1.fe_doc<='"+fecdesde+"' "
                    + " AND ( a7.co_empGrp="+objParSis.getCodigoEmpresaGrupo()+" AND a7.co_bodGrp in ( "+strAuxBod+" )  ) "
                    + "  and  a1.st_reg not in ('I','E')  and  a1.st_tipdev='C'" +
                    " ORDER BY a2.co_itm  ,a1.fe_doc ,a1.ne_secEmp  , a2.co_reg ) AS x" +
                    " where x.tx_codalt like '%%' ";
                    strSQL+=strAux; 
                }
                if (chkTer.isSelected())
                    strSQL+= " AND  LOWER(x.tx_codalt) like '%"+txtTer.getText().trim().toLowerCase()+"'"; 
                pstCabMovInv = con.prepareStatement(strSQL);
                pstCabMovInv.executeUpdate();
                if(objParSis.getCodigoEmpresaGrupo()==objParSis.getCodigoEmpresa()){
                    strSQL=" SELECT co_itm, ne_secemp, tx_codalt, tx_nomitm, tx_uni, nd_exi, nd_cospro, nd_valexi , 0 as nd_stkact FROM ( " +
                    " SELECT co_itm, ne_secemp, tx_codalt, tx_nomitm, tx_uni, nd_exi, nd_cospro, nd_valexi FROM tbm_invval WHERE ne_secreg in(select max(ne_secreg) FROM tbm_invval WHERE co_emp="+objParSis.getCodigoEmpresa()+" and  fe_doc<='"+fecdesde+"' group by co_itm) " +
                    " ) as a ";
                }
                else{
                    strSQL=" select a.co_itm, ne_secemp, tx_codalt, tx_nomitm, tx_uni, nd_exi, nd_cospro, nd_valexi ,  sum(bod.nd_stkact) as nd_stkact FROM (" +
                    " SELECT co_itm, ne_secemp, tx_codalt, tx_nomitm, tx_uni, nd_exi, nd_cospro, nd_valexi " +
                    " FROM tbm_invval WHERE ne_secreg in(select max(ne_secreg) FROM tbm_invval WHERE co_emp="+objParSis.getCodigoEmpresa()+" and  " +
                    "fe_doc<='"+fecdesde+"' group by co_itm) " +
                    " ) AS a " +
                    " left join tbm_equInv  as equi on(equi.co_emp="+objParSis.getCodigoEmpresa()+" and equi.co_itm=a.co_itm) " +
                    " left join tbm_equInv  as equi2 on(equi2.co_emp=0 and equi2.co_itmMae=equi.co_itmMae) " +
                    " left join tbm_invbod as bod on(bod.co_emp="+objParSis.getCodigoEmpresa()+" and bod.co_itm=a.co_itm and bod.co_bod in ( 1 " +
                    ")) group by a.co_itm, ne_secemp, tx_codalt, tx_nomitm, tx_uni, nd_exi, nd_cospro, nd_valexi ";
                }
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                while(rst.next()){
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN,"");
                    vecReg.add(INT_TBL_DAT_COD_SIS, (rst.getString("co_itm")==null)?"":rst.getString("co_itm") );
                    vecReg.add(INT_TBL_DAT_COD_ALT, (rst.getString("tx_codAlt")==null)?"":rst.getString("tx_codAlt") );
                    vecReg.add(INT_TBL_DAT_NOM_ITM, (rst.getString("tx_nomitm")==null)?"":rst.getString("tx_nomitm") );
                    vecReg.add(INT_TBL_DAT_DEC_UNI, (rst.getString("tx_uni")==null)?"":rst.getString("tx_uni") );
                    vecReg.add(INT_TBL_DAT_STK_CON, (rst.getString("nd_exi")==null)?"0":rst.getString("nd_exi") );
                    vecReg.add(INT_TBL_DAT_PRE_COS, (rst.getString("nd_cospro")==null)?"0":rst.getString("nd_cospro") );
                    vecReg.add(INT_TBL_DAT_TOT_COS, (rst.getString("nd_valexi")==null)?"0":rst.getString("nd_valexi") );
                    vecReg.add(INT_TBL_DAT_STKGRPBOD, (rst.getString("nd_stkact")==null)?"0":rst.getString("nd_stkact") );
                    vecReg.add(INT_TBL_DAT_BUT_KARDEX, "");
                    vecDat.add(vecReg);
                }
                butCon.setText("Consultar");
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                objTblTot.calcularTotales();   
                objTblTot.igualarAnchoColumnas();
//                objTblTot.setValueAt("" +  objTblTot.getValueAt(0,INT_TBL_DAT_TOT_COS),0,0 );
                lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");
                butCon.setText("Consultar");
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
  
    /**
    * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
    * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
    * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
    * llevan a cabo los procesos se podría presentar mensajes informativos en un JLabel e
    * ir incrementando un JProgressBar con lo cual el usuario estaría informado en todo
    * momento de lo que ocurre. Si se desea hacer ésto es necesario utilizar ésta clase
    * ya que si no sólo se apreciaría los cambios cuando ha terminado todo el proceso.
    */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            pgrSis.setIndeterminate(true);
            if (optFecSel.isSelected())
            {
                if (cargarDetReg_Fec()){
                    if(objParSis.getCodigoEmpresa()!=objParSis.getCodigoEmpresaGrupo()){
                        if(cargarDetSaldoCta()){
                            System.out.println("oK");
                        }
                        else{
                        //Inicializar objetos si no se pudo cargar los datos.
                        lblMsgSis.setText("Listo");
                        pgrSis.setValue(0);
                        butCon.setText("Consultar");
                        }
                    }
                    
                }
                else{
                    //Inicializar objetos si no se pudo cargar los datos.
                    lblMsgSis.setText("Listo");
                    pgrSis.setValue(0);
                    butCon.setText("Consultar");
                }
            }
            else
            {
                if (cargarDetReg_Inv()){
                    if(objParSis.getCodigoEmpresa()!=objParSis.getCodigoEmpresaGrupo()){
                        if(cargarDetSaldoCta()){
                            System.out.println("oK");
                        }
                        else{
                        //Inicializar objetos si no se pudo cargar los datos.
                        lblMsgSis.setText("Listo");
                        pgrSis.setValue(0);
                        butCon.setText("Consultar");
                        }
                    }
                }
                else{
                    //Inicializar objetos si no se pudo cargar los datos.
                    lblMsgSis.setText("Listo");
                    pgrSis.setValue(0);
                    butCon.setText("Consultar");
                }
            } 
            //Establecer el foco en el JTable sólo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            pgrSis.setIndeterminate(false);
            objThrGUI=null;
        }
    }
    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt){
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol){
                case INT_TBL_DAT_LIN:
                    strMsg="";
                    break;
                case INT_TBL_DAT_COD_SIS:
                    strMsg="Código del item (Sistema)";
                    break;
                case INT_TBL_DAT_COD_ALT:
                    strMsg="Código alterno del item";
                    break;
                case INT_TBL_DAT_NOM_ITM:
                    strMsg="Nombre del item";
                    break;
                case INT_TBL_DAT_DEC_UNI:
                    strMsg="Unidad de medida";
                    break;
                case INT_TBL_DAT_STK_CON:
                    strMsg="Stock";
                    break;
                case INT_TBL_DAT_PRE_COS:
                    strMsg="Costo unitario";
                    break;
                case INT_TBL_DAT_TOT_COS:
                    strMsg="Costo total";
                    break;
                case INT_TBL_DAT_STKGRPBOD:
                    strMsg="Stock del Grupo";
                    break;
                case INT_TBL_DAT_BUT_KARDEX:
                    strMsg="Muesta el Kardex de Inventario";
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
    /* JM: 2018/Oct/11 */
    
    /**
     * Esta funcion configura la "Ventana de consulta" que seria utilizada para
     * mostrar las "Cuentas".
     */
    private boolean configurarVenConCta()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_emp");
            arlCam.add("a1.co_cta");
            arlCam.add("a1.tx_codCta");
            arlCam.add("a1.tx_desLar");
            
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código empresa");
            arlAli.add("Código");
            arlAli.add("Cuenta");
            arlAli.add("Nombre");
            
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("60");
            arlAncCol.add("80");
            arlAncCol.add("80");
            arlAncCol.add("400");
            //Armar la sentencia SQL.
            //Si es el usuario Administrador (Código=1) tiene acceso a todas las cuentas. 
//            2;1277;"BODEGA     GENERAL";"1.01.06.01.15"
//            1;3000;"BODEGA GENERAL";"1.01.06.01.15"
//            4;2253;"BODEGA  GENERAL";"1.01.06.01.15"
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_cta, a1.tx_codCta, a1.tx_desLar";
            strSQL+=" FROM tbm_plaCta AS a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            if(objParSis.getCodigoEmpresa()==1){
                strSQL+=" AND a1.co_Cta=3000 ";
            }
            else if(objParSis.getCodigoEmpresa()==2){
                strSQL+=" AND a1.co_Cta=1277 ";
            }
            else if(objParSis.getCodigoEmpresa()==4){
                strSQL+=" AND a1.co_Cta=2253 ";
            }
            strSQL+=" ORDER BY a1.tx_codCta";
            

            vcoCta=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de cuentas contables", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoCta.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoCta.setConfiguracionColumna(2, javax.swing.JLabel.RIGHT);
            vcoCta.setConfiguracionColumna(3, javax.swing.JLabel.RIGHT);
            vcoCta.setCampoBusqueda(3);
            vcoCta.setCriterio1(7);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConCta(int intTipBus)
    {
        boolean blnRes=true;
       
        int intConChk=0;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoCta.setCampoBusqueda(2);
                    vcoCta.show();
                    if (vcoCta.getSelectedButton()==vcoCta.INT_BUT_ACE)
                    {
                        txtCodCta.setText(vcoCta.getValueAt(2));
                        txtDesCorCta.setText(vcoCta.getValueAt(3));
                        txtDesLarCta.setText(vcoCta.getValueAt(4));
                        objTblMod.removeAllRows();
                    }
                    break;
                case 1: //Básqueda directa por "Námero de cuenta".
                    if (vcoCta.buscar("a1.tx_codCta", txtDesCorCta.getText()))
                    {
                        txtCodCta.setText(vcoCta.getValueAt(2));
                        txtDesCorCta.setText(vcoCta.getValueAt(3));
                        txtDesLarCta.setText(vcoCta.getValueAt(4));
                        objTblMod.removeAllRows();
                    }
                    else
                    {
                        vcoCta.setCampoBusqueda(2);
                        vcoCta.setCriterio1(11);
                        vcoCta.cargarDatos();
                        vcoCta.show();
                        if (vcoCta.getSelectedButton()==vcoCta.INT_BUT_ACE)
                        {
                            txtCodCta.setText(vcoCta.getValueAt(2));
                            txtDesCorCta.setText(vcoCta.getValueAt(3));
                            txtDesLarCta.setText(vcoCta.getValueAt(4));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtDesCorCta.setText(strDesCorCta);
                        }
                    }
                    break;
                case 2: //Básqueda directa por "Descripcián larga".
                    if (vcoCta.buscar("a1.tx_desLar", txtDesLarCta.getText()))
                    {
                        txtCodCta.setText(vcoCta.getValueAt(2));
                        txtDesCorCta.setText(vcoCta.getValueAt(3));
                        txtDesLarCta.setText(vcoCta.getValueAt(4));
                        objTblMod.removeAllRows();
                    }
                    else
                    {
                        vcoCta.setCampoBusqueda(3);
                        vcoCta.setCriterio1(11);
                        vcoCta.cargarDatos();
                        vcoCta.show();
                        if (vcoCta.getSelectedButton()==vcoCta.INT_BUT_ACE)
                        {
                            txtCodCta.setText(vcoCta.getValueAt(2));
                            txtDesCorCta.setText(vcoCta.getValueAt(3));
                            txtDesLarCta.setText(vcoCta.getValueAt(4));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtDesLarCta.setText(strDesLarCta);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private void setPuntosCta(){
        strAux=txtDesCorCta.getText();
        String strCodCtaOri=strAux;
        String strCodCtaDes="";
        char chrCtaOri;
        //obtengo la longitud de mi cadena
        int intLonCodCta=strCodCtaOri.length();
        int intLonCodCtaMen=intLonCodCta-1;
        //PARA CUANDO LOS TRES ULTIMOS DIGITOS SE LOS DEBE TOMAR COMO UN NIVEL DIFERENTE
        int intLonCodCtaMenTreDig=intLonCodCta-2;
        if (strCodCtaOri.length()<=1)
            return;
        else{
            chrCtaOri=strCodCtaOri.charAt(1);
            if(chrCtaOri!='.'){
                for (int i=0; i < strCodCtaOri.length(); i++){
                    if(i==0){
                        strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                        strCodCtaDes=strCodCtaDes+".";
                    }
                    else{
                        if(  (strCodCtaOri.length() % 2) == 0 ){
                            if(((i % 2)==0)&&(i<intLonCodCtaMenTreDig)){
                                strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                                strCodCtaDes=strCodCtaDes+".";
                            }
                            if(((i % 2)==0)&&(i==intLonCodCtaMenTreDig)){
                                strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                            }
                            else{
                                if((i % 2)!= 0)
                                    strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                            }
                        }
                        else{
                            if(((i % 2)==0)&&(i!=intLonCodCtaMen)){
                                strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                                strCodCtaDes=strCodCtaDes+".";
                            }
                            if(((i % 2)==0)&&(i==intLonCodCtaMen)){
                                strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                            }
                            else{
                                if((i % 2)!= 0)
                                    strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                            }
                        }
                    }
                }
                txtDesCorCta.setText(strCodCtaDes);
            }
        }
    }
    
    
    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetSaldoCta()
    {
        boolean blnRes=true;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Obtener la condición.
                String strConSQL="";
                if (txtCodCta.getText().length()>0)
                    strConSQL+=" AND a1.co_cta=" + txtCodCta.getText();
                
                if(optFecAct.isSelected()){
                        txtFecDoc.setText(objUti.formatearFecha(objUti.getFechaServidor(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos(),objParSis.getQueryFechaHoraBaseDatos(),objParSis.getFormatoFechaBaseDatos()),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()));
                }
                
                
                //a una fecha que no es mes completo Ejm. 2006-01-12
                strSQL="";
                strSQL+="SELECT b1.co_emp, b1.co_cta, b1.ne_niv, b1.ne_pad, b1.tx_codCta, b1.tx_desLar, b1.tx_tipCta";
                strSQL+=" , ( (CASE WHEN b2.nd_salCta IS NULL THEN 0 ELSE b2.nd_salCta END)";
                strSQL+=" 		+ (CASE WHEN b3.nd_salCta IS NULL THEN 0 ELSE b3.nd_salCta END)";
                strSQL+=" 		+ (CASE WHEN b4.nd_salCta IS NULL THEN 0 ELSE b4.nd_salCta END)     ) AS nd_salAcu";
                strSQL+=" 		, ((CASE WHEN b2.nd_salCta IS NULL THEN 0 ELSE b2.nd_salCta END)";
                strSQL+=" 		+ (CASE WHEN b4.nd_salCta IS NULL THEN 0 ELSE b4.nd_salCta END)     ) AS nd_salMen";
                strSQL+=" FROM(";
                strSQL+=" 	SELECT a1.co_emp, a1.co_cta, a1.ne_niv, a1.ne_pad, a1.tx_codCta, a1.tx_desLar, a1.tx_tipCta, 0 AS nd_salCta";
                strSQL+=" 	FROM tbm_plaCta AS a1 WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="         AND a1.st_reg NOT IN('I','E') AND a1.st_reg='A' ";
                strSQL+=""+strConSQL;
                strSQL+=" 	ORDER BY a1.tx_codCta";
                strSQL+=" ) AS b1";
                strSQL+=" LEFT OUTER JOIN(";
                strSQL+=" 		 SELECT b2.co_emp, b2.co_cta, b2.ne_niv, b2.ne_pad, b2.tx_codCta, b2.tx_desLar";
                strSQL+=" 			, SUM(salAct) AS nd_salCta FROM(";
                strSQL+=" 			SELECT a1.co_emp, a4.co_cta, a4.ne_niv, a4.ne_pad, a4.tx_codCta, a4.tx_desLar";
                strSQL+=" 			,sum(  (CASE WHEN a2.nd_mondeb IS NULL THEN 0 ELSE a2.nd_mondeb END)-(CASE WHEN a2.nd_monhab IS NULL THEN 0 ELSE a2.nd_monhab END) ) as salAct";
                strSQL+=" 			FROM tbm_cabdia as a1 ";
                strSQL+=" 			INNER JOIN tbm_detdia AS a2";
                strSQL+=" 			ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipdoc=a2.co_tipdoc AND a1.co_dia=a2.co_dia";
                strSQL+=" 			INNER JOIN tbm_plaCta AS a4 ON a2.co_emp=a4.co_emp AND a2.co_cta=a4.co_cta";
                strSQL+=" 			where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                if (txtFecDoc.isFecha())
                    strSQL+=" AND (a1.fe_dia BETWEEN '" + objUti.formatearFecha(getFechaInicioMesCorte(txtFecDoc.getText()),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(txtFecDoc.getText(),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "')";
                strSQL+=" 			and a1.st_reg='A' AND a4.tx_tipCta='D'";
                strSQL+=" 			GROUP BY a1.co_emp, a4.co_cta, a4.ne_niv, a4.ne_pad, a4.tx_codCta, a4.tx_desLar";
                strSQL+=" 		 ) AS b2";
                strSQL+=" 		 GROUP BY b2.co_emp, b2.co_cta, b2.ne_niv, b2.ne_pad, b2.tx_codCta, b2.tx_desLar";
                strSQL+=" 		 ORDER BY b2.tx_codCta";
                strSQL+=" ) AS b2";
                strSQL+=" ON b1.co_emp=b2.co_emp AND b1.co_cta=b2.co_cta";
                strSQL+=" LEFT OUTER JOIN(";
                strSQL+=" 	    SELECT a1.co_emp, a1.co_cta, a1.ne_niv, a1.ne_pad, a1.tx_codCta, a1.tx_desLar, a3.nd_salCta AS nd_salCta";
                strSQL+=" 	     FROM tbm_plaCta AS a1";
                strSQL+=" 	     INNER JOIN tbm_salCta as a2 ON (a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta)";
                strSQL+=" 	     INNER JOIN (";
                strSQL+=" 	     SELECT b1.co_emp, b1.co_cta, SUM(b1.nd_salCta) AS nd_salCta";
                strSQL+=" 	     FROM tbm_salCta AS b1";
                strSQL+=" 	     WHERE b1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND b1.co_per<=" + getPeriodoAnterior() + "";//200512
                 
                strSQL+=" 	     GROUP BY b1.co_emp, b1.co_cta";
                strSQL+=" 	     ) AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_cta=a3.co_cta)";
                strSQL+=" 	     WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" 	     AND a2.co_per=" + getPeriodoAnterior() + "";//periodos menores a la fecha de corte
                strSQL+="                  AND a1.tx_tipCta='D'";
                strSQL+=" 	     AND (a2.nd_salCta<>0 OR a3.nd_salCta<>0)";
                strSQL+=" 	     ORDER BY a1.tx_codCta";
                strSQL+=" ) AS b3";
                strSQL+=" ON b1.co_emp=b3.co_emp AND b1.co_cta=b3.co_cta";
                strSQL+=" LEFT OUTER JOIN(";
                strSQL+=" SELECT b1.co_emp, b1.co_cta, b1.ne_niv, b1.ne_pad, b1.tx_codCta, b1.tx_desLar, SUM(b2.nd_salCta) AS nd_salCta FROM(";
                strSQL+=" 	SELECT a1.co_emp, a1.co_ctaRes AS co_cta, a2.ne_niv, a2.ne_pad, a2.tx_codCta, a2.tx_desLar";
                strSQL+=" 	FROM tbm_emp AS a1 INNER JOIN tbm_plaCta AS a2";
                strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_ctaRes=a2.co_cta";
                strSQL+=" 	WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" 	) AS b1";
                strSQL+=" INNER JOIN(";
                strSQL+=" 			SELECT a1.co_emp, a4.co_cta, a4.ne_niv, a4.ne_pad, a4.tx_codCta, a4.tx_desLar";
                strSQL+=" 			,sum(  (CASE WHEN a2.nd_mondeb IS NULL THEN 0 ELSE a2.nd_mondeb END)-(CASE WHEN a2.nd_monhab IS NULL THEN 0 ELSE a2.nd_monhab END) ) as nd_salCta";
                strSQL+=" 			FROM tbm_cabdia as a1 INNER JOIN tbm_detdia AS a2";
                strSQL+=" 			ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipdoc=a2.co_tipdoc AND a1.co_dia=a2.co_dia";
                strSQL+=" 			INNER JOIN tbm_plaCta AS a4 ON a2.co_emp=a4.co_emp AND a2.co_cta=a4.co_cta";
                strSQL+=" 			where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                if (txtFecDoc.isFecha())
                    strSQL+=" AND a1.fe_dia BETWEEN '" + objUti.formatearFecha(getFechaInicioMesCorte(txtFecDoc.getText()),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(txtFecDoc.getText(),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "'";//solo el mes del corte Ejm: corte al 2008/01/15   -> between 2008/01/01 and 2008/01/15
                strSQL+=" 			and a1.st_reg='A'";
                strSQL+="                         AND a4.tx_tipCta='D'";
                strSQL+=" 			GROUP BY a1.co_emp, a4.co_cta, a4.ne_niv, a4.ne_pad, a4.tx_codCta, a4.tx_desLar";
                strSQL+=" 			ORDER BY a4.tx_codCta";
                strSQL+=" ) AS b2";
                strSQL+=" ON b1.co_emp=b2.co_emp";
                strSQL+=" GROUP BY b1.co_emp, b1.co_cta, b1.ne_niv, b1.ne_pad, b1.tx_codCta, b1.tx_desLar";
                strSQL+=" ) AS b4";
                strSQL+=" ON b1.co_emp=b4.co_emp AND b1.co_cta=b4.co_cta";

                strSQL+=" ORDER BY b1.tx_codCta";
                 rst = stm.executeQuery(strSQL);
                while (rst.next()){
                    if (blnCon){
                        txtSalCta.setText(  objUti.redondear( Double.parseDouble(rst.getString("nd_salAcu")), objParSis.getDecimalesMostrar())+""); 
                    }
                    else{
                        break;
                    }
                }
                 
                txtFecCor.setText(objUti.formatearFecha(txtFecDoc.getText(),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()));
                
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private String getFechaInicioMesCorte(String fechaCorte){
        String strFecIniMesCor="";
        try{
            java.util.Calendar cal=java.util.Calendar.getInstance();
            cal.setTime(objUti.parseDate(txtFecDoc.getText(),"dd/MM/yyyy"));

            cal.set(java.util.Calendar.DATE, cal.getActualMinimum(cal.DAY_OF_MONTH)    );
            strFecIniMesCor=objUti.formatearFecha(cal.getTime(), "dd/MM/yyyy");

        } 
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return strFecIniMesCor;
    }
    
    
    private String getPeriodoAnterior(){
        String strPerAnt="";
        int intFecPerAnt[];
        try{
            java.util.Calendar cal=java.util.Calendar.getInstance();
            cal.setTime(objUti.parseDate(txtFecDoc.getText(),"dd/MM/yyyy"));

            cal.add(java.util.Calendar.MONTH, -1);

            intFecPerAnt=txtFecDoc.getFecha(objUti.formatearFecha(cal.getTime(), "dd/MM/yyyy"));

            System.out.println("periodo anterior:  "+ objUti.formatearFecha(cal.getTime(), "dd/MM/yyyy") );
            System.out.println("arreglo: " + intFecPerAnt[2] +  "/" + intFecPerAnt[1] );

            strPerAnt="" + (intFecPerAnt[2] + "" + (intFecPerAnt[1]<=9?"0" + intFecPerAnt[1]:"" + intFecPerAnt[1])  );

        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return strPerAnt;
    }
    
    public void cargarTipoDoc(){
        try{
            java.sql.Connection  conDefault =  DriverManager.getConnection(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos());
            java.sql.Statement stmPrede=conDefault.createStatement();
            java.sql.ResultSet rstPrede;
            //Si es el usuario Administrador (Código=1) tiene acceso a todas las cuentas. 
//            2;1277;"BODEGA     GENERAL";"1.01.06.01.15"
//            1;3000;"BODEGA GENERAL";"1.01.06.01.15"
//            4;2253;"BODEGA  GENERAL";"1.01.06.01.15"
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_cta, a1.tx_codCta, a1.tx_desLar";
            strSQL+=" FROM tbm_plaCta AS a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            if(objParSis.getCodigoEmpresa()==1){
                strSQL+=" AND a1.co_Cta=3000 ";
            }
            else if(objParSis.getCodigoEmpresa()==2){
                strSQL+=" AND a1.co_Cta=1277 ";
            }
            else if(objParSis.getCodigoEmpresa()==4){
                strSQL+=" AND a1.co_Cta=2253 ";
            }
            strSQL+=" ORDER BY a1.tx_codCta";
            rstPrede=stmPrede.executeQuery(strSQL);
            if(rstPrede.next()){
                txtCodCta.setText(((rstPrede.getString("co_cta")==null)?"":rstPrede.getString("co_cta")));
                txtDesCorCta.setText(((rstPrede.getString("tx_codCta")==null)?"":rstPrede.getString("tx_codCta")));
                txtDesLarCta.setText(((rstPrede.getString("tx_desLar")==null)?"":rstPrede.getString("tx_desLar")));
            }
            stmPrede.close();
            rstPrede.close();
            conDefault.close();
            stmPrede   = null;
            rstPrede   = null;
            conDefault = null;
        }
        catch(SQLException Evt)  {   
            objUti.mostrarMsgErr_F1(this, Evt);  
        }
        catch(Exception Evt)  {  
            objUti.mostrarMsgErr_F1(this, Evt);  
    }
            
    }
    
     
    private class ButKardex extends Librerias.ZafTableColBut.ZafTableColBut_uni{
        public ButKardex(javax.swing.JTable tbl, int intIdx){
            super(tbl,intIdx, "Kardex.");
           
        }
        public void butCLick() {
           Kardex();
        }
    }
    
    private int intCodMnuSis;
    private void Kardex(){
        
        
        String strItem1 = tblDat.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_COD_SIS).toString();
        String strItem2 = tblDat.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_COD_ALT).toString();
        String strItem3 = tblDat.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_NOM_ITM).toString();
        System.out.println("  >>>> "+ strItem1 );   

        objParSis.setCodigoMenu(237);
        Compras.ZafCom05.ZafCom05 obj = new  Compras.ZafCom05.ZafCom05(objParSis, strItem1, strItem2, strItem3 );
        this.getParent().add(obj,javax.swing.JLayeredPane.DEFAULT_LAYER);
        obj.show();
        objParSis.setCodigoMenu(intCodMnuSis);
    }
    
    
}