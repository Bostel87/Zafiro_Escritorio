/*
 *
 * Created on 20 de agosto de 2005, 11:38 PM   
 */
package Compras.ZafCom26;

import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;   
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
/** 
 *
 * @author  Javier Ayapata 
 */
public class ZafCom26 extends javax.swing.JInternalFrame 
{
    
       
    final int INT_TBL_LINEA    = 0 ; 
    final int INT_TBL_ITMALT   = 1 ;
    final int INT_TBL_DESITM   = 2 ;
    final int INT_TBL_UNIDAD   = 3 ;
    final int INT_TBL_CANMOV   = 4 ;      
    
    //Variables generales.
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafColNumerada objColNum;
    private ZafTblMod objTblMod;
    private ZafThreadGUI objThrGUI;
    private Connection con, ConnIns;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg;
    private boolean blnCon;                     //true: Continua la ejecución del hilo.
   
    private Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl objTblCelRenLbl;        //Render: Presentar JLabel en JTable.
   
    private Vector vecDatOrg, vecCabOrg, vecRegOrg;
    String strNomTable="";
    javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
    String strVersion=" 0.1";   //  VERSION DEL PROGRAMA  
        
    /** Crea una nueva instancia de la clase ZafIndRpt. */
     public ZafCom26(ZafParSis obj) 
    {
        initComponents();
        //Inicializar objetos.
        objParSis=obj;
        
        //Inicializar objetos.
        objUti=new ZafUtil();
      
    }
      
    
     public void Configura_ventana_consulta(){
           if (!configurarFrm())
            exitForm();
    }
    
   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("T\u00edtulo de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("T\u00edtulo de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDat);

        panFil.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panFil);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setActionCommand("Consultar");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });

        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });

        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setLayout(new java.awt.BorderLayout());

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        jPanel6.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        pgrSis.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        Configura_ventana_consulta();  
       
    }//GEN-LAST:event_formInternalFrameOpened

     
     private void cargarCabTipoDoc(int TipoDoc,String nom)
    {
      
      
    }
     
    public boolean validad(){
       
        return true;  
    }
      
    
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acción de acuerdo a la etiqueta del botón ("Consultar" o "Detener").
        
   
       
        if (butCon.getText().equals("Consultar"))
        {
            blnCon=true;
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
        }
        else
        {
            blnCon=false;
        }
       
       
      
        
    }//GEN-LAST:event_butConActionPerformed

    
    
    
     
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {  
             boolean blnRes=false;
             butCon.setText("Detener");
             lblMsgSis.setText("Procesando datos...");
              pgrSis.setIndeterminate(true);
         
                if (cargarRegistro()){
                  
                   blnRes=true;
                 }
              
                if(blnRes==true){
                     lblMsgSis.setText("Listo");
                     pgrSis.setIndeterminate(false);
                     pgrSis.setValue(0);
                     butCon.setText("Consultar");
                 
                     
                }
                else{
                     lblMsgSis.setText("Error..");
                     pgrSis.setIndeterminate(false);
                     pgrSis.setValue(0);
                     butCon.setText("Consultar");
                }
 
 
            objThrGUI=null;
    }}
    
             
    
      
      
    private boolean cargarRegistro(){
        boolean blnRes=false;
        String sql="";
        try{
            
               con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos() );
               if (con!=null)
               {
                sql="SELECT  x.co_itm, x.tx_codalt, x.tx_nomitm, x.tx_descor, x.stkact , " +
                " x1.movaju, (x.stkact + (case when x1.movaju is null then 0 else x1.movaju  end ) ) as stkreal from ( " +
                " select a.co_itm, a.tx_codalt, a.tx_nomitm, var.tx_descor, sum(a1.nd_stkact) as stkact from tbm_inv as a  " +
                " inner join tbm_invbod as a1 on (a1.co_emp=a.co_emp and a1.co_itm=a.co_itm) " +
                " left outer join tbm_var as var on (a.co_uni=var.co_reg  ) " +
                " Where a.co_emp="+objParSis.getCodigoEmpresa()+" and a.st_reg='A' " +
                " group by a.co_itm, a.tx_codalt, a.tx_nomitm, var.tx_descor " +
                "  ) as  x " +
                "   left join  " +
                " (select a2.co_itm, sum(nd_can) as movaju from tbm_cabmovinv as a1  " +
                "  inner join tbm_detmovinv as a2 on (a2.co_emp=a1.co_emp and a2.co_loc=a1.co_loc and a2.co_tipdoc=a1.co_tipdoc and a2.co_doc=a1.co_doc) " +
                "  where a1.co_emp="+objParSis.getCodigoEmpresa()+" and a1.co_tipdoc=76 and a1.st_reg not in('E','I')   group by a2.co_itm" +
                "  ) as x1 on  x1.co_itm=x.co_itm ";
                  
                java.sql.Statement stm = con.createStatement();
                java.sql.ResultSet rst = stm.executeQuery(sql);
                Vector vecData = new Vector();
                while(rst.next()){
                       java.util.Vector vecReg = new java.util.Vector();
                       vecReg.add(INT_TBL_LINEA, "");
                       vecReg.add(INT_TBL_ITMALT, rst.getString("tx_codalt"));
                       vecReg.add(INT_TBL_DESITM, rst.getString("tx_nomitm"));
                       vecReg.add(INT_TBL_UNIDAD, rst.getString("tx_descor"));
                       vecReg.add(INT_TBL_CANMOV, new Double(rst.getDouble("stkreal")));
                       vecData.add(vecReg);   
                 }
                 objTblMod.setData(vecData);
                 tblDat .setModel(objTblMod);  
                       
               rst.close();
               rst=null;
               stm.close();
               stm=null;
               con.close();
               con=null;
               blnRes=true;
               
        }}
        catch (java.sql.SQLException e) { objUti.mostrarMsgErr_F1(this, e);   }
        catch (Exception e) {  objUti.mostrarMsgErr_F1(this, e);   }
       return blnRes;
    }
  
   
   
   
   
        
    
    
   
   
    
    
 
    
    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
       // javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables
    
     private ZafTblFilCab objTblFilCab;
     private ZafTblOrd objTblOrd1; 
     private ZafTblBus objTblBus1;
        
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            
            
            //Configurar JTable: Establecer el modelo.
            Vector vecDat=new Vector();    //Almacena los datos
            Vector vecCab=new Vector();    //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_LINEA,"");            
            vecCab.add(INT_TBL_ITMALT,"Cod.Alt");
            vecCab.add(INT_TBL_DESITM,"Descripcion");            
            vecCab.add(INT_TBL_UNIDAD,"Unidad");
            vecCab.add(INT_TBL_CANMOV,"Stock");
           
            objTblMod=new Librerias.ZafTblUti.ZafTblMod.ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);   
            
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            objColNum=new Librerias.ZafColNumerada.ZafColNumerada(tblDat,INT_TBL_LINEA);
           
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
           
              
            objTblMod.setColumnDataType(INT_TBL_CANMOV, objTblMod.INT_COL_DBL, new Integer(0), null);
             
            
              //Tamaño de las celdas
            tcmAux.getColumn(INT_TBL_LINEA).setPreferredWidth(30);         
            tcmAux.getColumn(INT_TBL_ITMALT).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_DESITM).setPreferredWidth(370);
            tcmAux.getColumn(INT_TBL_UNIDAD).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_CANMOV).setPreferredWidth(80);
               
            objTblCelRenLbl=new Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_CANMOV).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
       
            objTblFilCab=new ZafTblFilCab(tblDat);
            objTblOrd1=new ZafTblOrd(tblDat);
            objTblBus1=new ZafTblBus(tblDat);
            
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            tblDat.getTableHeader().setReorderingAllowed(false);      
            
            tcmAux=null;  
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + ""+ strVersion);    
            lblTit.setText(strAux);
           
            objTblFilCab=null;
            objTblOrd1=null;
            objTblBus1=null;
            objColNum=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);  
        }
        return blnRes;
    }

  
    public boolean cargarDriver(String driver)
    {
        boolean blnRes=true;
        try
        {
            Class.forName(driver);
        }
        catch (ClassNotFoundException e) 
        {
            blnRes=false;
           objUti.mostrarMsgErr_F1(this, e);  
        }
        return blnRes;
    }

   

    
}
