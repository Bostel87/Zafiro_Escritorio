/*
 * ZafCon06.java
 *
 *  Created on 02 de noviembre de 2005, 11:25 PM
 */
package Compras.ZafCom40;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafVenCon.ZafVenCon;
import java.util.Vector;
import java.util.ArrayList;
import java.sql.*;
import Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut;
import Librerias.ZafTblUti.ZafTblCelEdiButGen.ZafTblCelEdiButGen;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;


/**
 *
 * @author  Eddye Lino
 */
public class ZafCom40 extends javax.swing.JInternalFrame 
{
    //Constantes: Columnas del JTable.
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_EMP=1;
    final int INT_TBL_DAT_COD_LOC=2;
    final int INT_TBL_DAT_COD_TIP_DOC=3;
    final int INT_TBL_DAT_DES_COR_TIP_DOC=4;
    final int INT_TBL_DAT_DES_LAR_TIP_DOC=5;
    final int INT_TBL_DAT_COD_DOC=6;
    final int INT_TBL_DAT_COD_MNU_DOC=7;
    final int INT_TBL_DAT_COD_REG=8;
    final int INT_TBL_DAT_NUM_DOC=9;
    final int INT_TBL_DAT_FEC_DOC=10;
    final int INT_TBL_DAT_COD_CLI=11;
    final int INT_TBL_DAT_NOM_CLI=12;
    final int INT_TBL_DAT_COD_USU_SOL=13;
    final int INT_TBL_DAT_NOM_USU_SOL=14;
    final int INT_TBL_DAT_COD_ITM=15;
    final int INT_TBL_DAT_COD_ALT_ITM=16;
    final int INT_TBL_DAT_NOM_ITM=17;
    final int INT_TBL_DAT_CAN=18;
    final int INT_TBL_DAT_BUT_VER_SOL=19;
    final int INT_TBL_DAT_CHK_FAC=20;
    
    //Variables generales.
    private String strFecDocIni;
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblFilCab objTblFilCab;
    private ZafTblMod objTblMod;
    private ZafTblEdi objTblEdi;                        //Editor: Editor del JTable.
    private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMen� en JTable.
    private ZafVenCon vcoTipDoc;                        //Ventana de consulta "Tipo de documento".
    private ZafVenCon vcoCli, vcoVen;                   //Ventana de consulta "Proveedor".
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private String strSQL, strAux, strSQLCon;
    private Vector vecDat, vecCab, vecReg;
    private Vector vecAux;
    private boolean blnCon;                             //true: Continua la ejecuci�n del hilo.
    private boolean blnHayCam;                          //Determina si hay cambios en el formulario.
    private ZafDocLis objDocLis;
    private String strDesCorTipDoc, strDesLarTipDoc;    //Contenido del campo al obtener el foco.
    private String strCodPrv, strDesLarPrv;             //Contenido del campo al obtener el foco.
    private String strNumDoc1;                          //Contenido del campo al obtener el foco.
    private int intSig=1;                               //Determina el signo de acuerdo al "Tipo de documento". Puede ser 1 o -1.
    private java.util.Date datFecAux;                   //Auxiliar: Para almacenar fechas.
    private String strIdePrv, strDirPrv;                //Campos: RUC y Direcci�n del Beneficiario.
    
    private ZafTblCelRenLbl objTblCelRenLbl;
    
    private String strCodVen,strDesLarVen;
    
    private ZafTblCelRenBut objTblCelRenButSol;
    private ZafTblCelEdiButGen objTblCelEdiButGenSol;
    
    private ZafTblCelRenChk objTblCelRenChkFac;
    private ZafTblCelEdiChk objTblCelEdiChkFac;
    
    private ZafThreadGUI objThrGUI;
    private ArrayList arlReg, arlDat;
    
    private final int INT_ARL_COD_EMP=0;
    private final int INT_ARL_COD_LOC=1;
    private final int INT_ARL_COD_TIP_DOC=2;
    private final int INT_ARL_COD_DOC=3;
    private final int INT_ARL_COD_REG=4;
    
    
    /** Crea una nueva instancia de la clase ZafCom40. */
    public ZafCom40(ZafParSis obj){
        try{
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
        }
        catch (CloneNotSupportedException e){
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGen = new javax.swing.JPanel();
        panGenCab = new javax.swing.JPanel();
        lblPrv = new javax.swing.JLabel();
        txtCodPrv = new javax.swing.JTextField();
        txtDesLarPrv = new javax.swing.JTextField();
        butPrv = new javax.swing.JButton();
        lblVen = new javax.swing.JLabel();
        txtDesCorVen = new javax.swing.JTextField();
        txtDesLarVen = new javax.swing.JTextField();
        butVen = new javax.swing.JButton();
        txtCodVen = new javax.swing.JTextField();
        optTod = new javax.swing.JRadioButton();
        optFil = new javax.swing.JRadioButton();
        panGenDet = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butPro = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panGen.setLayout(new java.awt.BorderLayout());

        panGenCab.setPreferredSize(new java.awt.Dimension(0, 82));
        panGenCab.setLayout(null);

        lblPrv.setText("Cliente:");
        lblPrv.setToolTipText("Proveedor");
        panGenCab.add(lblPrv);
        lblPrv.setBounds(50, 36, 70, 20);

        txtCodPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodPrvActionPerformed(evt);
            }
        });
        txtCodPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusLost(evt);
            }
        });
        panGenCab.add(txtCodPrv);
        txtCodPrv.setBounds(122, 36, 70, 20);

        txtDesLarPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarPrvActionPerformed(evt);
            }
        });
        txtDesLarPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusLost(evt);
            }
        });
        panGenCab.add(txtDesLarPrv);
        txtDesLarPrv.setBounds(192, 36, 290, 20);

        butPrv.setText("...");
        butPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrvActionPerformed(evt);
            }
        });
        panGenCab.add(butPrv);
        butPrv.setBounds(482, 36, 20, 20);

        lblVen.setText("Solicitante:");
        lblVen.setToolTipText("Vendedor");
        panGenCab.add(lblVen);
        lblVen.setBounds(50, 58, 70, 20);

        txtDesCorVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorVenActionPerformed(evt);
            }
        });
        txtDesCorVen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorVenFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorVenFocusLost(evt);
            }
        });
        panGenCab.add(txtDesCorVen);
        txtDesCorVen.setBounds(122, 58, 70, 20);

        txtDesLarVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarVenActionPerformed(evt);
            }
        });
        txtDesLarVen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarVenFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarVenFocusLost(evt);
            }
        });
        panGenCab.add(txtDesLarVen);
        txtDesLarVen.setBounds(192, 58, 290, 20);

        butVen.setText("...");
        butVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butVenActionPerformed(evt);
            }
        });
        panGenCab.add(butVen);
        butVen.setBounds(482, 58, 20, 20);
        panGenCab.add(txtCodVen);
        txtCodVen.setBounds(90, 58, 32, 20);

        optTod.setSelected(true);
        optTod.setText("Todos los documentos");
        optTod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTodActionPerformed(evt);
            }
        });
        panGenCab.add(optTod);
        optTod.setBounds(0, 0, 440, 18);

        optFil.setText("Solo los documentos que cumplan el criterio seleccionado");
        optFil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optFilActionPerformed(evt);
            }
        });
        panGenCab.add(optFil);
        optFil.setBounds(0, 18, 440, 18);

        panGen.add(panGenCab, java.awt.BorderLayout.NORTH);

        panGenDet.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDat.setViewportView(tblDat);

        panGenDet.add(spnDat, java.awt.BorderLayout.CENTER);

        panGen.add(panGenDet, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panGen);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setPreferredSize(new java.awt.Dimension(0, 50));
        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 2));

        butCon.setMnemonic('C');
        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butPro.setMnemonic('G');
        butPro.setText("Procesar");
        butPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butProActionPerformed(evt);
            }
        });
        panBot.add(butPro);

        butCer.setMnemonic('r');
        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        configurarFrm();
        agregarDocLis();
    }//GEN-LAST:event_formInternalFrameOpened

    /** Cerrar la aplicaci�n. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                //Cerrar la conexi�n si est� abierta.
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

private void butVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butVenActionPerformed
// TODO add your handling code here:
        strCodVen=txtDesCorVen.getText();
        mostrarVenConVen(0);
}//GEN-LAST:event_butVenActionPerformed

private void txtDesLarVenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarVenFocusLost
// TODO add your handling code here:
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesLarVen.getText().equalsIgnoreCase(strDesLarVen)){
            if (txtDesLarVen.getText().equals("")){
                txtDesCorVen.setText("");
                txtDesLarVen.setText("");
                txtCodVen.setText("");
            }
            else
            {
                mostrarVenConVen(2);
            }
        }
        else
            txtDesLarVen.setText(strDesLarVen);
}//GEN-LAST:event_txtDesLarVenFocusLost

private void txtDesLarVenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarVenFocusGained
// TODO add your handling code here:
        strDesLarVen=txtDesLarVen.getText();
        txtDesLarVen.selectAll();
}//GEN-LAST:event_txtDesLarVenFocusGained

private void txtDesLarVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarVenActionPerformed
// TODO add your handling code here:
        txtDesLarVen.transferFocus();
}//GEN-LAST:event_txtDesLarVenActionPerformed

private void txtDesCorVenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorVenFocusLost
// TODO add your handling code here:
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesCorVen.getText().equalsIgnoreCase(strCodVen)){
            if (txtDesCorVen.getText().equals("")){
                txtDesCorVen.setText("");
                txtDesLarVen.setText("");
                txtCodVen.setText("");
            }
            else
                mostrarVenConVen(1);
        }
        else
            txtDesCorVen.setText(strCodVen);
}//GEN-LAST:event_txtDesCorVenFocusLost

private void txtDesCorVenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorVenFocusGained
// TODO add your handling code here:
        strCodVen=txtDesCorVen.getText();
        txtDesCorVen.selectAll();
}//GEN-LAST:event_txtDesCorVenFocusGained

private void txtDesCorVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorVenActionPerformed
// TODO add your handling code here:
        txtDesCorVen.transferFocus();
}//GEN-LAST:event_txtDesCorVenActionPerformed

private void butPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrvActionPerformed
strCodPrv=txtCodPrv.getText();
        mostrarVenConPrv(0);
        if (!txtCodPrv.getText().equals(""))
        {
            //Cargar los documentos pendientes s�lo si ha cambiado el beneficiario.
//            if (!txtCodPrv.getText().equalsIgnoreCase(strCodPrv))
                //cargarDocPen();
        }
}//GEN-LAST:event_butPrvActionPerformed

private void txtDesLarPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusLost
//Validar el contenido de la celda s�lo si ha cambiado.
        if (!txtDesLarPrv.getText().equalsIgnoreCase(strDesLarPrv))
        {
            if (txtDesLarPrv.getText().equals(""))
            {
                txtCodPrv.setText("");
                txtDesLarPrv.setText("");
                objTblMod.removeAllRows();
            }
            else
            {
                mostrarVenConPrv(2);
                //Cargar los documentos pendientes s�lo si ha cambiado el beneficiario.
                if( (!txtDesLarPrv.getText().equalsIgnoreCase(strDesLarPrv))   ){
                    //cargarDocPen();
                }
            }
        }
        else
            txtDesLarPrv.setText(strDesLarPrv);
}//GEN-LAST:event_txtDesLarPrvFocusLost

private void txtDesLarPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusGained
strDesLarPrv=txtDesLarPrv.getText();
        txtDesLarPrv.selectAll();
}//GEN-LAST:event_txtDesLarPrvFocusGained

private void txtDesLarPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarPrvActionPerformed
txtDesLarPrv.transferFocus();
}//GEN-LAST:event_txtDesLarPrvActionPerformed

private void txtCodPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusLost
//Validar el contenido de la celda s�lo si ha cambiado.
        if (!txtCodPrv.getText().equalsIgnoreCase(strCodPrv))
        {
            if (txtCodPrv.getText().equals(""))
            {
                txtCodPrv.setText("");
                txtDesLarPrv.setText("");
                objTblMod.removeAllRows();
            }
            else
            {
                mostrarVenConPrv(1);
                //Cargar los documentos pendientes s�lo si ha cambiado el beneficiario.
                 if( (!txtCodPrv.getText().equalsIgnoreCase(strCodPrv))   ){
                    //cargarDocPen();
                 }
            }
        }
        else
            txtCodPrv.setText(strCodPrv);
}//GEN-LAST:event_txtCodPrvFocusLost

private void txtCodPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusGained
strCodPrv=txtCodPrv.getText();
        txtCodPrv.selectAll();
}//GEN-LAST:event_txtCodPrvFocusGained

private void txtCodPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodPrvActionPerformed
txtCodPrv.transferFocus();
}//GEN-LAST:event_txtCodPrvActionPerformed

private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
    //Realizar acci�n de acuerdo a la etiqueta del bot�n ("Consultar" o "Detener").
    if (butCon.getText().equals("Consultar")){
        blnCon=true;
        if (objThrGUI==null){
            objThrGUI=new ZafThreadGUI();
            objThrGUI.start();
        }            
    }
    else
    {
        blnCon=false;
    }
}//GEN-LAST:event_butConActionPerformed

private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
    exitForm(null);
}//GEN-LAST:event_butCerActionPerformed

private void optTodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTodActionPerformed
// TODO add your handling code here:
    if(optTod.isSelected())
        optFil.setSelected(false);
    else
        optFil.setSelected(true);
}//GEN-LAST:event_optTodActionPerformed

private void optFilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optFilActionPerformed
// TODO add your handling code here:
    if(optFil.isSelected())
        optTod.setSelected(false);
    else
        optTod.setSelected(true);
}//GEN-LAST:event_optFilActionPerformed

private void butProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butProActionPerformed
// TODO add your handling code here:
    int intTipCotLoc;
    if(isCamTbl()){
        if(llenarArreglo()){
            Compras.ZafCom40.ZafCom40_01 objCom40_01=new Compras.ZafCom40.ZafCom40_01(javax.swing.JOptionPane.getFrameForComponent(this), true,objParSis, this.getParent());
            objCom40_01.show();
            if(objCom40_01.getProcesoRealizado()==1){//proceso correcto

                if(objCom40_01.getTipoCotizacion()==0){
                    intTipCotLoc=0;
                }
                else{
                    intTipCotLoc=objCom40_01.getNumeroCotizacion();
                }
                Ventas.ZafVen01.ZafVen01 objVen01_01=new Ventas.ZafVen01.ZafVen01(objParSis, arlDat, intTipCotLoc, objCom40_01.getTipoCotizacion());
                this.getParent().add(objVen01_01,javax.swing.JLayeredPane.DEFAULT_LAYER);
                objVen01_01.show();

                System.out.println("El proceso se realizó correctamente.");
                //cargarDetReg();
                this.dispose();
            }
            else if(objCom40_01.getProcesoRealizado()==2){
                System.out.println("El proceso no se realizó correctamente.\nProceso cancelado por el sistema.");
            }
            else if(objCom40_01.getProcesoRealizado()==0){
                System.out.println("El proceso no se realizó completamente.\nProceso cancelado por el usuario.");
            }
        }
    }
    else{
        mostrarMsgInf("<HTML>Seleccione algún registro y vuelva a intentarlo.</HTML>");
    }
}//GEN-LAST:event_butProActionPerformed


    /** Cerrar la aplicaci�n. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butPro;
    private javax.swing.JButton butPrv;
    private javax.swing.JButton butVen;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblPrv;
    private javax.swing.JLabel lblTit;
    private javax.swing.JLabel lblVen;
    private javax.swing.JRadioButton optFil;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGen;
    private javax.swing.JPanel panGenCab;
    private javax.swing.JPanel panGenDet;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodPrv;
    private javax.swing.JTextField txtCodVen;
    private javax.swing.JTextField txtDesCorVen;
    private javax.swing.JTextField txtDesLarPrv;
    private javax.swing.JTextField txtDesLarVen;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            objDocLis=new ZafDocLis();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.2");
            lblTit.setText(strAux);
            //Configurar las ZafVenCon.
            configurarVenConPrv();
            configurarVenConVen();
            //Configurar los JTables.
            configurarTblDat();
            
            txtCodVen.setVisible(false);
            //objTblMod.insertRow();
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            txtCodVen.setText(""+objParSis.getCodigoUsuario());
            txtDesCorVen.setText(objParSis.getNombreUsuario());
            txtDesLarVen.setText(nombreCompletoUsuario(txtCodVen.getText()));

        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci�n configura el JTable "tblDat".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDat()
    {
        boolean blnRes=true;
        try
        {
            arlDat=new ArrayList();
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(21);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_EMP,"COD.EMP.");
            vecCab.add(INT_TBL_DAT_COD_LOC,"COD.LOC.");
            vecCab.add(INT_TBL_DAT_COD_TIP_DOC,"COD_TIP.DOC");
            vecCab.add(INT_TBL_DAT_DES_COR_TIP_DOC,"DES.COR.TIP.DOC.");
            vecCab.add(INT_TBL_DAT_DES_LAR_TIP_DOC,"DES.LAR.TIP.DOC.");
            vecCab.add(INT_TBL_DAT_COD_DOC,"COD.DOC.");
            vecCab.add(INT_TBL_DAT_COD_MNU_DOC,"COD.MNU.DOC.");
            
            vecCab.add(INT_TBL_DAT_COD_REG,"COD.REG.");
            
            vecCab.add(INT_TBL_DAT_NUM_DOC,"NUM.DOC.");
            vecCab.add(INT_TBL_DAT_FEC_DOC,"FEC.DOC.");
            vecCab.add(INT_TBL_DAT_COD_CLI,"COD.CLI.");
            vecCab.add(INT_TBL_DAT_NOM_CLI,"NOM.CLI.");
            vecCab.add(INT_TBL_DAT_COD_USU_SOL,"COD.USU.SOL.");
            vecCab.add(INT_TBL_DAT_NOM_USU_SOL,"NOM.USU.SOL.");
            
            
            vecCab.add(INT_TBL_DAT_COD_ITM,"COD_ITM.");
            vecCab.add(INT_TBL_DAT_COD_ALT_ITM,"COD.ALT.ITM.");
            vecCab.add(INT_TBL_DAT_NOM_ITM,"NOM.ITM.");
            vecCab.add(INT_TBL_DAT_CAN,"CAN.ITM.");
            
            
            
            vecCab.add(INT_TBL_DAT_BUT_VER_SOL,"");
            vecCab.add(INT_TBL_DAT_CHK_FAC,"FAC.");
            
            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selecci�n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el men� de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_DES_COR_TIP_DOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_DES_LAR_TIP_DOC).setPreferredWidth(120);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_MNU_DOC).setPreferredWidth(30);
            
            tcmAux.getColumn(INT_TBL_DAT_COD_REG).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(40);
            tcmAux.getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(180);
            tcmAux.getColumn(INT_TBL_DAT_COD_USU_SOL).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_NOM_USU_SOL).setPreferredWidth(150);
            
            
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_COD_ALT_ITM).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_NOM_ITM).setPreferredWidth(150);
            tcmAux.getColumn(INT_TBL_DAT_CAN).setPreferredWidth(80);
            
            
            tcmAux.getColumn(INT_TBL_DAT_BUT_VER_SOL).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_CHK_FAC).setPreferredWidth(40);
            
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_COD_MNU_DOC).setResizable(false);
            
            
            tcmAux.getColumn(INT_TBL_DAT_COD_REG).setResizable(false);
            
            tcmAux.getColumn(INT_TBL_DAT_COD_USU_SOL).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_CHK_FAC).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_BUT_VER_SOL).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            

            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);
            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_BUT_VER_SOL);
            vecAux.add("" + INT_TBL_DAT_CHK_FAC);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            //Configurar JTable: Editor de la tabla.
            objTblEdi=new ZafTblEdi(tblDat);


            //Para el botón que carga la solicitud
            objTblCelRenButSol=new ZafTblCelRenBut();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_BUT_VER_SOL).setCellRenderer(objTblCelRenButSol);
            objTblCelEdiButGenSol=new ZafTblCelEdiButGen();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_BUT_VER_SOL).setCellEditor(objTblCelEdiButGenSol);
            objTblCelEdiButGenSol.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFilSel;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFilSel=tblDat.getSelectedRow();
                }
                public void actionPerformed(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    llamarVentanaSolicitud(intFilSel);
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
            });
            
            
            //Configurar JTable: Renderizar celdas DE FACTURAR
            objTblCelRenChkFac=new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK_FAC).setCellRenderer(objTblCelRenChkFac);
            objTblCelRenChkFac=null;
            //Configurar JTable: Editor de celdas.
            objTblCelEdiChkFac=new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK_FAC).setCellEditor(objTblCelEdiChkFac);
            objTblCelEdiChkFac.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFil;
                int intCol;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFil=tblDat.getSelectedRow();
                    intCol=tblDat.getSelectedColumn();
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
            });
            
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_CAN).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
            
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
            

    
    /**
     * Esta funci�n determina si los campos son v�lidos.
     * @return true: Si los campos son v�lidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal(){
        int intTipCamFec;
        String strFecDocTmp="";
        String strFecAuxTmp="";
        
        //Validar el "Proveedor".
        if (txtCodPrv.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Proveedor</FONT> es obligatorio.<BR>Escriba o seleccione un proveedor y vuelva a intentarlo.</HTML>");
            txtCodPrv.requestFocus();
            return false;
        }
        



        return true;
    }
    
    
    
    

    /**
     * Esta funci�n muestra un mensaje informativo al usuario. Se podr�a utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta funci�n muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta funci�n muestra un mensaje de advertencia al usuario. Se podr�a utilizar
     * para mostrar al usuario un mensaje que indique que los datos se han cargado
     * con errores y que debe revisar dichos datos.
     */
    private void mostrarMsgAdv(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        if (strMsg.equals(""))
            strMsg="<HTML>Este registro tiene <FONT COLOR=\"red\">problemas</FONT>. <BR>Notif�quelo a su administrador del sistema.</HTML>";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.WARNING_MESSAGE);
    }



    
    /**
     * Esta funci�n permite limpiar el formulario.
     * @return true: Si se pudo limpiar la ventana sin ning�n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean limpiarFrm()
    {
        boolean blnRes=true;
        try
        {
            txtCodPrv.setText("");
            strIdePrv="";
            txtDesLarPrv.setText("");
            strDirPrv="";
            objTblMod.removeAllRows();
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }


    

    
    /**
     * Esta funci�n configura la "Ventana de consulta" que ser� utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConPrv()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("C�digo");
            arlAli.add("Identificaci�n");
            arlAli.add("Nombre");
            arlAli.add("Direcci�n");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
            strSQL+=" FROM tbm_cli AS a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" AND a1.st_cli='S'";
            strSQL+=" ORDER BY a1.tx_nom";
            //Ocultar columnas.
            int intColOcu[]=new int[1];
            intColOcu[0]=4;
            vcoCli=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de proveedores", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoCli.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    


    

    
    /**
     * Esta funci�n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de b�squeda determina si se debe hacer
     * una b�squeda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se est� buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opci�n que desea utilizar.
     * @param intTipBus El tipo de b�squeda a realizar.
     * @return true: Si no se present� ning�n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConPrv(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoCli.setCampoBusqueda(2);
                    vcoCli.show();
                    if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                    {
                        txtCodPrv.setText(vcoCli.getValueAt(1));
                        strIdePrv=vcoCli.getValueAt(2);
                        txtDesLarPrv.setText(vcoCli.getValueAt(3));
                        strDirPrv=vcoCli.getValueAt(4);
                        objTblMod.removeAllRows();
                    }
                    break;
                case 1: //B�squeda directa por "N�mero de cuenta".
                    if (vcoCli.buscar("a1.co_cli", txtCodPrv.getText()))
                    {
                        txtCodPrv.setText(vcoCli.getValueAt(1));
                        strIdePrv=vcoCli.getValueAt(2);
                        txtDesLarPrv.setText(vcoCli.getValueAt(3));
                        strDirPrv=vcoCli.getValueAt(4);
                        objTblMod.removeAllRows();
                    }
                    else
                    {
                        vcoCli.setCampoBusqueda(0);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                        {
                            txtCodPrv.setText(vcoCli.getValueAt(1));
                            strIdePrv=vcoCli.getValueAt(2);
                            txtDesLarPrv.setText(vcoCli.getValueAt(3));
                            strDirPrv=vcoCli.getValueAt(4);
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtCodPrv.setText(strCodPrv);
                        }
                    }
                    break;
                case 2: //B�squeda directa por "Descripci�n larga".
                    if (vcoCli.buscar("a1.tx_nom", txtDesLarPrv.getText()))
                    {
                        txtCodPrv.setText(vcoCli.getValueAt(1));
                        strIdePrv=vcoCli.getValueAt(2);
                        txtDesLarPrv.setText(vcoCli.getValueAt(3));
                        strDirPrv=vcoCli.getValueAt(4);
                        objTblMod.removeAllRows();
                    }
                    else
                    {
                        vcoCli.setCampoBusqueda(2);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                        {
                            txtCodPrv.setText(vcoCli.getValueAt(1));
                            strIdePrv=vcoCli.getValueAt(2);
                            txtDesLarPrv.setText(vcoCli.getValueAt(3));
                            strDirPrv=vcoCli.getValueAt(4);
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtDesLarPrv.setText(strDesLarPrv);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    


    
    /**
     * Esta clase implementa la interface DocumentListener que observa los cambios que
     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
     * Se la usa en el sistema para determinar si existe alg�n cambio que se deba grabar
     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
     * presentar� un mensaje advirtiendo que si no guarda los cambios los perder�.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener 
    {
        public void changedUpdate(javax.swing.event.DocumentEvent evt)        {
            blnHayCam=true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }
    }

    /**
     * Esta funci�n se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private void agregarDocLis()
    {
        txtCodPrv.getDocument().addDocumentListener(objDocLis);
        txtDesLarPrv.getDocument().addDocumentListener(objDocLis);
    }



    /**
     * Esta funci�n obtiene la descripci�n larga del estado del registro.
     * @param estado El estado del registro. Por ejemplo: A, I, etc.
     * @return La descripci�n larga del estado del registro.
     * <BR>Nota.- Si la cadena recibida es <I>null</I> la funci�n devuelve una cadena vac�a.
     */
    private String getEstReg(String estado)
    {
        if (estado==null)
            estado="";
        else
            switch (estado.charAt(0))
            {
                case 'A':
                    estado="Activo";
                    break;
                case 'I':
                    estado="Anulado";
                    break;
                case 'P':
                    estado="Pendiente de autorizar";
                    break;
                case 'D':
                    estado="Autorizaci�n denegada";
                    break;
                case 'R':
                    estado="Pendiente de impresi�n";
                    break;
                case 'C':
                    estado="Pendiente confirmaci�n de inventario";
                    break;
                case 'F':
                    estado="Existen diferencias de inventario";
                    break;
                default:
                    estado="Desconocido";
                    break;
            }
        return estado;
    }
    

    /**
     * Esta clase crea un hilo que permite manipular la interface gr�fica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que est� ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podr�a presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estar�a informado en todo
     * momento de lo que ocurre. Si se desea hacer �sto es necesario utilizar �sta clase
     * ya que si no s�lo se apreciar�a los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread{
        public void run(){
            //Limpiar objetos.
            objTblMod.removeAllRows();
            if (!cargarDetReg()){
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable s�lo cuando haya datos.
            if (tblDat.getRowCount()>0){
                tabFrm.setSelectedIndex(0);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }

    
    
    

    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren m�s espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD_EMP:
                    strMsg="Código de empresa";
                    break;
                case INT_TBL_DAT_COD_LOC:
                    strMsg="Código de local";
                    break;
                case INT_TBL_DAT_COD_TIP_DOC:
                    strMsg="Código de tipo de documento";
                    break;
                case INT_TBL_DAT_DES_COR_TIP_DOC:
                    strMsg="Descripción corta del tipo de documento";
                    break;
                case INT_TBL_DAT_DES_LAR_TIP_DOC:
                    strMsg="Descripción larga del tipo de documento";
                    break;
                case INT_TBL_DAT_COD_DOC:
                    strMsg="Código de documento";
                    break;
                case INT_TBL_DAT_COD_MNU_DOC:
                    strMsg="Código de menú de documento";
                    break;
                case INT_TBL_DAT_COD_REG:
                    strMsg="Código de registro";
                    break;
                case INT_TBL_DAT_NUM_DOC:
                    strMsg="Número de documento";
                    break;
                case INT_TBL_DAT_FEC_DOC:
                    strMsg="Fecha de documento";
                    break;
                case INT_TBL_DAT_COD_CLI:
                    strMsg="código de cliente";
                    break;
                case INT_TBL_DAT_NOM_CLI:
                    strMsg="Nombre de cliente";
                    break;
                case INT_TBL_DAT_COD_USU_SOL:
                    strMsg="Código del usuario solicitante";
                    break;
                case INT_TBL_DAT_NOM_USU_SOL:
                    strMsg="Nombre del usuario solicitante";
                    break;
                    

                    
                case INT_TBL_DAT_COD_ITM:
                    strMsg="Código de item";
                    break;
                case INT_TBL_DAT_COD_ALT_ITM:
                    strMsg="Código alterno de item";
                    break;
                case INT_TBL_DAT_NOM_ITM:
                    strMsg="Nombre de item";
                    break;
                case INT_TBL_DAT_CAN:
                    strMsg="Cantidad solicitada de item";
                    break;

                    
                    
                case INT_TBL_DAT_BUT_VER_SOL:
                    strMsg="Ver solicitud";
                    break;
                case INT_TBL_DAT_CHK_FAC:
                    strMsg="Facturar";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }


    private boolean configurarVenConVen(){
        boolean blnRes=true;
        try{
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_usr");
            arlCam.add("a1.tx_usr");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Usuario");
            arlAli.add("Nombre");
            arlAli.add("Dirección");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_usr, a1.tx_usr, a1.tx_nom, a1.tx_dir";
            strSQL+=" FROM tbm_usr AS a1 INNER JOIN tbr_usrEmp AS a2";
            strSQL+=" ON a1.co_usr=a2.co_usr";
            strSQL+=" WHERE a2.co_emp=" + objParSis.getCodigoEmpresa() + "";
            strSQL+=" AND a1.st_reg='A'";
            strSQL+=" AND a2.st_ven='S'";
            strSQL+=" ORDER BY a1.tx_nom";
            //Ocultar columnas.
            int intColOcu[]=new int[1];
            intColOcu[0]=4;
            vcoVen=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de Vendedores", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoVen.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
     private boolean mostrarVenConVen(int intTipBus){
        boolean blnRes=true;
        try{
            switch (intTipBus){
                case 0: //Mostrar la ventana de consulta.
                    vcoVen.setCampoBusqueda(1);
                    vcoVen.show();
                    if (vcoVen.getSelectedButton()==vcoVen.INT_BUT_ACE){
                        txtCodVen.setText(vcoVen.getValueAt(1));
                        txtDesCorVen.setText(vcoVen.getValueAt(2));
                        txtDesLarVen.setText(vcoVen.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Descripción corta".
                    if (vcoVen.buscar("a1.tx_usr", txtDesCorVen.getText())){
                        txtCodVen.setText(vcoVen.getValueAt(1));
                        txtDesCorVen.setText(vcoVen.getValueAt(2));
                        txtDesLarVen.setText(vcoVen.getValueAt(3));
                    }
                    else{
                        vcoVen.setCampoBusqueda(1);
                        vcoVen.setCriterio1(11);
                        vcoVen.cargarDatos();
                        vcoVen.show();
                        if (vcoVen.getSelectedButton()==vcoVen.INT_BUT_ACE)
                        {
                            txtCodVen.setText(vcoVen.getValueAt(1));
                            txtDesCorVen.setText(vcoVen.getValueAt(2));
                            txtDesLarVen.setText(vcoVen.getValueAt(3));
                        }
                        else{
                            txtDesLarVen.setText(strDesLarVen);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoVen.buscar("a1.tx_nom", txtDesLarVen.getText())){
                        txtCodVen.setText(vcoVen.getValueAt(1));
                        txtDesCorVen.setText(vcoVen.getValueAt(2));
                        txtDesLarVen.setText(vcoVen.getValueAt(3));
                    }
                    else{
                        vcoVen.setCampoBusqueda(2);
                        vcoVen.setCriterio1(11);
                        vcoVen.cargarDatos();
                        vcoVen.show();
                        if (vcoVen.getSelectedButton()==vcoVen.INT_BUT_ACE)
                        {
                            txtCodVen.setText(vcoVen.getValueAt(1));
                            txtDesCorVen.setText(vcoVen.getValueAt(2));
                            txtDesLarVen.setText(vcoVen.getValueAt(3));
                        }
                        else{
                            txtDesLarVen.setText(strDesLarVen);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }   
 
     
     
    private String nombreCompletoUsuario(String codigoVendedor){
        Connection conNom;
        Statement stmNom;
        ResultSet rstNom;
        String strNomComVen="";
        try{
            conNom=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conNom!=null){
                stmNom=conNom.createStatement();
                strSQL="";
                strSQL+="SELECT tx_nom FROM tbm_usr";
                strSQL+=" WHERE co_usr=" + codigoVendedor + "";
                rstNom=stmNom.executeQuery(strSQL);
                if(rstNom.next()){
                    strNomComVen=rstNom.getString("tx_nom");
                }
                conNom.close();
                conNom=null;
                rstNom.close();
                rstNom=null;
                stmNom.close();
                stmNom=null;
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);            
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);            
        }
        return strNomComVen;
    }
     
    //DEBERIA HACERSE UNA FUNCION Q ENVIE COMO PARAMETRO CODIGO DE CLIENTE, Y OBJETO ZAFPARSIS PARA EN ESE NUEVO FORMULARIO CARGAR ESTE QUERY
    private void llamarVentanaSolicitud(int fila){
        int i=fila;
        int intCodEmp=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_EMP).toString());
        int intCodLoc=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC).toString());
        int intCodTipDoc=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC).toString());
        int intCodDoc=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC).toString());
        int intCodMnuDoc=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_MNU_DOC).toString());
                
        
        
        Compras.ZafCom38.ZafCom38 objCom38_01=new Compras.ZafCom38.ZafCom38(objParSis, intCodEmp, intCodLoc, intCodTipDoc, intCodDoc, intCodMnuDoc);
        //Compras.ZafCom38.ZafCom38 objCom38_01=new Compras.ZafCom38.ZafCom38(objParSis);
        this.getParent().add(objCom38_01,javax.swing.JLayeredPane.DEFAULT_LAYER);
        objCom38_01.show();
    }
    
    

    /**
     * Esta funci�n permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg(){
        int intNumTotReg, i;
        boolean blnRes=true;
        try{
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                

                
                //Obtener la condici�n.
                strSQL="";
                strSQL+="SELECT COUNT(*)";
                strSQL+=" FROM (tbm_cabSolSalTemMer AS a1 ";
                strSQL+="         INNER JOIN (tbm_detSolSalTemMer AS b1 INNER JOIN tbm_inv AS b2 ";
                strSQL+="                     ON b1.co_emp=b2.co_emp AND b1.co_itm=b2.co_itm)";
                strSQL+=" 	ON a1.co_emp=b1.co_emp AND a1.co_loc=b1.co_loc AND a1.co_tipDoc=b1.co_tipDoc AND a1.co_doc=b1.co_doc )";
                strSQL+=" LEFT OUTER JOIN tbm_cabTipDoc AS a2 ";
                strSQL+=" ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc)";
                strSQL+=" LEFT OUTER JOIN tbm_cli AS a3 ";
                strSQL+=" ON (a1.co_emp=a3.co_emp AND a1.co_cli=a3.co_cli AND a3.st_reg='A')";
                strSQL+=" LEFT OUTER JOIN tbm_usr AS a4 ";
                strSQL+=" ON (a1.co_usrSol=a4.co_usr AND a4.st_reg='A')";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" AND a1.co_mnu IN(2039,2049)";
                strSQL+=" AND a1.st_aut IN('A')";
                strSQL+=" AND a1.st_reg='A'";
                strSQL+=" AND a1.st_conTotMerEgr='S'";
                strSQL+=" AND a1.st_conTotMerIng='N'";
                strSQL+=" AND (b1.nd_canTotEgr - (b1.nd_canTotIng+b1.nd_canNunIng)>0)";
                
                strAux=txtCodPrv.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_cli LIKE '" + strAux.replaceAll("'", "''") + "'";

                strAux=txtCodVen.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_usrSol LIKE '" + strAux.replaceAll("'", "''") + "'";
                intNumTotReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intNumTotReg==-1)
                    return false;
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT a1.co_emp, a1.co_loc, ";
                strSQL+=" a1.co_tipDoc, a2.tx_desCor, a2.tx_desLar, ";
                strSQL+=" a1.co_doc, b1.co_reg, a1.co_mnu, a1.ne_numDoc, a1.fe_doc";
                strSQL+=" , a3.co_cli, a3.tx_nom AS tx_nomCli, a4.co_usr, a4.tx_usr, a4.tx_nom";
                strSQL+=" , b1.co_itm, b2.tx_codAlt, b2.tx_nomItm, /*b1.nd_can,*/ a1.st_aut, (b1.nd_canTotEgr - (b1.nd_canTotIng+b1.nd_canNunIng)) AS nd_can";
                strSQL+=" FROM (tbm_cabSolSalTemMer AS a1 ";
                strSQL+="         INNER JOIN (tbm_detSolSalTemMer AS b1 INNER JOIN tbm_inv AS b2 ";
                strSQL+="                     ON b1.co_emp=b2.co_emp AND b1.co_itm=b2.co_itm)";
                strSQL+=" 	ON a1.co_emp=b1.co_emp AND a1.co_loc=b1.co_loc AND a1.co_tipDoc=b1.co_tipDoc AND a1.co_doc=b1.co_doc )";
                strSQL+=" LEFT OUTER JOIN tbm_cabTipDoc AS a2 ";
                strSQL+=" ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc)";
                strSQL+=" LEFT OUTER JOIN tbm_cli AS a3 ";
                strSQL+=" ON (a1.co_emp=a3.co_emp AND a1.co_cli=a3.co_cli AND a3.st_reg='A')";
                strSQL+=" LEFT OUTER JOIN tbm_usr AS a4 ";
                strSQL+=" ON (a1.co_usrSol=a4.co_usr AND a4.st_reg='A')";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" AND a1.co_mnu IN(2039,2049)";
                strSQL+=" AND a1.st_aut IN('A')";
                strSQL+=" AND a1.st_reg='A'";
                strSQL+=" AND a1.st_conTotMerEgr='S'";
                strSQL+=" AND a1.st_conTotMerIng='N'";
                strSQL+=" AND (b1.nd_canTotEgr - (b1.nd_canTotIng+b1.nd_canNunIng)>0)";
                
                strAux=txtCodPrv.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_cli LIKE '" + strAux.replaceAll("'", "''") + "'";

                strAux=txtCodVen.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_usrSol LIKE '" + strAux.replaceAll("'", "''") + "'";
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,             "");
                        vecReg.add(INT_TBL_DAT_COD_EMP,         "" + rst.getString("co_emp"));
                        vecReg.add(INT_TBL_DAT_COD_LOC,         "" + rst.getString("co_loc"));
                        vecReg.add(INT_TBL_DAT_COD_TIP_DOC,     "" + rst.getString("co_tipDoc"));
                        vecReg.add(INT_TBL_DAT_DES_COR_TIP_DOC, "" + rst.getString("tx_desCor"));
                        vecReg.add(INT_TBL_DAT_DES_LAR_TIP_DOC, "" + rst.getString("tx_desLar"));
                        vecReg.add(INT_TBL_DAT_COD_DOC,         "" + rst.getString("co_doc"));
                        vecReg.add(INT_TBL_DAT_COD_MNU_DOC,     "" + rst.getString("co_mnu"));
                        vecReg.add(INT_TBL_DAT_COD_REG,         "" + rst.getString("co_reg"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC,         "" + rst.getString("ne_numDoc"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC,         "" + objUti.formatearFecha(rst.getDate("fe_doc"),"dd/MM/yyyy"));
                        vecReg.add(INT_TBL_DAT_COD_CLI,         "" + rst.getObject("co_cli")==null?"":rst.getString("co_cli"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI,         "" + rst.getObject("tx_nomCli")==null?"":rst.getString("tx_nomCli"));
                        vecReg.add(INT_TBL_DAT_COD_USU_SOL,     "" + rst.getString("co_usr"));
                        vecReg.add(INT_TBL_DAT_NOM_USU_SOL,     "" + rst.getString("tx_nom"));
                        vecReg.add(INT_TBL_DAT_COD_ITM,         "" + rst.getString("co_itm"));
                        vecReg.add(INT_TBL_DAT_COD_ALT_ITM,     "" + rst.getString("tx_codAlt"));
                        vecReg.add(INT_TBL_DAT_NOM_ITM,         "" + rst.getString("tx_nomItm"));
                        vecReg.add(INT_TBL_DAT_CAN,             "" + rst.getString("nd_can"));
                        vecReg.add(INT_TBL_DAT_BUT_VER_SOL,     "");
                        vecReg.add(INT_TBL_DAT_CHK_FAC,         "");
                        vecDat.add(vecReg);
                        i++;
                        pgrSis.setValue(i);
                    }
                    else{
                        break;
                    }
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                if (intNumTotReg==tblDat.getRowCount())
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros.");
                else
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros pero s�lo se procesaron " + tblDat.getRowCount() + ".");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    public boolean llenarArreglo(){
        boolean blnRes=true;
        arlDat.clear();
        try{
            for(int i=0; i<objTblMod.getRowCountTrue();i++){
                if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_FAC)){
                    arlReg=new ArrayList();
                    arlReg.add(INT_ARL_COD_EMP, objTblMod.getValueAt(i, INT_TBL_DAT_COD_EMP));
                    arlReg.add(INT_ARL_COD_LOC, objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC));
                    arlReg.add(INT_ARL_COD_TIP_DOC, objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC));
                    arlReg.add(INT_ARL_COD_DOC, objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC));
                    arlReg.add(INT_ARL_COD_REG, objTblMod.getValueAt(i, INT_TBL_DAT_COD_REG));
                    arlDat.add(arlReg);
                }
            }
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    private boolean isCamTbl(){
        boolean blnRes=false;
        String strLin="";
        int intConCamTbl=0;
        for(int i=0;i<objTblMod.getRowCountTrue();i++){
            strLin=objTblMod.getValueAt(i, INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_LIN).toString();
            if( ! strLin.equals("")){
                if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_FAC)){
                    intConCamTbl++;
                }
            }
        }
        if(intConCamTbl>0)
            blnRes=true;
        return blnRes;
    }
    
    
    
    
}