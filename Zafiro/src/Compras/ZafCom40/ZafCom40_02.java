/*
 *
 *
 * v0.1 
 */

package Compras.ZafCom40;
import Librerias.ZafDate.ZafDatePicker;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import java.util.ArrayList;
import Librerias.ZafVenCon.ZafVenCon;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut;
import Librerias.ZafTblUti.ZafTblCelEdiButGen.ZafTblCelEdiButGen;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
/**
 *
 * @author  Ingrid Lino
 */
public class ZafCom40_02 extends javax.swing.JDialog {
    private ZafParSis objParSis;
    private ZafDatePicker dtpFecDes, dtpFecHas;
    private ZafUtil objUti;
    private java.util.Date datFecAux;
    private String strCodPrv, strDesLarPrv;
    private String strDesCorVen,strDesLarVen;
    private String strDesCorItm,strDesLarItm;
    private String strSQL,strAux;
    private ZafVenCon vcoCli, vcoVen, vcoItm;
    private String strIdePrv, strDirPrv;
    private Vector vecCab, vecReg, vecDat, vecAux;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;
    private ZafMouMotAda objMouMotAda;
    private ZafTblFilCab objTblFilCab;
    private ZafTblEdi objTblEdi;
    private ZafTblCelRenLbl objTblCelRenLbl;
    private ZafTblCelRenBut objTblCelRenButSol;
    private ZafTblCelEdiButGen objTblCelEdiButGenSol;
    private ZafThreadGUI objThrGUI;
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private boolean blnCon;
    private String strNumCotSel;

    
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_EMP=1;
    final int INT_TBL_DAT_COD_LOC=2;
    final int INT_TBL_DAT_COD_DOC=3;
    final int INT_TBL_DAT_FEC_DOC=4;
    final int INT_TBL_DAT_COD_CLI=5;
    final int INT_TBL_DAT_NOM_CLI=6;
    final int INT_TBL_DAT_COD_VEN=7;
    final int INT_TBL_DAT_NOM_VEN=8;
    final int INT_TBL_DAT_TOT_DOC=9;
    final int INT_TBL_DAT_BUT_COT=10;
    
    private java.awt.Container cnt02;
    
    
    
    
     public ZafCom40_02(java.awt.Frame parent, boolean modal, ZafParSis obj, java.awt.Container container) {
         super(parent, modal);
        initComponents();
        objParSis=obj;
        configurarFrm();
        cnt02=container;
          //Inicializar objetos.
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        PanFrm = new javax.swing.JPanel();
        panFil = new javax.swing.JPanel();
        panFec = new javax.swing.JPanel();
        lblFecDes = new javax.swing.JLabel();
        lblFecHas = new javax.swing.JLabel();
        panCot = new javax.swing.JPanel();
        optTodCot = new javax.swing.JRadioButton();
        optFilCot = new javax.swing.JRadioButton();
        lblPrv = new javax.swing.JLabel();
        txtCodPrv = new javax.swing.JTextField();
        txtDesLarPrv = new javax.swing.JTextField();
        butPrv = new javax.swing.JButton();
        lblVen = new javax.swing.JLabel();
        txtCodVen = new javax.swing.JTextField();
        txtDesCorVen = new javax.swing.JTextField();
        txtDesLarVen = new javax.swing.JTextField();
        butVen = new javax.swing.JButton();
        lblItm = new javax.swing.JLabel();
        txtCodItm = new javax.swing.JTextField();
        txtDesCorItm = new javax.swing.JTextField();
        txtDesLarItm = new javax.swing.JTextField();
        butItm = new javax.swing.JButton();
        panDet = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panPie = new javax.swing.JPanel();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();
        butBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butLim = new javax.swing.JButton();
        butAce = new javax.swing.JButton();
        butCan = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Listado de cotizaciones de venta");
        getContentPane().add(lblTit, java.awt.BorderLayout.NORTH);

        PanFrm.setLayout(new java.awt.BorderLayout());

        panFil.setPreferredSize(new java.awt.Dimension(100, 142));
        panFil.setLayout(new java.awt.BorderLayout());

        panFec.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha de cotización"));
        panFec.setPreferredSize(new java.awt.Dimension(100, 46));
        panFec.setLayout(null);

        lblFecDes.setText("Desde:");
        panFec.add(lblFecDes);
        lblFecDes.setBounds(30, 18, 50, 14);

        lblFecHas.setText("Hasta:");
        panFec.add(lblFecHas);
        lblFecHas.setBounds(250, 18, 50, 14);

        panFil.add(panFec, java.awt.BorderLayout.NORTH);

        panCot.setLayout(null);

        optTodCot.setSelected(true);
        optTodCot.setText("Todas las cotizaciones de venta");
        optTodCot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTodCotActionPerformed(evt);
            }
        });
        panCot.add(optTodCot);
        optTodCot.setBounds(2, 0, 330, 16);

        optFilCot.setText("Sólo las cotizaciones que cumplan el criterio seleccionado");
        optFilCot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optFilCotActionPerformed(evt);
            }
        });
        panCot.add(optFilCot);
        optFilCot.setBounds(2, 16, 330, 16);

        lblPrv.setText("Cliente:");
        lblPrv.setToolTipText("Proveedor");
        panCot.add(lblPrv);
        lblPrv.setBounds(30, 34, 90, 20);

        txtCodPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodPrvActionPerformed(evt);
            }
        });
        txtCodPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusLost(evt);
            }
        });
        panCot.add(txtCodPrv);
        txtCodPrv.setBounds(102, 34, 76, 20);

        txtDesLarPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarPrvActionPerformed(evt);
            }
        });
        txtDesLarPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusLost(evt);
            }
        });
        panCot.add(txtDesLarPrv);
        txtDesLarPrv.setBounds(178, 34, 254, 20);

        butPrv.setText("...");
        butPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrvActionPerformed(evt);
            }
        });
        panCot.add(butPrv);
        butPrv.setBounds(432, 34, 20, 20);

        lblVen.setText("Vendedor:");
        lblVen.setToolTipText("Vendedor");
        panCot.add(lblVen);
        lblVen.setBounds(30, 54, 80, 20);
        panCot.add(txtCodVen);
        txtCodVen.setBounds(70, 54, 32, 20);

        txtDesCorVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorVenActionPerformed(evt);
            }
        });
        txtDesCorVen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorVenFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorVenFocusLost(evt);
            }
        });
        panCot.add(txtDesCorVen);
        txtDesCorVen.setBounds(102, 54, 76, 20);

        txtDesLarVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarVenActionPerformed(evt);
            }
        });
        txtDesLarVen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarVenFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarVenFocusLost(evt);
            }
        });
        panCot.add(txtDesLarVen);
        txtDesLarVen.setBounds(178, 54, 254, 20);

        butVen.setText("...");
        butVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butVenActionPerformed(evt);
            }
        });
        panCot.add(butVen);
        butVen.setBounds(432, 54, 20, 20);

        lblItm.setText("Item:");
        lblItm.setToolTipText("Vendedor");
        panCot.add(lblItm);
        lblItm.setBounds(30, 74, 80, 20);
        panCot.add(txtCodItm);
        txtCodItm.setBounds(70, 74, 32, 20);

        txtDesCorItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorItmActionPerformed(evt);
            }
        });
        txtDesCorItm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorItmFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorItmFocusLost(evt);
            }
        });
        panCot.add(txtDesCorItm);
        txtDesCorItm.setBounds(102, 74, 76, 20);

        txtDesLarItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarItmActionPerformed(evt);
            }
        });
        txtDesLarItm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarItmFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarItmFocusLost(evt);
            }
        });
        panCot.add(txtDesLarItm);
        txtDesLarItm.setBounds(178, 74, 254, 20);

        butItm.setText("...");
        butItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butItmActionPerformed(evt);
            }
        });
        panCot.add(butItm);
        butItm.setBounds(432, 74, 20, 20);

        panFil.add(panCot, java.awt.BorderLayout.CENTER);

        PanFrm.add(panFil, java.awt.BorderLayout.NORTH);

        panDet.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblDat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDatMouseClicked(evt);
            }
        });
        spnDat.setViewportView(tblDat);

        panDet.add(spnDat, java.awt.BorderLayout.CENTER);

        PanFrm.add(panDet, java.awt.BorderLayout.CENTER);

        panPie.setPreferredSize(new java.awt.Dimension(100, 50));
        panPie.setLayout(new java.awt.BorderLayout());

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panPie.add(panBarEst, java.awt.BorderLayout.SOUTH);

        butBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setMnemonic('C');
        butCon.setText("Consultar");
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        butBot.add(butCon);

        butLim.setMnemonic('L');
        butLim.setText("Limpiar");
        butLim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butLimActionPerformed(evt);
            }
        });
        butBot.add(butLim);

        butAce.setMnemonic('A');
        butAce.setText("Aceptar");
        butAce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAceActionPerformed(evt);
            }
        });
        butBot.add(butAce);

        butCan.setMnemonic('r');
        butCan.setText("Cancelar");
        butCan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCanActionPerformed(evt);
            }
        });
        butBot.add(butCan);

        panPie.add(butBot, java.awt.BorderLayout.CENTER);

        PanFrm.add(panPie, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("General", PanFrm);

        getContentPane().add(tabFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

private void butAceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAceActionPerformed
    if(objTblMod.getRowCountTrue()>0){
        int intFil=tblDat.getSelectedRow();
        setNumCotSel(objTblMod.getValueAt(intFil, INT_TBL_DAT_COD_DOC).toString());
        dispose();
    }
    else{
        mostrarMsgInf("<HTML>Seleccione un registro y vuelva a intentarlo o de click en botón Cancelar.</HTML>");
        
    }
}//GEN-LAST:event_butAceActionPerformed

private void butCanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCanActionPerformed
// TODO add your handling code here:
    exitForm(null);
}//GEN-LAST:event_butCanActionPerformed

private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
// TODO add your handling code here:
        String strTit, strMsg;
        try{
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION){
                dispose();
            }
        }
        catch (Exception e){
            dispose();
        }
}//GEN-LAST:event_exitForm

private void txtCodPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodPrvActionPerformed
txtCodPrv.transferFocus();
}//GEN-LAST:event_txtCodPrvActionPerformed

private void txtCodPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusGained
    strCodPrv=txtCodPrv.getText();
    txtCodPrv.selectAll();
}//GEN-LAST:event_txtCodPrvFocusGained

private void txtCodPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusLost
//Validar el contenido de la celda s�lo si ha cambiado.
        if (!txtCodPrv.getText().equalsIgnoreCase(strCodPrv)){
            if (txtCodPrv.getText().equals("")){
                txtCodPrv.setText("");
                txtDesLarPrv.setText("");
            }
            else{
                mostrarVenConPrv(1);
                //Cargar los documentos pendientes s�lo si ha cambiado el beneficiario.
                 if( (!txtCodPrv.getText().equalsIgnoreCase(strCodPrv))   ){
                    //cargarDocPen();
                 }
            }
        }
        else
            txtCodPrv.setText(strCodPrv);
}//GEN-LAST:event_txtCodPrvFocusLost

private void txtDesLarPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarPrvActionPerformed
    txtDesLarPrv.transferFocus();
}//GEN-LAST:event_txtDesLarPrvActionPerformed

private void txtDesLarPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusGained
    strDesLarPrv=txtDesLarPrv.getText();
    txtDesLarPrv.selectAll();
}//GEN-LAST:event_txtDesLarPrvFocusGained

private void txtDesLarPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusLost
//Validar el contenido de la celda s�lo si ha cambiado.
        if (!txtDesLarPrv.getText().equalsIgnoreCase(strDesLarPrv)){
            if (txtDesLarPrv.getText().equals("")){
                txtCodPrv.setText("");
                txtDesLarPrv.setText("");
            }
            else{
                mostrarVenConPrv(2);
                //Cargar los documentos pendientes s�lo si ha cambiado el beneficiario.
                if( (!txtDesLarPrv.getText().equalsIgnoreCase(strDesLarPrv))   ){
                    //cargarDocPen();
                }
            }
        }
        else
            txtDesLarPrv.setText(strDesLarPrv);
}//GEN-LAST:event_txtDesLarPrvFocusLost

private void butPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrvActionPerformed
    strCodPrv=txtCodPrv.getText();
    mostrarVenConPrv(0);
    if (!txtCodPrv.getText().equals("")){
    }
}//GEN-LAST:event_butPrvActionPerformed

private void txtDesCorVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorVenActionPerformed
// TODO add your handling code here:
        txtDesCorVen.transferFocus();
}//GEN-LAST:event_txtDesCorVenActionPerformed

private void txtDesCorVenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorVenFocusGained
// TODO add your handling code here:
        strDesCorVen=txtDesCorVen.getText();
        txtDesCorVen.selectAll();
}//GEN-LAST:event_txtDesCorVenFocusGained

private void txtDesCorVenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorVenFocusLost
// TODO add your handling code here:
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesCorVen.getText().equalsIgnoreCase(strDesCorVen)){
            if (txtDesCorVen.getText().equals("")){
                txtCodVen.setText("");
                txtDesCorVen.setText("");
                txtDesLarVen.setText("");
            }
            else
                mostrarVenConVen(1);
        }
        else
            txtDesCorVen.setText(strDesCorVen);
}//GEN-LAST:event_txtDesCorVenFocusLost

private void txtDesLarVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarVenActionPerformed
// TODO add your handling code here:
        txtDesLarVen.transferFocus();
}//GEN-LAST:event_txtDesLarVenActionPerformed

private void txtDesLarVenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarVenFocusGained
// TODO add your handling code here:
        strDesLarVen=txtDesLarVen.getText();
        txtDesLarVen.selectAll();
}//GEN-LAST:event_txtDesLarVenFocusGained

private void txtDesLarVenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarVenFocusLost
// TODO add your handling code here:
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesLarVen.getText().equalsIgnoreCase(strDesLarVen)){
            if (txtDesLarVen.getText().equals("")){
                txtCodVen.setText("");
                txtDesCorVen.setText("");
                txtDesLarVen.setText("");
            }
            else
            {
                mostrarVenConVen(2);
            }
        }
        else
            txtDesLarVen.setText(strDesLarVen);
}//GEN-LAST:event_txtDesLarVenFocusLost

private void butVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butVenActionPerformed
// TODO add your handling code here:
        strDesCorVen=txtDesCorVen.getText();
        mostrarVenConVen(0);
}//GEN-LAST:event_butVenActionPerformed

private void txtDesCorItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorItmActionPerformed
// TODO add your handling code here:
    txtDesCorItm.transferFocus();
}//GEN-LAST:event_txtDesCorItmActionPerformed

private void txtDesCorItmFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorItmFocusGained
// TODO add your handling code here:
    strDesCorItm=txtDesCorItm.getText();
    txtDesCorItm.selectAll();
}//GEN-LAST:event_txtDesCorItmFocusGained

private void txtDesCorItmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorItmFocusLost
// TODO add your handling code here:
    //Validar el contenido de la celda sólo si ha cambiado.
    if (!txtDesCorItm.getText().equalsIgnoreCase(strDesCorItm)){
        if (txtDesCorItm.getText().equals("")){
            txtCodItm.setText("");
            txtDesCorItm.setText("");
            txtDesLarItm.setText("");
        }
        else
            mostrarVenConItm(1);
    }
    else
        txtDesCorItm.setText(strDesCorItm);
}//GEN-LAST:event_txtDesCorItmFocusLost

private void txtDesLarItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarItmActionPerformed
// TODO add your handling code here:
    txtDesLarItm.transferFocus();
}//GEN-LAST:event_txtDesLarItmActionPerformed

private void txtDesLarItmFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarItmFocusGained
// TODO add your handling code here:
    strDesLarItm=txtDesLarItm.getText();
    txtDesLarItm.selectAll();
}//GEN-LAST:event_txtDesLarItmFocusGained

private void txtDesLarItmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarItmFocusLost
// TODO add your handling code here:
    //Validar el contenido de la celda sólo si ha cambiado.
    if (!txtDesLarItm.getText().equalsIgnoreCase(strDesLarItm)){
        if (txtDesLarItm.getText().equals("")){
            txtCodItm.setText("");
            txtDesCorItm.setText("");
            txtDesLarItm.setText("");
        }
        else
        {
            mostrarVenConItm(2);
        }
    }
    else
        txtDesLarItm.setText(strDesLarItm);
}//GEN-LAST:event_txtDesLarItmFocusLost

private void butItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butItmActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_butItmActionPerformed

private void optTodCotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTodCotActionPerformed
// TODO add your handling code here:
    if(optTodCot.isSelected())
        optFilCot.setSelected(false);
    else
        optFilCot.setSelected(true);
}//GEN-LAST:event_optTodCotActionPerformed

private void optFilCotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optFilCotActionPerformed
// TODO add your handling code here:
    if(optFilCot.isSelected())
        optTodCot.setSelected(false);
    else
        optTodCot.setSelected(true);
}//GEN-LAST:event_optFilCotActionPerformed

private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
// TODO add your handling code here:
    //Realizar acci�n de acuerdo a la etiqueta del bot�n ("Consultar" o "Detener").
    if (butCon.getText().equals("Consultar")){
        blnCon=true;
        if (objThrGUI==null){
            objThrGUI=new ZafThreadGUI();
            objThrGUI.start();
        }            
    }
    else
    {
        blnCon=false;
    }
}//GEN-LAST:event_butConActionPerformed

private void tblDatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDatMouseClicked
// TODO add your handling code here:
        //Cerrar el JDialog al dar doble click.
        if (evt.getClickCount()==2){
            butAceActionPerformed(null);
        }
}//GEN-LAST:event_tblDatMouseClicked

private void butLimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLimActionPerformed
// TODO add your handling code here:
    strDesCorVen="";
    strDesLarVen="";
    strDesCorItm="";
    strDesLarItm="";
    strIdePrv="";
    strDirPrv="";
    
    txtCodPrv.setText("");
    txtDesLarPrv.setText("");
    txtCodVen.setText("");
    txtDesCorVen.setText("");
    txtDesLarVen.setText("");
    txtCodItm.setText("");
    txtDesCorItm.setText("");
    txtDesLarItm.setText("");
    objTblMod.removeAllRows();
    
}//GEN-LAST:event_butLimActionPerformed
   

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanFrm;
    private javax.swing.JButton butAce;
    private javax.swing.JPanel butBot;
    private javax.swing.JButton butCan;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butItm;
    private javax.swing.JButton butLim;
    private javax.swing.JButton butPrv;
    private javax.swing.JButton butVen;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblFecDes;
    private javax.swing.JLabel lblFecHas;
    private javax.swing.JLabel lblItm;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblPrv;
    private javax.swing.JLabel lblTit;
    private javax.swing.JLabel lblVen;
    private javax.swing.JRadioButton optFilCot;
    private javax.swing.JRadioButton optTodCot;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panCot;
    private javax.swing.JPanel panDet;
    private javax.swing.JPanel panFec;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panPie;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodItm;
    private javax.swing.JTextField txtCodPrv;
    private javax.swing.JTextField txtCodVen;
    private javax.swing.JTextField txtDesCorItm;
    private javax.swing.JTextField txtDesCorVen;
    private javax.swing.JTextField txtDesLarItm;
    private javax.swing.JTextField txtDesLarPrv;
    private javax.swing.JTextField txtDesLarVen;
    // End of variables declaration//GEN-END:variables
       
    
   
    /** Cerrar la aplicaci�n. */
    private void exitForm(){
        dispose();
    }    
    
    /**
     * Esta funci�n configura el JTable "tblDat".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarFrm(){
        boolean blnRes=true;
        try{
            objUti=new ZafUtil();
            //datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
            
            //Configurar ZafDatePicker:
            dtpFecDes=new ZafDatePicker(javax.swing.JOptionPane.getFrameForComponent(this),"d/m/y");
            dtpFecDes.setBackground(objParSis.getColorCamposObligatorios());
            //dtpFecDes.setText(objUti.formatearFecha(datFecAux,"dd/MM/yyyy"));
            dtpFecDes.setText("");
            panFec.add(dtpFecDes);
            dtpFecDes.setBounds(100, 18, 120, 20);
            
            dtpFecHas=new ZafDatePicker(javax.swing.JOptionPane.getFrameForComponent(this),"d/m/y");
            dtpFecHas.setBackground(objParSis.getColorCamposObligatorios());
            //dtpFecHas.setText(objUti.formatearFecha(datFecAux,"dd/MM/yyyy"));
            dtpFecHas.setText("");
            panFec.add(dtpFecHas);
            dtpFecHas.setBounds(370, 18, 120, 20);
            
            configurarVenConItm();
            configurarVenConPrv();
            configurarVenConVen();
            
            txtCodVen.setVisible(false);
            txtCodVen.setEditable(false);
            txtCodVen.setEnabled(false);
            txtCodItm.setVisible(false);
            txtCodItm.setEditable(false);
            txtCodItm.setEnabled(false);
            
            
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(11);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_EMP,"COD.EMP.");
            vecCab.add(INT_TBL_DAT_COD_LOC,"COD.LOC.");
            vecCab.add(INT_TBL_DAT_COD_DOC,"COD.DOC.");
            vecCab.add(INT_TBL_DAT_FEC_DOC,"FEC.DOC.");
            vecCab.add(INT_TBL_DAT_COD_CLI,"COD.CLI.");
            vecCab.add(INT_TBL_DAT_NOM_CLI,"NOM.CLI.");
            vecCab.add(INT_TBL_DAT_COD_VEN,"COD.VEN.");
            vecCab.add(INT_TBL_DAT_NOM_VEN,"NOM.VEN");
            vecCab.add(INT_TBL_DAT_TOT_DOC,"TOT.DOC.");
            vecCab.add(INT_TBL_DAT_BUT_COT,"");
            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            //Configurar ZafTblMod: Establecer el tipo de dato de las columnas.
            objTblMod.setColumnDataType(INT_TBL_DAT_TOT_DOC, objTblMod.INT_COL_DBL, new Integer(0), null);
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selecci�n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el men� de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(120);
            tcmAux.getColumn(INT_TBL_DAT_COD_VEN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_NOM_VEN).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_TOT_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_BUT_COT).setPreferredWidth(20);
            
            
            
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_DAT_COD_VEN).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            

            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);
            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_BUT_COT);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            //Configurar JTable: Editor de la tabla.
            objTblEdi=new ZafTblEdi(tblDat);
            
            
            //Configurar JTable: Renderizar celdas.
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_TOT_DOC).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;

            //Configurar ZafTblMod: Establecer el tipo de dato de las columnas.
            objTblMod.setColumnDataType(INT_TBL_DAT_TOT_DOC, objTblMod.INT_COL_DBL, new Integer(0), null);
            
            //Para el botón que carga la solicitud
            objTblCelRenButSol=new ZafTblCelRenBut();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_BUT_COT).setCellRenderer(objTblCelRenButSol);
            objTblCelEdiButGenSol=new ZafTblCelEdiButGen();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_BUT_COT).setCellEditor(objTblCelEdiButGenSol);
            objTblCelEdiButGenSol.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFilSel;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFilSel=tblDat.getSelectedRow();
                }
                public void actionPerformed(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    llamarVentanaSolicitud(intFilSel);
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
            });
            
            
            
            
            
            
            
            
            
            //objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_VEN, tblDat);
            
            //Libero los objetos auxiliares.
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            tcmAux=null;
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
            
    /**
     * Esta funci�n configura la "Ventana de consulta" que ser� utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConPrv()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("C�digo");
            arlAli.add("Identificaci�n");
            arlAli.add("Nombre");
            arlAli.add("Direcci�n");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            if(objParSis.getCodigoUsuario()==1){
                strSQL="";
                strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
                strSQL+=" FROM tbm_cli AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.st_cli='S'";
                strSQL+=" AND a1.st_reg='A'";
                strSQL+=" ORDER BY a1.tx_nom";
                
            }
            else{
                if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                    strSQL="";
                    strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
                    strSQL+=" FROM tbm_cli AS a1";
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                    if(objParSis.getCodigoMenu()==232){
                        strSQL+=" AND a1.st_cli='S'";
                    }
                    else{
                        strSQL+=" AND a1.st_prv='S'";
                    }
                    strSQL+=" AND a1.st_reg='A'";
                    strSQL+=" ORDER BY a1.tx_nom";
                }
                else{
                    strSQL="";
                    strSQL+="SELECT a2.co_cli, a2.tx_ide, a2.tx_nom, a2.tx_dir";
                    strSQL+=" FROM tbr_cliLoc AS a1 INNER JOIN tbm_cli AS a2";
                    strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli";
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                    strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                    if(objParSis.getCodigoMenu()==232){
                        strSQL+=" AND a2.st_cli='S'";
                    }
                    else{
                        strSQL+=" AND a2.st_prv='S'";
                    }
                    strSQL+=" ORDER BY a2.tx_nom";
                }
            }


            
            //Ocultar columnas.
            int intColOcu[]=new int[1];
            intColOcu[0]=4;
            vcoCli=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de clientes", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoCli.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta funci�n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de b�squeda determina si se debe hacer
     * una b�squeda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se est� buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opci�n que desea utilizar.
     * @param intTipBus El tipo de b�squeda a realizar.
     * @return true: Si no se present� ning�n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConPrv(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoCli.setCampoBusqueda(2);
                    vcoCli.show();
                    if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                    {
                        txtCodPrv.setText(vcoCli.getValueAt(1));
                        strIdePrv=vcoCli.getValueAt(2);
                        txtDesLarPrv.setText(vcoCli.getValueAt(3));
                        strDirPrv=vcoCli.getValueAt(4);
                    }
                    break;
                case 1: //B�squeda directa por "N�mero de cuenta".
                    if (vcoCli.buscar("a1.co_cli", txtCodPrv.getText()))
                    {
                        txtCodPrv.setText(vcoCli.getValueAt(1));
                        strIdePrv=vcoCli.getValueAt(2);
                        txtDesLarPrv.setText(vcoCli.getValueAt(3));
                        strDirPrv=vcoCli.getValueAt(4);
                    }
                    else
                    {
                        vcoCli.setCampoBusqueda(0);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                        {
                            txtCodPrv.setText(vcoCli.getValueAt(1));
                            strIdePrv=vcoCli.getValueAt(2);
                            txtDesLarPrv.setText(vcoCli.getValueAt(3));
                            strDirPrv=vcoCli.getValueAt(4);
                        }
                        else
                        {
                            txtCodPrv.setText(strCodPrv);
                        }
                    }
                    break;
                case 2: //B�squeda directa por "Descripci�n larga".
                    if (vcoCli.buscar("a1.tx_nom", txtDesLarPrv.getText()))
                    {
                        txtCodPrv.setText(vcoCli.getValueAt(1));
                        strIdePrv=vcoCli.getValueAt(2);
                        txtDesLarPrv.setText(vcoCli.getValueAt(3));
                        strDirPrv=vcoCli.getValueAt(4);
                    }
                    else
                    {
                        vcoCli.setCampoBusqueda(2);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                        {
                            txtCodPrv.setText(vcoCli.getValueAt(1));
                            strIdePrv=vcoCli.getValueAt(2);
                            txtDesLarPrv.setText(vcoCli.getValueAt(3));
                            strDirPrv=vcoCli.getValueAt(4);
                        }
                        else
                        {
                            txtDesLarPrv.setText(strDesLarPrv);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    private boolean configurarVenConVen(){
        boolean blnRes=true;
        try{
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_usr");
            arlCam.add("a1.tx_usr");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Usuario");
            arlAli.add("Nombre");
            arlAli.add("Dirección");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            if(objParSis.getCodigoUsuario()==1){
                strSQL="";
                strSQL+="SELECT a1.co_usr, a1.tx_usr, a1.tx_nom, a1.tx_dir";
                strSQL+=" FROM tbm_usr AS a1 ";
                strSQL+=" WHERE a1.st_reg='A'";
                strSQL+=" ORDER BY a1.tx_nom";
            }
            else{
                strSQL="";
                strSQL+="SELECT a1.co_usr, a1.tx_usr, a1.tx_nom, a1.tx_dir";
                strSQL+=" FROM tbm_usr AS a1 INNER JOIN tbr_usrEmp AS a2";
                strSQL+=" ON a1.co_usr=a2.co_usr";
                strSQL+=" WHERE a2.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a1.st_reg='A'";
                strSQL+=" AND a2.st_ven='S'";
                strSQL+=" ORDER BY a1.tx_nom";
            }

//            System.out.println("CONFIGURARVENCONVEN: " +strSQL);
            //Ocultar columnas.
            int intColOcu[]=new int[1];
            intColOcu[0]=4;
            vcoVen=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de Vendedores", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoVen.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
     private boolean mostrarVenConVen(int intTipBus){
        boolean blnRes=true;
        try{
            switch (intTipBus){
                case 0: //Mostrar la ventana de consulta.
                    vcoVen.setCampoBusqueda(1);
                    vcoVen.show();
                    if (vcoVen.getSelectedButton()==vcoVen.INT_BUT_ACE){
                        txtCodVen.setText(vcoVen.getValueAt(1));
                        txtDesCorVen.setText(vcoVen.getValueAt(2));
                        txtDesLarVen.setText(vcoVen.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Descripción corta".
                    if (vcoVen.buscar("a1.tx_usr", txtDesCorVen.getText())){
                        txtCodVen.setText(vcoVen.getValueAt(1));
                        txtDesCorVen.setText(vcoVen.getValueAt(2));
                        txtDesLarVen.setText(vcoVen.getValueAt(3));
                    }
                    else{
                        vcoVen.setCampoBusqueda(1);
                        vcoVen.setCriterio1(11);
                        vcoVen.cargarDatos();
                        vcoVen.show();
                        if (vcoVen.getSelectedButton()==vcoVen.INT_BUT_ACE)
                        {
                            txtCodVen.setText(vcoVen.getValueAt(1));
                            txtDesCorVen.setText(vcoVen.getValueAt(2));
                            txtDesLarVen.setText(vcoVen.getValueAt(3));
                        }
                        else{
                            txtDesLarVen.setText(strDesLarVen);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoVen.buscar("a1.tx_nom", txtDesLarVen.getText())){
                        txtCodVen.setText(vcoVen.getValueAt(1));
                        txtDesCorVen.setText(vcoVen.getValueAt(2));
                        txtDesLarVen.setText(vcoVen.getValueAt(3));
                    }
                    else{
                        vcoVen.setCampoBusqueda(2);
                        vcoVen.setCriterio1(11);
                        vcoVen.cargarDatos();
                        vcoVen.show();
                        if (vcoVen.getSelectedButton()==vcoVen.INT_BUT_ACE)
                        {
                            txtCodVen.setText(vcoVen.getValueAt(1));
                            txtDesCorVen.setText(vcoVen.getValueAt(2));
                            txtDesLarVen.setText(vcoVen.getValueAt(3));
                        }
                        else{
                            txtDesLarVen.setText(strDesLarVen);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }   
 
    /**
     * Esta función configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Items".
     */
    private boolean configurarVenConItm()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_itm");
            arlCam.add("a1.tx_codAlt");
            arlCam.add("a1.tx_nomItm");
            arlCam.add("a4.tx_descor");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código Item");
            arlAli.add("Código Alterno Item");
            arlAli.add("Nombre del Item");
            arlAli.add("Nombre de Unidad de Medida");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("290");
            arlAncCol.add("50");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_itm, a1.tx_codAlt, a1.tx_nomItm, a2.tx_descor";
            strSQL+=" FROM tbm_inv AS a1 LEFT OUTER JOIN tbm_var AS a2";
            strSQL+=" ON a1.co_uni=a2.co_reg";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" AND a1.st_reg IN('A') AND a1.nd_stkact>0";
            strSQL+=" ORDER BY a1.tx_codAlt";
            
            //Ocultar columnas.
            vcoItm=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de items", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            
            //Configurar columnas.
            vcoItm.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoItm.setConfiguracionColumna(4, javax.swing.JLabel.RIGHT, vcoItm.INT_FOR_NUM, objParSis.getFormatoNumero(),false,true);
            
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
     private boolean mostrarVenConItm(int intTipBus){
        boolean blnRes=true;
        try{
            switch (intTipBus){
                case 0: //Mostrar la ventana de consulta.
                    vcoItm.setCampoBusqueda(1);
                    vcoItm.show();
                    if (vcoItm.getSelectedButton()==vcoItm.INT_BUT_ACE){
                        txtCodItm.setText(vcoItm.getValueAt(1));
                        txtDesCorItm.setText(vcoItm.getValueAt(2));
                        txtDesLarItm.setText(vcoItm.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Descripción corta".
                    if (vcoItm.buscar("a1.tx_codAlt", txtDesCorItm.getText())){
                        txtCodItm.setText(vcoItm.getValueAt(1));
                        txtDesCorItm.setText(vcoItm.getValueAt(2));
                        txtDesLarItm.setText(vcoItm.getValueAt(3));
                    }
                    else{
                        vcoItm.setCampoBusqueda(1);
                        vcoItm.setCriterio1(11);
                        vcoItm.cargarDatos();
                        vcoItm.show();
                        if (vcoItm.getSelectedButton()==vcoItm.INT_BUT_ACE)
                        {
                            txtCodItm.setText(vcoItm.getValueAt(1));
                            txtDesCorItm.setText(vcoItm.getValueAt(2));
                            txtDesLarItm.setText(vcoItm.getValueAt(3));
                        }
                        else{
                            txtDesLarItm.setText(strDesLarItm);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoItm.buscar("a1.tx_nomItm", txtDesLarItm.getText())){
                        txtCodItm.setText(vcoItm.getValueAt(1));
                        txtDesCorItm.setText(vcoItm.getValueAt(2));
                        txtDesLarItm.setText(vcoItm.getValueAt(3));
                    }
                    else{
                        vcoItm.setCampoBusqueda(2);
                        vcoItm.setCriterio1(11);
                        vcoItm.cargarDatos();
                        vcoItm.show();
                        if (vcoItm.getSelectedButton()==vcoItm.INT_BUT_ACE)
                        {
                            txtCodItm.setText(vcoItm.getValueAt(1));
                            txtDesCorItm.setText(vcoItm.getValueAt(2));
                            txtDesLarItm.setText(vcoItm.getValueAt(3));
                        }
                        else{
                            txtDesLarItm.setText(strDesLarItm);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }   
 
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren m�s espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD_EMP:
                    strMsg="Código de empresa";
                    break;
                case INT_TBL_DAT_COD_LOC:
                    strMsg="Código de local";
                    break;

                case INT_TBL_DAT_COD_DOC:
                    strMsg="Código de documento";
                    break;
                case INT_TBL_DAT_FEC_DOC:
                    strMsg="Fecha de documento";
                    break;
                case INT_TBL_DAT_COD_CLI:
                    strMsg="Código de cliente";
                    break;
                case INT_TBL_DAT_NOM_CLI:
                    strMsg="Nombre del cliente";
                    break;
                case INT_TBL_DAT_COD_VEN:
                    strMsg="Código de vendedor";
                    break;
                case INT_TBL_DAT_NOM_VEN:
                    strMsg="Nombre de vendedor";
                    break;
                case INT_TBL_DAT_TOT_DOC:
                    strMsg="Total de documento";
                    break;
                case INT_TBL_DAT_BUT_COT:
                    strMsg="Ver cotización";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
   
    
    //DEBERIA HACERSE UNA FUNCION Q ENVIE COMO PARAMETRO CODIGO DE CLIENTE, Y OBJETO ZAFPARSIS PARA EN ESE NUEVO FORMULARIO CARGAR ESTE QUERY
    private void llamarVentanaSolicitud(int fila){
        int i=fila;
        String strCodEmp=objTblMod.getValueAt(i, INT_TBL_DAT_COD_EMP)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_COD_EMP).toString();
        String strCodLoc=objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC).toString();
        String strCodDoc=objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC).toString();
        
//        //PARA EL PROGRAMA DE COTIZACION 
//        Ventas.ZafVen01.ZafVen01 objVen01_01=new Ventas.ZafVen01.ZafVen01(javax.swing.JOptionPane.getFrameForComponent(this), true, objParSis, strCodEmp,strCodLoc, strCodDoc);
//        cnt02.add(objVen01_01,javax.swing.JLayeredPane.DEFAULT_LAYER);
//        //cnt02.add(objVen01_01,javax.swing.JInternalFrame.);
//        objVen01_01.show();
  
        
        //PARA EL PROGRAMA DE COTIZACION 
        Compras.ZafCom40.ZafVen01 objVen01_03=new Compras.ZafCom40.ZafVen01(javax.swing.JOptionPane.getFrameForComponent(this), true, objParSis, strCodEmp,strCodLoc, strCodDoc);
        //cnt02.add(objCom40_03,javax.swing.JLayeredPane.DEFAULT_LAYER);
        //cnt02.add(objVen01_01,javax.swing.JInternalFrame.);
        objVen01_03.show();
  
        
        
        
        
        
    }
    
    /**
     * Esta clase crea un hilo que permite manipular la interface gr�fica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que est� ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podr�a presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estar�a informado en todo
     * momento de lo que ocurre. Si se desea hacer �sto es necesario utilizar �sta clase
     * ya que si no s�lo se apreciar�a los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread{
        public void run(){
            //Limpiar objetos.
            objTblMod.removeAllRows();
            if(isVal()){
                    if (!cargarDetReg()){
                        //Inicializar objetos si no se pudo cargar los datos.
                        lblMsgSis.setText("Listo");
                        pgrSis.setValue(0);
                        butCon.setText("Consultar");
                    }
            }            

            //Establecer el foco en el JTable s�lo cuando haya datos.
            if (tblDat.getRowCount()>0){
                tabFrm.setSelectedIndex(0);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }
    
    
    /**
     * Esta funci�n permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg(){
        int intNumTotReg, i;
        boolean blnRes=true;
        try{
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                
                //Obtener la condición.
                strSQL="";
                strSQL+=" SELECT COUNT(*) FROM(";
                strSQL+=" SELECT a1.co_emp, a1.co_loc, a1.co_cot, a1.fe_cot, a1.co_cli,";
                strSQL+="         a3.tx_nom AS tx_nomCli, a1.co_ven, a2.tx_nom AS tx_nomVen, a1.nd_tot";
                strSQL+=" FROM tbm_cabcotven AS a1 LEFT OUTER JOIN tbm_usr AS a2 ";
                strSQL+="         ON a1.co_ven=a2.co_usr";
                strSQL+=" LEFT OUTER JOIN tbm_cli AS a3 ";
                strSQL+="         ON a1.co_emp=a3.co_emp AND a1.co_cli=a3.co_cli";
                strSQL+=" LEFT OUTER JOIN tbm_detcotven AS a4";
                strSQL+="         ON a1.co_emp=a4.co_emp AND a1.co_loc=a4.co_loc AND a1.co_cot=a4.co_cot";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and a1.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" AND a1.st_reg IN('A','U','P','E')";

                strAux=txtCodPrv.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_cli LIKE '" + strAux.replaceAll("'", "''") + "'";

                strAux=txtCodVen.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_ven LIKE '" + strAux.replaceAll("'", "''") + "'";
                
                strAux=txtCodItm.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a4.co_itm= '" + strAux.replaceAll("'", "''") + "'";

                if (dtpFecDes.isFecha())
                    strSQL+=" AND a1.fe_cot>='" + objUti.formatearFecha(dtpFecDes.getText(),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "'";

                if (dtpFecHas.isFecha())
                    strSQL+=" AND a1.fe_cot<='" + objUti.formatearFecha(dtpFecHas.getText(),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "'";

                strSQL+=" GROUP BY a1.co_emp, a1.co_loc, a1.co_cot, a1.fe_cot, a1.co_cli, a3.tx_nom, a1.co_ven, a2.tx_nom, a1.nd_tot) AS x";
                
                intNumTotReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intNumTotReg==-1)
                    return false;
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT a1.co_emp, a1.co_loc, a1.co_cot, a1.fe_cot, a1.co_cli, ";
                strSQL+="         a3.tx_nom AS tx_nomCli, a1.co_ven, a2.tx_nom AS tx_nomVen, a1.nd_tot";
                strSQL+=" FROM tbm_cabcotven AS a1 LEFT OUTER JOIN tbm_usr AS a2 ";
                strSQL+="         ON a1.co_ven=a2.co_usr";
                strSQL+=" LEFT OUTER JOIN tbm_cli AS a3 ";
                strSQL+="         ON a1.co_emp=a3.co_emp AND a1.co_cli=a3.co_cli";
                strSQL+=" LEFT OUTER JOIN tbm_detcotven AS a4";
                strSQL+="         ON a1.co_emp=a4.co_emp AND a1.co_loc=a4.co_loc AND a1.co_cot=a4.co_cot";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and a1.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" AND a1.st_reg IN('A','U','P','E')";

                strAux=txtCodPrv.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_cli LIKE '" + strAux.replaceAll("'", "''") + "'";

                strAux=txtCodVen.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_ven LIKE '" + strAux.replaceAll("'", "''") + "'";
                
                strAux=txtCodItm.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a4.co_itm= '" + strAux.replaceAll("'", "''") + "'";

                if (dtpFecDes.isFecha())
                    strSQL+=" AND a1.fe_cot>='" + objUti.formatearFecha(dtpFecDes.getText(),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "'";

                if (dtpFecHas.isFecha())
                    strSQL+=" AND a1.fe_cot<='" + objUti.formatearFecha(dtpFecHas.getText(),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "'";

                
                strSQL+=" GROUP BY a1.co_emp, a1.co_loc, a1.co_cot, a1.fe_cot, a1.co_cli, a3.tx_nom, a1.co_ven, a2.tx_nom, a1.nd_tot";
                strSQL+=" ORDER BY a1.co_cot, a1.fe_cot";
//                System.out.println("cargarDetReg: " + strSQL);
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,             "");
                        vecReg.add(INT_TBL_DAT_COD_EMP,         "" + rst.getString("co_emp"));
                        vecReg.add(INT_TBL_DAT_COD_LOC,         "" + rst.getString("co_loc"));
                        vecReg.add(INT_TBL_DAT_COD_DOC,         "" + rst.getString("co_cot"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC,         "" + objUti.formatearFecha(rst.getDate("fe_cot"),"dd/MM/yyyy"));
                        vecReg.add(INT_TBL_DAT_COD_CLI,         "" + rst.getString("co_cli"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI,         "" + rst.getString("tx_nomCli"));
                        vecReg.add(INT_TBL_DAT_COD_VEN,         "" + rst.getString("co_ven"));
                        vecReg.add(INT_TBL_DAT_NOM_VEN,         "" + rst.getString("tx_nomVen"));
                        vecReg.add(INT_TBL_DAT_TOT_DOC,         "" + rst.getString("nd_tot"));
                        vecReg.add(INT_TBL_DAT_BUT_COT,         "");
                        
                        vecDat.add(vecReg);
                        i++;
                        pgrSis.setValue(i);
                    }
                    else{
                        break;
                    }
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                if (intNumTotReg==tblDat.getRowCount())
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros.");
                else
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros pero s�lo se procesaron " + tblDat.getRowCount() + ".");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean isVal(){
        if(   (dtpFecDes.getText().equals(""))  )
            if (!dtpFecDes.isFecha()){
                tabFrm.setSelectedIndex(0);
                mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Fecha desde</FONT> es obligatorio.<BR>Escriba o seleccione una fecha desde y vuelva a intentarlo.</HTML>");
                dtpFecDes.requestFocus();
                return false;
            }
        
        if(   (dtpFecHas.getText().equals(""))   )
            if (!dtpFecHas.isFecha()){
                tabFrm.setSelectedIndex(0);
                mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Fecha hasta</FONT> es obligatorio.<BR>Escriba o seleccione una fecha hasta y vuelva a intentarlo.</HTML>");
                dtpFecHas.requestFocus();
                return false;
            }
        return true;
    }
    
    /**
     * Esta funci�n muestra un mensaje informativo al usuario. Se podr�a utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    public String getNumCotSel() {
        return strNumCotSel;
    }

    public void setNumCotSel(String strNumCotSel) {
        this.strNumCotSel = strNumCotSel;
    }
    
    

    
    
    
}
