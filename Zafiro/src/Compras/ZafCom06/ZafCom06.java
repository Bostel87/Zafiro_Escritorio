/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ZafCom57.java
 *
 * Created on Mar 1, 2010, 9:46:43 AM
 */
       
package Compras.ZafCom06;
import GenOD.ZafGenOdDaoPryTra;
import GenOD.ZafGenOdPryTra;
import Librerias.ZafCnfDoc.ZafCnfDoc;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafInventario.ZafInvItm;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafSelFec.ZafSelFec;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafVenCon.ZafVenCon;
import ZafReglas.ZafGenGuiRem;
import ZafReglas.ZafGuiRemDAO;
import ZafReglas.ZafImp;
import ZafReglas.ZafMetImp;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;

/**
 *
 * @author jayapata
 * MODIFICADO EFLORESA 2012-04-30
 * PROGRAMA DE AUTORIZACION DE GUIAS DE REMISION
 * 
 */
public class ZafCom06 extends JInternalFrame {
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private String strVersion="v 1.7 ";
    private ZafSelFec objSelFec;
    private ZafTblMod objTblMod;
    private ZafTblCelEdiChk objTblCelEdiChk;
    private ZafInvItm objInvItm;

    private ZafVenCon objVenConBodUsr;
    private ZafVenCon objVenConCLi;
    private ZafVenCon objVenConVen;

    private String strCodBod="", strNomBod="";
    private String strCodCli="";
    private String strDesCli="";
    private String strCodVen="";
    private String strDesVen="";

    private Vector vecDat, vecCab, vecReg;
    private boolean blnCon;

    private ZafThreadGUI objThrGUI;

    private static final int INT_TBL_LIN=0;                        //Línea
    private static final int INT_TBL_CODEMP =1;                    //Código del item (Sistema).
    private static final int INT_TBL_CODLOC =2;                    //Código del item (Sistema).
    private static final int INT_TBL_CODTIPDOC =3;                    //Código del item (Alterno).
    private static final int INT_TBL_DESCTIDOC =4;                    //Código del item (Alterno).
    private static final int INT_TBL_CODDOC =5;                    //Nombre del item.
    private static final int INT_TBL_NUMDOC=6;                    //Descripción corta de la unidad de medida.
    private static final int INT_TBL_NUMDOCORI=7;
    private static final int INT_TBL_FECDOC=8;                    //Stock consolidado.
    private static final int INT_TBL_CODCLI=9;                   //Precio de venta 1.
    private static final int INT_TBL_NOMCLI=10;                   //Precio de venta 1.
    private static final int INT_TBL_CHKREP=11;                   //Precio de venta 1.
    private static final int INT_TBL_FECAUT=12;
    private static final int INT_TBL_OBSAUT = 13;
    private static final int INT_TBL_BOBAUT = 14;
    private static final int INT_TBL_OBSIMP = 15;
    private static final int INT_TBL_BOBIMP = 16;
    
    
    private String strTit = "Mensaje del sistema Zafiro";
    
    /** Creates new form ZafCom57 */
    public ZafCom06(ZafParSis objZafParsis) {
        try{
            this.objParSis = (ZafParSis) objZafParsis.clone();
            objUti = new ZafUtil();

            objTblCelEdiChk = new ZafTblCelEdiChk();
            objInvItm = new ZafInvItm(this, objParSis);

            initComponents();

            //Configurar ZafSelFec:
            objSelFec=new ZafSelFec();
            objSelFec.setCheckBoxVisible(true);
            objSelFec.setCheckBoxChecked(false);
            objSelFec.setTitulo("Fecha del documento");
            panFilCab.add(objSelFec);
            objSelFec.setBounds(30, 115, 472, 72);


            this.setTitle(objParSis.getNombreMenu()+" "+ strVersion );
            lblTit.setText( objParSis.getNombreMenu() );
        }catch (CloneNotSupportedException e){  
            objUti.mostrarMsgErr_F1(this, e); 
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */



       /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
          

            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(8);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_LIN,"");
            vecCab.add(INT_TBL_CODEMP,"Cod.Emp.");
            vecCab.add(INT_TBL_CODLOC,"Cod.Loc.");
            vecCab.add(INT_TBL_CODTIPDOC,"Cod.Tip.Doc");
            vecCab.add(INT_TBL_DESCTIDOC,"Des.Tip.Doc");
            vecCab.add(INT_TBL_CODDOC,"Cod.Doc");
            vecCab.add(INT_TBL_NUMDOC,"Num.Fac");
            vecCab.add(INT_TBL_NUMDOCORI,"Ori.Num.Doc");
            vecCab.add(INT_TBL_FECDOC,"Fec.Doc");
            vecCab.add(INT_TBL_CODCLI,"Cod.Cli");
            vecCab.add(INT_TBL_NOMCLI,"Nom.Cli");
            vecCab.add(INT_TBL_CHKREP,"Autorizar.");
            vecCab.add(INT_TBL_FECAUT,"Fec.Aut");
            vecCab.add(INT_TBL_OBSAUT,"Observación.");
            vecCab.add(INT_TBL_BOBAUT,"...");
            vecCab.add(INT_TBL_OBSIMP,"Obs.Imp");
            vecCab.add(INT_TBL_BOBIMP,"...");        

           // vecCab.add(INT_TBL_DAT_TOT_COS,"Total.Costo");
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            ZafColNumerada zafColNumerada = new ZafColNumerada(tblDat,INT_TBL_LIN);
            //Configurar JTable: Establecer el menú de contexto.
            ZafTblPopMnu zafTblPopMnu = new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();

            tcmAux.getColumn(INT_TBL_LIN).setPreferredWidth(25);
            tcmAux.getColumn(INT_TBL_DESCTIDOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_NUMDOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_FECDOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_CODCLI).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_NOMCLI).setPreferredWidth(180);
            tcmAux.getColumn(INT_TBL_CHKREP).setPreferredWidth(25);
            tcmAux.getColumn(INT_TBL_OBSAUT).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_BOBAUT).setPreferredWidth(25);
            tcmAux.getColumn(INT_TBL_OBSIMP).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_BOBIMP).setPreferredWidth(25);           
           
	       //Configurar JTable: Establecer columnas editables.
            Vector vecAux=new Vector();
            vecAux.add("" + INT_TBL_CHKREP);
            vecAux.add("" + INT_TBL_OBSAUT);
            vecAux.add("" + INT_TBL_BOBAUT);
            vecAux.add("" + INT_TBL_OBSIMP);
            vecAux.add("" + INT_TBL_BOBIMP);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;

	    ZafTblCelRenChk objTblCelRenChk = new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_CHKREP).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk=null;

            tcmAux.getColumn(INT_TBL_CHKREP).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                @Override
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt){
                   
                }
                @Override
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                  
                }
	         });


          

            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            ZafMouMotAda objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Editor de búsqueda.
            ZafTblBus zafTblBus = new ZafTblBus(tblDat);
            //Configurar JTable: Renderizar celdas.
            //Libero los objetos auxiliares.
            ZafTblOrd zafTblOrd = new ZafTblOrd(tblDat);

              ArrayList arlColHid=new ArrayList();
               arlColHid.add(""+INT_TBL_CODEMP);
               arlColHid.add(""+INT_TBL_CODLOC);
               arlColHid.add(""+INT_TBL_CODTIPDOC);
              arlColHid.add(""+INT_TBL_CODDOC);
              arlColHid.add(""+INT_TBL_NUMDOCORI);
              arlColHid.add(""+INT_TBL_FECAUT);

              objTblMod.setSystemHiddenColumns(arlColHid, tblDat);
              arlColHid=null;


            Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut objTblCelRenBut=new Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut();
            tcmAux.getColumn(INT_TBL_BOBAUT).setCellRenderer(objTblCelRenBut);
            objTblCelRenBut=null;
            ButObs butObs = new ButObs(tblDat, INT_TBL_BOBAUT); //*****

            objTblCelRenBut=new Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut();
            tcmAux.getColumn(INT_TBL_BOBIMP).setCellRenderer(objTblCelRenBut);
            objTblCelRenBut=null;
            ButObsImp butObsImp = new ButObsImp(tblDat, INT_TBL_BOBIMP); //*****



            tcmAux=null;
            setEditable(true);

        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



     public void setEditable(boolean editable) {
        if (editable==true){
            objTblMod.setModoOperacion(ZafTblMod.INT_TBL_EDI);
        }else{
            objTblMod.setModoOperacion(ZafTblMod.INT_TBL_NO_EDI);
        }
    }






private class ButObs extends Librerias.ZafTableColBut.ZafTableColBut_uni{
    public ButObs(javax.swing.JTable tbl, int intIdx){
        super(tbl,intIdx, "Guía de remisión.");
    }
    public void butCLick() {
       int intFil = tblDat.getSelectedRow();
       String strObs = ( tblDat.getValueAt(intFil,  INT_TBL_OBSAUT  )==null?"":tblDat.getValueAt(intFil,  INT_TBL_OBSAUT  ).toString());
       llamarVenObs(strObs, intFil, INT_TBL_OBSAUT );
    }
}

private class ButObsImp extends Librerias.ZafTableColBut.ZafTableColBut_uni{
    public ButObsImp(javax.swing.JTable tbl, int intIdx){
        super(tbl,intIdx, "Guía de remisión.");
    }
    public void butCLick() {
       int intFil = tblDat.getSelectedRow();
       String strObs = ( tblDat.getValueAt(intFil,  INT_TBL_OBSIMP  )==null?"":tblDat.getValueAt(intFil,  INT_TBL_OBSIMP  ).toString());
       llamarVenObs(strObs, intFil, INT_TBL_OBSIMP );
    }
}

private void llamarVenObs(String strObs, int intFil, int intCol ){
 Maestros.ZafMae07.ZafMae07_01 obj1 = new  Maestros.ZafMae07.ZafMae07_01(JOptionPane.getFrameForComponent(this), true , strObs );
 obj1.show();
 if(obj1.getAceptar())
   tblDat.setValueAt( obj1.getObser(), intFil, intCol );
 obj1=null;
}

     public void Configura_ventana_consulta(){
        
        configurarVenConBodUsr();
        configurarVenConClientes();
        configurarVenConVendedor();
        cargarBodPre();
        configurarFrm();
        
        
    }



private boolean configurarVenConBodUsr() {
boolean blnRes=true;
try {
    ArrayList arlCam=new ArrayList();
    arlCam.add("a.co_bod");
    arlCam.add("a.tx_nom");

    ArrayList arlAli=new ArrayList();
    arlAli.add("Código");
    arlAli.add("Nom.Bod");

    ArrayList arlAncCol=new ArrayList();
    arlAncCol.add("80");
    arlAncCol.add("350");

    //Armar la sentencia SQL.   a7.nd_stkTot,
    String Str_Sql="";

    //Si es el usuario Administrador (Código=1) tiene acceso a todas las bodegas.
            if (objParSis.getCodigoUsuario()==1)
            {
                //Armar la sentencia SQL.
                Str_Sql="SELECT co_bod, tx_nom FROM ( SELECT a2.co_bod, a2.tx_nom "+
                " FROM tbm_emp AS a1 "+
                " INNER JOIN tbm_bod AS a2 ON (a1.co_emp=a2.co_emp) "+
                " WHERE a1.co_emp=" + objParSis.getCodigoEmpresaGrupo()+" "+
                " ORDER BY a1.co_emp, a2.co_bod  ) as a ";
             }
            else
            {
                //Armar la sentencia SQL.

                Str_Sql="SELECT co_bod, tx_nom FROM ( " +
                " select a2.co_bodgrp as co_bod,  a1.tx_nom from tbr_bodlocprgusr as a " +
                " inner join tbr_bodEmpBodGrp as a2 on (a2.co_emp=a.co_emp and a2.co_bod=a.co_bod) "+
                " inner join tbm_bod as a1 on (a1.co_emp=a2.co_empgrp and a1.co_bod=a2.co_bodgrp) " +
                " where a.co_emp="+objParSis.getCodigoEmpresa()+" AND a.co_loc="+objParSis.getCodigoLocal()+" " +
                " and a.co_usr="+objParSis.getCodigoUsuario()+" and a.co_mnu="+objParSis.getCodigoMenu()+"  " +
                " ) as a";

            }

    objVenConBodUsr=new ZafVenCon(JOptionPane.getFrameForComponent(this), objParSis, objParSis.getNombreMenu(), Str_Sql, arlCam, arlAli, arlAncCol);
    arlCam=null;
    arlAli=null;
    arlAncCol=null;

    objVenConBodUsr.setConfiguracionColumna(1, javax.swing.JLabel.CENTER);
}
catch (Exception e) {
    blnRes=false;
    objUti.mostrarMsgErr_F1(this, e);
}
return blnRes;
}

private boolean configurarVenConClientes() {
    boolean blnRes=true;
    try {
        ArrayList arlCam=new ArrayList();
        arlCam.add("a.co_cli");
        arlCam.add("a.tx_nom");
        arlCam.add("a.tx_dir");
        arlCam.add("a.tx_tel");
        arlCam.add("a.tx_ide");

        ArrayList arlAli=new ArrayList();
        arlAli.add("Código");
        arlAli.add("Nom.Cli.");
        arlAli.add("Dirección");
        arlAli.add("Telefono");
        arlAli.add("RUC/CI");

        ArrayList arlAncCol=new ArrayList();
        arlAncCol.add("50");
        arlAncCol.add("180");
        arlAncCol.add("120");
        arlAncCol.add("80");
        arlAncCol.add("100");

        //Armar la sentencia SQL.
        String  strSQL;
        //strSQL="SELECT a.co_cli, a.tx_nom, a.tx_dir, a.tx_tel, a.tx_ide FROM tbm_cli as a " +
        //" WHERE a.co_emp="+objZafParSis.getCodigoEmpresa()+" AND a.st_cli='S' order by a.tx_nom ";

        strSQL="SELECT a.co_cli, a.tx_nom, a.tx_dir, a.tx_tel, a.tx_ide FROM tbr_cliloc as a1 " +
        " INNER JOIN tbm_cli as a ON(a.co_emp=a1.co_emp AND a.co_cli=a1.co_cli) " +
        " WHERE a1.co_emp="+objParSis.getCodigoEmpresa()+" AND a1.co_loc="+objParSis.getCodigoLocal()+" " +
        " AND  a.st_reg NOT IN('I','T')  order by a.tx_nom ";

        objVenConCLi=new ZafVenCon(JOptionPane.getFrameForComponent(this), objParSis, objParSis.getNombreMenu() , strSQL, arlCam, arlAli, arlAncCol );
        arlCam=null;
        arlAli=null;
        arlAncCol=null;

    }catch (Exception e) {  blnRes=false;  objUti.mostrarMsgErr_F1(this, e); }
   return blnRes;
}

private boolean configurarVenConVendedor() {
    boolean blnRes=true;
    try {
        ArrayList arlCam=new ArrayList();
        arlCam.add("a.co_usr");
        arlCam.add("a.tx_nom");
        ArrayList arlAli=new ArrayList();
        arlAli.add("Código");
        arlAli.add("Nombre.");
        ArrayList arlAncCol=new ArrayList();
        arlAncCol.add("70");
        arlAncCol.add("470");
        //Armar la sentencia SQL.
        String  strSQL="";
        strSQL="select a.co_usr, a.tx_nom  from tbr_usremp as b" +
        " inner join tbm_usr as a on (a.co_usr=b.co_usr) " +
        " where b.co_emp="+objParSis.getCodigoEmpresa()+" and b.st_ven='S' and a.st_reg not in ('I')  order by a.tx_nom";

        objVenConVen=new ZafVenCon(JOptionPane.getFrameForComponent(this), objParSis, objParSis.getNombreMenu() , strSQL, arlCam, arlAli, arlAncCol);
        arlCam=null;
        arlAli=null;
        arlAncCol=null;

    }catch (Exception e) {  blnRes=false; objUti.mostrarMsgErr_F1(this, e); }
   return blnRes;
 }





public void cargarBodPre(){
  java.sql.Connection  conn;
  java.sql.Statement stmLoc;
  java.sql.ResultSet rstLoc;
  String strSql="";
  try{
     conn =  java.sql.DriverManager.getConnection(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos());
     if(conn!=null){
        stmLoc=conn.createStatement();

        strSql="SELECT co_bod, tx_nom FROM ( " +
        " select a2.co_bodgrp as co_bod,  a1.tx_nom from tbr_bodlocprgusr as a " +
        " inner join tbr_bodEmpBodGrp as a2 on (a2.co_emp=a.co_emp and a2.co_bod=a.co_bod) "+
        " inner join tbm_bod as a1 on (a1.co_emp=a2.co_empgrp and a1.co_bod=a2.co_bodgrp) " +
        " where a.co_emp="+objParSis.getCodigoEmpresa()+" AND a.co_loc="+objParSis.getCodigoLocal()+" " +
        " and a.co_usr="+objParSis.getCodigoUsuario()+" and a.co_mnu="+objParSis.getCodigoMenu()+"  and a.st_reg='S' " +
        " ) as a";

        //System.out.println(""+ strSql);
        rstLoc=stmLoc.executeQuery(strSql);
        if(rstLoc.next()){
            txtCodBod.setText(rstLoc.getString("co_bod"));
            txtNomBod.setText(rstLoc.getString("tx_nom"));
            strCodBod=rstLoc.getString("co_bod");
            strNomBod=rstLoc.getString("tx_nom");
        }
        rstLoc.close();
        stmLoc.close();
        stmLoc=null;
        rstLoc=null;
        conn.close();
        conn=null;
  }}catch(java.sql.SQLException e)  {   objUti.mostrarMsgErr_F1(this, e);  }
    catch(Exception Evt)  {  objUti.mostrarMsgErr_F1(this, Evt);  }
}








    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panTit = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        panCen = new javax.swing.JPanel();
        tabFrm = new javax.swing.JTabbedPane();
        panFilCab = new javax.swing.JPanel();
        lblBod = new javax.swing.JLabel();
        txtCodBod = new javax.swing.JTextField();
        txtNomBod = new javax.swing.JTextField();
        butBusBod = new javax.swing.JButton();
        optFil = new javax.swing.JRadioButton();
        optTod = new javax.swing.JRadioButton();
        lblCli = new javax.swing.JLabel();
        lblCli1 = new javax.swing.JLabel();
        txtCodVen = new javax.swing.JTextField();
        txtCodCli = new javax.swing.JTextField();
        txtNomCli = new javax.swing.JTextField();
        txtNomVen = new javax.swing.JTextField();
        butVen = new javax.swing.JButton();
        butcli = new javax.swing.JButton();
        chkGuiAut = new javax.swing.JCheckBox();
        panRep = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panSur = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        lblTit.setText("jLabel1");
        panTit.add(lblTit);

        getContentPane().add(panTit, java.awt.BorderLayout.NORTH);

        panCen.setLayout(new java.awt.BorderLayout());

        panFilCab.setLayout(null);

        lblBod.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblBod.setText("Bodega:");
        panFilCab.add(lblBod);
        lblBod.setBounds(10, 10, 70, 20);

        txtCodBod.setFont(new java.awt.Font("SansSerif", 0, 11));
        txtCodBod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodBodActionPerformed(evt);
            }
        });
        txtCodBod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodBodFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodBodFocusLost(evt);
            }
        });
        panFilCab.add(txtCodBod);
        txtCodBod.setBounds(70, 10, 70, 20);

        txtNomBod.setFont(new java.awt.Font("SansSerif", 0, 11));
        txtNomBod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomBodActionPerformed(evt);
            }
        });
        txtNomBod.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomBodFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomBodFocusLost(evt);
            }
        });
        panFilCab.add(txtNomBod);
        txtNomBod.setBounds(140, 10, 230, 20);

        butBusBod.setText("jButton2");
        butBusBod.setPreferredSize(new java.awt.Dimension(20, 20));
        butBusBod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBusBodActionPerformed(evt);
            }
        });
        panFilCab.add(butBusBod);
        butBusBod.setBounds(370, 10, 20, 20);

        buttonGroup1.add(optFil);
        optFil.setText("Sólo las guias que cumplan el criterio seleccionado");
        optFil.setActionCommand("Sólo las guias que cumplan el criterio seleccionado");
        optFil.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optFilItemStateChanged(evt);
            }
        });
        panFilCab.add(optFil);
        optFil.setBounds(5, 50, 400, 20);

        buttonGroup1.add(optTod);
        optTod.setSelected(true);
        optTod.setText("Todos las guias");
        optTod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optTodItemStateChanged(evt);
            }
        });
        optTod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTodActionPerformed(evt);
            }
        });
        panFilCab.add(optTod);
        optTod.setBounds(5, 30, 400, 20);

        lblCli.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblCli.setText("Cliente/Proveedor:");
        panFilCab.add(lblCli);
        lblCli.setBounds(30, 70, 100, 20);

        lblCli1.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblCli1.setText("Vend / Comp:");
        panFilCab.add(lblCli1);
        lblCli1.setBounds(30, 90, 100, 20);

        txtCodVen.setFont(new java.awt.Font("SansSerif", 0, 11));
        txtCodVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodVenActionPerformed(evt);
            }
        });
        txtCodVen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodVenFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodVenFocusLost(evt);
            }
        });
        panFilCab.add(txtCodVen);
        txtCodVen.setBounds(130, 90, 50, 20);

        txtCodCli.setFont(new java.awt.Font("SansSerif", 0, 11));
        txtCodCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodCliActionPerformed(evt);
            }
        });
        txtCodCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodCliFocusLost(evt);
            }
        });
        panFilCab.add(txtCodCli);
        txtCodCli.setBounds(130, 70, 50, 20);

        txtNomCli.setFont(new java.awt.Font("SansSerif", 0, 11));
        txtNomCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomCliActionPerformed(evt);
            }
        });
        txtNomCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomCliFocusLost(evt);
            }
        });
        panFilCab.add(txtNomCli);
        txtNomCli.setBounds(180, 70, 280, 20);

        txtNomVen.setFont(new java.awt.Font("SansSerif", 0, 11));
        txtNomVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomVenActionPerformed(evt);
            }
        });
        txtNomVen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomVenFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomVenFocusLost(evt);
            }
        });
        panFilCab.add(txtNomVen);
        txtNomVen.setBounds(180, 90, 280, 20);

        butVen.setFont(new java.awt.Font("SansSerif", 0, 11));
        butVen.setText("...");
        butVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butVenActionPerformed(evt);
            }
        });
        panFilCab.add(butVen);
        butVen.setBounds(460, 90, 20, 20);

        butcli.setFont(new java.awt.Font("SansSerif", 0, 11));
        butcli.setText("...");
        butcli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butcliActionPerformed(evt);
            }
        });
        panFilCab.add(butcli);
        butcli.setBounds(460, 70, 20, 20);

        chkGuiAut.setText("Mostrar las guías de remisión que ya fueron autorizadas");
        chkGuiAut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkGuiAutActionPerformed(evt);
            }
        });
        panFilCab.add(chkGuiAut);
        chkGuiAut.setBounds(10, 200, 450, 23);

        tabFrm.addTab("Filtro", panFilCab);

        panRep.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnDat.setViewportView(tblDat);

        panRep.add(spnDat, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Reporte", panRep);

        panCen.add(tabFrm, java.awt.BorderLayout.CENTER);

        getContentPane().add(panCen, java.awt.BorderLayout.CENTER);

        panSur.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        jButton1.setText("Guardar");
        jButton1.setPreferredSize(new java.awt.Dimension(92, 23));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panBot.add(jButton1);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panSur.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panSur.add(panBarEst, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panSur, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents



       private void MensajeInf(String strMensaje){
        //JOptionPane obj =new JOptionPane();
        //String strTit;
        //strTit="Mensaje del sistema Zafiro";
        JOptionPane.showMessageDialog(this,strMensaje,strTit,JOptionPane.INFORMATION_MESSAGE);
      }


    private class ZafThreadGUI extends Thread {
        @Override
        public void run() {


          if(chkGuiAut.isSelected()){

            if (!cargarGuiAut( sqlConFil()))
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
          }else{

            if (!cargarDetReg( sqlConFil()))
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }

          }


            //Establecer el foco en el JTable sólo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }


          
private String sqlConFil(){
   String sqlFil="";


    if(optFil.isSelected()){

        if(!txtCodCli.getText().equals(""))
            sqlFil+=" AND a.co_clides="+txtCodCli.getText();

        if(!txtNomCli.getText().equals(""))
            sqlFil+=" AND a.tx_nomclides lIKE '"+txtNomCli.getText()+"'";

        if(!txtCodVen.getText().equals(""))
            sqlFil+=" AND a.co_ven="+txtCodVen.getText();
    

       if(objSelFec.isCheckBoxChecked() ){
         switch (objSelFec.getTipoSeleccion())
         {
                    case 0: //Búsqueda por rangos
                        sqlFil+=" AND a.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 1: //Fechas menores o iguales que "Hasta".
                        sqlFil+=" AND a.fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 2: //Fechas mayores o iguales que "Desde".
                        sqlFil+=" AND a.fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 3: //Todo.
                        break;
        }}
    }
      return sqlFil;
    }

  

/**
* Esta función permite consultar los registros de acuerdo al criterio seleccionado.
* @return true: Si se pudo consultar los registros.
* <BR>false: En el caso contrario.
*/
private boolean cargarDetReg(String strFil){
 boolean blnRes=true;
 java.sql.Connection conn;
 java.sql.Statement stm;
 java.sql.ResultSet rst;
 int intNumTotReg=0, i=0;
 String strSql="", strSQL="";
 try{
    butCon.setText("Detener");
    lblMsgSis.setText("Obteniendo datos...");
    conn=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
    if (conn!=null){
        stm=conn.createStatement();
                //Obtener la condición.


        String Str_Sql="";
        if(objParSis.getCodigoUsuario()==1){
           Str_Sql="Select a.co_tipdoc from tbr_tipdocprg as b " +
           " inner join tbm_cabtipdoc as a on (b.co_emp = a.co_emp and b.co_loc = a.co_loc and b.co_tipdoc = a.co_tipdoc)" +
                " where   b.co_emp="+objParSis.getCodigoEmpresa()+" and " +
                " b.co_loc = " + objParSis.getCodigoLocal()   + " and " +
                " b.co_mnu = "+objParSis.getCodigoMenu();
         }else {
                Str_Sql ="SELECT a.co_tipdoc "+
                " FROM tbr_tipDocUsr AS a1 " +
                " inner join  tbm_cabTipDoc AS a ON (a.co_emp=a1.co_Emp and a.co_loc=a1.co_loc and a.co_tipdoc=a1.co_tipdoc)"+
                " WHERE "+
                "  a1.co_emp=" + objParSis.getCodigoEmpresa()+""+
                " AND a1.co_loc=" + objParSis.getCodigoLocal()+""+
                " AND a1.co_mnu=" + objParSis.getCodigoMenu()+""+
                " AND a1.co_usr=" + objParSis.getCodigoUsuario();
         }

       strSql="SELECT  a.co_emp, a.co_loc, a.co_tipdoc, a7.tx_descor, a.co_doc , a.ne_numdoc, a.fe_doc, a.co_clides , a.tx_nomclides, a.st_tieguisec  " +
       " , a.tx_datdocoriguirem  FROM tbm_cabguirem as a  " +
       " INNER JOIN tbr_bodEmpBodGrp AS a6 ON (a6.co_emp=a.co_emp AND a6.co_bod=a.co_ptopar) " +
       " INNER JOIN tbm_cabtipdoc as a7 on (a7.co_emp = a.co_emp and a7.co_loc = a.co_loc and a7.co_tipdoc = a.co_tipdoc ) "+
       " WHERE  a.st_reg not in('I','E') and a.ne_numdoc=0  and (st_aut='P' or st_aut is null) and (a.ne_numorddes is null or a.ne_numorddes=0) and a.st_tipguirem='P'  and a.co_tipdoc in ( "+Str_Sql+" )  " +
       " AND ( a6.co_empGrp="+objParSis.getCodigoEmpresaGrupo()+" AND a6.co_bodGrp=( "+txtCodBod.getText()+" ) ) " +
       " "+strFil+"    ";


       //System.out.println("---->  "+ objParSis.getCodigoMenu() );

        strSQL="SELECT COUNT(*) FROM ( "+strSql+" ) AS X ";
        intNumTotReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
        if (intNumTotReg==-1)
           return false;

        strSQL="SELECT * FROM ( "+strSql+" ) AS X  ORDER BY ne_numdoc ";

        System.out.println("ZafCom06.cargarDetReg: " + strSQL );
        rst=stm.executeQuery(strSQL);
        vecDat.clear();
        lblMsgSis.setText("Cargando datos...");
        pgrSis.setMinimum(0);
        pgrSis.setMaximum(intNumTotReg);
        pgrSis.setValue(0);
        i=0;
        while (rst.next()) {
            if (blnCon)
            {

           if(_getVerificarNumFac(conn, rst.getInt("co_emp"), rst.getInt("co_loc"), rst.getInt("co_tipdoc") ,rst.getInt("co_doc") ) ){
           // if( impGuiaRem(conn, rst.getInt("co_emp"), rst.getInt("co_loc"), rst.getInt("co_tipdoc") ,rst.getInt("co_doc") ) ){

            vecReg=new Vector();
            vecReg.add(INT_TBL_LIN,"");
            vecReg.add(INT_TBL_CODEMP, rst.getString("co_emp"));
            vecReg.add(INT_TBL_CODLOC, rst.getString("co_loc"));
            vecReg.add(INT_TBL_CODTIPDOC, rst.getString("co_tipdoc"));
            vecReg.add(INT_TBL_DESCTIDOC,  rst.getString("tx_descor"));
            vecReg.add(INT_TBL_CODDOC, rst.getString("co_doc"));
            vecReg.add(INT_TBL_NUMDOC, ""+intNumFac ) ;  //rst.getString("ne_numdoc"));
            vecReg.add(INT_TBL_NUMDOCORI, rst.getString("tx_datdocoriguirem"));
            vecReg.add(INT_TBL_FECDOC, rst.getString("fe_doc"));
            vecReg.add(INT_TBL_CODCLI, rst.getString("co_clides"));
            vecReg.add(INT_TBL_NOMCLI, rst.getString("tx_nomclides"));

            if( rst.getString("st_tieguisec").equals("S") )
             vecReg.add(INT_TBL_CHKREP, true);
            else vecReg.add(INT_TBL_CHKREP, false);

            vecReg.add(INT_TBL_FECAUT, "");

            vecReg.add(INT_TBL_OBSAUT, "");
            vecReg.add(INT_TBL_BOBAUT, "...");
            vecReg.add(INT_TBL_OBSIMP, "");
            vecReg.add(INT_TBL_BOBIMP, "...");

          
            vecDat.add(vecReg);
            i++;
            pgrSis.setValue(i);
          } //}
        }
        else
        {
            break;
        }
    }
    rst.close();
    rst=null;
    stm.close();
    stm=null;
    conn.close();
    conn=null;
    //Asignar vectores al modelo.
    objTblMod.setData(vecDat);
    tblDat.setModel(objTblMod);
    vecDat.clear();


    if (intNumTotReg==tblDat.getRowCount())
        lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros.");
    else
        lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros pero sólo se procesaron " + tblDat.getRowCount() + ".");
    pgrSis.setValue(0);
    butCon.setText("Consultar");
}
}
catch (java.sql.SQLException e)
{
blnRes=false;
objUti.mostrarMsgErr_F1(this, e);
}
catch (Exception e)
{
blnRes=false;
objUti.mostrarMsgErr_F1(this, e);
}
return blnRes;
}



/**
* Esta función permite consultar las guias autorizadas de acuerdo al criterio seleccionado.
* @return true: Si se pudo consultar los registros.
* <BR>false: En el caso contrario.
*/
private boolean cargarGuiAut(String strFil){
 boolean blnRes=true;
 java.sql.Connection conn;
 java.sql.Statement stm;
 java.sql.ResultSet rst;
 int intNumTotReg=0, i=0;
 String strSql="", strSQL="";
 try{
    butCon.setText("Detener");
    lblMsgSis.setText("Obteniendo datos...");
    conn=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
    if (conn!=null){
        stm=conn.createStatement();
                //Obtener la condición.


        String Str_Sql="";
        if(objParSis.getCodigoUsuario()==1){
           Str_Sql="Select a.co_tipdoc from tbr_tipdocprg as b " +
           " inner join tbm_cabtipdoc as a on (b.co_emp = a.co_emp and b.co_loc = a.co_loc and b.co_tipdoc = a.co_tipdoc)" +
                " where   b.co_emp="+objParSis.getCodigoEmpresa()+" and " +
                " b.co_loc = " + objParSis.getCodigoLocal()   + " and " +
                " b.co_mnu = "+objParSis.getCodigoMenu();
         }else {
                Str_Sql ="SELECT a.co_tipdoc "+
                " FROM tbr_tipDocUsr AS a1 " +
                " inner join  tbm_cabTipDoc AS a ON (a.co_emp=a1.co_Emp and a.co_loc=a1.co_loc and a.co_tipdoc=a1.co_tipdoc)"+
                " WHERE "+
                "  a1.co_emp=" + objParSis.getCodigoEmpresa()+""+
                " AND a1.co_loc=" + objParSis.getCodigoLocal()+""+
                " AND a1.co_mnu=" + objParSis.getCodigoMenu()+""+
                " AND a1.co_usr=" + objParSis.getCodigoUsuario();
         }

       strSql="SELECT a.fe_aut, a.tx_obsaut, a.tx_obsimpaut, a.co_emp, a.co_loc, a.co_tipdoc, a7.tx_descor, a.co_doc , a.ne_numdoc, a.fe_doc, a.co_clides , a.tx_nomclides, a.st_tieguisec  " +
       " , a.tx_datdocoriguirem  FROM tbm_cabguirem as a  " +
       " INNER JOIN tbr_bodEmpBodGrp AS a6 ON (a6.co_emp=a.co_emp AND a6.co_bod=a.co_ptopar) " +
       " INNER JOIN tbm_cabtipdoc as a7 on (a7.co_emp = a.co_emp and a7.co_loc = a.co_loc and a7.co_tipdoc = a.co_tipdoc ) "+
       " WHERE  a.st_reg not in('I','E')  and st_aut='A'  and a.st_tipguirem='P'  and a.co_tipdoc in ( "+Str_Sql+" )  " +
       " AND ( a6.co_empGrp="+objParSis.getCodigoEmpresaGrupo()+" AND a6.co_bodGrp=( "+txtCodBod.getText()+" ) ) " +
       " "+strFil+"    ";


       //System.out.println("---->  "+ objParSis.getCodigoMenu() );

        strSQL="SELECT COUNT(*) FROM ( "+strSql+" ) AS X ";
        intNumTotReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
        if (intNumTotReg==-1)
           return false;

        strSQL="SELECT * FROM ( "+strSql+" ) AS X  ORDER BY ne_numdoc ";

         //System.out.println("-->"+ strSQL );
        rst=stm.executeQuery(strSQL);
        vecDat.clear();
        lblMsgSis.setText("Cargando datos...");
        pgrSis.setMinimum(0);
        pgrSis.setMaximum(intNumTotReg);
        pgrSis.setValue(0);
        i=0;
        while (rst.next())
        {
            if (blnCon)
            {

         
            vecReg=new Vector();
            vecReg.add(INT_TBL_LIN,"");
            vecReg.add(INT_TBL_CODEMP, rst.getString("co_emp"));
            vecReg.add(INT_TBL_CODLOC, rst.getString("co_loc"));
            vecReg.add(INT_TBL_CODTIPDOC, rst.getString("co_tipdoc"));
            vecReg.add(INT_TBL_DESCTIDOC,  rst.getString("tx_descor"));
            vecReg.add(INT_TBL_CODDOC, rst.getString("co_doc"));
            vecReg.add(INT_TBL_NUMDOC, rst.getString("ne_numdoc"));
            vecReg.add(INT_TBL_NUMDOCORI, rst.getString("tx_datdocoriguirem"));
            vecReg.add(INT_TBL_FECDOC, rst.getString("fe_doc"));
            vecReg.add(INT_TBL_CODCLI, rst.getString("co_clides"));
            vecReg.add(INT_TBL_NOMCLI, rst.getString("tx_nomclides"));

            if( rst.getString("st_tieguisec").equals("S") )
             vecReg.add(INT_TBL_CHKREP, true);
            else vecReg.add(INT_TBL_CHKREP, false);

            vecReg.add(INT_TBL_FECAUT, rst.getString("fe_aut"));

            vecReg.add(INT_TBL_OBSAUT, rst.getString("tx_obsaut"));
            vecReg.add(INT_TBL_BOBAUT, "...");
            vecReg.add(INT_TBL_OBSIMP, rst.getString("tx_obsimpaut"));
            vecReg.add(INT_TBL_BOBIMP, "...");


            vecDat.add(vecReg);
            i++;
            pgrSis.setValue(i);
         
        }
        else
        {
            break;
        }
    }
    rst.close();
    rst=null;
    stm.close();
    stm=null;
    conn.close();
    conn=null;
    //Asignar vectores al modelo.
    objTblMod.setData(vecDat);
    tblDat.setModel(objTblMod);
    vecDat.clear();


    if (intNumTotReg==tblDat.getRowCount())
        lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros.");
    else
        lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros pero sólo se procesaron " + tblDat.getRowCount() + ".");
    pgrSis.setValue(0);
    butCon.setText("Consultar");
}
}
catch (java.sql.SQLException e)
{
blnRes=false;
objUti.mostrarMsgErr_F1(this, e);
}
catch (Exception e)
{
blnRes=false;
objUti.mostrarMsgErr_F1(this, e);
}
return blnRes;
}




private boolean impGuiaRem(java.sql.Connection conn, int intCodEmp, int intCodLoc, int intCodTipDoc, int intCodDoc ){
  boolean blnRes=false;

    if(_getVerificarPagCont(conn, intCodEmp, intCodLoc, intCodTipDoc, intCodDoc )){
          // objlbl.setText("Pago Pendiente (Venta de Contado )");
          blnRes=true;
     }else if(_getVerificarPagChq(conn, intCodEmp, intCodLoc, intCodTipDoc, intCodDoc )){
           // objlbl.setText("Cheque Pendiente (Cheque a Fecha )");
           blnRes=true;
     }
  return blnRes;
}

private boolean _getVerificarPagCont(java.sql.Connection conn, int intCodEmp, int intCodLoc, int intCodTipDoc, int intCodDoc ){
  boolean blnRes=false;
  String strSql="";
  java.sql.Statement stmLoc;
  java.sql.ResultSet rstLoc;
  try{
   if(conn!=null){
     stmLoc=conn.createStatement();

       strSql="select  a1.co_doc from ( " +
       " select co_emprel, co_locrel, co_tipdocrel, co_docrel  from tbm_detguirem " +
       " where  co_emp="+intCodEmp+" and co_loc="+intCodLoc+" and co_tipdoc="+intCodTipDoc+" and co_doc="+intCodDoc+"  " +
       " group by co_emprel, co_locrel, co_tipdocrel, co_docrel  " +
       " ) as a " +
       " inner join tbm_pagmovinv as a1 on (a1.co_emp=a.co_emprel and a1.co_loc=a.co_locrel and a1.co_tipdoc=a.co_tipdocrel and a1.co_doc=a.co_docrel) " +
       " WHERE a1.st_reg in ('A','C') " +
       " AND (a1.nd_porret=0 or a1.nd_porret is null ) and (a1.ne_diacre=0 or a1.ne_diacre is null)  AND (a1.nd_abo+a1.mo_pag) < 0  ";
       rstLoc=stmLoc.executeQuery(strSql);
       if(rstLoc.next()){
           blnRes=true;
       }
      rstLoc.close();
      rstLoc=null;
      stmLoc.close();
      stmLoc=null;
  }}catch(java.sql.SQLException Evt) {  blnRes=false; objUti.mostrarMsgErr_F1(this, Evt);  }
    catch(Exception Evt) { blnRes=false; objUti.mostrarMsgErr_F1(this, Evt); }
 return blnRes;
}

private boolean _getVerificarPagChq(java.sql.Connection conn, int intCodEmp, int intCodLoc, int intCodTipDoc, int intCodDoc ){
  boolean blnRes=false;
  String strSql="";
  java.sql.Statement stmLoc;
  java.sql.ResultSet rstLoc;
  try{
   if(conn!=null){
     stmLoc=conn.createStatement();

       strSql="select  a1.co_doc from ( " +
       " select co_emprel, co_locrel, co_tipdocrel, co_docrel  from tbm_detguirem " +
       " where  co_emp="+intCodEmp+" and co_loc="+intCodLoc+" and co_tipdoc="+intCodTipDoc+" and co_doc="+intCodDoc+"  " +
       " group by co_emprel, co_locrel, co_tipdocrel, co_docrel  " +
       " ) as a " +
       " inner join tbm_cabmovinv as a1 on (a1.co_emp=a.co_emprel and a1.co_loc=a.co_locrel and a1.co_tipdoc=a.co_tipdocrel and a1.co_doc=a.co_docrel) " +
       " INNER JOIN tbm_pagMovInv AS a2 ON (a2.co_emp=a1.co_emp AND a2.co_loc=a1.co_loc AND a2.co_tipDoc=a1.co_tipDoc AND a2.co_doc=a1.co_doc) " +
       " INNER JOIN tbm_cli AS cli ON (cli.co_emp=a1.co_emp and cli.co_cli=a1.co_cli)  " +
       " WHERE a1.st_reg NOT IN ('I','E') AND a2.st_reg IN ('A','C') AND a2.st_sop='S' " +
       " AND CASE WHEN (a2.mo_pag+a2.nd_abo) < 0 THEN  a2.st_entsop='N' END  AND a1.fe_doc+cli.ne_diagrachqfec <= "+objParSis.getFuncionFechaHoraBaseDatos()+" ";
       rstLoc=stmLoc.executeQuery(strSql);
       if(rstLoc.next()){
           blnRes=true;
       }
      rstLoc.close();
      rstLoc=null;
      stmLoc.close();
      stmLoc=null;
  }}catch(java.sql.SQLException Evt) {  blnRes=false; objUti.mostrarMsgErr_F1(this, Evt);  }
    catch(Exception Evt) { blnRes=false; objUti.mostrarMsgErr_F1(this, Evt); }
 return blnRes;
}



int intNumFac=0;
private boolean _getVerificarNumFac(java.sql.Connection conn, int intCodEmp, int intCodLoc, int intCodTipDoc, int intCodDoc ){
  boolean blnRes=false;
  String strSql="";
  java.sql.Statement stmLoc;
  java.sql.ResultSet rstLoc;
  try{
   if(conn!=null){
     stmLoc=conn.createStatement();
       intNumFac=0;
       strSql="select a1.ne_numdoc from tbm_detguirem as a " +
       " inner join tbm_cabmovinv as a1 on (a1.co_emp=a.co_emprel and a1.co_loc=a.co_locrel and a1.co_tipdoc=a.co_tipdocrel and a1.co_doc=a.co_docrel ) " +
       " where a.co_emp="+intCodEmp+" and a.co_loc="+intCodLoc+" and a.co_tipdoc="+intCodTipDoc+" and a.co_doc= "+intCodDoc+"    ";
       rstLoc=stmLoc.executeQuery(strSql);
       if(rstLoc.next()){
           intNumFac=rstLoc.getInt("ne_numdoc");
       }

       if( intNumFac != 0 )
           blnRes=true;

      rstLoc.close();
      rstLoc=null;
      stmLoc.close();
      stmLoc=null;
  }}catch(java.sql.SQLException Evt) {  blnRes=false; objUti.mostrarMsgErr_F1(this, Evt);  }
    catch(Exception Evt) { blnRes=false; objUti.mostrarMsgErr_F1(this, Evt); }
 return blnRes;
}






       


    private void txtCodBodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodBodActionPerformed
        // TODO add your handling code here:
        txtCodBod.transferFocus();
}//GEN-LAST:event_txtCodBodActionPerformed

    private void txtCodBodFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodBodFocusGained
        // TODO add your handling code here:
        strCodBod=txtCodBod.getText();
        txtCodBod.selectAll();
}//GEN-LAST:event_txtCodBodFocusGained

    private void txtCodBodFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodBodFocusLost
        // TODO add your handling code here:
        if (!txtCodBod.getText().equalsIgnoreCase(strCodBod)) {
            if (txtCodBod.getText().equals("")) {
                txtCodBod.setText("");
                txtNomBod.setText("");
            }else
                BuscarBod("a.co_bod",txtCodBod.getText(),0);
        }else
            txtCodBod.setText(strCodBod);
}//GEN-LAST:event_txtCodBodFocusLost

    private void txtNomBodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomBodActionPerformed
        // TODO add your handling code here:
        txtNomBod.transferFocus();
}//GEN-LAST:event_txtNomBodActionPerformed

    private void txtNomBodFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomBodFocusGained
        // TODO add your handling code here:
        strNomBod=txtNomBod.getText();
        txtNomBod.selectAll();
}//GEN-LAST:event_txtNomBodFocusGained

    private void txtNomBodFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomBodFocusLost
        // TODO add your handling code here:
        if (!txtNomBod.getText().equalsIgnoreCase(strNomBod)) {
            if (txtNomBod.getText().equals("")) {
                txtCodBod.setText("");
                txtNomBod.setText("");
            }else
                BuscarBod("a.tx_nom",txtNomBod.getText(),1);
        }else
            txtNomBod.setText(strNomBod);
}//GEN-LAST:event_txtNomBodFocusLost

    private void butBusBodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBusBodActionPerformed
        // TODO add your handling code here:
        objVenConBodUsr.setTitle("Listado de Bodegas");
        objVenConBodUsr.setCampoBusqueda(1);
        objVenConBodUsr.show();
        if (objVenConBodUsr.getSelectedButton()==ZafVenCon.INT_BUT_ACE) {
            txtCodBod.setText(objVenConBodUsr.getValueAt(1));
            txtNomBod.setText(objVenConBodUsr.getValueAt(2));
            strCodBod=objVenConBodUsr.getValueAt(1);
            strNomBod=objVenConBodUsr.getValueAt(2);
        }
}//GEN-LAST:event_butBusBodActionPerformed

    private void optFilItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optFilItemStateChanged
        // TODO add your handling code here:

        

    }//GEN-LAST:event_optFilItemStateChanged

    private void optTodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optTodItemStateChanged
        if (optTod.isSelected()) {
           

            strCodCli="";  strDesCli="";
            strCodVen="";  strDesVen="";

            txtCodCli.setText("");
            txtNomCli.setText("");
            txtCodVen.setText("");
            txtNomVen.setText("");

            
        }
}//GEN-LAST:event_optTodItemStateChanged

    private void optTodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTodActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_optTodActionPerformed

    private void txtCodVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodVenActionPerformed
        // TODO add your handling code here:
        txtCodVen.transferFocus();
}//GEN-LAST:event_txtCodVenActionPerformed

    private void txtCodVenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodVenFocusGained
        // TODO add your handling code here:
        strCodVen=txtCodVen.getText();
        txtCodVen.selectAll();
}//GEN-LAST:event_txtCodVenFocusGained

    private void txtCodVenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodVenFocusLost
        // TODO add your handling code here:
        if (!txtCodVen.getText().equalsIgnoreCase(strCodVen)) {
            if(txtCodVen.getText().equals("")) {
                txtCodVen.setText("");
                txtNomVen.setText("");
            }else
                BuscarVendedor("a.co_usr",txtCodVen.getText(),0);
        }else
            txtCodVen.setText(strCodVen);
}//GEN-LAST:event_txtCodVenFocusLost

    private void txtCodCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodCliActionPerformed
        // TODO add your handling code here:
        txtCodCli.transferFocus();
}//GEN-LAST:event_txtCodCliActionPerformed

    private void txtCodCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCliFocusGained
        // TODO add your handling code here:
        strCodCli=txtCodCli.getText();
        txtCodCli.selectAll();
}//GEN-LAST:event_txtCodCliFocusGained

    private void txtCodCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCliFocusLost
        // TODO add your handling code here:
        if (!txtCodCli.getText().equalsIgnoreCase(strCodCli)) {
            if(txtCodCli.getText().equals("")) {
                txtCodCli.setText("");
                txtNomCli.setText("");
            }else
                BuscarCliente("a.co_cli",txtCodCli.getText(),0);
        }else
            txtCodCli.setText(strCodCli);
}//GEN-LAST:event_txtCodCliFocusLost

    private void txtNomCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomCliActionPerformed
        // TODO add your handling code here:
        txtNomCli.transferFocus();
}//GEN-LAST:event_txtNomCliActionPerformed

    private void txtNomCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliFocusGained
        // TODO add your handling code here:
        strDesCli=txtNomCli.getText();
        txtNomCli.selectAll();
}//GEN-LAST:event_txtNomCliFocusGained

    private void txtNomCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliFocusLost
        // TODO add your handling code here:
        if (!txtNomCli.getText().equalsIgnoreCase(strDesCli)) {
            if (txtNomCli.getText().equals("")) {
                txtCodCli.setText("");
                txtNomCli.setText("");
            }else
                BuscarCliente("a.tx_nom",txtNomCli.getText(),1);
        }else
            txtNomCli.setText(strDesCli);
}//GEN-LAST:event_txtNomCliFocusLost

    private void txtNomVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomVenActionPerformed
        // TODO add your handling code here:
        txtNomVen.transferFocus();
}//GEN-LAST:event_txtNomVenActionPerformed

    private void txtNomVenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomVenFocusGained
        // TODO add your handling code here:
        strDesVen=txtNomVen.getText();
        txtNomVen.selectAll();
}//GEN-LAST:event_txtNomVenFocusGained

    private void txtNomVenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomVenFocusLost
        // TODO add your handling code here:
        if (!txtNomVen.getText().equalsIgnoreCase(strDesVen)) {
            if(txtNomVen.getText().equals("")) {
                txtCodVen.setText("");
                txtNomVen.setText("");
            }else
                BuscarVendedor("a.tx_nom",txtNomVen.getText(),1);
        }else
            txtNomVen.setText(strDesVen);
}//GEN-LAST:event_txtNomVenFocusLost

    private void butVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butVenActionPerformed
        // TODO add your handling code here:
        objVenConVen.setTitle("Listado de Clientes");
        objVenConVen.setCampoBusqueda(1);
        objVenConVen.show();
        if (objVenConVen.getSelectedButton()==ZafVenCon.INT_BUT_ACE) {
            txtCodVen.setText(objVenConVen.getValueAt(1));
            txtNomVen.setText(objVenConVen.getValueAt(2));
            optFil.setSelected(true);
        }
}//GEN-LAST:event_butVenActionPerformed

    private void butcliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butcliActionPerformed
        // TODO add your handling code here:
        objVenConCLi.setTitle("Listado de Clientes");
        objVenConCLi.setCampoBusqueda(1);
        objVenConCLi.show();
        if (objVenConCLi.getSelectedButton()==ZafVenCon.INT_BUT_ACE) {
            txtCodCli.setText(objVenConCLi.getValueAt(1));
            txtNomCli.setText(objVenConCLi.getValueAt(2));
            optFil.setSelected(true);
        }
}//GEN-LAST:event_butcliActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:

        Configura_ventana_consulta();

    }//GEN-LAST:event_formInternalFrameOpened

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acción de acuerdo a la etiqueta del botón ("Consultar" o "Detener").

        if(txtCodBod.getText().equals("")){
            MensajeInf("Seleccione la bodega antes consultar un documento. ");
            tabFrm.setSelectedIndex(0);
            txtCodBod.requestFocus();
        } else{


            if (butCon.getText().equals("Consultar")) {
                blnCon=true;
                if (objThrGUI==null) {
                    objThrGUI=new ZafThreadGUI();
                    objThrGUI.start();
                }
            } else {
                blnCon=false;
            }
        }
}//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
}//GEN-LAST:event_butCerActionPerformed

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        // TODO add your handling code here:
        String strMsg;
        //JOptionPane oppMsg=new JOptionPane();
        //strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (JOptionPane.showConfirmDialog(this,strMsg,strTit,JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE)==JOptionPane.YES_OPTION){
            Runtime.getRuntime().gc();
            dispose();
        }

    }//GEN-LAST:event_exitForm

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        /*if(objParSis.getCodigoUsuario()==102 || objParSis.getCodigoUsuario()==90  || objParSis.getCodigoUsuario()==1 ){
          asignaNumero();
        }else{
            asignaNumeroVer();
        }*/

        asignaNumero();
        cargarDetReg( sqlConFil());

    }//GEN-LAST:event_jButton1ActionPerformed

    private void chkGuiAutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkGuiAutActionPerformed
        // TODO add your handling code here:

        
        if(chkGuiAut.isSelected()){
            MostrarCol(INT_TBL_NUMDOCORI, 100);
            MostrarCol(INT_TBL_FECAUT, 80);
            ocultaCol(INT_TBL_CHKREP);
            jButton1.setVisible(false);
            optFil.setSelected(true);
            objTblMod.removeAllRows();
        }else{
            MostrarCol(INT_TBL_CHKREP, 25);
            ocultaCol(INT_TBL_NUMDOCORI);
            ocultaCol(INT_TBL_FECAUT);
            jButton1.setVisible(true);
            optTod.setSelected(true);
            objTblMod.removeAllRows();
        }



    }//GEN-LAST:event_chkGuiAutActionPerformed

          
  private void MostrarCol(int intCol, int intAch){
        tblDat.getColumnModel().getColumn(intCol).setWidth(intAch);
        tblDat.getColumnModel().getColumn(intCol).setMaxWidth(intAch);
        tblDat.getColumnModel().getColumn(intCol).setMinWidth(intAch);
        tblDat.getColumnModel().getColumn(intCol).setPreferredWidth(intAch);
        tblDat.getColumnModel().getColumn(intCol).setResizable(false);
    }

    private void ocultaCol(int intCol){
        tblDat.getColumnModel().getColumn(intCol).setWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setMaxWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setMinWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setPreferredWidth(0);
        tblDat.getColumnModel().getColumn(intCol).setResizable(false);
    }
    
    
private boolean _getVerificaPagTotFac(java.sql.Connection conn, String strCodEmp, String strCodLoc, String strCodTipDoc, String strCodDoc){
 boolean blnRes=false;
 java.sql.Statement stm;
 java.sql.ResultSet rstLoc;
 String strSql="";
 try{
  if (conn!=null){
        stm=conn.createStatement();

         strSql="select *, (pagfac+monchq) as dif from ( " +
         " select a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc,  sum(a1.mo_pag+a1.nd_Abo) as pagfac , sum(a1.nd_monchq) as monchq from ( " +
         " select a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc  from tbm_detguirem as a  " +
         " inner join tbm_cabmovinv as a1 on (a1.co_emp=a.co_emprel and a1.co_loc=a.co_locrel and a1.co_tipdoc=a.co_tipdocrel and a1.co_doc=a.co_docrel )  " +
         " where a.co_emp="+strCodEmp+" and a.co_loc="+strCodLoc+" and a.co_tipdoc="+strCodTipDoc+" and a.co_doc= "+strCodDoc+"  group by a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc " +
         " ) as a " +
         " inner join tbm_pagmovinv as a1 on (a1.co_emp=a.co_emp and a1.co_loc=a.co_loc and a1.co_tipdoc=a.co_tipdoc and a1.co_doc=a.co_doc )  " +
         " left join tbr_detrecdocpagmovinv as a2 on (a2.co_emprel=a1.co_emp and a2.co_locrel=a1.co_loc and a2.co_tipdocrel=a1.co_tipdoc and a2.co_docrel=a1.co_doc and a2.co_regrel=a1.co_reg  )  " +
         " where  a1.nd_porret=0  and a1.st_reg in ('A','C')  group by a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc   ) as x  ";
         //System.out.println("--->  "+strSql);
         rstLoc=stm.executeQuery(strSql);
         if(rstLoc.next()){
            if( rstLoc.getDouble("monchq") > 0 ){
              if( rstLoc.getDouble("dif") >= 0 ){
                if( _getVerificaFecChqFac(conn, rstLoc.getString("co_emp"), rstLoc.getString("co_loc"), rstLoc.getString("co_tipdoc"), rstLoc.getString("co_doc") ) )
                 blnRes=true;
              }else{
                  if( rstLoc.getDouble("dif") >= -0.01 ){
                    if( _getVerificaFecChqFac(conn, rstLoc.getString("co_emp"), rstLoc.getString("co_loc"), rstLoc.getString("co_tipdoc"), rstLoc.getString("co_doc") ) )  
                      blnRes=true;
                  }
              }
            }
         }
         rstLoc.close();
         rstLoc=null;
  
        if(!blnRes){

          strSql="select *, (pagfac+abofac) as dif from (  " +
          " select a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc, sum(a1.mo_pag) as pagfac , sum(a1.nd_abo) as abofac from (  " +
          " select a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc  from tbm_detguirem as a  " +
          " inner join tbm_cabmovinv as a1 on (a1.co_emp=a.co_emprel and a1.co_loc=a.co_locrel and a1.co_tipdoc=a.co_tipdocrel and a1.co_doc=a.co_docrel )  " +
          " where a.co_emp="+strCodEmp+" and a.co_loc="+strCodLoc+" and a.co_tipdoc="+strCodTipDoc+" and a.co_doc= "+strCodDoc+"  group by a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc  " +
          " ) as a  " +
          " inner join tbm_pagmovinv as a1 on (a1.co_emp=a.co_emp and a1.co_loc=a.co_loc and a1.co_tipdoc=a.co_tipdoc and a1.co_doc=a.co_doc )  " +
          " where  a1.nd_porret=0 and a1.st_reg in ('A','C')  group by a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc  ) as x ";
          rstLoc=stm.executeQuery(strSql);
          if(rstLoc.next()){
            if( rstLoc.getDouble("abofac") > 0 ){
              if( rstLoc.getDouble("dif") >= -0.01 ){
                  blnRes=true;
              }
            }
          }
          rstLoc.close();
          rstLoc=null;
          
        }


   stm.close();
   stm=null;
   
}}catch (java.sql.SQLException e) { blnRes=false; objUti.mostrarMsgErr_F1(this, e); }
  catch (Exception e){ blnRes=false; objUti.mostrarMsgErr_F1(this, e); }
 return blnRes;
}




private boolean _getVerificaFecChqFac(java.sql.Connection conn, String strCodEmp, String strCodLoc, String strCodTipDoc, String strCodDoc){
 boolean blnRes=false;
 java.sql.Statement stm;
 java.sql.ResultSet rstLoc;
 String strSql="";
 try{
  if (conn!=null){
        stm=conn.createStatement();
      

       strSql="select * " +
       " , case when fe_venchq <= fe_ven then 'S' else 'N' end as FecCont " +
       " , case when fe_venchq <= fecvenchq then 'S' else 'N' end as FecnoCont " +
       " from ( "+
       "select ne_diacre, fe_ven, (fe_ven+1) as fecvenchq , fe_venchq  from tbm_pagmovinv " +
       " where co_emp="+strCodEmp+" and co_loc="+strCodLoc+" and co_tipdoc="+strCodTipDoc+" and co_doc="+strCodDoc+" and nd_porret=0 and st_reg in ('A','C') " +
       " ) as x  ";
       //System.out.println("-> "+strSql );
       rstLoc=stm.executeQuery(strSql);
       while(rstLoc.next()){

           if(rstLoc.getInt("ne_diacre")==0){
                if(rstLoc.getString("FecCont").equals("S")){
                    blnRes=true;
                }else{
                    blnRes=false;
                    break;
                }
           }else{
               if(rstLoc.getString("FecnoCont").equals("S")){
                    blnRes=true;
                }else{
                    blnRes=false;
                    break;
                }
           }
                      
       }
       rstLoc.close();
       rstLoc=null;
       stm.close();
       stm=null;

}}catch (java.sql.SQLException e) { blnRes=false; objUti.mostrarMsgErr_F1(this, e); }
  catch (Exception e){ blnRes=false; objUti.mostrarMsgErr_F1(this, e); }
 return blnRes;
}


private void asignaNumeroVer(){
 java.sql.Connection con;
 java.sql.Statement stm;
 String strSql="";
 String strFacPenImpGuia="";
 try{
    con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
    if (con!=null){
        stm=con.createStatement();

     for(int i=0; i < tblDat.getRowCount(); i++){
         if(tblDat.getValueAt(i, INT_TBL_CHKREP).toString().equals("true")){
             
          if(_getVerificaPagTotFac(con, tblDat.getValueAt(i, INT_TBL_CODEMP).toString(), tblDat.getValueAt(i, INT_TBL_CODLOC).toString(), tblDat.getValueAt(i, INT_TBL_CODTIPDOC).toString(), tblDat.getValueAt(i, INT_TBL_CODDOC).toString()  )){

           strSql+=" ; UPDATE tbm_cabguirem SET  " +
           "  st_aut='A' "+
           " ,tx_obsAut='"+tblDat.getValueAt(i, INT_TBL_OBSAUT).toString()+"'  "+
           " ,tx_obsImpAut='"+tblDat.getValueAt(i, INT_TBL_OBSIMP).toString()+"'  "+
           " ,fe_aut="+objParSis.getFuncionFechaHoraBaseDatos()+" "+
           " ,tx_comAut='"+objParSis.getNombreComputadoraConDirIP()+"' "+
           " ,co_usrAut="+objParSis.getCodigoUsuario()+" "+
           " WHERE co_emp="+tblDat.getValueAt(i, INT_TBL_CODEMP)+" AND co_loc="+tblDat.getValueAt(i, INT_TBL_CODLOC)+" AND co_tipdoc="+tblDat.getValueAt(i, INT_TBL_CODTIPDOC)+" " +
           " AND co_doc="+tblDat.getValueAt(i, INT_TBL_CODDOC)+" ";
           stm.executeUpdate(strSql);

            objInvItm.enviarRequisitoImp(con, Integer.parseInt(tblDat.getValueAt(i, INT_TBL_CODEMP).toString()),
                   Integer.parseInt(tblDat.getValueAt(i, INT_TBL_CODLOC).toString()),
                   Integer.parseInt(tblDat.getValueAt(i, INT_TBL_CODTIPDOC).toString()),
                   Integer.parseInt(tblDat.getValueAt(i, INT_TBL_CODDOC).toString()), 2 );

         }else{
            strFacPenImpGuia += " \n "+  tblDat.getValueAt(i, INT_TBL_NUMDOC).toString();
         }
    }}
      
     stm.close();
     stm=null;
     con.close();
     con=null;

   
     if(!strFacPenImpGuia.equals(""))
      MensajeInf(" LAS SIGUIENTES FACTURAS NO SE PUDIERON PROCESAR PARA IMPRESIÓN DE GUIA SON: "+ strFacPenImpGuia );


}}catch (java.sql.SQLException e) { objUti.mostrarMsgErr_F1(this, e); }
  catch (Exception e){ objUti.mostrarMsgErr_F1(this, e); }
}


private void asignaNumero(){
 java.sql.Connection con;
 java.sql.Statement stm;
 String strSql="";
 GenOD.ZafGenOdPryTra objGenOD=new ZafGenOdPryTra();
 GenOD.ZafGenOdDaoPryTra objGenODDao=new ZafGenOdDaoPryTra();
 ZafCnfDoc objValCnf=new ZafCnfDoc(objParSis,this); 
   
 try{
    con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
    if (con!=null){
        stm=con.createStatement();

     for(int i=0; i < tblDat.getRowCount(); i++){
         if(tblDat.getValueAt(i, INT_TBL_CHKREP).toString().equals("true")){

           strSql+=" ; UPDATE tbm_cabguirem SET  " +
           "  st_aut='A' "+
           " ,tx_obsAut='"+tblDat.getValueAt(i, INT_TBL_OBSAUT).toString()+"'  "+
           " ,tx_obsImpAut='"+tblDat.getValueAt(i, INT_TBL_OBSIMP).toString()+"'  "+
           " ,fe_aut="+objParSis.getFuncionFechaHoraBaseDatos()+" "+
           " ,tx_comAut='"+objParSis.getNombreComputadoraConDirIP()+"' "+
           " ,co_usrAut="+objParSis.getCodigoUsuario()+" "+
           " WHERE co_emp="+tblDat.getValueAt(i, INT_TBL_CODEMP)+" AND co_loc="+tblDat.getValueAt(i, INT_TBL_CODLOC)+" AND co_tipdoc="+tblDat.getValueAt(i, INT_TBL_CODTIPDOC)+" " +
           " AND co_doc="+tblDat.getValueAt(i, INT_TBL_CODDOC)+" ";
           stm.executeUpdate(strSql);

           /* objInvItm.enviarRequisitoImp(con, Integer.parseInt(tblDat.getValueAt(i, INT_TBL_CODEMP).toString()),*/
            
                int intCodEmp=Integer.parseInt((String)tblDat.getValueAt(i, INT_TBL_CODEMP));
                int intCodLoc=Integer.parseInt((String)tblDat.getValueAt(i, INT_TBL_CODLOC));
                int intCodTipDoc=Integer.parseInt((String)tblDat.getValueAt(i, INT_TBL_CODTIPDOC));
                int intCodDoc= Integer.parseInt((String)tblDat.getValueAt(i, INT_TBL_CODDOC));
               // if(!objValCnf.isDocIngPenCnfxFac(con, intCodEmp, intCodLoc, intCodTipDoc, intCodDoc, "I")){
                    if((objGenOD.validarODExsAut(con, intCodEmp, intCodLoc, intCodTipDoc, intCodDoc))){
                        if(objGenOD.generarNumODxAut(con, intCodEmp, intCodLoc, intCodTipDoc, intCodDoc)){
                            con.commit();
                            String strIp=objGenOD.obtenerIpSerImp(con);
                            objGenOD.imprimirOdLocalxAut(con, Integer.parseInt(tblDat.getValueAt(i, INT_TBL_CODEMP).toString()), Integer.parseInt(tblDat.getValueAt(i, INT_TBL_CODLOC).toString()), Integer.parseInt(tblDat.getValueAt(i, INT_TBL_CODTIPDOC).toString()), Integer.parseInt(tblDat.getValueAt(i, INT_TBL_CODDOC).toString()),strIp);
                        }
                    }
                   /*para generar terminales L*/

                    int intNumDoc=Integer.parseInt((String)tblDat.getValueAt(i, INT_TBL_NUMDOC));            
                    int intTipDoc=objGenODDao.verificarRelODFac(con, intCodEmp, intCodLoc, Integer.parseInt(tblDat.getValueAt(i, INT_TBL_CODTIPDOC).toString()), Integer.parseInt(tblDat.getValueAt(i, INT_TBL_CODDOC).toString()));
                    if(intTipDoc>1){
                        intCodTipDoc=intTipDoc;
                    }else{
                        intCodTipDoc=1;                           
                    }                
                    int intCodDocu=objGenODDao.obtenerCodDocFac(con, intCodEmp, intCodLoc, intNumDoc, intCodTipDoc);            
                    boolean booRetTer=objGenOD.generarTermL(con, intCodEmp, intCodLoc, intCodTipDoc, intCodDocu);
                //}
            /*para generar terminales L*/
           
				   
    }}


     /*ZafGenGuiRem objZafGuiRem=new ZafGenGuiRem();
     ZafGuiRemDAO objDAOGuiRem=new ZafGuiRemDAO();
     for(int i=0; i < tblDat.getRowCount(); i++){
         if(tblDat.getValueAt(i, INT_TBL_CHKREP).toString().equals("true")){
     
                int intCodEmp=Integer.parseInt((String)tblDat.getValueAt(i, INT_TBL_CODEMP));
                int intCodLoc=Integer.parseInt((String)tblDat.getValueAt(i, INT_TBL_CODLOC));
                int intCodTipDoc=0;
                //int intCodDocu=Integer.parseInt((String)tblDat.getValueAt(i, INT_TBL_CODDOC));
                int intNumDoc=Integer.parseInt((String)tblDat.getValueAt(i, INT_TBL_NUMDOC));
                

                int intTipDoc=objDAOGuiRem.verificarRelODFac(con, intCodEmp, intCodLoc, Integer.parseInt(tblDat.getValueAt(i, INT_TBL_CODTIPDOC).toString()), Integer.parseInt(tblDat.getValueAt(i, INT_TBL_CODDOC).toString()));
                if(intTipDoc>1){
                    intCodTipDoc=intTipDoc;
                }else{
                    intCodTipDoc=1;                           
                }
                
                int intCodDocu=objDAOGuiRem.obtenerCodDocFac(con, intCodEmp, intCodLoc, intNumDoc, intCodTipDoc);

                //con.setAutoCommit(false);
                boolean booRetTra=objZafGuiRem.generarODxTraRecChq( con, intCodEmp, intCodLoc, intCodTipDoc, intCodDocu);
                //con.setAutoCommit(false);
                boolean booRetPre=objZafGuiRem.generarODxPreComVenRecChq(con, intCodEmp, intCodLoc, intCodTipDoc, intCodDocu); 
                boolean booRetTer=objZafGuiRem.generarProTermL(con, intCodEmp, intCodLoc, intCodTipDoc, intCodDocu, intNumDoc);
                
                con.setAutoCommit(true);
     
        }
     }*/
     stm.close();
     stm=null;
     con.close();
     con=null;

}}catch (java.sql.SQLException e) { objUti.mostrarMsgErr_F1(this, e); }
  catch (Exception e){ objUti.mostrarMsgErr_F1(this, e); }
}


private void enviarRequisitoImp(String strIp, int intPuerto){
    try{
       java.net.Socket s1 = new java.net.Socket(strIp, intPuerto);
       java.io.DataOutputStream dos = new java.io.DataOutputStream(s1.getOutputStream());
       dos.writeInt(1);

       dos.close();
       s1.close();

     }catch (java.net.ConnectException connExc){   System.err.println("OCURRIO UN ERROR 1 "+connExc ); }
      catch (IOException e){  System.err.println("OCURRIO UN ERROR 2 "+ e );  }
}



 public void BuscarBod(String campo,String strBusqueda,int tipo){
  objVenConBodUsr.setTitle("Listado de Bodegas");
  if(objVenConBodUsr.buscar(campo, strBusqueda )) {
        txtCodBod.setText(objVenConBodUsr.getValueAt(1));
        txtNomBod.setText(objVenConBodUsr.getValueAt(2));
        strCodBod=objVenConBodUsr.getValueAt(1);
        strNomBod=objVenConBodUsr.getValueAt(2);
  }else{
        objVenConBodUsr.setCampoBusqueda(tipo);
        objVenConBodUsr.cargarDatos();
        objVenConBodUsr.show();
        if (objVenConBodUsr.getSelectedButton()==ZafVenCon.INT_BUT_ACE) {
           txtCodBod.setText(objVenConBodUsr.getValueAt(1));
           txtNomBod.setText(objVenConBodUsr.getValueAt(2));
           strCodBod=objVenConBodUsr.getValueAt(1);
           strNomBod=objVenConBodUsr.getValueAt(2);
        }else{
           txtCodBod.setText(strCodBod);
           txtNomBod.setText(strNomBod);
  }}}




public void BuscarCliente(String campo,String strBusqueda,int tipo){
  objVenConCLi.setTitle("Listado de Clientes");
  if(objVenConCLi.buscar(campo, strBusqueda )) {
      txtCodCli.setText(objVenConCLi.getValueAt(1));
      txtNomCli.setText(objVenConCLi.getValueAt(2));
      optFil.setSelected(true);
  }else{
        objVenConCLi.setCampoBusqueda(tipo);
        objVenConCLi.cargarDatos();
        objVenConCLi.show();
        if (objVenConCLi.getSelectedButton()==ZafVenCon.INT_BUT_ACE) {
           txtCodCli.setText(objVenConCLi.getValueAt(1));
           txtNomCli.setText(objVenConCLi.getValueAt(2));
           optFil.setSelected(true);
        }else{
            txtCodCli.setText(strCodCli);
            txtNomCli.setText(strDesCli);
  }}}


public void BuscarVendedor(String campo,String strBusqueda,int tipo){
  objVenConVen.setTitle("Listado de Vendedores");
  if(objVenConVen.buscar(campo, strBusqueda )) {
      txtCodVen.setText(objVenConVen.getValueAt(1));
      txtNomVen.setText(objVenConVen.getValueAt(2));
      optFil.setSelected(true);
  }else{
        objVenConVen.setCampoBusqueda(tipo);
        objVenConVen.cargarDatos();
        objVenConVen.show();
        if (objVenConVen.getSelectedButton()==ZafVenCon.INT_BUT_ACE) {
            txtCodVen.setText(objVenConVen.getValueAt(1));
            txtNomVen.setText(objVenConVen.getValueAt(2));
            optFil.setSelected(true);
        }else{
            txtCodVen.setText(strCodVen);
            txtNomVen.setText(strDesVen);
  }}}






    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butBusBod;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butVen;
    private javax.swing.JButton butcli;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkGuiAut;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblBod;
    private javax.swing.JLabel lblCli;
    private javax.swing.JLabel lblCli1;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optFil;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panCen;
    private javax.swing.JPanel panFilCab;
    private javax.swing.JPanel panRep;
    private javax.swing.JPanel panSur;
    private javax.swing.JPanel panTit;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodBod;
    private javax.swing.JTextField txtCodCli;
    private javax.swing.JTextField txtCodVen;
    private javax.swing.JTextField txtNomBod;
    private javax.swing.JTextField txtNomCli;
    private javax.swing.JTextField txtNomVen;
    // End of variables declaration//GEN-END:variables


     /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        @Override
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_LIN:
                    strMsg="";
                    break;
                case INT_TBL_CODEMP:
                    strMsg="Código de empresa";
                    break;
                case INT_TBL_CODLOC:
                    strMsg="Código de local ";
                    break;
                case INT_TBL_DESCTIDOC:
                    strMsg="Tipo de Documento ";
                    break;
                case INT_TBL_NUMDOC:
                    strMsg="Número de Factura ";
                    break;
                case INT_TBL_FECDOC:
                    strMsg="Fecha de Documento ";
                    break;
                case INT_TBL_CODCLI:
                    strMsg="Código de Cliente ";
                    break;
                 case INT_TBL_NOMCLI:
                    strMsg="Nombre de Cliente ";
                    break;
                  case INT_TBL_CHKREP:
                    strMsg="Autorizar.  ";
                    break;
                 case INT_TBL_FECAUT:
                    strMsg="Fecha de autorización.  ";
                    break;

                
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }



}
