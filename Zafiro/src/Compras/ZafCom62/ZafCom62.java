/*
 * ZafMae03.java
 *
 * Created on March 11, 2010, 11:47 PM
 */
package Compras.ZafCom62;

import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;

/**
 *
 * @author  Gigi
 */
public class ZafCom62 extends javax.swing.JInternalFrame {

    private ZafParSis objParSis;
    private ZafUtil objUti;
    private MiToolBar objTooBar;
    private String strAux;
    private boolean blnHayCam;
    private ZafDocLis objDocLis;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private String strSQL;
    private java.util.Date datFecAux;
    private String strDesCorGrp, strDesLarGrp;
    private ZafVenCon vcoGrp;
    private Vector vecDat, vecCab, vecReg, vecAux;



    
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_CHK=1;
    final int INT_TBL_DAT_COD_ITM=2;
    final int INT_TBL_DAT_COD_ITM_MAE=3;
    final int INT_TBL_DAT_COD_ALT=4;
    final int INT_TBL_DAT_NOM_ITM=5;
    final int INT_TBL_DAT_UNI_MED=6;

    private ZafTblMod objTblMod;
    private ZafTblFilCab objTblFilCab;
    private ZafTblPopMnu objTblPopMnu;
    private ZafMouMotAda objMouMotAda;


    private ZafTblCelRenChk objTblCelRenChk;
    private ZafTblCelEdiChk objTblCelEdiChk;
    private ZafTblCelRenLbl objTblCelRenLbl;

    private ZafTblOrd objTblOrd;
    private ZafTblBus objTblBus;



    /** Creates new form ZafCom62 */
    public ZafCom62(ZafParSis obj) {
        try {
            objParSis = (ZafParSis) obj.clone();
            if (objParSis.getCodigoEmpresa() == objParSis.getCodigoEmpresaGrupo()) {
                initComponents();

                configurarFrm();
                agregarDocLis();
            }
            else{
                mostrarMsgInf("Este programa sólo puede ser ejecutado desde GRUPO.");
                dispose();
            }

        }
        catch (CloneNotSupportedException e) {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }


    /** Creates new form ZafCom62 */
    public ZafCom62(ZafParSis obj, int codigoGrupo, String aliasGrupo, String nombreGrupo) {
        try {
            objParSis = (ZafParSis) obj.clone();
            if (objParSis.getCodigoEmpresa() == objParSis.getCodigoEmpresaGrupo()) {
                initComponents();

                configurarFrm();
                agregarDocLis();
            }
            else{
                mostrarMsgInf("Este programa sólo puede ser ejecutado desde GRUPO.");
                dispose();
            }

            txtCodGrp.setText(""+codigoGrupo);
            txtDesCorGrp.setText(aliasGrupo);
            txtDesLarGrp.setText(nombreGrupo);
            objTooBar.setEstado('c');//previa consulta
            consultarReg();
            objTooBar.afterConsultar();
            objTooBar.setVisible(false);
//            objTooBar.setVisibleConsultar(false);
//            objTooBar.setVisibleModificar(false);
            
        }
        catch (CloneNotSupportedException e) {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }




    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFrmFil = new javax.swing.JPanel();
        panFil = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        txtDesCorGrp = new javax.swing.JTextField();
        txtCodGrp = new javax.swing.JTextField();
        lblGrp = new javax.swing.JLabel();
        txtDesLarGrp = new javax.swing.JTextField();
        butGrp = new javax.swing.JButton();
        butSelRegMar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("jLabel1");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFrmFil.setLayout(new java.awt.BorderLayout());

        panFil.setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel1.setLayout(null);

        txtDesCorGrp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorGrpActionPerformed(evt);
            }
        });
        txtDesCorGrp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorGrpFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorGrpFocusLost(evt);
            }
        });
        jPanel1.add(txtDesCorGrp);
        txtDesCorGrp.setBounds(72, 4, 88, 20);
        jPanel1.add(txtCodGrp);
        txtCodGrp.setBounds(40, 4, 32, 20);

        lblGrp.setText("Grupo:");
        lblGrp.setToolTipText("Tipo de documento");
        jPanel1.add(lblGrp);
        lblGrp.setBounds(2, 4, 60, 20);

        txtDesLarGrp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarGrpActionPerformed(evt);
            }
        });
        txtDesLarGrp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarGrpFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarGrpFocusLost(evt);
            }
        });
        jPanel1.add(txtDesLarGrp);
        txtDesLarGrp.setBounds(160, 4, 380, 20);

        butGrp.setText("...");
        butGrp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGrpActionPerformed(evt);
            }
        });
        jPanel1.add(butGrp);
        butGrp.setBounds(540, 4, 20, 20);

        butSelRegMar.setText("Marcar/Desmarcar");
        butSelRegMar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSelRegMarActionPerformed(evt);
            }
        });
        jPanel1.add(butSelRegMar);
        butSelRegMar.setBounds(562, 2, 120, 23);

        panFil.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDat);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panFil.add(jPanel2, java.awt.BorderLayout.CENTER);

        panFrmFil.add(panFil, java.awt.BorderLayout.CENTER);

        panBar.setPreferredSize(new java.awt.Dimension(0, 70));
        panBar.setLayout(new java.awt.BorderLayout());
        panFrmFil.add(panBar, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("General", panFrmFil);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
// TODO add your handling code here:
}//GEN-LAST:event_formInternalFrameOpened

private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
// TODO add your handling code here:
    String strTit, strMsg;
    try {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        strTit = "Mensaje del sistema Zafiro";
        strMsg = "¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this, strMsg, strTit, javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE) == javax.swing.JOptionPane.YES_OPTION) {
            //Cerrar la conexión si está abierta.
            if (rstCab != null) {
                rstCab.close();
                stmCab.close();
                conCab.close();
                rstCab = null;
                stmCab = null;
                conCab = null;
            }
            dispose();
        }
    } catch (java.sql.SQLException e) {
        dispose();
    }
}//GEN-LAST:event_exitForm

private void txtDesCorGrpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorGrpActionPerformed
    txtDesCorGrp.transferFocus();
}//GEN-LAST:event_txtDesCorGrpActionPerformed

private void txtDesCorGrpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorGrpFocusGained
    strDesCorGrp = txtDesCorGrp.getText();
    txtDesCorGrp.selectAll();
}//GEN-LAST:event_txtDesCorGrpFocusGained

private void txtDesCorGrpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorGrpFocusLost
    //Validar el contenido de la celda sálo si ha cambiado.
    if (!txtDesCorGrp.getText().equalsIgnoreCase(strDesCorGrp)) {
        if (txtDesCorGrp.getText().equals("")) {
            txtCodGrp.setText("");
            txtDesLarGrp.setText("");
        } else {
            mostrarVenConGrp(1);
        }
    } else {
        txtDesCorGrp.setText(strDesCorGrp);
    }
}//GEN-LAST:event_txtDesCorGrpFocusLost

private void txtDesLarGrpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarGrpActionPerformed
    txtDesLarGrp.transferFocus();
}//GEN-LAST:event_txtDesLarGrpActionPerformed

private void txtDesLarGrpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarGrpFocusGained
    strDesLarGrp = txtDesLarGrp.getText();
    txtDesLarGrp.selectAll();
}//GEN-LAST:event_txtDesLarGrpFocusGained

private void txtDesLarGrpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarGrpFocusLost
    //Validar el contenido de la celda sálo si ha cambiado.
    if (!txtDesLarGrp.getText().equalsIgnoreCase(strDesLarGrp)) {
        if (txtDesLarGrp.getText().equals("")) {
            txtCodGrp.setText("");
            txtDesCorGrp.setText("");
        } else {
            mostrarVenConGrp(2);
        }
    } else {
        txtDesLarGrp.setText(strDesLarGrp);
    }
}//GEN-LAST:event_txtDesLarGrpFocusLost

private void butGrpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGrpActionPerformed
    mostrarVenConGrp(0);

}//GEN-LAST:event_butGrpActionPerformed

private void butSelRegMarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSelRegMarActionPerformed
    // TODO add your handling code here:
    if (butSelRegMar.getText().equals("Marcar/Desmarcar")){
        int i[]=tblDat.getSelectedRows();

        for(int j=0; j<i.length; j++){
            System.out.println("i[]: " + i[j]);
            if(objTblMod.isChecked(i[j], INT_TBL_DAT_CHK))
                objTblMod.setChecked(false, i[j], INT_TBL_DAT_CHK);
            else
                objTblMod.setChecked(true, i[j], INT_TBL_DAT_CHK);
        }

        
    }
}//GEN-LAST:event_butSelRegMarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butGrp;
    private javax.swing.JButton butSelRegMar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblGrp;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panFrmFil;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodGrp;
    private javax.swing.JTextField txtDesCorGrp;
    private javax.swing.JTextField txtDesLarGrp;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm() {
        boolean blnRes = true;
        try {
            //Inicializar objetos.
            objUti = new ZafUtil();
            objTooBar = new MiToolBar(this);
            panBar.add(objTooBar);
            objDocLis = new ZafDocLis();

            objTooBar.agregarSeparador();
            objTooBar.agregarBoton(butSelRegMar);
            
            strAux = objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.1");
            lblTit.setText(strAux);
            txtCodGrp.setBackground(objParSis.getColorCamposSistema());
            txtDesCorGrp.setBackground(objParSis.getColorCamposObligatorios());
            txtDesLarGrp.setBackground(objParSis.getColorCamposObligatorios());


            

            configurarVenConGrp();
            configurarFrmTbl();

            objTooBar.setVisibleInsertar(false);
            objTooBar.setVisibleEliminar(false);
            objTooBar.setVisibleAnular(false);



        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /** Configurar el formulario. */
    private boolean configurarFrmTbl() {
        boolean blnRes = true;
        try {
            //Inicializar objetos.
            //Configurar JTable: Establecer el modelo.
            vecDat = new Vector();    //Almacena los datos
            vecCab = new Vector(7);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN, "");
            vecCab.add(INT_TBL_DAT_CHK, "");
            vecCab.add(INT_TBL_DAT_COD_ITM, "Cód.Itm.");
            vecCab.add(INT_TBL_DAT_COD_ITM_MAE, "Cód.Itm.Mae..");
            vecCab.add(INT_TBL_DAT_COD_ALT, "Cód.Alt.");
            vecCab.add(INT_TBL_DAT_NOM_ITM, "Nombre del item");
            vecCab.add(INT_TBL_DAT_UNI_MED, "Unidad");
            objTblMod = new ZafTblMod();
            objTblMod.setHeader(vecCab);
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu = new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux = tblDat.getColumnModel();

            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM_MAE).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_COD_ALT).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_NOM_ITM).setPreferredWidth(260);
            tcmAux.getColumn(INT_TBL_DAT_UNI_MED).setPreferredWidth(70);
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_DAT_CHK).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);


            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab = new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);

            objTblBus=new ZafTblBus(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);

            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda = new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer columnas editables.
            vecAux = new Vector();
            vecAux.add("" + INT_TBL_DAT_CHK);
            objTblMod.setColumnasEditables(vecAux);
            vecAux = null;
            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk = new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk = null;

            objTblCelRenLbl = new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM_MAE).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl = null;

            //Configurar JTable: Editor de celdas.
            objTblCelEdiChk = new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }

                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
            });

            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_ITM, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_ITM_MAE, tblDat);

            //Ocultar objetos del sistema.
            txtCodGrp.setVisible(false);
            tcmAux=null;


        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta clase implementa la interface DocumentListener que observa los cambios que
     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
     * Se la usa en el sistema para determinar si existe algún cambio que se deba grabar
     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
     * presentará un mensaje advirtiendo que si no guarda los cambios los perderá.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener {

        public void changedUpdate(javax.swing.event.DocumentEvent evt) {
            blnHayCam = true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) {
            blnHayCam = true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) {
            blnHayCam = true;
        }
    }

    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private void agregarDocLis() {
        txtCodGrp.getDocument().addDocumentListener(objDocLis);
        txtDesCorGrp.getDocument().addDocumentListener(objDocLis);
        txtDesLarGrp.getDocument().addDocumentListener(objDocLis);
    }

    /**
     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
     * insertar, consultar, modificar, eliminar, etc. Además de los botones de navegación
     * que permiten desplazarse al primero, anterior, siguiente y último registro.
     */
    private class MiToolBar extends ZafToolBar {

        public MiToolBar(javax.swing.JInternalFrame ifrFrm) {
            super(ifrFrm, objParSis);
        }

        public void clickInicio() {
            try {
                if (!rstCab.isFirst()) {
                    if (blnHayCam) {
                        if (isRegPro()) {
                            rstCab.first();
                            cargarReg();
                        }
                    } else {
                        rstCab.first();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnterior() {
            try {
                if (!rstCab.isFirst()) {
                    if (blnHayCam) {
                        if (isRegPro()) {
                            rstCab.previous();
                            cargarReg();
                        }
                    } else {
                        rstCab.previous();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }

        }

        public void clickSiguiente() {
            try {
                if (!rstCab.isLast()) {
                    if (blnHayCam) {
                        if (isRegPro()) {
                            rstCab.next();
                            cargarReg();
                        }
                    } else {
                        rstCab.next();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }


        }

        public void clickFin() {
            try {
                if (!rstCab.isLast()) {
                    if (blnHayCam) {
                        if (isRegPro()) {
                            rstCab.last();
                            cargarReg();
                        }
                    } else {
                        rstCab.last();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }

        }

        public void clickInsertar() {
            try {
                if (blnHayCam) {
                    isRegPro();
                }
                limpiarFrm();
                txtCodGrp.setEditable(false);
                txtDesCorGrp.selectAll();
                txtDesCorGrp.requestFocus();
                //Inicializar las variables que indican cambios.
                blnHayCam = false;
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickConsultar() {
            System.out.println("1-clickConsultar:  " + objTooBar.getEstado());
        }

        public void clickModificar() {
            System.out.println("1-clickModificar:  " + objTooBar.getEstado());
            txtCodGrp.setEditable(false);
            txtCodGrp.setEditable(false);
            txtDesCorGrp.setEditable(false);
            txtDesLarGrp.setEditable(false);
            butGrp.setEnabled(false);
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            butSelRegMar.setEnabled(true);
            switch (objTooBar.getEstado()){
                case 'm':
                    cargarReg();
                    break;
            }
            blnHayCam=false;
        }

        public void clickEliminar() {
        }

        public void clickAnular() {
            cargarDetReg();
        }

        public void clickImprimir() {
        }

        public void clickVisPreliminar() {
        }

        public void clickAceptar() {
        }

        public void clickCancelar() {
        }

        public boolean insertar() {
            return true;
        }

        public boolean consultar() {
            consultarReg();
            return true;
        }

        public boolean modificar() {
            if (!actualizarReg()) {
                return false;
            }
            return true;
        }

        public boolean eliminar() {
            return true;
        }

        public boolean anular() {
            return true;
        }

        public boolean imprimir() {
            return true;
        }

        public boolean vistaPreliminar() {
            return true;
        }

        public boolean aceptar() {
            return true;
        }

        public boolean cancelar() {
            boolean blnRes = true;
            try {
                if (blnHayCam) {
                    if (objTooBar.getEstado() == 'n' || objTooBar.getEstado() == 'm') {
                        if (!isRegPro()) {
                            return false;
                        }
                    }
                }
                if (rstCab != null) {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab = null;
                    stmCab = null;
                    conCab = null;
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
            limpiarFrm();
            blnHayCam = false;
            return blnRes;
        }

        public boolean beforeInsertar() {
            return true;
        }

        public boolean beforeConsultar() {
            if (!isCamVal())
                return false;
            return true;
        }

        public boolean beforeModificar() {
            boolean blnRes = true;
            return blnRes;
        }

        public boolean beforeEliminar() {
            return true;
        }

        public boolean beforeAnular() {
            return true;
        }

        public boolean beforeImprimir() {
            return true;
        }

        public boolean beforeVistaPreliminar() {
            return true;
        }

        public boolean beforeAceptar() {
            return true;
        }

        public boolean beforeCancelar() {
            return true;
        }

        public boolean afterInsertar() {
            return true;
        }

        public boolean afterConsultar() {
            return true;
        }

        public boolean afterModificar() {            
            blnHayCam = false;
            objTooBar.setEstado('w');
            cargarReg();
            return true;
        }

        public boolean afterEliminar() {
            return true;
        }

        public boolean afterAnular() {
            return true;
        }

        public boolean afterImprimir() {
            return true;
        }

        public boolean afterVistaPreliminar() {
            return true;
        }

        public boolean afterAceptar() {
            return true;
        }

        public boolean afterCancelar() {
            return true;
        }
    }

    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg) {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        String strTit;
        strTit = "Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this, strMsg, strTit, javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg) {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        String strTit;
        strTit = "Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this, strMsg, strTit, javax.swing.JOptionPane.YES_NO_CANCEL_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje de advertencia al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos se han cargado
     * con errores y que debe revisar dichos datos.
     */
    private void mostrarMsgAdv(String strMsg) {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        String strTit;
        strTit = "Mensaje del sistema Zafiro";
        if (strMsg.equals("")) {
            strMsg = "<HTML>Este registro tiene <FONT COLOR=\"red\">problemas</FONT>. <BR>Notifíquelo a su administrador del sistema.</HTML>";
        }
        oppMsg.showMessageDialog(this, strMsg, strTit, javax.swing.JOptionPane.WARNING_MESSAGE);
    }

    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private boolean isRegPro() {
        boolean blnRes = true;
        strAux = "¿Desea guardar los cambios efectuados a éste registro?\n";
        strAux += "Si no guarda los cambios perderá toda la información que no haya guardado.";
        switch (mostrarMsgCon(strAux)) {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado()) {
                    case 'n': //Insertar
                        blnRes = objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes = objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam = false;
                blnRes = true;
                break;
            case 2: //CANCEL_OPTION
                blnRes = false;
                break;
        }
        return blnRes;
    }

    /**
     * Esta función permite limpiar el formulario.
     * @return true: Si se pudo limpiar la ventana sin ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean limpiarFrm() {
        boolean blnRes = true;
        try {
            txtCodGrp.setText("");
            txtDesCorGrp.setText("");
            txtDesLarGrp.setText("");
            objTblMod.removeAllRows();
        } catch (Exception e) {
            blnRes = false;
        }
        return blnRes;
    }



    /**
     * Esta función actualiza el registro en la base de datos.
     * @return true: Si se pudo actualizar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarReg() {
        boolean blnRes = false;
        try {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if(con!=null){
                if(actualizarItmGrp()) {
                    con.commit();
                    blnRes = true;
                }
                else{
                    con.rollback();
                }
            }
            con.close();
            con = null;
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }





    /**
     * Esta función permite actualizar la cabecera de un registro.
     * @return true: Si se pudo actualizar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarItmGrp() {
        boolean blnRes=true;
        String strSQLUpd="";
        String strLin="";
        try{
            if (con!=null) {
                stm=con.createStatement();
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    strLin=objTblMod.getValueAt(i, INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_LIN).toString();
                    if(strLin.equals("M")){
                        strSQL="";
                        strSQL+="UPDATE tbm_inv";
                        if(objTblMod.isChecked(i, INT_TBL_DAT_CHK))
                            strSQL+=" SET co_grpImp=" + txtCodGrp.getText() + "";
                        else
                            strSQL+=" SET co_grpImp=Null";
                        strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+=" AND co_itm=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_ITM) + "";
                        strSQL+=";";
                        strSQLUpd+=strSQL;
                    }
                }
                System.out.println("actualizarItmGrp: " + strSQLUpd);
                stm.executeUpdate(strSQLUpd);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean consultarReg(){
        boolean blnRes = true;
        try{            
            conCab = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conCab!=null){
                stmCab = conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                strSQL="";
                strSQL+="SELECT a1.co_emp, a1.co_grpImp";
                strSQL+=" FROM tbm_inv AS a1 ";
                strSQL+=" INNER JOIN tbm_equInv AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND UPPER(a1.tx_codAlt) LIKE '%I' AND a1.st_reg NOT IN('T','U') AND a1.st_ser NOT IN('S','T')";
                if( (objTooBar.getEstado()=='c')  ||  (objTooBar.getEstado()=='w') )
                    strSQL+=" AND a1.co_grpImp= " + txtCodGrp.getText() + "";
                strSQL+=" AND a1.st_reg NOT IN('E','I')";
                System.out.println("consultarReg: " + strSQL);
                rstCab = stmCab.executeQuery(strSQL);
                if (rstCab.next()) {
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                }
                else{
                    mostrarMsgInf("No se ha encontrado ningún registro que cumpla el criterio de búsqueda especificado.");
                    //limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite cargar el registro seleccionado.
     * @return true: Si se pudo cargar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg() {
        boolean blnRes = true;
        try {
            if (cargarDetReg()) {
            }
            blnHayCam = false;
        }
        catch (Exception e) {
            blnRes = false;
        }
        return blnRes;
    }

    /**
     * Esta función permite cargar el detalle del registro seleccionado.
     * @return true: Si se pudo cargar el detalle del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg() {
        boolean blnRes = true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null) {
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT a1.co_emp, a1.co_itm, a2.co_itmMae, a1.tx_codAlt, a1.tx_nomItm";
                strSQL+=" , a3.tx_desCor AS tx_desCorUniMed, a1.co_grpImp";
                strSQL+=" FROM   (tbm_inv AS a1 LEFT OUTER JOIN tbm_var AS a3 ON a1.co_uni=a3.co_reg)";
                strSQL+=" INNER JOIN tbm_equInv AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND UPPER(a1.tx_codAlt) LIKE '%I' AND a1.st_reg NOT IN('T','U') AND a1.st_ser NOT IN('S','T')";
                strSQL+=" AND a1.co_grpImp=" + txtCodGrp.getText() + "";
                strSQL+=" AND a1.st_reg NOT IN('E','I')";
                if( (objTooBar.getEstado()=='x') || (objTooBar.getEstado()=='m')  ){
                    strSQL+=" UNION";
                    strSQL+=" SELECT a1.co_emp, a1.co_itm, a2.co_itmMae, a1.tx_codAlt, a1.tx_nomItm";
                    strSQL+=" , a3.tx_desCor AS tx_desCorUniMed, a1.co_grpImp";
                    strSQL+=" FROM   (tbm_inv AS a1 LEFT OUTER JOIN tbm_var AS a3 ON a1.co_uni=a3.co_reg)";
                    strSQL+=" INNER JOIN tbm_equInv AS a2";
                    strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm";
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+=" AND UPPER(a1.tx_codAlt) LIKE '%I' AND a1.st_reg NOT IN('T','U') AND a1.st_ser NOT IN('S','T')";
                    strSQL+=" AND a1.co_grpImp IS NULL";
                    strSQL+=" AND a1.st_reg NOT IN('E','I')";
                }
                strSQL+=" ORDER BY tx_codAlt";

                System.out.println("cargarDetReg: " + strSQL);
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                while(rst.next()) {
                    vecReg = new Vector();
                    vecReg.add(INT_TBL_DAT_LIN, "");
                    vecReg.add(INT_TBL_DAT_CHK, null);
                    vecReg.add(INT_TBL_DAT_COD_ITM, rst.getString("co_itm"));
                    vecReg.add(INT_TBL_DAT_COD_ITM_MAE, rst.getString("co_itmMae"));
                    vecReg.add(INT_TBL_DAT_COD_ALT, rst.getString("tx_codAlt"));
                    vecReg.add(INT_TBL_DAT_NOM_ITM, rst.getString("tx_nomItm"));
                    vecReg.add(INT_TBL_DAT_UNI_MED, rst.getString("tx_desCorUniMed"));
                    strAux=rst.getObject("co_grpImp")==null?"":rst.getString("co_grpImp");

                    if(!strAux.equals("")) {
                        vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK);
                    }
                    vecDat.add(vecReg);
                }
                System.out.println("Z");
                rst.close();
                stm.close();
                con.close();
                rst = null;
                stm = null;
                con = null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
                }

        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función obtiene la descripción larga del estado del registro.
     * @param estado El estado del registro. Por ejemplo: A, I, etc.
     * @return La descripción larga del estado del registro.
     * <BR>Nota.- Si la cadena recibida es <I>null</I> la función devuelve una cadena vacía.
     */
    private String getEstReg(String estado) {
        if (estado == null) {
            estado = "";
        } else {
            switch (estado.charAt(0)) {
                case 'A':
                    estado = "Activo";
                    break;
                case 'I':
                    estado = "Anulado";
                    break;
                case 'P':
                    estado = "Pendiente de autorizar";
                    break;
                case 'D':
                    estado = "Autorización denegada";
                    break;
                case 'R':
                    estado = "Pendiente de impresión";
                    break;
                case 'C':
                    estado = "Pendiente confirmación de inventario";
                    break;
                case 'F':
                    estado = "Existen diferencias de inventario";
                    break;
                default:
                    estado = "Desconocido";
                    break;
            }
        }
        return estado;
    }

    /** Cerrar la aplicación. */
    private void exitForm() {
        dispose();
    }

    /**
     * Esta función determina si los campos son válidos.
     * @return true: Si los campos son válidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal() {
        if (txtDesLarGrp.getText().equals("")) {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\"> Nombre de grupo</FONT> es obligatorio.<BR>Escriba una Nombre de grupo y vuelva a intentarlo.</HTML>");
            txtDesLarGrp.requestFocus();
            return false;
        }

        return true;
    }



    /**
     * Esta funcián configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Tipos de documentos".
     */
    private boolean configurarVenConGrp() {
        boolean blnRes = true;
        try {
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("a1.co_grp");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("Código");
            arlAli.add("Alias.");
            arlAli.add("Nombre del grupo");
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            //Armar la sentencia SQL.
            strSQL= "";
            strSQL+= "SELECT a1.co_grp, a1.tx_desCor, a1.tx_desLar";
            strSQL+=" FROM tbm_grpInvImp AS a1";
            strSQL+=" WHERE a1.st_reg='A'";
            strSQL+=" ORDER BY a1.co_grp";

            vcoGrp = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de grupos", strSQL, arlCam, arlAli, arlAncCol);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;
            //Configurar columnas.
            vcoGrp.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConGrp(int intTipBus) {
        boolean blnRes = true;
        try {
            System.out.println("objTooBar.getEstado():  " + objTooBar.getEstado());
            switch (intTipBus) {
                case 0: //Mostrar la ventana de consulta.
                    vcoGrp.setCampoBusqueda(1);
                    vcoGrp.show();
                    if (vcoGrp.getSelectedButton() == vcoGrp.INT_BUT_ACE) {
                        txtCodGrp.setText(vcoGrp.getValueAt(1));
                        txtDesCorGrp.setText(vcoGrp.getValueAt(2));
                        txtDesLarGrp.setText(vcoGrp.getValueAt(3));
                    }
                    break;
                case 1: //Básqueda directa por "Descripcián corta".
                    if (vcoGrp.buscar("a1.tx_desCor", txtDesCorGrp.getText())) {
                        txtCodGrp.setText(vcoGrp.getValueAt(1));
                        txtDesCorGrp.setText(vcoGrp.getValueAt(2));
                        txtDesLarGrp.setText(vcoGrp.getValueAt(3));
                    }
                    else {
                        vcoGrp.setCampoBusqueda(1);
                        vcoGrp.setCriterio1(11);
                        vcoGrp.cargarDatos();
                        vcoGrp.show();
                        if (vcoGrp.getSelectedButton() == vcoGrp.INT_BUT_ACE) {
                            txtCodGrp.setText(vcoGrp.getValueAt(1));
                            txtDesCorGrp.setText(vcoGrp.getValueAt(2));
                            txtDesLarGrp.setText(vcoGrp.getValueAt(3));
                        }
                        else {
                            txtDesCorGrp.setText(strDesCorGrp);
                        }
                    }
                    break;
                case 2: //Básqueda directa por "Descripcián larga".
                    if (vcoGrp.buscar("a1.tx_desLar", txtDesLarGrp.getText())) {
                        txtCodGrp.setText(vcoGrp.getValueAt(1));
                        txtDesCorGrp.setText(vcoGrp.getValueAt(2));
                        txtDesLarGrp.setText(vcoGrp.getValueAt(3));
                    } else {
                        vcoGrp.setCampoBusqueda(2);
                        vcoGrp.setCriterio1(11);
                        vcoGrp.cargarDatos();
                        vcoGrp.show();
                        if (vcoGrp.getSelectedButton() == vcoGrp.INT_BUT_ACE) {
                            txtCodGrp.setText(vcoGrp.getValueAt(1));
                            txtDesCorGrp.setText(vcoGrp.getValueAt(2));
                            txtDesLarGrp.setText(vcoGrp.getValueAt(3));
                        }
                        else{
                            txtDesLarGrp.setText(strDesLarGrp);
                        }
                    }
                    break;
            }
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter {

        public void mouseMoved(java.awt.event.MouseEvent evt) {
            int intCol = tblDat.columnAtPoint(evt.getPoint());
            String strMsg = "";
            switch (intCol) {
                case INT_TBL_DAT_COD_ITM:
                    strMsg = "Código del item";
                    break;
                case INT_TBL_DAT_COD_ITM_MAE:
                    strMsg = "Código maestro del item";
                    break;
                case INT_TBL_DAT_COD_ALT:
                    strMsg = "Código alterno del item";
                    break;
                case INT_TBL_DAT_NOM_ITM:
                    strMsg = "Nombre del item";
                    break;
                case INT_TBL_DAT_UNI_MED:
                    strMsg = "Unidad de medida";
                    break;
                default:
                    strMsg = "";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }






}
