/*
 * ZafMae63.java
 *
 * Created on March 14, 2010, 8:09 PM
 */

package Compras.ZafCom71;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafRptSis.ZafRptSis;
import Librerias.ZafTblUti.ZafTblCelEdiButDlg.ZafTblCelEdiButDlg;
import Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt;
import Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;

import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JRException;
import java.util.HashMap;
import java.util.Map;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.util.JRLoader;

/**
 *
 * @author  Gigi
 */
public class ZafCom71 extends javax.swing.JInternalFrame {
    private String strSQL;
    private ZafParSis objParSis;
    private ZafVenCon vcoBco, vcoCtaCtb;
    private ZafUtil objUti;
    private MiToolBar objTooBar;
    private ZafDocLis objDocLis;
    private String strAux;
    private boolean blnHayCam;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private java.util.Date datFecAux;
    

    private String strDesCorCtaCtb, strDesLarCtaCtb, strDesCorBco, strDesLarBco;
    private String strCodExp, strNomExp, strDesCorCiu, strCodCiu, strDesLarCiu;
    private ZafVenCon vcoPrvLoc, vcoCtaBan, vcoExp, vcoCiu;


    /** Creates new form ZafMae07 */
    public ZafCom71(ZafParSis obj) {
        try{
            objParSis=(ZafParSis)obj.clone();

            if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()) {
                initComponents();

                configurarFrm();
                agregarDocLis();
            }
            else{
                mostrarMsgInf("Este programa sólo puede ser ejecutado desde GRUPO.");
                dispose();
            }
            
        }
        catch (CloneNotSupportedException e){
            this.setTitle(this.getTitle() + " [ERROR]");
        }












    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTit = new javax.swing.JLabel();
        panCon = new javax.swing.JPanel();
        tabFrm = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        panGen = new javax.swing.JPanel();
        lblDirCli1 = new javax.swing.JLabel();
        txtPerCon = new javax.swing.JTextField();
        lblIde1 = new javax.swing.JLabel();
        txtTlf1 = new javax.swing.JTextField();
        lblIde2 = new javax.swing.JLabel();
        txttlfFax = new javax.swing.JTextField();
        lblIde3 = new javax.swing.JLabel();
        txtTlf2 = new javax.swing.JTextField();
        lblBen1 = new javax.swing.JLabel();
        txtCodExp = new javax.swing.JTextField();
        txtNomExp = new javax.swing.JTextField();
        butExp = new javax.swing.JButton();
        lblWebCli2 = new javax.swing.JLabel();
        txtDirExp = new javax.swing.JTextField();
        lblCiu = new javax.swing.JLabel();
        txtCodCiu = new javax.swing.JTextField();
        txtDesCorCiu = new javax.swing.JTextField();
        txtDesLarCiu = new javax.swing.JTextField();
        butCiu = new javax.swing.JButton();
        lblWebCli3 = new javax.swing.JLabel();
        lblNomPed = new javax.swing.JLabel();
        txtNomExpPed = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaObs1 = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaObs2 = new javax.swing.JTextArea();
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        lblTit.setFont(new java.awt.Font("SansSerif", 1, 11));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Maestro Clientes"); // NOI18N
        lblTit.setName(""); // NOI18N
        lblTit.setPreferredSize(new java.awt.Dimension(95, 12));
        getContentPane().add(lblTit, java.awt.BorderLayout.NORTH);

        panCon.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        panGen.setPreferredSize(new java.awt.Dimension(0, 170));
        panGen.setRequestFocusEnabled(false);
        panGen.setLayout(null);

        lblDirCli1.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblDirCli1.setText("Persona de contacto:"); // NOI18N
        panGen.add(lblDirCli1);
        lblDirCli1.setBounds(4, 100, 120, 20);

        txtPerCon.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPerConFocusGained(evt);
            }
        });
        panGen.add(txtPerCon);
        txtPerCon.setBounds(136, 100, 544, 20);

        lblIde1.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblIde1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblIde1.setText("Teléfono 2:"); // NOI18N
        panGen.add(lblIde1);
        lblIde1.setBounds(280, 80, 66, 20);
        panGen.add(txtTlf1);
        txtTlf1.setBounds(136, 80, 140, 20);

        lblIde2.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblIde2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblIde2.setText("Teléfono 1:"); // NOI18N
        panGen.add(lblIde2);
        lblIde2.setBounds(4, 80, 120, 20);
        panGen.add(txttlfFax);
        txttlfFax.setBounds(550, 80, 130, 20);

        lblIde3.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblIde3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblIde3.setText("Fax:"); // NOI18N
        panGen.add(lblIde3);
        lblIde3.setBounds(500, 80, 40, 20);
        panGen.add(txtTlf2);
        txtTlf2.setBounds(350, 80, 130, 20);

        lblBen1.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblBen1.setText("Código:");
        lblBen1.setToolTipText("Beneficiario");
        panGen.add(lblBen1);
        lblBen1.setBounds(4, 0, 62, 20);

        txtCodExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodExpActionPerformed(evt);
            }
        });
        txtCodExp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodExpFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodExpFocusLost(evt);
            }
        });
        panGen.add(txtCodExp);
        txtCodExp.setBounds(136, 0, 124, 20);
        panGen.add(txtNomExp);
        txtNomExp.setBounds(136, 20, 544, 20);

        butExp.setText("...");
        butExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butExpActionPerformed(evt);
            }
        });
        panGen.add(butExp);
        butExp.setBounds(260, 0, 20, 20);

        lblWebCli2.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblWebCli2.setText("Nombre:"); // NOI18N
        lblWebCli2.setToolTipText("Direcciòn de la pagina del cliente/proveedor"); // NOI18N
        panGen.add(lblWebCli2);
        lblWebCli2.setBounds(4, 20, 130, 20);

        txtDirExp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDirExpFocusGained(evt);
            }
        });
        panGen.add(txtDirExp);
        txtDirExp.setBounds(136, 60, 544, 20);

        lblCiu.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblCiu.setText("Ciudad:");
        panGen.add(lblCiu);
        lblCiu.setBounds(4, 122, 110, 15);
        panGen.add(txtCodCiu);
        txtCodCiu.setBounds(104, 120, 30, 20);

        txtDesCorCiu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorCiuActionPerformed(evt);
            }
        });
        txtDesCorCiu.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorCiuFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorCiuFocusLost(evt);
            }
        });
        panGen.add(txtDesCorCiu);
        txtDesCorCiu.setBounds(136, 120, 116, 20);

        txtDesLarCiu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarCiuActionPerformed(evt);
            }
        });
        txtDesLarCiu.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarCiuFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarCiuFocusLost(evt);
            }
        });
        panGen.add(txtDesLarCiu);
        txtDesLarCiu.setBounds(252, 120, 288, 20);

        butCiu.setText("...");
        butCiu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCiuActionPerformed(evt);
            }
        });
        panGen.add(butCiu);
        butCiu.setBounds(540, 120, 20, 20);

        lblWebCli3.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblWebCli3.setText("Dirección:"); // NOI18N
        panGen.add(lblWebCli3);
        lblWebCli3.setBounds(4, 60, 130, 20);

        lblNomPed.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblNomPed.setText("Nombre:"); // NOI18N
        lblNomPed.setToolTipText("Direcciòn de la pagina del cliente/proveedor"); // NOI18N
        panGen.add(lblNomPed);
        lblNomPed.setBounds(4, 40, 130, 20);
        panGen.add(txtNomExpPed);
        txtNomExpPed.setBounds(136, 40, 544, 20);

        jPanel1.add(panGen, java.awt.BorderLayout.NORTH);

        jPanel4.setPreferredSize(new java.awt.Dimension(100, 120));
        jPanel4.setRequestFocusEnabled(false);
        jPanel4.setLayout(new java.awt.GridLayout(2, 1));

        jPanel5.setPreferredSize(new java.awt.Dimension(296, 90));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        jLabel3.setText("  Observación 1:");
        jLabel3.setPreferredSize(new java.awt.Dimension(136, 0));
        jPanel5.add(jLabel3, java.awt.BorderLayout.WEST);

        jPanel6.setLayout(new java.awt.GridLayout(1, 0));

        txaObs1.setColumns(20);
        txaObs1.setLineWrap(true);
        txaObs1.setRows(5);
        jScrollPane1.setViewportView(txaObs1);

        jPanel6.add(jScrollPane1);

        jPanel5.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel5);

        jPanel7.setPreferredSize(new java.awt.Dimension(296, 90));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 11));
        jLabel4.setText("  Observación 2:");
        jLabel4.setPreferredSize(new java.awt.Dimension(136, 0));
        jPanel7.add(jLabel4, java.awt.BorderLayout.WEST);

        jPanel8.setLayout(new java.awt.GridLayout(1, 0));

        txaObs2.setColumns(20);
        txaObs2.setLineWrap(true);
        txaObs2.setRows(5);
        jScrollPane2.setViewportView(txaObs2);

        jPanel8.add(jScrollPane2);

        jPanel7.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel7);

        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", jPanel1);

        panCon.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setPreferredSize(new java.awt.Dimension(100, 44));
        panBar.setLayout(new java.awt.BorderLayout());
        panCon.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panCon, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
    // TODO add your handling code here:
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="¿Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                //Cerrar la conexión si está abierta.
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e)
        {
            dispose();
        }
}//GEN-LAST:event_exitForm

private void txtCodExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodExpActionPerformed
    // TODO add your handling code here:
    txtCodExp.transferFocus();
}//GEN-LAST:event_txtCodExpActionPerformed

private void txtCodExpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodExpFocusLost
    // TODO add your handling code here:
    if (txtCodExp.isEditable()) {
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtCodExp.getText().equalsIgnoreCase(strCodExp)) {
            if (txtCodExp.getText().equals("")) {
                txtCodExp.setText("");
                txtNomExp.setText("");
            } else {
                mostrarVenConExp(1);
            }
        } else
            txtCodExp.setText(strCodExp);
    }
}//GEN-LAST:event_txtCodExpFocusLost

private void butExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butExpActionPerformed
    // TODO add your handling code here:
    strCodExp=txtCodExp.getText();
    mostrarVenConExp(0);

}//GEN-LAST:event_butExpActionPerformed

private void txtPerConFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPerConFocusGained
    // TODO add your handling code here:
    txtPerCon.selectAll();
    txtPerCon.requestFocus();
}//GEN-LAST:event_txtPerConFocusGained

private void txtCodExpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodExpFocusGained
    // TODO add your handling code here:
    txtCodExp.selectAll();
    txtCodExp.requestFocus();
}//GEN-LAST:event_txtCodExpFocusGained

private void txtDirExpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDirExpFocusGained
    // TODO add your handling code here:
}//GEN-LAST:event_txtDirExpFocusGained

private void txtDesCorCiuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorCiuActionPerformed
    // TODO add your handling code here:
    txtDesCorCiu.transferFocus();
}//GEN-LAST:event_txtDesCorCiuActionPerformed

private void txtDesCorCiuFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorCiuFocusGained
    // TODO add your handling code here:
    strDesCorCiu=txtDesCorCiu.getText();
    txtDesCorCiu.selectAll();
}//GEN-LAST:event_txtDesCorCiuFocusGained

private void txtDesCorCiuFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorCiuFocusLost
    if (!txtDesCorCiu.getText().equalsIgnoreCase(strDesCorCiu)) {
        if (txtDesCorCiu.getText().equals("")) {
            txtCodCiu.setText("");
            txtDesLarCiu.setText("");
        } else {
            mostrarVenConCiu(1);
        }
    } else
        txtDesCorCiu.setText(strDesCorCiu);
}//GEN-LAST:event_txtDesCorCiuFocusLost

private void txtDesLarCiuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarCiuActionPerformed
    // TODO add your handling code here:
    txtDesLarCiu.transferFocus();
}//GEN-LAST:event_txtDesLarCiuActionPerformed

private void txtDesLarCiuFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarCiuFocusGained
    // TODO add your handling code here:
    strDesLarCiu=txtDesLarCiu.getText();
    txtDesLarCiu.selectAll();
}//GEN-LAST:event_txtDesLarCiuFocusGained

private void txtDesLarCiuFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarCiuFocusLost
    //Validar el contenido de la celda sólo si ha cambiado.
    if (!txtDesLarCiu.getText().equalsIgnoreCase(strDesLarCiu)) {
        if (txtDesLarCiu.getText().equals("")) {
            txtCodCiu.setText("");
            txtDesCorCiu.setText("");
        } else {
            mostrarVenConCiu(2);
        }
    } else
        txtDesLarCiu.setText(strDesLarCiu);
}//GEN-LAST:event_txtDesLarCiuFocusLost

private void butCiuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCiuActionPerformed
    // TODO add your handling code here:
    mostrarVenConCiu(0);
}//GEN-LAST:event_butCiuActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCiu;
    private javax.swing.JButton butExp;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBen1;
    private javax.swing.JLabel lblCiu;
    private javax.swing.JLabel lblDirCli1;
    private javax.swing.JLabel lblIde1;
    private javax.swing.JLabel lblIde2;
    private javax.swing.JLabel lblIde3;
    private javax.swing.JLabel lblNomPed;
    private javax.swing.JLabel lblTit;
    private javax.swing.JLabel lblWebCli2;
    private javax.swing.JLabel lblWebCli3;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panCon;
    private javax.swing.JPanel panGen;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTextArea txaObs1;
    private javax.swing.JTextArea txaObs2;
    private javax.swing.JTextField txtCodCiu;
    private javax.swing.JTextField txtCodExp;
    private javax.swing.JTextField txtDesCorCiu;
    private javax.swing.JTextField txtDesLarCiu;
    private javax.swing.JTextField txtDirExp;
    private javax.swing.JTextField txtNomExp;
    private javax.swing.JTextField txtNomExpPed;
    private javax.swing.JTextField txtPerCon;
    private javax.swing.JTextField txtTlf1;
    private javax.swing.JTextField txtTlf2;
    private javax.swing.JTextField txttlfFax;
    // End of variables declaration//GEN-END:variables


    /** Configurar el formulario. */
    private boolean configurarFrm(){
        boolean blnRes=true;
        try{
            //Inicializar objetos.
            objUti=new ZafUtil();
            objTooBar=new MiToolBar(this);
            
            objDocLis=new ZafDocLis();
            panBar.add(objTooBar);
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.2");
            lblTit.setText(strAux);
            txtCodExp.setBackground(objParSis.getColorCamposSistema());
            txtNomExp.setBackground(objParSis.getColorCamposObligatorios());

            txtCodCiu.setVisible(false);

            configurarVenConExp();
            configurarVenConCiu();
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta clase implementa la interface DocumentListener que observa los cambios que
     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
     * Se la usa en el sistema para determinar si existe algún cambio que se deba grabar
     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
     * presentará un mensaje advirtiendo que si no guarda los cambios los perderá.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener 
    {
        public void changedUpdate(javax.swing.event.DocumentEvent evt)        {
            blnHayCam=true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }
    }
    
    
    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private void agregarDocLis()
    {
        txtCodExp.getDocument().addDocumentListener(objDocLis);
        txtNomExp.getDocument().addDocumentListener(objDocLis);
        txtDirExp.getDocument().addDocumentListener(objDocLis);
        txtTlf1.getDocument().addDocumentListener(objDocLis);
        txtTlf2.getDocument().addDocumentListener(objDocLis);
        txttlfFax.getDocument().addDocumentListener(objDocLis);
        txtPerCon.getDocument().addDocumentListener(objDocLis);
        txtCodCiu.getDocument().addDocumentListener(objDocLis);
        txtDesCorCiu.getDocument().addDocumentListener(objDocLis);
        txtDesLarCiu.getDocument().addDocumentListener(objDocLis);
        txaObs1.getDocument().addDocumentListener(objDocLis);
        txaObs2.getDocument().addDocumentListener(objDocLis);
    } 
    
    

    
    /**
     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
     * insertar, consultar, modificar, eliminar, etc. Además de los botones de navegación
     * que permiten desplazarse al primero, anterior, siguiente y último registro.
     */
    private class MiToolBar extends ZafToolBar
    {
        public MiToolBar(javax.swing.JInternalFrame ifrFrm)
        {
            super(ifrFrm, objParSis);
        }

        public boolean aceptar() {
            return true;
        }

        public boolean afterAceptar() {
            return true;
        }

        public boolean afterAnular() {
            return true;
        }

        public boolean afterCancelar() {
            return true;
        }

        public boolean afterConsultar() {
            return true;
        }

        public boolean afterEliminar() {
            return true;
        }

        public boolean afterImprimir() {
            return true;
        }

        public boolean afterInsertar() {
            blnHayCam=false;
            objTooBar.setEstado('w');
            consultarReg();
            blnHayCam=false;
            return true;
        }

        public boolean afterModificar() {
            blnHayCam=false;
            objTooBar.setEstado('w');
            cargarReg();
            return true;
        }

        public boolean afterVistaPreliminar() {
            return true;
        }

        public boolean anular() {
            if (!anularReg())
                return false;
            objTooBar.setEstadoRegistro("Anulado");
            blnHayCam=false;
            return true;
        }

        public boolean beforeAceptar() {
            return true;
        }

        public boolean beforeAnular() {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible anular un documento eliminado.");
                return false;
            }
            if (strAux.equals("Anulado"))
            {
                mostrarMsgInf("El documento ya está ANULADO.\nNo es posible anular un documento anulado.");
                return false;
            }
            return true;
        }

        public boolean beforeCancelar() {
            return true;
        }

        public boolean beforeConsultar() {
            return true;
        }

        public boolean beforeEliminar() {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                mostrarMsgInf("El documento ya está ELIMINADO.\nNo es posible eliminar un documento eliminado.");
                return false;
            }
            return true;
        }

        public boolean beforeImprimir() {
            return true;
        }

        public boolean beforeInsertar() {
            if (!isCamVal())
                return false;
            return true;
        }

        public boolean beforeModificar() {
            boolean blnRes=true;
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible modificar un documento eliminado.");
                blnRes=false;
            }
            if (strAux.equals("Anulado"))
            {
                mostrarMsgInf("El documento está ANULADO.\nNo es posible modificar un documento anulado.");
                blnRes=false;
            }
            if (!isCamVal())
                return false;
            return blnRes;
        }

        public boolean beforeVistaPreliminar() {
            return true;
        }

        public boolean cancelar() {
            boolean blnRes=true;
            try
            {
                if (blnHayCam)
                {
                    if (objTooBar.getEstado()=='n' || objTooBar.getEstado()=='m')
                    {
                        if (!isRegPro())
                            return false;
                    }
                }
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            limpiarFrm();
            blnHayCam=false;
            return blnRes;
        }

        public void clickAceptar() {
            
        }

        public void clickAnterior() {
            try
            {
                if (!rstCab.isFirst())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.previous();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.previous();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnular() {
            
        }

        public void clickCancelar() {
            
        }

        public void clickConsultar() {
            txtCodExp.requestFocus();
        }

        public void clickEliminar() {
            
        }

        public void clickFin() {
            try
            {
                if (!rstCab.isLast())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.last();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.last();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickImprimir() {
            
        }

        public void clickInicio() {
            try
            {
                if (!rstCab.isFirst())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.first();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.first();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickInsertar() {
            try{
                if (blnHayCam){
                    isRegPro();
                }
                limpiarFrm();
                txtCodExp.setEditable(false);
                txtNomExp.selectAll();
                txtNomExp.requestFocus();
                //Inicializar las variables que indican cambios.
                blnHayCam=false;
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickModificar() {
            txtCodExp.setEditable(false);
            cargarReg();
            txtNomExp.selectAll();
            txtNomExp.requestFocus();
        }

        public void clickSiguiente() {
            try
            {
                if (!rstCab.isLast())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.next();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.next();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickVisPreliminar() {
            
        }

        public boolean consultar() {
            consultarReg();
            return true;
        }

        public boolean eliminar() {
            try{
                if (!eliminarReg())
                    return false;
                //Desplazarse al siguiente registro si es posible.
                if (!rstCab.isLast()){
                    rstCab.next();
                    cargarReg();
                }
                else{
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                }
                blnHayCam=false;
            }
            catch (java.sql.SQLException e){
                return true;
            }
            return true;
        }

        public boolean imprimir() {
            return true;
        }

        public boolean insertar() {
            if (!insertarReg())
                return false;
            return true;
        }

        public boolean modificar() {
            if (!actualizarReg())
                return false;
            return true;
        }

        public boolean vistaPreliminar() {
            return true;
        }
        
    }

 
    /**
     * Esta función determina si los campos son válidos.
     * @return true: Si los campos son válidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal(){
        if (txtNomExp.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">nombre de exportador</FONT> es obligatorio.<BR>Escriba un nombre de exportador y vuelva a intentarlo.</HTML>");
            txtNomExp.requestFocus();
            txtNomExp.selectAll();
            return false;
        }


        return true;
    }
    
    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje de advertencia al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos se han cargado
     * con errores y que debe revisar dichos datos.
     */
    private void mostrarMsgAdv(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        if (strMsg.equals(""))
            strMsg="<HTML>Este registro tiene <FONT COLOR=\"red\">problemas</FONT>. <BR>Notifíquelo a su administrador del sistema.</HTML>";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.WARNING_MESSAGE);
    }
    
    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private boolean isRegPro()
    {
        boolean blnRes=true;
        strAux="¿Desea guardar los cambios efectuados a éste registro?\n";
        strAux+="Si no guarda los cambios perderá toda la información que no haya guardado.";
        switch (mostrarMsgCon(strAux))
        {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado())
                {
                    case 'n': //Insertar
                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }
    
    /**
     * Esta función permite limpiar el formulario.
     * @return true: Si se pudo limpiar la ventana sin ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean limpiarFrm(){
        boolean blnRes=true;
        try{
            txtCodExp.setText("");
            txtNomExp.setText("");
            txtDirExp.setText("");
            txtTlf1.setText("");
            txtTlf2.setText("");
            txttlfFax.setText("");
            txtPerCon.setText("");
            txtCodCiu.setText("");
            txtDesCorCiu.setText("");
            txtDesLarCiu.setText("");
            txaObs1.setText("");
            txaObs2.setText("");
            
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
   
    
    
    /**
     * Esta función inserta el registro en la base de datos.
     * @return true: Si se pudo insertar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (insertar_tbmExpImp()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
        
    
    
    /**
     * Esta función permite insertar la cabecera de un registro.
     * @return true: Si se pudo insertar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertar_tbmExpImp(){
        int intUltReg;
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;

                //Obtener el código del último registro.
                strSQL="";
                strSQL+="SELECT MAX(a1.co_exp)";
                strSQL+=" FROM tbm_expImp AS a1";
                intUltReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intUltReg==-1)
                    return false;
                intUltReg++;
                txtCodExp.setText("" + intUltReg);
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="INSERT INTO tbm_expimp(";
                strSQL+="             co_exp, tx_nom, tx_nom2, tx_dir, tx_tel1, tx_tel2, tx_fax, tx_percon,";
                strSQL+="             co_ciu, tx_obs1, tx_obs2, st_reg, fe_ing, fe_ultmod,";
                strSQL+="             co_usring, co_usrmod)";
                strSQL+=" VALUES (";
                strSQL+="" + txtCodExp.getText() + "";//co_exp
                strSQL+="," + objUti.codificar(txtNomExp.getText()) + "";//tx_nom
                strSQL+="," + objUti.codificar(txtNomExpPed.getText()) + "";//tx_nom2
                strSQL+="," + objUti.codificar(txtDirExp.getText()) + "";//tx_dir
                strSQL+="," + objUti.codificar(txtTlf1.getText()) + "";//tx_tel1
                strSQL+="," + objUti.codificar(txtTlf2.getText()) + "";//tx_tel2
                strSQL+="," + objUti.codificar(txttlfFax.getText()) + "";//tx_fax
                strSQL+="," + objUti.codificar(txtPerCon.getText()) + "";//tx_percon
                strSQL+=", " + objUti.codificar(txtCodCiu.getText()) + "";//co_ciu
                strSQL+="," + objUti.codificar(txaObs1.getText()) + "";//tx_obs1
                strSQL+="," + objUti.codificar(txaObs2.getText()) + "";//tx_obs2
                strSQL+=",'A'";//st_reg
                strAux=objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos());
                strSQL+=",'" + strAux + "'";//fe_ing
                strSQL+=",'" + strAux + "'";//fe_ultmod
                strSQL+="," + objParSis.getCodigoUsuario() + "";//co_usring
                strSQL+="," + objParSis.getCodigoUsuario() + "";//co_usrmod

                strSQL+=");";
                System.out.println("insertar_tbmCtaBan: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función obtiene la descripción larga del estado del registro.
     * @param estado El estado del registro. Por ejemplo: A, I, etc.
     * @return La descripción larga del estado del registro.
     * <BR>Nota.- Si la cadena recibida es <I>null</I> la función devuelve una cadena vacía.
     */
    private String getEstReg(String estado)
    {
        if (estado==null)
            estado="";
        else
            switch (estado.charAt(0))
            {
                case 'A':
                    estado="Activo";
                    break;
                case 'I':
                    estado="Anulado";
                    break;
                case 'P':
                    estado="Pendiente de autorizar";
                    break;
                case 'D':
                    estado="Autorización denegada";
                    break;
                case 'R':
                    estado="Pendiente de impresión";
                    break;
                case 'C':
                    estado="Pendiente confirmación de inventario";
                    break;
                case 'F':
                    estado="Existen diferencias de inventario";
                    break;
                default:
                    estado="Desconocido";
                    break;
            }
        return estado;
    }


    
    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean consultarReg(){
        boolean blnRes=true;
        try{
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null){
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                //Validar que sólo se muestre los documentos asignados al programa.
                strSQL="";
                strSQL+="SELECT a1.co_exp";
                strSQL+=" FROM tbm_expImp AS a1";
                strSQL+=" WHERE a1.st_reg NOT IN('E')";
                    
                strAux=txtCodExp.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_exp=" + strAux.replaceAll("'", "''") + "";
                strAux=txtPerCon.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND LOWER(a1.tx_percon) LIKE '" + strAux.replaceAll("'", "''").replace('*', '%').toLowerCase() + "' ";

                strSQL+=" ORDER BY a1.co_exp";
                System.out.println("consultarReg:" + strSQL);
                rstCab=stmCab.executeQuery(strSQL);
                if (rstCab.next())
                {
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                }
                else
                {
                    mostrarMsgInf("No se ha encontrado ningún registro que cumpla el criterio de búsqueda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite cargar el registro seleccionado.
     * @return true: Si se pudo cargar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            if (cargarCabReg()){
            }
            blnHayCam=false;
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite cargar la cabecera del registro seleccionado.
     * @return true: Si se pudo cargar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarCabReg(){
        int intPosRel;
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT a1.co_exp, a1.tx_nom, a1.tx_nom2, a1.tx_dir, a1.tx_tel1, a1.tx_tel2, a1.tx_fax, a1.tx_percon,";
                strSQL+=" a1.co_ciu, a1.tx_obs1, a1.tx_obs2, a1.st_reg, a1.fe_ing, a1.fe_ultmod,";
                strSQL+=" a1.co_usring, a1.co_usrmod, a2.tx_desCor AS tx_desCorCiu, a2.tx_desLar AS tx_desLarCiu";
                strSQL+=" FROM tbm_expimp AS a1 LEFT OUTER JOIN tbm_ciu AS a2 ON a1.co_ciu=a2.co_ciu";
                strSQL+=" WHERE a1.co_exp=" + rstCab.getString("co_exp");
                strSQL+=" AND a1.st_reg NOT IN('E')";
                System.out.println("cargarCabReg:" + strSQL);
                rst=stm.executeQuery(strSQL);
                if (rst.next()){
                    strAux=rst.getString("co_exp");
                    txtCodExp.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_nom");
                    txtNomExp.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_nom2");
                    txtNomExpPed.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_dir");
                    txtDirExp.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_tel1");
                    txtTlf1.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_tel2");
                    txtTlf2.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_fax");
                    txttlfFax.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_percon");
                    txtPerCon.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("co_ciu");
                    txtCodCiu.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_desCorCiu");
                    txtDesCorCiu.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_desLarCiu");
                    txtDesLarCiu.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_obs1");
                    txaObs1.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_obs2");
                    txaObs2.setText((strAux==null)?"":strAux);
                                       
                    //Mostrar el estado del registro.
                    strAux=rst.getString("st_reg");
                    objTooBar.setEstadoRegistro(getEstReg(strAux));
                }
                else
                {
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                    blnRes=false;
                }
            }
            rst.close();
            stm.close();
            con.close();
            rst=null;
            stm=null;
            con=null;
            //Mostrar la posición relativa del registro.
            intPosRel=rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    

    /**
     * Esta función actualiza el registro en la base de datos.
     * @return true: Si se pudo actualizar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (actualizar_tbmCtaban()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();

            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función permite actualizar la cabecera de un registro.
     * @return true: Si se pudo actualizar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizar_tbmCtaban(){
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_expimp";
                strSQL+=" SET tx_nom=" + objUti.codificar(txtNomExp.getText()) + "";
                strSQL+=", tx_nom2=" + objUti.codificar(txtNomExpPed.getText()) + "";
                strSQL+=", tx_dir=" + objUti.codificar(txtDirExp.getText()) + "";
                strSQL+=", tx_tel1=" + objUti.codificar(txtTlf1.getText()) + "";
                strSQL+=", tx_tel2=" + objUti.codificar(txtTlf2.getText()) + "";
                strSQL+=", tx_fax=" + objUti.codificar(txttlfFax.getText()) + "";
                strSQL+=", tx_percon=" + objUti.codificar(txtPerCon.getText()) + "";
                strSQL+=", co_ciu=" + objUti.codificar(txtCodCiu.getText()) + "";
                strSQL+=", tx_obs1=" + objUti.codificar(txaObs1.getText()) + "";
                strSQL+=", tx_obs2=" + objUti.codificar(txaObs2.getText()) + "";
                strSQL+=", fe_ultMod='" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "'";
                strSQL+=", co_usrMod=" + objParSis.getCodigoUsuario();
                strSQL+=" WHERE co_exp=" + rstCab.getString("co_exp");
                System.out.println("UPDATE tbm_expimp: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
                datFecAux=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función anula el registro de la base de datos.
     * @return true: Si se pudo anular el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean anularReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (anular_tbmExp()){//no se anula tbm_conCli
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función permite anular la cabecera de un registro.
     * @return true: Si se pudo anular la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean anular_tbmExp(){
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_expImp";
                strSQL+=" SET st_reg='I'";
                strSQL+=", fe_ultMod='" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "'";
                strSQL+=", co_usrMod=" + objParSis.getCodigoUsuario();
                strSQL+=" WHERE co_exp=" + rstCab.getString("co_exp");
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
                datFecAux=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función elimina el registro de la base de datos.
     * @return true: Si se pudo eliminar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (eliminar_tbmExp()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función permite anular la cabecera de un registro.
     * @return true: Si se pudo anular la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminar_tbmExp(){
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_expImp";
                strSQL+=" SET st_reg='E'";
                strSQL+=", fe_ultMod='" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "'";
                strSQL+=", co_usrMod=" + objParSis.getCodigoUsuario();
                strSQL+=" WHERE co_exp=" + rstCab.getString("co_exp");
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
                datFecAux=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    


    private boolean configurarVenConExp()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_exp");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("414");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_exp, a1.tx_nom";
            strSQL+=" FROM tbm_expimp as a1";
            strSQL+=" WHERE a1.st_reg NOT IN('I','E')";

            vcoExp=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de exportadores", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoExp.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConExp(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoExp.setCampoBusqueda(2);
                    vcoExp.show();
                    if (vcoExp.getSelectedButton()==vcoExp.INT_BUT_ACE)
                    {
                        txtCodExp.setText(vcoExp.getValueAt(1));
                        txtNomExp.setText(vcoExp.getValueAt(2));
                    }
                    break;
                case 1: //Básqueda directa por "Námero de cuenta".
                    if (vcoExp.buscar("a1.co_exp", txtCodExp.getText()))
                    {
                        txtCodExp.setText(vcoExp.getValueAt(1));
                        txtNomExp.setText(vcoExp.getValueAt(2));
                    }
                    else
                    {
                        vcoExp.setCampoBusqueda(0);
                        vcoExp.setCriterio1(11);
                        vcoExp.cargarDatos();
                        vcoExp.show();
                        if (vcoExp.getSelectedButton()==vcoExp.INT_BUT_ACE)
                        {
                            txtCodExp.setText(vcoExp.getValueAt(1));
                            txtNomExp.setText(vcoExp.getValueAt(2));
                        }
                        else
                        {
                            txtCodExp.setText(strCodExp);
                        }
                    }
                    break;
                case 2: //Básqueda directa por "Descripcián larga".
                    if (vcoExp.buscar("a1.tx_nom", txtNomExp.getText()))
                    {
                        txtCodExp.setText(vcoExp.getValueAt(1));
                        txtNomExp.setText(vcoExp.getValueAt(2));
                    }
                    else
                    {
                        vcoExp.setCampoBusqueda(2);
                        vcoExp.setCriterio1(11);
                        vcoExp.cargarDatos();
                        vcoExp.show();
                        if (vcoExp.getSelectedButton()==vcoExp.INT_BUT_ACE)
                        {
                            txtCodExp.setText(vcoExp.getValueAt(1));
                            txtNomExp.setText(vcoExp.getValueAt(2));
                        }
                        else
                        {
                            txtNomExp.setText(strNomExp);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConCiu(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoCiu.setCampoBusqueda(1);
                    vcoCiu.show();
                    if (vcoCiu.getSelectedButton()==vcoCiu.INT_BUT_ACE){
                        txtCodCiu.setText(vcoCiu.getValueAt(1));
                        txtDesCorCiu.setText(vcoCiu.getValueAt(2));
                        txtDesLarCiu.setText(vcoCiu.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Descripción corta".
                    if (vcoCiu.buscar("a1.tx_desCor", txtDesCorCiu.getText())){
                        txtCodCiu.setText(vcoCiu.getValueAt(1));
                        txtDesCorCiu.setText(vcoCiu.getValueAt(2));
                        txtDesLarCiu.setText(vcoCiu.getValueAt(3));
                    }
                    else
                    {
                        vcoCiu.setCampoBusqueda(1);
                        vcoCiu.setCriterio1(11);
                        vcoCiu.cargarDatos();
                        vcoCiu.show();
                        if (vcoCiu.getSelectedButton()==vcoCiu.INT_BUT_ACE){
                            txtCodCiu.setText(vcoCiu.getValueAt(1));
                            txtDesCorCiu.setText(vcoCiu.getValueAt(2));
                            txtDesLarCiu.setText(vcoCiu.getValueAt(3));
                        }
                        else
                        {
                            txtDesCorCiu.setText(strDesCorCiu);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoCiu.buscar("a1.tx_desLar", txtDesLarCiu.getText()))
                    {
                        txtCodCiu.setText(vcoCiu.getValueAt(1));
                        txtDesCorCiu.setText(vcoCiu.getValueAt(2));
                        txtDesLarCiu.setText(vcoCiu.getValueAt(3));
                    }
                    else
                    {
                        vcoCiu.setCampoBusqueda(2);
                        vcoCiu.setCriterio1(11);
                        vcoCiu.cargarDatos();
                        vcoCiu.show();
                        if (vcoCiu.getSelectedButton()==vcoCiu.INT_BUT_ACE){
                            txtCodCiu.setText(vcoCiu.getValueAt(1));
                            txtDesCorCiu.setText(vcoCiu.getValueAt(2));
                            txtDesLarCiu.setText(vcoCiu.getValueAt(3));
                        }
                        else
                        {
                            txtDesLarCiu.setText(strDesLarCiu);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    private boolean configurarVenConCiu()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_ciu");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Alias");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT co_ciu, tx_descor, tx_deslar";
            strSQL+=" FROM tbm_ciu WHERE st_reg NOT IN('I','E')";

            vcoCiu=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de ciudades", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoCiu.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }





}
