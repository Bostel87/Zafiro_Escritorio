/*
 * ZafCon06.java
 *
 *  Created on 02 de noviembre de 2005, 11:25 PM
 */
package Compras.ZafCom39;
import Librerias.ZafDate.ZafDatePicker;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import java.util.Vector;
import java.sql.*;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut;
import Librerias.ZafTblUti.ZafTblCelEdiButGen.ZafTblCelEdiButGen;
import Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
/**
 *
 * @author  Eddye Lino
 */
public class ZafCom39 extends javax.swing.JInternalFrame 
{
    //Constantes: Columnas del JTable.
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_EMP=1;
    final int INT_TBL_DAT_COD_LOC=2;
    final int INT_TBL_DAT_COD_TIP_DOC=3;
    final int INT_TBL_DAT_DES_COR_TIP_DOC=4;
    final int INT_TBL_DAT_DES_LAR_TIP_DOC=5;
    final int INT_TBL_DAT_COD_DOC=6;
    final int INT_TBL_DAT_COD_MNU_DOC=7;
    final int INT_TBL_DAT_NUM_DOC=8;
    final int INT_TBL_DAT_FEC_DOC=9;
    final int INT_TBL_DAT_FEC_REI=10;
    final int INT_TBL_DAT_COD_USU_SOL=11;
    final int INT_TBL_DAT_USU_SOL=12;
    final int INT_TBL_DAT_BUT_VER_SOL=13;
    final int INT_TBL_DAT_CHK_AUT_SOL=14;
    final int INT_TBL_DAT_CHK_DEN_SOL=15;
    final int INT_TBL_DAT_CHK_CAN_SOL=16;
    final int INT_TBL_DAT_OBS_SOL=17;
    
    //Variables generales.

    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblFilCab objTblFilCab;
    private ZafTblMod objTblMod;
    private ZafTblEdi objTblEdi;                        //Editor: Editor del JTable.
    private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMen� en JTable.
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg;
    private Vector vecAux;
    private boolean blnCon;                             //true: Continua la ejecuci�n del hilo.
    private boolean blnHayCam;                          //Determina si hay cambios en el formulario.
    private java.util.Date datFecAux;                   //Auxiliar: Para almacenar fechas.
    
    private ZafTblCelRenChk objTblCelRenChkAut;
    private ZafTblCelRenChk objTblCelRenChkDen;
    private ZafTblCelRenChk objTblCelRenChkCan;
    
    private ZafTblCelEdiChk objTblCelEdiChkAut;
    private ZafTblCelEdiChk objTblCelEdiChkDen;
    private ZafTblCelEdiChk objTblCelEdiChkCan;
    
    private ZafTblCelRenBut objTblCelRenButSol;
    private ZafTblCelEdiButGen objTblCelEdiButGenSol;
    
    private ZafThreadGUI objThrGUI;
    private ZafTblOrd objTblOrd;
    
//    private ZafTblCelRenDat objTblCelRenDat;
//    private ZafTblCelEdiDat objTblCelEdiDat;
    private ZafTblCelEdiTxt objTblCelEdiTxt;
    
    private ZafDatePicker dtpFecSis, dtpFecVenChq;
    private String strFecSis;
    private ZafTblBus objTblBus;
    
    /** Crea una nueva instancia de la clase ZafCon06. */
    public ZafCom39(ZafParSis obj){
        try{
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
        }
        catch (CloneNotSupportedException e){
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGen = new javax.swing.JPanel();
        panGenCab = new javax.swing.JPanel();
        chkMosSolPen = new javax.swing.JCheckBox();
        chkMosSolAut = new javax.swing.JCheckBox();
        panGenDet = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butGua = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panGen.setLayout(new java.awt.BorderLayout());

        panGenCab.setPreferredSize(new java.awt.Dimension(0, 38));
        panGenCab.setRequestFocusEnabled(false);
        panGenCab.setLayout(null);

        chkMosSolPen.setSelected(true);
        chkMosSolPen.setText("Mostrar solicitudes pendientes de autorizar");
        chkMosSolPen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMosSolPenActionPerformed(evt);
            }
        });
        panGenCab.add(chkMosSolPen);
        chkMosSolPen.setBounds(0, 0, 310, 18);

        chkMosSolAut.setText("Mostrar solicitudes autorizadas");
        chkMosSolAut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMosSolAutActionPerformed(evt);
            }
        });
        panGenCab.add(chkMosSolAut);
        chkMosSolAut.setBounds(0, 18, 310, 18);

        panGen.add(panGenCab, java.awt.BorderLayout.NORTH);

        panGenDet.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDat.setViewportView(tblDat);

        panGenDet.add(spnDat, java.awt.BorderLayout.CENTER);

        panGen.add(panGenDet, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panGen);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setPreferredSize(new java.awt.Dimension(0, 50));
        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 2));

        butCon.setMnemonic('C');
        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butGua.setMnemonic('G');
        butGua.setText("Guardar");
        butGua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGuaActionPerformed(evt);
            }
        });
        panBot.add(butGua);

        butCer.setMnemonic('r');
        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        configurarFrm();
    }//GEN-LAST:event_formInternalFrameOpened

    /** Cerrar la aplicaci�n. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        try{
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="�Est� seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                //Cerrar la conexi�n si est� abierta.
                if (rst!=null){
                    rst.close();
                    stm.close();
                    con.close();
                    rst=null;
                    stm=null;
                    con=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e){
            dispose();
        }
    }//GEN-LAST:event_exitForm

private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
    //Realizar acci�n de acuerdo a la etiqueta del bot�n ("Consultar" o "Detener").
    if (butCon.getText().equals("Consultar")){
        blnCon=true;
        if (objThrGUI==null){
            objThrGUI=new ZafThreadGUI();
            objThrGUI.start();
        }            
    }
    else
    {
        blnCon=false;
    }
}//GEN-LAST:event_butConActionPerformed

private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
    exitForm(null);
}//GEN-LAST:event_butCerActionPerformed

private void butGuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGuaActionPerformed
// TODO add your handling code here:
    if(guardarDatos()){
        mostrarMsgInf("<HTML>La información se guardó correctamente.</HTML>");
        objTblMod.removeAllRows();
        cargarDetReg();
    }
    else{
        mostrarMsgInf("<HTML>La información no se pudo guardar.<BR>Verifique y vuelva a intentarlo.</HTML>");
    }
    
    
    
}//GEN-LAST:event_butGuaActionPerformed

private void chkMosSolPenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMosSolPenActionPerformed
// TODO add your handling code here:
    if( ! chkMosSolPen.isSelected())
        chkMosSolAut.setSelected(true);
}//GEN-LAST:event_chkMosSolPenActionPerformed

private void chkMosSolAutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMosSolAutActionPerformed
// TODO add your handling code here:
    if( ! chkMosSolAut.isSelected())
        chkMosSolPen.setSelected(true);
}//GEN-LAST:event_chkMosSolAutActionPerformed

    /** Cerrar la aplicaci�n. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butGua;
    private javax.swing.JCheckBox chkMosSolAut;
    private javax.swing.JCheckBox chkMosSolPen;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGen;
    private javax.swing.JPanel panGenCab;
    private javax.swing.JPanel panGenDet;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm(){
        boolean blnRes=true;
        try{
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.1");//para codigo con autorizaciones es 0.16 y para produccion 0.13.1
            lblTit.setText(strAux);
            //Configurar los JTables.
            configurarTblDat();
            objTblMod.insertRow();
            strFecSis = objUti.getFechaServidor(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos(),objParSis.getQueryFechaHoraBaseDatos(),objParSis.getFormatoFechaHoraBaseDatos());
            
            //Configurar ZafDatePicker:
            dtpFecSis=new ZafDatePicker(javax.swing.JOptionPane.getFrameForComponent(this),"d/m/y");
            dtpFecSis.setBackground(objParSis.getColorCamposObligatorios());
            dtpFecSis.setText(strFecSis);
            
            //Configurar ZafDatePicker:
            dtpFecVenChq=new ZafDatePicker(javax.swing.JOptionPane.getFrameForComponent(this),"d/m/y");
            dtpFecVenChq.setBackground(objParSis.getColorCamposObligatorios());
            dtpFecVenChq.setText("");
            
            
            
            
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci�n configura el JTable "tblDat".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDat()
    {
        boolean blnRes=true;
        try
        {
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(18);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_EMP,"COD.EMP.");
            vecCab.add(INT_TBL_DAT_COD_LOC,"COD.LOC.");
            vecCab.add(INT_TBL_DAT_COD_TIP_DOC,"COD.TIP.DOC");
            vecCab.add(INT_TBL_DAT_DES_COR_TIP_DOC,"DES.COR.TIP.DOC.");
            vecCab.add(INT_TBL_DAT_DES_LAR_TIP_DOC,"DES.LAR.TIP.DOC.");
            vecCab.add(INT_TBL_DAT_COD_DOC,"COD.DOC.");
            vecCab.add(INT_TBL_DAT_COD_MNU_DOC,"COD.MNU.DOC.");
            vecCab.add(INT_TBL_DAT_NUM_DOC,"NUM.DOC.");
            vecCab.add(INT_TBL_DAT_FEC_DOC,"FEC.DOC.");
            vecCab.add(INT_TBL_DAT_FEC_REI,"FEC.REI.");
            vecCab.add(INT_TBL_DAT_COD_USU_SOL,"COD.USU.SOL.");
            vecCab.add(INT_TBL_DAT_USU_SOL,"USU.SOL.");
            vecCab.add(INT_TBL_DAT_BUT_VER_SOL,"");
            vecCab.add(INT_TBL_DAT_CHK_AUT_SOL,"AUT.SOL.");
            vecCab.add(INT_TBL_DAT_CHK_DEN_SOL,"DEN.SOL.");
            vecCab.add(INT_TBL_DAT_CHK_CAN_SOL,"CAN.SOL.");
            vecCab.add(INT_TBL_DAT_OBS_SOL,"OBS.SOL.");
            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selecci�n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el men� de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_DES_COR_TIP_DOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_DES_LAR_TIP_DOC).setPreferredWidth(150);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_MNU_DOC).setPreferredWidth(60);
            
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_FEC_REI).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_COD_USU_SOL).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_USU_SOL).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_DAT_BUT_VER_SOL).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_CHK_AUT_SOL).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_CHK_DEN_SOL).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_CHK_CAN_SOL).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_OBS_SOL).setPreferredWidth(150);
            
            
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_COD_MNU_DOC).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);

            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);
            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_FEC_REI);
            vecAux.add("" + INT_TBL_DAT_BUT_VER_SOL);
            vecAux.add("" + INT_TBL_DAT_CHK_AUT_SOL);
            vecAux.add("" + INT_TBL_DAT_CHK_DEN_SOL);
            vecAux.add("" + INT_TBL_DAT_CHK_CAN_SOL);
            vecAux.add("" + INT_TBL_DAT_OBS_SOL);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            //Configurar JTable: Editor de la tabla.
            objTblEdi=new ZafTblEdi(tblDat);
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);

            
            
            //PARA EL CAMPO DE FECHA DE VENCIMIENTO DEL CHEQUE
            objTblCelEdiTxt=new ZafTblCelEdiTxt(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FEC_REI).setCellEditor(objTblCelEdiTxt);
            objTblCelEdiTxt.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFil, intCol;
                String strDatFilColSelBef, strDatFilColSelAft;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFil=tblDat.getSelectedRow();
                    intCol=tblDat.getSelectedColumn();
                    if(objTblMod.getValueAt(intFil, INT_TBL_DAT_COD_MNU_DOC).toString().equals("2049")){
                        objTblCelEdiTxt.setCancelarEdicion(true);
                    }
                    else{
                        strDatFilColSelBef=objTblMod.getValueAt(intFil, intCol)==null?"":objTblMod.getValueAt(intFil, intCol).toString();
                        objTblCelEdiTxt.setCancelarEdicion(false);
                        if(strDatFilColSelBef.equals(""))
                            objTblMod.setValueAt("dd/MM/yyyy", intFil, INT_TBL_DAT_FEC_REI);
                    }
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFil=tblDat.getSelectedRow();
                    intCol=tblDat.getSelectedColumn();
                    if(objTblMod.getValueAt(intFil, INT_TBL_DAT_COD_MNU_DOC).toString().equals("2049")){
                        objTblCelEdiTxt.setCancelarEdicion(true);
                    }
                    else{
                        strDatFilColSelAft=objTblMod.getValueAt(intFil, intCol)==null?"":objTblMod.getValueAt(intFil, intCol).toString();
                        objTblCelEdiTxt.setCancelarEdicion(false);
                        if(strDatFilColSelAft.equals(""))
                            objTblMod.setValueAt(strDatFilColSelBef, intFil, INT_TBL_DAT_FEC_REI);
                    }
                }
            });
            
            
            //Configurar JTable: Renderizar celdas DE AUTORIZAR
            objTblCelRenChkAut=new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK_AUT_SOL).setCellRenderer(objTblCelRenChkAut);
            objTblCelRenChkAut=null;
            //Configurar JTable: Editor de celdas.
            objTblCelEdiChkAut=new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK_AUT_SOL).setCellEditor(objTblCelEdiChkAut);
            objTblCelEdiChkAut.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFil;
                int intCol;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFil=tblDat.getSelectedRow();
                    intCol=tblDat.getSelectedColumn();
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(objTblMod.isChecked(intFil, intCol)){
                        for(int j=INT_TBL_DAT_CHK_AUT_SOL; j<=INT_TBL_DAT_CHK_CAN_SOL; j++){
                            objTblMod.setChecked(false, intFil, j);
                            System.out.println("FALSE EN LA COLUMNA: " + j);
                        }
                        objTblMod.setChecked(true, intFil, intCol);
                        System.out.println("TRUE EN LA COLUMNA: " + intCol);
                    }
                }
            });
            
            
            //Configurar JTable: Renderizar celdas de DENEGAR
            objTblCelRenChkDen=new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK_DEN_SOL).setCellRenderer(objTblCelRenChkDen);
            objTblCelRenChkDen=null;
            //Configurar JTable: Editor de celdas.
            objTblCelEdiChkDen=new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK_DEN_SOL).setCellEditor(objTblCelEdiChkDen);
            objTblCelEdiChkDen.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFil;
                int intCol;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFil=tblDat.getSelectedRow();
                    intCol=tblDat.getSelectedColumn();
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(objTblMod.isChecked(intFil, intCol)){
                        for(int j=INT_TBL_DAT_CHK_AUT_SOL; j<=INT_TBL_DAT_CHK_CAN_SOL; j++){
                            objTblMod.setChecked(false, intFil, j);
                        }
                        objTblMod.setChecked(true, intFil, intCol);
                    }
                }
            });
            
            
            //Configurar JTable: Renderizar celdas de CANCELAR
            objTblCelRenChkCan=new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK_CAN_SOL).setCellRenderer(objTblCelRenChkCan);
            objTblCelRenChkCan=null;
            //Configurar JTable: Editor de celdas.
            objTblCelEdiChkCan=new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK_CAN_SOL).setCellEditor(objTblCelEdiChkCan);
            objTblCelEdiChkCan.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFil;
                int intCol;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFil=tblDat.getSelectedRow();
                    intCol=tblDat.getSelectedColumn();
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if(objTblMod.isChecked(intFil, intCol)){
                        for(int j=INT_TBL_DAT_CHK_AUT_SOL; j<=INT_TBL_DAT_CHK_CAN_SOL; j++){
                            objTblMod.setChecked(false, intFil, j);
                        }
                        objTblMod.setChecked(true, intFil, intCol);
                    }
                }
            });
            
            
            //Para el botón que carga la solicitud
            objTblCelRenButSol=new ZafTblCelRenBut();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_BUT_VER_SOL).setCellRenderer(objTblCelRenButSol);
            objTblCelEdiButGenSol=new ZafTblCelEdiButGen();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_BUT_VER_SOL).setCellEditor(objTblCelEdiButGenSol);
            objTblCelEdiButGenSol.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFilSel;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFilSel=tblDat.getSelectedRow();
                }
                public void actionPerformed(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    llamarVentanaSolicitud(intFilSel);
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
            });
            
            objTblBus=new ZafTblBus(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);
            
//            //DATE
//            objTblCelRenDat=new ZafTblCelRenDat();
//            tcmAux.getColumn(INT_TBL_DAT_FEC_REI).setCellRenderer(objTblCelRenDat);
//            objTblCelRenDat=null;
//            objTblCelEdiDat=new ZafTblCelEdiDat();
//            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FEC_REI).setCellEditor(objTblCelEdiDat);

            
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci�n determina si los campos son v�lidos.
     * @return true: Si los campos son v�lidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal(){
        return true;
    }
    

    /**
     * Esta funci�n muestra un mensaje informativo al usuario. Se podr�a utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta funci�n muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta funci�n muestra un mensaje de advertencia al usuario. Se podr�a utilizar
     * para mostrar al usuario un mensaje que indique que los datos se han cargado
     * con errores y que debe revisar dichos datos.
     */
    private void mostrarMsgAdv(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        if (strMsg.equals(""))
            strMsg="<HTML>Este registro tiene <FONT COLOR=\"red\">problemas</FONT>. <BR>Notif�quelo a su administrador del sistema.</HTML>";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.WARNING_MESSAGE);
    }



    
    /**
     * Esta funci�n permite limpiar el formulario.
     * @return true: Si se pudo limpiar la ventana sin ning�n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean limpiarFrm()
    {
        boolean blnRes=true;
        try{
            objTblMod.removeAllRows();
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }



    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren m�s espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD_EMP:
                    strMsg="Código de empresa";
                    break;
                case INT_TBL_DAT_COD_LOC:
                    strMsg="Código de local";
                    break;
                case INT_TBL_DAT_COD_TIP_DOC:
                    strMsg="Código de tipo de documento";
                    break;
                case INT_TBL_DAT_DES_COR_TIP_DOC:
                    strMsg="Descripción corta del tipo de documento";
                    break;
                case INT_TBL_DAT_DES_LAR_TIP_DOC:
                    strMsg="Descripción larga del tipo de documento";
                    break;
                case INT_TBL_DAT_COD_DOC:
                    strMsg="Código de documento";
                    break;
                case INT_TBL_DAT_COD_MNU_DOC:
                    strMsg="Código de menú de documento";
                    break;
                case INT_TBL_DAT_NUM_DOC:
                    strMsg="Número de documento";
                    break;
                case INT_TBL_DAT_FEC_DOC:
                    strMsg="Fecha de documento";
                    break;
                case INT_TBL_DAT_FEC_REI:
                    strMsg="Fecha de reingreso";
                    break;
                case INT_TBL_DAT_COD_USU_SOL:
                    strMsg="Código de usuario solicitante";
                    break;
                case INT_TBL_DAT_USU_SOL:
                    strMsg="Usuario solicitante";
                    break;
                case INT_TBL_DAT_BUT_VER_SOL:
                    strMsg="Ver solicitud";
                    break;
                case INT_TBL_DAT_CHK_AUT_SOL:
                    strMsg="Autorizar solicitud";
                    break;
                case INT_TBL_DAT_CHK_DEN_SOL:
                    strMsg="Denegar solicitud";
                    break;
                case INT_TBL_DAT_CHK_CAN_SOL:
                    strMsg="Cancelar solicitud";
                    break;
                case INT_TBL_DAT_OBS_SOL:
                    strMsg="Observación de la solicitud";
                    break;
                    
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }


    //DEBERIA HACERSE UNA FUNCION Q ENVIE COMO PARAMETRO CODIGO DE CLIENTE, Y OBJETO ZAFPARSIS PARA EN ESE NUEVO FORMULARIO CARGAR ESTE QUERY
    private void llamarVentanaSolicitud(int fila){
        int i=fila;
        int intCodEmp=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_EMP).toString());
        int intCodLoc=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC).toString());
        int intCodTipDoc=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC).toString());
        int intCodDoc=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC).toString());
        int intCodMnu=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_MNU_DOC).toString());
        
        System.out.println("intCodEmp: " + intCodEmp);
        System.out.println("intCodLoc: " + intCodLoc);
        System.out.println("intCodTipDoc: " + intCodTipDoc);
        System.out.println("intCodDoc: " + intCodDoc);
        System.out.println("intCodMnu: " + intCodMnu);
        
        Compras.ZafCom38.ZafCom38 objCom38_01=new Compras.ZafCom38.ZafCom38(objParSis, intCodEmp, intCodLoc, intCodTipDoc, intCodDoc, intCodMnu);
        //Compras.ZafCom38.ZafCom38 objCom38_01=new Compras.ZafCom38.ZafCom38(objParSis);
        this.getParent().add(objCom38_01,javax.swing.JLayeredPane.DEFAULT_LAYER);
        objCom38_01.show();
    }

    /**
     * Esta clase crea un hilo que permite manipular la interface gr�fica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que est� ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podr�a presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estar�a informado en todo
     * momento de lo que ocurre. Si se desea hacer �sto es necesario utilizar �sta clase
     * ya que si no s�lo se apreciar�a los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread{
        public void run(){
            //Limpiar objetos.
            objTblMod.removeAllRows();
            if (!cargarDetReg()){
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable s�lo cuando haya datos.
            if (tblDat.getRowCount()>0){
                tabFrm.setSelectedIndex(0);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }
    
    
    
    /**
     * Esta funci�n permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg(){
        int intCodEmp, intCodLoc, intNumTotReg, i;
        double dblSub, dblIva;
        boolean blnRes=true;
        String strEstSol="";
        String strFecRein="";
        try{
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            intCodEmp=objParSis.getCodigoEmpresa();
            intCodLoc=objParSis.getCodigoLocal();
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                //Obtener la condici�n.
                strSQL="";
                strSQL+="SELECT COUNT(*)";
                strSQL+=" FROM tbm_cabSolSalTemMer AS a1";
                strSQL+=" LEFT OUTER JOIN tbm_cabTipDoc AS a2 ";
                strSQL+=" ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc)";
                strSQL+=" LEFT OUTER JOIN tbm_cli AS a3 ";
                strSQL+=" ON (a1.co_emp=a3.co_emp AND a1.co_cli=a3.co_cli AND a3.st_reg='A')";
                strSQL+=" LEFT OUTER JOIN tbm_usr AS a4 ";
                strSQL+=" ON (a1.co_usrSol=a4.co_usr AND a4.st_reg='A')";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" AND a1.co_mnu IN(2039,2049)";
                if( (chkMosSolPen.isSelected()) && (chkMosSolAut.isSelected())  )
                    strSQL+=" AND a1.st_aut IN('A','P')";
                else if(chkMosSolPen.isSelected())
                    strSQL+=" AND a1.st_aut='P'";
                else if(chkMosSolAut.isSelected())
                    strSQL+=" AND a1.st_aut='A'";
                strSQL+=" AND a1.st_reg='A'";
                strSQL+=" AND a1.st_creDocEgr='N'";
                intNumTotReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intNumTotReg==-1)
                    return false;
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT a1.co_emp, a1.co_loc, ";
                strSQL+=" a1.co_tipDoc, a2.tx_desCor, a2.tx_desLar, ";
                strSQL+=" a1.co_doc, a1.ne_numDoc, a1.fe_doc, a1.fe_rei";
                strSQL+=" , a4.co_usr, a4.tx_usr, a4.tx_nom, a1.st_aut, a1.tx_obsAut, a1.co_mnu";
                strSQL+=" FROM tbm_cabSolSalTemMer AS a1";
                strSQL+=" LEFT OUTER JOIN tbm_cabTipDoc AS a2 ";
                strSQL+=" ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc)";
                strSQL+=" LEFT OUTER JOIN tbm_cli AS a3 ";
                strSQL+=" ON (a1.co_emp=a3.co_emp AND a1.co_cli=a3.co_cli AND a3.st_reg='A')";
                strSQL+=" LEFT OUTER JOIN tbm_usr AS a4 ";
                strSQL+=" ON (a1.co_usrSol=a4.co_usr AND a4.st_reg='A')";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" AND a1.co_mnu IN(2039,2049)";
                if( (chkMosSolPen.isSelected()) && (chkMosSolAut.isSelected())  )
                    strSQL+=" AND a1.st_aut IN('A','P')";
                else if(chkMosSolPen.isSelected())
                    strSQL+=" AND a1.st_aut='P'";
                else if(chkMosSolAut.isSelected())
                    strSQL+=" AND a1.st_aut='A'";
                strSQL+=" AND a1.st_reg='A'";
                strSQL+=" AND a1.st_creDocEgr='N'";
                strSQL+=" ORDER BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc";
                System.out.println("cargarDetReg: " + strSQL);
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,             "");
                        vecReg.add(INT_TBL_DAT_COD_EMP,         "" + rst.getString("co_emp"));
                        vecReg.add(INT_TBL_DAT_COD_LOC,         "" + rst.getString("co_loc"));
                        vecReg.add(INT_TBL_DAT_COD_TIP_DOC,     "" + rst.getString("co_tipDoc"));
                        vecReg.add(INT_TBL_DAT_DES_COR_TIP_DOC, "" + rst.getString("tx_desCor"));
                        vecReg.add(INT_TBL_DAT_DES_LAR_TIP_DOC, "" + rst.getString("tx_desLar"));
                        vecReg.add(INT_TBL_DAT_COD_DOC,         "" + rst.getString("co_doc"));
                        vecReg.add(INT_TBL_DAT_COD_MNU_DOC,     "" + rst.getString("co_mnu"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC,         "" + rst.getString("ne_numDoc"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC,         "" + objUti.formatearFecha(rst.getDate("fe_doc"),"dd/MM/yyyy"));
                        strFecRein=rst.getObject("fe_rei")==null?"":rst.getString("fe_rei");
                        if( ! strFecRein.equals(""))
                            strFecRein=objUti.formatearFecha(strFecRein,"yyyy-MM-dd", "dd/MM/yyyy");
                        vecReg.add(INT_TBL_DAT_FEC_REI,         "" + strFecRein);
                        vecReg.add(INT_TBL_DAT_COD_USU_SOL,     "" + rst.getString("co_usr"));
                        vecReg.add(INT_TBL_DAT_USU_SOL,         "" + rst.getString("tx_nom"));
                        vecReg.add(INT_TBL_DAT_BUT_VER_SOL,     "");
                        vecReg.add(INT_TBL_DAT_CHK_AUT_SOL,     "");
                        vecReg.add(INT_TBL_DAT_CHK_DEN_SOL,     "");
                        vecReg.add(INT_TBL_DAT_CHK_CAN_SOL,     "");
                        vecReg.add(INT_TBL_DAT_OBS_SOL,         "" + rst.getString("tx_obsAut")==null?"":rst.getString("tx_obsAut"));
                        
                        
                        strEstSol=rst.getString("st_aut");
                        if(strEstSol.equals("A"))
                            vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK_AUT_SOL);
                        
                        if(strEstSol.equals("D"))
                            vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK_DEN_SOL);
                        
                        if(strEstSol.equals("C"))
                            vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK_CAN_SOL);
                        strFecRein="";
                        vecDat.add(vecReg);
                        i++;
                        pgrSis.setValue(i);
                    }
                    else{
                        break;
                    }
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                if (intNumTotReg==tblDat.getRowCount())
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros.");
                else
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros pero s�lo se procesaron " + tblDat.getRowCount() + ".");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
        
   private boolean guardarDatos(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                con.setAutoCommit(false);
                    if(actualiza_tbmCabSolSalTemMer()){
                        con.commit();
                    }
                    else{
                        con.rollback();
                        blnRes=false;
                    }
                con.close();
                con=null;
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
  
   
    private boolean actualiza_tbmCabSolSalTemMer(){
        int intCodEmp, i;
        double dblAbo1, dblAbo2;
        boolean blnRes=true;
        String strLin="";
        String strEstAut="";
        int intFecVncChq[]; int intFecSis[];
        String strSQLTmp="";
        try{
            if (con!=null){
                stm=con.createStatement();
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;

                for (i=0;i<objTblMod.getRowCountTrue();i++){
                    strLin=objTblMod.getValueAt(i, INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_LIN).toString();
                    if(strLin.equals("M")){
                        //Armar la sentencia SQL.
                        if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_AUT_SOL)){
                            strEstAut="A";
                        }
                        else if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_DEN_SOL)){
                            strEstAut="D";
                        }
                        else if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_CAN_SOL)){
                            strEstAut="C";
                        }
                        else{
                            strEstAut="P";
                        }
                        
                        if( ! strEstAut.equals("P")){
                            strSQL="";
                            strSQL+="UPDATE tbm_cabSolSalTemMer";
                            strSQL+=" SET st_aut='" + strEstAut + "'";
                            strSQL+=" , tx_obsAut=" + objUti.codificar(objTblMod.getValueAt(i, INT_TBL_DAT_OBS_SOL)) + "";

                            strEstAut="";
                            strAux=objParSis.getFuncionFechaHoraBaseDatos();
                            strSQL+=" , fe_aut=" + strAux + "";
                            dtpFecSis.setText(objUti.formatearFecha(strFecSis.trim(),"dd/MM/yyyy", "dd/MM/yyyy"));
                            intFecSis=dtpFecSis.getFecha(dtpFecSis.getText());
                            String strFecVenChq=objTblMod.getValueAt(i, INT_TBL_DAT_FEC_REI)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_FEC_REI).toString();
                            if( ! strFecVenChq.equals("")){
                                dtpFecVenChq.setText(objUti.formatearFecha(strFecVenChq.trim(),"dd/MM/yyyy", "dd/MM/yyyy"));
                                if(dtpFecVenChq.isFecha()){
                                    //solo para dos años mayor a la fecha actual
                                    intFecVncChq=dtpFecVenChq.getFecha(dtpFecVenChq.getText());
                                    if(   (intFecVncChq[2]) > ((intFecSis[2])+2)  ){
                                        mostrarMsgInf("<HTML>La fecha ingresada es mayor al intervalo de 2 años posteriores al presente año.<BR>Verifique la fecha y vuelva a intentarlo</HTML>");
                                        blnRes=false;
                                        tblDat.setRowSelectionInterval(i, i);
                                        tblDat.changeSelection(i, INT_TBL_DAT_FEC_REI, true, true);
                                        tblDat.requestFocus();
                                        break;
                                    }

                                    strSQL+=" , fe_rei='" + objUti.formatearFecha(strFecVenChq,"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "'";
                                }
                                else{
                                    strFecVenChq=strFecVenChq+"/" + (intFecSis[2]);
                                    dtpFecVenChq.setText(objUti.formatearFecha(strFecVenChq.trim(),"dd/MM/yyyy", "dd/MM/yyyy"));
                                    if(dtpFecVenChq.isFecha()){
                                        //solo para dos años mayor a la fecha actual
                                        intFecVncChq=dtpFecVenChq.getFecha(dtpFecVenChq.getText());

                                        dtpFecSis.setText(objUti.formatearFecha(strFecSis.trim(),"dd/MM/yyyy", "dd/MM/yyyy"));
                                        intFecSis=dtpFecSis.getFecha(dtpFecSis.getText());

                                        if(   (intFecVncChq[2]) > ((intFecSis[2])+2)  ){
                                            mostrarMsgInf("<HTML>La fecha ingresada es mayor al intervalo de 2 años posteriores al presente año.<BR>Verifique la fecha y vuelva a intentarlo</HTML>");
                                            blnRes=false;
                                            tblDat.setRowSelectionInterval(i, i);
                                            tblDat.changeSelection(i, INT_TBL_DAT_FEC_REI, true, true);
                                            tblDat.requestFocus();
                                            break;
                                        }

                                        strSQL+=" , fe_rei='" + objUti.formatearFecha(strFecVenChq,"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "'";
                                    }
                                    else{
                                        mostrarMsgInf("<HTML>Hay un registro cuya fecha de vencimiento del cheque no está correcta.<BR>Verifique y vuelva a intentarlo.</HTML>");
                                        blnRes=false;
                                        tblDat.setRowSelectionInterval(i, i);
                                        tblDat.changeSelection(i, INT_TBL_DAT_FEC_REI, true, true);
                                        tblDat.requestFocus();
                                        break;
                                    }
                                }

                            }
                            else{
                                strSQL+=" , fe_rei=Null";
                            }

                            dtpFecVenChq.setText("");
                            strSQL+=" WHERE co_emp=" + objTblMod.getValueAt(i,INT_TBL_DAT_COD_EMP);
                            strSQL+=" AND co_loc=" + objTblMod.getValueAt(i,INT_TBL_DAT_COD_LOC);
                            strSQL+=" AND co_tipDoc=" + objTblMod.getValueAt(i,INT_TBL_DAT_COD_TIP_DOC);
                            strSQL+=" AND co_doc=" + objTblMod.getValueAt(i,INT_TBL_DAT_COD_DOC);
                            strSQL+=";";
                            strSQLTmp+=strSQL;
                        }
                        else{//se desconfirmo
                            strSQL="";
                            strSQL+="UPDATE tbm_cabSolSalTemMer";
                            strSQL+=" SET st_aut='" + strEstAut + "'";
                            strSQL+=" , tx_obsAut=Null";
                            strSQL+=" WHERE co_emp=" + objTblMod.getValueAt(i,INT_TBL_DAT_COD_EMP);
                            strSQL+=" AND co_loc=" + objTblMod.getValueAt(i,INT_TBL_DAT_COD_LOC);
                            strSQL+=" AND co_tipDoc=" + objTblMod.getValueAt(i,INT_TBL_DAT_COD_TIP_DOC);
                            strSQL+=" AND co_doc=" + objTblMod.getValueAt(i,INT_TBL_DAT_COD_DOC);
                            strSQL+=";";
                            strSQLTmp+=strSQL;
                        }
                    }
                }
                System.out.println("actualiza_tbmCabSolSalTemMer: " + strSQLTmp);
                stm.executeUpdate(strSQLTmp);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    
    
    
    
    
    
    
}