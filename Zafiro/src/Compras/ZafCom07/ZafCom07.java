/*
 * ZafCom07.java
 *
 * Created on 20 de agosto de 2005, 11:38 PM
 */
package Compras.ZafCom07;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafSelFec.ZafSelFec;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;
import java.util.ArrayList;

/**
 *
 * @author  Eddye Lino
 */
public class ZafCom07 extends javax.swing.JInternalFrame 
{
    //Constantes: Columnas del JTable:
    static final int INT_TBL_DAT_LIN=0;                         //Línea
    static final int INT_TBL_DAT_COD_MAE=1;                     //Código maestro del item.
    static final int INT_TBL_DAT_COD_ITM=2;                     //Código del item.
    static final int INT_TBL_DAT_COD_ALT=3;                     //Código alterno del item.
    static final int INT_TBL_DAT_NOM_ITM=4;                     //Nombre del item.
    static final int INT_TBL_DAT_NUM_MOV=5;                     //Número de movimientos del item.
    static final int INT_TBL_DAT_CHK=6;                         //Estado de recosteado.
    
    static final int INT_DET_COD_EMP=0;                         //Código de la empresa.
    static final int INT_DET_COD_LOC=1;                         //Código del local.
    static final int INT_DET_COD_TIP_DOC=2;                     //Código del tipo de documento.
    static final int INT_DET_COD_DOC=3;                         //Código del documento.
    static final int INT_DET_COD_REG=4;                         //Código del documento.
    static final int INT_DET_CAL_COS_UNI=5;                     //Calcular costo unitario.
    static final int INT_DET_EST_REG=6;                         //Estado del registro.
    static final int INT_DET_CAN=7;                             //Cantidad.
    static final int INT_DET_COS_UNI=8;                         //Costo unitario.
    static final int INT_DET_POR_DES=9;                         //Porcentaje de descuento.
    static final int INT_DET_SAL_UNI=10;                        //Saldo en unidades.
    static final int INT_DET_SAL_VAL=11;                        //Saldo en valores.
    static final int INT_DET_COS_UNI_DOC=12;                    //Costo unitario del item en el documento.
    //Variables generales.
    private ZafSelFec objSelFec;
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblFilCab objTblFilCab;
    private ZafTblMod objTblMod;
    private ZafTblEdi objTblEdi;                                //Editor: Editor del JTable.
    private ZafThreadGUI objThrGUI;
    private ZafThreadExe objThrExe;
    private ZafTblCelRenChk objTblCelRenChk;                    //Render: Presentar JCheckBox en JTable.
    private ZafMouMotAda objMouMotAda;                          //ToolTipText en TableHeader.
    private ZafTblPopMnu objTblPopMnu;                          //PopupMenu: Establecer PeopuMenú en JTable.
    private ZafTblOrd objTblOrd;                                //JTable de ordenamiento.
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg;
    private ArrayList arlDat, arlReg;
    private boolean blnCon;                                     //true: Continua la ejecución del hilo.
    private String strCodAlt, strNomItm;                        //Contenido del campo al obtener el foco.
   
    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafCom07(ZafParSis obj) 
    {
        initComponents();
        //Inicializar objetos.
        objParSis=obj;
        if (!configurarFrm())
            exitForm();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        optTod = new javax.swing.JRadioButton();
        optFil = new javax.swing.JRadioButton();
        lblItm = new javax.swing.JLabel();
        txtCodItm = new javax.swing.JTextField();
        txtCodAlt = new javax.swing.JTextField();
        txtNomItm = new javax.swing.JTextField();
        butItm = new javax.swing.JButton();
        panNomCli = new javax.swing.JPanel();
        lblCodAltDes = new javax.swing.JLabel();
        txtCodAltDes = new javax.swing.JTextField();
        lblCodAltHas = new javax.swing.JLabel();
        txtCodAltHas = new javax.swing.JTextField();
        panFecHorEje = new javax.swing.JPanel();
        lblCodAltDes1 = new javax.swing.JLabel();
        txtFecHorEje = new javax.swing.JTextField();
        butEje = new javax.swing.JButton();
        chkActAsiDia = new javax.swing.JCheckBox();
        panFecHorIng = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtFecHorIng = new javax.swing.JTextField();
        panRpt = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butPro = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setLayout(null);

        bgrFil.add(optTod);
        optTod.setSelected(true);
        optTod.setText("Todos los items");
        optTod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optTodItemStateChanged(evt);
            }
        });
        panFil.add(optTod);
        optTod.setBounds(4, 4, 400, 20);

        bgrFil.add(optFil);
        optFil.setText("Sólo los items que cumplan el criterio seleccionado");
        panFil.add(optFil);
        optFil.setBounds(4, 24, 400, 20);

        lblItm.setText("Item:");
        lblItm.setToolTipText("Beneficiario");
        panFil.add(lblItm);
        lblItm.setBounds(24, 44, 120, 20);
        panFil.add(txtCodItm);
        txtCodItm.setBounds(88, 44, 56, 20);

        txtCodAlt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodAltActionPerformed(evt);
            }
        });
        txtCodAlt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodAltFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodAltFocusLost(evt);
            }
        });
        panFil.add(txtCodAlt);
        txtCodAlt.setBounds(144, 44, 92, 20);

        txtNomItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomItmActionPerformed(evt);
            }
        });
        txtNomItm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomItmFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomItmFocusLost(evt);
            }
        });
        panFil.add(txtNomItm);
        txtNomItm.setBounds(236, 44, 424, 20);

        butItm.setText("...");
        butItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butItmActionPerformed(evt);
            }
        });
        panFil.add(butItm);
        butItm.setBounds(660, 44, 20, 20);

        panNomCli.setBorder(javax.swing.BorderFactory.createTitledBorder("Código alterno del item"));
        panNomCli.setLayout(null);

        lblCodAltDes.setText("Desde:");
        panNomCli.add(lblCodAltDes);
        lblCodAltDes.setBounds(12, 20, 48, 20);

        txtCodAltDes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodAltDesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodAltDesFocusLost(evt);
            }
        });
        panNomCli.add(txtCodAltDes);
        txtCodAltDes.setBounds(60, 20, 100, 20);

        lblCodAltHas.setText("Hasta:");
        panNomCli.add(lblCodAltHas);
        lblCodAltHas.setBounds(168, 20, 48, 20);

        txtCodAltHas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodAltHasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodAltHasFocusLost(evt);
            }
        });
        panNomCli.add(txtCodAltHas);
        txtCodAltHas.setBounds(216, 20, 100, 20);

        panFil.add(panNomCli);
        panNomCli.setBounds(24, 64, 328, 52);

        panFecHorEje.setBorder(javax.swing.BorderFactory.createTitledBorder("Programar ejecución"));
        panFecHorEje.setLayout(null);

        lblCodAltDes1.setText("Fecha y hora:");
        panFecHorEje.add(lblCodAltDes1);
        lblCodAltDes1.setBounds(12, 20, 100, 20);

        txtFecHorEje.setText("2006/10/12 17:18:25");
        panFecHorEje.add(txtFecHorEje);
        txtFecHorEje.setBounds(154, 20, 170, 20);

        butEje.setText("Programar");
        butEje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butEjeActionPerformed(evt);
            }
        });
        panFecHorEje.add(butEje);
        butEje.setBounds(328, 20, 156, 23);

        panFil.add(panFecHorEje);
        panFecHorEje.setBounds(24, 188, 660, 52);

        chkActAsiDia.setText("Actualizar los asientos de diario");
        panFil.add(chkActAsiDia);
        chkActAsiDia.setBounds(4, 240, 400, 20);

        panFecHorIng.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha y hora de ingreso"));
        panFecHorIng.setLayout(null);

        jLabel1.setText("Fecha y hora:");
        panFecHorIng.add(jLabel1);
        jLabel1.setBounds(12, 20, 100, 20);
        panFecHorIng.add(txtFecHorIng);
        txtFecHorIng.setBounds(112, 20, 204, 20);

        panFil.add(panFecHorIng);
        panFecHorIng.setBounds(356, 64, 328, 52);

        tabFrm.addTab("Filtro", panFil);

        panRpt.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnDat.setViewportView(tblDat);

        panRpt.add(spnDat, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Reporte", panRpt);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butPro.setText("Procesar");
        butPro.setToolTipText("Recalcula el costo de cada item");
        butPro.setPreferredSize(new java.awt.Dimension(92, 25));
        butPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butProActionPerformed(evt);
            }
        });
        panBot.add(butPro);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void butEjeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butEjeActionPerformed
        objThrExe=new ZafThreadExe();
        objThrExe.start();
    }//GEN-LAST:event_butEjeActionPerformed

    private void txtCodAltHasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltHasFocusLost
        if (txtCodAltHas.getText().length()>0)
            optFil.setSelected(true);
    }//GEN-LAST:event_txtCodAltHasFocusLost

    private void txtCodAltHasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltHasFocusGained
        txtCodAltHas.selectAll();
    }//GEN-LAST:event_txtCodAltHasFocusGained

    private void txtCodAltDesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltDesFocusLost
        if (txtCodAltDes.getText().length()>0)
        {
            optFil.setSelected(true);
            if (txtCodAltHas.getText().length()==0)
                txtCodAltHas.setText(txtCodAltDes.getText());
        }
    }//GEN-LAST:event_txtCodAltDesFocusLost

    private void txtCodAltDesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltDesFocusGained
        txtCodAltDes.selectAll();
    }//GEN-LAST:event_txtCodAltDesFocusGained

    private void butItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butItmActionPerformed
        mostrarVenConItm(0);
        //Seleccionar el JRadioButton de filtro si es necesario.
        if (txtCodItm.getText().length()>0)
        {
            optFil.setSelected(true);
        }
    }//GEN-LAST:event_butItmActionPerformed

    private void txtNomItmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomItmFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtNomItm.getText().equalsIgnoreCase(strNomItm))
        {
            if (txtNomItm.getText().equals(""))
            {
                txtCodItm.setText("");
                txtCodAlt.setText("");
                txtNomItm.setText("");
            }
            else
            {
                mostrarVenConItm(2);
            }
        }
        else
            txtNomItm.setText(strNomItm);
        //Seleccionar el JRadioButton de filtro si es necesario.
        if (txtCodItm.getText().length()>0)
        {
            optFil.setSelected(true);
        }
    }//GEN-LAST:event_txtNomItmFocusLost

    private void txtNomItmFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomItmFocusGained
        strNomItm=txtNomItm.getText();
        txtNomItm.selectAll();
    }//GEN-LAST:event_txtNomItmFocusGained

    private void txtNomItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomItmActionPerformed
        txtNomItm.transferFocus();
    }//GEN-LAST:event_txtNomItmActionPerformed

    private void txtCodAltFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtCodAlt.getText().equalsIgnoreCase(strCodAlt))
        {
            if (txtCodAlt.getText().equals(""))
            {
                txtCodItm.setText("");
                txtCodAlt.setText("");
                txtNomItm.setText("");
            }
            else
            {
                mostrarVenConItm(1);
            }
        }
        else
            txtCodAlt.setText(strCodAlt);
        //Seleccionar el JRadioButton de filtro si es necesario.
        if (txtCodItm.getText().length()>0)
        {
            optFil.setSelected(true);
        }
    }//GEN-LAST:event_txtCodAltFocusLost

    private void txtCodAltFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltFocusGained
        strCodAlt=txtCodAlt.getText();
        txtCodAlt.selectAll();
    }//GEN-LAST:event_txtCodAltFocusGained

    private void txtCodAltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodAltActionPerformed
        txtCodAlt.transferFocus();
    }//GEN-LAST:event_txtCodAltActionPerformed

    private void butProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butProActionPerformed
        //Realizar acción de acuerdo a la etiqueta del botón ("Procesar" o "Detener").
        if (butPro.getText().equals("Procesar"))
        {
            if (mostrarMsgCon("¿Está seguro que desea realizar esta operación?")==0)
            {
                blnCon=true;
                if (objThrGUI==null)
                {
                    objThrGUI=new ZafThreadGUI();
                    objThrGUI.setIndFunEje(1);
                    objThrGUI.start();
                }
            }
        }
        else
        {
            blnCon=false;
        }
    }//GEN-LAST:event_butProActionPerformed

    private void optTodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optTodItemStateChanged
        if (optTod.isSelected())
        {
            txtCodItm.setText("");
            txtCodAlt.setText("");
            txtNomItm.setText("");
            txtCodAltDes.setText("");
            txtCodAltHas.setText("");
        }
    }//GEN-LAST:event_optTodItemStateChanged

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acción de acuerdo a la etiqueta del botón ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar"))
        {
            blnCon=true;
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
        }
        else
        {
            blnCon=false;
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (javax.swing.JOptionPane.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butEje;
    private javax.swing.JButton butItm;
    private javax.swing.JButton butPro;
    private javax.swing.JCheckBox chkActAsiDia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblCodAltDes;
    private javax.swing.JLabel lblCodAltDes1;
    private javax.swing.JLabel lblCodAltHas;
    private javax.swing.JLabel lblItm;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optFil;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFecHorEje;
    private javax.swing.JPanel panFecHorIng;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panNomCli;
    private javax.swing.JPanel panRpt;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodAlt;
    private javax.swing.JTextField txtCodAltDes;
    private javax.swing.JTextField txtCodAltHas;
    private javax.swing.JTextField txtCodItm;
    private javax.swing.JTextField txtFecHorEje;
    private javax.swing.JTextField txtFecHorIng;
    private javax.swing.JTextField txtNomItm;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Configurar ZafSelFec:
            objSelFec=new ZafSelFec();
            objSelFec.setTitulo("Fecha del documento");
            objSelFec.setCheckBoxVisible(false);
            panFil.add(objSelFec);
            objSelFec.setBounds(24, 116, 472, 72);
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.33");
            lblTit.setText(strAux);
            arlDat=new ArrayList();
            //Configurar objetos.
            txtCodItm.setVisible(false);
            txtFecHorEje.setText(objUti.formatearFecha(new java.util.Date(), "yyyy/MM/dd HH:mm:ss"));
            chkActAsiDia.setSelected(true);
            //Configurar los JTables.
            configurarTblDat();
            if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
            {
                chkActAsiDia.setSelected(false);
                chkActAsiDia.setVisible(false);
            }
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función configura el JTable "tblDat".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDat()
    {
        boolean blnRes=true;
        try
        {
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(7);   //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_MAE,"Cód.Mae.");
            vecCab.add(INT_TBL_DAT_COD_ITM,"Cód.Itm.");
            vecCab.add(INT_TBL_DAT_COD_ALT,"Cód.Alt.");
            vecCab.add(INT_TBL_DAT_NOM_ITM,"Nombre del item.");
            vecCab.add(INT_TBL_DAT_NUM_MOV,"Núm.Mov.");
            vecCab.add(INT_TBL_DAT_CHK,"Estado");
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_COD_ALT).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_NOM_ITM).setPreferredWidth(357);
            tcmAux.getColumn(INT_TBL_DAT_NUM_MOV).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setPreferredWidth(80);
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
//            tcmAux.getColumn(INT_TBL_DAT_BUT_CTA).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Ocultar columnas del sistema.
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_MAE, tblDat);
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk=new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk=null;
            //Configurar JTable: Establecer la clase que controla el ordenamiento.
            objTblOrd=new ZafTblOrd(tblDat);
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg()
    {
        int intCodEmp;
        boolean blnRes=true;
        try
        {
            pgrSis.setIndeterminate(true);
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            intCodEmp=objParSis.getCodigoEmpresa();
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Obtener la condición.
                strAux="";
                if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                {
                    //Obtener los datos del "Grupo".
                    //Armar la sentencia SQL.
                    strSQL="SELECT c1.co_itmMae, c1.co_itm, c1.tx_codAlt, c1.tx_nomItm, c2.nd_numMov";
                    strSQL+=" FROM (";
                    strSQL+=" SELECT a2.co_itmMae, a1.co_itm, a1.tx_codAlt, a1.tx_nomItm";
                    strSQL+=" FROM tbm_inv AS a1";
                    strSQL+=" INNER JOIN tbm_equInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm)";
                    strSQL+=" WHERE a1.co_emp=" + intCodEmp;
                    if (txtCodItm.getText().length()>0)
                        strSQL+=" AND a1.co_itm=" + txtCodItm.getText();
                    if (txtCodAltDes.getText().length()>0 || txtCodAltHas.getText().length()>0)
                        strSQL+=" AND ((LOWER(a1.tx_codAlt) BETWEEN '" + txtCodAltDes.getText().replaceAll("'", "''").toLowerCase() + "' AND '" + txtCodAltHas.getText().replaceAll("'", "''").toLowerCase() + "') OR LOWER(a1.tx_codAlt) LIKE '" + txtCodAltHas.getText().replaceAll("'", "''").toLowerCase() + "%')";
                    strSQL+=" GROUP BY a2.co_itmMae, a1.co_itm, a1.tx_codAlt, a1.tx_nomItm";
                    strSQL+=" ) AS c1";
                    strSQL+=" INNER JOIN (";
                    strSQL+=" SELECT b3.co_itmMae, COUNT(*) AS nd_numMov";
                    strSQL+=" FROM tbm_cabMovInv AS b1";
                    strSQL+=" INNER JOIN tbm_detMovInv AS b2 ON (b1.co_emp=b2.co_emp AND b1.co_loc=b2.co_loc AND b1.co_tipDoc=b2.co_tipDoc AND b1.co_doc=b2.co_doc)";
                    strSQL+=" INNER JOIN tbm_equInv AS b3 ON (b2.co_emp=b3.co_emp AND b2.co_itm=b3.co_itm)";
                    strSQL+=" WHERE b1.st_reg IS NOT NULL";
                    if (txtCodItm.getText().length()>0)
                        strSQL+=" AND b3.co_itmMae=(SELECT co_itmMae FROM tbm_equInv WHERE co_emp=0 AND co_itm=" + txtCodItm.getText() + ")";
                    if (txtFecHorIng.getText().equals(""))
                    {
                        switch (objSelFec.getTipoSeleccion())
                        {
                            case 0: //Búsqueda por rangos
                                strSQL+=" AND b1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                                break;
                            case 1: //Fechas menores o iguales que "Hasta".
                                strSQL+=" AND b1.fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                                break;
                            case 2: //Fechas mayores o iguales que "Desde".
                                strSQL+=" AND b1.fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                                break;
                            case 3: //Todo.
                                break;
                        }
                    }
                    else
                    {
                        strSQL+=" AND b1.fe_ing>='" + objUti.formatearFecha(txtFecHorIng.getText(), "yyyy/MM/dd HH:mm:ss", objParSis.getFormatoFechaHoraBaseDatos()) + "'";
                    }
                    strSQL+=" GROUP BY b3.co_itmMae";
                    strSQL+=" ) AS c2 ON (c1.co_itmMae=c2.co_itmMae)";
                    strSQL+=" ORDER BY c1.tx_codAlt";
                    rst=stm.executeQuery(strSQL);
                }
                else
                {
                    //Obtener los datos de la "Empresa seleccionada".
                    //Armar la sentencia SQL.
                    strSQL="";
                    strSQL+="SELECT Null AS co_itmMae, a2.co_itm, a3.tx_codAlt, a3.tx_nomItm, COUNT(a2.co_itm) AS nd_numMov";
                    strSQL+=" FROM tbm_cabMovInv AS a1, tbm_detMovInv AS a2, tbm_inv AS a3";
                    strSQL+=" WHERE a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                    strSQL+=" AND a2.co_emp=a3.co_emp AND a2.co_itm=a3.co_itm";
                    strSQL+=" AND a1.co_emp=" + intCodEmp;
                    if (txtCodItm.getText().length()>0)
                        strSQL+=" AND a3.co_itm=" + txtCodItm.getText();
                    if (txtCodAltDes.getText().length()>0 || txtCodAltHas.getText().length()>0)
                        strSQL+=" AND ((LOWER(a3.tx_codAlt) BETWEEN '" + txtCodAltDes.getText().replaceAll("'", "''").toLowerCase() + "' AND '" + txtCodAltHas.getText().replaceAll("'", "''").toLowerCase() + "') OR LOWER(a3.tx_codAlt) LIKE '" + txtCodAltHas.getText().replaceAll("'", "''").toLowerCase() + "%')";
                    if (txtFecHorIng.getText().equals(""))
                    {
                        switch (objSelFec.getTipoSeleccion())
                        {
                            case 0: //Búsqueda por rangos
                                strSQL+=" AND a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                                break;
                            case 1: //Fechas menores o iguales que "Hasta".
                                strSQL+=" AND a1.fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                                break;
                            case 2: //Fechas mayores o iguales que "Desde".
                                strSQL+=" AND a1.fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                                break;
                            case 3: //Todo.
                                break;
                        }
                    }
                    else
                    {
                        strSQL+=" AND a1.fe_ing>='" + objUti.formatearFecha(txtFecHorIng.getText(), "yyyy/MM/dd HH:mm:ss", objParSis.getFormatoFechaHoraBaseDatos()) + "'";
                    }
                    strSQL+=strAux;
                    strSQL+=" GROUP BY a2.co_itm, a3.tx_codAlt, a3.tx_nomItm";
                    strSQL+=" ORDER BY a3.tx_codAlt";                    
                    rst=stm.executeQuery(strSQL);
                }
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                while (rst.next())
                {
                    if (blnCon)
                    {
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_COD_MAE,rst.getString("co_itmMae"));
                        vecReg.add(INT_TBL_DAT_COD_ITM,rst.getString("co_itm"));
                        vecReg.add(INT_TBL_DAT_COD_ALT,rst.getString("tx_codAlt"));
                        vecReg.add(INT_TBL_DAT_NOM_ITM,rst.getString("tx_nomItm"));
                        vecReg.add(INT_TBL_DAT_NUM_MOV,rst.getString("nd_numMov"));
                        vecReg.add(INT_TBL_DAT_CHK,null);
                        vecDat.add(vecReg);
                    }
                    else
                    {
                        break;
                    }
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                if (blnCon)
                    lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");
                else
                    lblMsgSis.setText("Interrupción del usuario. Sólo se procesaron " + tblDat.getRowCount() + " registros.");
                butCon.setText("Consultar");
                pgrSis.setIndeterminate(false);
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite recostear los items del grupo de acuerdo al criterio seleccionado.
     * @return true: Si se pudo realizar el proceso de recosteo.
     * <BR>false: En el caso contrario.
     */
    private boolean recostearItm()
    {
        int i, j, intAniDes, intAniHas;
        String strFecRan[][];
        String strFecGenAsiDia="2018/01/01";
        boolean blnRes=true;
        try
        {
            butPro.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                pgrSis.setMinimum(0);
                pgrSis.setMaximum(objTblMod.getRowCountTrue());
                pgrSis.setValue(0);
                if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                {
                    //Recostear los items del "Grupo".
                    intAniDes=objUti.getAnio(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha());
                    intAniHas=objUti.getAnio(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha());
                    if (intAniDes<2009)
                    {
                        if (intAniHas<2009)
                        {
                            strFecRan=objUti.getIntervalosMensualesRangoFechas(objSelFec.getFechaDesde(), objSelFec.getFechaHasta(), objSelFec.getFormatoFecha());
                            for (i=0;i<objTblMod.getRowCountTrue();i++)
                            {
                                for (j=0; j<strFecRan.length; j++)
                                    objUti.recostearItmGrp(this, objParSis, con,  objParSis.getCodigoEmpresa(), objTblMod.getValueAt(i,INT_TBL_DAT_COD_ITM).toString(), strFecRan[j][0], strFecRan[j][1], "yyyy/MM/dd");
                                objTblMod.setChecked(true, i, INT_TBL_DAT_CHK);
                                pgrSis.setValue(i+1);
                            }
                        }
                        else
                        {
                            //Diferentes procesos de costeo. Separelos.
                            mostrarMsgInf("El rango de fechas seleccionado incluye 2 métodos de costeo diferentes.\nSeleccione fechas menores o iguales al 31/Dic/2008 para el primer método de costeo\n y mayores al 31/Dic/2008 para el segundo método.");
                            return false;
                        }
                    }
                    else
                    {
                        if (intAniHas<2009)
                        {
                            //Año final es menor que año inicial.
                            mostrarMsgInf("La fecha final es menor que la fecha inicial.\nCorrija el rango de fechas y vuelva a intentarlo.");
                            return false;
                        }
                        else
                        {
                            for (i=0;i<objTblMod.getRowCountTrue();i++)
                            {
                                if (objUti.recostearItm2009RangoFechas(this, objParSis, con,  objParSis.getCodigoEmpresa(), objTblMod.getValueAt(i,INT_TBL_DAT_COD_ITM).toString(), objSelFec.getFechaDesde(), objSelFec.getFechaHasta(), objSelFec.getFormatoFecha()))
                                {
                                    objTblMod.setChecked(true, i, INT_TBL_DAT_CHK);
                                }
                                pgrSis.setValue(i+1);
                            }
                        }
                    }
                }
                else
                {
                    //Recostear los items de la "Empresa seleccionada".
                    intAniDes=objUti.getAnio(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha());
                    intAniHas=objUti.getAnio(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha());
                    if (intAniDes<2009)
                    {
                        if (intAniHas<2009)
                        {
                            strFecRan=objUti.getIntervalosAnualesRangoFechas(objSelFec.getFechaDesde(), objSelFec.getFechaHasta(), objSelFec.getFormatoFecha());
                            for (i=0;i<objTblMod.getRowCountTrue();i++)
                            {
                                for (j=0; j<strFecRan.length; j++)
                                    objUti.recostearItm(this, objParSis, con,  objParSis.getCodigoEmpresa(), objTblMod.getValueAt(i,INT_TBL_DAT_COD_ITM).toString(), strFecRan[j][0], strFecRan[j][1], "yyyy/MM/dd");
                                objTblMod.setChecked(true, i, INT_TBL_DAT_CHK);
                                pgrSis.setValue(i+1);
                            }
                        }
                        else
                        {
                            //Diferentes procesos de costeo. Separelos.
                            mostrarMsgInf("El rango de fechas seleccionado incluye 2 métodos de costeo diferentes.\nSeleccione fechas menores o iguales al 31/Dic/2008 para el primer método de costeo\n y mayores al 31/Dic/2008 para el segundo método.");
                            return false;
                        }
                    }
                    else
                    {
                        if (intAniHas<2009)
                        {
                            //Año final es menor que año inicial.
                            mostrarMsgInf("La fecha final es menor que la fecha inicial.\nCorrija el rango de fechas y vuelva a intentarlo.");
                            return false;
                        }
                        else
                        {
                            for (i=0;i<objTblMod.getRowCountTrue();i++)
                            {
                                if (objUti.recostearItm2009RangoFechas(this, objParSis, con,  objParSis.getCodigoEmpresa(), objTblMod.getValueAt(i,INT_TBL_DAT_COD_ITM).toString(), objSelFec.getFechaDesde(), objSelFec.getFechaHasta(), objSelFec.getFormatoFecha()))
                                {
                                    objTblMod.setChecked(true, i, INT_TBL_DAT_CHK);
                                }
                                pgrSis.setValue(i+1);
                            }
                        }
                    }
                }
                if (chkActAsiDia.isSelected())
                {
                    lblMsgSis.setText("Actualizando los asientos de diario...");
                    pgrSis.setMinimum(0);
                    pgrSis.setMaximum(12);
                    pgrSis.setValue(0);
                    i=0;
                    //TEMPORAL HASTA QUE SE LO INCORPORE A EL PROCESO DE RECOSTEO: QUERY PARA BORRAR LOS SALDOS DE LOS ITEMS DE SERVICIO.
                    strSQL="";
                    strSQL+="UPDATE tbm_inv";
                    strSQL+=" SET nd_stkAct=0, nd_valExi=0, nd_cosUni=0";
                    strSQL+=" WHERE st_ser IN ('S', 'T', 'O') AND (nd_stkAct<>0 OR nd_cosUni<>0)";
                    stm.executeUpdate(strSQL);
                    i++;
                    pgrSis.setValue(i);
                    strSQL="";
                    strSQL+="UPDATE tbm_invBod";
                    strSQL+=" SET nd_stkAct=0";
                    strSQL+=" FROM tbm_inv";
                    strSQL+=" WHERE tbm_invBod.co_emp=tbm_inv.co_emp AND tbm_invBod.co_itm=tbm_inv.co_itm AND tbm_inv.st_ser IN ('S', 'T', 'O') AND tbm_invBod.nd_stkAct<>0";
                    stm.executeUpdate(strSQL);
                    i++;
                    pgrSis.setValue(i);
                    strSQL="";
                    strSQL+="UPDATE tbm_detMovInv";
                    strSQL+=" SET nd_cosTot=0, nd_exi=0, nd_valExi=0, nd_cosPro=0, nd_cosTotGrp=0, nd_exiGrp=0, nd_valExiGrp=0, nd_cosProGrp=0";
                    strSQL+=" FROM tbm_inv";
                    strSQL+=" WHERE tbm_detMovInv.co_emp=tbm_inv.co_emp AND tbm_detMovInv.co_itm=tbm_inv.co_itm AND tbm_inv.st_ser IN ('S', 'T', 'O')";
                    strSQL+=" AND (tbm_detMovInv.nd_cosTot<>0 OR tbm_detMovInv.nd_exi<>0 OR tbm_detMovInv.nd_valExi<>0 OR tbm_detMovInv.nd_cosPro<>0 OR tbm_detMovInv.nd_cosTotGrp<>0 OR tbm_detMovInv.nd_exiGrp<>0 OR tbm_detMovInv.nd_valExiGrp<>0 OR tbm_detMovInv.nd_cosProGrp<>0)";
                    stm.executeUpdate(strSQL);
                    i++;
                    pgrSis.setValue(i);
                    //Armar la sentencia SQL.
                    strSQL="";
                    strSQL+="UPDATE tbm_detDia";
                    strSQL+=" SET st_regRep='Z'";
                    strSQL+=" FROM ( SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_dia";
                    strSQL+=" FROM tbm_cabDia AS a1";
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                    strSQL+=" AND a1.co_tipDoc IN (48, 49, 235, 236)";
                    strSQL+=" AND a1.fe_dia>='" + strFecGenAsiDia + "'";
                    strSQL+=" ) AS c1";
                    strSQL+=" WHERE tbm_detDia.co_emp=c1.co_emp AND tbm_detDia.co_loc=c1.co_loc AND tbm_detDia.co_tipDoc=c1.co_tipDoc AND tbm_detDia.co_dia=c1.co_dia";
                    stm.executeUpdate(strSQL);
                    i++;
                    pgrSis.setValue(i);
                    //Armar la sentencia SQL.
                    strSQL="";
                    strSQL+="DELETE FROM tbm_detDia";
                    strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa();
                    strSQL+=" AND co_tipDoc IN (48, 49, 235, 236) AND st_regRep='Z'";
                    stm.executeUpdate(strSQL);
                    i++;
                    pgrSis.setValue(i);
                    //Armar la sentencia SQL.
                    strSQL="";
                    strSQL+="DELETE FROM tbm_cabDia";
                    strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa();
                    strSQL+=" AND co_tipDoc IN (48, 49, 235, 236)";
                    strSQL+=" AND fe_dia>='" + strFecGenAsiDia + "'";
                    stm.executeUpdate(strSQL);
                    i++;
                    pgrSis.setValue(i);
                    if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                    {

                    }
                    else
                    {
                        //Armar la sentencia SQL.
                        strSQL="";
                        strSQL+="INSERT INTO tbm_cabDia (co_emp, co_loc, co_tipDoc, co_dia, tx_numDia, fe_dia, tx_glo, st_reg, fe_ing, fe_ultMod, co_usrIng, co_usrMod)";
                        strSQL+=" SELECT a1.co_emp, a1.co_loc, CASE WHEN a1.co_tipDoc=1 THEN 48  WHEN a1.co_tipDoc=228 THEN 235 END AS co_tipDoc";//Ingrid: Se cambia de a1.co_tipDoc a esta linea
                        strSQL+=" , a1.co_doc AS co_dia, a1.ne_numDoc AS tx_numDia";
                        strSQL+=" , a1.fe_doc AS fe_dia, Null AS tx_glo, a1.st_reg, a1.fe_ing, a1.fe_ultMod, a1.co_usrIng, a1.co_usrMod";
                        strSQL+=" FROM tbm_cabMovInv AS a1";
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL+=" AND a1.co_tipDoc IN(1, 228)";
                        strSQL+=" AND a1.fe_doc>='" + strFecGenAsiDia + "'";
                        stm.executeUpdate(strSQL);
                    }
                    i++;
                    pgrSis.setValue(i);
                    if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                    {

                    }
                    else
                    {
                        //Armar la sentencia SQL.
                        strSQL="";
                        strSQL+="INSERT INTO tbm_detDia(co_emp,  co_loc, co_tipDoc, co_dia, co_reg, co_cta, nd_monDeb, nd_monHab, tx_ref, st_regRep)";
                        strSQL+=" SELECT a1.co_emp, a1.co_loc, CASE WHEN a1.co_tipDoc=1 THEN 48  WHEN a1.co_tipDoc=228 THEN 235 END AS co_tipDoc";
                        strSQL+=" , a1.co_doc AS co_dia, a2.co_bod AS co_reg, a3.co_ctaExi AS co_cta";
                        strSQL+=" , (CASE WHEN SUM(a2.nd_cosTot)<0 THEN 0 ELSE ABS(SUM(a2.nd_cosTot)) END) AS nd_monDeb";
                        strSQL+=" , (CASE WHEN SUM(a2.nd_cosTot)<0 THEN ABS(SUM(a2.nd_cosTot)) ELSE 0 END) AS nd_monHab";
                        strSQL+=" , Null AS tx_ref, 'P' AS st_regRep";
                        strSQL+=" FROM tbm_cabMovInv AS a1";
                        strSQL+=" INNER JOIN tbm_detMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc)";
                        strSQL+=" LEFT OUTER JOIN tbm_bod AS a3 ON (a2.co_emp=a3.co_emp AND a2.co_bod=a3.co_bod)";
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL+=" AND a1.co_tipDoc IN (1, 228)";
                        strSQL+=" AND a1.fe_doc>='" + strFecGenAsiDia + "'";
                        strSQL+=" GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a2.co_bod, a3.co_ctaExi";
                        strSQL+=" UNION ALL";
                        strSQL+=" SELECT a1.co_emp, a1.co_loc, CASE WHEN a1.co_tipDoc=1 THEN 48  WHEN a1.co_tipDoc=228 THEN 235 END AS co_tipDoc";
                        strSQL+=" , a1.co_doc AS co_dia, SUM(a2.co_bod)+1 AS co_reg, a3.co_ctaCosVen AS co_cta";
                        strSQL+=" , (CASE WHEN SUM(a2.nd_cosTot)<0 THEN ABS(SUM(a2.nd_cosTot)) ELSE 0 END) AS nd_monDeb";
                        strSQL+=" , (CASE WHEN SUM(a2.nd_cosTot)<0 THEN 0 ELSE ABS(SUM(a2.nd_cosTot)) END) AS nd_monHab";
                        strSQL+=" , Null AS tx_ref, 'P' AS st_regRep";
                        strSQL+=" FROM tbm_cabMovInv AS a1";
                        strSQL+=" INNER JOIN tbm_detMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc)";
                        strSQL+=" LEFT OUTER JOIN tbm_loc AS a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc)";
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL+=" AND a1.co_tipDoc IN (1, 228)";
                        strSQL+=" AND a1.fe_doc>='" + strFecGenAsiDia + "'";
                        strSQL+=" GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a3.co_ctaCosVen";
                        strSQL+=" ORDER BY co_emp, co_loc, co_tipDoc, co_dia, co_reg";
                        stm.executeUpdate(strSQL);
                    }
                    i++;
                    pgrSis.setValue(i);
                    if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                    {

                    }
                    else
                    {
                        //Armar la sentencia SQL.
                        strSQL="";
                        strSQL+="INSERT INTO tbm_cabDia (co_emp, co_loc, co_tipDoc, co_dia, tx_numDia, fe_dia, tx_glo, st_reg, fe_ing, fe_ultMod, co_usrIng, co_usrMod)";
                        strSQL+=" SELECT a1.co_emp, a1.co_loc, CASE WHEN a1.co_tipDoc=3 THEN 49  WHEN a1.co_tipDoc=229 THEN 236 END AS co_tipDoc";
                        strSQL+=" , a1.co_doc AS co_dia, a1.ne_numDoc AS tx_numDia";
                        strSQL+=" , a1.fe_doc AS fe_dia, Null AS tx_glo, a1.st_reg, a1.fe_ing, a1.fe_ultMod, a1.co_usrIng, a1.co_usrMod";
                        strSQL+=" FROM tbm_cabMovInv AS a1";
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL+=" AND a1.co_tipDoc IN (3, 229)";
                        strSQL+=" AND a1.fe_doc>='" + strFecGenAsiDia + "'";
                        stm.executeUpdate(strSQL);
                    }
                    i++;
                    pgrSis.setValue(i);
                    if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                    {

                    }
                    else
                    {
                        //Armar la sentencia SQL.
                        strSQL="";
                        strSQL+="INSERT INTO tbm_detDia(co_emp,  co_loc, co_tipDoc, co_dia, co_reg, co_cta, nd_monDeb, nd_monHab, tx_ref, st_regRep)";
                        strSQL+=" SELECT a1.co_emp, a1.co_loc, CASE WHEN a1.co_tipDoc=3 THEN 49  WHEN a1.co_tipDoc=229 THEN 236 END AS co_tipDoc";
                        strSQL+=" , a1.co_doc AS co_dia, SUM(a2.co_bod)+1 AS co_reg, a3.co_ctaCosVen AS co_cta";
                        strSQL+=" , (CASE WHEN SUM(a2.nd_cosTot)<0 THEN ABS(SUM(a2.nd_cosTot)) ELSE 0 END) AS nd_monDeb";
                        strSQL+=" , (CASE WHEN SUM(a2.nd_cosTot)<0 THEN 0 ELSE ABS(SUM(a2.nd_cosTot)) END) AS nd_monHab";
                        strSQL+=" , Null AS tx_ref, 'P' AS st_regRep";
                        strSQL+=" FROM tbm_cabMovInv AS a1";
                        strSQL+=" INNER JOIN tbm_detMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc)";
                        strSQL+=" LEFT OUTER JOIN tbm_loc AS a3 ON (a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc)";
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL+=" AND a1.co_tipDoc IN (3, 229)";
                        strSQL+=" AND a1.fe_doc>='" + strFecGenAsiDia + "'";
                        strSQL+=" GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a3.co_ctaCosVen";
                        strSQL+=" UNION ALL";
                        strSQL+=" SELECT a1.co_emp, a1.co_loc, CASE WHEN a1.co_tipDoc=3 THEN 49  WHEN a1.co_tipDoc=229 THEN 236 END AS co_tipDoc";
                        strSQL+=" , a1.co_doc AS co_dia, a2.co_bod AS co_reg, a3.co_ctaExi AS co_cta";
                        strSQL+=" , (CASE WHEN SUM(a2.nd_cosTot)<0 THEN 0 ELSE ABS(SUM(a2.nd_cosTot)) END) AS nd_monDeb";
                        strSQL+=" , (CASE WHEN SUM(a2.nd_cosTot)<0 THEN ABS(SUM(a2.nd_cosTot)) ELSE 0 END) AS nd_monHab";
                        strSQL+=" , Null AS tx_ref, 'P' AS st_regRep";
                        strSQL+=" FROM tbm_cabMovInv AS a1";
                        strSQL+=" INNER JOIN tbm_detMovInv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc)";
                        strSQL+=" LEFT OUTER JOIN tbm_bod AS a3 ON (a2.co_emp=a3.co_emp AND a2.co_bod=a3.co_bod)";
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL+=" AND a1.co_tipDoc IN (3, 229)";
                        strSQL+=" AND a1.fe_doc>='" + strFecGenAsiDia + "'";
                        strSQL+=" GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a2.co_bod, a3.co_ctaExi";
                        strSQL+=" ORDER BY co_emp, co_loc, co_tipDoc, co_dia, co_reg";
                        stm.executeUpdate(strSQL);
                    }
                    i++;
                    pgrSis.setValue(i);
                    //Armar la sentencia SQL.
                    strSQL="";
                    strSQL+="UPDATE tbm_cabDia SET st_reg='A' WHERE co_tipDoc IN (48, 49, 235, 236) AND st_reg IN ('A', 'R', 'C', 'F')";
                    strSQL+=" AND co_emp=" + objParSis.getCodigoEmpresa();
                    strSQL+=" AND fe_dia>='" + strFecGenAsiDia + "'";
                    stm.executeUpdate(strSQL);
                    i++;
                    pgrSis.setValue(i);
                    //Armar la sentencia SQL.
                    strSQL="";
                    strSQL+="UPDATE tbm_cabDia SET st_reg='I' WHERE co_tipDoc IN (48, 49, 235, 236) AND st_reg IN ('I', 'P', 'D')";
                    strSQL+=" AND co_emp=" + objParSis.getCodigoEmpresa();
                    strSQL+=" AND fe_dia>='" + strFecGenAsiDia + "'";
                    stm.executeUpdate(strSQL);
                    i++;
                    pgrSis.setValue(i);
                }
                stm.close();
                con.close();
                stm=null;
                con=null;
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butPro.setText("Procesar");
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        javax.swing.JOptionPane.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si y No. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return javax.swing.JOptionPane.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    /**
     * Esta función muestra un mensaje de error al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos no se grabaron
     * y que debe comunicar de este particular al administrador del sistema.
     */
    private void mostrarMsgErr(String strMsg)
    {
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        javax.swing.JOptionPane.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConItm(int intTipBus)
    {
        String strAli, strCam;
        Librerias.ZafConsulta.ZafConsulta objVenCon;
        boolean blnRes=true;
        try
        {
            strAli="Código, Alterno, Nombre";
            strCam="a1.co_itm, a1.tx_codAlt, a1.tx_nomItm";
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_itm, a1.tx_codAlt, a1.tx_nomItm";
            strSQL+=" FROM tbm_inv AS a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            objVenCon=new Librerias.ZafConsulta.ZafConsulta(javax.swing.JOptionPane.getFrameForComponent(this), strAli, strCam, strSQL, "", objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            objVenCon.setTitle("Listado de inventario");
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    objVenCon.setVisible(true);
                    if (objVenCon.acepto())
                    {
                        txtCodItm.setText(objVenCon.GetCamSel(1));
                        txtCodAlt.setText(objVenCon.GetCamSel(2));
                        txtNomItm.setText(objVenCon.GetCamSel(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Código".
                    if (objVenCon.buscar("LOWER(a1.tx_codAlt) LIKE '" + txtCodAlt.getText().toLowerCase() + "'"))
                    {
                        txtCodItm.setText(objVenCon.GetCamSel(1));
                        txtCodAlt.setText(objVenCon.GetCamSel(2));
                        txtNomItm.setText(objVenCon.GetCamSel(3));
                    }
                    else
                    {
                        objVenCon.setFiltroConsulta(txtCodAlt.getText());
                        objVenCon.setSelectedTipBus(2);
                        objVenCon.setSelectedCamBus(1);
                        objVenCon.setVisible(true);
                        if (objVenCon.acepto())
                        {
                            txtCodItm.setText(objVenCon.GetCamSel(1));
                            txtCodAlt.setText(objVenCon.GetCamSel(2));
                            txtNomItm.setText(objVenCon.GetCamSel(3));
                        }
                        else
                        {
                            txtCodItm.setText(strCodAlt);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (objVenCon.buscar("LOWER(a1.tx_nomItm) LIKE '" + txtNomItm.getText().toLowerCase() + "'"))
                    {
                        txtCodItm.setText(objVenCon.GetCamSel(1));
                        txtCodAlt.setText(objVenCon.GetCamSel(2));
                        txtNomItm.setText(objVenCon.GetCamSel(3));
                    }
                    else
                    {
                        objVenCon.setFiltroConsulta(txtNomItm.getText());
                        objVenCon.setSelectedTipBus(2);
                        objVenCon.setSelectedCamBus(2);
                        objVenCon.setVisible(true);
                        if (objVenCon.acepto())
                        {
                            txtCodItm.setText(objVenCon.GetCamSel(1));
                            txtCodAlt.setText(objVenCon.GetCamSel(2));
                            txtNomItm.setText(objVenCon.GetCamSel(3));
                        }
                        else
                        {
                            txtNomItm.setText(strNomItm);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podría presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaría informado en todo
     * momento de lo que ocurre. Si se desea hacer ésto es necesario utilizar ésta clase
     * ya que si no sólo se apreciaría los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        private int intIndFun;
        
        public ZafThreadGUI()
        {
            intIndFun=0;
        }
        
        public void run()
        {
            switch (intIndFun)
            {
                case 0: //Botón "Consultar".
                    consultar();
                    break;
                case 1: //Botón "Procesar".
                    procesar();
                    break;
                case 2: //Botón "Programar".
                    consultar();
                    procesar();
                    break;
            }
            objThrGUI=null;
        }
        
        /**
         * Esta función establece el indice de la función a ejecutar. En la clase Thread
         * se pueden ejecutar diferentes funciones. Esta función sirve para determinar
         * la función que debe ejecutar el Thread.
         * @param indice El indice de la función a ejecutar.
         */
        public void setIndFunEje(int indice)
        {
            intIndFun=indice;
        }
        
        /**
         * Esta función carga los datos en el JTable.
         */
        private void consultar()
        {
            blnCon=true;
            if (!cargarDetReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sólo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
        }
        
        /**
         * Esta función recostea cada uno de los items que se encuentran en el JTable.
         */
        private void procesar()
        {
            java.util.Date datFecIniPro, datFecFinPro;
            //Validar que no se pueda grabar diarios en periodos cerrados.
            if (objUti.parseDate(objSelFec.getFechaDesde(), "dd/MM/yyyy").compareTo(objUti.parseDate("2005/12/31", "yyyy/MM/dd"))<=0)
            {
                mostrarMsgInf("<HTML>El rango de fechas a procesar es incorrecta. <BR>Está tratando de PROCESAR documentos de en un periodo cerrado. <BR>Corrija la fecha de proceso y vuelva a intentarlo.</HTML>");
            }
            else
            {
                datFecIniPro=new java.util.Date();
                if (!recostearItm())
                {
                    mostrarMsgErr("Ocurrió un error al realizar la operación RECOSTEAR.\nIntente realizar la operación nuevamente.\nSi el problema persiste notifiquelo a su administrador del sistema.");
                    //Inicializar objetos si no se pudo cargar los datos.
                    lblMsgSis.setText("Listo");
                    pgrSis.setValue(0);
                    butPro.setText("Procesar");
                }
                else
                {
                    datFecFinPro=new java.util.Date();
                    mostrarMsgInf("<HTML>La operación RECOSTEAR se realizó con éxito.<BR>Resumen del proceso:<BR><FONT COLOR=\"blue\">Inicio:</FONT> " + objUti.formatearFecha(datFecIniPro, "dd/MMM/yyyy HH:mm:ss") + "<BR><FONT COLOR=\"blue\">Fin:</FONT> " + objUti.formatearFecha(datFecFinPro, "dd/MMM/yyyy HH:mm:ss") + "</HTML>");
                }
            }
            datFecIniPro=null;
            datFecFinPro=null;
        }
    }

    private class ZafThreadExe extends Thread
    {
        java.util.Date datFecSis, datFecExe;
        
        public ZafThreadExe()
        {
            datFecExe=objUti.parseDate(txtFecHorEje.getText(), "yyyy/MM/dd HH:mm:ss");
        }
        
        public void run()
        {
            butEje.setEnabled(false);
            if (!txtFecHorEje.getText().equals(""))
            {
                datFecExe=objUti.parseDate(txtFecHorEje.getText(), "yyyy/MM/dd HH:mm:ss");
                while (true)
                {
                    datFecSis=new java.util.Date();
                    if (datFecExe.before(datFecSis))
                    {
                        objThrGUI=new ZafThreadGUI();
                        objThrGUI.setIndFunEje(2);
                        objThrGUI.start();
                        break;
                    }
                    try
                    {
                        sleep(2000);
                    }
                    catch (InterruptedException e)
                    {
                        System.out.println("Excepción: " + e.toString());
                    }
                }
            }
            butEje.setEnabled(true);
        }

    }
    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_LIN:
                    strMsg="";
                    break;
                case INT_TBL_DAT_COD_ITM:
                    strMsg="Código del item";
                    break;
                case INT_TBL_DAT_COD_ALT:
                    strMsg="Código alterno del item";
                    break;
                case INT_TBL_DAT_NOM_ITM:
                    strMsg="Nombre del item";
                    break;
                case INT_TBL_DAT_NUM_MOV:
                    strMsg="Número de movimientos del item";
                    break;
                case INT_TBL_DAT_CHK:
                    strMsg="Estado de recosteo";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
}
