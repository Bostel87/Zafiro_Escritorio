/*
 * ZafCom98.java
 *
 * Created on March 11, 2010, 11:47 PM
 */
package Compras.ZafCom98;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelEdiButVco.ZafTblCelEdiButVco;
import Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt;
import Librerias.ZafTblUti.ZafTblCelEdiTxtVco.ZafTblCelEdiTxtVco;
import Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut;
import Librerias.ZafToolBar.ZafToolBar;
import java.math.BigDecimal;

/**
 *
 * @author  Gigi
 */
public class ZafCom98 extends javax.swing.JInternalFrame
{   
    //Modelo de la tabla de Com77_02
    //Constantes: Columnas del JTable.
    private static final int INT_TBL_DAT_LIN=0;             //Línea
    private static final int INT_TBL_DAT_COD_ITM_MAE=1;     //Codigo de item maestro
    private static final int INT_TBL_DAT_COD_ITM_GRP=2;         //Codigo de item
    private static final int INT_TBL_DAT_COD_ALT_ITM=3;     //Código alterno del item
    private static final int INT_TBL_DAT_COD_LET_ITM=4;     //Código alterno del item
    private static final int INT_TBL_DAT_BUT_ITM=5;         //buton para consulta del item
    private static final int INT_TBL_DAT_NOM_ITM=6;         //Nombre del item
    private static final int INT_TBL_DAT_UNI_MED=7;         //Unidad de medida
    private static final int INT_TBL_DAT_CAN=8;             //Cantidad
    private static final int INT_TBL_DAT_POR_CAL_COS_UNI=9; //Porcentaje calculado de costo unitario
    
    
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafDocLis objDocLis;
    private ZafVenCon vcoItm, vcoCfg;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;
    private ZafTblFilCab objTblFilCab;
    private ZafTblBus objTblBus;
    private ZafMouMotAda objMouMotAda;
    private ZafTblCelRenLbl objTblCelRenLbl, objTblCelRenLblCan;
    private ZafTblCelEdiTxt objTblCelEdiTxtCan, objTblCelEdiTxtPorCosUni;
    private ZafTblCelRenBut objTblCelRenButItm;
    private ZafTblCelEdiButVco objTblCelEdiButVcoItm;
    private ZafTblCelEdiTxtVco objTblCelEdiTxtVcoItm, objTblCelEdiTxtVcoLet;
    private MiToolBar objTooBar;
    
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private java.util.Date datFecAux;
    
    private Vector vecDat, vecCab, vecReg;
    private String strSQL, strAux;    
    private boolean blnHayCam;    
    private String strVerPrg=" v0.1.3";
    
    private String strCodAlt, strCodAlt2, strNomItm;
    private Vector vecAux;
    
    //ArrayList para consultar
    private ArrayList arlRegConIngImp, arlDatConIngImp;
    private static final int INT_ARL_CON_COD_EMP=0;  
    private static final int INT_ARL_CON_COD_GRP=1;   
    private static final int INT_ARL_CON_DES_COR=2;  
    private static final int INT_ARL_CON_DES_LAR=3;
    private static final int INT_ARL_CON_OBS1=4;
    private static final int INT_ARL_CON_EST_REG=5;
    //Indice de la Consulta del programa 
    private int intIndReg;
    
    /** Creates new form ZafCom77 */
    public ZafCom98(ZafParSis obj){
        try{
            objParSis=(ZafParSis)obj.clone();
            arlDatConIngImp=new ArrayList();
            initComponents();
            configurarFrm();
            agregarDocLis();
        }
        catch (CloneNotSupportedException e){
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGrl = new javax.swing.JPanel();
        panCab = new javax.swing.JPanel();
        lblTipDoc = new javax.swing.JLabel();
        lblItm = new javax.swing.JLabel();
        txtCodItmMae = new javax.swing.JTextField();
        txtCodItm = new javax.swing.JTextField();
        txtCodAlt = new javax.swing.JTextField();
        txtCodItmLet = new javax.swing.JTextField();
        txtNomItm = new javax.swing.JTextField();
        butItm = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtCodCfg = new javax.swing.JTextField();
        butCarPag = new javax.swing.JButton();
        txtDesCor = new javax.swing.JTextField();
        txtDesLar = new javax.swing.JTextField();
        panDet = new javax.swing.JPanel();
        spnDet = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panSur = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cboEst = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        lblObs1 = new javax.swing.JLabel();
        spnObs1 = new javax.swing.JScrollPane();
        txaObs1 = new javax.swing.JTextArea();
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("jLabel1");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        tabFrm.setAutoscrolls(true);

        panGrl.setAutoscrolls(true);
        panGrl.setLayout(new java.awt.BorderLayout());

        panCab.setPreferredSize(new java.awt.Dimension(0, 74));
        panCab.setLayout(null);

        lblTipDoc.setText("Descripción:");
        lblTipDoc.setToolTipText("Tipo de documento");
        panCab.add(lblTipDoc);
        lblTipDoc.setBounds(10, 28, 80, 20);

        lblItm.setText("Item:");
        lblItm.setToolTipText("Item");
        panCab.add(lblItm);
        lblItm.setBounds(10, 50, 40, 20);
        panCab.add(txtCodItmMae);
        txtCodItmMae.setBounds(36, 50, 30, 20);
        panCab.add(txtCodItm);
        txtCodItm.setBounds(66, 50, 30, 20);

        txtCodAlt.setToolTipText("Código Alterno");
        txtCodAlt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodAltFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodAltFocusLost(evt);
            }
        });
        txtCodAlt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodAltActionPerformed(evt);
            }
        });
        panCab.add(txtCodAlt);
        txtCodAlt.setBounds(96, 50, 100, 20);

        txtCodItmLet.setToolTipText("Código Alterno 2 ");
        txtCodItmLet.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodItmLetFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodItmLetFocusLost(evt);
            }
        });
        txtCodItmLet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodItmLetActionPerformed(evt);
            }
        });
        panCab.add(txtCodItmLet);
        txtCodItmLet.setBounds(196, 50, 80, 20);

        txtNomItm.setToolTipText("Nombre del Item");
        txtNomItm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomItmFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomItmFocusLost(evt);
            }
        });
        txtNomItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomItmActionPerformed(evt);
            }
        });
        panCab.add(txtNomItm);
        txtNomItm.setBounds(276, 50, 330, 20);

        butItm.setText("...");
        butItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butItmActionPerformed(evt);
            }
        });
        panCab.add(butItm);
        butItm.setBounds(606, 50, 21, 21);

        jLabel2.setText("Código:");
        panCab.add(jLabel2);
        jLabel2.setBounds(10, 6, 60, 20);
        panCab.add(txtCodCfg);
        txtCodCfg.setBounds(96, 6, 90, 20);

        butCarPag.setText("...");
        butCarPag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCarPagActionPerformed(evt);
            }
        });
        panCab.add(butCarPag);
        butCarPag.setBounds(186, 5, 22, 22);
        panCab.add(txtDesCor);
        txtDesCor.setBounds(96, 28, 100, 20);
        panCab.add(txtDesLar);
        txtDesLar.setBounds(196, 28, 410, 20);

        panGrl.add(panCab, java.awt.BorderLayout.NORTH);

        panDet.setBorder(javax.swing.BorderFactory.createTitledBorder("Items a ingresar:"));
        panDet.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDet.setViewportView(tblDat);

        panDet.add(spnDet, java.awt.BorderLayout.CENTER);

        panSur.setPreferredSize(new java.awt.Dimension(100, 70));
        panSur.setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(100, 26));
        jPanel1.setLayout(null);

        jLabel3.setText("Estado:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(6, 6, 124, 14);

        cboEst.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "A:Activo", "I:Inactivo" }));
        jPanel1.add(cboEst);
        cboEst.setBounds(90, 2, 170, 20);

        panSur.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        lblObs1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblObs1.setText("Observación:   ");
        jPanel2.add(lblObs1, java.awt.BorderLayout.WEST);

        txaObs1.setLineWrap(true);
        spnObs1.setViewportView(txaObs1);

        jPanel2.add(spnObs1, java.awt.BorderLayout.CENTER);

        panSur.add(jPanel2, java.awt.BorderLayout.CENTER);

        panDet.add(panSur, java.awt.BorderLayout.SOUTH);

        panGrl.add(panDet, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panGrl);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setPreferredSize(new java.awt.Dimension(0, 50));
        panBar.setLayout(new java.awt.BorderLayout());
        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        setBounds(0, 0, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
// TODO add your handling code here:

}//GEN-LAST:event_formInternalFrameOpened

private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="¿Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                //Cerrar la conexión si está abierta.
                if (rst!=null)
                {
                    rst.close();
                    stm.close();
                    con.close();
                    rst=null;
                    stm=null;
                    con=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e){
            dispose();
        }
}//GEN-LAST:event_exitForm

    private void txtCodAltFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltFocusGained
        strCodAlt=txtCodAlt.getText();
        txtCodAlt.selectAll();
    }//GEN-LAST:event_txtCodAltFocusGained

    private void txtCodAltFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtCodAlt.getText().equalsIgnoreCase(strCodAlt))
        {
            if (txtCodAlt.getText().equals(""))
            {
                txtCodItmMae.setText("");
                txtCodItm.setText("");
                txtCodAlt.setText("");
                txtCodItmLet.setText("");
                txtNomItm.setText("");
            }
            else
            {
                mostrarVenConItm(1);
            }
        }
        else
        txtCodAlt.setText(strCodAlt);
    }//GEN-LAST:event_txtCodAltFocusLost

    private void txtCodAltActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodAltActionPerformed
        txtCodAlt.transferFocus();
    }//GEN-LAST:event_txtCodAltActionPerformed

    private void txtCodItmLetFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodItmLetFocusGained
        strCodAlt2 = txtCodItmLet.getText();
        txtCodItmLet.selectAll();
    }//GEN-LAST:event_txtCodItmLetFocusGained

    private void txtCodItmLetFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodItmLetFocusLost
        if (!txtCodItmLet.getText().equalsIgnoreCase(strCodAlt2))
        {
            if (txtCodItmLet.getText().equals(""))
            {
                txtCodItmMae.setText("");
                txtCodItm.setText("");
                txtCodAlt.setText("");
                txtCodItmLet.setText("");
                txtNomItm.setText("");
            }
            else
            {
                mostrarVenConItm(2);
            }
        }
        else
            txtCodItmLet.setText(strCodAlt2);
    }//GEN-LAST:event_txtCodItmLetFocusLost

    private void txtCodItmLetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodItmLetActionPerformed
        txtCodItmLet.transferFocus();
    }//GEN-LAST:event_txtCodItmLetActionPerformed

    private void txtNomItmFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomItmFocusGained
        strNomItm=txtNomItm.getText();
        txtNomItm.selectAll();
    }//GEN-LAST:event_txtNomItmFocusGained

    private void txtNomItmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomItmFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtNomItm.getText().equalsIgnoreCase(strNomItm))
        {
            if (txtNomItm.getText().equals(""))
            {
                txtCodItmMae.setText("");
                txtCodItm.setText("");
                txtCodAlt.setText("");
                txtCodItmLet.setText("");
                txtNomItm.setText("");
            }
            else
            {
                mostrarVenConItm(3);
            }
        }
        else
            txtNomItm.setText(strNomItm);
    }//GEN-LAST:event_txtNomItmFocusLost

    private void txtNomItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomItmActionPerformed
        txtNomItm.transferFocus();
    }//GEN-LAST:event_txtNomItmActionPerformed

    private void butItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butItmActionPerformed
        mostrarVenConItm(0);
    }//GEN-LAST:event_butItmActionPerformed

    private void butCarPagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCarPagActionPerformed
        // TODO add your handling code here:
        mostrarVenConConCfgConInv(0);
    }//GEN-LAST:event_butCarPagActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCarPag;
    private javax.swing.JButton butItm;
    private javax.swing.JComboBox cboEst;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblItm;
    private javax.swing.JLabel lblObs1;
    private javax.swing.JLabel lblTipDoc;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panDet;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGrl;
    private javax.swing.JPanel panSur;
    private javax.swing.JScrollPane spnDet;
    private javax.swing.JScrollPane spnObs1;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextArea txaObs1;
    private javax.swing.JTextField txtCodAlt;
    private javax.swing.JTextField txtCodCfg;
    private javax.swing.JTextField txtCodItm;
    private javax.swing.JTextField txtCodItmLet;
    private javax.swing.JTextField txtCodItmMae;
    private javax.swing.JTextField txtDesCor;
    private javax.swing.JTextField txtDesLar;
    private javax.swing.JTextField txtNomItm;
    // End of variables declaration//GEN-END:variables

    
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            objTooBar=new MiToolBar(this);
            objDocLis=new ZafDocLis();

            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + strVerPrg);
            lblTit.setText(strAux);

            configurarVenConItm();
            configurarTblDat();
            configurarVenConCfgConInv();

            txtCodCfg.setBackground(objParSis.getColorCamposSistema());
            txtCodCfg.setEditable(false);
            txtDesCor.setBackground(objParSis.getColorCamposObligatorios());
            txtDesCor.selectAll();
            txtDesCor.requestFocus();
            txtDesLar.setBackground(objParSis.getColorCamposObligatorios());
            txtCodItmMae.setBackground(objParSis.getColorCamposObligatorios());
            txtCodItm.setBackground(objParSis.getColorCamposObligatorios());
            txtCodAlt.setBackground(objParSis.getColorCamposObligatorios());
            txtCodItmLet.setBackground(objParSis.getColorCamposObligatorios());
            txtNomItm.setBackground(objParSis.getColorCamposObligatorios());
            cboEst.setSelectedIndex(0);
            
            objTooBar.setVisibleAnular(false);
            objTooBar.setVisibleEliminar(false);            
            
            if(objParSis.getCodigoEmpresa()!=objParSis.getCodigoEmpresaGrupo()){
                objTooBar.setVisibleInsertar(false);
            }
            
            vecDat=new Vector();    //Almacena los datos

            panBar.add(objTooBar);
            txtCodItmMae.setVisible(false);
            txtCodItm.setVisible(false);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta clase implementa la interface DocumentListener que observa los cambios que
     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
     * Se la usa en el sistema para determinar si existe algún cambio que se deba grabar
     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
     * presentará un mensaje advirtiendo que si no guarda los cambios los perderá.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener 
    {
        public void changedUpdate(javax.swing.event.DocumentEvent evt)        {
            blnHayCam=true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }
    }
    
    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private void agregarDocLis()
    {
        txtDesCor.getDocument().addDocumentListener(objDocLis);
        txtDesLar.getDocument().addDocumentListener(objDocLis);
        txtCodItm.getDocument().addDocumentListener(objDocLis);
        txtCodItmMae.getDocument().addDocumentListener(objDocLis);
        txtCodItm.getDocument().addDocumentListener(objDocLis);
        txtCodAlt.getDocument().addDocumentListener(objDocLis);
        txtCodItmLet.getDocument().addDocumentListener(objDocLis);
        txtNomItm.getDocument().addDocumentListener(objDocLis);

    } 
    
    
        /**
     * Esta funcián configura el JTable "tblDat".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDat() {
        boolean blnRes = true;
        try {
            //Configurar JTable: Establecer el modelo.
            vecDat = new Vector();    //Almacena los datos
            vecCab = new Vector(10);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN, "");
            vecCab.add(INT_TBL_DAT_COD_ITM_MAE, "Cod.Itm.Mae.");
            vecCab.add(INT_TBL_DAT_COD_ITM_GRP, "Cod.Itm.Grp.");
            vecCab.add(INT_TBL_DAT_COD_ALT_ITM, "Cod.Alt.");
            vecCab.add(INT_TBL_DAT_COD_LET_ITM, "Cod.Let.");            
            vecCab.add(INT_TBL_DAT_BUT_ITM, "");
            vecCab.add(INT_TBL_DAT_NOM_ITM, "Item");
            vecCab.add(INT_TBL_DAT_UNI_MED, "Unidad");
            vecCab.add(INT_TBL_DAT_CAN, "Can.");
            vecCab.add(INT_TBL_DAT_POR_CAL_COS_UNI, "Por.Cal.Cos.Uni.");
            
            objTblMod = new ZafTblMod();
            objTblMod.setHeader(vecCab);

            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);           
            
            //Configurar JTable: Establecer tipo de seleccián.
            tblDat.setRowSelectionAllowed(true);
            tblDat.getTableHeader().setReorderingAllowed(false);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            

            
            
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            objTblPopMnu.setBorrarContenidoEnabled(true);
            objTblPopMnu.setPegarEnabled(true);
            objTblPopMnu.setInsertarFilaEnabled(false);
            objTblPopMnu.setInsertarFilasEnabled(false);
            
             objTblPopMnu.addTblPopMnuListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTblPopMnuAdapter() {
                public void beforeClick(Librerias.ZafTblUti.ZafTblEvt.ZafTblPopMnuEvent evt) {
                    if (objTblPopMnu.isClickEliminarFila()){
                    }
                }
                public void afterClick(Librerias.ZafTblUti.ZafTblEvt.ZafTblPopMnuEvent evt) {
                    if (objTblPopMnu.isClickEliminarFila()){
                        calcularPorcentajeCostoIngreso();
                    }
                }
            });
            
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux = tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(26);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM_MAE).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM_GRP).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_COD_ALT_ITM).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_COD_LET_ITM).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_BUT_ITM).setPreferredWidth(25);
            tcmAux.getColumn(INT_TBL_DAT_NOM_ITM).setPreferredWidth(230);
            tcmAux.getColumn(INT_TBL_DAT_UNI_MED).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_CAN).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_POR_CAL_COS_UNI).setPreferredWidth(80);
            
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab = new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);

            //Configurar JTable: Editor de básqueda.
            objTblBus=new ZafTblBus(tblDat);
            
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda = new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);

            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.LEFT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_GEN);
            tcmAux.getColumn(INT_TBL_DAT_COD_ALT_ITM).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_COD_LET_ITM).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;

            
            //Configurar ZafTblMod: Establecer el tipo de dato de las columnas.
            objTblMod.setColumnDataType(INT_TBL_DAT_CAN, objTblMod.INT_COL_DBL, new Integer(0), null);
            objTblMod.setColumnDataType(INT_TBL_DAT_POR_CAL_COS_UNI, objTblMod.INT_COL_DBL, new Integer(0), null);
            //Configurar ZafTblMod: Establecer las columnas obligatorias.
            java.util.ArrayList arlAux=new java.util.ArrayList();
            arlAux.add("" + INT_TBL_DAT_CAN);
            arlAux.add("" + INT_TBL_DAT_POR_CAL_COS_UNI);
            objTblMod.setColumnasObligatorias(arlAux);
            arlAux=null;
            //Configurar ZafTblMod: Establecer el color de fondo de las filas incompletas.
            objTblMod.setBackgroundIncompleteRows(objParSis.getColorCamposObligatorios());
            
            //Configurar JTable: Renderizar celdas.
            objTblCelRenLblCan=new ZafTblCelRenLbl();
            objTblCelRenLblCan.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLblCan.setTipoFormato(objTblCelRenLblCan.INT_FOR_NUM);
            objTblCelRenLblCan.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            objTblCelRenLblCan.setBackground(objParSis.getColorCamposObligatorios());
            tcmAux.getColumn(INT_TBL_DAT_CAN).setCellRenderer(objTblCelRenLblCan);
            tcmAux.getColumn(INT_TBL_DAT_POR_CAL_COS_UNI).setCellRenderer(objTblCelRenLblCan);
//            objTblCelRenLblCan=null;
            
            objTblCelEdiTxtCan=new ZafTblCelEdiTxt(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CAN).setCellEditor(objTblCelEdiTxtCan);
            objTblCelEdiTxtCan.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFil=-1;
                int intCol=-1;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {                  
                }
            });
            
            objTblCelEdiTxtPorCosUni=new ZafTblCelEdiTxt(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_POR_CAL_COS_UNI).setCellEditor(objTblCelEdiTxtPorCosUni);
            objTblCelEdiTxtPorCosUni.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFil=-1;
                int intCol=-1;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {                  
                }
            });
            
             
            //Configurar JTable: Ocultar columnas del sistema.
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_ITM_MAE, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_ITM_GRP, tblDat);
            
            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_COD_ALT_ITM);
            vecAux.add("" + INT_TBL_DAT_COD_LET_ITM);
            vecAux.add("" + INT_TBL_DAT_BUT_ITM);
            vecAux.add("" + INT_TBL_DAT_CAN);
            vecAux.add("" + INT_TBL_DAT_POR_CAL_COS_UNI);
                        
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            
            //Configurar JTable: Renderizar celdas.
            objTblCelRenButItm=new ZafTblCelRenBut();
            tcmAux.getColumn(INT_TBL_DAT_BUT_ITM).setCellRenderer(objTblCelRenButItm);
            objTblCelRenButItm=null;
            //Configurar JTable: Editor de celdas.
            int intColVen[]=new int[6];
            intColVen[0]=1;
            intColVen[1]=2;
            intColVen[2]=3;
            intColVen[3]=4;
            intColVen[4]=5;
            intColVen[5]=6;
            int intColTbl[]=new int[6];
            intColTbl[0]=INT_TBL_DAT_COD_ITM_MAE;
            intColTbl[1]=INT_TBL_DAT_COD_ITM_GRP;
            intColTbl[2]=INT_TBL_DAT_COD_ALT_ITM;
            intColTbl[3]=INT_TBL_DAT_COD_LET_ITM;
            intColTbl[4]=INT_TBL_DAT_NOM_ITM;
            intColTbl[5]=INT_TBL_DAT_UNI_MED;
            
            objTblCelEdiTxtVcoItm=new ZafTblCelEdiTxtVco(tblDat, vcoItm, intColVen, intColTbl);
            tcmAux.getColumn(INT_TBL_DAT_COD_ALT_ITM).setCellEditor(objTblCelEdiTxtVcoItm);
            objTblCelEdiTxtVcoItm.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFil=-1;
                String strLin="";
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFil=tblDat.getSelectedRow();
                    strLin=objTblMod.getValueAt(intFil, INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(intFil, INT_TBL_DAT_LIN).toString();
                    //INSERCION
                    objTblCelEdiTxtVcoItm.setCancelarEdicion(false);
                }
                public void beforeConsultar(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    vcoItm.setCampoBusqueda(2);
                    vcoItm.setCriterio1(11);
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if (objTblCelEdiTxtVcoItm.isConsultaAceptada()){
                        objTblMod.setValueAt(vcoItm.getValueAt(1), intFil, INT_TBL_DAT_COD_ITM_MAE);
                        objTblMod.setValueAt(vcoItm.getValueAt(2), intFil, INT_TBL_DAT_COD_ITM_GRP);
                        objTblMod.setValueAt(vcoItm.getValueAt(3), intFil, INT_TBL_DAT_COD_ALT_ITM);
                        objTblMod.setValueAt(vcoItm.getValueAt(4), intFil, INT_TBL_DAT_COD_LET_ITM);
                        objTblMod.setValueAt(vcoItm.getValueAt(5), intFil, INT_TBL_DAT_NOM_ITM);
                        objTblMod.setValueAt(vcoItm.getValueAt(6), intFil, INT_TBL_DAT_UNI_MED);
                        //objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
                        objTblMod.insertRow();
                        calcularPorcentajeCostoIngreso();
                    }
                }
            });
            
            objTblCelEdiTxtVcoLet=new ZafTblCelEdiTxtVco(tblDat, vcoItm, intColVen, intColTbl);
            tcmAux.getColumn(INT_TBL_DAT_COD_LET_ITM).setCellEditor(objTblCelEdiTxtVcoLet);
            objTblCelEdiTxtVcoLet.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFil=-1;
                String strLin="";
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFil=tblDat.getSelectedRow();
                    strLin=objTblMod.getValueAt(intFil, INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(intFil, INT_TBL_DAT_LIN).toString();
                    //INSERCION
                    objTblCelEdiTxtVcoLet.setCancelarEdicion(false);
                }
                public void beforeConsultar(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    vcoItm.setCampoBusqueda(3);
                    vcoItm.setCriterio1(11);
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if (objTblCelEdiTxtVcoLet.isConsultaAceptada()){
                        objTblMod.setValueAt(vcoItm.getValueAt(1), intFil, INT_TBL_DAT_COD_ITM_MAE);
                        objTblMod.setValueAt(vcoItm.getValueAt(2), intFil, INT_TBL_DAT_COD_ITM_GRP);
                        objTblMod.setValueAt(vcoItm.getValueAt(3), intFil, INT_TBL_DAT_COD_ALT_ITM);
                        objTblMod.setValueAt(vcoItm.getValueAt(4), intFil, INT_TBL_DAT_COD_LET_ITM);
                        objTblMod.setValueAt(vcoItm.getValueAt(5), intFil, INT_TBL_DAT_NOM_ITM);
                        objTblMod.setValueAt(vcoItm.getValueAt(6), intFil, INT_TBL_DAT_UNI_MED);
                        //objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
                        objTblMod.insertRow();
                        calcularPorcentajeCostoIngreso();
                    }
                }
            });
            

            objTblCelEdiButVcoItm=new ZafTblCelEdiButVco(tblDat, vcoItm, intColVen, intColTbl);
            tcmAux.getColumn(INT_TBL_DAT_BUT_ITM).setCellEditor(objTblCelEdiButVcoItm);
            objTblCelEdiButVcoItm.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFil=-1;
                String strSQLAdi="";
                String strLin="";
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFil=tblDat.getSelectedRow();
                    strLin=objTblMod.getValueAt(intFil, INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(intFil, INT_TBL_DAT_LIN).toString();
                    //INSERCION
                    objTblCelEdiButVcoItm.setCancelarEdicion(false);
                }
                public void beforeConsultar(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    vcoItm.setCampoBusqueda(3);
                    vcoItm.setCriterio1(11);
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if (objTblCelEdiButVcoItm.isConsultaAceptada()){
                        objTblMod.setValueAt(vcoItm.getValueAt(1), intFil, INT_TBL_DAT_COD_ITM_MAE);
                        objTblMod.setValueAt(vcoItm.getValueAt(2), intFil, INT_TBL_DAT_COD_ITM_GRP);
                        objTblMod.setValueAt(vcoItm.getValueAt(3), intFil, INT_TBL_DAT_COD_ALT_ITM);
                        objTblMod.setValueAt(vcoItm.getValueAt(4), intFil, INT_TBL_DAT_COD_LET_ITM);
                        objTblMod.setValueAt(vcoItm.getValueAt(5), intFil, INT_TBL_DAT_NOM_ITM);
                        objTblMod.setValueAt(vcoItm.getValueAt(6), intFil, INT_TBL_DAT_UNI_MED);
                        //objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
                        objTblMod.insertRow();
                        calcularPorcentajeCostoIngreso();
                    }
                }
            });
            intColVen=null;
            intColTbl=null;
            
            
            
            //Libero los objetos auxiliares.
            tcmAux = null;
        }
        catch(Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter {

        public void mouseMoved(java.awt.event.MouseEvent evt) {
            int intCol = tblDat.columnAtPoint(evt.getPoint());
            String strMsg = "";
            switch (intCol) {
                case INT_TBL_DAT_COD_ITM_MAE:
                    strMsg = "Código del item maestro";
                    break;
                case INT_TBL_DAT_COD_ITM_GRP:
                    strMsg = "Código del item de grupo";
                    break;
                case INT_TBL_DAT_COD_ALT_ITM:
                    strMsg = "Código alterno del item";
                    break;
                case INT_TBL_DAT_COD_LET_ITM:
                    strMsg = "Código en letras del item";
                    break;
                case INT_TBL_DAT_NOM_ITM:
                    strMsg = "Nombre del item";
                    break;
                case INT_TBL_DAT_UNI_MED:
                    strMsg = "Unidad de medida";
                    break;
                case INT_TBL_DAT_CAN:
                    strMsg = "Cantidad de conversión";
                    break;
                case INT_TBL_DAT_POR_CAL_COS_UNI:
                    strMsg = "Porcentaje de Cálculo de Costo Unitario";
                    break;
                default:
                    strMsg = "";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }


    /**
     * Esta función configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Items".
     */
    private boolean configurarVenConItm()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("d1.co_itmMae");
            arlCam.add("d1.co_itm");
            arlCam.add("d1.tx_codAlt");
            arlCam.add("d1.tx_codAlt2");
            arlCam.add("d1.tx_nomItm");
            arlCam.add("d4.tx_desCor");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Cód.Itm.Mae.");
            arlAli.add("Cód.Itm.");
            arlAli.add("Cód.Alt.");
            arlAli.add("Cód.Alt.2"); 
            arlAli.add("Nom.Itm."); 
            arlAli.add("Uni.Med.");  
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("70");
            arlAncCol.add("70");
            arlAncCol.add("80");
            arlAncCol.add("70");
            arlAncCol.add("350");
            arlAncCol.add("60");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a3.co_itmMae, a3.co_itm, a1.tx_codAlt, a1.tx_codAlt2 , a1.tx_nomItm, a2.tx_desCor";
            strSQL+=" FROM tbm_inv AS a1";
            strSQL+=" INNER JOIN tbm_equInv as a3 ON (a1.co_emp=a3.co_emp AND a1.co_itm=a3.co_itm)";
            strSQL+=" LEFT OUTER JOIN tbm_var AS a2 ON (a1.co_uni=a2.co_reg)";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresaGrupo();
            strSQL+=" AND a1.st_reg='A' AND (a1.tx_codAlt like '%I' OR a1.tx_codAlt like '%S' )";
            strSQL+=" ORDER BY a1.tx_codAlt";
            
            //Ocultar Columnas
            int intColOcu[]=new int[1];
            intColOcu[0]=2;  // Cód.Itm.
            
            vcoItm=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de Items", strSQL, arlCam, arlAli, arlAncCol,intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
           // vcoItm.setCampoBusqueda(2);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConItm(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoItm.setCampoBusqueda(2);
                    vcoItm.setVisible(true);
                    if (vcoItm.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                    {
                        txtCodItmMae.setText(vcoItm.getValueAt(1));
                        txtCodItm.setText(vcoItm.getValueAt(2));
                        txtCodAlt.setText(vcoItm.getValueAt(3));
                        txtCodItmLet.setText(vcoItm.getValueAt(4));
                        txtNomItm.setText(vcoItm.getValueAt(5));
                    }
                    break;
                case 1: //Búsqueda directa por "Codigo alterno".
                    if (vcoItm.buscar("a1.tx_codAlt", txtCodAlt.getText()))
                    {
                        txtCodItmMae.setText(vcoItm.getValueAt(1));
                        txtCodItm.setText(vcoItm.getValueAt(2));
                        txtCodAlt.setText(vcoItm.getValueAt(3));
                        txtCodItmLet.setText(vcoItm.getValueAt(4));
                        txtNomItm.setText(vcoItm.getValueAt(5));
                    }
                    else
                    {
                        vcoItm.setCampoBusqueda(2);
                        vcoItm.setCriterio1(11);
                        vcoItm.cargarDatos();
                        vcoItm.setVisible(true);
                        if (vcoItm.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodItmMae.setText(vcoItm.getValueAt(1));
                            txtCodItm.setText(vcoItm.getValueAt(2));
                            txtCodAlt.setText(vcoItm.getValueAt(3));
                            txtCodItmLet.setText(vcoItm.getValueAt(4));
                            txtNomItm.setText(vcoItm.getValueAt(5));
                        }
                        else
                        {
                            txtCodAlt.setText(strCodAlt);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Codigo alterno".
                    if (vcoItm.buscar("a1.tx_codAlt2", txtCodItmLet.getText()))
                    {
                        txtCodItmMae.setText(vcoItm.getValueAt(1));
                        txtCodItm.setText(vcoItm.getValueAt(2));
                        txtCodAlt.setText(vcoItm.getValueAt(3));
                        txtCodItmLet.setText(vcoItm.getValueAt(4));
                        txtNomItm.setText(vcoItm.getValueAt(5));
                    }
                    else
                    {
                        vcoItm.setCampoBusqueda(3);
                        vcoItm.setCriterio1(11);
                        vcoItm.cargarDatos();
                        vcoItm.setVisible(true);
                        if (vcoItm.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodItmMae.setText(vcoItm.getValueAt(1));
                            txtCodItm.setText(vcoItm.getValueAt(2));
                            txtCodAlt.setText(vcoItm.getValueAt(3));
                            txtCodItmLet.setText(vcoItm.getValueAt(4));
                            txtNomItm.setText(vcoItm.getValueAt(5)); 
                        }
                        else
                        {
                            txtCodItmLet.setText(strCodAlt2);
                        }
                    }
                    break;
                case 3: //Búsqueda directa por "Nombre del item".
                    if (vcoItm.buscar("a1.tx_nomItm", txtNomItm.getText()))
                    {
                        txtCodItmMae.setText(vcoItm.getValueAt(1));
                        txtCodItm.setText(vcoItm.getValueAt(2));
                        txtCodAlt.setText(vcoItm.getValueAt(3));
                        txtCodItmLet.setText(vcoItm.getValueAt(4));
                        txtNomItm.setText(vcoItm.getValueAt(5)); 
                    }
                    else
                    {
                        vcoItm.setCampoBusqueda(4);
                        vcoItm.setCriterio1(11);
                        vcoItm.cargarDatos();
                        vcoItm.setVisible(true);
                        if (vcoItm.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodItmMae.setText(vcoItm.getValueAt(1));
                            txtCodItm.setText(vcoItm.getValueAt(2));
                            txtCodAlt.setText(vcoItm.getValueAt(3));
                            txtCodItmLet.setText(vcoItm.getValueAt(4));
                            txtNomItm.setText(vcoItm.getValueAt(5));
                        }
                        else
                        {
                            txtNomItm.setText(strNomItm);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
   
    

    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje de advertencia al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos se han cargado
     * con errores y que debe revisar dichos datos.
     */
    private void mostrarMsgAdv(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        if (strMsg.equals(""))
            strMsg="<HTML>Este registro tiene <FONT COLOR=\"red\">problemas</FONT>. <BR>Notifíquelo a su administrador del sistema.</HTML>";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.WARNING_MESSAGE);
    }
    
    
    /**
     * Esta función permite limpiar el formulario.
     * @return true: Si se pudo limpiar la ventana sin ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean limpiarFrm(){
        boolean blnRes=true;
        try{
            txtCodCfg.setText("");
            txtDesCor.setText("");
            txtDesLar.setText("");
            txtCodItm.setText("");
            txtCodItmLet.setText("");
            txtCodItmMae.setText("");
            txtCodAlt.setText("");
            txtNomItm.setText("");
            txaObs1.setText("");
            cboEst.setSelectedIndex(0);
            objTblMod.removeAllRows();
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
    
    /**
     * Esta función inserta el registro en la base de datos.
     * @return true: Si se pudo insertar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if(con!=null){
                if(insertar_tbmCabCfgConInv()){
                    if(insertar_tbmDetCfgConInv()){
                        con.commit();
                        blnRes=true;
                    }
                    else
                        con.rollback();
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    /**
     * Esta función permite insertar la cabecera de un registro.
     * @return true: Si se pudo insertar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertar_tbmCabCfgConInv(){
        boolean blnRes=true;
        String strEstCfg="";
        int intCodCfg=0;
        try{
            if (con!=null){
                stm=con.createStatement();
                
                switch(cboEst.getSelectedIndex()){
                    case 1:
                        strEstCfg="A";
                        break;
                    case 2:
                        strEstCfg="I";
                        break;
                    default:
                        strEstCfg="";
                        break;
                }
                
                //Obtener el código del último registro.
                strSQL="";
                strSQL+=" SELECT MAX(a1.co_grp) AS co_grp";
                strSQL+=" FROM tbm_cabCfgConInv AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                //System.out.println("insertar_tbmCabMovInv.tbm_cabMovInv: " + strSQL);
                rst=stm.executeQuery(strSQL);
                while(rst.next()){
                    intCodCfg=rst.getInt("co_grp");
                }
                txtCodCfg.setText("" + (intCodCfg+1));
                
                
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+=" INSERT INTO tbm_cabCfgConInv(";
                strSQL+="       co_emp, co_grp, tx_descor, tx_deslar, tx_obs1, st_reg, fe_ing";
                strSQL+="       , fe_ultmod, co_usring, co_usrmod";
                strSQL+=" )";
                strSQL+=" VALUES(";
                strSQL+="" + objParSis.getCodigoEmpresa() + "";//co_emp
                strSQL+=", " + txtCodCfg.getText() + "";//co_grp
                strSQL+=", " + objUti.codificar(txtDesCor.getText()) + "";//tx_descor
                strSQL+=", " + objUti.codificar(txtDesLar.getText()) + "";//tx_deslar
                strSQL+=", " + objUti.codificar(txaObs1.getText()) + "";//tx_obs1
                strSQL+=", " + objUti.codificar(strEstCfg) + "";//st_reg
                strAux=objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos());
                strSQL+=", '" + strAux + "'";//fe_ing
                strSQL+=", Null";//fe_ultmod
                strSQL+=", " + objParSis.getCodigoUsuario() + "";//co_usring
                strSQL+=", Null";//co_usrmod
                strSQL+=");";
                System.out.println("insertar_tbmCabCfgConInv: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    

    /**
     * Esta función permite insertar la cabecera de un registro.
     * @return true: Si se pudo insertar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertar_tbmDetCfgConInv(){
        boolean blnRes=true;
        String strSQLIns="";
        BigDecimal bdeCan=BigDecimal.ZERO;
        int j=1;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Armar la sentencia SQL.
                
                //Item de Egreso
                strSQL="";
                strSQL+=" INSERT INTO tbm_detCfgConInv(";
                strSQL+="     co_emp, co_grp, co_reg, co_itm, nd_can, tx_tiprel, st_reg, nd_porCalCos";
                strSQL+=" )";
                strSQL+=" VALUES(";
                strSQL+="" + objParSis.getCodigoEmpresa() + "";//co_emp
                strSQL+=", " + txtCodCfg.getText() + "";//co_grp
                strSQL+=", " + (j++) + "";//co_reg
                strSQL+=", " + txtCodItm.getText() + "";//co_itm
                bdeCan=objUti.redondearBigDecimal("1", objParSis.getDecimalesMostrar());
                strSQL+=", " + bdeCan + "";//nd_can
                strSQL+=", 'E'";//tx_tipRel
                strSQL+=", 'A'";//st_reg
                strSQL+=", 1";//nd_porCalCos
                strSQL+=");";                    
                strSQLIns+=strSQL;
                
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    //Item de Ingreso
                    strSQL="";
                    strSQL+=" INSERT INTO tbm_detCfgConInv(";
                    strSQL+="     co_emp, co_grp, co_reg, co_itm, nd_can, tx_tiprel, st_reg, nd_porCalCos";
                    strSQL+=" )";
                    strSQL+=" VALUES(";
                    strSQL+="" + objParSis.getCodigoEmpresa() + "";//co_emp
                    strSQL+=", " + txtCodCfg.getText() + "";//co_grp
                    strSQL+=", " + (j++) + "";//co_reg
                    strSQL+=", " + objTblMod.getValueAt(i, INT_TBL_DAT_COD_ITM_GRP) + "";//co_itm
                    bdeCan=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_CAN)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_CAN).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_CAN).toString()));
                    bdeCan=objUti.redondearBigDecimal(bdeCan, objParSis.getDecimalesMostrar());
                    strSQL+=", " + bdeCan + "";//nd_can
                    strSQL+=", 'I'";//tx_tipRel
                    strSQL+=", 'A'";//st_reg
                    strSQL+=", " + objTblMod.getValueAt(i, INT_TBL_DAT_POR_CAL_COS_UNI) + "";//nd_porCalCos  
                    strSQL+=");";                    
                    strSQLIns+=strSQL;
                }
                stm.executeUpdate(strSQLIns);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }

    /**
     * Esta función determina si los campos son válidos.
     * @return true: Si los campos son válidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal(){
        
        objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
        objTblMod.removeEmptyRows();
        
        if(txtDesCor.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Tipo de documento</FONT> es obligatorio.<BR>Seleccione un tipo de documento y vuelva a intentarlo.</HTML>");
            txtDesCor.requestFocus();
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            return false;
        }
        if(txtDesLar.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Tipo de documento</FONT> es obligatorio.<BR>Seleccione un tipo de documento y vuelva a intentarlo.</HTML>");
            txtDesCor.requestFocus();
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            return false;
        }
        if(txtCodItmMae.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Item</FONT> es obligatorio.<BR>Seleccione un item y vuelva a intentarlo.</HTML>");
            txtCodItmMae.requestFocus();
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            return false;
        }        
        
        if(isExisteItemEgresoIngreso()){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El item seleccionado para egreso no puede ser considerado como item de ingreso.<BR>Verifique y vuelva a intentarlo.</HTML>");
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            return false;  
        }
        
        if(isExisteItemRepetido()){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>Un item fue ingresado varias veces.<BR>Verifique y vuelva a intentarlo.</HTML>");
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            return false;  
        }
        
        if(!isFilCompleta()){
            mostrarMsgInf("<HTML>El campo cantidad está vacio o es cero.<BR>Verifique los datos ingresados en el campo <FONT COLOR=\"blue\">cantidad</FONT> y vuelva a intentarlo</HTML>");
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            return false;
        }  
        if(isDifPorCosTotIng()){
            mostrarMsgInf("<HTML>La suma del porcentaje de costo unitario de los items es mayor al 100%<BR>Verifique los datos ingresados en el campo <FONT COLOR=\"blue\">Por.Cos.Uni.</FONT> y vuelva a intentarlo</HTML>");
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            return false;
        }
        
        
        return true;
    }

    /**
     * Función que permite determinar si algún item fue ingresado varias veces en el modelo de datos
     * @return true: Si el item fue ingresado varias veeces
     * <BR> false: Caso contrario
     */
    private boolean isExisteItemRepetido(){
        boolean blnRes=false;
        try{
            for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                for(int j=(i+1); j<objTblMod.getRowCountTrue(); j++){
                    if(objTblMod.compareStringCells(i, INT_TBL_DAT_COD_ITM_GRP, j, INT_TBL_DAT_COD_ITM_GRP)){
                        blnRes=true;
                        break;
                    }

                }
                if(blnRes)
                    break;
            }
            
        }
        catch (Exception e){
            blnRes=true;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    /**
     * Función que permite determinar si el item de egreso fue ingresado en el modelo de datos como item de ingreso
     * @return true: Si el item fue ingresado varias veeces
     * <BR> false: Caso contrario
     */
    private boolean isExisteItemEgresoIngreso(){
        boolean blnRes=false;
        String strCodItmMaeEgr="", strCodItmMaeIng;
        try{
            strCodItmMaeEgr=(txtCodItmMae.getText()==null?"":txtCodItmMae.getText());
            for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                strCodItmMaeIng=objTblMod.getValueAt(i, INT_TBL_DAT_COD_ITM_MAE)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_COD_ITM_MAE).toString();
                    if(strCodItmMaeEgr.compareTo(strCodItmMaeIng)==0){
                        blnRes=true;
                        break;
                    }
                if(blnRes)
                    break;
            }
        }
        catch (Exception e){
            blnRes=true;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Función que permite determinar si la fila esta completa
     * @return true: Si el item fue ingresado varias veeces
     * <BR> false: Caso contrario
     */
    private boolean isFilCompleta(){
        boolean blnRes=false;
        try{
            for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                if(objTblMod.isRowComplete(i)){
                    blnRes=true;
                    break;
                }

                if(blnRes)
                    break;
            }            
        }
        catch (Exception e){
            blnRes=true;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    /**
     * Función que permite determinar si el porcentaje de costo suma el 100%
     * @return true: Si existe diferencia 
     * <BR> false: Caso contrario
     */
    private boolean isDifPorCosTotIng(){
        boolean blnRes=false;
        BigDecimal bdePorCosUni=BigDecimal.ZERO;
        BigDecimal bdePorCosUniTot=BigDecimal.ZERO;
        try{
            for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                bdePorCosUni=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_POR_CAL_COS_UNI)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_POR_CAL_COS_UNI).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_POR_CAL_COS_UNI).toString()));
                bdePorCosUniTot=bdePorCosUniTot.add(bdePorCosUni);
            }
            if(bdePorCosUniTot.compareTo(BigDecimal.ONE)!=0)
                blnRes=true;
        }
        catch (Exception e){
            blnRes=true;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    
    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private boolean isRegPro()
    {
        boolean blnRes=true;
        strAux="¿Desea guardar los cambios efectuados a éste registro?\n";
        strAux+="Si no guarda los cambios perderá toda la información que no haya guardado.";
        switch (mostrarMsgCon(strAux))
        {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado())
                {
                    case 'n': //Insertar
                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }
    
    /**
     * Esta funcián permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean consultarReg(){
        boolean blnRes=true;
        try{
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null){
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                //Validar que sólo se muestre los documentos asignados al programa.

                strSQL="";
                strSQL+=" SELECT a1.co_emp, a1.co_grp, a1.tx_desCor, a1.tx_desLar, a1.tx_obs1, a1.st_reg";
                strSQL+=" FROM tbm_cabCfgConInv AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresaGrupo() + "";
                if(txtCodCfg.getText().length()!=0)
                    strSQL+=" AND a1.co_grp=" + txtCodCfg.getText() + "";
                strSQL+=" ORDER BY a1.co_emp, a1.co_grp";
                System.out.println("consultarReg:  " + strSQL);
                rstCab=stmCab.executeQuery(strSQL);
                arlDatConIngImp = new ArrayList();
                while(rstCab.next()){
                    arlRegConIngImp = new ArrayList();
                    arlRegConIngImp.add(INT_ARL_CON_COD_EMP, rstCab.getInt("co_emp"));
                    arlRegConIngImp.add(INT_ARL_CON_COD_GRP, rstCab.getInt("co_grp"));
                    arlRegConIngImp.add(INT_ARL_CON_DES_COR, rstCab.getString("tx_desCor"));
                    arlRegConIngImp.add(INT_ARL_CON_DES_LAR, rstCab.getString("tx_desLar"));
                    arlRegConIngImp.add(INT_ARL_CON_OBS1,    rstCab.getString("tx_obs1"));
                    arlRegConIngImp.add(INT_ARL_CON_EST_REG, rstCab.getString("st_reg"));
                    arlDatConIngImp.add(arlRegConIngImp);
                }
                stmCab.close();
                stmCab=null;
                rstCab.close();
                rstCab=null;
                conCab.close();
                conCab=null;
                
                if(arlDatConIngImp.size()>0){
                    objTooBar.setMenSis("Se encontraron " + (arlDatConIngImp.size()) + " registros");
                    intIndReg=arlDatConIngImp.size()-1;
                    cargarReg();
                }
                else{
                    mostrarMsgInf("No se ha encontrado ningún registro que cumpla el criterio de búsqueda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    /**
     * Esta función permite cargar el registro seleccionado.
     * @return true: Si se pudo cargar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            if(cargarCabReg()){
                if(cargarDetReg()){
                }
            }
            blnHayCam=false;
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
    
    
    /**
     * Esta funcián permite cargar la cabecera del registro seleccionado.
     * @return true: Si se pudo cargar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarCabReg(){
        int intPosRel;
        boolean blnRes=true;
        String strEstCfgCon="";
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+=" SELECT a1.co_emp, a1.co_grp, a1.tx_desCor, a1.tx_desLar, a1.tx_obs1, a1.st_reg";
                strSQL+=" , a2.co_itm, a4.co_itmMae, a3.tx_codAlt, a3.tx_codAlt2, a3.tx_nomItm";
                strSQL+=" FROM tbm_cabCfgConInv AS a1 INNER JOIN tbm_detCfgConInv AS a2";
                strSQL+=" INNER JOIN tbm_inv AS a3";
                strSQL+=" INNER JOIN tbm_equInv AS a4";
                strSQL+=" ON a3.co_emp=a4.co_emp AND a3.co_itm=a4.co_itm";
                strSQL+=" ON a2.co_emp=a3.co_emp AND a2.co_itm=a3.co_itm";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_grp=a2.co_grp";
                strSQL+=" WHERE a1.co_emp=" + objUti.getIntValueAt(arlDatConIngImp, intIndReg, INT_ARL_CON_COD_EMP) + "";
                strSQL+=" AND a1.co_grp=" + objUti.getIntValueAt(arlDatConIngImp, intIndReg, INT_ARL_CON_COD_GRP) + "";
                strSQL+=" AND a2.tx_tipRel='E'";
                strSQL+=" GROUP BY a1.co_emp, a1.co_grp, a1.tx_desCor, a1.tx_desLar, a1.tx_obs1, a1.st_reg";
                strSQL+=" , a2.co_itm, a4.co_itmMae, a3.tx_codAlt, a3.tx_codAlt2, a3.tx_nomItm";
                strSQL+=" ORDER BY a1.co_emp, a1.co_grp";
                System.out.println("cargarCabReg: " + strSQL);
                rst=stm.executeQuery(strSQL);
                if (rst.next()){
                    strAux=rst.getString("co_grp");
                    txtCodCfg.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_desCor");
                    txtDesCor.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_desLar");
                    txtDesLar.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("co_itmMae");
                    txtCodItmMae.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("co_itm");
                    txtCodItm.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_codAlt");
                    txtCodAlt.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_codAlt2");
                    txtCodItmLet.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_nomItm");
                    txtNomItm.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_obs1");
                    txaObs1.setText((strAux==null)?"":strAux);
                    //Mostrar el estado del registro.
                    strAux=rst.getString("st_reg");
                    objTooBar.setEstadoRegistro(getEstReg(strAux));
                    
                    
                    switch(strAux){
                        case "A":
                            cboEst.setSelectedIndex(1);
                            break;
                        case "I":
                            cboEst.setSelectedIndex(2);
                            break;
                        default:
                            cboEst.setSelectedIndex(0);
                            break;
                    }

                    
                    
                }
                else{
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                    blnRes=false;
                }

            }
            rst.close();
            stm.close();
            con.close();
            rst=null;
            stm=null;
            con=null;
            
            //Mostrar la posición relativa del registro.
            intPosRel = intIndReg+1;
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + (arlDatConIngImp.size()) );
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    /**
     * Esta funcián permite cargar el detalle del registro seleccionado.
     * @return true: Si se pudo cargar el detalle del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg(){//por consulta
        boolean blnRes=true;
        try{
            objTblMod.removeAllRows();
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+=" SELECT a1.co_emp, a1.co_grp, a2.co_reg, a1.tx_desCor, a1.tx_desLar, a1.tx_obs1, a1.st_reg";
                strSQL+=" , a2.co_itm, a2.nd_can, a4.co_itmMae, a3.tx_codAlt, a3.tx_codAlt2, a3.tx_nomItm, a5.tx_desCor AS tx_desCorUniMed, a2.nd_porCalCos";
                strSQL+=" FROM tbm_cabCfgConInv AS a1 INNER JOIN tbm_detCfgConInv AS a2";
                strSQL+=" INNER JOIN (tbm_inv AS a3  LEFT OUTER JOIN tbm_var AS a5 ON (a3.co_uni=a5.co_reg) )";
                strSQL+=" INNER JOIN tbm_equInv AS a4";
                strSQL+=" ON a3.co_emp=a4.co_emp AND a3.co_itm=a4.co_itm";
                strSQL+=" ON a2.co_emp=a3.co_emp AND a2.co_itm=a3.co_itm";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_grp=a2.co_grp";
                strSQL+=" WHERE a1.co_emp=" + objUti.getIntValueAt(arlDatConIngImp, intIndReg, INT_ARL_CON_COD_EMP) + "";
                strSQL+=" AND a1.co_grp=" + objUti.getIntValueAt(arlDatConIngImp, intIndReg, INT_ARL_CON_COD_GRP) + "";
                strSQL+=" AND a2.tx_tipRel='I'";
                strSQL+=" GROUP BY a1.co_emp, a1.co_grp, a2.co_reg, a1.tx_desCor, a1.tx_desLar, a1.tx_obs1, a1.st_reg";
                strSQL+=" , a2.co_itm, a2.nd_can, a4.co_itmMae, a3.tx_codAlt, a3.tx_codAlt2, a3.tx_nomItm, a5.tx_desCor, a2.nd_porCalCos";
                strSQL+=" ORDER BY a1.co_emp, a1.co_grp, a2.co_reg";
                System.out.println("cargarDetReg: " + strSQL);
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                while (rst.next()){
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN,"");
                    vecReg.add(INT_TBL_DAT_COD_ITM_MAE,    rst.getString("co_itmMae"));
                    vecReg.add(INT_TBL_DAT_COD_ITM_GRP,    rst.getString("co_itm"));
                    vecReg.add(INT_TBL_DAT_COD_ALT_ITM,    rst.getString("tx_codAlt"));
                    vecReg.add(INT_TBL_DAT_COD_LET_ITM,    rst.getString("tx_codAlt2"));
                    vecReg.add(INT_TBL_DAT_BUT_ITM,        null);
                    vecReg.add(INT_TBL_DAT_NOM_ITM,        rst.getString("tx_nomItm"));
                    vecReg.add(INT_TBL_DAT_UNI_MED,        rst.getString("tx_desCorUniMed"));
                    vecReg.add(INT_TBL_DAT_CAN,            rst.getBigDecimal("nd_can"));
                    vecReg.add(INT_TBL_DAT_POR_CAL_COS_UNI,rst.getBigDecimal("nd_porCalCos"));
                    vecDat.add(vecReg);
                }

                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
            }
            
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    
    
    /**
     * Esta función obtiene la descripción larga del estado del registro.
     * @param estado El estado del registro. Por ejemplo: A, I, etc.
     * @return La descripción larga del estado del registro.
     * <BR>Nota.- Si la cadena recibida es <I>null</I> la función devuelve una cadena vacía.
     */
    private String getEstReg(String estado){
        if (estado==null)
            estado="";
        else
            switch (estado.charAt(0)){
                case 'A':
                    estado="Activo";
                    break;
                case 'I':
                    estado="Anulado";
                    break;
                case 'P':
                    estado="Pendiente de autorizar";
                    break;
                case 'D':
                    estado="Autorización denegada";
                    break;
                case 'R':
                    estado="Pendiente de impresión";
                    break;
                case 'C':
                    estado="Pendiente confirmación de inventario";
                    break;
                case 'F':
                    estado="Existen diferencias de inventario";
                    break;
                default:
                    estado="Desconocido";
                    break;
            }
        return estado;
    }
    

    /**
     * Esta funcián configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConCfgConInv()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_grp");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Alias");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("70");
            arlAncCol.add("200");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+=" SELECT a1.co_emp, a1.co_grp, a1.tx_desCor, a1.tx_desLar, a1.st_reg";
            strSQL+=" FROM tbm_cabCfgConInv AS a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
            strSQL+=" AND a1.st_reg='A'";
            vcoCfg=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de configuración de inventario", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoCfg.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    
    
    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConConCfgConInv(int intTipBus) {
        boolean blnRes = true;
        try {
            switch (intTipBus) {
                case 0: //Mostrar la ventana de consulta.
                    vcoCfg.setCampoBusqueda(1);
                    vcoCfg.show();
                    if (vcoCfg.getSelectedButton() == vcoCfg.INT_BUT_ACE) {
                        txtCodCfg.setText(vcoCfg.getValueAt(1));
                        txtDesCor.setText(vcoCfg.getValueAt(2));
                        txtDesLar.setText(vcoCfg.getValueAt(3));
                    }
                    break;
            }
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    /**
     * Esta función actualiza el registro en la base de datos.
     * @return true: Si se pudo actualizar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarReg(){
        boolean blnRes = false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                con.setAutoCommit(false);
                if(actualizar_tbmCabCfgConInv()){
                    if(eliminar_tbmDetCfgConInv()){//hace el update a tbm_inv de los registros q han sido borrados
                        if(insertar_tbmDetCfgConInv()){//hace el update a tbm_inv de los registros que se encuentran en el modelo
                            blnRes=true;
                            //recostearItm();
                            con.commit();
                            con.setAutoCommit(true);
                            objTblMod.initRowsState();
                        }
                        else
                            con.rollback();
                    }
                    else
                        con.rollback();
                }
                else
                    con.rollback();
                con.close();
                con=null;
            }
        }
        catch(java.sql.SQLException Evt){
            objUti.mostrarMsgErr_F1(this, Evt);  blnRes = false;
        }
        catch(Exception Evt){
            objUti.mostrarMsgErr_F1(this, Evt); blnRes = false;
        }
        return blnRes;
    }
   
    
    /**
     * Esta función permite actualizar la cabecera de un registro.
     * @return true: Si se pudo actualizar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizar_tbmCabCfgConInv(){
        boolean blnRes=true;
        String strEstCfg="";
        try{
            if (con!=null){
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;

                switch(cboEst.getSelectedIndex()){
                    case 1:
                        strEstCfg="A";
                        break;
                    case 2:
                        strEstCfg="I";
                        break;
                    default:
                        strEstCfg="";
                        break;
                }
                
                
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_cabCfgConInv";
                strSQL+=" SET tx_descor=" + objUti.codificar(txtDesCor.getText()) + "";
                strSQL+=", tx_desLar=" + objUti.codificar(txtDesLar.getText()) + "";
                strSQL+=", tx_obs1=" + objUti.codificar(txaObs1.getText()) + "";
                strAux=objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos());
                strSQL+=", fe_ultMod='" + strAux + "'";
                strSQL+=", co_usrmod=" + objParSis.getCodigoUsuario() + "";
                strSQL+=", st_reg=" + objUti.codificar(strEstCfg) + "";
                strSQL+=" WHERE co_emp=" + objUti.getIntValueAt(arlDatConIngImp, intIndReg, INT_ARL_CON_COD_EMP) + ""; //co_emp
                strSQL+=" AND co_grp= " + objUti.getIntValueAt(arlDatConIngImp, intIndReg, INT_ARL_CON_COD_GRP) + ""; //co_loc
                strSQL+="; ";
                System.out.println("actualizar_tbmCabCfgConInv: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función permite actualizar la cabecera de un registro.
     * @return true: Si se pudo actualizar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminar_tbmDetCfgConInv(){
        boolean blnRes=true;
        try{
            if (con!=null){
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+=" DELETE FROM tbm_detCfgConInv";
                strSQL+=" WHERE co_emp=" + objUti.getIntValueAt(arlDatConIngImp, intIndReg, INT_ARL_CON_COD_EMP) + ""; //co_emp
                strSQL+=" AND co_grp= " + objUti.getIntValueAt(arlDatConIngImp, intIndReg, INT_ARL_CON_COD_GRP) + ""; //co_loc
                strSQL+="; ";
                System.out.println("eliminar_tbmDetCfgConInv: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    
    /**
     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
     * insertar, consultar, modificar, eliminar, etc. Además de los botones de navegación
     * que permiten desplazarse al primero, anterior, siguiente y último registro.
     */
    private class MiToolBar extends ZafToolBar{
        public MiToolBar(javax.swing.JInternalFrame ifrFrm){
            super(ifrFrm, objParSis);
        }

        public void clickInicio() {
            try{
                if(arlDatConIngImp.size()>0){
                    if(intIndReg>0){
                        if((blnHayCam)){
                            if(isRegPro()) {
                                intIndReg=0;
                                cargarReg();
                            }
                        }
                        else{
                            intIndReg=0;
                            cargarReg();
                        }
                    }
                }
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnterior() {
            try{
                if(arlDatConIngImp.size()>0){
                    if(intIndReg>0){
                        if ((blnHayCam)){
                            if (isRegPro()) {
                                intIndReg--;
                                cargarReg();
                            }
                        }
                        else {
                            intIndReg--;
                            cargarReg();
                        }
                    }
                }
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickSiguiente() {
            try{
                 if(arlDatConIngImp.size()>0){
                    if(intIndReg < arlDatConIngImp.size()-1){
                        if ((blnHayCam)){
                            if (isRegPro()) {
                                intIndReg++;
                                cargarReg();
                            }
                        }
                        else {
                            intIndReg++;
                            cargarReg();
                        }
                    }
                }
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickFin() {
            try{
                 if(arlDatConIngImp.size()>0){
                    if(intIndReg<arlDatConIngImp.size()-1){
                        if((blnHayCam)){
                            if (isRegPro()) {
                                intIndReg=arlDatConIngImp.size()-1;
                                cargarReg();
                            }
                        }
                        else {
                            intIndReg=arlDatConIngImp.size()-1;
                            cargarReg();
                        }
                    }
                }
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickInsertar() {
            try{
                if ((blnHayCam)){
                    isRegPro();
                }

                //para insertar no se los puede cambiar
                txtCodCfg.setEditable(false);
                limpiarFrm();
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());

                
                System.out.println("estado: " + objTooBar.getEstado());
                
                objTblMod.setModoOperacion(objTooBar.getEstado());                
                objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
                cboEst.setSelectedIndex(1);
                //Inicializar las variables que indican cambios.
                blnHayCam=false;

            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickConsultar(){
            txtCodCfg.setEditable(true);
            txtDesCor.setEditable(true);
            txtDesLar.setEditable(true);
            txtCodItmMae.setEditable(true);
            txtCodItm.setEditable(true);
            txtCodAlt.setEditable(true);
            txtCodItmLet.setEditable(true);
            txtNomItm.setEditable(true);
            butItm.setEnabled(true);
        }

        public void clickModificar(){
            txtCodCfg.setEditable(false);
            butCarPag.setEnabled(false);
            txtDesCor.setEditable(true);
            txtDesLar.setEditable(true);
            txtCodItmMae.setEditable(false);
            txtCodItm.setEditable(false);
            txtCodAlt.setEditable(false);
            txtCodItmLet.setEditable(false);
            txtNomItm.setEditable(false);
            butItm.setEnabled(false);
            
            objTblMod.setModoOperacion(objTooBar.getEstado());
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
        }

        public void clickEliminar(){
        }

        public void clickAnular(){
        }

        public void clickImprimir(){
        }

        public void clickVisPreliminar(){
        }

        public void clickAceptar(){
        }

        public void clickCancelar(){
        }

        public boolean insertar(){
            if (!insertarReg())
                return false;
            return true;
        }

        public boolean consultar() {
            consultarReg();
            return true;
        }

        public boolean modificar(){
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado")){
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible modificar un documento eliminado.");
                return false;
            }
            if (strAux.equals("Anulado")){
                mostrarMsgInf("El documento está ANULADO.\nNo es posible modificar un documento anulado.");
                return false;
            }
            if (!actualizarReg())
                return false; 
            
            blnHayCam=false;
            return true;
        }

        public boolean eliminar(){
            return true;
        }

        public boolean anular(){
            return true;
        }

        public boolean imprimir() {
            return true;
        }

        public boolean vistaPreliminar() {
            return true;
        }

        public boolean aceptar() {
            return true;
        }

        public boolean cancelar() {
            boolean blnRes=true;
            try{
                if((blnHayCam)){
                    if(objTooBar.getEstado()=='n'){
                        if (!isRegPro())
                            return false;
                    }
                }
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            limpiarFrm();
            blnHayCam=false;
            return blnRes;
        }

        public boolean beforeInsertar() {
            if (!isCamVal())
                return false;

            return true;
        }

        public boolean beforeConsultar() {
            return true;
        }

        public boolean beforeModificar() {
            return true;
        }

        public boolean beforeEliminar() {
            return true;
        }

        public boolean beforeAnular() {
            return true;
        }

        public boolean beforeImprimir() {
            return true;
        }

        public boolean beforeVistaPreliminar() {
            return true;
        }

        public boolean beforeAceptar() {
            return true;
        }

        public boolean beforeCancelar() {
            return true;
        }

        public boolean afterInsertar() {
            this.setEstado('w');
            blnHayCam=false;
            objTooBar.setEstado('w');
            consultarReg();
            blnHayCam=false;
            return true;
        }

        public boolean afterConsultar() {
            return true;
        }

        public boolean afterModificar() {
            return true;
        }

        public boolean afterEliminar() {
            return true;
        }

        public boolean afterAnular() {
            return true;
        }

        public boolean afterImprimir() {
            return true;
        }

        public boolean afterVistaPreliminar() {
            return true;
        }

        public boolean afterAceptar() {
            return true;
        }

        public boolean afterCancelar() {
            return true;
        }

        
    }

    /**
     * Función que permite calcular el porcentaje de costo unitario para los items de ingreso
     * @return true Si se pudo realizar la operación
     * <BR> false Caso contrario
     */
    private boolean calcularPorcentajeCostoIngreso(){
        boolean blnRes=true;
        int intNumReg=-1;
        BigDecimal bdePorGrl=BigDecimal.ONE;
        BigDecimal bdePorCosIngItm=BigDecimal.ZERO;
        BigDecimal bdePorFalCal=BigDecimal.ZERO;
        try{
            intNumReg=objTblMod.getRowCountTrue();
            System.out.println("intNumReg: " + intNumReg);
            bdePorCosIngItm=bdePorGrl.divide(new BigDecimal(intNumReg), 2, BigDecimal.ROUND_HALF_UP);
            System.out.println("bdePorCosIngItm: " + bdePorCosIngItm);
            for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                if(i<(objTblMod.getRowCountTrue()-1)){
                    bdePorFalCal=bdePorFalCal.add(bdePorCosIngItm);
                    System.out.println("varios: " + bdePorFalCal);
                }
                if(i==(objTblMod.getRowCountTrue()-1)){
                    System.out.println("fin: " + (bdePorGrl.subtract(bdePorFalCal)));
                    objTblMod.setValueAt((bdePorGrl.subtract(bdePorFalCal)), i, INT_TBL_DAT_POR_CAL_COS_UNI);
                }
                else{
                    objTblMod.setValueAt(bdePorCosIngItm, i, INT_TBL_DAT_POR_CAL_COS_UNI);
                    System.out.println("else: " + bdePorCosIngItm);
                }
            }
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
}