/*
 * ZafMae03.java
 *
 * Created on March 11, 2010, 11:47 PM
 */
package Compras.ZafCom64;

import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelEdiButGen.ZafTblCelEdiButGen;
import Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut;
import Librerias.ZafTblUti.ZafTblOrd.ZafHeaRenLbl;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;

/**
 *
 * @author  Gigi
 */
public class ZafCom64 extends javax.swing.JInternalFrame {

    private ZafParSis objParSis;
    private ZafUtil objUti;
    private MiToolBar objTooBar;
    private String strAux;
    private boolean blnHayCam;
    private ZafDocLis objDocLis;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private String strSQL;
    private java.util.Date datFecAux;
    private String strCodPrv,strNomPrv;
    private ZafVenCon vcoGrp;
    private Vector vecDat, vecCab, vecReg, vecAux;
    
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_CHK=1;
    final int INT_TBL_DAT_COD_GRP=2;
    final int INT_TBL_DAT_DES_COR_GRP=3;
    final int INT_TBL_DAT_DES_LAR_GRP=4;
    final int INT_TBL_DAT_BUT=5;
    final int INT_TBL_DAT_ORD=6;
    final int INT_TBL_DAT_COD_GRP_PAD=7;


    private ZafTblMod objTblMod;
    private ZafTblFilCab objTblFilCab;
    private ZafTblPopMnu objTblPopMnu;
    private ZafMouMotAda objMouMotAda;


    private ZafTblCelRenChk objTblCelRenChk;
    private ZafTblCelEdiChk objTblCelEdiChk;
    private ZafTblCelRenLbl objTblCelRenLbl;

    private ZafTblOrd objTblOrd;
    private ZafTblBus objTblBus;
    private ZafVenCon vcoPrv;

    private ZafTblCelEdiButGen objTblCelEdiButGen;
    private ZafTblCelRenBut    objTblCelRenBut;

    private ArrayList arlReg, arlDat;
    final int INT_ARL_DAT_COD_GRP=0;
    final int INT_ARL_DAT_DES_COR_GRP=1;
    final int INT_ARL_DAT_DES_LAR_GRP=2;
    final int INT_ARL_DAT_COD_GRP_GUA=3;
    final int INT_ARL_DAT_NIV=4;
    final int INT_ARL_DAT_COD_GRP_PAD=5;
    final int INT_ARL_DAT_EST_PRO=6;

    //para ordenar
    private ZafCom objCom;                  //Objeto Comparator utilizado para realizar el ordenamiento.
    private ZafHeaRenLbl objHeaRenLbl;


    /** Creates new form ZafMae03 */
    public ZafCom64(ZafParSis obj) {
        try{
            objParSis = (ZafParSis) obj.clone();
            if (objParSis.getCodigoEmpresa() == objParSis.getCodigoEmpresaGrupo()) {
                initComponents();
                configurarFrm();
                agregarDocLis();
                arlDat=new ArrayList();
            }
            else{
                mostrarMsgInf("Este programa s√≥lo puede ser ejecutado desde GRUPO.");
                dispose();
            }
        }
        catch (CloneNotSupportedException e) {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFrmFil = new javax.swing.JPanel();
        panFil = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        txtCodPrv = new javax.swing.JTextField();
        lblPrv = new javax.swing.JLabel();
        txtNomPrv = new javax.swing.JTextField();
        butPrv = new javax.swing.JButton();
        butSelRegMar = new javax.swing.JButton();
        butOrdReg = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("jLabel1");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFrmFil.setLayout(new java.awt.BorderLayout());

        panFil.setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(100, 30));
        jPanel1.setLayout(null);

        txtCodPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodPrvActionPerformed(evt);
            }
        });
        txtCodPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusLost(evt);
            }
        });
        jPanel1.add(txtCodPrv);
        txtCodPrv.setBounds(72, 4, 60, 20);

        lblPrv.setText("Proveedor:");
        lblPrv.setToolTipText("Tipo de documento");
        jPanel1.add(lblPrv);
        lblPrv.setBounds(2, 4, 70, 20);

        txtNomPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomPrvActionPerformed(evt);
            }
        });
        txtNomPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomPrvFocusLost(evt);
            }
        });
        jPanel1.add(txtNomPrv);
        txtNomPrv.setBounds(132, 4, 370, 20);

        butPrv.setText("...");
        butPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrvActionPerformed(evt);
            }
        });
        jPanel1.add(butPrv);
        butPrv.setBounds(502, 4, 20, 20);

        butSelRegMar.setText("Marcar/Desmarcar");
        butSelRegMar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butSelRegMarActionPerformed(evt);
            }
        });
        jPanel1.add(butSelRegMar);
        butSelRegMar.setBounds(520, 2, 120, 23);

        butOrdReg.setText("Ordenar");
        butOrdReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butOrdRegActionPerformed(evt);
            }
        });
        jPanel1.add(butOrdReg);
        butOrdReg.setBounds(620, 0, 73, 23);

        panFil.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDat);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panFil.add(jPanel2, java.awt.BorderLayout.CENTER);

        panFrmFil.add(panFil, java.awt.BorderLayout.CENTER);

        panBar.setPreferredSize(new java.awt.Dimension(0, 70));
        panBar.setLayout(new java.awt.BorderLayout());
        panFrmFil.add(panBar, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("General", panFrmFil);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
// TODO add your handling code here:
}//GEN-LAST:event_formInternalFrameOpened

private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
// TODO add your handling code here:
    String strTit, strMsg;
    try {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        strTit = "Mensaje del sistema Zafiro";
        strMsg = "¬øEst√° seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this, strMsg, strTit, javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE) == javax.swing.JOptionPane.YES_OPTION) {
            //Cerrar la conexi√≥n si est√° abierta.
            if (rstCab != null) {
                rstCab.close();
                stmCab.close();
                conCab.close();
                rstCab = null;
                stmCab = null;
                conCab = null;
            }
            dispose();
        }
    }
    catch (java.sql.SQLException e) {
        dispose();
    }
}//GEN-LAST:event_exitForm

private void txtCodPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodPrvActionPerformed
    // TODO add your handling code here:
    txtCodPrv.transferFocus();
}//GEN-LAST:event_txtCodPrvActionPerformed

private void txtCodPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusGained
    // TODO add your handling code here:
        strCodPrv=txtCodPrv.getText();
        txtCodPrv.selectAll();
}//GEN-LAST:event_txtCodPrvFocusGained

private void txtCodPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusLost
    // TODO add your handling code here:
        //Validar el contenido de la celda s√°lo si ha cambiado.
        if (!txtCodPrv.getText().equalsIgnoreCase(strCodPrv)){
            if (txtCodPrv.getText().equals("")){
                txtCodPrv.setText("");
                txtNomPrv.setText("");
                objTblMod.removeAllRows();
            }
            else{
                mostrarVenConPrv(1);
            }
        }
        else
            txtCodPrv.setText(strCodPrv);
}//GEN-LAST:event_txtCodPrvFocusLost

private void txtNomPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomPrvActionPerformed
    // TODO add your handling code here:
    txtNomPrv.transferFocus();
}//GEN-LAST:event_txtNomPrvActionPerformed

private void txtNomPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPrvFocusGained
    // TODO add your handling code here:
        strNomPrv=txtNomPrv.getText();
        txtNomPrv.selectAll();
}//GEN-LAST:event_txtNomPrvFocusGained

private void txtNomPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomPrvFocusLost
    // TODO add your handling code here:
        //Validar el contenido de la celda s√°lo si ha cambiado.
        if (!txtNomPrv.getText().equalsIgnoreCase(strNomPrv)){
            if (txtNomPrv.getText().equals("")){
                txtCodPrv.setText("");
                txtNomPrv.setText("");
                objTblMod.removeAllRows();
            }
            else{
                mostrarVenConPrv(2);
            }
        }
        else
            txtNomPrv.setText(strNomPrv);
}//GEN-LAST:event_txtNomPrvFocusLost

private void butPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrvActionPerformed
    // TODO add your handling code here:
        strCodPrv=txtCodPrv.getText();
        mostrarVenConPrv(0);

}//GEN-LAST:event_butPrvActionPerformed

private void butSelRegMarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butSelRegMarActionPerformed
    // TODO add your handling code here:
    if (butSelRegMar.getText().equals("Marcar/Desmarcar")){
        int i[]=tblDat.getSelectedRows();

        for(int j=0; j<i.length; j++){
            System.out.println("i[]: " + i[j]);
            if(objTblMod.isChecked(i[j], INT_TBL_DAT_CHK))
                objTblMod.setChecked(false, i[j], INT_TBL_DAT_CHK);
            else
                objTblMod.setChecked(true, i[j], INT_TBL_DAT_CHK);
        }


    }
}//GEN-LAST:event_butSelRegMarActionPerformed

private void butOrdRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butOrdRegActionPerformed
    // TODO add your handling code here:
    ordenarRegistrosAscendente();
}//GEN-LAST:event_butOrdRegActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butOrdReg;
    private javax.swing.JButton butPrv;
    private javax.swing.JButton butSelRegMar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPrv;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panFrmFil;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodPrv;
    private javax.swing.JTextField txtNomPrv;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm() {
        boolean blnRes = true;
        try {
            //Inicializar objetos.
            objUti = new ZafUtil();
            objTooBar = new MiToolBar(this);
            panBar.add(objTooBar);
            objDocLis = new ZafDocLis();
           
            strAux = objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.1");
            lblTit.setText(strAux);
            txtCodPrv.setBackground(objParSis.getColorCamposObligatorios());
            txtNomPrv.setBackground(objParSis.getColorCamposObligatorios());

            objTooBar.setVisibleInsertar(false);
            objTooBar.setVisibleEliminar(false);
            objTooBar.setVisibleAnular(false);
            
            configurarVenConPrv();
            configurarFrmTbl();


            objTooBar.agregarSeparador();
            objTooBar.agregarBoton(butSelRegMar);
            objTooBar.agregarSeparador();
            objTooBar.agregarBoton(butOrdReg);



        }
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /** Configurar el formulario. */
    private boolean configurarFrmTbl() {
        boolean blnRes = true;
        try {
            //Inicializar objetos.
            //Configurar JTable: Establecer el modelo.
            vecDat = new Vector();    //Almacena los datos
            vecCab = new Vector(8);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN, "");
            vecCab.add(INT_TBL_DAT_CHK, "");
            vecCab.add(INT_TBL_DAT_COD_GRP, "C√≥d.Grp.");
            vecCab.add(INT_TBL_DAT_DES_COR_GRP, "Alias Grupo");
            vecCab.add(INT_TBL_DAT_DES_LAR_GRP, "Grupo");
            vecCab.add(INT_TBL_DAT_BUT, "");
            vecCab.add(INT_TBL_DAT_ORD, "Orden");
            vecCab.add(INT_TBL_DAT_COD_GRP_PAD, "C√≥d.Grp.Pad.");

            objTblMod = new ZafTblMod();
            objTblMod.setHeader(vecCab);
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selecci√≥n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el men√∫ de contexto.
            objTblPopMnu = new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux = tblDat.getColumnModel();

            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_COD_GRP).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_DES_COR_GRP).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DES_LAR_GRP).setPreferredWidth(400);
            tcmAux.getColumn(INT_TBL_DAT_BUT).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_ORD).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_GRP_PAD).setPreferredWidth(30);


            //Configurar JTable: Ocultar columnas del sistema.
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_DES_COR_GRP, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_ORD, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_GRP_PAD, tblDat);
            
            

            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_DAT_CHK).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);


            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab = new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);

            objTblBus=new ZafTblBus(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);

            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda = new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer columnas editables.
            vecAux = new Vector();
            vecAux.add("" + INT_TBL_DAT_CHK);
            objTblMod.setColumnasEditables(vecAux);
            vecAux = null;
            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk = new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk = null;

            objTblCelRenLbl = new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            tcmAux.getColumn(INT_TBL_DAT_COD_GRP).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl = null;

            //Configurar JTable: Editor de celdas.
            objTblCelEdiChk = new ZafTblCelEdiChk(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFilChk=-1;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFilChk=tblDat.getSelectedRow();
                }

                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
//                    if(objTblCelEdiChk.isSelected()){
//                        marcarNodoPadre(intFilChk);
//                    }
                }
            });


            //PARA EL BOTON DE ANEXO UNO, QUE LLAMA A LA VENTANA DE MAESTRO DE CLIENTES
            objTblCelRenBut=new ZafTblCelRenBut();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_BUT).setCellRenderer(objTblCelRenBut);
            objTblCelEdiButGen=new ZafTblCelEdiButGen();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_BUT).setCellEditor(objTblCelEdiButGen);
            objTblCelEdiButGen.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                int intFilSel;
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    intFilSel=tblDat.getSelectedRow();
                    //SE DEBE VALIDAR QUE EXISTAN DATOS EN ESA FILA
                }
                public void actionPerformed(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    cargarFrmItemsPorGrupo(intFilSel);
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                }
            });
            tcmAux=null;

        }
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



/**
 * Esta funci√≥n permite presentar la clase ZafCom62 a trav√©s del bot√≥n del detalle
 * @param fila : N√∫mero de fila que contiene la informaci√≥n del Grupo del que se
 * desean cargar los items
 */
    private void cargarFrmItemsPorGrupo(int fila){
        Compras.ZafCom62.ZafCom62 objCom62=new Compras.ZafCom62.ZafCom62(objParSis, 
                                    Integer.parseInt(objTblMod.getValueAt(fila, INT_TBL_DAT_COD_GRP).toString())
                                    , objTblMod.getValueAt(fila, INT_TBL_DAT_DES_COR_GRP).toString()
                                    , objTblMod.getValueAt(fila, INT_TBL_DAT_DES_LAR_GRP).toString()
                                    );
        this.getParent().add(objCom62,javax.swing.JLayeredPane.DEFAULT_LAYER);
        objCom62.show();
    }




    /**
     * Esta clase implementa la interface DocumentListener que observa los cambios que
     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
     * Se la usa en el sistema para determinar si existe alg√∫n cambio que se deba grabar
     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
     * presentar√° un mensaje advirtiendo que si no guarda los cambios los perder√°.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener {

        public void changedUpdate(javax.swing.event.DocumentEvent evt) {
            blnHayCam = true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) {
            blnHayCam = true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) {
            blnHayCam = true;
        }
    }

    /**
     * Esta funci√≥n se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private void agregarDocLis() {
        txtCodPrv.getDocument().addDocumentListener(objDocLis);
        txtNomPrv.getDocument().addDocumentListener(objDocLis);
    }

    /**
     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
     * insertar, consultar, modificar, eliminar, etc. Adem√°s de los botones de navegaci√≥n
     * que permiten desplazarse al primero, anterior, siguiente y √∫ltimo registro.
     */
    private class MiToolBar extends ZafToolBar {

        public MiToolBar(javax.swing.JInternalFrame ifrFrm) {
            super(ifrFrm, objParSis);
        }

        public void clickInicio() {
            try {
                if (!rstCab.isFirst()) {
                    if (blnHayCam) {
                        if (isRegPro()) {
                            rstCab.first();
                            cargarReg();
                        }
                    } else {
                        rstCab.first();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnterior() {
            try {
                if (!rstCab.isFirst()) {
                    if (blnHayCam) {
                        if (isRegPro()) {
                            rstCab.previous();
                            cargarReg();
                        }
                    } else {
                        rstCab.previous();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }

        }

        public void clickSiguiente() {
            try {
                if (!rstCab.isLast()) {
                    if (blnHayCam) {
                        if (isRegPro()) {
                            rstCab.next();
                            cargarReg();
                        }
                    } else {
                        rstCab.next();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }


        }

        public void clickFin() {
            try {
                if (!rstCab.isLast()) {
                    if (blnHayCam) {
                        if (isRegPro()) {
                            rstCab.last();
                            cargarReg();
                        }
                    } else {
                        rstCab.last();
                        cargarReg();
                    }
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }

        }

        public void clickInsertar() {
            try {
                if (blnHayCam) {
                    isRegPro();
                }
                limpiarFrm();
                txtCodPrv.selectAll();
                txtCodPrv.requestFocus();
                //Inicializar las variables que indican cambios.
                blnHayCam = false;
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickConsultar() {
        }

        public void clickModificar() {
            txtCodPrv.setEditable(false);
            txtNomPrv.setEditable(false);
            butPrv.setEnabled(false);
            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_CHK);
            vecAux.add("" + INT_TBL_DAT_BUT);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            tblDat.setEnabled(true);
            butSelRegMar.setEnabled(true);
            switch (objTooBar.getEstado()){
                case 'm':
                    cargarReg();
                    break;
            }
            blnHayCam=false;
        }

        public void clickEliminar() {
        }

        public void clickAnular() {
            cargarCabReg();
        }

        public void clickImprimir() {
        }

        public void clickVisPreliminar() {
        }

        public void clickAceptar() {
        }

        public void clickCancelar() {
        }

        public boolean insertar() {
            return true;
        }

        public boolean consultar() {
            consultarReg();
            return true;
        }

        public boolean modificar() {
            if (!actualizarReg()) {
                return false;
            }
            return true;
        }

        public boolean eliminar() {
            return true;
        }

        public boolean anular() {
            return true;
        }

        public boolean imprimir() {
            return true;
        }

        public boolean vistaPreliminar() {
            return true;
        }

        public boolean aceptar() {
            return true;
        }

        public boolean cancelar() {
            boolean blnRes = true;
            try {
                if (blnHayCam) {
                    if (objTooBar.getEstado() == 'n' || objTooBar.getEstado() == 'm') {
                        if (!isRegPro()) {
                            return false;
                        }
                    }
                }
                if (rstCab != null) {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab = null;
                    stmCab = null;
                    conCab = null;
                }
            } catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            } catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
            limpiarFrm();
            blnHayCam = false;
            return blnRes;
        }

        public boolean beforeInsertar() {
            return true;
        }

        public boolean beforeConsultar() {
            if (!isCamVal())
                return false;
            return true;
        }

        public boolean beforeModificar() {
            boolean blnRes = true;
            return blnRes;
        }

        public boolean beforeEliminar() {
            return true;
        }

        public boolean beforeAnular() {
            return true;
        }

        public boolean beforeImprimir() {
            return true;
        }

        public boolean beforeVistaPreliminar() {
            return true;
        }

        public boolean beforeAceptar() {
            return true;
        }

        public boolean beforeCancelar() {
            return true;
        }

        public boolean afterInsertar() {
            return true;
        }

        public boolean afterConsultar() {
            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_BUT);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            tblDat.setEnabled(true);
            butOrdReg.setEnabled(true);

            return true;
        }

        public boolean afterModificar() {
            blnHayCam = false;
            objTooBar.setEstado('w');
            cargarReg();
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_BUT);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            tblDat.setEnabled(true);
            return true;
        }

        public boolean afterEliminar() {
            return true;
        }

        public boolean afterAnular() {
            return true;
        }

        public boolean afterImprimir() {
            return true;
        }

        public boolean afterVistaPreliminar() {
            return true;
        }

        public boolean afterAceptar() {
            return true;
        }

        public boolean afterCancelar() {
            return true;
        }
    }

    /**
     * Esta funci√≥n muestra un mensaje informativo al usuario. Se podr√≠a utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg) {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        String strTit;
        strTit = "Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this, strMsg, strTit, javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta funci√≥n muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg) {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        String strTit;
        strTit = "Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this, strMsg, strTit, javax.swing.JOptionPane.YES_NO_CANCEL_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta funci√≥n muestra un mensaje de advertencia al usuario. Se podr√≠a utilizar
     * para mostrar al usuario un mensaje que indique que los datos se han cargado
     * con errores y que debe revisar dichos datos.
     */
    private void mostrarMsgAdv(String strMsg) {
        javax.swing.JOptionPane oppMsg = new javax.swing.JOptionPane();
        String strTit;
        strTit = "Mensaje del sistema Zafiro";
        if (strMsg.equals("")) {
            strMsg = "<HTML>Este registro tiene <FONT COLOR=\"red\">problemas</FONT>. <BR>Notif√≠quelo a su administrador del sistema.</HTML>";
        }
        oppMsg.showMessageDialog(this, strMsg, strTit, javax.swing.JOptionPane.WARNING_MESSAGE);
    }

    /**
     * Esta funci√≥n se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private boolean isRegPro() {
        boolean blnRes = true;
        strAux = "¬øDesea guardar los cambios efectuados a √©ste registro?\n";
        strAux += "Si no guarda los cambios perder√° toda la informaci√≥n que no haya guardado.";
        switch (mostrarMsgCon(strAux)) {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado()) {
                    case 'n': //Insertar
                        blnRes = objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes = objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam = false;
                blnRes = true;
                break;
            case 2: //CANCEL_OPTION
                blnRes = false;
                break;
        }
        return blnRes;
    }

    /**
     * Esta funci√≥n permite limpiar el formulario.
     * @return true: Si se pudo limpiar la ventana sin ning√∫n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean limpiarFrm() {
        boolean blnRes = true;
        try {
            txtCodPrv.setText("");
            txtNomPrv.setText("");
            objTblMod.removeAllRows();
        } catch (Exception e) {
            blnRes = false;
        }
        return blnRes;
    }



    /**
     * Esta funci√≥n actualiza el registro en la base de datos.
     * @return true: Si se pudo actualizar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarReg() {
        boolean blnRes = false;
        try {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if(con!=null){
                if(eliminarGrpItmPrvExt()) {
                    if(actualizarGrpItmPrvExt()) {
                        con.commit();
                        blnRes = true;
                    }
                    else{
                        con.rollback();
                    }
                }
                else{
                    con.rollback();
                }
            }
            con.close();
            con = null;
        } catch (java.sql.SQLException e) {
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    /**
     * Esta funci√≥n permite actualizar la cabecera de un registro.
     * @return true: Si se pudo actualizar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminarGrpItmPrvExt() {
        boolean blnRes=true;
        try{
            if (con!=null) {
                stm=con.createStatement();
                strSQL="";
                strSQL+="DELETE FROM tbr_grpInvPrvExtImp";
                strSQL+=" WHERE co_prv=" + txtCodPrv.getText() + "";
                strSQL+=" ;";
                System.out.println("eliminarGrpItmPrvExt: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funci√≥n permite actualizar la cabecera de un registro.
     * @return true: Si se pudo actualizar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarGrpItmPrvExt() {
        boolean blnRes=true;
        String strSQLUpd="";
        try{
            if (con!=null) {
                stm=con.createStatement();
                System.out.println("objTblMod.getRowCountTrue(): " + objTblMod.getRowCountTrue());
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    if(objTblMod.isChecked(i, INT_TBL_DAT_CHK)){
                        strSQL="";
                        strSQL+="INSERT INTO tbr_grpInvPrvExtImp(co_prv, co_grp)";
                        strSQL+="     (SELECT " + txtCodPrv.getText() + " AS co_prv";
                        strSQL+="      , " + objTblMod.getValueAt(i, INT_TBL_DAT_COD_GRP) + " AS co_grp";
                        strSQL+=" 	WHERE NOT EXISTS(";
                        strSQL+=" 			SELECT co_prv, co_grp FROM tbr_grpInvPrvExtImp";
                        strSQL+="                         WHERE co_prv=" + txtCodPrv.getText() + "";
                        strSQL+="                         AND co_grp=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_GRP) + ")";
                        strSQL+="     );";
                        strSQLUpd+=strSQL;
                    }
                }
                System.out.println("actualizarGrpItmPrvExt: " + strSQLUpd);
                stm.executeUpdate(strSQLUpd);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci√≥n permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean consultarReg(){
        boolean blnRes = true;
        try{
            conCab = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conCab!=null){
                stmCab = conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                strSQL="";
                strSQL+="SELECT a3.co_prv";
                strSQL+=" FROM tbm_prvExtImp AS a3";
                if( (objTooBar.getEstado()=='x') || (objTooBar.getEstado()=='m') ){
                    strSQL+=" LEFT OUTER JOIN";
                }
                else{
                    strSQL+=" INNER JOIN";
                }
                strSQL+=" tbr_grpinvprvextimp AS a4";
                strSQL+=" ON a4.co_prv=a3.co_prv";
                strSQL+=" WHERE a3.st_reg NOT IN('E') AND a3.co_prv=" + txtCodPrv.getText() + "";
                strSQL+=" GROUP BY a3.co_prv";
                System.out.println("consultarReg: " + strSQL);
                rstCab = stmCab.executeQuery(strSQL);
                if (rstCab.next()) {
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                }
                else{
                    mostrarMsgInf("No se ha encontrado ning√∫n registro que cumpla el criterio de b√∫squeda especificado.");
                    //limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci√≥n permite cargar el registro seleccionado.
     * @return true: Si se pudo cargar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg() {
        boolean blnRes = true;
        try {
            if (cargarCabReg()) {
                if (cargarDetReg()) {
                }
            }
            blnHayCam = false;
        }
        catch (Exception e) {
            blnRes = false;
        }
        return blnRes;
    }

    /**
     * Esta funci√≥n permite cargar la cabecera del registro seleccionado.
     * @return true: Si se pudo cargar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarCabReg() {
        int intPosRel;
        boolean blnRes = true;
        try {
            con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con != null) {
                stm=con.createStatement();
//                strSQL="";
//                strSQL+=" SELECT a3.co_prv, a3.tx_nom, a3.tx_dirWeb, a3.st_reg";
//                strSQL+=" FROM tbm_prvExtImp AS a3";
//                strSQL+=" WHERE a3.co_prv=" + rstCab.getString("co_prv") + "";
//                strSQL+=" AND a3.st_reg NOT IN('E')";
                strSQL="";
                strSQL+=" SELECT a3.co_prv, a3.tx_nom, a3.tx_dirWeb, a3.st_reg";
                strSQL+=" FROM tbm_prvExtImp AS a3";
                if( (objTooBar.getEstado()=='x') || (objTooBar.getEstado()=='m') ){
                    strSQL+=" LEFT OUTER JOIN";
                }
                else{
                    strSQL+=" INNER JOIN";
                }
                strSQL+=" tbr_grpinvprvextimp AS a4";
                strSQL+=" ON a4.co_prv=a3.co_prv";
                strSQL+=" WHERE a3.st_reg NOT IN('E') ";
                strSQL+=" AND a3.co_prv=" + txtCodPrv.getText() + "";

                System.out.println("cargarCabReg: " + strSQL);
                rst = stm.executeQuery(strSQL);
                if (rst.next()) {
                    strAux = rst.getString("co_prv");
                    txtCodPrv.setText((strAux == null) ? "" : strAux);
                    strAux = rst.getString("tx_nom");
                    txtNomPrv.setText((strAux == null) ? "" : strAux);
                    //Mostrar el estado del registro.
                    strAux = rst.getString("st_reg");
                    objTooBar.setEstadoRegistro(getEstReg(strAux));
                } else {
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                    blnRes = false;
                }
            }
            rst.close();
            stm.close();
            con.close();
            rst = null;
            stm = null;
            con = null;
            //Mostrar la posici√≥n relativa del registro.
            intPosRel = rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci√≥n permite cargar el detalle del registro seleccionado.
     * @return true: Si se pudo cargar el detalle del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg() {
        boolean blnRes = true;
        int intNiv=-1;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null) {
                stm=con.createStatement();
                strSQL="";
                strSQL+=" SELECT *FROM(";
                strSQL+=" 	SELECT 0 AS co_grp, '' AS tx_desCorGrp, '' AS tx_desCorLarGrp";
                strSQL+=" 	 , 0 AS co_grpChk, 0 AS ne_niv , -1 AS co_grpPad";
                strSQL+=" 	UNION";
                strSQL+=" 	SELECT a2.co_grp, a2.tx_desCor AS tx_desCorGrp , a2.tx_desLar AS tx_desCorLarGrp";
                strSQL+=" 	 , a1.co_grp AS co_grpChk, a2.ne_niv , CASE WHEN a2.co_grpPad IS NULL THEN 0 ELSE a2.co_grpPad END AS co_grpPad";
                strSQL+=" 	 FROM";
                strSQL+=" 	 tbm_grpInvImp AS a2";
//                if( (objTooBar.getEstado()=='x') || (objTooBar.getEstado()=='m') ){
                    strSQL+="       LEFT OUTER JOIN";
//                }
//                else{
//                    strSQL+="       INNER JOIN";
//                }
                strSQL+=" 	 tbr_grpInvPrvExtImp AS a1 ON a2.co_grp=a1.co_grp AND a1.co_prv=" + txtCodPrv.getText() + "";
                strSQL+=" 	 WHERE  a2.st_reg NOT IN('E','I')";
                strSQL+=" 	 GROUP BY a2.co_grp, a2.tx_desCor, a2.tx_desLar, a1.co_grp, a2.ne_niv";
                strSQL+=" 	 , CASE WHEN a2.co_grpPad IS NULL THEN 0 ELSE a2.co_grpPad END";
                strSQL+=" 	)";
                strSQL+=" 	AS x";
                strSQL+=" ORDER BY CASE WHEN co_grpPad IS NULL THEN 0 ELSE co_grpPad END, ne_niv, co_grp";
                System.out.println("cargarDetReg: " + strSQL);
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                
                arlDat.clear();
                //Obtener los registros.
                while(rst.next()) {
                    //contiene toda la informacion
                    arlReg=new ArrayList();
                    arlReg.add(INT_ARL_DAT_COD_GRP, rst.getString("co_grp"));
                    arlReg.add(INT_ARL_DAT_DES_COR_GRP, rst.getString("tx_desCorGrp"));
                    arlReg.add(INT_ARL_DAT_DES_LAR_GRP, rst.getString("tx_desCorLarGrp"));
                    arlReg.add(INT_ARL_DAT_COD_GRP_GUA, rst.getString("co_grpChk"));
                    arlReg.add(INT_ARL_DAT_NIV, rst.getString("ne_niv"));
                    arlReg.add(INT_ARL_DAT_COD_GRP_PAD, rst.getString("co_grpPad"));
                    arlReg.add(INT_ARL_DAT_EST_PRO, "");
                    arlDat.add(arlReg);
                }
                int intCodGrpPad=-999;
                int intExiRegAgrPrg=0;
                //contiene los primeros niveles
                for(int i=0; i<arlDat.size(); i++){
                    intCodGrpPad=objUti.getIntValueAt(arlDat, i, INT_ARL_DAT_COD_GRP_PAD);
                    if(intCodGrpPad==-1){
                        intExiRegAgrPrg=i;//contiene la fila donde se agrego un registro solo usado por ordenamiento y no tiene nada q ver con los datos realmente almacenados
                        vecReg = new Vector();
                        vecReg.add(INT_TBL_DAT_LIN, "");
                        vecReg.add(INT_TBL_DAT_CHK, null);
                        vecReg.add(INT_TBL_DAT_COD_GRP,     "" + objUti.getIntValueAt(arlDat, i, INT_ARL_DAT_COD_GRP));
                        vecReg.add(INT_TBL_DAT_DES_COR_GRP, "" + objUti.getStringValueAt(arlDat, i, INT_ARL_DAT_DES_COR_GRP));

                        intNiv=objUti.getIntValueAt(arlDat, i, INT_ARL_DAT_NIV);
                        strAux="";
                        for (int j=1; j<intNiv; j++)
                            strAux+="    ";
                        vecReg.add(INT_TBL_DAT_DES_LAR_GRP, "" + strAux + "" + "" + objUti.getStringValueAt(arlDat, i, INT_ARL_DAT_DES_LAR_GRP));

                        vecReg.add(INT_TBL_DAT_BUT, null);
                        vecReg.add(INT_TBL_DAT_ORD, "");
                        vecReg.add(INT_TBL_DAT_COD_GRP_PAD, "" + objUti.getStringValueAt(arlDat, i, INT_ARL_DAT_COD_GRP_PAD));

                        strAux=objUti.getStringValueAt(arlDat, i, INT_ARL_DAT_COD_GRP_GUA);

                        if(!strAux.equals("")) {
                            vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK);
                        }
                        vecDat.add(vecReg);

                        objUti.setStringValueAt(arlDat, i, INT_ARL_DAT_EST_PRO, "S");
                    }
                }
                String strEstPro="";
                rst.close();
                stm.close();
                con.close();
                rst = null;
                stm = null;
                con = null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();

                int intCodGrp=-1;

                for(int i=0; i<arlDat.size(); i++){
                    intCodGrpPad=objUti.getIntValueAt(arlDat, i, INT_ARL_DAT_COD_GRP_PAD);
                    strEstPro=objUti.getStringValueAt(arlDat, i, INT_ARL_DAT_EST_PRO);
                    if(strEstPro.equals("")){
                        for(int j=(objTblMod.getRowCountTrue()-1); j>=0; j--){
                            intCodGrp=Integer.parseInt(objTblMod.getValueAt(j, INT_TBL_DAT_COD_GRP).toString());
                            if(intCodGrp==intCodGrpPad){
                                objTblMod.insertRow(j+1);
                                objTblMod.setValueAt(objUti.getStringValueAt(arlDat, i, INT_ARL_DAT_COD_GRP), (j+1), INT_TBL_DAT_COD_GRP);
                                objTblMod.setValueAt(objUti.getStringValueAt(arlDat, i, INT_ARL_DAT_DES_COR_GRP), (j+1), INT_TBL_DAT_DES_COR_GRP);

                                objTblMod.setValueAt(objUti.getStringValueAt(arlDat, i, INT_ARL_DAT_COD_GRP_PAD), (j+1), INT_TBL_DAT_COD_GRP_PAD);

                                intNiv=objUti.getIntValueAt(arlDat, i, INT_ARL_DAT_NIV);
                                strAux="";
                                for (int h=1; h<intNiv; h++)
                                    strAux+="        ";
                                objTblMod.setValueAt( (strAux + "" + objUti.getStringValueAt(arlDat, i, INT_ARL_DAT_DES_LAR_GRP)), (j+1), INT_TBL_DAT_DES_LAR_GRP);
                                strAux=objUti.getStringValueAt(arlDat, i, INT_ARL_DAT_COD_GRP_GUA);
                                if(!strAux.equals("")) {
                                    objTblMod.setValueAt(new Boolean(true), (j+1), INT_TBL_DAT_CHK);
                                }
                                objUti.setStringValueAt(arlDat, i, INT_ARL_DAT_EST_PRO, "S");
                            }
                        }
                    }
                }


                System.out.println("arlDat: " + arlDat.toString());
                int intUltFil=0;
                for(int i=0; i<arlDat.size(); i++){
                    strEstPro=objUti.getStringValueAt(arlDat, i, INT_ARL_DAT_EST_PRO);
                    if(strEstPro.equals("")){
                        intUltFil=objTblMod.getRowCountTrue();//como no le resto el 1 me da la fila en la q debo insertar
                        objTblMod.insertRow(intUltFil);
                        objTblMod.setValueAt(objUti.getStringValueAt(arlDat, i, INT_ARL_DAT_COD_GRP), intUltFil, INT_TBL_DAT_COD_GRP);
                        objTblMod.setValueAt(objUti.getStringValueAt(arlDat, i, INT_ARL_DAT_DES_COR_GRP), intUltFil, INT_TBL_DAT_DES_COR_GRP);
                        intNiv=objUti.getIntValueAt(arlDat, i, INT_ARL_DAT_NIV);
                        strAux="";
                        for (int h=1; h<intNiv; h++)
                            strAux+="        ";
                        objTblMod.setValueAt( (strAux + "" + objUti.getStringValueAt(arlDat, i, INT_ARL_DAT_DES_LAR_GRP)), intUltFil, INT_TBL_DAT_DES_LAR_GRP);
                        strAux=objUti.getStringValueAt(arlDat, i, INT_ARL_DAT_COD_GRP_GUA);
                        if(!strAux.equals("")) {
                            objTblMod.setValueAt(new Boolean(true), intUltFil, INT_TBL_DAT_CHK);
                        }
                        objUti.setStringValueAt(arlDat, i, INT_ARL_DAT_EST_PRO, "S");
                    }
                }


                //colocar el orden correcto de los registros
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    objTblMod.setValueAt("" + (i+1), i, INT_TBL_DAT_ORD);
                }

                objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
                objTblMod.removeRow(intExiRegAgrPrg);
                objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
                objTblMod.removeEmptyRows();



            }

        } catch (java.sql.SQLException e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci√≥n obtiene la descripci√≥n larga del estado del registro.
     * @param estado El estado del registro. Por ejemplo: A, I, etc.
     * @return La descripci√≥n larga del estado del registro.
     * <BR>Nota.- Si la cadena recibida es <I>null</I> la funci√≥n devuelve una cadena vac√≠a.
     */
    private String getEstReg(String estado) {
        if (estado == null) {
            estado = "";
        } else {
            switch (estado.charAt(0)) {
                case 'A':
                    estado = "Activo";
                    break;
                case 'I':
                    estado = "Anulado";
                    break;
                case 'P':
                    estado = "Pendiente de autorizar";
                    break;
                case 'D':
                    estado = "Autorizaci√≥n denegada";
                    break;
                case 'R':
                    estado = "Pendiente de impresi√≥n";
                    break;
                case 'C':
                    estado = "Pendiente confirmaci√≥n de inventario";
                    break;
                case 'F':
                    estado = "Existen diferencias de inventario";
                    break;
                default:
                    estado = "Desconocido";
                    break;
            }
        }
        return estado;
    }

    /** Cerrar la aplicaci√≥n. */
    private void exitForm() {
        dispose();
    }

    /**
     * Esta funci√≥n determina si los campos son v√°lidos.
     * @return true: Si los campos son v√°lidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal() {
        if (txtNomPrv.getText().equals("")) {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\"> Proveedor</FONT> es obligatorio.<BR>Escriba o seleccione un proveedor y vuelva a intentarlo.</HTML>");
            txtNomPrv.requestFocus();
            return false;
        }

        return true;
    }



    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren m√°s espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter {

        public void mouseMoved(java.awt.event.MouseEvent evt) {
            int intCol = tblDat.columnAtPoint(evt.getPoint());
            String strMsg = "";
            switch (intCol) {
                case INT_TBL_DAT_COD_GRP:
                    strMsg = "C√≥digo del grupo";
                    break;
                case INT_TBL_DAT_DES_COR_GRP:
                    strMsg = "Descripci√≥n corta del grupo";
                    break;
                case INT_TBL_DAT_DES_LAR_GRP:
                    strMsg = "Descripci√≥n larga del grupo";
                    break;
                case INT_TBL_DAT_BUT:
                    strMsg = "Anexo 1";
                    break;
                case INT_TBL_DAT_ORD:
                    strMsg = "Orden de Grupos y subgrupos";
                    break;
                case INT_TBL_DAT_COD_GRP_PAD:
                    strMsg = "C√≥digo del grupo padre";
                    break;
                default:
                    strMsg = "";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }


    /**
     * Esta funci√°n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de b√°squeda determina si se debe hacer
     * una b√°squeda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se est√° buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opci√°n que desea utilizar.
     * @param intTipBus El tipo de b√°squeda a realizar.
     * @return true: Si no se present√° ning√°n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConPrv(int intTipBus){
        boolean blnRes=true;
        try{
            switch (intTipBus){
                case 0: //Mostrar la ventana de consulta.
                    vcoPrv.setCampoBusqueda(2);
                    vcoPrv.show();
                    if (vcoPrv.getSelectedButton()==vcoPrv.INT_BUT_ACE){
                        txtCodPrv.setText(vcoPrv.getValueAt(1));
                        txtNomPrv.setText(vcoPrv.getValueAt(2));
                        objTblMod.removeAllRows();
                    }
                    break;
                case 1: //B√°squeda directa por "N√°mero de cuenta".
                    if (vcoPrv.buscar("a1.co_prv", txtCodPrv.getText())){
                        txtCodPrv.setText(vcoPrv.getValueAt(1));
                        txtNomPrv.setText(vcoPrv.getValueAt(2));
                        objTblMod.removeAllRows();
                    }
                    else{
                        vcoPrv.setCampoBusqueda(0);
                        vcoPrv.setCriterio1(11);
                        vcoPrv.cargarDatos();
                        vcoPrv.show();
                        if (vcoPrv.getSelectedButton()==vcoPrv.INT_BUT_ACE)
                        {
                            txtCodPrv.setText(vcoPrv.getValueAt(1));
                            txtNomPrv.setText(vcoPrv.getValueAt(2));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtCodPrv.setText(strCodPrv);
                        }
                    }
                    break;
                case 2: //B√°squeda directa por "Descripci√°n larga".
                    if (vcoPrv.buscar("a1.tx_nom", txtNomPrv.getText())){
                        txtCodPrv.setText(vcoPrv.getValueAt(1));
                        txtNomPrv.setText(vcoPrv.getValueAt(2));
                        objTblMod.removeAllRows();
                    }
                    else{
                        vcoPrv.setCampoBusqueda(2);
                        vcoPrv.setCriterio1(11);
                        vcoPrv.cargarDatos();
                        vcoPrv.show();
                        if (vcoPrv.getSelectedButton()==vcoPrv.INT_BUT_ACE){
                            txtCodPrv.setText(vcoPrv.getValueAt(1));
                            txtNomPrv.setText(vcoPrv.getValueAt(2));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtNomPrv.setText(strNomPrv);
                        }
                    }
                    break;
            }
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funci√°n configura la "Ventana de consulta" que ser√° utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConPrv()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_prv");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dirweb");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("C√≥digo");
            arlAli.add("Nombre");
            arlAli.add("Direcci√≥n Web");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("400");
            arlAncCol.add("100");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_prv, a1.tx_nom, a1.tx_dirweb";
            strSQL+=" FROM tbm_prvExtImp AS a1";
            strSQL+=" WHERE a1.st_reg='A'";
            strSQL+=" ORDER BY a1.co_prv";
            vcoPrv=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de proveedores del exterior", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoPrv.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    private boolean ordenarRegistrosAscendente(){
        boolean blnRes=true;
        try{
            objCom=new ZafCom();
            objHeaRenLbl=new ZafHeaRenLbl(tblDat.getTableHeader().getDefaultRenderer());
            tblDat.getTableHeader().setDefaultRenderer(objHeaRenLbl);

            objHeaRenLbl.setTipoOrdenamiento(INT_TBL_DAT_ORD, 1);
            objCom.setColumnaOrdenar(INT_TBL_DAT_ORD,true);
            java.util.Collections.sort(objTblMod.getData(),objCom);
            objTblMod.fireTableDataChanged();
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }

    /**
    * Esta clase implementa la interface "Comparator" la cual es utilizada para indicar
    * el modo que se utilizar√° para comparar objetos.
    */
    private class ZafCom implements java.util.Comparator{
        private int intCol;
        private boolean blnAsc;
        public ZafCom(){
            intCol=-1;
            blnAsc=true;
        }

        /**
         * Este constructor establece la columna que se debe ordenar ascendentemente/descendentemente.
         * @param columna La columna a ordenar.
         * @param ascendente Puede tomar los siguientes valores:
         * <BR>true: Para que la columna se ordene ascendentemente.
         * <BR>false: Para que la columna se ordene descendentemente.
         */
        public ZafCom(int columna, boolean ascendente){
            intCol=columna;
            blnAsc=ascendente;
        }

        /**
         * Esta funci√≥n establece la columna que se debe ordenar ascendentemente/descendentemente.
         * @param columna La columna a ordenar.
         * @param ascendente Puede tomar los siguientes valores:
         * <BR>true: Para que la columna se ordene ascendentemente.
         * <BR>false: Para que la columna se ordene descendentemente.
         */
        public void setColumnaOrdenar(int columna, boolean ascendente){
            intCol=columna;
            blnAsc=ascendente;
        }

        /**
         * Esta funci√≥n compara los objetos que recibe y devuelve el resultado de la comparaci√≥n.
         * @param o1 El objeto a comparar.
         * @param o2 El otro objeto a comparar.
         * @return Puede tomar los siguientes valores:
         * <UL>
         * <LI>-1: Si o1<o2.
         * <LI>0: Si o1=o2.
         * <LI>1: Si o1>o2.
         * </UL>
         * Nota.- Se intercambia el -1 con el 1 para cambiar de ascendente a descendente.
         */
        public int compare(Object o1, Object o2){
            int intRes=0;
            double dblNum1, dblNum2;
            Vector vecFil1, vecFil2;
            vecFil1=(Vector)o1;
            vecFil2=(Vector)o2;
            Object objCel1, objCel2;
            objCel1=vecFil1.get(intCol);
            objCel2=vecFil2.get(intCol);
            //Comparar el contenido de las celdas.
            if (objCel1==null && objCel2==null){
                intRes=0;
            }
            else if (objCel1==null){
                if (blnAsc)
                    intRes=-1;
                else
                    intRes=1;
            }
            else if (objCel2==null){
                if (blnAsc)
                    intRes=1;
                else
                    intRes=-1;
            }
            else if (isNumero(objCel1.toString()) && isNumero(objCel2.toString())){
                //Comparar los n√∫meros como n√∫meros caso contrario ser√°n considerados como cadena.
                dblNum1=Double.parseDouble(objCel1.toString());
                dblNum2=Double.parseDouble(objCel2.toString());
                if (blnAsc){
                    if (dblNum1<dblNum2)
                        intRes=-1;
                    else if (dblNum1==dblNum2)
                        intRes=0;
                    else
                        intRes=1;
                }
                else{
                    if (dblNum1<dblNum2)
                        intRes=1;
                    else if (dblNum1==dblNum2)
                        intRes=0;
                    else
                        intRes=-1;
                }
            }
            else if (objCel1 instanceof String){
                //Comparar cadenas.
                if (blnAsc)
                    intRes=objCel1.toString().compareToIgnoreCase(objCel2.toString());
                else
                    intRes=objCel2.toString().compareToIgnoreCase(objCel1.toString());
            }
            else if (objCel1 instanceof Comparable){
                if (blnAsc)
                    intRes=((Comparable)objCel1).compareTo(objCel2);
                else
                    intRes=((Comparable)objCel2).compareTo(objCel1);
            }
            return intRes;
        }

    }

    /**
     * Esta funci√≥n determina si la cadena que se recibe como argumento es un valor num√©rico o no.
     * @param numero La cadena que contiene el n√∫mero que se desea evaluar.
     * @return true: Si el valor es un n√∫mero.
     * <BR>false: En el caso contrario.
     */
    private boolean isNumero(String numero)
    {
        double dblNum;
        boolean blnRes=true;
        try
        {
            dblNum=Double.parseDouble(numero);
        }
        catch (NumberFormatException e)
        {
            blnRes=false;
        }
        return blnRes;
    }


    private boolean marcarNodoPadre(int filaSeleccionada){
        boolean blnRes=true;
        int intCodGrpPad=Integer.parseInt(objTblMod.getValueAt(filaSeleccionada, INT_TBL_DAT_COD_GRP_PAD).toString());
        int intCodGrp=-1;
        try{
            for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                intCodGrp=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_GRP).toString());
                if(intCodGrpPad==intCodGrp){
                    objTblMod.setValueAt(new Boolean(true), i, INT_TBL_DAT_CHK);
                }
            }
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }





}