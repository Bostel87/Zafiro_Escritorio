/*
 * ZafHer03_00.java
 *
 * Created on 30 de marzo de 2006, 12:18 PM
 */

package Herramientas.ZafHer03;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;

/**
 *
 * @author  Eddye Lino
 */
public class ZafHer03_00 extends javax.swing.JDialog
{
    //Constantes:
    public static final int INT_OPC_CAN=0;              /**Un valor para setOpcSelDlg: Indica "Botón Cancelar".*/
    public static final int INT_OPC_ACE=1;              /**Un valor para setOpcSelDlg: Indica "Botón Aceptar".*/
    //Variables:
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    //Variables de la clase:
    private int intCamVal;                              //Campo de validación: 1=tx_pwd1; 2=tx_pwd2. 
    private int intOpcSelDlg;                           //Opción seleccionada en el JDialog.
    private String strCad;                              //Cadena ingresada por el usuario.
    private boolean blnUsrVal;                          //Usuario valido.
    
    /**
     * Crea un objeto del tipo ZafHer03_00.
     * @param parent El JFrame padre.
     * @param modal El valor que indica si el JDialog es modal.
     * @param obj El objeto ZafParSis.
     * @param campo El valor que determina el campo por el cual se debe validar.
     * <UL>
     * <LI>1: Validar por el campo "tx_pwd1",
     * <LI>2: Validar por el campo "tx_pwd2",
     * </UL>
     */
    public ZafHer03_00(java.awt.Frame parent, boolean modal, ZafParSis obj, int campo)
    {
        super(parent, modal);
        initComponents();
        //Inicializar objetos.
        objParSis=obj;
        intCamVal=campo;
        intOpcSelDlg=INT_OPC_CAN;
        if (!configurarFrm())
            exitForm();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lblCla = new javax.swing.JLabel();
        butAce = new javax.swing.JButton();
        butCan = new javax.swing.JButton();
        pwdCla = new javax.swing.JPasswordField();

        getContentPane().setLayout(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Validaci\u00f3n de usuario");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        lblCla.setText("Clave:");
        lblCla.setToolTipText("Tipo de documento");
        getContentPane().add(lblCla);
        lblCla.setBounds(4, 12, 100, 20);

        butAce.setText("Aceptar");
        butAce.setToolTipText("Valida que la clave sea correcta");
        butAce.setPreferredSize(new java.awt.Dimension(92, 25));
        butAce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAceActionPerformed(evt);
            }
        });

        getContentPane().add(butAce);
        butAce.setBounds(92, 40, 92, 25);

        butCan.setText("Cancelar");
        butCan.setToolTipText("Cierra el cuadro de dialogo");
        butCan.setPreferredSize(new java.awt.Dimension(92, 25));
        butCan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCanActionPerformed(evt);
            }
        });

        getContentPane().add(butCan);
        butCan.setBounds(188, 40, 92, 25);

        pwdCla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAceActionPerformed(evt);
            }
        });
        pwdCla.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pwdClaFocusGained(evt);
            }
        });

        getContentPane().add(pwdCla);
        pwdCla.setBounds(92, 12, 188, 20);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-300)/2, (screenSize.height-100)/2, 300, 100);
    }//GEN-END:initComponents

    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        intOpcSelDlg=INT_OPC_CAN;
        dispose();
    }//GEN-LAST:event_exitForm

    private void pwdClaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pwdClaFocusGained
        pwdCla.selectAll();
    }//GEN-LAST:event_pwdClaFocusGained

    private void butAceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAceActionPerformed
        strCad=String.copyValueOf(pwdCla.getPassword());
        intOpcSelDlg=INT_OPC_ACE;
        blnUsrVal=validarUsr();
        if (blnUsrVal)
            dispose();
        else
        {
            mostrarMsgInf("La contraseña es incorrecta.");
            pwdCla.requestFocus();
        }
    }//GEN-LAST:event_butAceActionPerformed

    private void butCanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCanActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCanActionPerformed
    
    /** Cerrar la aplicación. */
    private void exitForm()
    {
        intOpcSelDlg=INT_OPC_CAN;
        dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butAce;
    private javax.swing.JButton butCan;
    private javax.swing.JLabel lblCla;
    private javax.swing.JPasswordField pwdCla;
    // End of variables declaration//GEN-END:variables
    
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux="Confirmación de contraseña";
            this.setTitle(strAux + " v0.1");
            //Configurar objetos.
//            txaObs1.setEditable(false);
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función obtiene la opción que seleccionó el usuario en el JDialog.
     * Puede devolver uno de los siguientes valores:
     * <UL>
     * <LI>0: Click en el botón Cancelar (INT_OPC_CAN).
     * <LI>1: Click en el botón Aceptar (INT_OPC_ACE).
     * </UL>
     * <BR>Nota.- La opción predeterminada es el botón Cancelar.
     * @return La opción seleccionada por el usuario.
     */
    public int getOpcSelDlg()
    {
        return intOpcSelDlg;
    }
    
    /**
     * Esta función valida la contraseña del usuario que ingresó al sistema.
     * @return true: Si la contraseña es correcta.
     * <BR>false: En el caso contrario.
     */
    private boolean validarUsr()
    {
        boolean blnRes=true;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();	
                strSQL="";
                strSQL+="SELECT a1.co_usr";
                strSQL+=" FROM tbm_usr AS a1";
                strSQL+=" WHERE a1.co_usr=" + objParSis.getCodigoUsuario();
                if (intCamVal==1)
                    strSQL+=" AND a1.tx_pwd1=MD5('" + strCad.replaceAll("'", "''") + "')";
                else
                    strSQL+=" AND a1.tx_pwd2=MD5('" + strCad.replaceAll("'", "''") + "')";
                strSQL+=" AND a1.st_reg='A'";
                rst=stm.executeQuery(strSQL);
                if (!rst.next())
                {
                    blnRes=false;
                }
                rst.close(); 
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función determina si el usuario es válido. Se considera que el usuario
     * es válido si la clave ingresada es correcta.
     * @return true: Si el usuario es valido.
     * <BR>false: En el caso contrario.
     */
    public boolean isUsrVal()
    {
        return blnUsrVal;
    }
    
    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
}
