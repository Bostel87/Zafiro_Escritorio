/*
 * ZafHer26.java
 *
 * Created on 31 de agosto de 2005, 10:10 PM
 */
package Herramientas.ZafHer26;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.util.Vector;

/**
 *
 * @author  Eddye Lino
 */
public class ZafHer26 extends javax.swing.JInternalFrame 
{
    //Constantes: Columnas del JTable:
    static final int INT_TBL_EMP_LIN=0;                         //Línea.
    static final int INT_TBL_EMP_CHK=1;                         //Casilla de verificación.
    static final int INT_TBL_EMP_COD_EMP=2;                     //Código de la empresa.
    static final int INT_TBL_EMP_NOM_EMP=3;                     //Nombre de la empresa.
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblFilCab objTblFilCab;
    private ZafTblMod objTblModEmp;
    private ZafThreadGUI objThrGUI;
    private ZafTblCelRenLbl objTblCelRenLbl;                    //Render: Presentar JLabel en JTable.
    private ZafTblCelRenChk objTblCelRenChk;                    //Render: Presentar JCheckBox en JTable.
    private ZafTblCelEdiChk objTblCelEdiChk;                    //Editor: JCheckBox en celda.
    private ZafTblPopMnu objTblPopMnu;                          //PopupMenu: Establecer PeopuMenú en JTable.
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strConSQL, strAux;
    private Vector vecDat, vecCab, vecReg;
    private Vector vecAux;
    private boolean blnCon;                                     //true: Continua la ejecución del hilo.
    private boolean blnMarTodChkTblEmp=true;                    //Marcar todas las casillas de verificación del JTable de empresas.
   
    /**
     * Crea una nueva instancia de la clase ZafCom10.
     * @param obj El objeto ZafParSis.
     */
    public ZafHer26(ZafParSis obj) 
    {
        try
        {
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        spnFil = new javax.swing.JScrollPane();
        sppFil = new javax.swing.JSplitPane();
        panLoc = new javax.swing.JPanel();
        spnEmp = new javax.swing.JScrollPane();
        tblEmp = new javax.swing.JTable();
        panFil = new javax.swing.JPanel();
        lblCli = new javax.swing.JLabel();
        cboPerAni = new javax.swing.JComboBox();
        cboPerMes = new javax.swing.JComboBox();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butPro = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        spnFil.setBorder(null);

        sppFil.setBorder(null);
        sppFil.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        sppFil.setResizeWeight(0.3);
        sppFil.setToolTipText("");
        sppFil.setOneTouchExpandable(true);
        sppFil.setPreferredSize(new java.awt.Dimension(450, 150));

        panLoc.setBorder(javax.swing.BorderFactory.createTitledBorder("Listado de empresas"));
        panLoc.setAutoscrolls(true);
        panLoc.setLayout(new java.awt.BorderLayout());

        tblEmp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnEmp.setViewportView(tblEmp);

        panLoc.add(spnEmp, java.awt.BorderLayout.CENTER);

        sppFil.setTopComponent(panLoc);

        panFil.setLayout(null);

        lblCli.setText("Período:");
        lblCli.setToolTipText("Período:");
        panFil.add(lblCli);
        lblCli.setBounds(4, 4, 120, 20);
        panFil.add(cboPerAni);
        cboPerAni.setBounds(124, 4, 80, 20);
        panFil.add(cboPerMes);
        cboPerMes.setBounds(208, 4, 140, 20);

        sppFil.setBottomComponent(panFil);

        spnFil.setViewportView(sppFil);

        tabFrm.addTab("Filtro", spnFil);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butPro.setText("Procesar");
        butPro.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butPro.setPreferredSize(new java.awt.Dimension(92, 25));
        butPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butProActionPerformed(evt);
            }
        });
        panBot.add(butPro);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        setBounds(0, 0, 500, 350);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        configurarFrm();
    }//GEN-LAST:event_formInternalFrameOpened

    private void butProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butProActionPerformed
        if (isCamVal())
        {
            //Realizar acción de acuerdo a la etiqueta del botón ("Procesar" o "Detener").
            if (butPro.getText().equals("Procesar"))
            {
                if (mostrarMsgCon("¿Está seguro que desea realizar esta operación?")==0)
                {
                    blnCon=true;
                    if (objThrGUI==null)
                    {
                        objThrGUI=new ZafThreadGUI();
                        objThrGUI.start();
                    }
                }
            }
            else
            {
                blnCon=false;
            }
        }
    }//GEN-LAST:event_butProActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (javax.swing.JOptionPane.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butPro;
    private javax.swing.JComboBox cboPerAni;
    private javax.swing.JComboBox cboPerMes;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblCli;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panLoc;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnEmp;
    private javax.swing.JScrollPane spnFil;
    private javax.swing.JSplitPane sppFil;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblEmp;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.1");
            lblTit.setText(strAux);
            //Configurar objetos.
//            txtCodTipDoc.setVisible(false);
            //Configurar los JComboBox.
            cargarPerAni();
            cargarPerMes();
            //Configurar los JTables.
            configurarTblEmp();
            cargarEmp();
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función configura el JTable "tblEmp".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblEmp()
    {
        boolean blnRes=true;
        try
        {
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(4);   //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_EMP_LIN,"");
            vecCab.add(INT_TBL_EMP_CHK,"");
            vecCab.add(INT_TBL_EMP_COD_EMP,"Cód.Emp.");
            vecCab.add(INT_TBL_EMP_NOM_EMP,"Empresa");
            //Configurar JTable: Establecer el modelo de la tabla.
            objTblModEmp=new ZafTblMod();
            objTblModEmp.setHeader(vecCab);
            tblEmp.setModel(objTblModEmp);
            //Configurar JTable: Establecer tipo de selección.
            tblEmp.setRowSelectionAllowed(true);
            tblEmp.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblEmp);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblEmp.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblEmp.getColumnModel();
            tcmAux.getColumn(INT_TBL_EMP_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_EMP_CHK).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_EMP_COD_EMP).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_EMP_NOM_EMP).setPreferredWidth(330);
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_EMP_CHK).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblEmp.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Ocultar columnas del sistema.
//            objTblMod.addSystemHiddenColumn(INT_TBL_EMP_COD_TIP_DOC, tblEmp);
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            tblEmp.getTableHeader().addMouseMotionListener(new ZafMouMotAdaEmp());
            //Configurar JTable: Establecer los listener para el TableHeader.
            tblEmp.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tblEmpMouseClicked(evt);
                }
            });
            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_EMP_CHK);
            objTblModEmp.setColumnasEditables(vecAux);
            vecAux=null;
            //Configurar JTable: Editor de la tabla.
//            objTblEdi=new ZafTblEdi(tblDat);
            //Configurar JTable: Editor de búsqueda.
//            objTblBus=new ZafTblBus(tblEmp);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblEmp);
            tcmAux.getColumn(INT_TBL_EMP_LIN).setCellRenderer(objTblFilCab);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk=new ZafTblCelRenChk();
            tcmAux.getColumn(INT_TBL_EMP_CHK).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk=null;
            
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            tcmAux.getColumn(INT_TBL_EMP_COD_EMP).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
            //Configurar JTable: Editor de celdas.
            objTblCelEdiChk=new ZafTblCelEdiChk(tblEmp);
            tcmAux.getColumn(INT_TBL_EMP_CHK).setCellEditor(objTblCelEdiChk);
            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    if (objTblCelEdiChk.isChecked())
                    {
//                        objTblMod.setValueAt(objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_VAL_PEN), tblDat.getSelectedRow(), INT_TBL_DAT_ABO_DOC);
                    }
                    else
                    {
//                        objTblMod.setValueAt(null, tblDat.getSelectedRow(), INT_TBL_DAT_ABO_DOC);
                    }
                }
            });

            //Configurar JTable: Establecer el ListSelectionListener.
//            javax.swing.ListSelectionModel lsm=tblEmp.getSelectionModel();
//            lsm.addListSelectionListener(new ZafLisSelLisCre());
            //Configurar JTable: Establecer el modo de operación.
            objTblModEmp.setModoOperacion(ZafTblMod.INT_TBL_EDI);
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite consultar las empresas de acuerdo al siguiente criterio:
     * <UL>
     * <LI>Si se ingresa a la empresa "Grupo" se muestran todas las empresae.
     * <LI>Si se ingresa a cualquier otra empresa se muestra sólo la empresa seleccionada.
     * </UL>
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarEmp()
    {
        int intCodEmp;
        boolean blnRes=true;
        try
        {
            intCodEmp=objParSis.getCodigoEmpresa();
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT a1.co_emp, a1.tx_nom";
                strSQL+=" FROM tbm_emp AS a1";
                strSQL+=" WHERE a1.st_reg='A'";
                if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                {
                    strSQL+=" AND a1.co_emp<>" + objParSis.getCodigoEmpresaGrupo();
                }
                else
                {
                    strSQL+=" AND a1.co_emp=" + intCodEmp;
                }
                strSQL+=" ORDER BY a1.co_emp";
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                while (rst.next())
                {
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_EMP_LIN,"");
                    vecReg.add(INT_TBL_EMP_CHK,Boolean.TRUE);
                    vecReg.add(INT_TBL_EMP_COD_EMP,rst.getString("co_emp"));
                    vecReg.add(INT_TBL_EMP_NOM_EMP,rst.getString("tx_nom"));
                    vecDat.add(vecReg);
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblModEmp.setData(vecDat);
                tblEmp.setModel(objTblModEmp);
                vecDat.clear();
                blnMarTodChkTblEmp=false;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite consultar el período (Año).
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarPerAni()
    {
        boolean blnRes=true;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT a1.ne_ani";
                strSQL+=" FROM tbm_aniCreSis AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" ORDER BY a1.ne_ani";
                rst=stm.executeQuery(strSQL);
                cboPerAni.removeAllItems();
                while (rst.next())
                {
                    cboPerAni.addItem(rst.getString("ne_ani"));
                }
                cboPerAni.setSelectedIndex(cboPerAni.getItemCount()-1);
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite consultar el período (Mes).
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarPerMes()
    {
        boolean blnRes=true;
        try
        {
            cboPerMes.addItem("Enero");
            cboPerMes.addItem("Febrero");
            cboPerMes.addItem("Marzo");
            cboPerMes.addItem("Abril");
            cboPerMes.addItem("Mayo");
            cboPerMes.addItem("Junio");
            cboPerMes.addItem("Julio");
            cboPerMes.addItem("Agosto");
            cboPerMes.addItem("Septiembre");
            cboPerMes.addItem("Octubre");
            cboPerMes.addItem("Noviembre");
            cboPerMes.addItem("Diciembre");
            cboPerMes.setSelectedIndex(java.time.YearMonth.now().getMonthValue()-1);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        javax.swing.JOptionPane.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si y No. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return javax.swing.JOptionPane.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    /**
     * Esta función muestra un mensaje de error al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos no se grabaron
     * y que debe comunicar de este particular al administrador del sistema.
     */
    private void mostrarMsgErr(String strMsg)
    {
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        javax.swing.JOptionPane.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Esta función se ejecuta cuando se hace el "MouseClicked" en la cabecera del JTable.
     * Se utiliza ésta función especificamente para marcar todas las casillas de verificación
     * de la columna que indica la bodega seleccionada en el el JTable de bodegas.
     */
    private void tblEmpMouseClicked(java.awt.event.MouseEvent evt)
    {
        int i, intNumFil;
        try
        {
            intNumFil=objTblModEmp.getRowCountTrue();
            //Marcar la casilla sólo si se da 1 click con el botón izquierdo.
            if (evt.getButton()==java.awt.event.MouseEvent.BUTTON1 && evt.getClickCount()==1 && tblEmp.columnAtPoint(evt.getPoint())==INT_TBL_EMP_CHK)
            {
                if (blnMarTodChkTblEmp)
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        objTblModEmp.setChecked(true, i, INT_TBL_EMP_CHK);
                    }
                    blnMarTodChkTblEmp=false;
                }
                else
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        objTblModEmp.setChecked(false, i, INT_TBL_EMP_CHK);
                    }
                    blnMarTodChkTblEmp=true;
                }
            }
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }
    
    /**
     * Esta función determina si los campos son válidos.
     * @return true: Si los campos son válidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal()
    {
        //Validar que esté seleccionado al menos una empresa.
        if (!objTblModEmp.isCheckedAnyRow(INT_TBL_EMP_CHK))
        {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>Es obligatorio seleccionar al menos una empresa.<BR>Por favor corrija y vuelva a intentarlo.</HTML>");
            if (objTblModEmp.getRowCount()>0)
            {
                tblEmp.setRowSelectionInterval(0, 0);
                tblEmp.changeSelection(0, INT_TBL_EMP_CHK, false, false);
                tblEmp.requestFocus();
            }
            return false;
        }
        return true;
    }
    
    /**
     * Esta función borra e inserta los registros en la base de datos.
     * @return true: Si se pudo realizar la operación.
     * <BR>false: En el caso contrario.
     */
    private boolean procesar()
    {
        int intNumFilTblEmp, i, j;
        String strPer;
        boolean blnRes=true;
        try
        {
            butPro.setText("Detener");
            lblMsgSis.setText("Procesando...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null)
            {
                intNumFilTblEmp=objTblModEmp.getRowCountTrue();
                strPer=cboPerAni.getSelectedItem().toString() + String.format("%02d", cboPerMes.getSelectedIndex()+1);
                pgrSis.setMinimum(0);
                pgrSis.setMaximum(objTblModEmp.getRowCountChecked(INT_TBL_EMP_CHK)*2+2);
                pgrSis.setValue(0);
                //Procesar las empresas.
                for (i=0, j=0; i<intNumFilTblEmp; i++)
                {
                    if (objTblModEmp.isChecked(i, INT_TBL_EMP_CHK))
                    {
                        if (!eliminarSalMenInv(objTblModEmp.getValueAt(i, INT_TBL_EMP_COD_EMP).toString(), strPer))
                        {
                            con.rollback();
                            con.close();
                            con=null;
                            return false;
                        }
                        j++;
                        pgrSis.setValue(j);
                        if (!insertarSalMenInvEmp(objTblModEmp.getValueAt(i, INT_TBL_EMP_COD_EMP).toString(), strPer))
                        {
                            con.rollback();
                            con.close();
                            con=null;
                            return false;
                        }
                        j++;
                        pgrSis.setValue(j);
                    }
                }
                //Procesar el grupo.
                if (!eliminarSalMenInv(String.valueOf(objParSis.getCodigoEmpresaGrupo()), strPer))
                {
                    con.rollback();
                    con.close();
                    con=null;
                    return false;
                }
                j++;
                pgrSis.setValue(j);
                if (!insertarSalMenInvGrp(String.valueOf(objParSis.getCodigoEmpresaGrupo()), strPer))
                {
                    con.rollback();
                    con.close();
                    con=null;
                    return false;
                }
                j++;
                pgrSis.setValue(j);
                con.commit();
                con.close();
                con=null;
                lblMsgSis.setText("Proceso completo...");
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función borra los saldos mensuales de inventario correspondientes a la empresa y periodo especificado.
     * @return true: Si se pudo realizar la operación.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminarSalMenInv(String strCodEmp, String strPer)
    {
        boolean blnRes=true;
        try
        {
            if (con!=null)
            {
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="DELETE FROM tbm_salMenInvBod";
                strSQL+=" WHERE co_emp=" + strCodEmp;
                strSQL+=" AND co_per=" + strPer;
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función inserta los saldos mensuales de inventario correspondientes a la empresa y periodo especificado.
     * @return true: Si se pudo realizar la operación.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarSalMenInvEmp(String strCodEmp, String strPer)
    {
        boolean blnRes=true;
        try
        {
            if (con!=null)
            {
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="INSERT INTO tbm_salMenInvBod(co_emp, co_bod, co_itm, co_per, nd_salUni)";
                strSQL+=" SELECT b1.co_emp, b1.co_bod, b1.co_itm";
                strSQL+=" , " + strPer + " AS co_per";
                strSQL+=" , (b1.nd_stkAct-(CASE WHEN b2.nd_canRes IS NULL THEN 0.00 ELSE b2.nd_canRes END)) AS nd_salUni";
                strSQL+=" FROM tbm_invBod AS b1";
                strSQL+=" LEFT OUTER JOIN (";
                strSQL+=" SELECT a2.co_emp, a2.co_bod, a2.co_itm, SUM(a2.nd_can) AS nd_canRes";
                strSQL+=" FROM tbm_cabMovInv AS a1";
                strSQL+=" INNER JOIN tbm_detMovInv as a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc)";
                strSQL+=" WHERE (a1.st_tipDev IS NULL OR a1.st_tipDev='C')";
                strSQL+=" AND a1.st_reg='A' AND a2.st_reg IS NULL";
                strSQL+=" AND a1.fe_doc>'" + java.time.LocalDate.of(Integer.parseInt(cboPerAni.getSelectedItem().toString()), cboPerMes.getSelectedIndex()+1, 1).plusMonths(1).minusDays(1).format(java.time.format.DateTimeFormatter.ofPattern(objParSis.getFormatoFechaBaseDatos())) + "'";
                strSQL+=" AND a2.co_emp=" + strCodEmp;
                strSQL+=" GROUP BY a2.co_emp, a2.co_bod, a2.co_itm";
                strSQL+=" ) AS b2 ON (b1.co_emp=b2.co_emp AND b1.co_bod=b2.co_bod AND b1.co_itm=b2.co_itm)";
                strSQL+=" WHERE b1.co_emp=" + strCodEmp;
                strSQL+=" AND (b1.nd_stkAct-(CASE WHEN b2.nd_canRes IS NULL THEN 0.00 ELSE b2.nd_canRes END))<>0";
                strSQL+=" ORDER BY b1.co_emp, b1.co_bod, b1.co_itm";
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función inserta los saldos mensuales de inventario correspondientes a la empresa grupo y periodo especificado.
     * @return true: Si se pudo realizar la operación.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarSalMenInvGrp(String strCodEmp, String strPer)
    {
        boolean blnRes=true;
        try
        {
            if (con!=null)
            {
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="INSERT INTO tbm_salMenInvBod(co_emp, co_bod, co_itm, co_per, nd_salUni)";
                strSQL+=" SELECT a2.co_empGrp, a2.co_bodGrp, a4.co_itm, a1.co_per, SUM(a1.nd_salUni) AS nd_salUni";
                strSQL+=" FROM tbm_salMenInvBod AS a1";
                strSQL+=" INNER JOIN tbr_bodEmpBodGrp AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_bod=a2.co_bod)";
                strSQL+=" INNER JOIN tbm_equInv AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_itm=a3.co_itm)";
                strSQL+=" INNER JOIN tbm_equInv AS a4 ON (a3.co_itmMae=a4.co_itmMae AND a4.co_emp=" + strCodEmp + ")";
                strSQL+=" WHERE a1.co_per=" + strPer;
                strSQL+=" GROUP BY a2.co_empGrp, a2.co_bodGrp, a4.co_itm, a1.co_per";
                strSQL+=" ORDER BY a2.co_empGrp, a2.co_bodGrp, a4.co_itm, a1.co_per";
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podría presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaría informado en todo
     * momento de lo que ocurre. Si se desea hacer ésto es necesario utilizar ésta clase
     * ya que si no sólo se apreciaría los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (procesar())
            {
                mostrarMsgInf("La operación PROCESAR se realizó con éxito.");
            }
            else
            {
                mostrarMsgErr("Ocurrió un error al realizar la operación PROCESAR.\nIntente realizar la operación nuevamente.\nSi el problema persiste notifiquelo a su administrador del sistema.");
            }
            //Inicializar objetos si no se pudo cargar los datos.
            lblMsgSis.setText("Listo");
            pgrSis.setValue(0);
            butPro.setText("Procesar");
            objThrGUI=null;
        }
    }
    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAdaEmp extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblEmp.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_EMP_LIN:
                    strMsg="";
                    break;
                case INT_TBL_EMP_COD_EMP:
                    strMsg="Código de la empresa";
                    break;
                case INT_TBL_EMP_NOM_EMP:
                    strMsg="Nombre de la empresa";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblEmp.getTableHeader().setToolTipText(strMsg);
        }
    }
    
}
