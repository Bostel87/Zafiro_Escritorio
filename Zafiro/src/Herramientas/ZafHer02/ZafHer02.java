/*
 * ZafHer01.java
 *
 * Created on 26 de octubre de 2005, 14:24
 */

package Herramientas.ZafHer02;

/**
 * @author  ireyes
 */
public class ZafHer02 extends javax.swing.JInternalFrame {
    
    private ZafHer02.MiTBar objTBAR ;
    private Librerias.ZafParSis.ZafParSis objZafParSis;
    private javax.swing.JInternalFrame jfrThis ;
    private Librerias.ZafUtil.ZafUtil objUtil;
    private Librerias.ZafPopupMenu.ZafPopupMenu objPopUpMenu;
    private EditorCodReg objEditorCodReg;
    /**
     * Objetos SQL  para realizar la 
     * consulta de la clave de los registros 
     */
    private java.sql.Connection conDoc;
    private java.sql.Statement  stmDoc;
    private java.sql.ResultSet  rstDoc;
    
    final int INT_TBL_LINEA    = 0 ;            //NUMERO
    final int INT_TBL_CODREG   = 1 ;            //CODIGO DE REGLA
    final int INT_TBL_BUTFND   = 2 ;            //BOTON PARA BUSCAR REGLA
    final int INT_TBL_NOMREG   = 3 ;            //DESCRIPCION DEL ITEM
    final int INT_TBL_DESREG   = 4 ;            //UNIDAD DEL ITEM
    final int INT_TBL_OBS      = 5 ;            //Codigo de la bodega
    final int INT_TBL_PAR1     = 6 ;            //Boton para buscar la bodega
    final int INT_TBL_PAR2     = 7 ;            //Cantidad del movimiento (venta o compra)
    
    /** Creates new form ZafHer01 */
    public ZafHer02(Librerias.ZafParSis.ZafParSis objZafParSis) {
        this.objZafParSis = objZafParSis;
        jfrThis = this;
        objUtil = new Librerias.ZafUtil.ZafUtil();
        initComponents();
        objEditorCodReg = new EditorCodReg() ;
        objTBAR = new ZafHer02.MiTBar(this);
        this.setTitle(objZafParSis.getNombreMenu()+" Ver 0.1");
//        this.getContentPane().add(objTBAR,"South");
        panSur.add(objTBAR,"South");
        /* 
         * Clase ke agrega numeracion a el JTable
         */
        Librerias.ZafColNumerada.ZafColNumerada ObjNumerador = new Librerias.ZafColNumerada.ZafColNumerada(tblDetalle,INT_TBL_LINEA);        
        limpiarTextos(this.getContentPane());
        registraEditoresCol();
        objPopUpMenu = new Librerias.ZafPopupMenu.ZafPopupMenu(tblDetalle);

        tblDetalle.setRowSelectionAllowed(true);
        tblDetalle.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);                        
        ResizeTbl();
         /* 
          * Clase ke agrega un Boton al Jtable
          */
        ButFndTbl Obj = new ButFndTbl(tblDetalle,INT_TBL_BUTFND );
        
        
        //Agregamos el Listener para la seleccion de columnas en la tabla de meses.
        javax.swing.ListSelectionModel LsmCol = tblDetalle.getColumnModel().getSelectionModel();
        LsmCol.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
        public void valueChanged(javax.swing.event.ListSelectionEvent e) {
                javax.swing.ListSelectionModel lsm = (javax.swing.ListSelectionModel)e.getSource();
                if (!lsm.isSelectionEmpty()) {
                    
                    /*  Selecciono alguna columna
                     *   utilizamos lsm.getMaxSelectionIndex() y lsm.getMinSelectionIndex()
                     *   para saber que rango de columnas se selecciono y actualizar los DatePicker
                     */
                    
                    int intRow = tblDetalle.getSelectedRow();                
                    if(intRow != -1){
                        txtDesReg.setText(tblDetalle.getValueAt(intRow , INT_TBL_DESREG) + "" );
                        txtDesPar.setText(tblDetalle.getValueAt(intRow , INT_TBL_OBS) + "" );
                        
                    }
                }
            }
        });
        
        
        
//       addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
//            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
//            }
//            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
//            }
//            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
//                   objTBAR.salida();
//            }
//            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
//            }
//            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
//            }
//            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
//            }
//            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
//            }
//        });          
        
                
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        tabPrincipal = new javax.swing.JTabbedPane();
        panGeneral = new javax.swing.JPanel();
        panNor = new javax.swing.JPanel();
        lblUsuario = new javax.swing.JLabel();
        txtCodUsr = new javax.swing.JTextField();
        txtNomUsr = new javax.swing.JTextField();
        butFndUsr = new javax.swing.JButton();
        spnTbl = new javax.swing.JScrollPane();
        tblDetalle = new javax.swing.JTable();
        panSur = new javax.swing.JPanel();
        panSurNor = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        spnDesReg = new javax.swing.JScrollPane();
        txtDesReg = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        spnDesPar = new javax.swing.JScrollPane();
        txtDesPar = new javax.swing.JTextArea();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        panGeneral.setLayout(new java.awt.BorderLayout());

        panNor.setLayout(null);

        panNor.setPreferredSize(new java.awt.Dimension(0, 30));
        lblUsuario.setText("Usuario:");
        panNor.add(lblUsuario);
        lblUsuario.setBounds(10, 8, 50, 15);

        txtCodUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodUsrActionPerformed(evt);
            }
        });
        txtCodUsr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodUsrFocusLost(evt);
            }
        });

        panNor.add(txtCodUsr);
        txtCodUsr.setBounds(60, 5, 60, 21);

        txtNomUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomUsrActionPerformed(evt);
            }
        });

        panNor.add(txtNomUsr);
        txtNomUsr.setBounds(120, 5, 170, 21);

        butFndUsr.setText("...");
        butFndUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFndUsrActionPerformed(evt);
            }
        });

        panNor.add(butFndUsr);
        butFndUsr.setBounds(292, 6, 20, 20);

        panGeneral.add(panNor, java.awt.BorderLayout.NORTH);

        tblDetalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Linea", "Codigo Regla", "...", "Nombre Regla", "Descripcion", "Observaci√≥n", "Paramatro1", "Parametro2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetalle.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        spnTbl.setViewportView(tblDetalle);

        panGeneral.add(spnTbl, java.awt.BorderLayout.CENTER);

        panSur.setLayout(new java.awt.BorderLayout());

        panSurNor.setLayout(new java.awt.GridLayout(2, 1));

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder("Descripci\u00f3n de la regla"));
        jPanel1.setPreferredSize(new java.awt.Dimension(32, 70));
        spnDesReg.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        spnDesReg.setPreferredSize(new java.awt.Dimension(20, 70));
        spnDesReg.setViewportView(txtDesReg);

        jPanel1.add(spnDesReg, java.awt.BorderLayout.CENTER);

        panSurNor.add(jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder("Descripci\u00f3n de los parametros"));
        jPanel2.setPreferredSize(new java.awt.Dimension(32, 70));
        spnDesPar.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        spnDesPar.setPreferredSize(new java.awt.Dimension(20, 40));
        txtDesPar.setEditable(false);
        txtDesPar.setPreferredSize(new java.awt.Dimension(0, 40));
        spnDesPar.setViewportView(txtDesPar);

        jPanel2.add(spnDesPar, java.awt.BorderLayout.CENTER);

        panSurNor.add(jPanel2);

        panSur.add(panSurNor, java.awt.BorderLayout.NORTH);

        panGeneral.add(panSur, java.awt.BorderLayout.SOUTH);

        tabPrincipal.addTab("General", panGeneral);

        getContentPane().add(tabPrincipal, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-400)/2, 600, 400);
    }//GEN-END:initComponents

    private void txtNomUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomUsrActionPerformed
        // TODO add your handling code here:
        boolean blnEncontro = false;
        Librerias.ZafConsulta.ZafConsulta objFndUsr = getFndUsr(txtNomUsr.getText(), 1);
        if(txtNomUsr.getText().equals(""))
           objFndUsr.show();
        else
           if(!objFndUsr.buscar("tx_nom = '" + txtNomUsr.getText() + "'" ))
               objFndUsr.show();
           else
               blnEncontro = true;
        
        if(objFndUsr.acepto() || blnEncontro){
            txtCodUsr.setText(objFndUsr.GetCamSel(1));
            txtNomUsr.setText(objFndUsr.GetCamSel(2));
        }            
    }//GEN-LAST:event_txtNomUsrActionPerformed

    private void txtCodUsrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodUsrFocusLost
        boolean blnEncontro = false;
        Librerias.ZafConsulta.ZafConsulta objFndUsr = getFndUsr(txtCodUsr.getText(), 0);
        if(!objFndUsr.buscar("tx_usr = '" + txtCodUsr.getText() + "'" )){
            txtCodUsr.setText("");
            txtNomUsr.setText("");
        }else{
            txtCodUsr.setText(objFndUsr.GetCamSel(1));
            txtNomUsr.setText(objFndUsr.GetCamSel(2));
        }
    }//GEN-LAST:event_txtCodUsrFocusLost

    private void txtCodUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodUsrActionPerformed
        boolean blnEncontro = false;
        Librerias.ZafConsulta.ZafConsulta objFndUsr = getFndUsr(txtCodUsr.getText(), 0);
        if(txtCodUsr.getText().equals(""))
           objFndUsr.show();
        else
           if(!objFndUsr.buscar("tx_usr = '" + txtCodUsr.getText() + "'" ))
               objFndUsr.show();
            else
               blnEncontro = true;        

        if(objFndUsr.acepto()|| blnEncontro ){
            txtCodUsr.setText(objFndUsr.GetCamSel(1));
            txtNomUsr.setText(objFndUsr.GetCamSel(2));
        }        
    }//GEN-LAST:event_txtCodUsrActionPerformed

    private void butFndUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFndUsrActionPerformed
        // Pantalla de consulta para buscar usuarios.
        Librerias.ZafConsulta.ZafConsulta objFndUsr = getFndUsr("", 0);
        objFndUsr.show();
        if(objFndUsr.acepto()){
            txtCodUsr.setText(objFndUsr.GetCamSel(1));
            txtNomUsr.setText(objFndUsr.GetCamSel(2));
        }
    }//GEN-LAST:event_butFndUsrActionPerformed
    
    private Librerias.ZafConsulta.ZafConsulta getFndUsr(String strTexBus, int intCamBus){
        Librerias.ZafConsulta.ZafConsulta  objFnd = 
         new Librerias.ZafConsulta.ZafConsulta( javax.swing.JOptionPane.getFrameForComponent(this) ,
           "Usuario, Nombre","tx_usr, tx_nom",
                "select tx_usr,tx_nom from tbm_usr", strTexBus, 
                 objZafParSis.getStringConexion(), 
                 objZafParSis.getUsuarioBaseDatos(), 
                 objZafParSis.getClaveBaseDatos()
             );
        objFnd.setTitle("Listado Usuarios del Sistema");
        objFnd.setSelectedCamBus(intCamBus);
        return objFnd;
   }
    
    public void registraEditoresCol(){
         //Editores Respectivos para cada columna
         tblDetalle.getColumnModel().getColumn(INT_TBL_CODREG).setCellEditor(
                 objEditorCodReg    
         );
//         tblFacDet.getColumnModel().getColumn(INT_TBL_CODBOD).setCellEditor(
//                  editColBod
//         );
////         tblFacDet.getColumnModel().getColumn(INT_TBL_CODBOD).setCellEditor(
////                 new Librerias.ZafUtil.EditorBod(INT_TBL_CODBOD,INT_TBL_CANMOV, INT_TBL_CODITM, INT_TBL_STKBOD, tblFacDet , objZafParSis, jfrThis)         
////         );
//
//         tblFacDet.getColumnModel().getColumn(INT_TBL_CANMOV).setCellEditor(
//                new EditorCan() // Editor para manejar la celda de cantidades
//             );
//
//         tblFacDet.getColumnModel().getColumn(INT_TBL_PREVEN ).setCellEditor(
//            new Librerias.ZafUtil.EditorDouble2(INT_TBL_PREVEN , INT_TBL_PORDES, tblFacDet)
//         );
////         tblFacDet.getColumnModel().getColumn(INT_TBL_PREVEN ).setCellEditor(
////            new EditorDbl(INT_TBL_PREVEN , INT_TBL_PORDES, 6,  tblFacDet )
////         );
//         EditorDbl editorPorDes =  new EditorDbl(INT_TBL_PORDES , INT_TBL_BLNIVA, 2,  tblFacDet );
//         editorPorDes.setEditColNext(false);
//         tblFacDet.getColumnModel().getColumn(INT_TBL_PORDES).setCellEditor(
//            editorPorDes 
//         );
    }
    
    private void refrescaDatos(){
           java.sql.Connection conCon;
           try{
                                    
               if(rstDoc != null){
                   conCon =java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());

                   if (conCon!=null){
                         
                       txtCodUsr.setText(rstDoc.getString("tx_usr")+"");
                       txtNomUsr.setText(rstDoc.getString("tx_nom")+"");
                      /**    
                       * Ejecutando consulta
                       */
                      java.sql.Statement stmAutDoc = conCon.createStatement(); 

                      /* Ejecutando el Consulta */
                      java.sql.ResultSet rstAutDoc = stmAutDoc.executeQuery(                            
                                "SELECT doc.co_reg, regs.tx_descor, regs.tx_deslar, regs.tx_obs1, " +
                                "       doc.nd_par1, doc.nd_par2  " +
                                "FROM  tbm_autdoc as doc INNER JOIN tbm_regneg as regs" +
                                "      ON (doc.co_emp = regs.co_emp and doc.co_loc = regs.co_loc and doc.co_reg = regs.co_reg)  " +
                                " where " +
                                     " doc.co_emp = " + objZafParSis.getCodigoEmpresa() + " and " +
                                     " doc.co_loc = " + objZafParSis.getCodigoLocal()   + " and " +
                                     " doc.co_usr = " + rstDoc.getInt("co_usr")
                        );
                      ((javax.swing.table.DefaultTableModel)tblDetalle.getModel()).setRowCount(0);
                      for( int i = 0 ; rstAutDoc.next() ;  i++){
                        ((javax.swing.table.DefaultTableModel)tblDetalle.getModel()).addRow(new java.util.Vector());
                        tblDetalle.setValueAt( rstAutDoc.getInt("co_reg")+""    , i, INT_TBL_CODREG);                      
                        tblDetalle.setValueAt( rstAutDoc.getString("tx_descor")    , i, INT_TBL_NOMREG);                      
                        tblDetalle.setValueAt( rstAutDoc.getString("tx_deslar")    , i, INT_TBL_DESREG);
                        tblDetalle.setValueAt( rstAutDoc.getString("tx_obs1")      , i, INT_TBL_OBS);
                        tblDetalle.setValueAt( rstAutDoc.getString("nd_par1"), i, INT_TBL_PAR1);                      
                        tblDetalle.setValueAt( rstAutDoc.getString("nd_par2"), i, INT_TBL_PAR2);                      
                      }
                      if((((javax.swing.table.DefaultTableModel)tblDetalle.getModel()).getRowCount())==0)   {
                         ((javax.swing.table.DefaultTableModel)tblDetalle.getModel()).addRow(new java.util.Vector()); 
                      }
                     conCon.close();
                     conCon = null;
                   }   
               }
           }              
           catch(java.sql.SQLException Evt)
           {    
                objUtil.mostrarMsgErr_F1(jfrThis, Evt);
           }
           catch(Exception Evt)
           {    
                objUtil.mostrarMsgErr_F1(jfrThis, Evt);
           }            

    }

    private class EditorCodReg extends Herramientas.ZafHer02.editorCodReg{
        EditorCodReg(){
          super( tblDetalle, INT_TBL_CODREG,  INT_TBL_OBS,  INT_TBL_NOMREG,  INT_TBL_DESREG, INT_TBL_OBS, objZafParSis);                
        }
        
        public void posActionToDo() {
            /* 
             * Aki poner el codigo que se 
             * debe ejecutar antes de grabar la edicion
             */
        }
        
        public void preActionToDo() {
            /* 
             * Aki poner el codigo que se 
             * debe ejecutar antes de grabar la edicion
             */
        }
    }    
    
    public void ResizeTbl(){
         //Asignando tama√É¬±o y definiendo ke no se pueda cambiar el tama√É¬±o 
         tblDetalle.getTableHeader().setReorderingAllowed(false);

         tblDetalle.getColumnModel().getColumn(INT_TBL_LINEA).setPreferredWidth(20);
         
         tblDetalle.getColumnModel().getColumn(INT_TBL_CODREG).setPreferredWidth(50);

         tblDetalle.getColumnModel().getColumn(INT_TBL_BUTFND).setPreferredWidth(10);

         tblDetalle.getColumnModel().getColumn(INT_TBL_NOMREG).setPreferredWidth(145);

         objPopUpMenu.ocultaCol(INT_TBL_OBS);
         
         objPopUpMenu.ocultaCol(INT_TBL_DESREG);
  
         tblDetalle.getColumnModel().getColumn(INT_TBL_PAR1).setPreferredWidth(50);

         tblDetalle.getColumnModel().getColumn(INT_TBL_PAR2).setPreferredWidth(50);
   }    
    
    //Funcion que limpia los componentes de esta ventana
    private void limpiarTextos(java.awt.Container conComponentes) 
    {
	java.awt.Component[] comps = conComponentes.getComponents();
        for (int i = 0; i < comps.length; i++) 
        {       
                if ((comps[i] instanceof java.awt.Container) && !(comps[i] instanceof javax.swing.JToolBar)) 
                {
                	limpiarTextos((java.awt.Container)comps[i]);
		}                 
                if (comps[i] instanceof javax.swing.text.JTextComponent) 
                {
                    javax.swing.text.JTextComponent txtpru = (javax.swing.text.JTextComponent)comps[i];
                    txtpru.setText("");
                }
//                    if (comps[i] instanceof javax.swing.JList ||
//                        comps[i] instanceof javax.swing.JButton ||
//                        comps[i] instanceof javax.swing.JTable ||
//                        comps[i] instanceof javax.swing.JRadioButton ||
//                        comps[i] instanceof javax.swing.JCheckBox ||
//                        comps[i] instanceof javax.swing.JComboBox ||
//                        comps[i] instanceof javax.swing.JSpinner)
                if (comps[i] instanceof javax.swing.JTable )
                {
                    javax.swing.JTable tblDat = (javax.swing.JTable)comps[i];
                    ((javax.swing.table.DefaultTableModel)tblDat.getModel()).setRowCount(0);
                    ((javax.swing.table.DefaultTableModel)tblDat.getModel()).addRow(new java.util.Vector());
                }
                
         }
    }  
    
    public class ButFndTbl extends Librerias.ZafTableColBut.ZafTableColBut{
        
        public ButFndTbl(javax.swing.JTable tbl, int intIdx){
            super(tbl,intIdx);
        }
        public void butCLick() {

            Librerias.ZafConsulta.ZafConsulta objConReg =  objEditorCodReg.getListaItm("");
            objConReg.show();
            int intRow = tblDetalle.getSelectedRow();
            if(objConReg.acepto() && intRow != -1){
                tblDetalle.setValueAt(objConReg.GetCamSel(1) , intRow, INT_TBL_CODREG);
                tblDetalle.setValueAt(objConReg.GetCamSel(2) , intRow, INT_TBL_NOMREG);
                tblDetalle.setValueAt(objConReg.GetCamSel(3) , intRow, INT_TBL_DESREG);
                tblDetalle.setValueAt(objConReg.GetCamSel(4) , intRow, INT_TBL_OBS);
            }
            
        }        
    
    }    
        
    /*
     * Obtiene el Codigo de usuario 
     * del nombre de usuario pasado como parametro
     */
    public int getCoUsr(String strCoUsr){
           /*
            * Obteniendo la unidad del producto
            */
           int intCoUsr = 0;
           try{
                    java.sql.Connection conUni=java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());
                    if (conUni!=null){
                        java.sql.Statement stmUni = conUni.createStatement();

                        String sSQL= "SELECT co_usr " +
                                        " from tbm_usr " +
                                        " where tx_usr = '" + strCoUsr +  "' " ;

                        java.sql.ResultSet rstUni = stmUni.executeQuery(sSQL);
                        if(rstUni.next())
                            intCoUsr = rstUni.getInt("co_usr");

                        rstUni.close();
                        stmUni.close();
                        conUni.close();
                        rstUni = null;
                        stmUni = null;
                        conUni = null;
                    }
           }
           catch(java.sql.SQLException Evt)
           {
                    System.out.println(Evt);
                    return intCoUsr;
            }
            catch(Exception Evt)
            {
                    System.out.println(Evt);
                    return intCoUsr;
            }                  

           return intCoUsr;
    }  
    
    class MiTBar extends Librerias.ZafToolBar.ZafToolBar{
        //Filtro de la consulta actual.
        String strFiltro="";
	public MiTBar(javax.swing.JInternalFrame jfrThis){
            super(jfrThis , objZafParSis);
        }

        public boolean aceptar() {
            return true;
        }

        public boolean afterAceptar() {
            return true;
        }

        public boolean afterAnular() {
            return true;
        }

        public boolean afterCancelar() {
            return true;
        }

        public boolean afterConsultar() {
            return true;
        }

        public boolean afterEliminar() {
            return true;
        }

        public boolean afterImprimir() {
            return true;
        }

        public boolean afterInsertar() {
            return true;
        }

        public boolean afterModificar() {
            return true;
        }

        public boolean afterVistaPreliminar() {
            return true;
        }

        public boolean anular() {
            return true;
        }

        public boolean cancelar() {
            return true;
        }

        public void clickAceptar() {
        }

        public void clickAnular() {
        }

        public void clickCancelar() {
                limpiarTextos(jfrThis.getContentPane());
                cierraConnections();                
        }

        public void clickConsultar() {
            
            /**
             * Consultando segun parametros ingresados 
             * en pantalla.
             */ 
            
            
        }

            public void clickInicio() {
                try{
                    
//                    if(blnCambios){
//                        switch (Mensaje()){
//                            case 0://Guardar los cambios
//                                if(modificar()){
//                                    rstDocCab.first();
//                                    refrescaDatos();
//                                }
//                                break;
//                            case 1://No guardar los cambios
//                                rstDocCab.first();
//                                refrescaDatos();
//                                break;
//                            default:
//                                //No hace nada se mantiene como estaba
//                        }
//                        
//                    }else{
                            rstDoc.first();
                            refrescaDatos();
//                    }
                }
                   catch(java.sql.SQLException Evt)
                   {
                         objUtil.mostrarMsgErr_F1(jfrThis, Evt);
                    }

                    catch(Exception Evt)
                    {
                         objUtil.mostrarMsgErr_F1(jfrThis, Evt);
                    }                                       
                
            }
            public void clickAnterior() {
                try{
                    if(!rstDoc.isFirst()){
//                            if(blnCambios){
//                                switch (Mensaje()){
//                                    case 0://Guardar los cambios
//                                        int intRowActual = rstDocCab.getRow();
//                                        if(modificar()){
//                                            rstDocCab.absolute(intRowActual);
//                                            rstDocCab.previous();
//                                            refrescaDatos();
//                                        }
//                                        break;
//                                    case 1://No guardar los cambios
//                                        rstDocCab.previous();
//                                        refrescaDatos();
//                                        break;
//                                    default:
//                                        //No hace nada se mantiene como estaba
//                                }
//
//                            }else{
                                    rstDoc.previous();
                                    refrescaDatos();
//                            }
                    }
                    
                }
                catch(java.sql.SQLException Evt)
                {
                    objUtil.mostrarMsgErr_F1(jfrThis, Evt);
                }

                catch(Exception Evt)
                {
                    objUtil.mostrarMsgErr_F1(jfrThis, Evt);
                 }                       
            }
            public void clickSiguiente() {
                try{
                    if(!rstDoc.isLast()){
//                            if(blnCambios){
//                                switch (Mensaje()){
//                                    case 0://Guardar los cambios
//                                        int intRowActual = rstDocCab.getRow(), intCo_Cot = Integer.parseInt(txtDoc.getText());
//                                        if(modificar()){
//                                            rstDocCab.absolute(intRowActual);
//                                            refrescaDatos();
//                                            if(intCo_Cot== Integer.parseInt(txtDoc.getText()))
//                                                rstDocCab.next();
//                                            refrescaDatos();
//                                        }
//                                        break;
//                                    case 1://No guardar los cambios
//                                        rstDocCab.next();
//                                        refrescaDatos();
//                                        break;
//                                    default:
//                                        //No hace nada se mantiene como estaba
//                                }
//
//                            }else{
                                    rstDoc.next();
                                    refrescaDatos();
//                            }
                     }
                }
                catch(java.sql.SQLException Evt)
                {
                      objUtil.mostrarMsgErr_F1(jfrThis, Evt); 
                }

                catch(Exception Evt)
                {
                      objUtil.mostrarMsgErr_F1(jfrThis, Evt); 
                 }                                       
            }
            public void clickFin() {
                try{
//                    if(blnCambios){
//                        switch (Mensaje()){
//                            case 0://Guardar los cambios
//                                if(modificar()){
//                                    rstDocCab.last();
//                                    refrescaDatos();
//                                }
//                                break;
//                            case 1://No guardar los cambios
//                                rstDocCab.last();
//                                refrescaDatos();
//                                break;
//                            default:
//                                //No hace nada se mantiene como estaba
//                        }
//                        
//                    }else{
                            rstDoc.last();
                            refrescaDatos();
//                    }
                 }
                   catch(java.sql.SQLException Evt)
                   {
                            objUtil.mostrarMsgErr_F1(jfrThis, Evt); 
                    }

                    catch(Exception Evt)
                    {
                            objUtil.mostrarMsgErr_F1(jfrThis, Evt); 
                    }                                       
            }        
        
        public void clickEliminar() {
        }


        public void clickImprimir() {
        }


        public void clickInsertar() {
        }

        public void clickModificar() {
        }


        public void clickVisPreliminar() {
        }

        public boolean consultar() {
           try{
               
                if(conDoc == null)
                        conDoc=java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());

                if(conDoc.isClosed())
                        conDoc=java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());                            
               
               if (conDoc!=null){

                  /**    
                   * Ejecutando consulta
                   */
                  stmDoc = conDoc.createStatement(java.sql.ResultSet.TYPE_SCROLL_SENSITIVE, java.sql.ResultSet.CONCUR_READ_ONLY );
                  String strCon =  "SELECT co_usr, tx_usr, tx_nom " +
                                   "FROM  tbm_usr" ;
                  
                  /* Ejecutando el Consulta */
                  if(!(txtCodUsr.getText().trim().equals(""))){
                        strCon = strCon   + 
                                 " where co_usr = " + getCoUsr( txtCodUsr.getText());
                  }
                  rstDoc = stmDoc.executeQuery(strCon);    
                  
                  if(rstDoc.next()){
                      rstDoc.last();
                      //setMenSis("Se encontraron " + rstDocCab.getRow() + " registros");
                      refrescaDatos();
                  }
                  else{
                      setMenSis("0 Registros encontrados");
                      limpiarTextos(jfrThis.getContentPane());
                      cierraConnections();                                    
                      return false;
                  }                  
               }   
           }              
           catch(java.sql.SQLException Evt)
           {    
                objUtil.mostrarMsgErr_F1(jfrThis, Evt);
                return false;
           }
           catch(Exception Evt)
           {    
                objUtil.mostrarMsgErr_F1(jfrThis, Evt);
                return false;
            }            
            return true;
        }
        
        private void cierraConnections(){
                try{
                    if(conDoc!=null)
                        if(!conDoc.isClosed()){
                            conDoc.close();
                            conDoc = null;
                            rstDoc = null;
                            stmDoc = null;
                        }
                }

                catch(java.sql.SQLException Evt)
               {
                      objUtil.mostrarMsgErr_F1(jfrThis, Evt);
                }

                catch(Exception Evt)
                {
                      objUtil.mostrarMsgErr_F1(jfrThis, Evt);
                }                 

        }   

        public boolean eliminar() {
            return true;
        }

        public boolean imprimir() {
            return true;
        }

        public boolean insertar() {
            
//                          if(!validaCampos())
//                              return false;
           java.sql.Connection conIns;
           try{
               conIns =java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());

               if (conIns!=null){

                  conIns.setAutoCommit(false);
                  /**    
                   * borrando los permiso actuales para
                   * poner los nuevos que aparecen aqui. 
                   */
                  java.sql.PreparedStatement pstDelAutDoc = conIns.prepareStatement(
                            "DELETE FROM  tbm_autdoc where " +
                                 " co_emp = " + objZafParSis.getCodigoEmpresa() + " and " +
                                 " co_loc = " + objZafParSis.getCodigoLocal()   + " and " +
                                 " co_usr = " + getCoUsr( txtCodUsr.getText())
                    ); 
                  /* Ejecutando el insert */
                  pstDelAutDoc.executeUpdate();
                  for(int i=0; i<tblDetalle.getRowCount();i++){
                      String strSqlIns =  "INSERT INTO  tbm_autdoc" +
                                     "(co_emp, co_loc, co_usr , co_reg, " + //CAMPOS PrimayKey
                                     " nd_par1, nd_par2 " +//<==Campos que aparecen en la parte superior del 1er Tab
                                     "  )" +
                                     "VALUES ( "  +
                                 objZafParSis.getCodigoEmpresa() + ", " +
                                 objZafParSis.getCodigoLocal()   + ", " + 
                                 getCoUsr(txtCodUsr.getText())   + ", " + 
                                 tblDetalle.getValueAt(i,INT_TBL_CODREG)       + ", " +
                                 ((tblDetalle.getValueAt(i, INT_TBL_PAR1 )==null)?"null":tblDetalle.getValueAt(i, INT_TBL_PAR1 ).toString() ) + ", " +
                                 ((tblDetalle.getValueAt(i, INT_TBL_PAR2 )==null)?"null":tblDetalle.getValueAt(i, INT_TBL_PAR2 ).toString() ) + " " +
                                 " )";
                        java.sql.PreparedStatement pstDetAutDoc = conIns.prepareStatement(
                            strSqlIns
                         ); 

                      /* Ejecutando el insert */
                      pstDetAutDoc.executeUpdate();

                    }

                 conIns.commit();
                 conIns.setAutoCommit(true);
                 conIns.close();
                 conIns = null;
               }   
           }              
           catch(java.sql.SQLException Evt)
           {    
                objUtil.mostrarMsgErr_F1(jfrThis, Evt);
                return false;
           }
           catch(Exception Evt)
           {    
                objUtil.mostrarMsgErr_F1(jfrThis, Evt);
                return false;
            }            
            
            
            return true;
        }

        public boolean modificar() {
            return insertar();
        }

        public boolean vistaPreliminar() {
            return true;
        }
        
        /**
         * Obtiene los parametros que 
         * el usuario ingreso  en pantalla 
         * para realizar 
         * la consulta
         */
        private String getParCon(){
            String strParCon = "";
                //Agregando filtro por codigo de Tipo de Documento
//                if(!txtCod.getText().equals(""))
//                    strParCon = strParCon + " and DocCab.co_reg LIKE '" + txtCod.getText()+ "'";
//                
//                //Agregando filtro por Numero de Documento
//                if(!txtDesCor.getText().equals(""))
//                    strParCon = strParCon + " and DocCab.tx_descor LIKE '" + txtDesCor.getText()+ "'";
//
//                if(!txtDesLar.getText().equals(""))
//                    strParCon = strParCon + " and DocCab.tx_deslar LIKE '" + txtDesLar.getText()+ "'";
//
//                if(!txtCodMnu.getText().equals(""))
//                    strParCon = strParCon + " and DocCab.co_mnu LIKE '" + txtCodMnu.getText()+ "'";
//            
//                /**
//                 * Poner para que filtre por nombre del codigo de  menu
//                 */ 
//            
//                if(!txtFuncion.getText().equals(""))
//                    strParCon = strParCon + " and DocCab.tx_nomfun LIKE '" + txtFuncion.getText()+ "'";
//            
//                if(cboAutorizacion.getSelectedIndex()!=-1)
//                    strParCon = strParCon + " and DocCab.st_aut LIKE '" + cboAutorizacion.getSelectedItem()+ "'";
//            
//                if(!txtObservacion.getText().equals(""))
//                    strParCon = strParCon + " and DocCab.tx_obs1 LIKE '" + txtObservacion.getText()+ "'";
            
            return strParCon;
        }

        public boolean beforeAceptar() {
            return true;
        }
        
        public boolean beforeAnular() {
            return true;
        }
        
        public boolean beforeCancelar() {
            return true;
        }
        
        public boolean beforeConsultar() {
            return true;
        }
        
        public boolean beforeEliminar() {
            return true;
        }
        
        public boolean beforeImprimir() {
            return true;
        }
        
        public boolean beforeInsertar() {
            return true;
        }
        
        public boolean beforeModificar() {
            return true;
        }
        
        public boolean beforeVistaPreliminar() {
            return true;
        }
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butFndUsr;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JPanel panGeneral;
    private javax.swing.JPanel panNor;
    private javax.swing.JPanel panSur;
    private javax.swing.JPanel panSurNor;
    private javax.swing.JScrollPane spnDesPar;
    private javax.swing.JScrollPane spnDesReg;
    private javax.swing.JScrollPane spnTbl;
    private javax.swing.JTabbedPane tabPrincipal;
    private javax.swing.JTable tblDetalle;
    private javax.swing.JTextField txtCodUsr;
    private javax.swing.JTextArea txtDesPar;
    private javax.swing.JTextArea txtDesReg;
    private javax.swing.JTextField txtNomUsr;
    // End of variables declaration//GEN-END:variables
    
}
