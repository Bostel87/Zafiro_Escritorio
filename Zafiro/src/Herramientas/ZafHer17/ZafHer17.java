/*
 * ZafMae33.java
 *
 * Created on May 23, 2007, 8:51 AM
 */


package Herramientas.ZafHer17;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import javax.swing.SpinnerNumberModel;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import java.util.ArrayList;

/**
 *
 * @author  ilino
 */
public class ZafHer17 extends javax.swing.JInternalFrame {
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;
    private ZafTblBus objTblBus;
    javax.swing.JInternalFrame jfrThis;
    private MiToolBar objTooBar;
    private ZafTblCelRenChk objTblCelRenChk;
    private ZafTblCelEdiChk objTblCelEdiChk;    
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    final int intJspValMin=0001;
    final int intJspValMax=9999;
    final int intJspValIni=2007;
    final int intJspValInc=1;
    private String strSQL;
    private int intAniExi, intMesExi;
    private int intUltReg;
    private java.util.Date datFecAux;
    Vector vecCab, vecReg, vecDat, vecAux;
    ZafColNumerada objColNum;
    
    ArrayList arlRegValAniMes, arlDatValAniMes;
    ArrayList arlRegAuxMes, arlDatAuxMes;
    private char chrTipCie='M';
    private int intAniGlb;
    
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_MES=1;
    final int INT_TBL_DAT_CHK=2;
    
    final int INT_ARL_ANI=0;
    final int INT_ARL_MES=1;
    final int INT_ARL_TIP_CIE=2;
    
    final int INT_VEC_COD_CTA=0;
    
    /** Creates new form ZafMae34 */
    public ZafHer17(ZafParSis obj) {
        try{
            initComponents();
            //Inicializar objetos.
            this.objParSis=obj;
            
            objParSis=(ZafParSis)obj.clone();
            jspAni.setModel(new SpinnerNumberModel(intJspValIni, intJspValMin, intJspValMax, intJspValInc));

            if (!configurarFrm())
                exitForm();
            
            jfrThis=this;
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        panTit = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        panCen = new javax.swing.JPanel();
        panCab = new javax.swing.JPanel();
        lblAni = new javax.swing.JLabel();
        jspAni = new javax.swing.JSpinner();
        panDet = new javax.swing.JPanel();
        spnDet = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panTooBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        panTit.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("lblTit");
        panTit.add(lblTit, java.awt.BorderLayout.CENTER);

        panFrm.add(panTit, java.awt.BorderLayout.NORTH);

        panCen.setLayout(new java.awt.BorderLayout());

        panCab.setPreferredSize(new java.awt.Dimension(0, 50));
        panCab.setLayout(null);

        lblAni.setText("Año:");
        panCab.add(lblAni);
        lblAni.setBounds(20, 20, 42, 22);
        panCab.add(jspAni);
        jspAni.setBounds(60, 20, 80, 22);

        panCen.add(panCab, java.awt.BorderLayout.NORTH);

        panDet.setPreferredSize(new java.awt.Dimension(452, 380));
        panDet.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDet.setViewportView(tblDat);

        panDet.add(spnDet, java.awt.BorderLayout.CENTER);

        panCen.add(panDet, java.awt.BorderLayout.CENTER);

        panTooBar.setLayout(new java.awt.BorderLayout());
        panCen.add(panTooBar, java.awt.BorderLayout.SOUTH);

        panFrm.add(panCen, java.awt.BorderLayout.CENTER);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-550)/2, (screenSize.height-400)/2, 550, 400);
    }// </editor-fold>//GEN-END:initComponents

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        // TODO add your handling code here:
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="�Est� seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION){
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void exitForm(){
        dispose();
    }
    
    
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner jspAni;
    private javax.swing.JLabel lblAni;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panCen;
    private javax.swing.JPanel panDet;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panTit;
    private javax.swing.JPanel panTooBar;
    private javax.swing.JScrollPane spnDet;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables

    private boolean configurarFrm(){
        boolean blnRes=true;
        objUti=new ZafUtil();
        lblTit.setText(objParSis.getNombreMenu() + "v0.2");
        this.setTitle(objParSis.getNombreMenu());
        
        
        objTooBar=new MiToolBar(this);
        panTooBar.add(objTooBar);
        vecCab=new Vector(5);
        vecDat=new Vector();
        vecCab.clear();
        
        vecCab.add(INT_TBL_DAT_LIN, "");
        vecCab.add(INT_TBL_DAT_MES, "MES");
        vecCab.add(INT_TBL_DAT_CHK, "CIERRE");
                            
        objTblMod=new ZafTblMod();
        objTblMod.setHeader(vecCab);
        tblDat.setModel(objTblMod);        
                
        //Configurar JTable: Establecer tipo de selecci�n.
        tblDat.setRowSelectionAllowed(true);
        tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        //Configurar JTable: Establecer el men� de contexto.
        objTblPopMnu=new ZafTblPopMnu(tblDat);
        objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
        tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
        //Tama�o de las celdas
        tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
        tcmAux.getColumn(INT_TBL_DAT_MES).setPreferredWidth(100);
        tcmAux.getColumn(INT_TBL_DAT_CHK).setPreferredWidth(50);

        objTblCelRenChk=new ZafTblCelRenChk();
        tcmAux.getColumn(INT_TBL_DAT_CHK).setCellRenderer(objTblCelRenChk);
        objTblCelRenChk=null;

        arlDatAuxMes=new ArrayList();
        //Configurar JTable: Editor de celdas.
        objTblCelEdiChk=new ZafTblCelEdiChk(tblDat);
        tcmAux.getColumn(INT_TBL_DAT_CHK).setCellEditor(objTblCelEdiChk);
        objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    arlDatAuxMes.clear();
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {                    
                    for(int j=0; j<objTblMod.getRowCountTrue(); j++){
                        if(objTblMod.isChecked(j, INT_TBL_DAT_CHK)){
                            arlRegAuxMes=new ArrayList();
                            arlRegAuxMes.add(INT_VEC_COD_CTA, ""+ (j+1));
                            arlDatAuxMes.add(arlRegAuxMes);
                        }
                    }
                    System.out.println("LOS MESES CHEKADOS SON : "  + arlDatAuxMes.toString());
                }
        });
        
        //Configurar JTable: Establecer columnas editables.
        vecAux=new Vector();
        vecAux.add("" + INT_TBL_DAT_CHK);
        objTblMod.setColumnasEditables(vecAux);
        objTblBus= new ZafTblBus(tblDat);
        vecAux=null;
        arlDatValAniMes= new ArrayList();
        arlDatValAniMes.clear();
        objTooBar.setVisibleEliminar(false);
        objTooBar.setVisibleAnular(false);
        objTooBar.setVisibleVistaPreliminar(false);
        objTooBar.setVisibleImprimir(false);
        return blnRes;
    }
    
    
    private void mostrarMsgInf(String strMsg){
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }    
    
    public class MiToolBar extends ZafToolBar{

        public MiToolBar(javax.swing.JInternalFrame jfrThis){
            super(jfrThis, objParSis);
        }        
        
        
        public boolean aceptar() {
            boolean blnRes=true;
            return blnRes;
        }
        
        public boolean afterAceptar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterAnular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterCancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterConsultar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterEliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterImprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterInsertar() {
            boolean blnRes=true;
            jspAni.setEnabled(true);
            intUltReg=0;
            objTooBar.setEstado('w');
            return blnRes;            
        }
        
        public boolean afterModificar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterVistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean anular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeAceptar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeAnular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeCancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeConsultar() {
            arlDatValAniMes.clear();
            existeAniMesCerrar();
            if( arlDatValAniMes.size()<=0 ){
                mostrarMsgInf("<HTML>El a�o <FONT COLOR=\"blue\"> " + jspAni.getValue() + "</FONT> no ha sido cerrado <BR>Seleccione otro a�o y vuelva a intentarlo</HTML>");
                return false;
            }
            return true;
        }
        
        public boolean beforeEliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeImprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeInsertar() {

            int intJspAni=intJspAni=Integer.parseInt(""+jspAni.getValue());
            if(intJspAni<2006){
                mostrarMsgInf("<HTML>No puede insertar a�os que sean menores al 2006</HTML>");
                return false;
            }            
            
            
            int m=0;
            arlDatValAniMes.clear();
            existeAniMesCerrar();
            int intAniLoc=0;
            int intMesLoc=0;
            int intMesTbl=0;
            String strTipCieLoc="";
            
            for(int k=0;k<objTblMod.getRowCountTrue();k++){
                if(objTblMod.isChecked(k, INT_TBL_DAT_CHK)){
                    m++;
                }
            }
            if(m==0){
                mostrarMsgInf("<HTML>Seleccione por lo menos un mes y vuelva a intentarlo.</HTML>");
                jspAni.requestFocus();
                return false;                
            }
            
            for( int i=0; i<arlDatValAniMes.size(); i++ ){
                strTipCieLoc=objUti.getStringValueAt(arlDatValAniMes, i, INT_ARL_TIP_CIE);
                if( (strTipCieLoc.toString().equals("M")) ){
                    intAniLoc=Integer.parseInt(objUti.getStringValueAt(arlDatValAniMes, i, INT_ARL_ANI));
                    intAniGlb=intAniLoc;
                    intMesLoc=Integer.parseInt(objUti.getStringValueAt(arlDatValAniMes, i, INT_ARL_MES));
                                                                               
                    for (int j=0; j<arlDatAuxMes.size(); j++){
                        if( (intAniLoc==Integer.parseInt("" + jspAni.getValue()) )  ){
                            intMesTbl=Integer.parseInt(objUti.getStringValueAt(arlDatAuxMes, j, INT_VEC_COD_CTA));
                            if((intMesLoc==intMesTbl)) {
                                mostrarMsgInf("<HTML>El mes <FONT COLOR=\"blue\"> " + intMesLoc + "</FONT> tiene cierre mensual<BR>No se puede cerrar un mes q ya fue cerrado</HTML>");
                                jspAni.requestFocus();
                                return false;
                            }
                            mostrarMsgInf("<HTML>El a�o <FONT COLOR=\"blue\"> " + jspAni.getValue() + "</FONT> ya fue ingresado.<BR>Si desea realizar alg�n cierre/apertura de mes, la opci�n correcta es MODIFICAR </HTML>");
                            return false;
                        }
                    }
                }
                else{
                    mostrarMsgInf("<HTML>El a�o <FONT COLOR=\"blue\"> " + jspAni.getValue() + "</FONT> tiene cierre anual, por tanto,<BR>no es necesario realizar el cierre mensual.</HTML>");
                    jspAni.requestFocus();
                    return false;
                }
            }
            return true;            
        }
        
        public boolean beforeModificar() {
            if ( ! isValAniMesTipCie())
                return false;
            return true;
        }
        
        public boolean beforeVistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean cancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public void clickAceptar() {
        }
        
        public void clickAnterior() {
        }
        
        public void clickAnular() {
        }
        
        public void clickCancelar() {
            intAniExi=0;
            intMesExi=0;
            jspAni.setModel(new SpinnerNumberModel(intJspValIni, intJspValMin, intJspValMax, intJspValInc));
            objTblMod.removeAllRows();
        }
        
        public void clickConsultar() {
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
        }
        
        public void clickEliminar() {
        }
        
        public void clickFin() {
        }
        
        public void clickImprimir() {
        }
        
        public void clickInicio() {
        }
        
        public void clickInsertar() {
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            cargarNombresMeses();
        }
        
        public void clickModificar() {
            cargarMesesConsultaModifica();
        }
        
        public void clickSiguiente() {
        }
        
        public void clickVisPreliminar() {
        }
        
        public boolean consultar() {
            if( ! (consultarReg()) )
                return false;            
            return true;
        }
        
        public boolean eliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean imprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean insertar() {
            boolean blnRes=true;
            jspAni.setEnabled(false);
            if( ! insertarReg())
                blnRes=false;
            return blnRes;            
        }
        
        public boolean modificar() {
            if (!actualizarReg())
                return false;            
            return true;
        }
        
        public boolean vistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        
        
        
        
        
        
        
    }
    
    
    private boolean cargarNombresMeses(){
        boolean blnRes=true;
        for(int i=1; i<=12; i++){
            vecReg=new Vector();
            vecReg.add(INT_TBL_DAT_LIN, "");
            switch(i){
                case 1:
                    vecReg.add(INT_TBL_DAT_MES, "ENERO");
                    break;
                case 2:
                    vecReg.add(INT_TBL_DAT_MES, "FEBRERO");
                    break;
                case 3:
                    vecReg.add(INT_TBL_DAT_MES, "MARZO");
                    break;
                case 4:
                    vecReg.add(INT_TBL_DAT_MES, "ABRIL");
                    break;
                case 5:
                    vecReg.add(INT_TBL_DAT_MES, "MAYO");
                    break;
                case 6:
                    vecReg.add(INT_TBL_DAT_MES, "JUNIO");
                    break;
                case 7:
                    vecReg.add(INT_TBL_DAT_MES, "JULIO");
                    break;
                case 8:
                    vecReg.add(INT_TBL_DAT_MES, "AGOSTO");
                    break;
                case 9:
                    vecReg.add(INT_TBL_DAT_MES, "SEPTIEMBRE");
                    break;
                case 10:
                    vecReg.add(INT_TBL_DAT_MES, "OCTUBRE");
                    break;
                case 11:
                    vecReg.add(INT_TBL_DAT_MES, "NOVIEMBRE");
                    break;
                case 12:
                    vecReg.add(INT_TBL_DAT_MES, "DICIEMBRE");
                    break;
            }
        vecReg.add(INT_TBL_DAT_CHK, "");
        vecDat.add(vecReg);
        }
        objTblMod.setData(vecDat);
        tblDat.setModel(objTblMod);
        vecDat.clear();
        return blnRes;
    }

    
    
    private void existeAniMesCerrar(){
        boolean blnRes=true;
        Connection conTmp;
        Statement stmTmp;
        ResultSet rstTmp;
        try{
            conTmp=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conTmp!=null){
                stmTmp=conTmp.createStatement();
                strSQL="";
                strSQL+="select a1.ne_ani, a2.ne_mes, a1.tx_tipCie from tbm_cabCieSis as a1 left outer join tbm_detCieSis as a2";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani";
                strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and a1.ne_ani=" + jspAni.getValue() + "";
                System.out.println("SI EXISTE A�O Y MES: " + strSQL);
                rstTmp=stmTmp.executeQuery(strSQL);
                while(rstTmp.next()){
                    arlRegValAniMes=new ArrayList();
                    arlRegValAniMes.add(INT_ARL_ANI, "" + rstTmp.getInt("ne_ani"));
                    arlRegValAniMes.add(INT_ARL_MES, "" + rstTmp.getInt("ne_mes"));
                    arlRegValAniMes.add(INT_ARL_TIP_CIE, "" + rstTmp.getString("tx_tipCie"));
                    arlDatValAniMes.add(arlRegValAniMes);
                }
                conTmp.close();
                conTmp=null;
                stmTmp.close();
                stmTmp=null;
                rstTmp.close();
                rstTmp=null;
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
    }
    
        
    private boolean insertarReg(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if(con!=null){
                if(insertaTbmCabCieSis()){
                    if(insertaTbmDetCieSis()){
                        if(insertaTbhCabCieSis()){
                            if(insertaTbhDetCieSis()){
                                if(insertaTbhSalCta()){
                                    con.commit();
                                }
                                else{
                                    blnRes=false;
                                    con.rollback();
                                }
                            }
                            else{
                                blnRes=false;
                                con.rollback();
                            }
                        }
                        else{
                            blnRes=false;
                            con.rollback();
                        }
                    }
                    else{
                        blnRes=false;
                        con.rollback();
                    }
                }
                else{
                    blnRes=false;
                    con.rollback();
                }
            }

        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    

    private boolean insertaTbmCabCieSis(){
        boolean blnRes=true;
        datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
       
        try{
            if(con!=null){
                stm=con.createStatement();
                System.out.println("ANIO CONTIENE:" + intAniGlb);
                if(intAniGlb==0){
                //SI INGRESA ES PORQ NO EXISTE ESE A�O CERRADO                    
                    strSQL="";
                    strSQL+="INSERT INTO tbm_cabciesis(";
                    strSQL+="co_emp, ne_ani, tx_tipcie, fe_ing, fe_ultmod, co_usring, co_usrmod";
                    strSQL+=")";
                    strSQL+=" VALUES ( " + objParSis.getCodigoEmpresa() + ",";
                    strSQL+=""  + jspAni.getValue() + ",";
                    strSQL+="'"  + chrTipCie + "',";
                    strSQL+="'"  + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "',";
                    strSQL+="'"  + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "',";
                    strSQL+=""  + objParSis.getCodigoUsuario() + ",";
                    strSQL+=""  + objParSis.getCodigoUsuario() + "";
                    strSQL+=")";
                }
                else{
                //SI INGRESA ES PORQ NO EXISTE ESE A�O CERRADO
                    strSQL="";
                    strSQL+="UPDATE tbm_cabciesis";
                    strSQL+=" SET fe_ultmod='" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "',";
                    strSQL+=" co_usrmod=" + objParSis.getCodigoUsuario() + "";
                    strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+=" AND ne_ani=" + jspAni.getValue() + "";
                }
                    System.out.println("SQL DE insertaTbmCabCieSis: " + strSQL);
                    stm.executeUpdate(strSQL);
                    stm.close();
                    stm=null;
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;        
    }
        
    
    private boolean insertaTbmDetCieSis(){
        boolean blnRes=true;
        int intFlag=0;
        datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
        try{
            if(con!=null){
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    if( objTblMod.isChecked(i, INT_TBL_DAT_CHK) ){
                        intFlag++;
                    }
                }
                if(intFlag!=0){
                    //SI INGRESA ES PORQ NO EXISTE ESE A�O CERRADO
                    for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                        if( objTblMod.isChecked(i, INT_TBL_DAT_CHK) ){
                            stm=con.createStatement();
                            strSQL="";
                            strSQL+="INSERT INTO tbm_detciesis(";
                            strSQL+="co_emp, ne_ani, ne_mes";
                            strSQL+=")";
                            strSQL+=" VALUES ( " + objParSis.getCodigoEmpresa() + ",";
                            strSQL+=""  + jspAni.getValue() + ",";
                            strSQL+=""  + (i+1) + "";
                            strSQL+=")";
                            System.out.println("SQL DE insertaTbmDetCieSis: " + strSQL);
                            stm.executeUpdate(strSQL);
                        }
                    }
                    intFlag=0;
                    stm.close();
                    stm=null;                    
                }

            }            
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);            
        }
        return blnRes;        
    }


    private boolean insertaTbhCabCieSis(){
        boolean blnRes=true;
        datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
        try{
            if(con!=null){
                strSQL="";
                strSQL+="SELECT MAX(a1.co_his)";
                strSQL+=" FROM tbh_cabciesis AS a1";
                intUltReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                intUltReg=Integer.parseInt(""+intUltReg);
                intUltReg++;                

                stm=con.createStatement();
                strSQL="";
                strSQL+="INSERT INTO tbh_cabciesis(";
                strSQL+="co_emp, ne_ani, co_his, tx_tipcie, fe_ing, fe_ultmod, co_usring, co_usrmod, fe_his, co_usrhis";
                strSQL+=")";
                strSQL+="(";
                strSQL+=" SELECT co_emp, ne_ani, " + intUltReg + " as co_his, tx_tipcie, fe_ing, fe_ultmod, co_usring, co_usrmod, ";
                strSQL+="'"  + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "' as fe_his,";
                strSQL+=""  + objParSis.getCodigoUsuario() + " as co_usrhis";
                strSQL+=" FROM tbm_cabciesis";
                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and ne_ani=" + jspAni.getValue() + "";
                strSQL+=" and tx_tipcie='M'";
                strSQL+=")";
                System.out.println("SQL DE insertaTbhCabCieSis: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);            
        }
        return blnRes;        
    }    
        
    
    private boolean insertaTbhDetCieSis(){
        boolean blnRes=true;
        datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="INSERT INTO tbh_detciesis(";
                strSQL+="co_emp, ne_ani, ne_mes, co_his";
                strSQL+=")";
                strSQL+="(";
                strSQL+=" SELECT co_emp, ne_ani, ne_mes," + intUltReg + " as co_his";
                strSQL+=" FROM tbm_detciesis";
                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and ne_ani=" + jspAni.getValue() + "";
                strSQL+=")";
                System.out.println("SQL DE insertaTbhDetCieSis: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);            
        }
        return blnRes;        
    }
        

    private boolean insertaTbhSalCta(){
        boolean blnRes=true;
        String strAux="";
        datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="INSERT INTO tbh_salcta(";
                strSQL+="co_emp, co_cta, co_per, co_his, nd_salcta, fe_his, co_usrhis, tx_tipCie";
                strSQL+=")";
                strSQL+="(";
                strSQL+=" SELECT co_emp, co_cta, co_per, " + intUltReg + " as co_his, nd_salcta, ";
                strSQL+="'" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "' as fe_his,";
                strSQL+=""  + objParSis.getCodigoUsuario() + " as co_usrhis,";
                strSQL+=" 'M'";
                strSQL+=" FROM tbm_salcta";
                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                
                if(arlDatAuxMes.size()>0){
                    strSQL+=" and co_per in (";
                    for(int j=(arlDatAuxMes.size()-1);j>=0;j--){
                        if(j==0){
                            strAux+="" + jspAni.getValue() + ""  + (  ( objUti.getIntValueAt(arlDatAuxMes, j, INT_VEC_COD_CTA) )<=9?"0"+(objUti.getIntValueAt(arlDatAuxMes, j, INT_VEC_COD_CTA)):""+objUti.getIntValueAt(arlDatAuxMes, j, INT_VEC_COD_CTA)    );
                        }
                        else{
                            strAux+="" + jspAni.getValue() + ""  + (  ( objUti.getIntValueAt(arlDatAuxMes, j, INT_VEC_COD_CTA) )<=9?"0"+(objUti.getIntValueAt(arlDatAuxMes, j, INT_VEC_COD_CTA)):""+objUti.getIntValueAt(arlDatAuxMes, j, INT_VEC_COD_CTA)    ) +  ",";
                        }
                    }
                strSQL+="" + strAux;
                strSQL+=" )";                    
                }
                
                
                

                strSQL+=")";
                System.out.println("SQL DE insertaTbhSalCta: " + strSQL);
                stm.executeUpdate(strSQL);                    
                stm.close();
                stm=null;
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);            
        }
        return blnRes;        
    }    
        
      private boolean consultarReg(){
        boolean blnRes=true;
        try{
            if( ! ( cargarMesesConsultaModifica() )  )
                blnRes=false;
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
          

      private boolean cargarMesesConsultaModifica(){
          boolean blnRes=true;
          String strCodCtaRst[]= new String[12];
          int intCodCtaRst=0;
          int intTamVec=0;
          String strMesDb="";          int intMesDb=0;          
          try{
              con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
              if(con!=null){
                  stm=con.createStatement();
                    if (objTooBar.getEstado()=='x' || objTooBar.getEstado()=='m'){
                        strSQL="";
                        strSQL+="select a1.ne_ani, a2.ne_mes";
                        strSQL+=" from tbm_cabCieSis as a1 left outer join tbm_detCieSis as a2";
                        strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani";
                        strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+=" and a1.ne_ani=" + jspAni.getValue() + "";
                        strSQL+=" order by a2.ne_mes";
                        rst=stm.executeQuery(strSQL);
                        for( int k=0; rst.next(); k++){
                            strCodCtaRst[k]=(rst.getString("ne_mes")==null?"":rst.getString("ne_mes"));
                            if( !  (strCodCtaRst[k].toString().equals(""))  )
                                intTamVec++;
                        }
                        
                        for(int i=1; i<=12; i++){
                            vecReg=new Vector();
                            vecReg.add(INT_TBL_DAT_LIN, "");
                            switch(i){
                                case 1:
                                    vecReg.add(INT_TBL_DAT_MES, "ENERO");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 2:
                                    vecReg.add(INT_TBL_DAT_MES, "FEBRERO");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 3:
                                    vecReg.add(INT_TBL_DAT_MES, "MARZO");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    for(int u=0; u<intTamVec;u++){
                                        if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                            vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                        }
                                    }
                                    break;
                                case 4:
                                    vecReg.add(INT_TBL_DAT_MES, "ABRIL");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 5:
                                    vecReg.add(INT_TBL_DAT_MES, "MAYO");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 6:
                                    vecReg.add(INT_TBL_DAT_MES, "JUNIO");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 7:
                                    vecReg.add(INT_TBL_DAT_MES, "JULIO");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 8:
                                    vecReg.add(INT_TBL_DAT_MES, "AGOSTO");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 9:
                                    vecReg.add(INT_TBL_DAT_MES, "SEPTIEMBRE");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 10:
                                    vecReg.add(INT_TBL_DAT_MES, "OCTUBRE");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 11:
                                    vecReg.add(INT_TBL_DAT_MES, "NOVIEMBRE");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 12:
                                    vecReg.add(INT_TBL_DAT_MES, "DICIEMBRE");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                            }
                        vecDat.add(vecReg);
                        }
                    }
                    else{
                        System.out.println("INGRESA POR CONSULTAR");
                        strSQL="";
                        strSQL+="select a2.ne_ani, a2.ne_mes";
                        strSQL+=" from tbm_cabCieSis as a1 left outer join tbm_detCieSis as a2";
                        strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani";
                        strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+=" and a1.ne_ani=" + jspAni.getValue() + "";
                        strSQL+=" order by a2.ne_mes";
                        rst=stm.executeQuery(strSQL);
                        while(rst.next()){
                            strMesDb=(rst.getString("ne_mes")==null?"":rst.getString("ne_mes"));
                            if( ! (strMesDb.equals(""))  ){
                                vecReg=new Vector();
                                vecReg.add(INT_TBL_DAT_LIN, "");
                                intMesDb=Integer.parseInt(strMesDb);
                                switch(intMesDb){
                                    case 1:
                                        vecReg.add(INT_TBL_DAT_MES, "ENERO");
                                        break;
                                    case 2:
                                        vecReg.add(INT_TBL_DAT_MES, "FEBRERO");
                                        break;
                                    case 3:
                                        vecReg.add(INT_TBL_DAT_MES, "MARZO");
                                        break;
                                    case 4:
                                        vecReg.add(INT_TBL_DAT_MES, "ABRIL");
                                        break;
                                    case 5:
                                        vecReg.add(INT_TBL_DAT_MES, "MAYO");
                                        break;
                                    case 6:
                                        vecReg.add(INT_TBL_DAT_MES, "JUNIO");
                                        break;
                                    case 7:
                                        vecReg.add(INT_TBL_DAT_MES, "JULIO");
                                        break;
                                    case 8:
                                        vecReg.add(INT_TBL_DAT_MES, "AGOSTO");
                                        break;
                                    case 9:
                                        vecReg.add(INT_TBL_DAT_MES, "SEPTIEMBRE");
                                        break;
                                    case 10:
                                        vecReg.add(INT_TBL_DAT_MES, "OCTUBRE");
                                        break;
                                    case 11:
                                        vecReg.add(INT_TBL_DAT_MES, "NOVIEMBRE");
                                        break;
                                    case 12:
                                        vecReg.add(INT_TBL_DAT_MES, "DICIEMBRE");
                                        break;
                                }
                                vecReg.add(INT_TBL_DAT_CHK, "");
                                if( ! (strMesDb.toString().equals("")) )
                                    vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                vecDat.add(vecReg);
                            }
                            else{
                                for(int i=1; i<=12; i++){
                                    vecReg=new Vector();
                                    vecReg.add(INT_TBL_DAT_LIN, "");                                    
                                    switch(i){
                                        case 1:
                                            vecReg.add(INT_TBL_DAT_MES, "ENERO");
                                            break;
                                        case 2:
                                            vecReg.add(INT_TBL_DAT_MES, "FEBRERO");
                                            break;
                                        case 3:
                                            vecReg.add(INT_TBL_DAT_MES, "MARZO");
                                            break;
                                        case 4:
                                            vecReg.add(INT_TBL_DAT_MES, "ABRIL");
                                            break;
                                        case 5:
                                            vecReg.add(INT_TBL_DAT_MES, "MAYO");
                                            break;
                                        case 6:
                                            vecReg.add(INT_TBL_DAT_MES, "JUNIO");
                                            break;
                                        case 7:
                                            vecReg.add(INT_TBL_DAT_MES, "JULIO");
                                            break;
                                        case 8:
                                            vecReg.add(INT_TBL_DAT_MES, "AGOSTO");
                                            break;
                                        case 9:
                                            vecReg.add(INT_TBL_DAT_MES, "SEPTIEMBRE");
                                            break;
                                        case 10:
                                            vecReg.add(INT_TBL_DAT_MES, "OCTUBRE");
                                            break;
                                        case 11:
                                            vecReg.add(INT_TBL_DAT_MES, "NOVIEMBRE");
                                            break;
                                        case 12:
                                            vecReg.add(INT_TBL_DAT_MES, "DICIEMBRE");
                                            break;
                                    }
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if( ! (strMesDb.toString().equals("")) )
                                        vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                    vecDat.add(vecReg);
                                }
                            }
                        }
                    }
                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
              }              
          }
          catch(java.sql.SQLException e){
              blnRes=false;
              objUti.mostrarMsgErr_F1(this, e);
          }
       return blnRes;   
      }
            
      private boolean actualizarReg(){
          boolean blnRes=true;
          intUltReg=0;
          try{
              con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
              if(con!=null){
                  if(insertaTbhCabCieSis()){
                      if(insertaTbhDetCieSis()){
                          if(insertaTbhSalCta()){
                              if(modificaTbmCabCieSis()){
                                  if(deleteTbmDetCieSis()){
                                      if(insertaTbmDetCieSis()){
                                          con.commit();
                                      }
                                      else{
                                          blnRes=false;
                                          con.rollback();
                                      }
                                  }
                                  else{
                                      blnRes=false;
                                      con.rollback();
                                  }
                              }
                              else{
                                  blnRes=false;
                                  con.rollback();
                              }
                          }
                          else{
                              blnRes=false;
                              con.rollback();
                          }
                      }
                      else{
                          blnRes=false;
                          con.rollback();
                      }
                  }
                  else{
                      blnRes=false;
                      con.rollback();
                  }
                  con.close();
                  con=null;
              }
          }
          catch(java.sql.SQLException e){
              blnRes=false;
              objUti.mostrarMsgErr_F1(this, e);
          }
          catch(Exception e){
              blnRes=false;
              objUti.mostrarMsgErr_F1(this, e);
          }
          return blnRes;
      }
            
 
      private boolean isValAniMesTipCie(){
            arlDatValAniMes.clear();
            existeAniMesCerrar();
//            int u=0;
//            
//            for(int l=0;l<objTblMod.getRowCountTrue();l++){
//                if(objTblMod.isChecked(l, INT_TBL_DAT_CHK)){
//                    u++;
//                }
//            }
//            if(u==0){
//                mostrarMsgInf("<HTML>Debe seleccionar alg�n mes a cerrar<BR>Seleccione alg�n mes y vuelva a intentarlo<BR>O reaperture el a�o si desea que ning�n mes este cerrado</HTML>");
//                return false;
//            }
            
            if( arlDatValAniMes.size()<=0 ){
                mostrarMsgInf("<HTML>El a�o <FONT COLOR=\"blue\"> " + jspAni.getValue() + "</FONT> no ha sido cerrado <BR>Seleccione otro a�o y vuelva a intentarlo</HTML>");
                return false;
            }
            for(int k=0; k<arlDatValAniMes.size(); k++){
                if( objUti.getStringValueAt(arlDatValAniMes, k, INT_ARL_TIP_CIE).toString().equals("A")){
                    mostrarMsgInf("<HTML>El a�o <FONT COLOR=\"blue\"> " + jspAni.getValue() + "</FONT> tiene cierre anual <BR>Seleccione otro a�o y vuelva a intentarlo o reaperture el a�o seleccionado</HTML>");
                    return false;
                }
            }
          return true;
      }
      
      
      private boolean modificaTbmCabCieSis(){
          boolean blnRes=true;
          try{
              if(con!=null){
                  stm=con.createStatement();
                  strSQL="";
                  strSQL+="UPDATE tbm_cabciesis";
                  strSQL+=" SET fe_ultmod='" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "',";
                  strSQL+=" co_usrmod=" + objParSis.getCodigoUsuario() + "";
                  strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                  strSQL+=" AND ne_ani=" + jspAni.getValue() + "";
                  stm.executeUpdate(strSQL);
                  stm.close();
                  stm=null;
              }
          }
          catch(java.sql.SQLException e){
              blnRes=false;
              objUti.mostrarMsgErr_F1(this, e);
          }
          catch(Exception e){
              blnRes=false;
              objUti.mostrarMsgErr_F1(this, e);
          }
          return blnRes;
      }
      
 
      private boolean deleteTbmDetCieSis(){
          boolean blnRes=true;
          try{
              if(con!=null){
                  stm=con.createStatement();
                  strSQL="";
                  strSQL+="DELETE FROM tbm_detciesis";
                  strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                  strSQL+=" AND ne_ani=" + jspAni.getValue() + "";
                  stm.executeUpdate(strSQL);
                  stm.close();
                  stm=null;
              }
          }
          catch(java.sql.SQLException e){
              blnRes=false;
              objUti.mostrarMsgErr_F1(this, e);
          }
          catch(Exception e){
              blnRes=false;
              objUti.mostrarMsgErr_F1(this, e);
          }
          return blnRes;
      }
}