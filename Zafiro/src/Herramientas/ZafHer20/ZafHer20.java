/*
 * ZafMae33.java
 *
 * Created on May 23, 2007, 8:51 AM
 */

package Herramientas.ZafHer20;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import javax.swing.SpinnerNumberModel;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
/**
 *
 * @author  ilino
 */
public class ZafHer20 extends javax.swing.JInternalFrame {
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;
    private ZafTblBus objTblBus;
    javax.swing.JInternalFrame jfrThis;
    private MiToolBar objTooBar;
    private ZafTblCelRenChk objTblCelRenChk;
    private ZafTblCelEdiChk objTblCelEdiChk;    
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private Vector vecCab, vecReg, vecDat;
    final int intJspValMin=0;
    final int intJspValMax=9999;
    final int intJspValIni=0;
    final int intJspValInc=1;
    private String strSQL;
    ZafColNumerada objColNum;
    String strAux;

    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_CTA=1;
    final int INT_TBL_DAT_NUM_CTA=2;
    final int INT_TBL_DAT_NOM_CTA=3;
    final int INT_TBL_DAT_CHK_CTA=4;
   
    /** Creates new form ZafMae34 */
    public ZafHer20(ZafParSis obj) {
        try{
            initComponents();
            //Inicializar objetos.
            this.objParSis=obj;
            jfrThis=this;
            objParSis=(ZafParSis)obj.clone();
            jspAni.setModel(new SpinnerNumberModel(intJspValIni, intJspValMin, intJspValMax, intJspValInc));

            if (!configurarFrm())
                exitForm();
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        panFrm = new javax.swing.JPanel();
        panTit = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        panCen = new javax.swing.JPanel();
        panCab = new javax.swing.JPanel();
        lblAni = new javax.swing.JLabel();
        jspAni = new javax.swing.JSpinner();
        lblMes = new javax.swing.JLabel();
        cboMes = new javax.swing.JComboBox();
        lblCodHis = new javax.swing.JLabel();
        txtCodHis = new javax.swing.JTextField();
        panDet = new javax.swing.JPanel();
        spnDet = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panTooBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setName("");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        panTit.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("lblTit");
        panTit.add(lblTit, java.awt.BorderLayout.CENTER);

        panFrm.add(panTit, java.awt.BorderLayout.NORTH);

        panCen.setLayout(new java.awt.BorderLayout());

        panCab.setLayout(null);

        panCab.setPreferredSize(new java.awt.Dimension(0, 50));
        lblAni.setText("A\u00f1o:");
        panCab.add(lblAni);
        lblAni.setBounds(20, 20, 42, 22);

        panCab.add(jspAni);
        jspAni.setBounds(60, 20, 80, 22);

        lblMes.setText("Mes:");
        panCab.add(lblMes);
        lblMes.setBounds(170, 20, 36, 22);

        cboMes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));
        panCab.add(cboMes);
        cboMes.setBounds(204, 20, 100, 22);

        lblCodHis.setText("C\u00f3digo de hist\u00f3rico:");
        panCab.add(lblCodHis);
        lblCodHis.setBounds(374, 20, 116, 22);

        panCab.add(txtCodHis);
        txtCodHis.setBounds(490, 20, 90, 20);

        panCen.add(panCab, java.awt.BorderLayout.NORTH);

        panDet.setLayout(new java.awt.BorderLayout());

        panDet.setPreferredSize(new java.awt.Dimension(452, 380));
        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDet.setViewportView(tblDat);

        panDet.add(spnDet, java.awt.BorderLayout.CENTER);

        panCen.add(panDet, java.awt.BorderLayout.CENTER);

        panTooBar.setLayout(new java.awt.BorderLayout());

        panCen.add(panTooBar, java.awt.BorderLayout.SOUTH);

        panFrm.add(panCen, java.awt.BorderLayout.CENTER);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }//GEN-END:initComponents

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        // TODO add your handling code here:
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="�Est� seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION){
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void exitForm(){
        dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboMes;
    private javax.swing.JSpinner jspAni;
    private javax.swing.JLabel lblAni;
    private javax.swing.JLabel lblCodHis;
    private javax.swing.JLabel lblMes;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panCen;
    private javax.swing.JPanel panDet;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panTit;
    private javax.swing.JPanel panTooBar;
    private javax.swing.JScrollPane spnDet;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodHis;
    // End of variables declaration//GEN-END:variables

    private boolean configurarFrm(){
        boolean blnRes=true;
        lblTit.setText(objParSis.getNombreMenu() + "v0.2");
        this.setTitle(objParSis.getNombreMenu());
        objUti=new ZafUtil();
        
        objTooBar=new MiToolBar(this);
        panTooBar.add(objTooBar);
        vecCab=new Vector(5);
        vecDat=new Vector();
        vecCab.clear();
        
        vecCab.add(INT_TBL_DAT_LIN, "");
        vecCab.add(INT_TBL_DAT_COD_CTA, "COD.CTA.");
        vecCab.add(INT_TBL_DAT_NUM_CTA, "N�MERO CUENTA");
        vecCab.add(INT_TBL_DAT_NOM_CTA, "NOMBRE CUENTA");
        vecCab.add(INT_TBL_DAT_CHK_CTA, "CIERRE");
        
        objTblMod=new ZafTblMod();
        objTblMod.setHeader(vecCab);
        tblDat.setModel(objTblMod);        

        //Configurar JTable: Establecer tipo de selecci�n.
        tblDat.setRowSelectionAllowed(true);
        tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        //Configurar JTable: Establecer el men� de contexto.
        objTblPopMnu=new ZafTblPopMnu(tblDat);
        objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
        tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
        //Tama�o de las celdas
        tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
//        tcmAux.getColumn(INT_TBL_DAT_COD_CTA).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_DAT_NUM_CTA).setPreferredWidth(100);
        tcmAux.getColumn(INT_TBL_DAT_NOM_CTA).setPreferredWidth(180);
        tcmAux.getColumn(INT_TBL_DAT_CHK_CTA).setPreferredWidth(80);
                  
        tcmAux.getColumn(INT_TBL_DAT_COD_CTA).setWidth(0);
        tcmAux.getColumn(INT_TBL_DAT_COD_CTA).setMaxWidth(0);
        tcmAux.getColumn(INT_TBL_DAT_COD_CTA).setMinWidth(0);
        tcmAux.getColumn(INT_TBL_DAT_COD_CTA).setPreferredWidth(0);
        tcmAux.getColumn(INT_TBL_DAT_COD_CTA).setResizable(false);                

        
        objTblCelRenChk=new ZafTblCelRenChk();
        tcmAux.getColumn(INT_TBL_DAT_CHK_CTA).setCellRenderer(objTblCelRenChk);
        objTblCelRenChk=null;

        //Configurar JTable: Editor de celdas.
        objTblCelEdiChk=new ZafTblCelEdiChk(tblDat);
        tcmAux.getColumn(INT_TBL_DAT_CHK_CTA).setCellEditor(objTblCelEdiChk);
        objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
        });
        objTblBus= new ZafTblBus(tblDat);
        objTooBar.setVisibleEliminar(false);
        objTooBar.setVisibleAnular(false);
        objTooBar.setVisibleVistaPreliminar(false);
        objTooBar.setVisibleImprimir(false);
        objTooBar.setVisibleInsertar(false);
        objTooBar.setVisibleModificar(false);
        return blnRes;
    }
    
    
    private void mostrarMsgInf(String strMsg){
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }    
    
    public class MiToolBar extends ZafToolBar{

        public MiToolBar(javax.swing.JInternalFrame jfrThis){
            super(jfrThis, objParSis);
        }        
        
        
        public boolean aceptar() {
            boolean blnRes=true;
            return blnRes;
        }
        
        public boolean afterAceptar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterAnular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterCancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterConsultar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterEliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterImprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterInsertar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterModificar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterVistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean anular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeAceptar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeAnular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeCancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeConsultar() {
            return true;
        }
        
        public boolean beforeEliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeImprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeInsertar() {
            return true;            
        }
        
        public boolean beforeModificar() {
            return true;
        }
        
        public boolean beforeVistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean cancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public void clickAceptar() {
        }
        
        public void clickAnterior() {
            try{
                if (!rstCab.isFirst()){
                    rstCab.previous();
                    cargarReg();
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }            
        }
        
        public void clickAnular() {
        }
        
        public void clickCancelar() {
            cboMes.setSelectedIndex(0);
            jspAni.setModel(new SpinnerNumberModel(intJspValIni, intJspValMin, intJspValMax, intJspValInc));
            objTblMod.removeAllRows();
            jspAni.setEnabled(true);
            cboMes.setEnabled(true);
            txtCodHis.setText("");
        }
        
        public void clickConsultar() {
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
        }
        
        public void clickEliminar() {
        }
        
        public void clickFin() {
            try{
                if (!rstCab.isLast()){
                    rstCab.last();
                    cargarReg();
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }            
        }
        
        public void clickImprimir() {
        }
        
        public void clickInicio() {
            try{
                if (!rstCab.isFirst()){
                    rstCab.first();
                    cargarReg();
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }              
        }
        
        public void clickInsertar() {
        }
        
        public void clickModificar() {
        }
        
        public void clickSiguiente() {
            try{
                if (!rstCab.isLast()){
                    rstCab.next();
                    cargarReg();
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }            
        }
        
        public void clickVisPreliminar() {
        }
        
        public boolean consultar() {
            consultarReg();
            return true;
        }
        
        public boolean eliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean imprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean insertar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean modificar() {
            return true;
        }
        
        public boolean vistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
    }
 
    private boolean consultarReg()
    {
        int intCodEmp, intCodLoc;
        boolean blnRes=true;
        strAux="";
        int anio=0;
        try
        {
            intCodEmp=objParSis.getCodigoEmpresa();
            intCodLoc=objParSis.getCodigoLocal();
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null)
            {
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                //Validar que s�lo se muestre los documentos asignados al programa.
                strSQL="";
                strSQL+="select a1.co_emp, a1.ne_ani, a2.ne_mes, a1.co_his";
                strSQL+=" from tbh_cabCieMenCta as a1 left outer join tbh_detCieMenCta as a2";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani and a1.co_his=a2.co_his";
                strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strAux=txtCodHis.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_his LIKE '" + strAux.replaceAll("'", "''") + "'";
                anio=Integer.parseInt(""+jspAni.getValue());
                if (anio!=0)
                    strSQL+=" AND a1.ne_ani=" + anio + "";
                
                strAux="" + (cboMes.getSelectedIndex()==0?"":""+(cboMes.getSelectedIndex()));
                if (!strAux.equals(""))
                    strSQL+=" AND a2.ne_mes LIKE '" + strAux.replaceAll("'", "''") + "'";
                strSQL+=" group by a1.co_emp, a1.ne_ani, a2.ne_mes, a1.co_his";
                strSQL+=" order by a1.co_emp, a1.ne_ani, a1.co_his, a2.ne_mes";
                System.out.println("EN CONSULTAR REGISTROS" + strSQL);
                rstCab=stmCab.executeQuery(strSQL);
                if (rstCab.next())
                {
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                }
                else
                {
                    mostrarMsgInf("No se ha encontrado ning�n registro que cumpla el criterio de b�squeda especificado.");
                    objTblMod.removeAllRows();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }      
    
    private boolean cargarReg(){
        boolean blnRes=true;
        try
        {
            if (cargarCabReg()){
                if (cargarDetReg()){
                }
            }
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }    

    
    private boolean cargarCabReg()
    {
        int intPosRel;
        boolean blnRes=true;
        String strMes="";
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                strSQL="";
                strSQL+="select a1.ne_ani, a2.ne_mes, a1.co_his";
                strSQL+=" from tbh_cabCieMencta as a1 left outer join tbh_detCieMenCta as a2";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani and a1.co_his=a2.co_his";
                strSQL+=" where a1.co_emp=" + rstCab.getString("co_emp") + "";
                strSQL+=" and a1.ne_ani=" + rstCab.getString("ne_ani") + "";
                strSQL+=" and a1.co_his=" + rstCab.getString("co_his") + "";
                strSQL+=" order by a1.co_emp, a1.ne_ani, a1.co_his";
                System.out.println("EN CARGAR CABECERA DE REGISTRO: " + strSQL);
                rst=stm.executeQuery(strSQL);
                if (rst.next())
                {
                    strAux=rst.getString("ne_ani");
                    jspAni.setModel(new SpinnerNumberModel(Integer.parseInt(strAux), intJspValMin, intJspValMax, intJspValInc));
                    txtCodHis.setText(rst.getString("co_his"));
                    strMes=rst.getString("ne_mes")==null?"0":""+rst.getInt("ne_mes");
                    cboMes.setSelectedIndex(Integer.parseInt(strMes));
                }
            }
            rst.close();
            stm.close();
            con.close();
            rst=null;
            stm=null;
            con=null;
            //Mostrar la posici�n relativa del registro.
            intPosRel=rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }      
    
    
    private boolean cargarDetReg()
    {
        int intCodEmp, intCodLoc;
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                intCodEmp=objParSis.getCodigoEmpresa();
                intCodLoc=objParSis.getCodigoLocal();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="select a1.co_emp, a1.ne_ani, a2.ne_mes, a1.co_his, a2.co_cta, a3.tx_codcta, a3.tx_deslar";
                strSQL+=" from tbh_cabCieMenCta as a1 left outer join tbh_detCieMenCta as a2";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani and a1.co_his=a2.co_his";
                strSQL+=" inner join tbm_placta as a3";
                strSQL+=" on a2.co_emp=a3.co_emp and a2.co_cta=a3.co_cta";
                strSQL+=" where a1.co_emp=" + rstCab.getString("co_emp") + "";
                strSQL+=" and a1.ne_ani=" + rstCab.getString("ne_ani") + "";
                strSQL+=" and a1.co_his=" + rstCab.getString("co_his") + "";
                strSQL+=" order by a1.co_emp, a1.co_his, a2.ne_mes, a2.co_cta";
                System.out.println("EN CARGARDETREG: " + strSQL);
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                while(rst.next()){
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN, "");
                    vecReg.add(INT_TBL_DAT_COD_CTA, "" + rst.getInt("co_cta"));
                    vecReg.add(INT_TBL_DAT_NUM_CTA, "" + rst.getString("tx_codcta"));
                    vecReg.add(INT_TBL_DAT_NOM_CTA, "" + rst.getString("tx_deslar"));
                    vecReg.add(INT_TBL_DAT_CHK_CTA, "");
                    if( ! (rst.getString("co_cta").toString().equals(null))  ){
                        vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK_CTA);
                    }
                    vecDat.add(vecReg);
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    
    
        
}
