/*
 * ZafMae33.java
 *
 * Created on May 23, 2007, 8:51 AM
 */

package Herramientas.ZafHer18;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import javax.swing.SpinnerNumberModel;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import java.util.ArrayList;
/**
 *
 * @author  ilino
 */
public class ZafHer18 extends javax.swing.JInternalFrame {
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;
    private ZafTblBus objTblBus;
    javax.swing.JInternalFrame jfrThis;
    private MiToolBar objTooBar;
    private ZafTblCelRenChk objTblCelRenChk;
    private ZafTblCelEdiChk objTblCelEdiChk;    
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    final int intJspValMin=0001;
    final int intJspValMax=9999;
    final int intJspValIni=2007;
    final int intJspValInc=1;
    private String strSQL;
    private int intAniExi, intMesExi;
    private int intUltReg;
    private java.util.Date datFecAux;
    Vector vecCab, vecReg, vecDat, vecAux;
    ZafColNumerada objColNum;
    String strAux;
    ArrayList arlRegAuxCodCta, arlDatAuxCodCta;
    private boolean blnMarTodChkTblEmp=true; 
    ArrayList arlRegValAniMes, arlDatValAniMes;
    final int INT_VEC_COD_CTA=0;
    
    ArrayList arlRegValAniMesBefIns, arlDatValAniMesBefIns;
    final int INT_ARL_BEF_INS_MES=0;
    final int INT_ARL_BEF_INS_ANI=1;
    
//    private java.util.Date datFecAux;
    
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_CTA=1;
    final int INT_TBL_DAT_NUM_CTA=2;
    final int INT_TBL_DAT_NOM_CTA=3;
    final int INT_TBL_DAT_CHK_CTA=4;
    
    //USADOS PARA VALIDAR SI EL A�O EXISTE EN LAS TABLAS DE CIERRE/APERTURA DE SISTEMAS
    final int INT_ARL_ANI=0;
    final int INT_ARL_MES=1;
    final int INT_ARL_TIP_CIE=2;    
    
    //EL SIGUIENTE CAMPO PERMITE SABER SI EL MES QUE SE CONSULTA EXISTE O NO, CAMBIA SU VALOR EN AFTERCONSULTAR
    //ES DECIR SI SE EJECUTA LA CONSULTA PORQ EXISTE EL MES, SE INCREMENTA EL VALOR, SI EL MES NO EXISTE, NO CAMBIA SU VALOR, ENTONCES NUNK SE EJECUTA AFTERCONSULTAR
    private int intAftConOk;
    
    
    /** Creates new form ZafMae34 */
    public ZafHer18(ZafParSis obj) {
        try{
            initComponents();
            //Inicializar objetos.
            this.objParSis=obj;
            jfrThis=this;
            objParSis=(ZafParSis)obj.clone();
            jspAni.setModel(new SpinnerNumberModel(intJspValIni, intJspValMin, intJspValMax, intJspValInc));

            if (!configurarFrm())
                exitForm();
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        panFrm = new javax.swing.JPanel();
        panTit = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        panCen = new javax.swing.JPanel();
        panCab = new javax.swing.JPanel();
        lblAni = new javax.swing.JLabel();
        jspAni = new javax.swing.JSpinner();
        lblMes = new javax.swing.JLabel();
        cboMes = new javax.swing.JComboBox();
        panDet = new javax.swing.JPanel();
        spnDet = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panTooBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setName("");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        panTit.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("lblTit");
        panTit.add(lblTit, java.awt.BorderLayout.CENTER);

        panFrm.add(panTit, java.awt.BorderLayout.NORTH);

        panCen.setLayout(new java.awt.BorderLayout());

        panCab.setLayout(null);

        panCab.setPreferredSize(new java.awt.Dimension(0, 50));
        lblAni.setText("A\u00f1o:");
        panCab.add(lblAni);
        lblAni.setBounds(20, 20, 42, 22);

        panCab.add(jspAni);
        jspAni.setBounds(60, 20, 80, 22);

        lblMes.setText("Mes:");
        panCab.add(lblMes);
        lblMes.setBounds(170, 20, 36, 22);

        cboMes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));
        panCab.add(cboMes);
        cboMes.setBounds(204, 20, 100, 22);

        panCen.add(panCab, java.awt.BorderLayout.NORTH);

        panDet.setLayout(new java.awt.BorderLayout());

        panDet.setPreferredSize(new java.awt.Dimension(452, 380));
        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDet.setViewportView(tblDat);

        panDet.add(spnDet, java.awt.BorderLayout.CENTER);

        panCen.add(panDet, java.awt.BorderLayout.CENTER);

        panTooBar.setLayout(new java.awt.BorderLayout());

        panCen.add(panTooBar, java.awt.BorderLayout.SOUTH);

        panFrm.add(panCen, java.awt.BorderLayout.CENTER);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }//GEN-END:initComponents

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        // TODO add your handling code here:
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="�Est� seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION){
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void exitForm(){
        dispose();
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cboMes;
    private javax.swing.JSpinner jspAni;
    private javax.swing.JLabel lblAni;
    private javax.swing.JLabel lblMes;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panCen;
    private javax.swing.JPanel panDet;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panTit;
    private javax.swing.JPanel panTooBar;
    private javax.swing.JScrollPane spnDet;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables

    private boolean configurarFrm(){
        boolean blnRes=true;
        lblTit.setText(objParSis.getNombreMenu() + "v0.2.1");
        this.setTitle(objParSis.getNombreMenu());
        objUti=new ZafUtil();
        
        objTooBar=new MiToolBar(this);
        panTooBar.add(objTooBar);
        vecCab=new Vector(5);
        vecDat=new Vector();
        vecCab.clear();
        
        vecCab.add(INT_TBL_DAT_LIN, "");
        vecCab.add(INT_TBL_DAT_COD_CTA, "COD.CTA.");
        vecCab.add(INT_TBL_DAT_NUM_CTA, "N�MERO CUENTA");
        vecCab.add(INT_TBL_DAT_NOM_CTA, "NOMBRE CUENTA");
            vecCab.add(INT_TBL_DAT_CHK_CTA, "CIERRE");
        
        objTblMod=new ZafTblMod();
        objTblMod.setHeader(vecCab);
        tblDat.setModel(objTblMod);        
                
                
                
        //Configurar JTable: Establecer tipo de selecci�n.
        tblDat.setRowSelectionAllowed(true);
        tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        //Configurar JTable: Establecer el men� de contexto.
        objTblPopMnu=new ZafTblPopMnu(tblDat);
        objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
        tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
        //Tama�o de las celdas
        tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
//        tcmAux.getColumn(INT_TBL_DAT_COD_CTA).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_DAT_NUM_CTA).setPreferredWidth(100);
        tcmAux.getColumn(INT_TBL_DAT_NOM_CTA).setPreferredWidth(180);
        tcmAux.getColumn(INT_TBL_DAT_CHK_CTA).setPreferredWidth(80);
                  
        tcmAux.getColumn(INT_TBL_DAT_COD_CTA).setWidth(0);
        tcmAux.getColumn(INT_TBL_DAT_COD_CTA).setMaxWidth(0);
        tcmAux.getColumn(INT_TBL_DAT_COD_CTA).setMinWidth(0);
        tcmAux.getColumn(INT_TBL_DAT_COD_CTA).setPreferredWidth(0);
        tcmAux.getColumn(INT_TBL_DAT_COD_CTA).setResizable(false);                

        //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
        tblDat.getTableHeader().setReorderingAllowed(false);
        
//        tblDat.getTableHeader().addMouseMotionListener(new ZafMouMotAda());
        //Configurar JTable: Establecer los listener para el TableHeader.
        tblDat.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEmpMouseClicked(evt);
            }
        }); 
        
        
        objTblCelRenChk=new ZafTblCelRenChk();
        tcmAux.getColumn(INT_TBL_DAT_CHK_CTA).setCellRenderer(objTblCelRenChk);
        objTblCelRenChk=null;

        //Configurar JTable: Editor de celdas.
        objTblCelEdiChk=new ZafTblCelEdiChk(tblDat);
        tcmAux.getColumn(INT_TBL_DAT_CHK_CTA).setCellEditor(objTblCelEdiChk);
        objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
        });
        
        //Configurar JTable: Establecer columnas editables.
        vecAux=new Vector();
        vecAux.add("" + INT_TBL_DAT_CHK_CTA);
        objTblMod.setColumnasEditables(vecAux);
        vecAux=null;
        objTblBus= new ZafTblBus(tblDat);
        arlDatValAniMes= new ArrayList();
        arlDatValAniMes.clear();
        
        
        arlDatValAniMesBefIns= new ArrayList();
        arlDatValAniMesBefIns.clear();
        objTooBar.setVisibleEliminar(false);
        objTooBar.setVisibleAnular(false);
        objTooBar.setVisibleVistaPreliminar(false);
        objTooBar.setVisibleImprimir(false);
        
//        objTblMod.insertRow();
        return blnRes;
    }
    
    
    private void mostrarMsgInf(String strMsg){
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }    
    
    public class MiToolBar extends ZafToolBar{

        public MiToolBar(javax.swing.JInternalFrame jfrThis){
            super(jfrThis, objParSis);
        }        
        
        
        public boolean aceptar() {
            boolean blnRes=true;
            return blnRes;
        }
        
        public boolean afterAceptar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterAnular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterCancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterConsultar() {
            boolean blnRes=true;
            intAftConOk=2;
            return blnRes;            
        }
        
        public boolean afterEliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterImprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterInsertar() {
            boolean blnRes=true;
            jspAni.setEnabled(true);
            intUltReg=0;
//            arlDatAuxCodCta.clear();
//            arlDatAuxCodCta=null;
            objTooBar.setEstado('w');
            return blnRes;            
        }
        
        public boolean afterModificar() {
            boolean blnRes=true;
//            arlDatAuxCodCta.clear();
//            arlDatAuxCodCta=null;
            intAftConOk=0;
            jspAni.setEnabled(true);
            cboMes.setEnabled(true);            
            return blnRes;            
        }
        
        public boolean afterVistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean anular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeAceptar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeAnular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeCancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeConsultar() {
            objTooBar.setEnabledModificar(true);
            if(retornaAnioMes()){
                if(  (intAniExi==0)   &&   (intMesExi==0) ){
                    mostrarMsgInf("<HTML>El a�o/mes seleccionado no ha sido ingresado<BR>Verifique los datos e intente de nuevo</HTML>");
                    objTooBar.setEstado('w');
                    return false;
                }
            }
            return true;
        }
        
        public boolean beforeEliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeImprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeInsertar() {
            
            int intJspAni=intJspAni=Integer.parseInt(""+jspAni.getValue());
            if(intJspAni<2006){
                mostrarMsgInf("<HTML>No puede insertar a�os que sean menores al 2006</HTML>");
                return false;
            }
            
/////////////////////////VALIDACIONES DE LAS TABLAS DE CIERRE DEL SISTEMA TBM_CABCIESIS...ETC////////////////////////////////////////////////////////////            
            int m=0;
            arlDatValAniMes.clear();
            existeAniMesCerrar();
            
            int intMesArl=0;
            String strTipCieLoc="";
            int intMesCmbSel=(cboMes.getSelectedIndex()+1);
            int intAniJspSel=Integer.parseInt(""+jspAni.getValue());

            
            for(int k=0;k<objTblMod.getRowCountTrue();k++){
                if(objTblMod.isChecked(k, INT_TBL_DAT_CHK_CTA)){
                    m++;
                }
            }
            if(m==0){
                mostrarMsgInf("<HTML>Seleccione por lo menos un mes y vuelva a intentarlo.</HTML>");
                jspAni.requestFocus();
                return false;                
            }            
            
            
            
            
            for( int i=0; i<arlDatValAniMes.size(); i++ ){
                strTipCieLoc=objUti.getStringValueAt(arlDatValAniMes, i, INT_ARL_TIP_CIE);
                intMesArl=objUti.getIntValueAt(arlDatValAniMes, i, INT_ARL_MES);
                if( (strTipCieLoc.toString().equals("M")) ){
                    if(intMesCmbSel==intMesArl){
                        mostrarMsgInf("<HTML>El mes <FONT COLOR=\"blue\"> " +  ( (cboMes.getSelectedIndex()+1)==1?"ENERO": ( (cboMes.getSelectedIndex()+1)==2?"FEBRERO": ( (cboMes.getSelectedIndex()+1)==3?"MARZO": ((cboMes.getSelectedIndex()+1)==4?"ABRIL": ((cboMes.getSelectedIndex()+1)==5?"MAYO": ((cboMes.getSelectedIndex()+1)==6?"JUNIO": ((cboMes.getSelectedIndex()+1)==7?"JULIO": ((cboMes.getSelectedIndex()+1)==8?"AGOSTO": ((cboMes.getSelectedIndex()+1)==9?"SEPTIEMBRE": ((cboMes.getSelectedIndex()+1)==10?"OCTUBRE": ((cboMes.getSelectedIndex()+1)==11?"NOVIEMBRE":"DICIEMBRE") ) ) ) ) ) ) )  )       )    ) + "</FONT> est� cerrado<BR>No puede realizar un cierre de un mes que ya fue cerrado.</HTML>");
                        jspAni.requestFocus();
                        return false;
                    }
                }
                else{
                    mostrarMsgInf("<HTML>El a�o <FONT COLOR=\"blue\"> " + jspAni.getValue() + "</FONT> tiene cierre anual<BR>No puede realizar un cierre de cuentas porque ya existe un cierre anual.</HTML>");
                    jspAni.requestFocus();
                    return false;
                }
            }
/////////////////////////VALIDACIONES PROPIAS DE LAS TABLAS TBM_CABCIEMENCTA...ETC////////////////////////////////////////////////////////////
            int intMesLoc=0;
            int intAniLoc=0;            
            if(retornaAnioMesBeforeInsertar()){
                for(int p=0; p<arlDatValAniMesBefIns.size();p++){
                    intMesLoc=objUti.getIntValueAt(arlDatValAniMesBefIns, p, INT_ARL_BEF_INS_MES);
                    intAniLoc=objUti.getIntValueAt(arlDatValAniMesBefIns, p, INT_ARL_BEF_INS_ANI);
                    if(intAniLoc==intAniJspSel){
                        mostrarMsgInf("<HTML>El a�o <FONT COLOR=\"blue\"> " + jspAni.getValue() + "</FONT> ya fue ingresado<BR>para procesar el a�o seleccionado MODIFIQUE</HTML>");
                        if(   (intMesLoc==intMesCmbSel)  &&  (intMesArl!=0)  ){
                            mostrarMsgInf("<HTML>El mes <FONT COLOR=\"blue\"> " +  ( (cboMes.getSelectedIndex()+1)==1?"ENERO": ( (cboMes.getSelectedIndex()+1)==2?"FEBRERO": ( (cboMes.getSelectedIndex()+1)==3?"MARZO": ((cboMes.getSelectedIndex()+1)==4?"ABRIL": ((cboMes.getSelectedIndex()+1)==5?"MAYO": ((cboMes.getSelectedIndex()+1)==6?"JUNIO": ((cboMes.getSelectedIndex()+1)==7?"JULIO": ((cboMes.getSelectedIndex()+1)==8?"AGOSTO": ((cboMes.getSelectedIndex()+1)==9?"SEPTIEMBRE": ((cboMes.getSelectedIndex()+1)==10?"OCTUBRE": ((cboMes.getSelectedIndex()+1)==11?"NOVIEMBRE":"DICIEMBRE") ) ) ) ) ) ) )  )       )    ) + "</FONT> est� cerrado<BR>No puede realizar un cierre de un mes que ya fue cerrado.</HTML>");
                            return false;
                        }                        
                        
                        return false;
                    }
                }
            }            

            
            arlDatAuxCodCta=new ArrayList();
            for(int j=0; j<objTblMod.getRowCountTrue(); j++){
                if(objTblMod.isChecked(j, INT_TBL_DAT_CHK_CTA)){
                    arlRegAuxCodCta=new ArrayList();
                    arlRegAuxCodCta.add(INT_VEC_COD_CTA, ""+objTblMod.getValueAt(j, INT_TBL_DAT_COD_CTA));
                    arlDatAuxCodCta.add(arlRegAuxCodCta);
                }
            }            
            return true;            
        }
        
        public boolean beforeModificar() {
/////////////////////////VALIDACIONES DE LAS TABLAS DE CIERRE DEL SISTEMA TBM_CABCIESIS...ETC////////////////////////////////////////////////////////////            
            arlDatValAniMes.clear();
            existeAniMesCerrar();
            int intMesLoc=0;
            int intMesArl=0;
            String strTipCieLoc="";
            int intMesCmbSel=(cboMes.getSelectedIndex()+1);
            for( int i=0; i<arlDatValAniMes.size(); i++ ){
                strTipCieLoc=objUti.getStringValueAt(arlDatValAniMes, i, INT_ARL_TIP_CIE);
                intMesArl=objUti.getIntValueAt(arlDatValAniMes, i, INT_ARL_MES);
                if( (strTipCieLoc.toString().equals("M")) ){
                    if(intMesCmbSel==intMesArl){
                        mostrarMsgInf("<HTML>El mes <FONT COLOR=\"blue\"> " +  ( (cboMes.getSelectedIndex()+1)==1?"ENERO": ( (cboMes.getSelectedIndex()+1)==2?"FEBRERO": ( (cboMes.getSelectedIndex()+1)==3?"MARZO": ((cboMes.getSelectedIndex()+1)==4?"ABRIL": ((cboMes.getSelectedIndex()+1)==5?"MAYO": ((cboMes.getSelectedIndex()+1)==6?"JUNIO": ((cboMes.getSelectedIndex()+1)==7?"JULIO": ((cboMes.getSelectedIndex()+1)==8?"AGOSTO": ((cboMes.getSelectedIndex()+1)==9?"SEPTIEMBRE": ((cboMes.getSelectedIndex()+1)==10?"OCTUBRE": ((cboMes.getSelectedIndex()+1)==11?"NOVIEMBRE":"DICIEMBRE") ) ) ) ) ) ) )  )       )    ) + "</FONT> est� cerrado<BR>Reaperture el mes e intente nuevamente.</HTML>");
                        jspAni.requestFocus();
                        return false;
                    }
                }
                else{
                    mostrarMsgInf("<HTML>El a�o <FONT COLOR=\"blue\"> " + jspAni.getValue() + "</FONT> tiene cierre anual<BR>No puede realizar un cierre de cuentas porque ya existe un cierre anual.</HTML>");
                    jspAni.requestFocus();
                    return false;
                }
            }
            
            
            
            arlDatAuxCodCta=new ArrayList();
            for(int j=0; j<objTblMod.getRowCountTrue(); j++){
                if(objTblMod.isChecked(j, INT_TBL_DAT_CHK_CTA)){
                    arlRegAuxCodCta=new ArrayList();
                    arlRegAuxCodCta.add(INT_VEC_COD_CTA, ""+objTblMod.getValueAt(j, INT_TBL_DAT_COD_CTA));
                    arlDatAuxCodCta.add(arlRegAuxCodCta);
                }
            }            
            
            
            
            
            
            return true;
        }
        
        public boolean beforeVistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean cancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public void clickAceptar() {
        }
        
        public void clickAnterior() {
        }
        
        public void clickAnular() {
        }
        
        public void clickCancelar() {
            cboMes.setSelectedIndex(0);
            intAniExi=0;
            intMesExi=0;
            jspAni.setModel(new SpinnerNumberModel(intJspValIni, intJspValMin, intJspValMax, intJspValInc));            
            objTblMod.removeAllRows();
            jspAni.setEnabled(true);
            cboMes.setEnabled(true);
            if(arlDatAuxCodCta!=null){
                arlDatAuxCodCta.clear();
                arlDatAuxCodCta=null;
            }

        }
        
        public void clickConsultar() {
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
        }
        
        public void clickEliminar() {
        }
        
        public void clickFin() {
        }
        
        public void clickImprimir() {
        }
        
        public void clickInicio() {
        }
        
        public void clickInsertar() {
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            if(! (cargarPlaCta()) ){
                mostrarMsgInf("<HTML>Ocurri� un error al cargar el Plan de Cuentas.<BR>Cancele e intente realizar el proceso de inserci�n nuevamente</HTML>");
            }
        }
        
        public void clickModificar() {
            jspAni.setEnabled(false);
            cboMes.setEnabled(false);
            cargarCtaMod();
        }
        
        public void clickSiguiente() {
        }
        
        public void clickVisPreliminar() {
        }
        
        public boolean consultar() {
            if( ! (consultarReg()) )
                return false;
            return true;
        }
        
        public boolean eliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean imprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean insertar() {
            boolean blnRes=true;
            jspAni.setEnabled(false);
            if (! (insertarReg() ) )
                blnRes=false;
            return blnRes;            
        }
        
        public boolean modificar() {
            if (!actualizarReg())
                return false;
            return true;
        }
        
        public boolean vistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
    }
 
    
    private boolean cargarPlaCta(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
//                strSQL+=" select b1.co_emp as codEmpPla, b1.co_cta as codCtaPla, b1.tx_codcta as numCtaPla, b1.tx_deslar as nomCtaPla";
//                strSQL+=" from tbm_placta as b1 left outer join (";
//                strSQL+=" tbm_cabciemencta as a1 inner join tbm_detciemencta as a2";
//                strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani)";
//                strSQL+=" on b1.co_emp=a2.co_emp and b1.co_cta=a2.co_cta";
//                strSQL+=" where b1.co_emp=" + objParSis.getCodigoEmpresa() + "";
//                strSQL+=" and b1.tx_tipcta='D' and b1.st_reg='A'";
//                strSQL+=" order by b1.tx_codcta";
                strSQL+="select b1.co_emp as codEmpPla, b1.co_cta as codCtaPla, b1.tx_codcta as numCtaPla, b1.tx_deslar as nomCtaPla";
                strSQL+=" from tbm_placta as b1 left outer join (";
                strSQL+=" tbm_cabciemencta as a1 inner join tbm_detciemencta as a2";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani)";
                strSQL+=" on b1.co_emp=a2.co_emp and b1.co_cta=a2.co_cta";
                strSQL+=" where b1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and b1.tx_tipcta='D' and b1.st_reg='A'";
                strSQL+=" group by b1.co_emp, b1.co_cta, b1.tx_codcta, b1.tx_deslar";
                strSQL+=" order by b1.tx_codcta";
                rst=stm.executeQuery(strSQL);
                
                while (rst.next()){
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN, "");
                    vecReg.add(INT_TBL_DAT_COD_CTA, "" + ( rst.getString("codCtaPla")==null?"":"" + rst.getInt("codCtaPla") )  );
                    vecReg.add(INT_TBL_DAT_NUM_CTA, "" + ( rst.getString("numCtaPla")==null?"":"" + rst.getString("numCtaPla") )  );
                    vecReg.add(INT_TBL_DAT_NOM_CTA, "" + ( rst.getString("nomCtaPla")==null?"":"" + rst.getString("nomCtaPla") )  );
                    vecReg.add(INT_TBL_DAT_CHK_CTA, ""  );
                    vecDat.add(vecReg);
                }
                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
            }            
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }                
        return blnRes;
    }
         
    
    private boolean retornaAnioMes(){
        boolean blnRes=true;
        intAniExi=0;
        intMesExi=0;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="select distinct(a2.ne_mes), a1.ne_ani";
                strSQL+=" from tbm_cabciemencta as a1 left outer join tbm_detciemencta as a2";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani";
                strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and a1.ne_ani=" + jspAni.getValue() + "";
//                strSQL+=" and a2.ne_mes=" + (cboMes.getSelectedIndex()+1) + "";
                rst=stm.executeQuery(strSQL);
                if( rst.next() ){
                    intAniExi=rst.getInt("ne_ani");
                    intMesExi=rst.getInt("ne_mes");
                }
                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    private boolean retornaAnioMesBeforeInsertar(){
        boolean blnRes=true;
        intAniExi=0;
        intMesExi=0;
        
        arlDatValAniMesBefIns.clear();
        
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="select a1.ne_ani, a2.ne_mes";
                strSQL+=" from tbm_cabciemencta as a1 left outer join tbm_detciemencta as a2";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani";
                strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and a1.ne_ani=" + jspAni.getValue() + "";
                rst=stm.executeQuery(strSQL);
                while( rst.next() ){
                    arlRegValAniMesBefIns=new ArrayList();
                    arlRegValAniMesBefIns.add(INT_ARL_BEF_INS_MES, ""+rst.getInt("ne_mes"));
                    arlRegValAniMesBefIns.add(INT_ARL_BEF_INS_ANI, ""+rst.getInt("ne_ani"));
                    arlDatValAniMesBefIns.add(arlRegValAniMesBefIns);
                }
                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
        
    
    
    /*
    private boolean isAniMesExiste(){
        
        if(retornaAnioMes()){
            if(  (intAniExi!=0) && (intMesExi!=0)  ){
                mostrarMsgInf("<HTML>El a�o y mes seleccionados ya fueron ingresados.<BR>Seleccione un mes/a�o diferente y vuelva a intentarlo.</HTML>");
                return false;
            }
            if(  (intMesExi!=0)  ){
                mostrarMsgInf("<HTML>El mes seleccionado ya fue ingresado.<BR>Seleccione un mes diferente y vuelva a intentarlo.</HTML>");
                return false;
            }            
        }
        return true;        
    }
    */
    
    private boolean insertarReg(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if(con!= null){
                if(insertaTbmCabCieMenCta()){
                    if(insertaTbmDetCieMenCta()){
                        if(insertaTbhSalCta()){
                            if(insertaTbhCabCieMenCta()){
                                if(insertaTbhDetCieMenCta()){
                                    con.commit();
                                }
                                else{
                                    blnRes=false;
                                    con.rollback();
                                }
                            }
                            else{
                                blnRes=false;
                                con.rollback();
                            }
                        }
                        else{
                            blnRes=false;
                            con.rollback();
                        }
                    }
                    else{
                        blnRes=false;
                        con.rollback();
                    }
                }
                else{
                    blnRes=false;
                    con.rollback();
                }                                
                con.close();
                con=null;
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    private boolean insertaTbhCabCieMenCta(){
        boolean blnRes=true;
        datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
        try{
            if(con!=null){

                stm=con.createStatement();
                strSQL="";
                strSQL+="INSERT INTO tbh_cabciemencta(";
                strSQL+=" co_emp, ne_ani, co_his, fe_ing, fe_ultmod, co_usring, co_usrmod,";
                strSQL+=" fe_his, co_usrhis";
                strSQL+=" )";
                strSQL+=" (";
                strSQL+=" SELECT co_emp, ne_ani, " + intUltReg + " as co_his, fe_ing, fe_ultmod, co_usring, co_usrmod,";
                strSQL+="'"  + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "' as fe_his,";
                strSQL+=""  + objParSis.getCodigoUsuario() + " as co_usrhis";
                strSQL+=" FROM tbm_cabciemencta";
                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and ne_ani=" + jspAni.getValue() + "";
                strSQL+=")";
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }            
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean insertaTbhDetCieMenCta(){
        boolean blnRes=true;
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="INSERT INTO tbh_detciemencta(";
                strSQL+="co_emp, ne_ani, ne_mes, co_cta, co_his";
                strSQL+=")";
                strSQL+="(";
                strSQL+="SELECT co_emp, ne_ani, ne_mes, co_cta," + intUltReg + " as co_his";
                strSQL+=" FROM tbm_detciemencta";
                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND ne_ani=" + jspAni.getValue() + "";
                strSQL+=" AND ne_mes=" + (cboMes.getSelectedIndex()+1)  + "";
                strSQL+=")";
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }            
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean insertaTbhSalCta(){
        boolean blnRes=true;
        String strAux="";
        int m=0;
        datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
        try{
            if(con!=null){
                
                strSQL="";
                strSQL+="SELECT MAX(a1.co_his)";
                strSQL+=" FROM tbh_cabciemencta AS a1";
                intUltReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                intUltReg=Integer.parseInt(""+intUltReg);
                intUltReg++;
                
                stm=con.createStatement();
                strSQL="";
                strSQL+="INSERT INTO tbh_salcta(";
                strSQL+="co_emp, co_cta, co_per, co_his, nd_salcta, fe_his, co_usrhis, tx_tipCie";
                strSQL+=")";
                strSQL+="(";
                strSQL+=" SELECT co_emp, co_cta, co_per, " + intUltReg + " as co_his, nd_salcta, ";
                strSQL+="'" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "' as fe_his,";
                strSQL+=""  + objParSis.getCodigoUsuario() + " as co_usrhis,";
                strSQL+=" 'C'";
                strSQL+=" FROM tbm_salcta";
                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and co_per = " + jspAni.getValue() +  "" + (  (cboMes.getSelectedIndex()+1)<=9?"0" +(cboMes.getSelectedIndex()+1):""+(cboMes.getSelectedIndex()+1) ) + "";
////////////////////////////////////////////////////////////////////
                for(int k=0;k<objTblMod.getRowCountTrue();k++){
                    if(objTblMod.isChecked(k, INT_TBL_DAT_CHK_CTA)){
                        m++;
                    }
                }
                
                if(m!=0){
                    strSQL+=" and co_cta in ( ";
                    for(int j=(arlDatAuxCodCta.size()-1);j>=0;j--){

                        if(j==0){
                            strAux+=objUti.getIntValueAt(arlDatAuxCodCta, j, INT_VEC_COD_CTA);
                        }
                        else{
                            strAux+="" + objUti.getIntValueAt(arlDatAuxCodCta, j, INT_VEC_COD_CTA) + ",";
                        }

                    }
                    strSQL+="" + strAux;
                    strSQL+=" )";                    
                }
////////////////////////////////////////////////////////////////////
                strSQL+=")";
                stm.executeUpdate(strSQL);                    
                stm.close();
                stm=null;
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);            
        }
        return blnRes;        
    }
    
    
    
    private boolean insertaTbmCabCieMenCta(){
        boolean blnRes=true;
        datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="INSERT INTO tbm_cabciemencta(";
                strSQL+=" co_emp, ne_ani, fe_ing, fe_ultmod, co_usring, co_usrmod";
                strSQL+=" )";
                strSQL+=" VALUES(";
                strSQL+="" + objParSis.getCodigoEmpresa() + ",";
                strSQL+="" + jspAni.getValue() + ",";
                strSQL+="'" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "',";
                strSQL+="'" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "',";
                strSQL+="" + objParSis.getCodigoUsuario() + ",";
                strSQL+="" + objParSis.getCodigoUsuario() + "";
                strSQL+=")";
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }            
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
        
    
    private boolean insertaTbmDetCieMenCta(){
        boolean blnRes=true;
        int intFlag=0;
        datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
        try{
            if(con!=null){
                
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    if( objTblMod.isChecked(i, INT_TBL_DAT_CHK_CTA) ){
                        intFlag++;
                    }
                }                
                if(intFlag!=0){
                    for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                        if( objTblMod.isChecked(i, INT_TBL_DAT_CHK_CTA)){
                            stm=con.createStatement();
                            strSQL="";
                            strSQL+="INSERT INTO tbm_detciemencta(";
                            strSQL+="co_emp, ne_ani, ne_mes, co_cta";
                            strSQL+=")";
                            strSQL+=" VALUES (";
                            strSQL+="" + objParSis.getCodigoEmpresa() + ",";
                            strSQL+="" + jspAni.getValue() + ",";
                            strSQL+="" + (cboMes.getSelectedIndex()+1) + ",";
                            strSQL+="" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_CTA) + "";
                            strSQL+=")";
                            stm.executeUpdate(strSQL);
                        }
                    }
                    intFlag=0;
                    stm.close();
                    stm=null;
               }
            }            
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
      private boolean consultarReg(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="select b1.co_emp as codEmpPla, a2.co_cta as codCtaPla, b1.tx_codcta as numCtaPla, b1.tx_deslar as nomCtaPla";
                strSQL+=" from tbm_placta as b1 left outer join (";
                strSQL+=" tbm_cabciemencta as a1 inner join tbm_detciemencta as a2";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani)";
                strSQL+=" on b1.co_emp=a2.co_emp and b1.co_cta=a2.co_cta";
                strSQL+=" where b1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and a2.ne_ani=" + jspAni.getValue() + "";
                strSQL+=" and a2.ne_mes=" + (cboMes.getSelectedIndex()+1) + "";
                strSQL+=" and b1.tx_tipcta='D' and b1.st_reg='A'";
                strSQL+=" order by b1.tx_codcta";
                rst=stm.executeQuery(strSQL);
                while(rst.next()){
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN, "");
                    vecReg.add(INT_TBL_DAT_COD_CTA, "" + ( rst.getString("codCtaPla")==null?"":"" + rst.getInt("codCtaPla") )  );
                    vecReg.add(INT_TBL_DAT_NUM_CTA, "" + ( rst.getString("numCtaPla")==null?"":"" + rst.getString("numCtaPla") )  );
                    vecReg.add(INT_TBL_DAT_NOM_CTA, "" + ( rst.getString("nomCtaPla")==null?"":"" + rst.getString("nomCtaPla") )  );
                    vecReg.add(INT_TBL_DAT_CHK_CTA, "" );
                    if( ! (rst.getString("codCtaPla").toString().equals(""))  ){
                        vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK_CTA);
                    }
                    vecDat.add(vecReg);
                }
                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                blnMarTodChkTblEmp=false;
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
      
      
      private boolean cargarCtaMod(){
          boolean blnRes=true;
          String strCodCtaRst="";
          arlDatAuxCodCta=new ArrayList();
          try{
              con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
              if(con!=null){
                  stm=con.createStatement();

                    if (objTooBar.getEstado()=='x' || objTooBar.getEstado()=='m'){
                        
                      if(intAftConOk==2){
                            strSQL="";
                            strSQL+="(select b1.co_emp as codEmpPla, b1.co_cta as codCtaPla, b1.tx_codcta as numCtaPla, ";
                            strSQL+=" b1.tx_deslar as nomCtaPla, a2.co_cta as codCtaExi from tbm_placta as b1";
                            strSQL+=" left outer join ( tbm_cabciemencta as a1 inner join tbm_detciemencta as a2";
                            strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani and a2.ne_ani=" + jspAni.getValue() + " and a2.ne_mes=" + (cboMes.getSelectedIndex()+1) + ")";
                            strSQL+=" on b1.co_emp=a2.co_emp and b1.co_cta=a2.co_cta";
                            strSQL+=" where b1.co_emp=" + objParSis.getCodigoEmpresa() + " and b1.tx_tipcta='D' and b1.st_reg='A' order by b1.tx_codcta)";
                            rst=stm.executeQuery(strSQL);
                            while(rst.next()){
                                vecReg=new Vector();
                                vecReg.add(INT_TBL_DAT_LIN, "");
                                vecReg.add(INT_TBL_DAT_COD_CTA, "" + ( rst.getString("codCtaPla")==null?"":"" + rst.getInt("codCtaPla") )  );
                                vecReg.add(INT_TBL_DAT_NUM_CTA, "" + ( rst.getString("numCtaPla")==null?"":"" + rst.getString("numCtaPla") )  );
                                vecReg.add(INT_TBL_DAT_NOM_CTA, "" + ( rst.getString("nomCtaPla")==null?"":"" + rst.getString("nomCtaPla") )  );
                                vecReg.add(INT_TBL_DAT_CHK_CTA, ""  );
                                strCodCtaRst="";
                                strCodCtaRst=(rst.getString("codCtaExi")==null?"":rst.getString("codCtaExi"));
                                if( ! (  strCodCtaRst.toString().equals("")  )  ){
                                    vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK_CTA);
                                    arlRegAuxCodCta=new ArrayList();
                                    arlRegAuxCodCta.add(INT_VEC_COD_CTA, "" + strCodCtaRst);
                                    arlDatAuxCodCta.add(arlRegAuxCodCta);                                
                                }
                                vecDat.add(vecReg);

                            }
                      }
                      else{
                            strSQL="";
                            strSQL+="select *from (";
                            strSQL+=" (select b1.co_emp as codEmpPla, a2.co_cta as codCtaPla, b1.tx_codcta as numCtaPla, b1.tx_deslar as nomCtaPla, a2.co_cta as codCtaExi";
                            strSQL+=" from tbm_placta as b1 left outer join (";
                            strSQL+=" tbm_cabciemencta as a1 inner join tbm_detciemencta as a2";
                            strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani)";
                            strSQL+=" on b1.co_emp=a2.co_emp and b1.co_cta=a2.co_cta";
                            strSQL+=" where b1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                            strSQL+=" and a2.ne_ani=" + jspAni.getValue() + "";
                            strSQL+=" and a2.ne_mes=" + (cboMes.getSelectedIndex()+1) + "";
                            strSQL+=" and b1.tx_tipcta='D' and b1.st_reg='A'";
                            strSQL+=" order by b1.tx_codcta)";
                            strSQL+=" union";
                            strSQL+=" (select b1.co_emp as codEmpPla, b1.co_cta as codCtaPla, b1.tx_codcta as numCtaPla, b1.tx_deslar as nomCtaPla, a2.co_cta as codCtaExi";
                            strSQL+=" from tbm_placta as b1 left outer join (";
                            strSQL+=" tbm_cabciemencta as a1 inner join tbm_detciemencta as a2";
                            strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani)";
                            strSQL+=" on b1.co_emp=a2.co_emp and b1.co_cta=a2.co_cta";
                            strSQL+=" where b1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                            strSQL+=" and b1.tx_tipcta='D' and b1.st_reg='A'";
                            strSQL+=" order by b1.tx_codcta)";
                            strSQL+=" ) as x";
                            strSQL+=" order by x.numCtaPla";
                            rst=stm.executeQuery(strSQL);
                            while(rst.next()){
                                vecReg=new Vector();
                                vecReg.add(INT_TBL_DAT_LIN, "");
                                vecReg.add(INT_TBL_DAT_COD_CTA, "" + ( rst.getString("codCtaPla")==null?"":"" + rst.getInt("codCtaPla") )  );
                                vecReg.add(INT_TBL_DAT_NUM_CTA, "" + ( rst.getString("numCtaPla")==null?"":"" + rst.getString("numCtaPla") )  );
                                vecReg.add(INT_TBL_DAT_NOM_CTA, "" + ( rst.getString("nomCtaPla")==null?"":"" + rst.getString("nomCtaPla") )  );
                                vecReg.add(INT_TBL_DAT_CHK_CTA, ""  );
                                vecDat.add(vecReg);

                            }                          
                      }
                        
                        

                    }
                    else{
                        strSQL="";
                        strSQL+=" (select b1.co_emp as codEmpPla, a2.co_cta as codCtaPla, b1.tx_codcta as numCtaPla, b1.tx_deslar as nomCtaPla, a2.co_cta as codCtaExi";
                        strSQL+=" from tbm_placta as b1 left outer join (";
                        strSQL+=" tbm_cabciemencta as a1 inner join tbm_detciemencta as a2";
                        strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani)";
                        strSQL+=" on b1.co_emp=a2.co_emp and b1.co_cta=a2.co_cta";
                        strSQL+=" where b1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+=" and a2.ne_ani=" + jspAni.getValue() + "";
                        strSQL+=" and a2.ne_mes=" + (cboMes.getSelectedIndex()+1) + "";
                        strSQL+=" and b1.tx_tipcta='D' and b1.st_reg='A'";
                        strSQL+=" order by b1.tx_codcta)";
                        rst=stm.executeQuery(strSQL);
                        while(rst.next()){
                            vecReg=new Vector();
                            vecReg.add(INT_TBL_DAT_LIN, "");
                            vecReg.add(INT_TBL_DAT_COD_CTA, "" + ( rst.getString("codCtaPla")==null?"":"" + rst.getInt("codCtaPla") )  );
                            vecReg.add(INT_TBL_DAT_NUM_CTA, "" + ( rst.getString("numCtaPla")==null?"":"" + rst.getString("numCtaPla") )  );
                            vecReg.add(INT_TBL_DAT_NOM_CTA, "" + ( rst.getString("nomCtaPla")==null?"":"" + rst.getString("nomCtaPla") )  );
                            vecReg.add(INT_TBL_DAT_CHK_CTA, ""  );
                            strCodCtaRst="";
                            strCodCtaRst=(rst.getString("codCtaExi")==null?"":rst.getString("codCtaExi"));
                            if( ! (  strCodCtaRst.toString().equals("")  )  ){
                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK_CTA);
                                arlRegAuxCodCta=new ArrayList();
                                arlRegAuxCodCta.add(INT_VEC_COD_CTA, "" + strCodCtaRst);
                                arlDatAuxCodCta.add(arlRegAuxCodCta);                                
                            }
                            vecDat.add(vecReg);

                        }                        
                    }                      

                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                intAftConOk=0;
              }              
          }
          catch(java.sql.SQLException e){
              blnRes=false;
              objUti.mostrarMsgErr_F1(this, e);
          }
       return blnRes;   
      }
      
      
      private boolean actualizarReg(){
          boolean blnRes=true;
          try{
              con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
              if(con!=null){
                  if(insertaTbhSalCta()){
                      if(insertaTbhCabCieMenCta()){
                          if(insertaTbhDetCieMenCta()){
                              if(modificaTbmCabCieMenCta()){
                                  if(deleteTbmDetCieMenCta()){
                                      if(insertaTbmDetCieMenCta()){
                                          con.commit();
                                      }
                                      else{
                                          blnRes=false;
                                          con.rollback();
                                      }
                                  }
                                  else{
                                      blnRes=false;
                                      con.rollback();
                                  }
                                  
                              }
                              else{
                                  blnRes=false;
                                  con.rollback();
                              }
                              
                          }
                          else{
                              blnRes=false;
                              con.rollback();
                          }
                      }
                      else{
                          blnRes=false;
                          con.rollback();
                      }
                  }
                  else{
                      blnRes=false;
                      con.rollback();
                  }
                  
                  con.close();
                  con=null;
                  
              }
              
          }
          catch(java.sql.SQLException e){
              blnRes=false;
              objUti.mostrarMsgErr_F1(this, e);
          }
          catch(Exception e){
              blnRes=false;
              objUti.mostrarMsgErr_F1(this, e);
          }
          return blnRes;
      }
      
      private boolean modificaTbmCabCieMenCta(){
          boolean blnRes=true;
          datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
          try{
              if(con!=null){
                  stm=con.createStatement();
                  strSQL="";
                  strSQL+="UPDATE tbm_cabCieMenCta";
                  strSQL+=" SET fe_ultmod='" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "',";
                  strSQL+=" co_usrmod=" + objParSis.getCodigoUsuario() + "";
                  strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                  strSQL+=" AND ne_ani=" + jspAni.getValue() + "";
                  stm.executeUpdate(strSQL);
                  stm.close();
                  stm=null;
              }
          }
          catch(java.sql.SQLException e){
              blnRes=false;
              objUti.mostrarMsgErr_F1(this, e);
          }
          catch(Exception e){
              blnRes=false;
              objUti.mostrarMsgErr_F1(this, e);              
          }
          return blnRes;          
      }
      
      
      
      private boolean deleteTbmDetCieMenCta(){
          boolean blnRes=true;
          try{
              if(con!=null){
                  stm=con.createStatement();
                  strSQL="";
                  strSQL+="DELETE FROM tbm_detCieMenCta";
                  strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                  strSQL+=" AND ne_ani=" + jspAni.getValue() + "";
                  strSQL+=" AND ne_mes=" + (cboMes.getSelectedIndex()+1) + "";
                  stm.executeUpdate(strSQL);
                  stm.close();
                  stm=null;
              }
          }
          catch(java.sql.SQLException e){
              blnRes=false;
              objUti.mostrarMsgErr_F1(this, e);
          }
          catch(Exception e){
              blnRes=false;
              objUti.mostrarMsgErr_F1(this, e);              
          }
          return blnRes;           
      }
      

    
    private void existeAniMesCerrar(){
        boolean blnRes=true;
        Connection conTmp;
        Statement stmTmp;
        ResultSet rstTmp;
        try{
            conTmp=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conTmp!=null){
                stmTmp=conTmp.createStatement();
                strSQL="";
                strSQL+="select a1.ne_ani, a2.ne_mes, a1.tx_tipCie from tbm_cabCieSis as a1 left outer join tbm_detCieSis as a2";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.ne_ani=a2.ne_ani";
                strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and a1.ne_ani=" + jspAni.getValue() + "";
                rstTmp=stmTmp.executeQuery(strSQL);
                while(rstTmp.next()){
                    arlRegValAniMes=new ArrayList();
                    arlRegValAniMes.add(INT_ARL_ANI, "" + rstTmp.getInt("ne_ani"));
                    arlRegValAniMes.add(INT_ARL_MES, "" + rstTmp.getInt("ne_mes"));
                    arlRegValAniMes.add(INT_ARL_TIP_CIE, "" + rstTmp.getString("tx_tipCie"));
                    arlDatValAniMes.add(arlRegValAniMes);
                }
                conTmp.close();
                conTmp=null;
                stmTmp.close();
                stmTmp=null;
                rstTmp.close();
                rstTmp=null;
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
    }
    
          
    /**
     * Esta funci�n se ejecuta cuando se hace el "MouseClicked" en la cabecera del JTable.
     * Se utiliza �sta funci�n especificamente para marcar todas las casillas de verificaci�n
     * de la columna que indica la bodega seleccionada en el el JTable de bodegas.
     */
    private void tblEmpMouseClicked(java.awt.event.MouseEvent evt){
        int i, intNumFil;
        int intColSel=tblDat.getSelectedColumn();
        try
        {
            intNumFil=objTblMod.getRowCountTrue();
            //Marcar la casilla s�lo si se da 1 click con el bot�n izquierdo.
            if (evt.getButton()==evt.BUTTON1 && evt.getClickCount()==1 && tblDat.columnAtPoint(evt.getPoint())==intColSel)
            {
                if (blnMarTodChkTblEmp){
                    for (i=0; i<intNumFil; i++){
                        objTblMod.setChecked(true, i, intColSel);
                    }
                    blnMarTodChkTblEmp=false;
                }
                else{
                    for (i=0; i<intNumFil; i++){
                        objTblMod.setChecked(false, i, intColSel);
                    }
                    blnMarTodChkTblEmp=true;
                }
            }
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }    
    
      
      
      
      
}
