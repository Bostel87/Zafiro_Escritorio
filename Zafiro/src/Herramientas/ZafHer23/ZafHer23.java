/*
 * ZafHer23.java
 *
 * Created on 18 de julio de 2011, 10:10 PM
 */

package Herramientas.ZafHer23;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafTblUti.ZafTblTot.ZafTblTot;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.util.Vector;
import Librerias.ZafDate.ZafDatePicker;
import Librerias.ZafPerUsr.ZafPerUsr;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaColGrp;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaGrp;
import java.math.BigDecimal;
import java.math.BigInteger;
import javax.swing.JScrollBar;


/**
 *
 * @author  Ingrid Lino
 */
public class ZafHer23 extends javax.swing.JInternalFrame
{
    //Constantes: Columnas del JTable:

    static final int INT_TBL_DAT_VTA_LIN=0;
    static final int INT_TBL_DAT_VTA_COD_EMP=1;
    static final int INT_TBL_DAT_VTA_COD_LOC=2;
    static final int INT_TBL_DAT_VTA_NOM_LOC=3;
    static final int INT_TBL_DAT_VTA_VAL_VTA_MES_UNO=4;
    static final int INT_TBL_DAT_VTA_POR_VTA_MES_UNO=5;
    static final int INT_TBL_DAT_VTA_VAL_VTA_MES_DOS=6;
    static final int INT_TBL_DAT_VTA_POR_VTA_MES_DOS=7;
    static final int INT_TBL_DAT_VTA_VAL_VTA_MES_TRE=8;
    static final int INT_TBL_DAT_VTA_POR_VTA_MES_TRE=9;
    static final int INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT=10;
    static final int INT_TBL_DAT_VTA_DIA_ANT=11;
    static final int INT_TBL_DAT_VTA_DIA_ACT=12;
    static final int INT_TBL_DAT_VTA_ACU_MES=13;
    static final int INT_TBL_DAT_VTA_POR_ACU_MES=14;
    static final int INT_TBL_DAT_VTA_CAL_EXI_DAT=15;
   
    
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblFilCab objTblFilCab, objTblFilCabCos, objTblFilCabRen, objTblFilCabGto;
    private ZafTblMod objTblMod, objTblModTot;
    private ZafTblMod objTblModCos, objTblModRen, objTblModGto;
    private ZafThreadGUI objThrGUI;
    private ZafTblCelRenLbl objTblCelRenLbl, objTblCelRenLblCos, objTblCelRenLblRen, objTblCelRenLblGto;                    //Render: Presentar JLabel en JTable.
    private ZafMouMotAda objMouMotAda;                          //ToolTipText en TableHeader.
    private ZafTblPopMnu objTblPopMnu, objTblPopMnuCos, objTblPopMnuRen, objTblPopMnuGto;                          //PopupMenu: Establecer PopupMenú en JTable.
    private ZafTblBus objTblBus;                                //Editor de búsqueda.
    private ZafTblOrd objTblOrd;                                //JTable de ordenamiento.
    private ZafTblTot objTblTot, objTblTotCos, objTblTotRen, objTblGto, objTblTotGto;                                //JTable de totales.
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg;
    private boolean blnCon;                                     //true: Continua la ejecución del hilo.

    private java.util.Date datFecAux;

    private ZafDatePicker dtpFecSis;
    private ZafPerUsr objPerUsr;

    private JScrollBar barDat, barDatCos, barDatTotCos, barDatRen, barDatTotRen, barDatGto, barDatTotGto;


    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafHer23(ZafParSis obj)
    {
        try
        {
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
            dtpFecSis=new ZafDatePicker(javax.swing.JOptionPane.getFrameForComponent(this),"d/m/y");
            objPerUsr=new ZafPerUsr(objParSis);
            if (!configurarFrm())
                exitForm();
            
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        lblTit = new javax.swing.JLabel();
        panFrm = new javax.swing.JPanel();
        tabFrm = new javax.swing.JTabbedPane();
        panRpt = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        chkVtaCli = new javax.swing.JCheckBox();
        chkVtaGrp = new javax.swing.JCheckBox();
        chkMosSolLocDat = new javax.swing.JCheckBox();
        panCon = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        panRptReg = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable() {
            protected javax.swing.table.JTableHeader createDefaultTableHeader()
            {
                return new ZafTblHeaGrp(columnModel);
            }
        };
        spnTot = new javax.swing.JScrollPane();
        tblTot = new javax.swing.JTable();
        panRptCos = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        spnCos = new javax.swing.JScrollPane();
        tblCos = new javax.swing.JTable() {
            protected javax.swing.table.JTableHeader createDefaultTableHeader()
            {
                return new ZafTblHeaGrp(columnModel);
            }
        };
        spnTotCos = new javax.swing.JScrollPane();
        tblTotCos = new javax.swing.JTable();
        jSplitPane3 = new javax.swing.JSplitPane();
        panRen = new javax.swing.JPanel();
        spnRen = new javax.swing.JScrollPane();
        tblRen = new javax.swing.JTable();
        spnTotRen = new javax.swing.JScrollPane();
        tblTotRen = new javax.swing.JTable();
        panGto = new javax.swing.JPanel();
        spnGto = new javax.swing.JScrollPane();
        tblGto = new javax.swing.JTable();
        spnTotGto = new javax.swing.JScrollPane();
        tblTotGto = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        lblTit.setPreferredSize(new java.awt.Dimension(138, 18));

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panFrm.setAutoscrolls(true);
        panFrm.setPreferredSize(new java.awt.Dimension(475, 311));
        panFrm.setLayout(new java.awt.BorderLayout());

        tabFrm.setPreferredSize(new java.awt.Dimension(475, 311));

        panRpt.setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(100, 42));
        jPanel1.setLayout(null);

        chkVtaCli.setSelected(true);
        chkVtaCli.setText("Ventas a clientes");
        jPanel1.add(chkVtaCli);
        chkVtaCli.setBounds(0, 0, 380, 14);

        chkVtaGrp.setText("Ventas a relacionadas");
        chkVtaGrp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkVtaGrpActionPerformed(evt);
            }
        });
        jPanel1.add(chkVtaGrp);
        chkVtaGrp.setBounds(0, 14, 340, 14);

        chkMosSolLocDat.setSelected(true);
        chkMosSolLocDat.setText("Mostrar sólo locales que tengan movimiento");
        jPanel1.add(chkMosSolLocDat);
        chkMosSolLocDat.setBounds(0, 28, 350, 14);

        panRpt.add(jPanel1, java.awt.BorderLayout.NORTH);

        panCon.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(100);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setOneTouchExpandable(true);

        panRptReg.setBorder(javax.swing.BorderFactory.createTitledBorder("Ventas"));
        panRptReg.setPreferredSize(new java.awt.Dimension(400, 80));
        panRptReg.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnDat.setViewportView(tblDat);

        panRptReg.add(spnDat, java.awt.BorderLayout.CENTER);

        spnTot.setPreferredSize(new java.awt.Dimension(454, 18));

        tblTot.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnTot.setViewportView(tblTot);

        panRptReg.add(spnTot, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setLeftComponent(panRptReg);

        panRptCos.setPreferredSize(new java.awt.Dimension(454, 80));
        panRptCos.setLayout(new java.awt.BorderLayout());

        jPanel5.setPreferredSize(new java.awt.Dimension(100, 80));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jSplitPane2.setDividerLocation(80);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setOneTouchExpandable(true);
        jSplitPane2.setPreferredSize(new java.awt.Dimension(102, 120));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Costos"));
        jPanel4.setPreferredSize(new java.awt.Dimension(80, 40));
        jPanel4.setLayout(new java.awt.BorderLayout());

        spnCos.setPreferredSize(new java.awt.Dimension(452, 100));

        tblCos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnCos.setViewportView(tblCos);

        jPanel4.add(spnCos, java.awt.BorderLayout.CENTER);

        spnTotCos.setPreferredSize(new java.awt.Dimension(454, 18));

        tblTotCos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnTotCos.setViewportView(tblTotCos);

        jPanel4.add(spnTotCos, java.awt.BorderLayout.SOUTH);

        jSplitPane2.setLeftComponent(jPanel4);

        jSplitPane3.setDividerLocation(40);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane3.setOneTouchExpandable(true);

        panRen.setBorder(javax.swing.BorderFactory.createTitledBorder("Rentabilidad Bruta"));
        panRen.setLayout(new java.awt.BorderLayout());

        tblRen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnRen.setViewportView(tblRen);

        panRen.add(spnRen, java.awt.BorderLayout.CENTER);

        spnTotRen.setPreferredSize(new java.awt.Dimension(452, 18));

        tblTotRen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnTotRen.setViewportView(tblTotRen);

        panRen.add(spnTotRen, java.awt.BorderLayout.SOUTH);

        jSplitPane3.setLeftComponent(panRen);

        panGto.setBorder(javax.swing.BorderFactory.createTitledBorder("Gastos"));
        panGto.setLayout(new java.awt.BorderLayout());

        tblGto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnGto.setViewportView(tblGto);

        panGto.add(spnGto, java.awt.BorderLayout.CENTER);

        spnTotGto.setPreferredSize(new java.awt.Dimension(452, 18));

        tblTotGto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnTotGto.setViewportView(tblTotGto);

        panGto.add(spnTotGto, java.awt.BorderLayout.SOUTH);

        jSplitPane3.setRightComponent(panGto);

        jSplitPane2.setRightComponent(jSplitPane3);

        jPanel5.add(jSplitPane2, java.awt.BorderLayout.CENTER);

        panRptCos.add(jPanel5, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(panRptCos);

        panCon.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        panRpt.add(panCon, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Ventas", panRpt);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        panBar.setPreferredSize(new java.awt.Dimension(320, 36));
        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setPreferredSize(new java.awt.Dimension(304, 22));
        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 22));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 22));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 15));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panBar, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acción de acuerdo a la etiqueta del botón ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar"))
        {
            blnCon=true;
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }
        }
        else
        {
            blnCon=false;
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void chkVtaGrpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkVtaGrpActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_chkVtaGrpActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JCheckBox chkMosSolLocDat;
    private javax.swing.JCheckBox chkVtaCli;
    private javax.swing.JCheckBox chkVtaGrp;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panCon;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGto;
    private javax.swing.JPanel panRen;
    private javax.swing.JPanel panRpt;
    private javax.swing.JPanel panRptCos;
    private javax.swing.JPanel panRptReg;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnCos;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JScrollPane spnGto;
    private javax.swing.JScrollPane spnRen;
    private javax.swing.JScrollPane spnTot;
    private javax.swing.JScrollPane spnTotCos;
    private javax.swing.JScrollPane spnTotGto;
    private javax.swing.JScrollPane spnTotRen;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblCos;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblGto;
    private javax.swing.JTable tblRen;
    private javax.swing.JTable tblTot;
    private javax.swing.JTable tblTotCos;
    private javax.swing.JTable tblTotGto;
    private javax.swing.JTable tblTotRen;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.2.3");
            lblTit.setText(strAux);
            //Configurar los JTables.
            configurarTblDat();
            configurarTblDatCos();

            butCon.setVisible(false);
            butCer.setVisible(false);
            if(objParSis.getCodigoUsuario()==1){
                butCon.setVisible(true);
                butCer.setVisible(true);
            }
            else{
                if(objPerUsr.isOpcionEnabled(1553)){
                    butCon.setVisible(true);
                }
                if(objPerUsr.isOpcionEnabled(1554)){
                   butCer.setVisible(true);
                }
            }
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función configura el JTable "tblDat".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDat()
    {
        boolean blnRes=true;
        String strFecSis="";
        int intFecSis[];
        String strFecMesActIni="", strFecMesAntFin="", strSQLTmp="", strFecMesAntIni="", strFecMesActFin="", strUltDiaMesAct="";

        String strNomMesTre="", strNomMesDos="", strNomMesUno="", strNomMesAct="";

        try
        {
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(16);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_VTA_LIN,"");
            vecCab.add(INT_TBL_DAT_VTA_COD_EMP,"Cód.Emp.");
            vecCab.add(INT_TBL_DAT_VTA_COD_LOC,"Cód.Loc.");
            vecCab.add(INT_TBL_DAT_VTA_NOM_LOC,"Local");
            vecCab.add(INT_TBL_DAT_VTA_VAL_VTA_MES_UNO,"Venta");
            vecCab.add(INT_TBL_DAT_VTA_POR_VTA_MES_UNO,"%");
            vecCab.add(INT_TBL_DAT_VTA_VAL_VTA_MES_DOS,"Venta");
            vecCab.add(INT_TBL_DAT_VTA_POR_VTA_MES_DOS,"%");
            vecCab.add(INT_TBL_DAT_VTA_VAL_VTA_MES_TRE,"Venta");
            vecCab.add(INT_TBL_DAT_VTA_POR_VTA_MES_TRE,"%");
            vecCab.add(INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT,"Venta");
            vecCab.add(INT_TBL_DAT_VTA_DIA_ANT,"Día.Ant.");
            vecCab.add(INT_TBL_DAT_VTA_DIA_ACT,"Día.Act.");
            vecCab.add(INT_TBL_DAT_VTA_ACU_MES,"Acu.Mes.");
            vecCab.add(INT_TBL_DAT_VTA_POR_ACU_MES,"%");
            vecCab.add(INT_TBL_DAT_VTA_CAL_EXI_DAT,"Tot.Exi.Dat.");

            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);

            objTblModTot=new ZafTblMod();
            tblTot.setModel(objTblModTot);

            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_VTA_LIN).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_VTA_COD_EMP).setPreferredWidth(40);
            tcmAux.getColumn(INT_TBL_DAT_VTA_COD_LOC).setPreferredWidth(40);
            tcmAux.getColumn(INT_TBL_DAT_VTA_NOM_LOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_UNO).setPreferredWidth(40);
            tcmAux.getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_DOS).setPreferredWidth(40);
            tcmAux.getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_TRE).setPreferredWidth(40);
            tcmAux.getColumn(INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_VTA_DIA_ANT).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_VTA_DIA_ACT).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_VTA_ACU_MES).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_VTA_POR_ACU_MES).setPreferredWidth(40);
            tcmAux.getColumn(INT_TBL_DAT_VTA_CAL_EXI_DAT).setPreferredWidth(80);

            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
//            tcmAux.getColumn(INT_TBL_DAT_BUT_CTA).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Ocultar columnas del sistema.
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_VTA_COD_EMP, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_VTA_COD_LOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_VTA_CAL_EXI_DAT, tblDat);

            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                //for(int i=0; i<3; i++){
                    //if(i==0){
                        strFecSis = objUti.getFechaServidor(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos(),objParSis.getQueryFechaHoraBaseDatos(),objParSis.getFormatoFechaBaseDatos());
                        dtpFecSis.setText(objUti.formatearFecha(strFecSis.trim(),"yyyy-MM-dd", "dd/MM/yyyy"));
                        intFecSis=dtpFecSis.getFecha(dtpFecSis.getText());
                        strFecMesActIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";
                        //Para calcular el rango del mes anterior
                        strSQLTmp="";
                        strSQLTmp+="SELECT CAST('" + strFecMesActIni + "' AS DATE)-1 AS fe_mesAntFin";
                        rst=stm.executeQuery(strSQLTmp);
                        if(rst.next()){
                            strFecMesAntFin=rst.getString("fe_mesAntFin");                  //FECHA FINAL MES ANTERIOR
                        }
                        intFecSis=dtpFecSis.getFecha(objUti.formatearFecha(strFecMesAntFin, "yyyy-MM-dd", "dd/MM/yyyy"));
                        strFecMesAntIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";          //FECHA INICIAL MES ANTERIOR

                        strNomMesUno=objUti.formatearFecha(strFecMesAntFin, "yyyy-MM-dd", "MMMM").toUpperCase();

                    //}
                    //else if(i==1){
                        strFecSis = objUti.formatearFecha(strFecMesAntIni,"yyyy-MM-dd", "yyyy-MM-dd");
                        dtpFecSis.setText(objUti.formatearFecha(strFecSis.trim(),"yyyy-MM-dd", "dd/MM/yyyy"));

                        intFecSis=dtpFecSis.getFecha(dtpFecSis.getText());
                        strFecMesActIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";
                        //Para calcular el rango del mes anterior
                        strSQLTmp="";
                        strSQLTmp+="SELECT CAST('" + strFecMesActIni + "' AS DATE)-1 AS fe_mesAntFin";
                        rst=stm.executeQuery(strSQLTmp);
                        if(rst.next()){
                            strFecMesAntFin=rst.getString("fe_mesAntFin");                  //FECHA FINAL MES ANTERIOR
                        }
                        intFecSis=dtpFecSis.getFecha(objUti.formatearFecha(strFecMesAntFin, "yyyy-MM-dd", "dd/MM/yyyy"));
                        strFecMesAntIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";          //FECHA INICIAL MES ANTERIOR

                        strNomMesDos=objUti.formatearFecha(strFecMesAntFin, "yyyy-MM-dd", "MMMM").toUpperCase();

                    //}
                    //else if(i==2){
                        strFecSis = objUti.formatearFecha(strFecMesAntIni,"yyyy-MM-dd", "yyyy-MM-dd");
                        dtpFecSis.setText(objUti.formatearFecha(strFecSis.trim(),"yyyy-MM-dd", "dd/MM/yyyy"));

                        intFecSis=dtpFecSis.getFecha(dtpFecSis.getText());
                        strFecMesActIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";
                        //Para calcular el rango del mes anterior
                        strSQLTmp="";
                        strSQLTmp+="SELECT CAST('" + strFecMesActIni + "' AS DATE)-1 AS fe_mesAntFin";
                        rst=stm.executeQuery(strSQLTmp);
                        if(rst.next()){
                            strFecMesAntFin=rst.getString("fe_mesAntFin");                  //FECHA FINAL MES ANTERIOR
                        }
                        intFecSis=dtpFecSis.getFecha(objUti.formatearFecha(strFecMesAntFin, "yyyy-MM-dd", "dd/MM/yyyy"));
                        strFecMesAntIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";          //FECHA INICIAL MES ANTERIOR

                        strAux="    AND a1.fe_doc BETWEEN '" + strFecMesAntIni + "' AND '" + strFecMesAntFin + "'";

                        strNomMesTre=objUti.formatearFecha(strFecMesAntFin, "yyyy-MM-dd", "MMMM").toUpperCase();


                    //}



                        strFecSis = objUti.getFechaServidor(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos(),objParSis.getQueryFechaHoraBaseDatos(),objParSis.getFormatoFechaBaseDatos());
                        strNomMesAct=objUti.formatearFecha(strFecSis, "yyyy-MM-dd", "MMMM").toUpperCase();




                    rst.close();
                    rst=null;
                //}
                con.close();
                con=null;

                stm.close();
                stm=null;
            }











//            //datos del mes 3
            ZafTblHeaGrp objTblHeaGrpDatMesTre=(ZafTblHeaGrp)tblDat.getTableHeader();
            objTblHeaGrpDatMesTre.setHeight(16*2);
            ZafTblHeaColGrp objTblHeaColGrpDatMesTre=null;
            objTblHeaColGrpDatMesTre=new ZafTblHeaColGrp(strNomMesTre);
            objTblHeaColGrpDatMesTre.setHeight(16);
            objTblHeaColGrpDatMesTre.add(tcmAux.getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_UNO));
            objTblHeaColGrpDatMesTre.add(tcmAux.getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_UNO));
            objTblHeaGrpDatMesTre.addColumnGroup(objTblHeaColGrpDatMesTre);

            //datos del mes 2
            ZafTblHeaGrp objTblHeaGrpMesDos=(ZafTblHeaGrp)tblDat.getTableHeader();
            objTblHeaGrpMesDos.setHeight(16*2);
            ZafTblHeaColGrp objTblHeaColGrpMesDos=null;
            objTblHeaColGrpMesDos=new ZafTblHeaColGrp(strNomMesDos);
            objTblHeaColGrpMesDos.setHeight(16);
            objTblHeaColGrpMesDos.add(tcmAux.getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_DOS));
            objTblHeaColGrpMesDos.add(tcmAux.getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_DOS));
            objTblHeaGrpMesDos.addColumnGroup(objTblHeaColGrpMesDos);

            //datos del mes 1
            ZafTblHeaGrp objTblHeaGrpDatMesUno=(ZafTblHeaGrp)tblDat.getTableHeader();
            objTblHeaGrpDatMesUno.setHeight(16*2);
            ZafTblHeaColGrp objTblHeaColGrpDatMesUno=null;
            objTblHeaColGrpDatMesUno=new ZafTblHeaColGrp(strNomMesUno);
            objTblHeaColGrpDatMesUno.setHeight(16);
            objTblHeaColGrpDatMesUno.add(tcmAux.getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_TRE));
            objTblHeaColGrpDatMesUno.add(tcmAux.getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_TRE));
            objTblHeaGrpDatMesUno.addColumnGroup(objTblHeaColGrpDatMesUno);


            //datos del mes actual
            ZafTblHeaGrp objTblHeaGrpMesAct=(ZafTblHeaGrp)tblDat.getTableHeader();
            objTblHeaGrpMesAct.setHeight(16*2);
            ZafTblHeaColGrp objTblHeaColGrpMesAct=null;
            objTblHeaColGrpMesAct=new ZafTblHeaColGrp(strNomMesAct);
            objTblHeaColGrpMesAct.setHeight(16);
            objTblHeaColGrpMesAct.add(tcmAux.getColumn(INT_TBL_DAT_VTA_DIA_ANT));
            objTblHeaColGrpMesAct.add(tcmAux.getColumn(INT_TBL_DAT_VTA_DIA_ACT));
            objTblHeaColGrpMesAct.add(tcmAux.getColumn(INT_TBL_DAT_VTA_ACU_MES));
            objTblHeaColGrpMesAct.add(tcmAux.getColumn(INT_TBL_DAT_VTA_POR_ACU_MES));
            objTblHeaGrpMesAct.addColumnGroup(objTblHeaColGrpMesAct);


            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Editor de búsqueda.
            objTblBus=new ZafTblBus(tblDat);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_VTA_LIN).setCellRenderer(objTblFilCab);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_UNO).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_DOS).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_TRE).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VTA_POR_ACU_MES).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VTA_DIA_ANT).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VTA_DIA_ACT).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VTA_ACU_MES).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VTA_CAL_EXI_DAT).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            //Configurar JTable: Establecer la clase que controla el ordenamiento.
            objTblOrd=new ZafTblOrd(tblDat);
            
            //Configurar JTable: Establecer relación entre el JTable de datos y JTable de totales.
            int intCol[]={INT_TBL_DAT_VTA_VAL_VTA_MES_UNO, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT, INT_TBL_DAT_VTA_DIA_ANT, INT_TBL_DAT_VTA_DIA_ACT, INT_TBL_DAT_VTA_ACU_MES};
            
            objTblTot=new ZafTblTot(spnDat, spnTot, tblDat, tblTot, intCol);
            
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta función configura el JTable "tblDat".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDatCos()
    {
        boolean blnRes=true;
        try
        {
            objTblModCos=new ZafTblMod();
            objTblModCos.setHeader(vecCab);
            tblCos.setModel(objTblModCos);

            objTblModRen=new ZafTblMod();
            objTblModRen.setHeader(vecCab);
            tblRen.setModel(objTblModRen);

            objTblModGto=new ZafTblMod();
            objTblModGto.setHeader(vecCab);
            tblGto.setModel(objTblModGto);


            //Configurar JTable: Establecer tipo de selección.
            tblCos.setRowSelectionAllowed(true);
            tblCos.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            tblTotCos.setRowSelectionAllowed(true);
            tblTotCos.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            tblRen.setRowSelectionAllowed(true);
            tblRen.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            tblGto.setRowSelectionAllowed(true);
            tblGto.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCabCos=new ZafTblFilCab(tblCos);
            tblCos.getColumnModel().getColumn(INT_TBL_DAT_VTA_LIN).setCellRenderer(objTblFilCabCos);

            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCabRen=new ZafTblFilCab(tblRen);
            tblRen.getColumnModel().getColumn(INT_TBL_DAT_VTA_LIN).setCellRenderer(objTblFilCabRen);

            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCabGto=new ZafTblFilCab(tblGto);
            tblGto.getColumnModel().getColumn(INT_TBL_DAT_VTA_LIN).setCellRenderer(objTblFilCabGto);

            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblCos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            tblTotCos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            tblRen.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            tblGto.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Igualar el ancho de las columnas del JTable de totales con el JTable de totales.
            for (int j=0; j<tblDat.getColumnCount(); j++){
                tblCos.getColumnModel().getColumn(j).setWidth(tblDat.getColumnModel().getColumn(j).getWidth());
                tblCos.getColumnModel().getColumn(j).setMaxWidth(tblDat.getColumnModel().getColumn(j).getMaxWidth());
                tblCos.getColumnModel().getColumn(j).setMinWidth(tblDat.getColumnModel().getColumn(j).getMinWidth());
                tblCos.getColumnModel().getColumn(j).setPreferredWidth(tblDat.getColumnModel().getColumn(j).getPreferredWidth());
                tblCos.getColumnModel().getColumn(j).setResizable(tblDat.getColumnModel().getColumn(j).getResizable());
            }

            for (int j=0; j<tblDat.getColumnCount(); j++){
                tblRen.getColumnModel().getColumn(j).setWidth(tblDat.getColumnModel().getColumn(j).getWidth());
                tblRen.getColumnModel().getColumn(j).setMaxWidth(tblDat.getColumnModel().getColumn(j).getMaxWidth());
                tblRen.getColumnModel().getColumn(j).setMinWidth(tblDat.getColumnModel().getColumn(j).getMinWidth());
                tblRen.getColumnModel().getColumn(j).setPreferredWidth(tblDat.getColumnModel().getColumn(j).getPreferredWidth());
                tblRen.getColumnModel().getColumn(j).setResizable(tblDat.getColumnModel().getColumn(j).getResizable());
            }

            for (int j=0; j<tblDat.getColumnCount(); j++){
                tblGto.getColumnModel().getColumn(j).setWidth(tblDat.getColumnModel().getColumn(j).getWidth());
                tblGto.getColumnModel().getColumn(j).setMaxWidth(tblDat.getColumnModel().getColumn(j).getMaxWidth());
                tblGto.getColumnModel().getColumn(j).setMinWidth(tblDat.getColumnModel().getColumn(j).getMinWidth());
                tblGto.getColumnModel().getColumn(j).setPreferredWidth(tblDat.getColumnModel().getColumn(j).getPreferredWidth());
                tblGto.getColumnModel().getColumn(j).setResizable(tblDat.getColumnModel().getColumn(j).getResizable());
            }


            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblCos.getTableHeader().setReorderingAllowed(false);
            tblTotCos.getTableHeader().setReorderingAllowed(false);
            tblRen.getTableHeader().setReorderingAllowed(false);
            tblGto.getTableHeader().setReorderingAllowed(false);

            //Configurar JTable: Renderizar celdas.
            objTblCelRenLblCos=new ZafTblCelRenLbl();
            objTblCelRenLblCos.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLblCos.setTipoFormato(objTblCelRenLblCos.INT_FOR_NUM);
            objTblCelRenLblCos.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tblCos.getColumnModel().getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).setCellRenderer(objTblCelRenLblCos);
            tblCos.getColumnModel().getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_UNO).setCellRenderer(objTblCelRenLblCos);
            tblCos.getColumnModel().getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).setCellRenderer(objTblCelRenLblCos);
            tblCos.getColumnModel().getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_DOS).setCellRenderer(objTblCelRenLblCos);
            tblCos.getColumnModel().getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).setCellRenderer(objTblCelRenLblCos);
            tblCos.getColumnModel().getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_TRE).setCellRenderer(objTblCelRenLblCos);
            tblCos.getColumnModel().getColumn(INT_TBL_DAT_VTA_POR_ACU_MES).setCellRenderer(objTblCelRenLblCos);
            tblCos.getColumnModel().getColumn(INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).setCellRenderer(objTblCelRenLblCos);
            tblCos.getColumnModel().getColumn(INT_TBL_DAT_VTA_DIA_ANT).setCellRenderer(objTblCelRenLblCos);
            tblCos.getColumnModel().getColumn(INT_TBL_DAT_VTA_DIA_ACT).setCellRenderer(objTblCelRenLblCos);
            tblCos.getColumnModel().getColumn(INT_TBL_DAT_VTA_ACU_MES).setCellRenderer(objTblCelRenLblCos);
            tblCos.getColumnModel().getColumn(INT_TBL_DAT_VTA_CAL_EXI_DAT).setCellRenderer(objTblCelRenLblCos);
            objTblCelRenLblCos=null;

            //Configurar JTable: Renderizar celdas.
            objTblCelRenLblRen=new ZafTblCelRenLbl();
            objTblCelRenLblRen.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLblRen.setTipoFormato(objTblCelRenLblRen.INT_FOR_NUM);
            objTblCelRenLblRen.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tblRen.getColumnModel().getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).setCellRenderer(objTblCelRenLblRen);
            tblRen.getColumnModel().getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_UNO).setCellRenderer(objTblCelRenLblRen);
            tblRen.getColumnModel().getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).setCellRenderer(objTblCelRenLblRen);
            tblRen.getColumnModel().getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_DOS).setCellRenderer(objTblCelRenLblRen);
            tblRen.getColumnModel().getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).setCellRenderer(objTblCelRenLblRen);
            tblRen.getColumnModel().getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_TRE).setCellRenderer(objTblCelRenLblRen);
            tblRen.getColumnModel().getColumn(INT_TBL_DAT_VTA_POR_ACU_MES).setCellRenderer(objTblCelRenLblRen);
            tblRen.getColumnModel().getColumn(INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).setCellRenderer(objTblCelRenLblRen);
            tblRen.getColumnModel().getColumn(INT_TBL_DAT_VTA_DIA_ANT).setCellRenderer(objTblCelRenLblRen);
            tblRen.getColumnModel().getColumn(INT_TBL_DAT_VTA_DIA_ACT).setCellRenderer(objTblCelRenLblRen);
            tblRen.getColumnModel().getColumn(INT_TBL_DAT_VTA_ACU_MES).setCellRenderer(objTblCelRenLblRen);
            tblRen.getColumnModel().getColumn(INT_TBL_DAT_VTA_CAL_EXI_DAT).setCellRenderer(objTblCelRenLblRen);
            objTblCelRenLblRen=null;

            //Configurar JTable: Renderizar celdas.
            objTblCelRenLblGto=new ZafTblCelRenLbl();
            objTblCelRenLblGto.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLblGto.setTipoFormato(objTblCelRenLblGto.INT_FOR_NUM);
            objTblCelRenLblGto.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tblGto.getColumnModel().getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).setCellRenderer(objTblCelRenLblGto);
            tblGto.getColumnModel().getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_UNO).setCellRenderer(objTblCelRenLblGto);
            tblGto.getColumnModel().getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).setCellRenderer(objTblCelRenLblGto);
            tblGto.getColumnModel().getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_DOS).setCellRenderer(objTblCelRenLblGto);
            tblGto.getColumnModel().getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).setCellRenderer(objTblCelRenLblGto);
            tblGto.getColumnModel().getColumn(INT_TBL_DAT_VTA_POR_VTA_MES_TRE).setCellRenderer(objTblCelRenLblGto);
            tblGto.getColumnModel().getColumn(INT_TBL_DAT_VTA_POR_ACU_MES).setCellRenderer(objTblCelRenLblGto);
            tblGto.getColumnModel().getColumn(INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).setCellRenderer(objTblCelRenLblGto);
            tblGto.getColumnModel().getColumn(INT_TBL_DAT_VTA_DIA_ANT).setCellRenderer(objTblCelRenLblGto);
            tblGto.getColumnModel().getColumn(INT_TBL_DAT_VTA_DIA_ACT).setCellRenderer(objTblCelRenLblGto);
            tblGto.getColumnModel().getColumn(INT_TBL_DAT_VTA_ACU_MES).setCellRenderer(objTblCelRenLblGto);
            tblGto.getColumnModel().getColumn(INT_TBL_DAT_VTA_CAL_EXI_DAT).setCellRenderer(objTblCelRenLblGto);
            objTblCelRenLblGto=null;


            //Evitar que aparezca la barra de desplazamiento horizontal y vertical en el JTable de totales.
            spnDat.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
            spnCos.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
            spnTotCos.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
            spnRen.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
            spnTotRen.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
            //spnGto.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
            //spnTotGto.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

            tblCos.setTableHeader(null);
            tblRen.setTableHeader(null);
            tblGto.setTableHeader(null);

            //Adicionar el listener que controla el redimensionamiento de las columnas.
            ZafTblColModLisCos objTblColModLis=new ZafTblColModLisCos();
            tblDat.getColumnModel().addColumnModelListener(objTblColModLis);

            ZafTblColModLisCos objTblColModLisCos=new ZafTblColModLisCos();
            tblCos.getColumnModel().addColumnModelListener(objTblColModLisCos);

            ZafTblColModLisCos objTblColModLisTotCos=new ZafTblColModLisCos();
            tblTotCos.getColumnModel().addColumnModelListener(objTblColModLisTotCos);

            ZafTblColModLisCos objTblColModLisRen=new ZafTblColModLisCos();
            tblRen.getColumnModel().addColumnModelListener(objTblColModLisRen);

            ZafTblColModLisCos objTblColModLisGto=new ZafTblColModLisCos();
            tblGto.getColumnModel().addColumnModelListener(objTblColModLisGto);


            //Adicionar el listener que controla el desplazamiento del JTable de datos y totales.
            barDat=spnDat.getHorizontalScrollBar();
            barDatCos=spnCos.getHorizontalScrollBar();
            barDatTotCos=spnTotCos.getHorizontalScrollBar();
            barDatRen=spnRen.getHorizontalScrollBar();
            barDatTotRen=spnTotRen.getHorizontalScrollBar();
            barDatGto=spnGto.getHorizontalScrollBar();
            barDatTotGto=spnTotGto.getHorizontalScrollBar();
 

            //PARA DESPLAZAMIENTOS DE CELDAS
            barDat.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
                public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                    barDatCos.setValue(evt.getValue());
                }
            });
            barDat.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
                public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                    barDatTotCos.setValue(evt.getValue());
                }
            });
            barDat.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
                public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                    barDatRen.setValue(evt.getValue());
                }
            });
            barDat.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
                public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                    barDatTotRen.setValue(evt.getValue());
                }
            });
            barDat.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
                public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                    barDatGto.setValue(evt.getValue());
                }
            });
            barDat.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
                public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                    barDatTotGto.setValue(evt.getValue());
                }
            });

            barDatCos.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
                public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                    barDat.setValue(evt.getValue());
                }
            });
            barDatTotCos.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
                public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                    barDat.setValue(evt.getValue());
                }
            });
            barDatRen.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
                public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                    barDat.setValue(evt.getValue());
                }
            });
            barDatTotRen.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
                public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                    barDat.setValue(evt.getValue());
                }
            });
            barDatGto.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
                public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                    barDat.setValue(evt.getValue());
                }
            });
            barDatTotGto.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
                public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                    barDat.setValue(evt.getValue());
                }
            });

            //Configurar JTable: Establecer relación entre el JTable de datos y JTable de totales.
            int intCol[]={INT_TBL_DAT_VTA_VAL_VTA_MES_UNO, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT, INT_TBL_DAT_VTA_DIA_ANT, INT_TBL_DAT_VTA_DIA_ACT, INT_TBL_DAT_VTA_ACU_MES};
            objTblTotCos=new ZafTblTot(spnDat, spnTotCos, tblDat, tblTotCos, intCol);

            //Configurar JTable: Establecer relación entre el JTable de datos y JTable de totales.
            int intColRen[]={INT_TBL_DAT_VTA_VAL_VTA_MES_UNO, INT_TBL_DAT_VTA_POR_VTA_MES_UNO, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS, INT_TBL_DAT_VTA_POR_VTA_MES_DOS, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE, INT_TBL_DAT_VTA_POR_VTA_MES_TRE, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT, INT_TBL_DAT_VTA_POR_ACU_MES, INT_TBL_DAT_VTA_DIA_ANT, INT_TBL_DAT_VTA_DIA_ACT, INT_TBL_DAT_VTA_ACU_MES};
            objTblTotRen=new ZafTblTot(spnDat, spnTotRen, tblDat, tblTotRen, intColRen);

            //Configurar JTable: Establecer relación entre el JTable de datos y JTable de totales.
            objTblTotGto=new ZafTblTot(spnDat, spnTotGto, tblDat, tblTotGto, intCol);


            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnuCos=new ZafTblPopMnu(tblCos);
            objTblPopMnuRen=new ZafTblPopMnu(tblRen);
            objTblPopMnuGto=new ZafTblPopMnu(tblGto);


             objTblPopMnu.addTblPopMnuListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTblPopMnuAdapter() {
                 int intFilEli[];
                public void beforeClick(Librerias.ZafTblUti.ZafTblEvt.ZafTblPopMnuEvent evt) {
                    if (objTblPopMnu.isClickCopiar()){
                    }
                }
                public void afterClick(Librerias.ZafTblUti.ZafTblEvt.ZafTblPopMnuEvent evt) {
                }
            });






//            //Libero los objetos auxiliares.
            //tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

 
    private class ZafTblColModLisCos implements javax.swing.event.TableColumnModelListener{
        public void columnAdded(javax.swing.event.TableColumnModelEvent e){
        }

        public void columnMarginChanged(javax.swing.event.ChangeEvent e){
            int intColSel, intAncCol;
            //PARA CUENTAS
            if (tblDat.getTableHeader().getResizingColumn()!=null){
                intColSel=tblDat.getTableHeader().getResizingColumn().getModelIndex();
                if (intColSel>=0){
                    intAncCol=tblDat.getColumnModel().getColumn(intColSel).getPreferredWidth();
                    tblCos.getColumnModel().getColumn(intColSel).setPreferredWidth(intAncCol);
                    tblTotCos.getColumnModel().getColumn(intColSel).setPreferredWidth(intAncCol);
                    tblRen.getColumnModel().getColumn(intColSel).setPreferredWidth(intAncCol);
                    tblTotRen.getColumnModel().getColumn(intColSel).setPreferredWidth(intAncCol);
                    tblGto.getColumnModel().getColumn(intColSel).setPreferredWidth(intAncCol);
                    tblTotGto.getColumnModel().getColumn(intColSel).setPreferredWidth(intAncCol);
                }
            }
        }

        public void columnMoved(javax.swing.event.TableColumnModelEvent e){
        }

        public void columnRemoved(javax.swing.event.TableColumnModelEvent e){
        }

        public void columnSelectionChanged(javax.swing.event.ListSelectionEvent e){
        }
    }





    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg(){
        boolean blnRes=true;
        String strSQLTmp="", strSQLPri="";
        String strFecSis="";
        int intFecSis[];

        String strFecMesActIni="", strFecMesActFin="", strUltDiaMesAct="";
        String strFecMesAntIni="", strFecMesAntFin="";
        String strCamSel="";
        try{
            pgrSis.setIndeterminate(true);
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            strAux="";
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                for(int i=0; i<6; i++){
                    if(i==0){
                        strFecSis = objUti.getFechaServidor(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos(),objParSis.getQueryFechaHoraBaseDatos(),objParSis.getFormatoFechaBaseDatos());
                        dtpFecSis.setText(objUti.formatearFecha(strFecSis.trim(),"yyyy-MM-dd", "dd/MM/yyyy"));
                        intFecSis=dtpFecSis.getFecha(dtpFecSis.getText());
                        strFecMesActIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";
                        //Para calcular el rango del mes anterior
                        strSQLTmp="";
                        strSQLTmp+="SELECT CAST('" + strFecMesActIni + "' AS DATE)-1 AS fe_mesAntFin";
                        rst=stm.executeQuery(strSQLTmp);
                        if(rst.next()){
                            strFecMesAntFin=rst.getString("fe_mesAntFin");                  //FECHA FINAL MES ANTERIOR
                        }
                        intFecSis=dtpFecSis.getFecha(objUti.formatearFecha(strFecMesAntFin, "yyyy-MM-dd", "dd/MM/yyyy"));
                        strFecMesAntIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";          //FECHA INICIAL MES ANTERIOR
                        strAux="    AND a1.fe_doc BETWEEN '" + strFecMesAntIni + "' AND '" + strFecMesAntFin + "'";
                        //tblDat.getColumnModel().getColumn(INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).setHeaderValue(objUti.formatearFecha(strFecMesAntIni, "yyyy-MM-dd", "MMM"));
                        //tblDat.repaint();
                    }
                    else if(  (i>0) && (i<3)  ){
                        strFecSis = objUti.formatearFecha(strFecMesAntIni,"yyyy-MM-dd", "yyyy-MM-dd");
                        dtpFecSis.setText(objUti.formatearFecha(strFecSis.trim(),"yyyy-MM-dd", "dd/MM/yyyy"));

                        intFecSis=dtpFecSis.getFecha(dtpFecSis.getText());
                        strFecMesActIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";
                        //Para calcular el rango del mes anterior
                        strSQLTmp="";
                        strSQLTmp+="SELECT CAST('" + strFecMesActIni + "' AS DATE)-1 AS fe_mesAntFin";
                        rst=stm.executeQuery(strSQLTmp);
                        if(rst.next()){
                            strFecMesAntFin=rst.getString("fe_mesAntFin");                  //FECHA FINAL MES ANTERIOR
                        }
                        intFecSis=dtpFecSis.getFecha(objUti.formatearFecha(strFecMesAntFin, "yyyy-MM-dd", "dd/MM/yyyy"));
                        strFecMesAntIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";          //FECHA INICIAL MES ANTERIOR
                        strAux="    AND a1.fe_doc BETWEEN '" + strFecMesAntIni + "' AND '" + strFecMesAntFin + "'";

                    }
                    else if( (i==3) ){//dia anterior
                        strFecSis = objUti.getFechaServidor(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos(),objParSis.getQueryFechaHoraBaseDatos(),objParSis.getFormatoFechaBaseDatos());
                        System.out.println("3 se envia -strFecSis: " + strFecSis);
                        int intValDisFec=0;
                        String strFecDiaAntMov="";
                        do{
                            intValDisFec++;
                            strFecDiaAntMov=getFechaExisteMovimientoDiaAnterior(strFecSis, intValDisFec);
                        }
                        while(strFecDiaAntMov.equals(""));

                        strFecSis=strFecDiaAntMov;
                        System.out.println("3 se retorna -strFecSis: " + strFecSis);
                        strAux="    AND a1.fe_doc=CAST('" + strFecSis + "' AS DATE)";


                    }
                    else if( (i==4) ){//dia actual
                        strFecSis = objUti.getFechaServidor(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos(),objParSis.getQueryFechaHoraBaseDatos(),objParSis.getFormatoFechaBaseDatos());
                        strAux="    AND a1.fe_doc=CAST('" + strFecSis + "' AS DATE)";
                    }
                    else if( (i==5) ){//mes actual
                        strFecSis = objUti.getFechaServidor(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos(),objParSis.getQueryFechaHoraBaseDatos(),objParSis.getFormatoFechaBaseDatos());
                        dtpFecSis.setText(objUti.formatearFecha(strFecSis.trim(),"yyyy-MM-dd", "dd/MM/yyyy"));
                        intFecSis=dtpFecSis.getFecha(dtpFecSis.getText());
                        strFecMesActIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";

                        //Para calcular el ultimo dia del mes actual
                        if(  (intFecSis[1])>=12 ){
                            strSQLTmp="";
                            strSQLTmp+="select extract(day from ('" + (intFecSis[2]+1) + "' || '-' || '01-01')::date - '1 day'::interval) AS ne_utlDiaMesAct";
                        }
                        else{
                            strSQLTmp="";
                            strSQLTmp+="select extract(day from ('" + intFecSis[2] + "' || '-' || '" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "' + 1 || '-01')::date - '1 day'::interval) AS ne_utlDiaMesAct";
                        }

                        rst=stm.executeQuery(strSQLTmp);
                        if(rst.next()){
                            strUltDiaMesAct=rst.getString("ne_utlDiaMesAct");   //FECHA FINAL MES Actual
                            System.out.println("strUltDiaMesAct: " + strUltDiaMesAct);
                        }
                        strFecMesActFin=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-" + strUltDiaMesAct;
                        strAux="    AND a1.fe_doc BETWEEN '" + strFecMesActIni + "' AND '" + strFecMesActFin + "'";
                    }

                    strSQL+=" LEFT OUTER JOIN(";
                    strSQL+=" SELECT c1.co_emp, c1.co_loc";
                    strSQL+=" , SUM(c1.nd_venTot) AS e" + (i+3) + "_ndvenTot";
                    strSQL+=" FROM(";
                    if(chkVtaCli.isSelected()){
                        strSQL+=" (SELECT b2.co_itmMae, b1.co_itm, b1.tx_codAlt, b1.tx_nomItm, b3.nd_uniVen";
                        strSQL+=" , b4.nd_stkAct, b1.nd_preVta1, b3.nd_venTot, b3.nd_cosTot, b3.co_emp, b3.co_loc";
                        strSQL+=" FROM tbm_inv AS b1";
                        strSQL+=" INNER JOIN tbm_equInv AS b2 ON (b1.co_emp=b2.co_emp AND b1.co_itm=b2.co_itm)";
                        strSQL+=" INNER JOIN (";
                        strSQL+="       SELECT a4.co_itmMae, -SUM(CASE WHEN (a1.st_tipDev IS NULL OR a1.st_tipDev='C') THEN a2.nd_can ELSE 0 END) AS nd_uniVen";
                        strSQL+="       , -SUM(a2.nd_tot) AS nd_venTot, -SUM(a2.nd_cosTotGrp) AS nd_cosTot, a1.co_emp, a1.co_loc";
                        strSQL+="       FROM (tbm_cabMovInv AS a1";
                        strSQL+="               INNER JOIN tbm_cli AS a7 ON a1.co_emp=a7.co_emp AND a1.co_cli=a7.co_cli";
                        strSQL+="            )";
                        strSQL+="       INNER JOIN tbm_detMovInv as a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc)";
                        strSQL+="       INNER JOIN tbm_cabTipDoc AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                        strSQL+="       INNER JOIN tbm_equInv AS a4 ON (a2.co_emp=a4.co_emp AND a2.co_itm=a4.co_itm)";
                        strSQL+="       WHERE a3.ne_mod=1 and a3.co_tipdoc not in(294)";//Se excluye el 294
                        strSQL+="       AND a1.st_reg IN ('A','R','C','F')";
                        strSQL+="       AND a7.co_empGrp IS NULL";
                        strSQL+=strAux;
                        strSQL+="       GROUP BY a4.co_itmMae, a1.co_emp, a1.co_loc";
                        strSQL+=" ) AS b3 ON (b2.co_itmMae=b3.co_itmMae)";
                        strSQL+=" INNER JOIN (";
                        strSQL+="       SELECT a1.co_itmMae, SUM(a2.nd_stkAct) AS nd_stkAct";
                        strSQL+="       FROM tbm_equInv AS a1";
                        strSQL+="       INNER JOIN tbm_inv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm)";
                        strSQL+="       WHERE a2.co_emp<>" + objParSis.getCodigoEmpresaGrupo();
                        strSQL+="       GROUP BY a1.co_itmMae";
                        strSQL+=" ) AS b4 ON (b2.co_itmMae=b4.co_itmMae)";
                        strSQL+=" WHERE b1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL+=" ORDER BY b1.tx_codAlt)";
                    }
                    if(chkVtaGrp.isSelected()){
                        if(chkVtaCli.isSelected())
                            strSQL+=" UNION ALL";
                        strSQL+=" (SELECT b2.co_itmMae, b1.co_itm, b1.tx_codAlt, b1.tx_nomItm, b3.nd_uniVen";
                        strSQL+=" , b4.nd_stkAct, b1.nd_preVta1, b3.nd_venTot, b3.nd_cosTot";

                        strSQL+=" , b3.co_emp, b3.co_loc";
                        strSQL+=" FROM tbm_inv AS b1";
                        strSQL+=" INNER JOIN tbm_equInv AS b2 ON (b1.co_emp=b2.co_emp AND b1.co_itm=b2.co_itm)";
                        strSQL+=" INNER JOIN (";
                        strSQL+=" SELECT a4.co_itmMae, -SUM(CASE WHEN (a1.st_tipDev IS NULL OR a1.st_tipDev='C') THEN a2.nd_can ELSE 0 END) AS nd_uniVen";
                        strSQL+=", -SUM(a2.nd_tot) AS nd_venTot, -SUM(a2.nd_cosTotGrp) AS nd_cosTot, a1.co_emp, a1.co_loc";
                        strSQL+=" FROM (tbm_cabMovInv AS a1";
                        strSQL+=" INNER JOIN tbm_cli AS a7 ON a1.co_emp=a7.co_emp AND a1.co_cli=a7.co_cli";
                        strSQL+=" )";
                        strSQL+=" INNER JOIN tbm_detMovInv as a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc)";
                        strSQL+=" INNER JOIN tbm_cabTipDoc AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                        strSQL+=" INNER JOIN tbm_equInv AS a4 ON (a2.co_emp=a4.co_emp AND a2.co_itm=a4.co_itm)";
                        strSQL+=" WHERE a3.ne_mod=1 and a3.co_tipdoc not in(294)";//Se excluye el 294
                        strSQL+=" AND a1.st_reg IN ('A','R','C','F')";
                        strSQL+=" AND a7.co_empGrp=" + objParSis.getCodigoEmpresaGrupo() + "";
                        strSQL+=strAux;
                        strSQL+=" GROUP BY a4.co_itmMae, a1.co_emp, a1.co_loc";
                        strSQL+=" ) AS b3 ON (b2.co_itmMae=b3.co_itmMae)";
                        strSQL+=" INNER JOIN (";
                        strSQL+=" SELECT a1.co_itmMae, SUM(a2.nd_stkAct) AS nd_stkAct";
                        strSQL+=" FROM tbm_equInv AS a1";
                        strSQL+=" INNER JOIN tbm_inv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm)";
                        strSQL+=" WHERE a2.co_emp<>" + objParSis.getCodigoEmpresaGrupo();
                        strSQL+=" GROUP BY a1.co_itmMae";
                        strSQL+=" ) AS b4 ON (b2.co_itmMae=b4.co_itmMae)";
                        strSQL+=" WHERE b1.co_emp=" + objParSis.getCodigoEmpresa();
                        strSQL+=" ORDER BY b1.tx_codAlt)";
                    }
                    strSQL+=" ) AS c1";
                    strSQL+=" GROUP BY c1.co_emp, c1.co_loc";
                    strSQL+=") AS e" + (i+3);
                    strSQL+=" ON e1.co_emp=e" + (i+3) + ".co_emp AND e1.co_loc=e" + (i+3) + ".co_loc";
                    strCamSel+=" , e" + (i+3) + "_ndvenTot AS " + "e" + (i+3) + "_ndvenTot" ;
                }
                strSQLPri="";
                strSQLPri+=" SELECT e1.co_emp, e1.tx_nomEmp, e1.co_loc, e1.tx_nomLoc " + strCamSel + " FROM (";
                strSQLPri+="   SELECT a1.co_emp, a1.tx_nom AS tx_nomEmp, a2.co_loc, a2.tx_nom AS tx_nomLoc";
                strSQLPri+="   FROM tbm_emp AS a1 INNER JOIN tbm_loc AS a2";
                strSQLPri+="   ON a1.co_emp=a2.co_emp";
                strSQLPri+="   WHERE a1.st_reg NOT IN('I','E') AND a2.st_reg NOT IN('I','E')";
                strSQLPri+=" ) AS e1";
                strSQLPri+="" + strSQL;
                strSQLPri+=" ORDER BY /*e1.tx_nomEmp,*/ e1.co_emp, e1.co_loc";
                System.out.println("cargarDetReg: " + strSQLPri);
                rst=stm.executeQuery(strSQLPri);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_VTA_LIN,"");
                        vecReg.add(INT_TBL_DAT_VTA_COD_EMP,             rst.getString("co_emp"));
                        vecReg.add(INT_TBL_DAT_VTA_COD_LOC,             rst.getString("co_loc"));
                        vecReg.add(INT_TBL_DAT_VTA_NOM_LOC,             rst.getString("tx_nomLoc"));
                        vecReg.add(INT_TBL_DAT_VTA_VAL_VTA_MES_UNO,     rst.getString("e5_ndvenTot"));
                        vecReg.add(INT_TBL_DAT_VTA_POR_VTA_MES_UNO,     "0");
                        vecReg.add(INT_TBL_DAT_VTA_VAL_VTA_MES_DOS,     rst.getString("e4_ndvenTot"));
                        vecReg.add(INT_TBL_DAT_VTA_POR_VTA_MES_DOS,     "0");
                        vecReg.add(INT_TBL_DAT_VTA_VAL_VTA_MES_TRE,     rst.getString("e3_ndvenTot"));
                        vecReg.add(INT_TBL_DAT_VTA_POR_VTA_MES_TRE,     "0");
                        vecReg.add(INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT, "0");
                        vecReg.add(INT_TBL_DAT_VTA_DIA_ANT,             rst.getString("e6_ndvenTot"));
                        vecReg.add(INT_TBL_DAT_VTA_DIA_ACT,             rst.getString("e7_ndvenTot"));
                        vecReg.add(INT_TBL_DAT_VTA_ACU_MES,             rst.getString("e8_ndvenTot"));
                        vecReg.add(INT_TBL_DAT_VTA_POR_ACU_MES,         "0");
                        vecReg.add(INT_TBL_DAT_VTA_CAL_EXI_DAT,         "0");
                        vecDat.add(vecReg);
                    }
                    else
                    {
                        break;
                    }
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                //Calcular totales.
                objTblTot.calcularTotales();
                calculaPorcentajes();
                if(chkMosSolLocDat.isSelected())
                    eliminaRegistrosSinDatos();
//                if (blnCon)
//                    lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");
//                else
//                    lblMsgSis.setText("Interrupción del usuario. Sólo se procesaron " + tblDat.getRowCount() + " registros.");
//                butCon.setText("Consultar");
//                pgrSis.setIndeterminate(false);

                

            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
   
    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si y No. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    /**
     * Esta función muestra un mensaje de error al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos no se grabaron
     * y que debe comunicar de este particular al administrador del sistema.
     */
    private void mostrarMsgErr(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    
    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podría presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaría informado en todo
     * momento de lo que ocurre. Si se desea hacer ésto es necesario utilizar ésta clase
     * ya que si no sólo se apreciaría los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread{
        public void run(){

            objTblMod.removeAllRows();
            objTblModCos.removeAllRows();
            objTblModGto.removeAllRows();
            objTblModRen.removeAllRows();

            if (cargarDetReg()){
                if(cargarDetRegCosVta()){
                    if(cargarDetRegGto()){
                    }
                }
            }
            else{
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sólo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(0);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }
    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_VTA_COD_EMP:
                    strMsg="Código de la empresa";
                    break;
                case INT_TBL_DAT_VTA_COD_LOC:
                    strMsg="Código del local";
                    break;
                case INT_TBL_DAT_VTA_NOM_LOC:
                    strMsg="Nombre del local";
                    break;
                case INT_TBL_DAT_VTA_VAL_VTA_MES_UNO:
                    strMsg="Venta";
                    break;
                case INT_TBL_DAT_VTA_POR_VTA_MES_UNO:
                    strMsg="Porcentaje de ventas";
                    break;
                case INT_TBL_DAT_VTA_VAL_VTA_MES_DOS:
                    strMsg="Ventas";
                    break;
                case INT_TBL_DAT_VTA_POR_VTA_MES_DOS:
                    strMsg="Porcentaje de ventas";
                    break;
                case INT_TBL_DAT_VTA_VAL_VTA_MES_TRE:
                    strMsg="Ventas";
                    break;
                case INT_TBL_DAT_VTA_POR_VTA_MES_TRE:
                    strMsg="Porcentaje de ventas";
                    break;
                case INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT:
                    strMsg="Total de ventas";
                    break;
                case INT_TBL_DAT_VTA_DIA_ANT:
                    strMsg="Ventas del día anterior";
                    break;
                case INT_TBL_DAT_VTA_DIA_ACT:
                    strMsg="Ventas del día actual";
                    break;
                case INT_TBL_DAT_VTA_ACU_MES:
                    strMsg="Ventas del mes";
                    break;
                case INT_TBL_DAT_VTA_POR_ACU_MES:
                    strMsg="% Acumulado del mes";
                    break;
                default:
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }



    private boolean calculaPorcentajes(){
        boolean blnRes=true;
        BigDecimal bdeValMesUno=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeValMesDos=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeValMesTre=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeValMesAcuAct=new BigDecimal(BigInteger.ZERO);

        BigDecimal bdeSumMesUno=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeSumMesDos=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeSumMesTre=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeSumMesAcuAct=new BigDecimal(BigInteger.ZERO);
        try{
            bdeSumMesUno=new BigDecimal(tblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(tblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":tblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
            bdeSumMesDos=new BigDecimal(tblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(tblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":tblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
            bdeSumMesTre=new BigDecimal(tblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(tblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":tblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));
            bdeSumMesAcuAct=new BigDecimal(tblTot.getValueAt(0, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(tblTot.getValueAt(0, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":tblTot.getValueAt(0, INT_TBL_DAT_VTA_ACU_MES).toString()));

            for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                bdeValMesUno=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
                bdeValMesDos=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
                bdeValMesTre=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));
                bdeValMesAcuAct=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString()));

                objTblMod.setValueAt((bdeValMesUno.divide(bdeSumMesUno, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_VTA_MES_UNO);
                objTblMod.setValueAt((bdeValMesDos.divide(bdeSumMesDos, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_VTA_MES_DOS);
                objTblMod.setValueAt((bdeValMesTre.divide(bdeSumMesTre, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_VTA_MES_TRE);
                objTblMod.setValueAt((bdeValMesAcuAct.divide(bdeSumMesAcuAct, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_ACU_MES);

                //columna de total de ventas
                objTblMod.setValueAt((bdeValMesUno.add(bdeValMesDos).add(bdeValMesTre)), i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT);


            }

        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }


    private boolean calculaColumnaSumaMesesAnteriores(){
        boolean blnRes=true;
        BigDecimal bdeVtaMesUno=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeVtaMesDos=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeVtaMesTre=new BigDecimal(BigInteger.ZERO);

        try{
            for(int i=0; i<objTblModCos.getRowCountTrue(); i++){
                bdeVtaMesUno=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
                bdeVtaMesDos=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
                bdeVtaMesTre=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));

                //columna de total de ventas
                objTblModCos.setValueAt((bdeVtaMesUno.add(bdeVtaMesDos).add(bdeVtaMesTre)), i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT);
            }

        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }



    private boolean calculaPorcentajesRentabilidad(){
        boolean blnRes=true;
        BigDecimal bdeVtaMesUno=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeVtaMesDos=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeVtaMesTre=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeVtaMesAcuAct=new BigDecimal(BigInteger.ZERO);

        BigDecimal bdeRtaBruMesUno=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeRtaBruMesDos=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeRtaBruMesTre=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeRtaBruMesAcuAct=new BigDecimal(BigInteger.ZERO);

        
        try{
            for(int i=0; i<objTblMod.getRowCount(); i++){
                bdeVtaMesUno=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
                bdeVtaMesDos=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
                bdeVtaMesTre=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));
                bdeVtaMesAcuAct=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString()));

                System.out.println("FALLO : " + objTblModRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString());
                System.out.println("-------------");

                bdeRtaBruMesUno=new BigDecimal(objTblModRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(objTblModRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":objTblModRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
                bdeRtaBruMesDos=new BigDecimal(objTblModRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(objTblModRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":objTblModRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
                bdeRtaBruMesTre=new BigDecimal(objTblModRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(objTblModRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":objTblModRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));
                bdeRtaBruMesAcuAct=new BigDecimal(objTblModRen.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(objTblModRen.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":objTblModRen.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString()));

                if(bdeVtaMesUno.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                    objTblModRen.setValueAt((bdeRtaBruMesUno.divide(bdeVtaMesUno, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_VTA_MES_UNO);
                if(bdeVtaMesDos.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                    objTblModRen.setValueAt((bdeRtaBruMesDos.divide(bdeVtaMesDos, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_VTA_MES_DOS);
                if(bdeVtaMesTre.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                    objTblModRen.setValueAt((bdeRtaBruMesTre.divide(bdeVtaMesTre, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_VTA_MES_TRE);

                if(bdeVtaMesAcuAct.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                    objTblModRen.setValueAt((bdeRtaBruMesAcuAct.divide(bdeVtaMesAcuAct, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_ACU_MES);

                //columna de total de ventas
                //objTblModCos.setValueAt((bdeVtaMesUno.add(bdeVtaMesDos).add(bdeVtaMesTre)), i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT);
            }

        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }


    private boolean calculaPorcentajesRentabilidadTotales(){
        boolean blnRes=true;
        BigDecimal bdeVtaMesUno=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeVtaMesDos=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeVtaMesTre=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeVtaMesAcuAct=new BigDecimal(BigInteger.ZERO);

        BigDecimal bdeRtaBruMesUno=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeRtaBruMesDos=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeRtaBruMesTre=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeRtaBruMesAcuAct=new BigDecimal(BigInteger.ZERO);

        try{
            bdeVtaMesUno=new BigDecimal(objTblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(objTblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":objTblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
            System.out.println("bdeVtaMesUno: " + bdeVtaMesUno);
            bdeVtaMesDos=new BigDecimal(objTblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(objTblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":objTblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
            System.out.println("bdeVtaMesDos: " + bdeVtaMesDos);
            bdeVtaMesTre=new BigDecimal(objTblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(objTblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":objTblTot.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));
            System.out.println("bdeVtaMesTre: " + bdeVtaMesTre);
            bdeVtaMesAcuAct=new BigDecimal(objTblTot.getValueAt(0, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(objTblTot.getValueAt(0, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":objTblTot.getValueAt(0, INT_TBL_DAT_VTA_ACU_MES).toString()));
            System.out.println("bdeVtaMesAcuAct: " + bdeVtaMesAcuAct);

            bdeRtaBruMesUno=new BigDecimal(objTblTotRen.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(objTblTotRen.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":objTblTotRen.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
            System.out.println("bdeRtaBruMesUno: " + bdeRtaBruMesUno);
            bdeRtaBruMesDos=new BigDecimal(objTblTotRen.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(objTblTotRen.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":objTblTotRen.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
            System.out.println("bdeRtaBruMesDos: " + bdeRtaBruMesDos);
            bdeRtaBruMesTre=new BigDecimal(objTblTotRen.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(objTblTotRen.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":objTblTotRen.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));
            System.out.println("bdeRtaBruMesTre: " + bdeRtaBruMesTre);
            bdeRtaBruMesAcuAct=new BigDecimal(objTblTotRen.getValueAt(0, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(objTblTotRen.getValueAt(0, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":objTblTotRen.getValueAt(0, INT_TBL_DAT_VTA_ACU_MES).toString()));
            System.out.println("bdeRtaBruMesAcuAct: " + bdeRtaBruMesAcuAct);

            if(bdeVtaMesUno.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                objTblTotRen.setValueAt((bdeRtaBruMesUno.divide(bdeVtaMesUno, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), 0, INT_TBL_DAT_VTA_POR_VTA_MES_UNO);
            if(bdeVtaMesDos.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                objTblTotRen.setValueAt((bdeRtaBruMesDos.divide(bdeVtaMesDos, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), 0, INT_TBL_DAT_VTA_POR_VTA_MES_DOS);
            if(bdeVtaMesTre.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                objTblTotRen.setValueAt((bdeRtaBruMesTre.divide(bdeVtaMesTre, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), 0, INT_TBL_DAT_VTA_POR_VTA_MES_TRE);

            if(bdeVtaMesAcuAct.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                objTblTotRen.setValueAt((bdeRtaBruMesAcuAct.divide(bdeVtaMesAcuAct, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), 0, INT_TBL_DAT_VTA_POR_ACU_MES);

        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }




    private boolean eliminaRegistrosSinDatos(){
        boolean blnRes=true;
        BigDecimal bdeValTotMes=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeValVtaDiaAnt=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeValVtaDiaAct=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeValVtaAcuAct=new BigDecimal(BigInteger.ZERO);

        BigDecimal bdeSumExiDat=new BigDecimal(BigInteger.ZERO);
        try{
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            for(int i=(objTblMod.getRowCountTrue()-1); i>=0; i--){
                bdeValTotMes=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).toString()));
                bdeValVtaDiaAnt=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT).toString()));
                bdeValVtaDiaAct=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT).toString()));
                bdeValVtaAcuAct=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString()));
                //columna que sirve para saber si el registro tiene datos y por tanto debe presentarse o aliminar esa fila
                objTblMod.setValueAt((bdeValTotMes.add(bdeValVtaDiaAnt).add(bdeValVtaDiaAct.add(bdeValVtaAcuAct))), i, INT_TBL_DAT_VTA_CAL_EXI_DAT);
                bdeSumExiDat=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_CAL_EXI_DAT)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_CAL_EXI_DAT).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_CAL_EXI_DAT).toString()));
                if(bdeSumExiDat.compareTo(new BigDecimal(BigInteger.ZERO))<=0)
                    objTblMod.removeRow(i);
            }
            objTblMod.setModoOperacion(objTblMod.INT_TBL_NO_EDI);
            objTblMod.removeEmptyRows();
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }


    private boolean eliminaRegistrosSinDatosCosto(){
        boolean blnRes=true;
        BigDecimal bdeValTotMes=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeValVtaDiaAnt=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeValVtaDiaAct=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeValVtaAcuAct=new BigDecimal(BigInteger.ZERO);

        BigDecimal bdeSumExiDat=new BigDecimal(BigInteger.ZERO);
        try{
            objTblModCos.setModoOperacion(objTblModCos.INT_TBL_INS);
            for(int i=(objTblModCos.getRowCountTrue()-1); i>=0; i--){
                bdeValTotMes=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).toString()));
                bdeValVtaDiaAnt=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT).toString()));
                bdeValVtaDiaAct=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT).toString()));
                bdeValVtaAcuAct=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString()));
                //columna que sirve para saber si el registro tiene datos y por tanto debe presentarse o aliminar esa fila

                objTblModCos.setValueAt((bdeValTotMes.add(bdeValVtaDiaAnt).add(bdeValVtaDiaAct.add(bdeValVtaAcuAct))), i, INT_TBL_DAT_VTA_CAL_EXI_DAT);
                bdeSumExiDat=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_CAL_EXI_DAT)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_CAL_EXI_DAT).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_CAL_EXI_DAT).toString()));
                if(bdeSumExiDat.compareTo(new BigDecimal(BigInteger.ZERO))<=0)
                    objTblModCos.removeRow(i);
            }
            objTblModCos.setModoOperacion(objTblModCos.INT_TBL_NO_EDI);
            objTblModCos.removeEmptyRows();
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }





    private String getFechaExisteMovimientoDiaAnterior(String fechaDiaAnterior, int valorDisminuir){
        ResultSet rstExiFec;
        Statement stmExiFec;
        String strFecDiaAntVal="";
        String strSQLExiMov="";
        try{
            if(con!=null){
                stmExiFec=con.createStatement();
                strSQLExiMov="";
                if(chkVtaCli.isSelected()){
                    strSQLExiMov+=" (SELECT b2.co_itmMae, b1.co_itm";
                    strSQLExiMov+=" ,(CAST('" + fechaDiaAnterior + "' AS DATE) -" + valorDisminuir + ") AS fe_diaAnt";
                    strSQLExiMov+=" FROM tbm_inv AS b1";
                    strSQLExiMov+=" INNER JOIN tbm_equInv AS b2 ON (b1.co_emp=b2.co_emp AND b1.co_itm=b2.co_itm)";
                    strSQLExiMov+=" INNER JOIN (";
                    strSQLExiMov+="       SELECT a4.co_itmMae, -SUM(CASE WHEN (a1.st_tipDev IS NULL OR a1.st_tipDev='C') THEN a2.nd_can ELSE 0 END) AS nd_uniVen";
                    strSQLExiMov+="       , -SUM(a2.nd_tot) AS nd_venTot, -SUM(a2.nd_cosTotGrp) AS nd_cosTot, a1.co_emp, a1.co_loc";
                    strSQLExiMov+="       FROM (tbm_cabMovInv AS a1";
                    strSQLExiMov+="               INNER JOIN tbm_cli AS a7 ON a1.co_emp=a7.co_emp AND a1.co_cli=a7.co_cli";
                    strSQLExiMov+="            )";
                    strSQLExiMov+="       INNER JOIN tbm_detMovInv as a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc)";
                    strSQLExiMov+="       INNER JOIN tbm_cabTipDoc AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                    strSQLExiMov+="       INNER JOIN tbm_equInv AS a4 ON (a2.co_emp=a4.co_emp AND a2.co_itm=a4.co_itm)";
                    strSQLExiMov+="       WHERE a3.ne_mod=1";
                    strSQLExiMov+="       AND a1.st_reg IN ('A','R','C','F')";
                    strSQLExiMov+="       AND a7.co_empGrp IS NULL";
                    strSQLExiMov+="       AND a1.fe_doc=CAST('" + fechaDiaAnterior + "' AS DATE) -" + valorDisminuir;
                    strSQLExiMov+="       GROUP BY a4.co_itmMae, a1.co_emp, a1.co_loc";
                    strSQLExiMov+=" ) AS b3 ON (b2.co_itmMae=b3.co_itmMae)";
                    strSQLExiMov+=" INNER JOIN (";
                    strSQLExiMov+="       SELECT a1.co_itmMae, SUM(a2.nd_stkAct) AS nd_stkAct";
                    strSQLExiMov+="       FROM tbm_equInv AS a1";
                    strSQLExiMov+="       INNER JOIN tbm_inv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm)";
                    strSQLExiMov+="       WHERE a2.co_emp<>" + objParSis.getCodigoEmpresaGrupo();
                    strSQLExiMov+="       GROUP BY a1.co_itmMae";
                    strSQLExiMov+=" ) AS b4 ON (b2.co_itmMae=b4.co_itmMae)";
                    strSQLExiMov+=" WHERE b1.co_emp=" + objParSis.getCodigoEmpresa();
                    strSQLExiMov+=" ORDER BY b1.tx_codAlt)";
                }
                if(chkVtaGrp.isSelected()){
                    if(chkVtaCli.isSelected())
                        strSQLExiMov+=" UNION ALL";
                    strSQLExiMov+=" (SELECT b2.co_itmMae, b1.co_itm";
                    strSQLExiMov+=" ,(CAST('" + fechaDiaAnterior + "' AS DATE) -" + valorDisminuir + ") AS fe_diaAnt";
                    strSQLExiMov+=" FROM tbm_inv AS b1";
                    strSQLExiMov+=" INNER JOIN tbm_equInv AS b2 ON (b1.co_emp=b2.co_emp AND b1.co_itm=b2.co_itm)";
                    strSQLExiMov+=" INNER JOIN (";
                    strSQLExiMov+=" SELECT a4.co_itmMae, -SUM(CASE WHEN (a1.st_tipDev IS NULL OR a1.st_tipDev='C') THEN a2.nd_can ELSE 0 END) AS nd_uniVen";
                    strSQLExiMov+=", -SUM(a2.nd_tot) AS nd_venTot, -SUM(a2.nd_cosTotGrp) AS nd_cosTot, a1.co_emp, a1.co_loc";
                    strSQLExiMov+=" FROM (tbm_cabMovInv AS a1";
                    strSQLExiMov+=" INNER JOIN tbm_cli AS a7 ON a1.co_emp=a7.co_emp AND a1.co_cli=a7.co_cli";
                    strSQLExiMov+=" )";
                    strSQLExiMov+=" INNER JOIN tbm_detMovInv as a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc)";
                    strSQLExiMov+=" INNER JOIN tbm_cabTipDoc AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                    strSQLExiMov+=" INNER JOIN tbm_equInv AS a4 ON (a2.co_emp=a4.co_emp AND a2.co_itm=a4.co_itm)";
                    strSQLExiMov+=" WHERE a3.ne_mod=1";
                    strSQLExiMov+=" AND a1.st_reg IN ('A','R','C','F')";
                    strSQLExiMov+=" AND a7.co_empGrp=" + objParSis.getCodigoEmpresaGrupo() + "";
                    strSQLExiMov+="       AND a1.fe_doc=CAST('" + fechaDiaAnterior + "' AS DATE) -" + valorDisminuir;
                    strSQLExiMov+=" GROUP BY a4.co_itmMae, a1.co_emp, a1.co_loc";
                    strSQLExiMov+=" ) AS b3 ON (b2.co_itmMae=b3.co_itmMae)";
                    strSQLExiMov+=" INNER JOIN (";
                    strSQLExiMov+=" SELECT a1.co_itmMae, SUM(a2.nd_stkAct) AS nd_stkAct";
                    strSQLExiMov+=" FROM tbm_equInv AS a1";
                    strSQLExiMov+=" INNER JOIN tbm_inv AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm)";
                    strSQLExiMov+=" WHERE a2.co_emp<>" + objParSis.getCodigoEmpresaGrupo();
                    strSQLExiMov+=" GROUP BY a1.co_itmMae";
                    strSQLExiMov+=" ) AS b4 ON (b2.co_itmMae=b4.co_itmMae)";
                    strSQLExiMov+=" WHERE b1.co_emp=" + objParSis.getCodigoEmpresa();
                    strSQLExiMov+=" ORDER BY b1.tx_codAlt)";
                }
                rstExiFec=stmExiFec.executeQuery(strSQLExiMov);
                if(rstExiFec.next()){
                    strFecDiaAntVal=rstExiFec.getString("fe_diaAnt");
                }
                stmExiFec.close();
                stmExiFec=null;
                rstExiFec.close();
                rstExiFec=null;
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
         }
        return strFecDiaAntVal;
    }

    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetRegCosVta(){
        boolean blnRes=true;
        String strSQLTmp="", strSQLPri="";
        String strFecSis="";
        int intFecSis[];

        String strFecMesActIni="", strFecMesActFin="", strUltDiaMesAct="";
        String strFecMesAntIni="", strFecMesAntFin="";
        String strCamSel="";
        try{
            strAux="";
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                for(int i=0; i<6; i++){
                    if(i==0){
                        strFecSis = objUti.getFechaServidor(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos(),objParSis.getQueryFechaHoraBaseDatos(),objParSis.getFormatoFechaBaseDatos());
                        dtpFecSis.setText(objUti.formatearFecha(strFecSis.trim(),"yyyy-MM-dd", "dd/MM/yyyy"));
                        intFecSis=dtpFecSis.getFecha(dtpFecSis.getText());
                        strFecMesActIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";
                        //Para calcular el rango del mes anterior
                        strSQLTmp="";
                        strSQLTmp+="SELECT CAST('" + strFecMesActIni + "' AS DATE)-1 AS fe_mesAntFin";
                        rst=stm.executeQuery(strSQLTmp);
                        if(rst.next()){
                            strFecMesAntFin=rst.getString("fe_mesAntFin");                  //FECHA FINAL MES ANTERIOR
                        }
                        intFecSis=dtpFecSis.getFecha(objUti.formatearFecha(strFecMesAntFin, "yyyy-MM-dd", "dd/MM/yyyy"));
                        strFecMesAntIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";          //FECHA INICIAL MES ANTERIOR
                        strAux="    AND b1.fe_dia BETWEEN '" + strFecMesAntIni + "' AND '" + strFecMesAntFin + "'";
                    }
                    else if(  (i>0) && (i<3)  ){
                        strFecSis = objUti.formatearFecha(strFecMesAntIni,"yyyy-MM-dd", "yyyy-MM-dd");
                        dtpFecSis.setText(objUti.formatearFecha(strFecSis.trim(),"yyyy-MM-dd", "dd/MM/yyyy"));

                        intFecSis=dtpFecSis.getFecha(dtpFecSis.getText());
                        strFecMesActIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";
                        //Para calcular el rango del mes anterior
                        strSQLTmp="";
                        strSQLTmp+="SELECT CAST('" + strFecMesActIni + "' AS DATE)-1 AS fe_mesAntFin";
                        rst=stm.executeQuery(strSQLTmp);
                        if(rst.next()){
                            strFecMesAntFin=rst.getString("fe_mesAntFin");                  //FECHA FINAL MES ANTERIOR
                        }
                        intFecSis=dtpFecSis.getFecha(objUti.formatearFecha(strFecMesAntFin, "yyyy-MM-dd", "dd/MM/yyyy"));
                        strFecMesAntIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";          //FECHA INICIAL MES ANTERIOR
                        strAux="    AND b1.fe_dia BETWEEN '" + strFecMesAntIni + "' AND '" + strFecMesAntFin + "'";

                    }
                    else if( (i==3) ){//dia anterior
                        strFecSis = objUti.getFechaServidor(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos(),objParSis.getQueryFechaHoraBaseDatos(),objParSis.getFormatoFechaBaseDatos());
                        System.out.println("3 se envia -strFecSis: " + strFecSis);
                        int intValDisFec=0;
                        String strFecDiaAntMov="";
                        do{
                            intValDisFec++;
                            strFecDiaAntMov=getFechaExisteMovimientoDiaAnterior(strFecSis, intValDisFec);
                        }
                        while(strFecDiaAntMov.equals(""));

                        strFecSis=strFecDiaAntMov;
                        System.out.println("3 se retorna -strFecSis: " + strFecSis);
                        strAux="    AND b1.fe_dia=CAST('" + strFecSis + "' AS DATE)";


                    }
                    else if( (i==4) ){//dia actual
                        strFecSis = objUti.getFechaServidor(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos(),objParSis.getQueryFechaHoraBaseDatos(),objParSis.getFormatoFechaBaseDatos());
                        strAux="    AND b1.fe_dia=CAST('" + strFecSis + "' AS DATE)";
                    }
                    else if( (i==5) ){//mes actual
                        strFecSis = objUti.getFechaServidor(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos(),objParSis.getQueryFechaHoraBaseDatos(),objParSis.getFormatoFechaBaseDatos());
                        dtpFecSis.setText(objUti.formatearFecha(strFecSis.trim(),"yyyy-MM-dd", "dd/MM/yyyy"));
                        intFecSis=dtpFecSis.getFecha(dtpFecSis.getText());
                        strFecMesActIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";

                        //Para calcular el ultimo dia del mes actual
                        if(  (intFecSis[1])>=12 ){
                            strSQLTmp="";
                            strSQLTmp+="select extract(day from ('" + (intFecSis[2]+1) + "' || '-' || '01-01')::date - '1 day'::interval) AS ne_utlDiaMesAct";
                        }
                        else{
                            strSQLTmp="";
                            strSQLTmp+="select extract(day from ('" + intFecSis[2] + "' || '-' || '" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "' + 1 || '-01')::date - '1 day'::interval) AS ne_utlDiaMesAct";
                        }



                        System.out.println("ERROR: " + strSQLTmp);
                        rst=stm.executeQuery(strSQLTmp);
                        if(rst.next()){
                            strUltDiaMesAct=rst.getString("ne_utlDiaMesAct");   //FECHA FINAL MES Actual
                            System.out.println("strUltDiaMesAct: " + strUltDiaMesAct);
                        }
                        strFecMesActFin=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-" + strUltDiaMesAct;
                        strAux="    AND b1.fe_dia BETWEEN '" + strFecMesActIni + "' AND '" + strFecMesActFin + "'";
                    }

                    strSQL+=" LEFT OUTER JOIN(";
                    strSQL+=" SELECT c1.co_emp, c1.co_loc";
                    strSQL+=" , SUM(c1.nd_cosVen) AS e" + (i+3) + "_ndcosVen";
                    strSQL+=" FROM(";
                    if(chkVtaCli.isSelected()){
                        strSQL+="(SELECT b1.co_emp, b1.co_loc, b1.co_tipDoc, b1.co_dia, b2.co_reg";
                        strSQL+=", b1.tx_numDia,  (b2.nd_monDeb - b2.nd_monHab) AS nd_cosVen";
                        strSQL+=", b2.co_cta";
                        strSQL+=" FROM (";
                        strSQL+="	(tbm_cabMovInv AS a1 INNER JOIN tbm_cabDia AS b1";
                        strSQL+=" 		 ON a1.co_emp=b1.co_emp AND a1.co_loc=b1.co_loc AND (48=b1.co_tipDoc OR 49=b1.co_tipDoc OR 235=b1.co_tipDoc OR 236=b1.co_tipDoc) AND a1.co_doc=b1.co_dia";
                        strSQL+=" 		 INNER JOIN tbm_detDia AS b2";
                        strSQL+=" 		 ON b1.co_emp=b2.co_emp AND b1.co_loc=b2.co_loc AND b1.co_tipDoc=b2.co_tipDoc AND b1.co_dia=b2.co_dia";
                        strSQL+=" 		 INNER JOIN tbm_loc AS b3";
                        strSQL+=" 		 ON b2.co_emp=b3.co_emp AND b2.co_loc=b3.co_loc AND b2.co_cta=b3.co_ctaCosVen";
                        strSQL+=" 	)";
                        strSQL+="     INNER JOIN tbm_cli AS a7 ON a1.co_emp=a7.co_emp AND a1.co_cli=a7.co_cli";
                        strSQL+="     )";
                        strSQL+=" INNER JOIN tbm_cabTipDoc AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                        strSQL+=" WHERE a3.ne_mod=1";
                        strSQL+=" AND a1.st_reg IN ('A','R','C','F')";
                        strSQL+=" AND a7.co_empGrp IS NULL";
                        strSQL+=strAux;//AND b1.fe_dia BETWEEN '2011-09-01' AND '2011-09-30'
                        strSQL+=" AND b1.st_reg NOT IN('E','I')";
                        //strSQL+=" AND a7.co_empGrp" + objParSis.getCodigoEmpresaGrupo() + "";  es solo para grupo
                        strSQL+=" GROUP BY b1.co_emp, b1.co_loc, b1.co_tipDoc, b1.co_dia, b2.co_reg";
                        strSQL+=", b1.tx_numDia,  b2.co_cta, b2.nd_monDeb, b2.nd_monHab";
                        strSQL+=" ORDER BY b1.tx_numDia)";
                        System.out.println("AAAA- cargarDetRegCos: " + strSQL);


                    }
                    if(chkVtaGrp.isSelected()){
                        if(chkVtaCli.isSelected())
                            strSQL+=" UNION ";
                        strSQL+="(SELECT b1.co_emp, b1.co_loc, b1.co_tipDoc, b1.co_dia, b2.co_reg";
                        strSQL+=", b1.tx_numDia,  (b2.nd_monDeb - b2.nd_monHab) AS nd_cosVen";
                        strSQL+=", b2.co_cta";
                        strSQL+=" FROM (";
                        strSQL+="	(tbm_cabMovInv AS a1 INNER JOIN tbm_cabDia AS b1";
                        strSQL+=" 		 ON a1.co_emp=b1.co_emp AND a1.co_loc=b1.co_loc AND (48=b1.co_tipDoc OR 49=b1.co_tipDoc OR 235=b1.co_tipDoc OR 236=b1.co_tipDoc) AND a1.co_doc=b1.co_dia";
                        strSQL+=" 		 INNER JOIN tbm_detDia AS b2";
                        strSQL+=" 		 ON b1.co_emp=b2.co_emp AND b1.co_loc=b2.co_loc AND b1.co_tipDoc=b2.co_tipDoc AND b1.co_dia=b2.co_dia";
                        strSQL+=" 		 INNER JOIN tbm_loc AS b3";
                        strSQL+=" 		 ON b2.co_emp=b3.co_emp AND b2.co_loc=b3.co_loc AND b2.co_cta=b3.co_ctaCosVen";
                        strSQL+=" 	)";
                        strSQL+="     INNER JOIN tbm_cli AS a7 ON a1.co_emp=a7.co_emp AND a1.co_cli=a7.co_cli";
                        strSQL+="     )";
                        strSQL+=" INNER JOIN tbm_cabTipDoc AS a3 ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                        strSQL+=" WHERE a3.ne_mod=1";
                        strSQL+=" AND a1.st_reg IN ('A','R','C','F')";
                        strSQL+=strAux;//AND b1.fe_dia BETWEEN '2011-09-01' AND '2011-09-30'
                        strSQL+=" AND b1.st_reg NOT IN('E','I')";
                        strSQL+=" AND a7.co_empGrp=" + objParSis.getCodigoEmpresaGrupo() + "";  //es solo para grupo
                        strSQL+=" GROUP BY b1.co_emp, b1.co_loc, b1.co_tipDoc, b1.co_dia, b2.co_reg";
                        strSQL+=", b1.tx_numDia,  b2.co_cta, b2.nd_monDeb, b2.nd_monHab";
                        strSQL+=" ORDER BY b1.tx_numDia)";

                    }
                    strSQL+=" ) AS c1";
                    strSQL+=" GROUP BY c1.co_emp, c1.co_loc";
                    strSQL+=") AS e" + (i+3);
                    strSQL+=" ON e1.co_emp=e" + (i+3) + ".co_emp AND e1.co_loc=e" + (i+3) + ".co_loc";
                    strCamSel+=" , e" + (i+3) + "_ndcosVen AS " + "e" + (i+3) + "_ndcosVen" ;
                }
                strSQLPri="";
                strSQLPri+=" SELECT e1.co_emp, e1.tx_nomEmp, e1.co_loc, e1.tx_nomLoc " + strCamSel + " FROM (";
                strSQLPri+="   SELECT a1.co_emp, a1.tx_nom AS tx_nomEmp, a2.co_loc, a2.tx_nom AS tx_nomLoc";
                strSQLPri+="   FROM tbm_emp AS a1 INNER JOIN tbm_loc AS a2";
                strSQLPri+="   ON a1.co_emp=a2.co_emp";
                strSQLPri+="   WHERE a1.st_reg NOT IN('I','E') AND a2.st_reg NOT IN('I','E')";
                strSQLPri+=" ) AS e1";
                strSQLPri+="" + strSQL;
                strSQLPri+=" ORDER BY /*e1.tx_nomEmp*/ e1.co_emp, e1.co_loc";
                System.out.println("cargarDetRegCos: " + strSQLPri);
                rst=stm.executeQuery(strSQLPri);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_VTA_LIN,"");
                        vecReg.add(INT_TBL_DAT_VTA_COD_EMP,             rst.getString("co_emp"));
                        vecReg.add(INT_TBL_DAT_VTA_COD_LOC,             rst.getString("co_loc"));
                        vecReg.add(INT_TBL_DAT_VTA_NOM_LOC,             rst.getString("tx_nomLoc"));
                        vecReg.add(INT_TBL_DAT_VTA_VAL_VTA_MES_UNO,     rst.getString("e5_ndcosVen"));
                        vecReg.add(INT_TBL_DAT_VTA_POR_VTA_MES_UNO,     "0");
                        vecReg.add(INT_TBL_DAT_VTA_VAL_VTA_MES_DOS,     rst.getString("e4_ndcosVen"));
                        vecReg.add(INT_TBL_DAT_VTA_POR_VTA_MES_DOS,     "0");
                        vecReg.add(INT_TBL_DAT_VTA_VAL_VTA_MES_TRE,     rst.getString("e3_ndcosVen"));
                        vecReg.add(INT_TBL_DAT_VTA_POR_VTA_MES_TRE,     "0");
                        vecReg.add(INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT, "0");
                        vecReg.add(INT_TBL_DAT_VTA_DIA_ANT,             rst.getString("e6_ndcosVen"));
                        vecReg.add(INT_TBL_DAT_VTA_DIA_ACT,             rst.getString("e7_ndcosVen"));
                        vecReg.add(INT_TBL_DAT_VTA_ACU_MES,             rst.getString("e8_ndcosVen"));
                        vecReg.add(INT_TBL_DAT_VTA_POR_ACU_MES,         "0");
                        vecReg.add(INT_TBL_DAT_VTA_CAL_EXI_DAT,         "0");
                        vecDat.add(vecReg);
                    }
                    else
                    {
                        break;
                    }
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblModCos.setData(vecDat);
                tblCos.setModel(objTblModCos);
                vecDat.clear();
                calcularTotalesCos();
                calculaColumnaSumaMesesAnteriores();
                
                if(chkMosSolLocDat.isSelected()){
                    eliminaRegistrosSinDatosCosto();                    
                }
                //calculaPorcentajesCostos();
                calcularRentabilidadBruta();
                calcularTotalesRentabilidad();
                calculaPorcentajesRentabilidad();
                calculaPorcentajesRentabilidadTotales();
                if (blnCon)
                    lblMsgSis.setText("Se encontraron " + tblCos.getRowCount() + " registros.");
                else
                    lblMsgSis.setText("Interrupción del usuario. Sólo se procesaron " + tblCos.getRowCount() + " registros.");
                butCon.setText("Consultar");
                pgrSis.setIndeterminate(false);



            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private void calcularTotalesCos(){
        BigDecimal bdeTotCos1=new BigDecimal("0");  BigDecimal bdeSumTotCos1=new BigDecimal("0");
        BigDecimal bdeTotCos2=new BigDecimal("0");  BigDecimal bdeSumTotCos2=new BigDecimal("0");
        BigDecimal bdeTotCos3=new BigDecimal("0");  BigDecimal bdeSumTotCos3=new BigDecimal("0");
        BigDecimal bdeTotCos4=new BigDecimal("0");  BigDecimal bdeSumTotCos4=new BigDecimal("0");
        BigDecimal bdeTotCos5=new BigDecimal("0");  BigDecimal bdeSumTotCos5=new BigDecimal("0");
        BigDecimal bdeTotCos6=new BigDecimal("0");  BigDecimal bdeSumTotCos6=new BigDecimal("0");
        BigDecimal bdeTotCos7=new BigDecimal("0");  BigDecimal bdeSumTotCos7=new BigDecimal("0");

        for(int i=0; i<objTblModCos.getRowCountTrue();i++){
            bdeTotCos1=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
            bdeTotCos2=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
            bdeTotCos3=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));
            bdeTotCos4=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).toString()));
            bdeTotCos5=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT).toString()));
            bdeTotCos6=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT).toString()));
            bdeTotCos7=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString()));
            
            bdeSumTotCos1=bdeSumTotCos1.add(bdeTotCos1);            bdeSumTotCos2=bdeSumTotCos2.add(bdeTotCos2);
            bdeSumTotCos3=bdeSumTotCos3.add(bdeTotCos3);            bdeSumTotCos4=bdeSumTotCos4.add(bdeTotCos4);
            bdeSumTotCos5=bdeSumTotCos5.add(bdeTotCos5);            bdeSumTotCos6=bdeSumTotCos6.add(bdeTotCos6);
            bdeSumTotCos7=bdeSumTotCos7.add(bdeTotCos7);            
        }

        tblTotCos.setValueAt(bdeSumTotCos1, 0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO);
        tblTotCos.setValueAt(bdeSumTotCos2, 0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS);
        tblTotCos.setValueAt(bdeSumTotCos3, 0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE);
        tblTotCos.setValueAt(bdeSumTotCos4, 0, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT);
        tblTotCos.setValueAt(bdeSumTotCos5, 0, INT_TBL_DAT_VTA_DIA_ANT);
        tblTotCos.setValueAt(bdeSumTotCos6, 0, INT_TBL_DAT_VTA_DIA_ACT);
        tblTotCos.setValueAt(bdeSumTotCos7, 0, INT_TBL_DAT_VTA_ACU_MES);

    }


    private void calcularTotalesGtos(){
        BigDecimal bdeTotCos1=new BigDecimal("0");  BigDecimal bdeSumTotCos1=new BigDecimal("0");
        BigDecimal bdeTotCos2=new BigDecimal("0");  BigDecimal bdeSumTotCos2=new BigDecimal("0");
        BigDecimal bdeTotCos3=new BigDecimal("0");  BigDecimal bdeSumTotCos3=new BigDecimal("0");
        BigDecimal bdeTotCos4=new BigDecimal("0");  BigDecimal bdeSumTotCos4=new BigDecimal("0");
        BigDecimal bdeTotCos5=new BigDecimal("0");  BigDecimal bdeSumTotCos5=new BigDecimal("0");
        BigDecimal bdeTotCos6=new BigDecimal("0");  BigDecimal bdeSumTotCos6=new BigDecimal("0");
        BigDecimal bdeTotCos7=new BigDecimal("0");  BigDecimal bdeSumTotCos7=new BigDecimal("0");

        for(int i=0; i<objTblModGto.getRowCountTrue();i++){
            bdeTotCos1=new BigDecimal(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
            bdeTotCos2=new BigDecimal(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
            bdeTotCos3=new BigDecimal(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));
            bdeTotCos4=new BigDecimal(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT)==null?"0":(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).toString().equals("")?"0":objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).toString()));
            bdeTotCos5=new BigDecimal(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT)==null?"0":(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT).toString().equals("")?"0":objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT).toString()));
            bdeTotCos6=new BigDecimal(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT)==null?"0":(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT).toString().equals("")?"0":objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT).toString()));
            bdeTotCos7=new BigDecimal(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString()));

            bdeSumTotCos1=bdeSumTotCos1.add(bdeTotCos1);            bdeSumTotCos2=bdeSumTotCos2.add(bdeTotCos2);
            bdeSumTotCos3=bdeSumTotCos3.add(bdeTotCos3);            bdeSumTotCos4=bdeSumTotCos4.add(bdeTotCos4);
            bdeSumTotCos5=bdeSumTotCos5.add(bdeTotCos5);            bdeSumTotCos6=bdeSumTotCos6.add(bdeTotCos6);
            bdeSumTotCos7=bdeSumTotCos7.add(bdeTotCos7);
        }
        tblTotGto.setValueAt(bdeSumTotCos1, 0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO);
        tblTotGto.setValueAt(bdeSumTotCos2, 0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS);
        tblTotGto.setValueAt(bdeSumTotCos3, 0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE);
        tblTotGto.setValueAt(bdeSumTotCos4, 0, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT);
        tblTotGto.setValueAt(bdeSumTotCos5, 0, INT_TBL_DAT_VTA_DIA_ANT);
        tblTotGto.setValueAt(bdeSumTotCos6, 0, INT_TBL_DAT_VTA_DIA_ACT);
        tblTotGto.setValueAt(bdeSumTotCos7, 0, INT_TBL_DAT_VTA_ACU_MES);

    }

    private void calcularRentabilidadBruta(){
        BigDecimal bdeVta=new BigDecimal("0");
        BigDecimal bdeCos=new BigDecimal("0");
        BigDecimal bdeRen=new BigDecimal("0");


        for(int i=0; i<objTblModCos.getRowCountTrue(); i++)
            objTblModRen.insertRow();

        System.out.println("costo: " +  (objTblModCos.getRowCountTrue()-1));
        System.out.println("objTblModRen: " +  objTblModRen.getRowCountTrue());


        for(int i=0; i<objTblModCos.getRowCountTrue();i++){

            System.out.println("i: " +  i);

            bdeVta=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
            bdeCos=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
            bdeRen=bdeVta.subtract(bdeCos);
            objTblModRen.setValueAt(bdeRen, i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO);
            objTblModRen.setValueAt("" + objTblMod.getValueAt(i, INT_TBL_DAT_VTA_NOM_LOC), i, INT_TBL_DAT_VTA_NOM_LOC);

            bdeVta=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
            bdeCos=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
            bdeRen=bdeVta.subtract(bdeCos);
            objTblModRen.setValueAt(bdeRen, i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS);
            objTblModRen.setValueAt("" + objTblMod.getValueAt(i, INT_TBL_DAT_VTA_NOM_LOC), i, INT_TBL_DAT_VTA_NOM_LOC);

            bdeVta=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));
            bdeCos=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));
            bdeRen=bdeVta.subtract(bdeCos);
            objTblModRen.setValueAt(bdeRen, i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE);
            objTblModRen.setValueAt("" + objTblMod.getValueAt(i, INT_TBL_DAT_VTA_NOM_LOC), i, INT_TBL_DAT_VTA_NOM_LOC);

            bdeVta=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).toString()));
            bdeCos=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).toString()));
            bdeRen=bdeVta.subtract(bdeCos);
            objTblModRen.setValueAt(bdeRen, i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT);
            objTblModRen.setValueAt("" + objTblMod.getValueAt(i, INT_TBL_DAT_VTA_NOM_LOC), i, INT_TBL_DAT_VTA_NOM_LOC);

            bdeVta=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT).toString()));
            bdeCos=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT).toString()));
            bdeRen=bdeVta.subtract(bdeCos);
            objTblModRen.setValueAt(bdeRen, i, INT_TBL_DAT_VTA_DIA_ANT);
            objTblModRen.setValueAt("" + objTblMod.getValueAt(i, INT_TBL_DAT_VTA_NOM_LOC), i, INT_TBL_DAT_VTA_NOM_LOC);

            bdeVta=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT).toString()));
            bdeCos=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT).toString()));
            bdeRen=bdeVta.subtract(bdeCos);
            objTblModRen.setValueAt(bdeRen, i, INT_TBL_DAT_VTA_DIA_ACT);
            objTblModRen.setValueAt("" + objTblMod.getValueAt(i, INT_TBL_DAT_VTA_NOM_LOC), i, INT_TBL_DAT_VTA_NOM_LOC);

            bdeVta=new BigDecimal(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(objTblMod.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":objTblMod.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString()));
            bdeCos=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString()));
            bdeRen=bdeVta.subtract(bdeCos);
            objTblModRen.setValueAt(bdeRen, i, INT_TBL_DAT_VTA_ACU_MES);
            objTblModRen.setValueAt("" + objTblMod.getValueAt(i, INT_TBL_DAT_VTA_NOM_LOC), i, INT_TBL_DAT_VTA_NOM_LOC);
        }
    }


    private void calcularTotalesRentabilidad(){
        BigDecimal bdeTotRen1=new BigDecimal("0");  BigDecimal bdeSumTotRen1=new BigDecimal("0");
        BigDecimal bdeTotRen2=new BigDecimal("0");  BigDecimal bdeSumTotRen2=new BigDecimal("0");
        BigDecimal bdeTotRen3=new BigDecimal("0");  BigDecimal bdeSumTotRen3=new BigDecimal("0");
        BigDecimal bdeTotRen4=new BigDecimal("0");  BigDecimal bdeSumTotRen4=new BigDecimal("0");
        BigDecimal bdeTotRen5=new BigDecimal("0");  BigDecimal bdeSumTotRen5=new BigDecimal("0");
        BigDecimal bdeTotRen6=new BigDecimal("0");  BigDecimal bdeSumTotRen6=new BigDecimal("0");
        BigDecimal bdeTotRen7=new BigDecimal("0");  BigDecimal bdeSumTotRen7=new BigDecimal("0");

        for(int i=0; i<tblRen.getRowCount();i++){
            bdeTotRen1=new BigDecimal(tblRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(tblRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":tblRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
            bdeTotRen2=new BigDecimal(tblRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(tblRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":tblRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
            bdeTotRen3=new BigDecimal(tblRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(tblRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":tblRen.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));
            bdeTotRen4=new BigDecimal(tblRen.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT)==null?"0":(tblRen.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).toString().equals("")?"0":tblRen.getValueAt(i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT).toString()));
            bdeTotRen5=new BigDecimal(tblRen.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT)==null?"0":(tblRen.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT).toString().equals("")?"0":tblRen.getValueAt(i, INT_TBL_DAT_VTA_DIA_ANT).toString()));
            bdeTotRen6=new BigDecimal(tblRen.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT)==null?"0":(tblRen.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT).toString().equals("")?"0":tblRen.getValueAt(i, INT_TBL_DAT_VTA_DIA_ACT).toString()));
            bdeTotRen7=new BigDecimal(tblRen.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(tblRen.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":tblRen.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString()));

            bdeSumTotRen1=bdeSumTotRen1.add(bdeTotRen1);            bdeSumTotRen2=bdeSumTotRen2.add(bdeTotRen2);
            bdeSumTotRen3=bdeSumTotRen3.add(bdeTotRen3);            bdeSumTotRen4=bdeSumTotRen4.add(bdeTotRen4);
            bdeSumTotRen5=bdeSumTotRen5.add(bdeTotRen5);            bdeSumTotRen6=bdeSumTotRen6.add(bdeTotRen6);
            bdeSumTotRen7=bdeSumTotRen7.add(bdeTotRen7);
        }
        tblTotRen.setValueAt(bdeSumTotRen1, 0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO);
        tblTotRen.setValueAt(bdeSumTotRen2, 0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS);
        tblTotRen.setValueAt(bdeSumTotRen3, 0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE);
        tblTotRen.setValueAt(bdeSumTotRen4, 0, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT);
        tblTotRen.setValueAt(bdeSumTotRen5, 0, INT_TBL_DAT_VTA_DIA_ANT);
        tblTotRen.setValueAt(bdeSumTotRen6, 0, INT_TBL_DAT_VTA_DIA_ACT);
        tblTotRen.setValueAt(bdeSumTotRen7, 0, INT_TBL_DAT_VTA_ACU_MES);

    }


    private boolean calculaPorcentajesCostos(){
        boolean blnRes=true;
        BigDecimal bdeValMesUno=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeValMesDos=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeValMesTre=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeValMesAcuAct=new BigDecimal(BigInteger.ZERO);

        BigDecimal bdeSumMesUno=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeSumMesDos=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeSumMesTre=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeSumMesAcuAct=new BigDecimal(BigInteger.ZERO);
        try{
            bdeSumMesUno=new BigDecimal(tblTotCos.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(tblTotCos.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":tblTotCos.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
            bdeSumMesDos=new BigDecimal(tblTotCos.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(tblTotCos.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":tblTotCos.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
            bdeSumMesTre=new BigDecimal(tblTotCos.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(tblTotCos.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":tblTotCos.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));
            bdeSumMesAcuAct=new BigDecimal(tblTotCos.getValueAt(0, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(tblTotCos.getValueAt(0, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":tblTotCos.getValueAt(0, INT_TBL_DAT_VTA_ACU_MES).toString()));

            for(int i=0; i<objTblModCos.getRowCountTrue(); i++){
                bdeValMesUno=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
                bdeValMesDos=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
                bdeValMesTre=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));
                bdeValMesAcuAct=new BigDecimal(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":objTblModCos.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString()));

                if(bdeValMesUno.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                    objTblModCos.setValueAt((bdeValMesUno.divide(bdeSumMesUno, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_VTA_MES_UNO);
                if(bdeValMesDos.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                    objTblModCos.setValueAt((bdeValMesDos.divide(bdeSumMesDos, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_VTA_MES_DOS);
                if(bdeValMesTre.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                    objTblModCos.setValueAt((bdeValMesTre.divide(bdeSumMesTre, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_VTA_MES_TRE);
                if(bdeValMesAcuAct.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                    objTblModCos.setValueAt((bdeValMesAcuAct.divide(bdeSumMesAcuAct, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_ACU_MES);
            }

        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }


    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetRegGto(){
        boolean blnRes=true;
        String strSQLTmp="", strSQLPri="";
        String strFecSis="";
        int intFecSis[];

        String strFecMesActIni="";
        String strFecMesAntIni="", strFecMesAntFin="", strPerCorFec="";
        String strCamSel="";
        try{
            strAux="";
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                for(int i=0; i<4; i++){

                    if(i==0){
                        strFecSis = objUti.getFechaServidor(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos(),objParSis.getQueryFechaHoraBaseDatos(),objParSis.getFormatoFechaBaseDatos());
                        dtpFecSis.setText(objUti.formatearFecha(strFecSis.trim(),"yyyy-MM-dd", "dd/MM/yyyy"));
                        intFecSis=dtpFecSis.getFecha(dtpFecSis.getText());
                        strFecMesActIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";
                        //Para calcular el rango del mes anterior
                        strSQLTmp="";
                        strSQLTmp+="SELECT CAST('" + strFecMesActIni + "' AS DATE)-1 AS fe_mesAntFin";
                        rst=stm.executeQuery(strSQLTmp);
                        if(rst.next()){
                            strFecMesAntFin=rst.getString("fe_mesAntFin");                  //FECHA FINAL MES ANTERIOR
                        }
                        intFecSis=dtpFecSis.getFecha(objUti.formatearFecha(strFecMesAntFin, "yyyy-MM-dd", "dd/MM/yyyy"));
                        strFecMesAntIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";          //FECHA INICIAL MES ANTERIOR
                        strPerCorFec=intFecSis[2] + "" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] );
                        strAux="    AND a3.co_per=" + strPerCorFec + "";
                    }
                    else if(  (i>0) && (i<3)  ){
                        strFecSis = objUti.formatearFecha(strFecMesAntIni,"yyyy-MM-dd", "yyyy-MM-dd");
                        dtpFecSis.setText(objUti.formatearFecha(strFecSis.trim(),"yyyy-MM-dd", "dd/MM/yyyy"));

                        intFecSis=dtpFecSis.getFecha(dtpFecSis.getText());
                        strFecMesActIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";
                        //Para calcular el rango del mes anterior
                        strSQLTmp="";
                        strSQLTmp+="SELECT CAST('" + strFecMesActIni + "' AS DATE)-1 AS fe_mesAntFin";
                        rst=stm.executeQuery(strSQLTmp);
                        if(rst.next()){
                            strFecMesAntFin=rst.getString("fe_mesAntFin");                  //FECHA FINAL MES ANTERIOR
                        }
                        intFecSis=dtpFecSis.getFecha(objUti.formatearFecha(strFecMesAntFin, "yyyy-MM-dd", "dd/MM/yyyy"));
                        strFecMesAntIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";          //FECHA INICIAL MES ANTERIOR
                        strPerCorFec=intFecSis[2] + "" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] );
                        strAux="    AND a3.co_per=" + strPerCorFec + "";
                    }
                    else if( (i==3) ){//mes actual
                        strFecSis = objUti.getFechaServidor(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos(),objParSis.getQueryFechaHoraBaseDatos(),objParSis.getFormatoFechaBaseDatos());
                        dtpFecSis.setText(objUti.formatearFecha(strFecSis.trim(),"yyyy-MM-dd", "dd/MM/yyyy"));
                        intFecSis=dtpFecSis.getFecha(dtpFecSis.getText());
                        strFecMesActIni=intFecSis[2] + "-" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] ) + "-01";
                        strPerCorFec=intFecSis[2] + "" + (intFecSis[1]<=9?"0"+intFecSis[1]:intFecSis[1] );

                        strAux="    AND a3.co_per=" + strPerCorFec + "";
                    }

                    strSQL+=" LEFT OUTER JOIN(";
                    strSQL+="   SELECT c1.co_emp, c1.tx_codcta, c1.tx_nomCta ";
                    strSQL+="   , SUM(c1.nd_salCtaGto) AS e" + (i+3) + "_ndsalCtaGto";
                    strSQL+="   FROM(";

                    strSQL+="   (SELECT a1.co_emp, a1.co_cta, a1.ne_niv,  a1.tx_codCta, a1.tx_desLar AS tx_nomCta, a2.co_cta AS co_ctaCfg";
                    strSQL+="   , a3.nd_salCta AS nd_salCtaGto";
                    strSQL+="   FROM (tbm_plaCta AS a1 INNER JOIN tbr_ctaPrg AS a2";
                    strSQL+="		ON a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta)";
                    strSQL+=" 		 INNER JOIN tbm_salCta AS a3";
                    strSQL+=" 		 ON a1.co_emp=a3.co_emp AND a1.co_cta=a3.co_cta";
                    if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                        strSQL+=" 		 WHERE a1.co_emp<>" + objParSis.getCodigoEmpresaGrupo() + "";
                    else
                        strSQL+=" 		 WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+=" 		 AND a1.ne_niv<=3";
                    strSQL+=" 		 AND a1.tx_niv1 NOT IN ('1', '2', '3')";
                    strSQL+=" 		 AND a2.co_mnu=2977";//este codigo de menu es del programa donde se configuran las cuentas contables para gastos mostrados aqui
                    strSQL+=" 		 " + strAux;//AND a3.co_per=201107
                    strSQL+=" 		 GROUP BY a1.co_emp, a1.co_cta, a1.ne_niv,  a1.tx_codCta, a1.tx_desLar, a2.co_cta,a3.nd_salCta";
                    strSQL+=" 		 ORDER BY a1.tx_codCta)";
                    strSQL+="   ) AS c1";
                    strSQL+="   GROUP BY c1.co_emp, c1.tx_codcta, c1.tx_nomCta";
                    strSQL+="   having SUM(c1.nd_salCtaGto)<>0";
                    strSQL+=") AS e" + (i+3);
                    strSQL+=" ON e1.co_emp=e" + (i+3) + ".co_emp AND e1.tx_codcta=e" + (i+3) + ".tx_codcta AND e1.tx_nomCta=e" + (i+3) + ".tx_nomCta";
                    strCamSel+=" , SUM(e" + (i+3) + "_ndsalCtaGto) AS " + "e" + (i+3) + "_ndsalCtaGto" ;
                    //strCamGrpBy+=" , e" + (i+3) + "_ndsalCtaGto";
                }
                strSQLPri="";
                strSQLPri+=" SELECT /*e1.co_emp, e1.tx_nomEmp,*/ e1.tx_nomCta, e1.tx_codcta" + strCamSel + " FROM (";
                strSQLPri+="    SELECT a1.co_emp, a1.tx_nom AS tx_nomEmp, a2.tx_deslar AS tx_nomCta, a2.tx_codcta";
                strSQLPri+="    FROM tbm_emp AS a1 INNER JOIN tbm_plaCta AS a2 ";
                strSQLPri+="    ON a1.co_emp=a2.co_emp";
                strSQLPri+="    INNER JOIN tbr_ctaPrg AS a3";
                strSQLPri+="		ON a2.co_emp=a3.co_emp AND a2.co_cta=a3.co_cta";

                strSQLPri+="    WHERE a1.st_reg NOT IN('I','E') AND a2.st_reg NOT IN('I','E') AND a1.co_emp<>" + objParSis.getCodigoEmpresaGrupo() + "";
                strSQLPri+=" ) AS e1";
                strSQLPri+="" + strSQL;
                strSQLPri+=" GROUP BY /*e1.co_emp, e1.tx_nomEmp,*/ e1.tx_nomCta, e1.tx_codcta";// + strCamGrpBy;
                strSQLPri+=" ORDER BY e1.tx_nomCta";
                System.out.println("cargarDetRegGto: " + strSQLPri);
                rst=stm.executeQuery(strSQLPri);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_VTA_LIN,"");
                        vecReg.add(INT_TBL_DAT_VTA_COD_EMP,             "0");
                        vecReg.add(INT_TBL_DAT_VTA_COD_LOC,             rst.getString("tx_codcta"));
                        vecReg.add(INT_TBL_DAT_VTA_NOM_LOC,             rst.getString("tx_nomCta"));
                        vecReg.add(INT_TBL_DAT_VTA_VAL_VTA_MES_UNO,     rst.getString("e5_ndsalCtaGto"));
                        vecReg.add(INT_TBL_DAT_VTA_POR_VTA_MES_UNO,     "0");
                        vecReg.add(INT_TBL_DAT_VTA_VAL_VTA_MES_DOS,     rst.getString("e4_ndsalCtaGto"));
                        vecReg.add(INT_TBL_DAT_VTA_POR_VTA_MES_DOS,     "0");
                        vecReg.add(INT_TBL_DAT_VTA_VAL_VTA_MES_TRE,     rst.getString("e3_ndsalCtaGto"));
                        vecReg.add(INT_TBL_DAT_VTA_POR_VTA_MES_TRE,     "0");
                        vecReg.add(INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT, "0");
                        vecReg.add(INT_TBL_DAT_VTA_DIA_ANT,             "0");
                        vecReg.add(INT_TBL_DAT_VTA_DIA_ACT,             "0");
                        vecReg.add(INT_TBL_DAT_VTA_ACU_MES,             rst.getString("e6_ndsalCtaGto"));
                        vecReg.add(INT_TBL_DAT_VTA_POR_ACU_MES,         "0");
                        vecReg.add(INT_TBL_DAT_VTA_CAL_EXI_DAT,         "0");
                        vecDat.add(vecReg);
                    }
                    else
                    {
                        break;
                    }
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblModGto.setData(vecDat);
                tblGto.setModel(objTblModGto);
                vecDat.clear();

                calcularTotalesGtos();
                calculaPorcentajesGastos();
                
                if (blnCon)
                    lblMsgSis.setText("Se encontraron " + tblCos.getRowCount() + " registros.");
                else
                    lblMsgSis.setText("Interrupción del usuario. Sólo se procesaron " + tblCos.getRowCount() + " registros.");
                butCon.setText("Consultar");
                pgrSis.setIndeterminate(false);



            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    private boolean calculaPorcentajesGastos(){
        boolean blnRes=true;
        BigDecimal bdeValMesUno=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeValMesDos=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeValMesTre=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeValMesAcuAct=new BigDecimal(BigInteger.ZERO);

        BigDecimal bdeSumMesUno=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeSumMesDos=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeSumMesTre=new BigDecimal(BigInteger.ZERO);
        BigDecimal bdeSumMesAcuAct=new BigDecimal(BigInteger.ZERO);
        try{
            bdeSumMesUno=new BigDecimal(tblTotGto.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(tblTotGto.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":tblTotGto.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
            bdeSumMesDos=new BigDecimal(tblTotGto.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(tblTotGto.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":tblTotGto.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
            bdeSumMesTre=new BigDecimal(tblTotGto.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(tblTotGto.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":tblTotGto.getValueAt(0, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));
            bdeSumMesAcuAct=new BigDecimal(tblTotGto.getValueAt(0, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(tblTotGto.getValueAt(0, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":tblTotGto.getValueAt(0, INT_TBL_DAT_VTA_ACU_MES).toString()));

            for(int i=0; i<objTblModGto.getRowCountTrue(); i++){
                bdeValMesUno=new BigDecimal(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO)==null?"0":(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString().equals("")?"0":objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_UNO).toString()));
                bdeValMesDos=new BigDecimal(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS)==null?"0":(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString().equals("")?"0":objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_DOS).toString()));
                bdeValMesTre=new BigDecimal(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE)==null?"0":(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString().equals("")?"0":objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_VAL_VTA_MES_TRE).toString()));
                bdeValMesAcuAct=new BigDecimal(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES)==null?"0":(objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString().equals("")?"0":objTblModGto.getValueAt(i, INT_TBL_DAT_VTA_ACU_MES).toString()));

                
                if(bdeSumMesUno.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                    objTblModGto.setValueAt((bdeValMesUno.divide(bdeSumMesUno, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_VTA_MES_UNO);
                if(bdeSumMesDos.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                    objTblModGto.setValueAt((bdeValMesDos.divide(bdeSumMesDos, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_VTA_MES_DOS);
                if(bdeValMesTre.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                    objTblModGto.setValueAt((bdeValMesTre.divide(bdeSumMesTre, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_VTA_MES_TRE);
                if(bdeSumMesAcuAct.compareTo(new BigDecimal(BigInteger.ZERO))>0)
                    objTblModGto.setValueAt((bdeValMesAcuAct.divide(bdeSumMesAcuAct, objParSis.getDecimalesBaseDatos(), BigDecimal.ROUND_HALF_UP)).multiply(new BigDecimal("100")), i, INT_TBL_DAT_VTA_POR_ACU_MES);

                //columna de total de ventas
                objTblModGto.setValueAt((bdeValMesUno.add(bdeValMesDos).add(bdeValMesTre)), i, INT_TBL_DAT_VTA_TOT_VAL_VTA_MES_ANT);
            }

        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }



}