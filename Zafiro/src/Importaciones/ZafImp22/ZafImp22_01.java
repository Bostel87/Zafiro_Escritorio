/*
 * ZafVen01_01.java
 *
 * Created on 9 de marzo de 2006, 9:12
 *
 * v0.1 
 */
package Importaciones.ZafImp22;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
//import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
//import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
//import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import java.math.BigDecimal;
import Librerias.ZafVenCon.ZafVenCon;
import java.util.ArrayList;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
/**
 *
 * @author  Ingrid Lino v0.2 al 20Mar2013
 * se adiciona el poder dar click sobre el header y q se seleccionen todos los items con sus respecticas cantidades
 * 
 */
public class ZafImp22_01 extends javax.swing.JDialog {
    
    
    //Constantes: Columnas del JTable:    
    //Variable
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod;
    private ZafTblEdi objTblEdi;                        //Editor: Editor del JTable.
    private boolean blnCon;                             //true: Continua la ejecucián del hilo.
    private ZafColNumerada objColNum;
    private ZafTblBus objTblBus;
    private ZafTblPopMnu objTblPopMnu;

    private Connection con, conRemTmp;
    private Statement stm;
    private ResultSet rst;
    
    private ZafTblCelRenLbl objTblCelRenLbl;
    private ZafTblOrd objTblOrd;                        //JTable de ordenamiento.
    
    /** Creates new form ZafCom33_01 */
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_CHK=1;
    final int INT_TBL_DAT_COD_EMP_REL=2;
    final int INT_TBL_DAT_COD_LOC_REL=3;
    final int INT_TBL_DAT_COD_TIP_DOC_REL=4;
    final int INT_TBL_DAT_COD_DOC_REL=5;
    final int INT_TBL_DAT_COD_REG_REL=6;
    final int INT_TBL_DAT_COD_ITM_GRP=7;
    final int INT_TBL_DAT_COD_ITM_EMP=8;
    final int INT_TBL_DAT_COD_ITM_MAE=9;
    final int INT_TBL_DAT_COD_ALT_ITM=10;
    final int INT_TBL_DAT_NOM_ITM=11;
    final int INT_TBL_DAT_DES_COR_UNI_MED=12;
    final int INT_TBL_DAT_DES_LAR_UNI_MED=13;
    final int INT_TBL_DAT_STK_ACT=14;
    final int INT_TBL_DAT_CAN_DIS=15;
    final int INT_TBL_DAT_CAN_SEL=16;

    
    
    
    
    private ZafVenCon vcoItm;                           //Ventana de consulta "Item".
    
    private Vector vecReg, vecDat, vecCab, vecAux;
        
    private ZafThreadGUI objThrGUI;
    String strSQL, strAux;
    private String strCodAlt, strNomItm;                //Contenido del campo al obtener el foco.
      
    private ArrayList arlReg, arlDat;
    final int INT_ARL_COD_EMP_REL=0;
    final int INT_ARL_COD_LOC_REL=1;
    final int INT_ARL_COD_TIP_DOC_REL=2;
    final int INT_ARL_COD_DOC_REL=3;
    final int INT_ARL_COD_REG_REL=4;
    final int INT_ARL_COD_ITM_GRP=5;
    final int INT_ARL_COD_ITM_EMP=6;
    final int INT_ARL_COD_ITM_MAE=7;
    final int INT_ARL_COD_ALT_ITM=8;
    final int INT_ARL_NOM_ITM=9;
    final int INT_ARL_DES_COR_UNI_MED=10;
    final int INT_ARL_DES_LAR_UNI_MED=11;
    final int INT_ARL_CAN_ORD_SEL=12;
    final int INT_ARL_CAN_DIS=13;      
    
    private int intCboPedSelCodEmp;
    private int intCboPedSelCodLoc;
    private int intCboPedSelCodTipDoc;
    private int intCboPedSelCodDoc;
    private ZafTblCelEdiTxt objTblCelEdiTxt;
    
    private char chrOpcOpeTooBar;
    
    
    private boolean blnMarChk; 
    
     public ZafImp22_01(java.awt.Frame parent, boolean modal, ZafParSis obj) {
        super(parent, modal);
        try {
            initComponents();
              //Inicializar objetos.
            objParSis = (ZafParSis) obj.clone();
            configurarFrm();
        }
        catch (CloneNotSupportedException e) {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGen = new javax.swing.JPanel();
        panFil = new javax.swing.JPanel();
        panTodItm = new javax.swing.JPanel();
        optTodItm = new javax.swing.JRadioButton();
        lblBen = new javax.swing.JLabel();
        txtCodBod = new javax.swing.JTextField();
        txtNomBod = new javax.swing.JTextField();
        panFilItm = new javax.swing.JPanel();
        panItmSel = new javax.swing.JPanel();
        optItmSel = new javax.swing.JRadioButton();
        lblItm = new javax.swing.JLabel();
        txtCodAltItm = new javax.swing.JTextField();
        txtNomItm = new javax.swing.JTextField();
        butItm = new javax.swing.JButton();
        txtCodItm = new javax.swing.JTextField();
        panFilCodAltItm = new javax.swing.JPanel();
        panItmDesHas = new javax.swing.JPanel();
        lblItmDes = new javax.swing.JLabel();
        txtCodAltItmDes = new javax.swing.JTextField();
        lblItmHas = new javax.swing.JLabel();
        txtCodAltItmHas = new javax.swing.JTextField();
        panItmTer = new javax.swing.JPanel();
        lblItmTer = new javax.swing.JLabel();
        txtCodAltItmTer = new javax.swing.JTextField();
        panDat = new javax.swing.JPanel();
        spnHis = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        panBotExe = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butAce = new javax.swing.JButton();
        butCan = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lblInf = new javax.swing.JLabel();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        panPrgSis = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        PanFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título");
        lblTit.setPreferredSize(new java.awt.Dimension(39, 14));
        PanFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panGen.setLayout(new java.awt.BorderLayout());

        panFil.setPreferredSize(new java.awt.Dimension(9, 116));
        panFil.setLayout(new java.awt.BorderLayout());

        panTodItm.setPreferredSize(new java.awt.Dimension(0, 38));
        panTodItm.setLayout(null);

        optTodItm.setSelected(true);
        optTodItm.setText("Todos los items");
        optTodItm.setPreferredSize(new java.awt.Dimension(93, 16));
        optTodItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTodItmActionPerformed(evt);
            }
        });
        panTodItm.add(optTodItm);
        optTodItm.setBounds(0, 24, 580, 14);

        lblBen.setText("Bodega:");
        lblBen.setToolTipText("Bodega en la que se debe hacer el conteo");
        panTodItm.add(lblBen);
        lblBen.setBounds(6, 2, 60, 20);

        txtCodBod.setEditable(false);
        panTodItm.add(txtCodBod);
        txtCodBod.setBounds(70, 2, 56, 20);

        txtNomBod.setEditable(false);
        panTodItm.add(txtNomBod);
        txtNomBod.setBounds(127, 2, 273, 20);

        panFil.add(panTodItm, java.awt.BorderLayout.NORTH);

        panFilItm.setLayout(new java.awt.BorderLayout());

        panItmSel.setPreferredSize(new java.awt.Dimension(100, 37));
        panItmSel.setLayout(null);

        optItmSel.setText("Sólo los items que cumplan el criterio seleccionado");
        optItmSel.setPreferredSize(new java.awt.Dimension(93, 16));
        optItmSel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optItmSelActionPerformed(evt);
            }
        });
        panItmSel.add(optItmSel);
        optItmSel.setBounds(0, 0, 580, 16);

        lblItm.setText("Item:");
        lblItm.setToolTipText("Beneficiario");
        panItmSel.add(lblItm);
        lblItm.setBounds(6, 16, 30, 20);

        txtCodAltItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodAltItmActionPerformed(evt);
            }
        });
        txtCodAltItm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodAltItmFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodAltItmFocusLost(evt);
            }
        });
        panItmSel.add(txtCodAltItm);
        txtCodAltItm.setBounds(70, 16, 56, 20);

        txtNomItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomItmActionPerformed(evt);
            }
        });
        txtNomItm.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomItmFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomItmFocusLost(evt);
            }
        });
        panItmSel.add(txtNomItm);
        txtNomItm.setBounds(127, 16, 264, 20);

        butItm.setText("...");
        butItm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butItmActionPerformed(evt);
            }
        });
        panItmSel.add(butItm);
        butItm.setBounds(391, 16, 20, 20);
        panItmSel.add(txtCodItm);
        txtCodItm.setBounds(49, 16, 20, 20);

        panFilItm.add(panItmSel, java.awt.BorderLayout.NORTH);

        panFilCodAltItm.setLayout(new java.awt.GridLayout(1, 0));

        panItmDesHas.setBorder(javax.swing.BorderFactory.createTitledBorder("Código alterno del item"));
        panItmDesHas.setLayout(null);

        lblItmDes.setText("Desde:");
        panItmDesHas.add(lblItmDes);
        lblItmDes.setBounds(30, 18, 50, 14);

        txtCodAltItmDes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodAltItmDesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodAltItmDesFocusLost(evt);
            }
        });
        panItmDesHas.add(txtCodAltItmDes);
        txtCodAltItmDes.setBounds(90, 14, 70, 20);

        lblItmHas.setText("Hasta:");
        panItmDesHas.add(lblItmHas);
        lblItmHas.setBounds(190, 18, 50, 14);

        txtCodAltItmHas.setVerifyInputWhenFocusTarget(false);
        txtCodAltItmHas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodAltItmHasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodAltItmHasFocusLost(evt);
            }
        });
        panItmDesHas.add(txtCodAltItmHas);
        txtCodAltItmHas.setBounds(240, 14, 70, 20);

        panFilCodAltItm.add(panItmDesHas);

        panItmTer.setBorder(javax.swing.BorderFactory.createTitledBorder("Código alterno del item"));
        panItmTer.setLayout(null);

        lblItmTer.setText("Terminan con:");
        panItmTer.add(lblItmTer);
        lblItmTer.setBounds(30, 18, 90, 14);

        txtCodAltItmTer.setVerifyInputWhenFocusTarget(false);
        txtCodAltItmTer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodAltItmTerFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodAltItmTerFocusLost(evt);
            }
        });
        panItmTer.add(txtCodAltItmTer);
        txtCodAltItmTer.setBounds(110, 14, 140, 20);

        panFilCodAltItm.add(panItmTer);

        panFilItm.add(panFilCodAltItm, java.awt.BorderLayout.CENTER);

        panFil.add(panFilItm, java.awt.BorderLayout.CENTER);

        panGen.add(panFil, java.awt.BorderLayout.NORTH);

        panDat.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnHis.setViewportView(tblDat);

        panDat.add(spnHis, java.awt.BorderLayout.CENTER);

        panGen.add(panDat, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panGen);

        PanFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setPreferredSize(new java.awt.Dimension(639, 42));
        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setPreferredSize(new java.awt.Dimension(639, 29));
        panBot.setLayout(new java.awt.BorderLayout());

        panBotExe.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 1));

        butCon.setMnemonic('s');
        butCon.setText("Consultar");
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBotExe.add(butCon);

        butAce.setMnemonic('A');
        butAce.setText("Aceptar");
        butAce.setPreferredSize(new java.awt.Dimension(92, 25));
        butAce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAceActionPerformed(evt);
            }
        });
        panBotExe.add(butAce);

        butCan.setMnemonic('C');
        butCan.setText("Cancelar");
        butCan.setToolTipText("Si presiona cancelar se borrará lo que ha ingresado");
        butCan.setPreferredSize(new java.awt.Dimension(92, 25));
        butCan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCanActionPerformed(evt);
            }
        });
        panBotExe.add(butCan);

        panBot.add(panBotExe, java.awt.BorderLayout.EAST);

        jPanel2.setLayout(new java.awt.BorderLayout());

        lblInf.setFont(new java.awt.Font("MS Sans Serif", 0, 10)); // NOI18N
        lblInf.setText("Si presiona cancelar se borrará el contenido ingresado");
        jPanel2.add(lblInf, java.awt.BorderLayout.CENTER);

        panBot.add(jPanel2, java.awt.BorderLayout.CENTER);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 16));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        panPrgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panPrgSis.setMinimumSize(new java.awt.Dimension(24, 26));
        panPrgSis.setPreferredSize(new java.awt.Dimension(200, 15));
        panPrgSis.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        panPrgSis.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(panPrgSis, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        PanFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(PanFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
//        objTblMod.removeAllRows();
//        dispose();
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            limpiarFrm();
            txtCodBod.setText("");
            txtNomBod.setText("");
            dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        if (tblDat.getRowCount()>0)
        {
            if (tblDat.getSelectedRow()==-1)
            {
                tblDat.setRowSelectionInterval(0,0);
            }
            tblDat.requestFocus();
        }
        else
        {
            butCon.requestFocus();
        }
    }//GEN-LAST:event_formWindowActivated

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        // TODO add your handling code here:
        //Realizar acción de acuerdo a la etiqueta del botón ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar")){
            blnCon=true;
            if (objThrGUI==null){
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
        }
        else{
            blnCon=false;
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butAceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAceActionPerformed
        // TODO add your handling code here:        
        cargarItemSeleccionadoArrayList();
        objTblMod.removeAllRows();
        dispose();
    }//GEN-LAST:event_butAceActionPerformed

    private void butCanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCanActionPerformed
        // TODO add your handling code here:
        formWindowClosing(null);
//        objTblMod.removeAllRows();
//        dispose();
    }//GEN-LAST:event_butCanActionPerformed

private void txtCodAltItmDesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltItmDesFocusGained
// TODO add your handling code here:
    txtCodAltItmDes.selectAll();
}//GEN-LAST:event_txtCodAltItmDesFocusGained

private void txtCodAltItmDesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltItmDesFocusLost
// TODO add your handling code here:
    if (txtCodAltItmDes.getText().length()>0){
        optItmSel.setSelected(true);
        optTodItm.setSelected(false);
        if (txtCodAltItmHas.getText().length()==0)
            txtCodAltItmHas.setText(txtCodAltItmDes.getText());
    }
}//GEN-LAST:event_txtCodAltItmDesFocusLost

private void txtCodAltItmHasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltItmHasFocusGained
// TODO add your handling code here:
    txtCodAltItmHas.selectAll();
}//GEN-LAST:event_txtCodAltItmHasFocusGained

private void txtCodAltItmHasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltItmHasFocusLost
// TODO add your handling code here:
    if (txtCodAltItmHas.getText().length()>0){
        optItmSel.setSelected(true);
        optTodItm.setSelected(false);
    }
}//GEN-LAST:event_txtCodAltItmHasFocusLost

private void txtCodAltItmTerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltItmTerFocusGained
// TODO add your handling code here:
    txtCodAltItmTer.selectAll();
}//GEN-LAST:event_txtCodAltItmTerFocusGained

private void txtCodAltItmTerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltItmTerFocusLost
// TODO add your handling code here:
    if (txtCodAltItmTer.getText().length()>0){
        optItmSel.setSelected(true);
        optTodItm.setSelected(false);
    }
}//GEN-LAST:event_txtCodAltItmTerFocusLost

private void txtCodAltItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodAltItmActionPerformed
// TODO add your handling code here:
    txtCodAltItm.transferFocus();
}//GEN-LAST:event_txtCodAltItmActionPerformed

private void txtCodAltItmFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltItmFocusGained
// TODO add your handling code here:
    strCodAlt=txtCodAltItm.getText();
    txtCodAltItm.selectAll();
}//GEN-LAST:event_txtCodAltItmFocusGained

private void txtCodAltItmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodAltItmFocusLost
// TODO add your handling code here:
//Validar el contenido de la celda sólo si ha cambiado.
    if (!txtCodAltItm.getText().equalsIgnoreCase(strCodAlt))
    {
        if (txtCodAltItm.getText().equals(""))
        {
            txtCodItm.setText("");
            txtCodAltItm.setText("");
            txtNomItm.setText("");
        }
        else
        {
            mostrarVenConItm(1);
        }
    }
    else
        txtCodAltItm.setText(strCodAlt);
    
    if(txtCodAltItm.getText().length()>0){
        optTodItm.setSelected(false);
        optItmSel.setSelected(true);
        txtCodAltItmDes.setText("");
        txtCodAltItmHas.setText("");
        txtCodAltItmTer.setText("");
    }
}//GEN-LAST:event_txtCodAltItmFocusLost

private void txtNomItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomItmActionPerformed
// TODO add your handling code here:
    txtNomItm.transferFocus();
}//GEN-LAST:event_txtNomItmActionPerformed

private void txtNomItmFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomItmFocusGained
// TODO add your handling code here:
    strNomItm=txtNomItm.getText();
    txtNomItm.selectAll();
}//GEN-LAST:event_txtNomItmFocusGained

private void txtNomItmFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomItmFocusLost
// TODO add your handling code here:
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtNomItm.getText().equalsIgnoreCase(strNomItm))
        {
            if (txtNomItm.getText().equals(""))
            {
                txtCodItm.setText("");
                txtCodAltItm.setText("");
                txtNomItm.setText("");
            }
            else
            {
                mostrarVenConItm(2);
            }
        }
        else
            txtNomItm.setText(strNomItm);
        
    if(txtNomItm.getText().length()>0){
        optTodItm.setSelected(false);
        optItmSel.setSelected(true);
        txtCodAltItmDes.setText("");
        txtCodAltItmHas.setText("");
        txtCodAltItmTer.setText("");
    }
        
}//GEN-LAST:event_txtNomItmFocusLost

private void butItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butItmActionPerformed
// TODO add your handling code here:
    mostrarVenConItm(0);
    if(txtNomItm.getText().length()>0){
        optTodItm.setSelected(false);
        optItmSel.setSelected(true);
        txtCodAltItmDes.setText("");
        txtCodAltItmHas.setText("");
        txtCodAltItmTer.setText("");
    }
}//GEN-LAST:event_butItmActionPerformed

private void optItmSelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optItmSelActionPerformed
// TODO add your handling code here:
    if(optItmSel.isSelected())
        optTodItm.setSelected(false);
}//GEN-LAST:event_optItmSelActionPerformed

private void optTodItmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTodItmActionPerformed
// TODO add your handling code here:
    if(optTodItm.isSelected())
        optItmSel.setSelected(false);
}//GEN-LAST:event_optTodItmActionPerformed
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanFrm;
    private javax.swing.JButton butAce;
    private javax.swing.JButton butCan;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butItm;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblBen;
    private javax.swing.JLabel lblInf;
    private javax.swing.JLabel lblItm;
    private javax.swing.JLabel lblItmDes;
    private javax.swing.JLabel lblItmHas;
    private javax.swing.JLabel lblItmTer;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optItmSel;
    private javax.swing.JRadioButton optTodItm;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panBotExe;
    private javax.swing.JPanel panDat;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFilCodAltItm;
    private javax.swing.JPanel panFilItm;
    private javax.swing.JPanel panGen;
    private javax.swing.JPanel panItmDesHas;
    private javax.swing.JPanel panItmSel;
    private javax.swing.JPanel panItmTer;
    private javax.swing.JPanel panPrgSis;
    private javax.swing.JPanel panTodItm;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnHis;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodAltItm;
    private javax.swing.JTextField txtCodAltItmDes;
    private javax.swing.JTextField txtCodAltItmHas;
    private javax.swing.JTextField txtCodAltItmTer;
    private javax.swing.JTextField txtCodBod;
    private javax.swing.JTextField txtCodItm;
    private javax.swing.JTextField txtNomBod;
    private javax.swing.JTextField txtNomItm;
    // End of variables declaration//GEN-END:variables
       
  
    
    /** Cerrar la aplicacián. */
    private void exitForm(){
        dispose();
    }    


    
    private boolean configurarFrm(){
        boolean blnRes=true;
        try{
            arlDat=new ArrayList();
            vecDat=new Vector();
            vecDat.clear();
            vecCab=new Vector(17);
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN, "");
            vecCab.add(INT_TBL_DAT_CHK, "");
            vecCab.add(INT_TBL_DAT_COD_EMP_REL, "Cód.Emp.Rel");
            vecCab.add(INT_TBL_DAT_COD_LOC_REL, "Cód.Loc.Rel.");
            vecCab.add(INT_TBL_DAT_COD_TIP_DOC_REL, "Cód.Tip.Doc.Rel.");
            vecCab.add(INT_TBL_DAT_COD_DOC_REL, "Cód.Doc.Rel.");
            vecCab.add(INT_TBL_DAT_COD_REG_REL, "Cód.Reg.Rel.");
            vecCab.add(INT_TBL_DAT_COD_ITM_GRP, "Cód.Itm.");
            vecCab.add(INT_TBL_DAT_COD_ITM_EMP, "Cód.Itm.Emp.");
            vecCab.add(INT_TBL_DAT_COD_ITM_MAE, "Cód.Itm.Mae.");
            vecCab.add(INT_TBL_DAT_COD_ALT_ITM, "Cód.Alt.");
            vecCab.add(INT_TBL_DAT_NOM_ITM, "Item");
            vecCab.add(INT_TBL_DAT_DES_COR_UNI_MED, "Uni.Med.");
            vecCab.add(INT_TBL_DAT_DES_LAR_UNI_MED, "UNI.MED.");
            vecCab.add(INT_TBL_DAT_STK_ACT, "Stock");
            vecCab.add(INT_TBL_DAT_CAN_DIS, "Can.Dis.");
            vecCab.add(INT_TBL_DAT_CAN_SEL, "Can.Ped.");
            
            
            objUti=new ZafUtil();
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);            
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            objColNum=new ZafColNumerada(tblDat, INT_TBL_DAT_LIN);
            //Configurar JTable: Establecer tipo de seleccián.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el mená de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_CHK).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP_REL).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC_REL).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC_REL).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC_REL).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_REG_REL).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM_GRP).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM_EMP).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM_MAE).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_COD_ALT_ITM).setPreferredWidth(90);
            tcmAux.getColumn(INT_TBL_DAT_NOM_ITM).setPreferredWidth(120);
            tcmAux.getColumn(INT_TBL_DAT_DES_COR_UNI_MED).setPreferredWidth(6);
            tcmAux.getColumn(INT_TBL_DAT_DES_LAR_UNI_MED).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_STK_ACT).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_CAN_DIS).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_CAN_SEL).setPreferredWidth(60);
            
            //Configurar ZafTblMod: Establecer el tipo de dato de las columnas.
            objTblMod.setColumnDataType(INT_TBL_DAT_CAN_SEL, objTblMod.INT_COL_DBL, new Integer(0), null);

            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_STK_ACT).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_CAN_DIS).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_CAN_SEL).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
            objTblCelEdiTxt=new ZafTblCelEdiTxt(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CAN_SEL).setCellEditor(objTblCelEdiTxt);
            objTblCelEdiTxt.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    objTblMod.setChecked(true, tblDat.getSelectedRow(), INT_TBL_DAT_CHK);
                }
            });
            
            
            
            
//            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP_REL).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC_REL).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC_REL).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC_REL).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_COD_REG_REL).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_COD_ITM_MAE).setResizable(false);
            
            //Configurar JTable: Ocultar columnas del sistema.
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_EMP_REL, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_LOC_REL, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_TIP_DOC_REL, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_DOC_REL, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_REG_REL, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_ITM_GRP, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_ITM_EMP, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_DES_LAR_UNI_MED, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_ITM_MAE, tblDat);
            
            
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            tblDat.getTableHeader().addMouseMotionListener(new ZafMouMotAda());
            


            objTblBus=new ZafTblBus(tblDat);
            
            configurarVenConItm();
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            vecAux=new Vector();
//            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            vecAux.add("" + INT_TBL_DAT_CHK);
            vecAux.add("" + INT_TBL_DAT_CAN_SEL);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            
            //Configurar JTable: Establecer la clase que controla el ordenamiento.
            objTblOrd=new ZafTblOrd(tblDat);
            
            //Configurar JTable: Establecer los listener para el TableHeader.
            tblDat.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tblMouseClicked(evt);
                }
            });   
            
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter{
        public void mouseMoved(java.awt.event.MouseEvent evt){
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol){
                case INT_TBL_DAT_COD_EMP_REL:
                    strMsg="Código de empresa relacionada";
                    break;
                case INT_TBL_DAT_COD_LOC_REL:
                    strMsg="Código de local relacionada";
                    break;
                case INT_TBL_DAT_COD_TIP_DOC_REL:
                    strMsg="Código de tipo de documento relacionado";
                    break;
                case INT_TBL_DAT_COD_DOC_REL:
                    strMsg="Código de documento relacionado";
                    break;
                case INT_TBL_DAT_COD_REG_REL:
                    strMsg="Código de registro relacionado";
                    break;
                case INT_TBL_DAT_COD_ITM_GRP:
                    strMsg="Código de item de grupo";
                    break;
                case INT_TBL_DAT_COD_ITM_EMP:
                    strMsg="Código de item de empresa";
                    break;
                case INT_TBL_DAT_COD_ITM_MAE:
                    strMsg="Código de item maestro";
                    break;
                case INT_TBL_DAT_COD_ALT_ITM:
                    strMsg="Código alterno de item";
                    break;
                case INT_TBL_DAT_NOM_ITM:
                    strMsg="Nombre de item";
                    break;
                case INT_TBL_DAT_DES_COR_UNI_MED:
                    strMsg="Alias de unidad de medida";
                    break;
                case INT_TBL_DAT_DES_LAR_UNI_MED:
                    strMsg="Unidad de medida";
                    break;
                case INT_TBL_DAT_STK_ACT:
                    strMsg="Stock actual";
                    break;
                case INT_TBL_DAT_CAN_DIS:
                    strMsg="Cantidad disponible";
                    break;
                case INT_TBL_DAT_CAN_SEL:
                    strMsg="Cantidad que se importó en el Pedido seleccionado";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
   
    
    private class ZafThreadGUI extends Thread{
        public void run(){
            if (!cargarDetReg()){
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sálo cuando haya datos.
            if (tblDat.getRowCount()>0){
                tabFrm.setSelectedIndex(0);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }

    private boolean cargarDetReg(){
        boolean blnRes;
        strAux="";
        try{
            pgrSis.setIndeterminate(true);
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                
                if(!  txtCodItm.getText().toString().equals(""))
                    strAux+="   AND a1.co_itm=" + txtCodItm.getText()  + "";
                
                if (txtCodAltItmDes.getText().length()>0 || txtCodAltItmHas.getText().length()>0)
                    strAux+=" AND ((LOWER(a1.tx_codAlt) BETWEEN '" + txtCodAltItmDes.getText().replaceAll("'", "''").toLowerCase() + "' AND '" + txtCodAltItmHas.getText().replaceAll("'", "''").toLowerCase() + "') OR LOWER(a1.tx_codAlt) LIKE '" + txtCodAltItmHas.getText().replaceAll("'", "''").toLowerCase() + "%')";

                if (txtCodAltItmTer.getText().length()>0){
                    strAux+=getConSQLAdiCamTer("a1.tx_codAlt", txtCodAltItmTer.getText());
                }
                                
                strSQL="";
                strSQL+="SELECT b2.co_empRel, b2.co_locRel, b2.co_tipDocRel, b2.co_docRel, b2.co_regRel";
                strSQL+=", b1.co_itm AS co_itmGrp, b1.co_itm AS co_itmEmp, b1.co_itmMae, b1.tx_codAlt, b1.tx_nomItm, b1.tx_desCor, b1.tx_desLar, b1.nd_stkAct";
                strSQL+=" , b2.nd_canOrdDis";
                strSQL+=" FROM(";
                strSQL+="           SELECT a1.co_emp, a1.co_itm, a3.co_itmMae, a1.tx_codAlt, a1.tx_nomItm, b1.tx_desCor, b1.tx_desLar, a2.nd_stkAct";
                strSQL+="           FROM (tbm_inv AS a1 INNER JOIN tbm_var AS b1 ON a1.co_uni=b1.co_reg)";
                strSQL+="           INNER JOIN tbm_invBod AS a2";
                strSQL+="           ON a1.co_emp=a2.co_emp AND a1.co_itm=a2.co_itm";
                strSQL+="           INNER JOIN tbm_equInv AS a3";
                strSQL+="           ON a2.co_emp=a3.co_emp AND a2.co_itm=a3.co_itm";
                strSQL+="           WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="           AND a2.co_bod=" + txtCodBod.getText() + "";
                strSQL+=strAux;
                if(arlDat.size()>0){
                    strSQL+="           AND a3.co_itmMae NOT IN(";
                    for(int f=0; f<arlDat.size(); f++){
                        if(f==0)
                            strSQL+="" + objUti.getStringValueAt(arlDat, f, INT_ARL_COD_ITM_MAE) + "";
                        else{
                            strSQL+="," + objUti.getStringValueAt(arlDat, f, INT_ARL_COD_ITM_MAE) + "";
                        }
                        if(  f==(arlDat.size()-1)  )
                            strSQL+=")";
                    }
                }                
                strSQL+="           ORDER BY a1.co_emp, a2.co_bod";                    
                strSQL+=") AS b1";
                strSQL+="   INNER JOIN(";
                strSQL+="       SELECT b1.co_emp AS co_empRel, b1.co_loc AS co_locRel, b1.co_tipDoc AS co_tipDocRel, b1.co_doc AS co_docRel, b1.co_reg AS co_regRel";
                strSQL+="       , b1.co_itm AS co_itmEmp, b2.co_itm AS co_itmGrp, b1.tx_codAlt, b1.tx_nomItm ,b1.co_itmMae";
                strSQL+="       , b1.nd_canPedImp - (CASE WHEN SUM(b2.nd_canOrdUti) IS NULL THEN 0 ELSE SUM(b2.nd_canOrdUti)  END  )  AS nd_canOrdDis";
                strSQL+="       , b1.nd_canPedImp AS nd_canPedImp";
                strSQL+="       FROM(";
                strSQL+="               SELECT b1.co_emp, b1.co_loc, b1.co_tipDoc, b1.co_doc, b1.co_reg, b1.co_itm, b1.tx_codAlt, b1.tx_nomItm ,b1.co_itmMae, b1.nd_canPedImp";
                strSQL+="               FROM(";
                strSQL+="                       SELECT a7.co_emp, a7.co_loc, a7.co_tipDoc, a7.co_doc, a8.co_reg, a8.co_itm, a6.co_itmMae";
                strSQL+="                       , a4.tx_codAlt, a4.tx_nomItm, a8.nd_can AS nd_canPedImp";
                strSQL+="                       FROM tbm_cabMovInv AS a7 INNER JOIN  tbm_detMovInv AS a8";
                strSQL+="                       ON(a7.co_emp=a8.co_emp AND a7.co_loc=a8.co_loc AND a7.co_tipDoc=a8.co_tipDoc AND a7.co_doc=a8.co_doc )";
                strSQL+="                       INNER JOIN tbm_inv AS a4 ON(a8.co_emp=a4.co_emp AND a8.co_itm=a4.co_itm)";
                strSQL+="                       INNER JOIN tbm_equInv AS a6 ON a4.co_emp=a6.co_emp AND a4.co_itm=a6.co_itm";
                strSQL+="                       WHERE a7.co_emp=" + intCboPedSelCodEmp + "";
                strSQL+="                       AND a7.co_loc=" + intCboPedSelCodLoc + "";
                strSQL+="                       AND a7.co_tipDoc=" + intCboPedSelCodTipDoc + "";
                strSQL+="                       AND a7.co_doc=" + intCboPedSelCodDoc + "";
                strSQL+="                       AND a7.st_reg='A'";
                strSQL+="                       ORDER BY a7.co_emp, a7.co_loc, a7.co_tipDoc, a7.co_doc, a8.co_reg";
                strSQL+="               ) AS b1";
                strSQL+="               GROUP BY b1.co_emp, b1.co_loc, b1.co_tipDoc, b1.co_doc, b1.co_reg, b1.co_itm, b1.tx_codAlt, b1.tx_nomItm ,b1.co_itmMae, b1.nd_canPedImp";
                strSQL+="       ) AS b1";
                strSQL+="       LEFT OUTER JOIN(";
                strSQL+="               SELECT a2.co_empRel, a2.co_locRel, a2.co_tipDocRel, a2.co_docRel, a2.co_regRel, a2.co_itm, a6.co_itmMae, a2.nd_can AS nd_canOrdUti";
                strSQL+="               FROM tbm_caborddis AS a1 INNER JOIN tbm_detorddis AS a2";
                strSQL+="               ON a2.co_emp=a1.co_emp AND a2.co_loc=a1.co_loc AND a2.co_tipDoc=a1.co_tipDoc AND a2.co_doc=a1.co_doc";
                strSQL+="               INNER JOIN tbm_inv AS a4 ON(a2.co_emp=a4.co_emp AND a2.co_itm=a4.co_itm)";
                strSQL+="               INNER JOIN tbm_equInv AS a6 ON a4.co_emp=a6.co_emp AND a4.co_itm=a6.co_itm";
                strSQL+="               WHERE a2.co_empRel=" + intCboPedSelCodEmp + "";
                strSQL+="               AND a2.co_locRel=" + intCboPedSelCodLoc + "";
                strSQL+="               AND a2.co_tipDocRel=" + intCboPedSelCodTipDoc + "";
                strSQL+="               AND a2.co_docRel=" + intCboPedSelCodDoc + "";
                strSQL+="               AND a1.st_reg='A'";
                strSQL+="       ) AS b2";
                strSQL+="       ON b1.co_emp=b2.co_empRel AND b1.co_loc=b2.co_locRel AND b1.co_tipDoc=b2.co_tipDocRel AND b1.co_doc=b2.co_docRel AND b1.co_reg=b2.co_regRel";
                strSQL+="       GROUP BY b1.co_emp, b1.co_loc, b1.co_tipDoc, b1.co_doc, b1.co_reg, b1.co_itm, b1.tx_codAlt, b1.tx_nomItm ,b1.co_itmMae, b2.co_itm";
                strSQL+="       , b1.nd_canPedImp";
                strSQL+=") AS b2";
                strSQL+=" ON b1.co_itmMae=b2.co_itmMae";
                strSQL+=" ORDER BY b2.co_regRel";
                
                System.out.println("SQL: " + strSQL);
                rst=stm.executeQuery(strSQL);
                vecDat.clear();
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_CHK,"");
                        vecReg.add(INT_TBL_DAT_COD_EMP_REL,     "" + rst.getString("co_empRel"));
                        vecReg.add(INT_TBL_DAT_COD_LOC_REL,     "" + rst.getString("co_locRel"));
                        vecReg.add(INT_TBL_DAT_COD_TIP_DOC_REL, "" + rst.getString("co_tipDocRel"));
                        vecReg.add(INT_TBL_DAT_COD_DOC_REL,     "" + rst.getString("co_docRel"));
                        vecReg.add(INT_TBL_DAT_COD_REG_REL,     "" + rst.getString("co_regRel"));
                        vecReg.add(INT_TBL_DAT_COD_ITM_GRP,     "" + rst.getString("co_itmGrp"));
                        vecReg.add(INT_TBL_DAT_COD_ITM_EMP,     "" + rst.getString("co_itmEmp"));
                        vecReg.add(INT_TBL_DAT_COD_ITM_MAE,     "" + rst.getString("co_itmMae"));
                        vecReg.add(INT_TBL_DAT_COD_ALT_ITM,     "" + rst.getString("tx_codAlt"));
                        vecReg.add(INT_TBL_DAT_NOM_ITM,         "" + rst.getString("tx_nomItm"));
                        vecReg.add(INT_TBL_DAT_DES_COR_UNI_MED, "" + rst.getString("tx_desCor"));
                        vecReg.add(INT_TBL_DAT_DES_LAR_UNI_MED, "" + rst.getString("tx_desLar"));
                        vecReg.add(INT_TBL_DAT_STK_ACT,         "" + rst.getString("nd_stkAct"));
                        vecReg.add(INT_TBL_DAT_CAN_DIS,         "" + rst.getString("nd_canOrdDis"));
                        vecReg.add(INT_TBL_DAT_CAN_SEL,         "");
                        vecReg.setElementAt(new Boolean(false), INT_TBL_DAT_CHK);
                        vecDat.add(vecReg);
                    }
                    else{
                        break;
                    }
                }
                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                if(conRemTmp!=null)
                    conRemTmp.close();
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                if (blnCon)
                    lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");
                else
                    lblMsgSis.setText("Interrupción del usuario. Sólo se procesaron " + tblDat.getRowCount() + " registros.");
                butCon.setText("Consultar");
                pgrSis.setIndeterminate(false);
                objTblMod.initRowsState();
                blnMarChk=false;
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return true;
    }
    
   
    private void limpiarFrm(){
        optTodItm.setSelected(true);
        optItmSel.setSelected(false);
        txtCodItm.setText("");
        txtCodAltItm.setText("");
        txtNomItm.setText("");
        txtCodAltItmDes.setText("");
        txtCodAltItmHas.setText("");
        txtCodAltItmTer.setText("");

        objTblMod.removeAllRows();
        arlDat.clear();
    }
    
    
    /**
     * Esta función obtiene la condición SQL adicional para los campos que "Terminan con".
     * La cadena recibida es separada para formar la condición que se agregará la sentencia SQL.
     * Por ejemplo: 
     * Si strCam="a2.tx_codAlt" y strCad="I, S, L" el resultado sería "AND (a2.tx_codalt LIKE '%I' OR a2.tx_codalt LIKE '%S' OR a2.tx_codalt LIKE '%L')"
     * @param strCam El campo que se utilizará para la condición.
     * @param strCad La cadena que se separará para formar la condición.
     * @return La cadena que contiene la condición SQL .
     */
    private String getConSQLAdiCamTer(String strCam, String strCad)
    {
        byte i;
        String strRes="";
        try
        {
            if (strCad.length()>0)
            {
                java.util.StringTokenizer stkAux=new java.util.StringTokenizer(strCad, ",", false);
                i=0;
                while (stkAux.hasMoreTokens())
                {
                    if (i==0)
                        strRes+=" AND (LOWER(" + strCam + ") LIKE '%" + stkAux.nextToken().toLowerCase() + "'";
                    else
                        strRes+=" OR LOWER(" + strCam + ") LIKE '%" + stkAux.nextToken().toLowerCase() + "'";
                    i++;
                }
                strRes+=")";
            }
        }
        catch (java.util.NoSuchElementException e)
        {
            strRes="";
        }
        return strRes;
    }
    
    public void setCodigoBodega(String codigoBodega){
        txtCodBod.setText(codigoBodega);
    }

    public void setNombreBodega(String nombreBodega){
        txtNomBod.setText(nombreBodega);
    }
    
    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConItm(int intTipBus){
        boolean blnRes=true;
        try{
            switch (intTipBus){
                case 0: //Mostrar la ventana de consulta.
                    vcoItm.setCampoBusqueda(1);
                    vcoItm.show();
                    if (vcoItm.getSelectedButton()==vcoItm.INT_BUT_ACE){
                        txtCodItm.setText(vcoItm.getValueAt(1));
                        txtCodAltItm.setText(vcoItm.getValueAt(2));
                        txtNomItm.setText(vcoItm.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Codigo alterno".
                    if (vcoItm.buscar("a1.tx_codAlt", txtCodAltItm.getText())){
                        txtCodItm.setText(vcoItm.getValueAt(1));
                        txtCodAltItm.setText(vcoItm.getValueAt(2));
                        txtNomItm.setText(vcoItm.getValueAt(3));
                    }
                    else{
                        vcoItm.setCampoBusqueda(1);
                        vcoItm.setCriterio1(11);
                        vcoItm.cargarDatos();
                        vcoItm.show();
                        if (vcoItm.getSelectedButton()==vcoItm.INT_BUT_ACE){
                            txtCodItm.setText(vcoItm.getValueAt(1));
                            txtCodAltItm.setText(vcoItm.getValueAt(2));
                            txtNomItm.setText(vcoItm.getValueAt(3));
                        }
                        else{
                            txtCodAltItm.setText(strCodAlt);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Nombre del item".
                    if (vcoItm.buscar("a1.tx_nomItm", txtNomItm.getText())){
                        txtCodItm.setText(vcoItm.getValueAt(1));
                        txtCodAltItm.setText(vcoItm.getValueAt(2));
                        txtNomItm.setText(vcoItm.getValueAt(3));
                    }
                    else{
                        vcoItm.setCampoBusqueda(2);
                        vcoItm.setCriterio1(11);
                        vcoItm.cargarDatos();
                        vcoItm.show();
                        if (vcoItm.getSelectedButton()==vcoItm.INT_BUT_ACE){
                            txtCodItm.setText(vcoItm.getValueAt(1));
                            txtCodAltItm.setText(vcoItm.getValueAt(2));
                            txtNomItm.setText(vcoItm.getValueAt(3));
                        }
                        else{
                            txtNomItm.setText(strNomItm);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Items".
     */
    private boolean configurarVenConItm(){
        boolean blnRes=true;
        try{
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("d1.co_itm");
            arlCam.add("d1.tx_codAlt");
            arlCam.add("d1.tx_nomItm");
            arlCam.add("d4.tx_desCor");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Cód.Itm.");
            arlAli.add("Alterno");
            arlAli.add("Nombre");
            arlAli.add("Unidad");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("60");
            arlAncCol.add("70");
            arlAncCol.add("350");
            arlAncCol.add("60");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_itm, a1.tx_codAlt, a1.tx_nomItm, a2.tx_desCor";
            strSQL+=" FROM tbm_inv AS a1";
            strSQL+=" LEFT OUTER JOIN tbm_var AS a2 ON (a1.co_uni=a2.co_reg)";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" ORDER BY a1.tx_codAlt";
            vcoItm=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de inventario", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoItm.setConfiguracionColumna(4, javax.swing.JLabel.CENTER);
            vcoItm.setCampoBusqueda(1);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
      
    private ArrayList cargarItemSeleccionadoArrayList(){
        String strLin="";
        arlDat.clear();
        try{
            for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                strLin=objTblMod.getValueAt(i, INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_LIN).toString();
                if(strLin.equals("M")){
                    if(objTblMod.isChecked(i, INT_TBL_DAT_CHK)){
                        arlReg=new ArrayList();
                        arlReg.add(INT_ARL_COD_EMP_REL, objTblMod.getValueAt(i, INT_TBL_DAT_COD_EMP_REL));
                        arlReg.add(INT_ARL_COD_LOC_REL, objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC_REL));
                        arlReg.add(INT_ARL_COD_TIP_DOC_REL, objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC_REL));
                        arlReg.add(INT_ARL_COD_DOC_REL, objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC_REL));
                        arlReg.add(INT_ARL_COD_REG_REL, objTblMod.getValueAt(i, INT_TBL_DAT_COD_REG_REL));
                        arlReg.add(INT_ARL_COD_ITM_GRP, objTblMod.getValueAt(i, INT_TBL_DAT_COD_ITM_GRP));
                        arlReg.add(INT_ARL_COD_ITM_EMP, objTblMod.getValueAt(i, INT_TBL_DAT_COD_ITM_EMP));
                        arlReg.add(INT_ARL_COD_ITM_MAE, objTblMod.getValueAt(i, INT_TBL_DAT_COD_ITM_MAE));
                        arlReg.add(INT_ARL_COD_ALT_ITM, objTblMod.getValueAt(i, INT_TBL_DAT_COD_ALT_ITM));
                        arlReg.add(INT_ARL_NOM_ITM, objTblMod.getValueAt(i, INT_TBL_DAT_NOM_ITM));
                        arlReg.add(INT_ARL_DES_COR_UNI_MED, objTblMod.getValueAt(i, INT_TBL_DAT_DES_COR_UNI_MED));
                        arlReg.add(INT_ARL_DES_LAR_UNI_MED, objTblMod.getValueAt(i, INT_TBL_DAT_DES_LAR_UNI_MED));
                        arlReg.add(INT_ARL_CAN_ORD_SEL, objTblMod.getValueAt(i, INT_TBL_DAT_CAN_SEL));
                        arlReg.add(INT_ARL_CAN_DIS, objTblMod.getValueAt(i, INT_TBL_DAT_CAN_DIS));                        
                        arlDat.add(arlReg);
                        setArlDat(arlDat);
                    }
                }
            }
            System.out.println("cargarItemSeleccionadoArrayList: " + arlDat.toString());
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return arlDat;
    }

    public ArrayList getArlDat() {
        return arlDat;
    }

    public void setArlDat(ArrayList arlDat) {
        this.arlDat = arlDat;
    }
    
    public void setCodDocPedidoSeleccionado(int intCboPedSelCodDoc) {
        this.intCboPedSelCodDoc = intCboPedSelCodDoc;
    }

    public void setCodEmpPedidoSeleccionado(int intCboPedSelCodEmp) {
        this.intCboPedSelCodEmp = intCboPedSelCodEmp;
    }

    public void setCodLocPedidoSeleccionado(int intCboPedSelCodLoc) {
        this.intCboPedSelCodLoc = intCboPedSelCodLoc;
    }

    public void setCodTipDocPedidoSeleccionado(int intCboPedSelCodTipDoc) {
        this.intCboPedSelCodTipDoc = intCboPedSelCodTipDoc;
    }
    
    public char setModoOperacion(char modOpe){
        chrOpcOpeTooBar=modOpe;
        return chrOpcOpeTooBar;
    }
    
    public boolean setItemsSeleccionados(ArrayList itemsSeleccionados){
        boolean blnRes=true;
        try{
            arlDat=itemsSeleccionados;
            System.out.println("EL ARRAYLIST CONTIENE: " + arlDat.toString());
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    
    /**
     * Esta función se ejecuta cuando se hace el "MouseClicked" en la cabecera del JTable.
     * Se utiliza ésta función especificamente para marcar todas las casillas de verificación
     * de la columna que indica la bodega seleccionada en el el JTable de bodegas.
     */
    private void tblMouseClicked(java.awt.event.MouseEvent evt){
        int i, intNumFil;
        try
        {
            intNumFil=objTblMod.getRowCountTrue();
            //Marcar la casilla sólo si se da 1 click con el botón izquierdo.
            if (evt.getButton()==evt.BUTTON1 && evt.getClickCount()==1 && tblDat.columnAtPoint(evt.getPoint())==INT_TBL_DAT_CHK)
            {
                if (blnMarChk)
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        objTblMod.setChecked(true, i, INT_TBL_DAT_CHK);
                        objTblMod.setValueAt("" + objTblMod.getValueAt(i, INT_TBL_DAT_CAN_DIS), i, INT_TBL_DAT_CAN_SEL);
                    }
                    blnMarChk=false;
                }
                else
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        objTblMod.setChecked(false, i, INT_TBL_DAT_CHK);
                        objTblMod.setValueAt("", i, INT_TBL_DAT_CAN_SEL);
                    }
                    blnMarChk=true;
                }
            }
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }    
    
    
    
}
