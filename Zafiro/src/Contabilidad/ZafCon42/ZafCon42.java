/*
 * ZafMae33.java
 *
 * Created on May 23, 2007, 8:51 AM
 */

package Contabilidad.ZafCon42;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import javax.swing.SpinnerNumberModel;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import java.util.ArrayList;
/**
 *
 * @author  ilino
 */
public class ZafCon42 extends javax.swing.JInternalFrame {
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;
    private ZafTblBus objTblBus;
    javax.swing.JInternalFrame jfrThis;
    private MiToolBar objTooBar;
    private ZafTblCelRenChk objTblCelRenChk;
    private ZafTblCelEdiChk objTblCelEdiChk;    
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    final int intJspValMin=0001;
    final int intJspValMax=9999;
    final int intJspValIni=2007;
    final int intJspValInc=1;
    private String strSQL;
    private int intAniExi, intMesExi;
    private int intUltReg;
    private java.util.Date datFecAux;
    Vector vecCab, vecReg, vecDat, vecAux;
    ZafColNumerada objColNum;
    private boolean blnExiAni;
    ArrayList arlRegValAniMes, arlDatValAniMes;
    ArrayList arlRegAuxMes, arlDatAuxMes;
    
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_MES=1;
    final int INT_TBL_DAT_CHK=2;
    
    final int INT_ARL_ANI=0;
    final int INT_ARL_MES=1;
    final int INT_ARL_TIP_CIE=2;
    
    final int INT_VEC_COD_CTA=0;
    
    /** Creates new form ZafMae34 */
    public ZafCon42(ZafParSis obj) {
        try{
            initComponents();
            //Inicializar objetos.
            this.objParSis=obj;
            jfrThis=this;
            objParSis=(ZafParSis)obj.clone();
            jspAni.setModel(new SpinnerNumberModel(intJspValIni, intJspValMin, intJspValMax, intJspValInc));

            if (!configurarFrm())
                exitForm();
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        panFrm = new javax.swing.JPanel();
        panTit = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        panCen = new javax.swing.JPanel();
        panCab = new javax.swing.JPanel();
        lblAni = new javax.swing.JLabel();
        jspAni = new javax.swing.JSpinner();
        panDet = new javax.swing.JPanel();
        spnDet = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panTooBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setName("");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        panTit.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("lblTit");
        panTit.add(lblTit, java.awt.BorderLayout.CENTER);

        panFrm.add(panTit, java.awt.BorderLayout.NORTH);

        panCen.setLayout(new java.awt.BorderLayout());

        panCab.setLayout(null);

        panCab.setPreferredSize(new java.awt.Dimension(0, 50));
        lblAni.setText("A\u00f1o:");
        panCab.add(lblAni);
        lblAni.setBounds(20, 20, 42, 22);

        panCab.add(jspAni);
        jspAni.setBounds(60, 20, 80, 22);

        panCen.add(panCab, java.awt.BorderLayout.NORTH);

        panDet.setLayout(new java.awt.BorderLayout());

        panDet.setPreferredSize(new java.awt.Dimension(452, 380));
        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDet.setViewportView(tblDat);

        panDet.add(spnDet, java.awt.BorderLayout.CENTER);

        panCen.add(panDet, java.awt.BorderLayout.CENTER);

        panTooBar.setLayout(new java.awt.BorderLayout());

        panCen.add(panTooBar, java.awt.BorderLayout.SOUTH);

        panFrm.add(panCen, java.awt.BorderLayout.CENTER);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-550)/2, (screenSize.height-400)/2, 550, 400);
    }//GEN-END:initComponents

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        // TODO add your handling code here:
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION){
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void exitForm(){
        dispose();
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner jspAni;
    private javax.swing.JLabel lblAni;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panCen;
    private javax.swing.JPanel panDet;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panTit;
    private javax.swing.JPanel panTooBar;
    private javax.swing.JScrollPane spnDet;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables

    private boolean configurarFrm(){
        boolean blnRes=true;
        lblTit.setText(objParSis.getNombreMenu() + "v0.1");
        this.setTitle(objParSis.getNombreMenu());
        objUti=new ZafUtil();
        objTblBus= new ZafTblBus(tblDat);
        objTooBar=new MiToolBar(this);
        panTooBar.add(objTooBar);
        vecCab=new Vector(5);
        vecDat=new Vector();
        vecCab.clear();
        
        vecCab.add(INT_TBL_DAT_LIN, "");
        vecCab.add(INT_TBL_DAT_MES, "MES");
        vecCab.add(INT_TBL_DAT_CHK, "CIERRE");
                            
        objTblMod=new ZafTblMod();
        objTblMod.setHeader(vecCab);
        tblDat.setModel(objTblMod);        
                
        //Configurar JTable: Establecer tipo de selección.
        tblDat.setRowSelectionAllowed(true);
        tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        //Configurar JTable: Establecer el menú de contexto.
        objTblPopMnu=new ZafTblPopMnu(tblDat);
        objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
        tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
        //Tamaño de las celdas
        tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
        tcmAux.getColumn(INT_TBL_DAT_MES).setPreferredWidth(100);
        tcmAux.getColumn(INT_TBL_DAT_CHK).setPreferredWidth(50);

        objTblCelRenChk=new ZafTblCelRenChk();
        tcmAux.getColumn(INT_TBL_DAT_CHK).setCellRenderer(objTblCelRenChk);
        objTblCelRenChk=null;

        arlDatAuxMes=new ArrayList();
        //Configurar JTable: Editor de celdas.
        objTblCelEdiChk=new ZafTblCelEdiChk(tblDat);
        tcmAux.getColumn(INT_TBL_DAT_CHK).setCellEditor(objTblCelEdiChk);
        objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    arlDatAuxMes.clear();
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {                    
                    for(int j=0; j<objTblMod.getRowCountTrue(); j++){
                        if(objTblMod.isChecked(j, INT_TBL_DAT_CHK)){
                            arlRegAuxMes=new ArrayList();
                            arlRegAuxMes.add(INT_VEC_COD_CTA, ""+ (j+1));
                            arlDatAuxMes.add(arlRegAuxMes);
                        }
                    }
                    System.out.println("LOS MESES CHEKADOS SON : "  + arlDatAuxMes.toString());
                }
        });
        
        //Configurar JTable: Establecer columnas editables.
        vecAux=new Vector();
        vecAux.add("" + INT_TBL_DAT_CHK);
        objTblMod.setColumnasEditables(vecAux);
        vecAux=null;
        arlDatValAniMes= new ArrayList();
        arlDatValAniMes.clear();
        objTooBar.setVisibleEliminar(false);
        objTooBar.setVisibleAnular(false);
        objTooBar.setVisibleVistaPreliminar(false);
        objTooBar.setVisibleImprimir(false);
        return blnRes;
    }
    
    
    private void mostrarMsgInf(String strMsg){
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }    
    
    public class MiToolBar extends ZafToolBar{

        public MiToolBar(javax.swing.JInternalFrame jfrThis){
            super(jfrThis, objParSis);
        }        
        
        
        public boolean aceptar() {
            boolean blnRes=true;
            return blnRes;
        }
        
        public boolean afterAceptar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterAnular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterCancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterConsultar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterEliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterImprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterInsertar() {
            boolean blnRes=true;
            jspAni.setEnabled(true);
            intUltReg=0;
            objTooBar.setEstado('w');
            return blnRes;            
        }
        
        public boolean afterModificar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterVistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean anular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeAceptar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeAnular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeCancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeConsultar() {
            if(!isCamVal())
                return false;
            return true;
        }
        
        public boolean beforeEliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeImprimir() {
            boolean blnRes=true;
            return blnRes;
        }
        
        public boolean beforeInsertar() {
            if(!isCamVal())
                return false;
            return true;
        }
        
        public boolean beforeModificar() {
            if(!isCamVal())
                return false;
            return true;
        }
        
        public boolean beforeVistaPreliminar() {
            boolean blnRes=true;
            return blnRes;
        }
        
        public boolean cancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public void clickAceptar() {
        }
        
        public void clickAnterior() {
        }
        
        public void clickAnular() {
        }
        
        public void clickCancelar() {
            intAniExi=0;
            intMesExi=0;
            jspAni.setModel(new SpinnerNumberModel(intJspValIni, intJspValMin, intJspValMax, intJspValInc));
            objTblMod.removeAllRows();
        }
        
        public void clickConsultar() {
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
        }
        
        public void clickEliminar() {
        }
        
        public void clickFin() {
        }
        
        public void clickImprimir() {
        }
        
        public void clickInicio() {
        }
        
        public void clickInsertar() {
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            cargarNombresMeses();
        }
        
        public void clickModificar() {
            cargarMesesConsultaModifica();
        }
        
        public void clickSiguiente() {
        }
        
        public void clickVisPreliminar() {
        }
        
        public boolean consultar() {
            if( ! (consultarReg()) )
                return false;
            return true;
        }
        
        public boolean eliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean imprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean insertar() {
            if (!insertarReg())
                return false;
            return true;
        }
        
        public boolean modificar() {
            if (!actualizarReg())
                return false;
            return true;
        }
        
        public boolean vistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
    }
    
    
    private boolean cargarNombresMeses(){
        boolean blnRes=true;
        for(int i=1; i<=12; i++){
            vecReg=new Vector();
            vecReg.add(INT_TBL_DAT_LIN, "");
            switch(i){
                case 1:
                    vecReg.add(INT_TBL_DAT_MES, "ENERO");
                    break;
                case 2:
                    vecReg.add(INT_TBL_DAT_MES, "FEBRERO");
                    break;
                case 3:
                    vecReg.add(INT_TBL_DAT_MES, "MARZO");
                    break;
                case 4:
                    vecReg.add(INT_TBL_DAT_MES, "ABRIL");
                    break;
                case 5:
                    vecReg.add(INT_TBL_DAT_MES, "MAYO");
                    break;
                case 6:
                    vecReg.add(INT_TBL_DAT_MES, "JUNIO");
                    break;
                case 7:
                    vecReg.add(INT_TBL_DAT_MES, "JULIO");
                    break;
                case 8:
                    vecReg.add(INT_TBL_DAT_MES, "AGOSTO");
                    break;
                case 9:
                    vecReg.add(INT_TBL_DAT_MES, "SEPTIEMBRE");
                    break;
                case 10:
                    vecReg.add(INT_TBL_DAT_MES, "OCTUBRE");
                    break;
                case 11:
                    vecReg.add(INT_TBL_DAT_MES, "NOVIEMBRE");
                    break;
                case 12:
                    vecReg.add(INT_TBL_DAT_MES, "DICIEMBRE");
                    break;
            }
        vecReg.add(INT_TBL_DAT_CHK, "");
        vecDat.add(vecReg);
        }
        objTblMod.setData(vecDat);
        tblDat.setModel(objTblMod);
        vecDat.clear();
        return blnRes;
    }

    
    private boolean insertarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if(con!=null){
                if(updateTbmCabEstFinPre()){
                    if(insertaTbmCieMenEstFinPre()){
                        if(insertaTbhCabEstFinPre()){
                            if(insertaTbhDetEstFinPre()){
                                if(insertaTbhDetCtaEstFinPre()){
                                    con.commit();
                                    blnRes=true;
                                }
                                else
                                    con.rollback();
                            }
                            else
                                con.rollback();
                    }
                    else
                        con.rollback();
                        }
                    else
                        con.rollback();
                }
                else
                    con.rollback();

                con.close();
                con=null;
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean updateTbmCabEstFinPre(){
        boolean blnRes=true;
        datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
        int intFilSel=0;
        
        for(int k=0;k<objTblMod.getRowCountTrue(); k++){
            if(objTblMod.isChecked(k, INT_TBL_DAT_CHK)){
                intFilSel++;
            }
        }        
        
        try{
            stm=con.createStatement();
            strSQL="";
            strSQL+="UPDATE tbm_cabestfinpre";
            if(intFilSel==0)
                strSQL+=" SET st_cie='O',";
            else
                strSQL+=" SET st_cie='M',";
            
            strSQL+=" fe_ultmod='" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "',";
            strSQL+=" co_usrmod=" + objParSis.getCodigoEmpresa() + "";
            strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
            strSQL+=" AND ne_ani=" + jspAni.getValue() + "";
            System.out.println("SQL DE updateTbmCabEstFinPre: " + strSQL);
            stm.executeUpdate(strSQL);
            datFecAux=null;
            stm.close();
            stm=null;
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }        
        return blnRes;
    }
    
    private boolean insertaTbmCieMenEstFinPre(){
        boolean blnRes=true;
        try{
            stm=con.createStatement();
            for(int i=0; i<objTblMod.getRowCountTrue();i++){
                if(objTblMod.isChecked(i, INT_TBL_DAT_CHK)){
                    strSQL="";
                    strSQL+="INSERT INTO tbm_ciemenestfinpre(";
                    strSQL+=" co_emp, ne_ani, ne_mes)";
                    strSQL+=" VALUES (";
                    strSQL+="" + objParSis.getCodigoEmpresa() + ",";
                    strSQL+="" + jspAni.getValue() + ",";
                    strSQL+="" + (i+1) + "";
                    strSQL+=")";
                    System.out.println("SQL DE insertaTbmCieMenEstFinPre: " + strSQL);
                    stm.executeUpdate(strSQL);                    
                }

            }
            stm.close();
            stm=null;
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }        
        return blnRes;
    }
    
    private boolean insertaTbhCabEstFinPre(){
        boolean blnRes=true;
        datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
        try{
            strSQL="";
            strSQL+="SELECT MAX(a1.co_his)";
            strSQL+=" FROM tbh_cabestfinpre AS a1";
            intUltReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
            intUltReg=Integer.parseInt(""+intUltReg);
            intUltReg++;
            stm=con.createStatement();
            strSQL="";
            strSQL+="INSERT INTO tbh_cabestfinpre(";
            strSQL+=" co_emp, ne_ani, co_his, tx_obs1, st_reg, st_cie, fe_ing, fe_ultmod,";
            strSQL+=" co_usring, co_usrmod, fe_his, co_usrhis)";
            strSQL+=" (";
            strSQL+=" SELECT co_emp, ne_ani, " + intUltReg + " as co_his, tx_obs1, st_reg, st_cie, fe_ing, fe_ultmod, co_usring, co_usrmod,";
            strSQL+="'" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "' as fe_his,";
            strSQL+=""  + objParSis.getCodigoUsuario() + " as co_usrhis";
            strSQL+=" FROM tbm_cabEstFinPre";
            strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
            strSQL+=" and ne_ani=" + jspAni.getValue() + "";
            strSQL+=" AND st_cie<>'A'";
            strSQL+=")";
            System.out.println("SQL DE insertaTbhCabEstFinPre: " + strSQL);
            stm.executeUpdate(strSQL);
            datFecAux=null;
            stm.close();
            stm=null;
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }        
        return blnRes;
    }
        
    private boolean insertaTbhDetEstFinPre(){
        boolean blnRes=true;        
        try{
            stm=con.createStatement();
            strSQL="";
            strSQL+="INSERT INTO tbh_detestfinpre(";
            strSQL+=" co_emp, ne_ani, co_his, co_cta, ne_mes, nd_val, tx_obs1, fe_ultmod,";
            strSQL+=" co_usrmod)";
            strSQL+=" (";
            strSQL+=" SELECT co_emp, ne_ani, " + intUltReg + " as co_his, co_cta, ne_mes, nd_val, tx_obs1, fe_ultmod, co_usrmod";
            strSQL+=" FROM tbm_detestfinpre";
            strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
            strSQL+=" AND ne_ani=" + jspAni.getValue() + "";
            strSQL+=")";
            System.out.println("SQL DE insertaTbhDetEstFinPre: " + strSQL);
            stm.executeUpdate(strSQL);
            stm.close();
            stm=null;
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }        
        return blnRes;
    }

    private boolean insertaTbhDetCtaEstFinPre(){
        boolean blnRes=true;
        try{
            stm=con.createStatement();
            strSQL="";
            strSQL+="INSERT INTO tbh_detctaestfinpre(";
            strSQL+=" co_emp, ne_ani, co_his, co_cta, ne_mes, co_reg, tx_nom, nd_val,";
            strSQL+=" fe_ultmod, co_usrmod)";
            strSQL+=" (";
            strSQL+=" SELECT co_emp, ne_ani, " + intUltReg + " as co_his, co_cta, ne_mes, co_reg, tx_nom, nd_val, fe_ultmod, co_usrmod";
            strSQL+=" FROM tbm_detctaestfinpre";
            strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
            strSQL+=" AND ne_ani=" + jspAni.getValue() + "";
            strSQL+=")";
            System.out.println("SQL DE insertaTbhDetCtaEstFinPre: " + strSQL);
            stm.executeUpdate(strSQL);
            stm.close();
            stm=null;
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }        
        return blnRes;
    }
    
    private boolean isCamVal(){
        blnExiAni=false;
        int intFilSel=0;
        
        int intJspAni=intJspAni=Integer.parseInt(""+jspAni.getValue());
        if(intJspAni<2006){
            mostrarMsgInf("<HTML>No puede cerrar/reaperturar años que sean menores al 2006</HTML>");
            return false;
        }        
        
        
        for(int k=0; k<objTblMod.getRowCountTrue(); k++){
            if(objTblMod.isChecked(k, INT_TBL_DAT_CHK)){
                intFilSel++;
            }
        }
        if(intFilSel==0){
            if(objTooBar.getEstado()=='n'){
                mostrarMsgInf("<HTML>Selecccione algún registro para insertar y vuelva a intentarlo.</HTML>");
                return false;                
            }
        }
        
        
        strSQL="";
        strSQL+="SELECT a1.st_cie";
        strSQL+=" FROM tbm_cabEstFinPre AS a1 ";
        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
        strSQL+=" AND a1.ne_ani=" + jspAni.getValue() + "";
        strSQL+=" AND st_reg='A'";
        if (objUti.isCodigoUnico(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL)){
            mostrarMsgInf("<HTML>El año seleccionado no ha sido presupuestado.<BR>Presupueste el año y vuelva a intentarlo.</HTML>");
            return false;
        }
        
        if( ! (objTooBar.getEstado()=='c')  ){
            strSQL="";
            strSQL+="SELECT a1.st_cie";
            strSQL+=" FROM tbm_cabEstFinPre AS a1 ";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" AND a1.ne_ani=" + jspAni.getValue() + "";
            strSQL+=" AND st_reg='A' and st_cie='A'";
            if (!objUti.isCodigoUnico(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL)){
                mostrarMsgInf("<HTML>El año <FONT COLOR=\"blue\">" + jspAni.getValue() + "</FONT> tiene cierre anual.<BR>Reaperture el año y vuelva a intentarlo.</HTML>");
                return false;
            }
        }
        
        strSQL="";
        strSQL+="SELECT a1.ne_ani";
        strSQL+=" FROM tbm_cieMenEstFinPre AS a1 ";
        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
        strSQL+=" AND a1.ne_ani=" + jspAni.getValue() + "";
        if (!objUti.isCodigoUnico(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL))
            blnExiAni=true;
        else
            blnExiAni=false;

        if(objTooBar.getEstado()=='n'){
            if(blnExiAni){
                mostrarMsgInf("<HTML>El año <FONT COLOR=\"blue\">" + jspAni.getValue() + "</FONT> ya fue ingresado.<BR>Seleccione un año diferente y vuelva a intentarlo o MODIFIQUE.</HTML>");
                return false;
            }
        }
        if(  (objTooBar.getEstado()=='c')  || (objTooBar.getEstado()=='x') ){
            if(!blnExiAni){
                mostrarMsgInf("<HTML>El año <FONT COLOR=\"blue\">" + jspAni.getValue() + "</FONT> no ha sido ingresado.<BR>Seleccione un año diferente y vuelva a intentarlo.</HTML>");
                return false;
            }
        }
        return true;
    }
    
    private boolean consultarReg(){
        boolean blnRes=true;
        try{
            if( ! ( cargarMesesConsultaModifica() )  )
                blnRes=false;
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean cargarMesesConsultaModifica(){
          boolean blnRes=true;
          String strCodCtaRst[]= new String[12];
          int intCodCtaRst=0;
          int intTamVec=0;
          String strMesDb="";          int intMesDb=0;          
          try{
              con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
              if(con!=null){
                  stm=con.createStatement();
                    if (objTooBar.getEstado()=='x' || objTooBar.getEstado()=='m'){
                        strSQL="";
                        strSQL+="select a1.ne_ani, a1.ne_mes";
                        strSQL+=" from tbm_cieMenEstFinPre as a1";
                        strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+=" and a1.ne_ani=" + jspAni.getValue() + "";
                        strSQL+=" order by a1.ne_mes";
                        rst=stm.executeQuery(strSQL);
                        for( int k=0; rst.next(); k++){
                            strCodCtaRst[k]=(rst.getString("ne_mes")==null?"":rst.getString("ne_mes"));
                            if( !  (strCodCtaRst[k].toString().equals(""))  )
                                intTamVec++;
                        }
                        
                        for(int i=1; i<=12; i++){
                            vecReg=new Vector();
                            vecReg.add(INT_TBL_DAT_LIN, "");
                            switch(i){
                                case 1:
                                    vecReg.add(INT_TBL_DAT_MES, "ENERO");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 2:
                                    vecReg.add(INT_TBL_DAT_MES, "FEBRERO");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 3:
                                    vecReg.add(INT_TBL_DAT_MES, "MARZO");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    for(int u=0; u<intTamVec;u++){
                                        if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                            vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                        }
                                    }
                                    break;
                                case 4:
                                    vecReg.add(INT_TBL_DAT_MES, "ABRIL");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 5:
                                    vecReg.add(INT_TBL_DAT_MES, "MAYO");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 6:
                                    vecReg.add(INT_TBL_DAT_MES, "JUNIO");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 7:
                                    vecReg.add(INT_TBL_DAT_MES, "JULIO");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 8:
                                    vecReg.add(INT_TBL_DAT_MES, "AGOSTO");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 9:
                                    vecReg.add(INT_TBL_DAT_MES, "SEPTIEMBRE");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 10:
                                    vecReg.add(INT_TBL_DAT_MES, "OCTUBRE");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 11:
                                    vecReg.add(INT_TBL_DAT_MES, "NOVIEMBRE");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                                case 12:
                                    vecReg.add(INT_TBL_DAT_MES, "DICIEMBRE");
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if(intTamVec>0){
                                        for(int u=0; u<intTamVec;u++){
                                            if( i==Integer.parseInt(strCodCtaRst[u]) ){
                                                vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                            }
                                        }                                        
                                    }
                                    break;
                            }
                        vecDat.add(vecReg);
                        }
                    }
                    else{
                        System.out.println("INGRESA POR CONSULTAR");
                        strSQL="";
                        strSQL+="select a1.ne_ani, a1.ne_mes";
                        strSQL+=" from tbm_cieMenEstFinPre as a1";
                        strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+=" and a1.ne_ani=" + jspAni.getValue() + "";
                        strSQL+=" order by a1.ne_mes";
                        rst=stm.executeQuery(strSQL);
                        while(rst.next()){
                            strMesDb=(rst.getString("ne_mes")==null?"":rst.getString("ne_mes"));
                            if( ! (strMesDb.equals(""))  ){
                                vecReg=new Vector();
                                vecReg.add(INT_TBL_DAT_LIN, "");
                                intMesDb=Integer.parseInt(strMesDb);
                                switch(intMesDb){
                                    case 1:
                                        vecReg.add(INT_TBL_DAT_MES, "ENERO");
                                        break;
                                    case 2:
                                        vecReg.add(INT_TBL_DAT_MES, "FEBRERO");
                                        break;
                                    case 3:
                                        vecReg.add(INT_TBL_DAT_MES, "MARZO");
                                        break;
                                    case 4:
                                        vecReg.add(INT_TBL_DAT_MES, "ABRIL");
                                        break;
                                    case 5:
                                        vecReg.add(INT_TBL_DAT_MES, "MAYO");
                                        break;
                                    case 6:
                                        vecReg.add(INT_TBL_DAT_MES, "JUNIO");
                                        break;
                                    case 7:
                                        vecReg.add(INT_TBL_DAT_MES, "JULIO");
                                        break;
                                    case 8:
                                        vecReg.add(INT_TBL_DAT_MES, "AGOSTO");
                                        break;
                                    case 9:
                                        vecReg.add(INT_TBL_DAT_MES, "SEPTIEMBRE");
                                        break;
                                    case 10:
                                        vecReg.add(INT_TBL_DAT_MES, "OCTUBRE");
                                        break;
                                    case 11:
                                        vecReg.add(INT_TBL_DAT_MES, "NOVIEMBRE");
                                        break;
                                    case 12:
                                        vecReg.add(INT_TBL_DAT_MES, "DICIEMBRE");
                                        break;
                                }
                                vecReg.add(INT_TBL_DAT_CHK, "");
                                if( ! (strMesDb.toString().equals("")) )
                                    vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                vecDat.add(vecReg);
                            }
                            else{
                                for(int i=1; i<=12; i++){
                                    vecReg=new Vector();
                                    vecReg.add(INT_TBL_DAT_LIN, "");                                    
                                    switch(i){
                                        case 1:
                                            vecReg.add(INT_TBL_DAT_MES, "ENERO");
                                            break;
                                        case 2:
                                            vecReg.add(INT_TBL_DAT_MES, "FEBRERO");
                                            break;
                                        case 3:
                                            vecReg.add(INT_TBL_DAT_MES, "MARZO");
                                            break;
                                        case 4:
                                            vecReg.add(INT_TBL_DAT_MES, "ABRIL");
                                            break;
                                        case 5:
                                            vecReg.add(INT_TBL_DAT_MES, "MAYO");
                                            break;
                                        case 6:
                                            vecReg.add(INT_TBL_DAT_MES, "JUNIO");
                                            break;
                                        case 7:
                                            vecReg.add(INT_TBL_DAT_MES, "JULIO");
                                            break;
                                        case 8:
                                            vecReg.add(INT_TBL_DAT_MES, "AGOSTO");
                                            break;
                                        case 9:
                                            vecReg.add(INT_TBL_DAT_MES, "SEPTIEMBRE");
                                            break;
                                        case 10:
                                            vecReg.add(INT_TBL_DAT_MES, "OCTUBRE");
                                            break;
                                        case 11:
                                            vecReg.add(INT_TBL_DAT_MES, "NOVIEMBRE");
                                            break;
                                        case 12:
                                            vecReg.add(INT_TBL_DAT_MES, "DICIEMBRE");
                                            break;
                                    }
                                    vecReg.add(INT_TBL_DAT_CHK, "");
                                    if( ! (strMesDb.toString().equals("")) )
                                        vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK);
                                    vecDat.add(vecReg);
                                }
                            }
                        }
                    }
                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
              }              
          }
          catch(java.sql.SQLException e){
              blnRes=false;
              objUti.mostrarMsgErr_F1(this, e);
          }
       return blnRes;   
      }
 
    private boolean actualizarReg(){
        boolean blnRes=false;
        intUltReg=0;
        try{
              con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
              if(con!=null){
                  if(updateTbmCabEstFinPre()){
                      if(deleteTbmCieMenEstFinPre()){
                          if(insertaTbmCieMenEstFinPre()){
                              if(insertaTbhCabEstFinPre()){
                                  if(insertaTbhDetEstFinPre()){
                                      if(insertaTbhDetCtaEstFinPre()){
                                          con.commit();
                                          blnRes=true;
                                      }
                                      else
                                          con.rollback();
                                  }
                                  else
                                      con.rollback();
                              }
                              else
                                  con.rollback();
                          }
                          else
                              con.rollback();
                      }
                      else
                          con.rollback();
                  }
                  else
                      con.rollback();
                con.close();
                con=null;
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
      }
      
      
      private boolean deleteTbmCieMenEstFinPre(){
          boolean blnRes=true;
          try{
              if(con!=null){
                  stm=con.createStatement();
                  strSQL="";
                  strSQL+="DELETE FROM tbm_cieMenEstFinPre";
                  strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                  strSQL+=" AND ne_ani=" + jspAni.getValue() + "";
                  stm.executeUpdate(strSQL);
                  stm.close();
                  stm=null;
              }
          }
          catch(java.sql.SQLException e){
              objUti.mostrarMsgErr_F1(this, e);
              blnRes=false;
          }
          catch(Exception e){
              objUti.mostrarMsgErr_F1(this, e);
              blnRes=false;
          }
          return blnRes;
      }
      
      
}