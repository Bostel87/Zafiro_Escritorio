/*
 * ZafCon03.java
 *
 * Created on 01 de octubre de 2006, 11:53 AM
 */
package Contabilidad.ZafCon03;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafDate.ZafSelectDate;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;

/**
 *
 * @author  Eddye Lino
 */
public class ZafCon03 extends javax.swing.JInternalFrame 
{
    //Variables
    private ZafSelectDate objSelDat;
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafThreadGUI objThrGUI;
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private boolean blnCon;                             //true: Continua la ejecuci�n del hilo.
   
    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafCon03(ZafParSis obj) 
    {
        initComponents();
        //Inicializar objetos.
        objParSis=obj;
        if (!configurarFrm())
            exitForm();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        bgrTipOpe = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        optTod = new javax.swing.JRadioButton();
        optFil = new javax.swing.JRadioButton();
        lblCta = new javax.swing.JLabel();
        txtCodCta = new javax.swing.JTextField();
        txtDesCorCta = new javax.swing.JTextField();
        txtDesLarCta = new javax.swing.JTextField();
        butCta = new javax.swing.JButton();
        panNomCta = new javax.swing.JPanel();
        lblNomCtaDes = new javax.swing.JLabel();
        txtNomCtaDes = new javax.swing.JTextField();
        lblNomCtaHas = new javax.swing.JLabel();
        txtNomCtaHas = new javax.swing.JTextField();
        panTipOpe = new javax.swing.JPanel();
        optMay = new javax.swing.JRadioButton();
        optDes = new javax.swing.JRadioButton();
        chkCtaEfe = new javax.swing.JCheckBox();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butPro = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setLayout(null);

        bgrFil.add(optTod);
        optTod.setSelected(true);
        optTod.setText("Todas las cuentas");
        panFil.add(optTod);
        optTod.setBounds(4, 112, 400, 20);

        bgrFil.add(optFil);
        optFil.setText("Sólo las cuentas que cumplan el criterio seleccionado");
        panFil.add(optFil);
        optFil.setBounds(4, 132, 400, 20);

        lblCta.setText("Cuenta:");
        panFil.add(lblCta);
        lblCta.setBounds(24, 152, 120, 20);
        panFil.add(txtCodCta);
        txtCodCta.setBounds(88, 152, 56, 20);

        txtDesCorCta.setToolTipText("Número de cuenta");
        panFil.add(txtDesCorCta);
        txtDesCorCta.setBounds(144, 152, 100, 20);

        txtDesLarCta.setToolTipText("Nombre de la cuenta");
        panFil.add(txtDesLarCta);
        txtDesLarCta.setBounds(244, 152, 416, 20);

        butCta.setText("...");
        butCta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCtaActionPerformed(evt);
            }
        });
        panFil.add(butCta);
        butCta.setBounds(660, 152, 20, 20);

        panNomCta.setBorder(javax.swing.BorderFactory.createTitledBorder("Nombre de la cuenta"));
        panNomCta.setLayout(null);

        lblNomCtaDes.setText("Desde:");
        panNomCta.add(lblNomCtaDes);
        lblNomCtaDes.setBounds(12, 20, 44, 20);
        panNomCta.add(txtNomCtaDes);
        txtNomCtaDes.setBounds(56, 20, 268, 20);

        lblNomCtaHas.setText("Hasta:");
        panNomCta.add(lblNomCtaHas);
        lblNomCtaHas.setBounds(336, 20, 44, 20);
        panNomCta.add(txtNomCtaHas);
        txtNomCtaHas.setBounds(380, 20, 268, 20);

        panFil.add(panNomCta);
        panNomCta.setBounds(24, 172, 660, 52);

        panTipOpe.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de operación"));
        panTipOpe.setLayout(null);

        bgrTipOpe.add(optMay);
        optMay.setSelected(true);
        optMay.setText("Mayorizar");
        panTipOpe.add(optMay);
        optMay.setBounds(8, 20, 140, 20);

        bgrTipOpe.add(optDes);
        optDes.setText("Desmayorizar");
        panTipOpe.add(optDes);
        optDes.setBounds(8, 40, 140, 20);

        panFil.add(panTipOpe);
        panTipOpe.setBounds(528, 4, 156, 72);

        chkCtaEfe.setSelected(true);
        chkCtaEfe.setText("Incluir cuentas de Efectivo");
        panFil.add(chkCtaEfe);
        chkCtaEfe.setBounds(30, 240, 210, 23);

        tabFrm.addTab("Filtro", panFil);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butPro.setText("Procesar");
        butPro.setToolTipText("Mayorizar/Desmayorizar la(s) cuenta(s) de acuerdo al criterio seleccionado.");
        butPro.setPreferredSize(new java.awt.Dimension(92, 25));
        butPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butProActionPerformed(evt);
            }
        });
        panBot.add(butPro);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void butCtaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCtaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_butCtaActionPerformed

    private void butProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butProActionPerformed
        //Realizar acci�n de acuerdo a la etiqueta del bot�n ("Procesar" o "Detener").
        if (butPro.getText().equals("Procesar"))
        {
            if (mostrarMsgCon("�Est� seguro que desea realizar esta operaci�n?")==0)
            {
                blnCon=true;
                if (objThrGUI==null)
                {
                    objThrGUI=new ZafThreadGUI();
                    objThrGUI.setIndFunEje(1);
                    objThrGUI.start();
                }
            }
        }
        else
        {
            blnCon=false;
        }
    }//GEN-LAST:event_butProActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicaci�n. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="�Est� seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    /** Cerrar la aplicaci�n. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.ButtonGroup bgrTipOpe;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCta;
    private javax.swing.JButton butPro;
    private javax.swing.JCheckBox chkCtaEfe;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblCta;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblNomCtaDes;
    private javax.swing.JLabel lblNomCtaHas;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optDes;
    private javax.swing.JRadioButton optFil;
    private javax.swing.JRadioButton optMay;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panNomCta;
    private javax.swing.JPanel panTipOpe;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTextField txtCodCta;
    private javax.swing.JTextField txtDesCorCta;
    private javax.swing.JTextField txtDesLarCta;
    private javax.swing.JTextField txtNomCtaDes;
    private javax.swing.JTextField txtNomCtaHas;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Configurar ZafDatePicker:
            objSelDat=new ZafSelectDate(new javax.swing.JFrame(),"d/m/y");
            objSelDat.chkSetSelected(true);
            panFil.add(objSelDat);
            objSelDat.setBounds(4, 4, 520, 100);
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.5");
            lblTit.setText(strAux);
            //Configurar objetos.
            txtCodCta.setVisible(false);
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funci�n permite mayorizar/desmayorizar las cuentas de acuerdo al criterio seleccionado.
     * @return true: Si se pudo realizar el proceso.
     * <BR>false: En el caso contrario.
     */
    private boolean procesar()
    {
        int i, j, k;
        String strPer;
        String strFecRan[][];
        boolean blnRes=true;
        double dblSalCta=0.00;
        String strMes="", strAni="";
        int intMes=0;
        
        try
        {
            butPro.setText("Detener");
            if (optMay.isSelected())
                lblMsgSis.setText("Mayorizando cuentas...");
            else
                lblMsgSis.setText("Desmayorizando cuentas...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
//                if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
//                {
//                    //Procesar las cuentas del "Grupo".
//                }
//                else
//                {
                    //Procesar las cuentas de la "Empresa seleccionada".
                    strFecRan=objUti.getIntervalosMensualesRangoFechas(objSelDat.getDateFrom(), objSelDat.getDateTo(), "dd/MM/yyyy");
                    if (optMay.isSelected())
                    {
                        //Mayorizar.
                        pgrSis.setMinimum(0);
                        pgrSis.setMaximum(7*strFecRan.length);
                        pgrSis.setValue(0);
                        k=0;
                        for (i=0; i<strFecRan.length; i++){
                            strPer="" + (objUti.getMes(strFecRan[i][0],"yyyy/MM/dd") + 1);
                            intMes=Integer.parseInt(strPer);
                            //VARIABLE USADA PARA VERIFICAR SI MAYORIZA O NO PORQUE EL MES FUE CERRADO
                            strMes=((strPer.length()==1)?"0"+strPer:strPer);
                            strPer="" + objUti.getAnio(strFecRan[i][0],"yyyy/MM/dd") + ((strPer.length()==1)?"0"+strPer:strPer);
                            //VARIABLE USADA PARA VERIFICAR SI MAYORIZA O NO PORQUE EL ANIO FUE CERRADO
                            strAni=""+objUti.getAnio(strFecRan[i][0],"yyyy/MM/dd");
                            
                            if(! isMesCerrado(strMes, strAni)){
                                //Armar la sentencia SQL.
                                strSQL="";
    //                            strSQL+="INSERT INTO tbm_salCta(co_emp, co_cta, co_per, nd_salCta)";
                                strSQL+=" update tbm_salcta";
                                strSQL+=" set nd_salCta=x.nd_salcta from (";
                                strSQL+=" SELECT b1.co_emp, b1.co_cta, " + strPer + " AS co_per, b2.nd_salCta";
                                strSQL+=" FROM tbm_plaCta AS b1";
                                strSQL+=" LEFT OUTER JOIN (";
                                strSQL+=" SELECT a1.co_emp, a2.co_cta, SUM(a2.nd_monDeb-a2.nd_monHab) AS nd_salCta";
                                strSQL+=" FROM tbm_cabDia AS a1";
                                strSQL+=" INNER JOIN tbm_detDia AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_dia=a2.co_dia)";
                                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                                strSQL+=" AND a1.st_reg='A'";
                                strSQL+=" AND (a1.fe_dia BETWEEN '" + strFecRan[i][0] + "' AND '" + strFecRan[i][1] + "')";
                                strSQL+=" GROUP BY a1.co_emp, a2.co_cta";
                                strSQL+=" ) AS b2 ON (b1.co_emp=b2.co_emp AND b1.co_cta=b2.co_cta)";
                                strSQL+=" WHERE b1.co_emp=" + objParSis.getCodigoEmpresa();
                                strSQL+=" ORDER BY b1.co_emp, b1.co_cta";
                                strSQL+=" ) as x";
                                strSQL+=" WHERE x.co_emp=tbm_salcta.co_emp AND x.co_cta=tbm_salcta.co_cta AND x.co_per=tbm_salcta.co_per";
                                System.out.println("update 1: " +strSQL);
                                stm.executeUpdate(strSQL);
                                k++;
                                pgrSis.setValue(k);
                                //Armar la sentencia SQL.
                                strSQL="";
                                strSQL+="UPDATE tbm_salCta";
                                strSQL+=" SET nd_salCta=(CASE WHEN tbm_salCta.nd_salCta IS NULL THEN 0 ELSE tbm_salCta.nd_salCta END) + b1.nd_salCta";
                                strSQL+=" FROM (";
                                strSQL+=" SELECT a1.co_emp, a3.co_ctaRes AS co_cta, " + strPer + " AS co_per, SUM(a2.nd_salCta) AS nd_salCta";
                                strSQL+=" FROM tbm_plaCta AS a1";
                                strSQL+=" INNER JOIN tbm_salCta AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta)";
                                strSQL+=" INNER JOIN tbm_emp AS a3 ON (a1.co_emp=a3.co_emp)";
                                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                                strSQL+=" AND a1.tx_niv1 IN ('4', '5', '6', '7', '8')";
                                strSQL+=" AND a2.co_per=" + strPer;
                                strSQL+=" GROUP BY a1.co_emp, a3.co_ctaRes";
                                strSQL+=" ) AS b1";
                                strSQL+=" WHERE tbm_salCta.co_emp=b1.co_emp AND tbm_salCta.co_cta=b1.co_cta AND tbm_salCta.co_per=b1.co_per";
                                System.out.println("update 2: " +strSQL);
                                stm.executeUpdate(strSQL);
                                k++;
                                pgrSis.setValue(k);
                                for (j=6; j>1; j--)
                                {
                                    //Armar la sentencia SQL.
                                    strSQL="";
                                    strSQL+="UPDATE tbm_salCta";
                                    strSQL+=" SET nd_salCta=b1.nd_salCta";
                                    strSQL+=" FROM (";
                                    strSQL+=" SELECT a1.co_emp, a1.ne_pad AS co_cta, " + strPer + " AS co_per, SUM(a2.nd_salCta) AS nd_salCta";
                                    strSQL+=" FROM tbm_plaCta AS a1";
                                    strSQL+=" INNER JOIN tbm_salCta AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta)";
                                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                                    strSQL+=" AND a1.ne_niv=" + j;
                                    strSQL+=" AND a2.co_per=" + strPer;
                                    strSQL+=" GROUP BY a1.co_emp, a1.ne_pad";
                                    strSQL+=" ) AS b1";
                                    strSQL+=" WHERE tbm_salCta.co_emp=b1.co_emp AND tbm_salCta.co_cta=b1.co_cta AND tbm_salCta.co_per=b1.co_per";
                                    System.out.println("UPDATE 3: " +strSQL);
                                    stm.executeUpdate(strSQL);
                                    k++;
                                    pgrSis.setValue(k);
                                }
                            }
                            else{
                                switch(intMes){
                                    case 1:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Enero </FONT> está cerrado.<BR>Se procesan sólo los meses que tengan período abierto.</HTML>");
                                        break;
                                    case 2:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Febrero </FONT> está cerrado.<BR>Se procesan sólo los meses que tengan período abierto.</HTML>");
                                        break;
                                    case 3:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Marzo </FONT> está cerrado.<BR>Se procesan sólo los meses que tengan período abierto.</HTML>");
                                        break;
                                    case 4:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Abril </FONT> está cerrado.<BR>Se procesan sólo los meses que tengan período abierto.</HTML>");
                                        break;
                                    case 5:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Mayo </FONT> está cerrado.<BR>Se procesan sólo los meses que tengan período abierto.</HTML>");
                                        break;
                                    case 6:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Junio </FONT> está cerrado.<BR>Se procesan sólo los meses que tengan período abierto.</HTML>");
                                        break;
                                    case 7:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Julio </FONT> está cerrado.<BR>Se procesan sólo los meses que tengan período abierto.</HTML>");
                                        break;
                                    case 8:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Agosto </FONT> está cerrado.<BR>Se procesan sólo los meses que tengan período abierto.</HTML>");
                                        break;
                                    case 9:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Septiembre </FONT> está cerrado.<BR>Se procesan sólo los meses que tengan período abierto.</HTML>");
                                        break;
                                    case 10:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Octubre </FONT> está cerrado.<BR>Se procesan sólo los meses que tengan período abierto.</HTML>");
                                        break;
                                    case 11:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Noviembre </FONT> está cerrado.<BR>Se procesan sólo los meses que tengan período abierto.</HTML>");
                                        break;
                                    case 12:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Diciembre </FONT> está cerrado.<BR>Se procesan sólo los meses que tengan período abierto.</HTML>");
                                        break;
                                }
                            }
                            
                        }
                        
                    }
                    else{
                        //Desmayorizar.
                        pgrSis.setMinimum(0);
                        pgrSis.setMaximum(strFecRan.length);
                        pgrSis.setValue(0);
                        k=0;
                        for (i=0; i<strFecRan.length; i++)
                        {
                            strPer="" + (objUti.getMes(strFecRan[i][0],"yyyy/MM/dd") + 1);
                            intMes=Integer.parseInt(strPer);
                            //VARIABLE USADA PARA VERIFICAR SI MAYORIZA O NO PORQUE EL MES FUE CERRADO
                            strMes=((strPer.length()==1)?"0"+strPer:strPer);
                            strPer="" + objUti.getAnio(strFecRan[i][0],"yyyy/MM/dd") + ((strPer.length()==1)?"0"+strPer:strPer);
                            //VARIABLE USADA PARA VERIFICAR SI MAYORIZA O NO PORQUE EL ANIO FUE CERRADO
                            strAni=""+objUti.getAnio(strFecRan[i][0],"yyyy/MM/dd");
                            
                            if(! isMesCerrado(strMes, strAni)){
                                //Armar la sentencia SQL.
                                strSQL="";
                                strSQL+="UPDATE tbm_salCta";
                                strSQL+=" SET nd_salCta=" + dblSalCta + "";
                                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa();
                                strSQL+=" AND co_per=" + strPer;
                                stm.executeUpdate(strSQL);
                            }
                            else{
                                switch(intMes){
                                    case 1:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Enero </FONT> est� cerrado.<BR>Se procesan s�lo los meses que tengan per�odo abierto.</HTML>");
                                        break;
                                    case 2:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Febrero </FONT> est� cerrado.<BR>Se procesan s�lo los meses que tengan per�odo abierto.</HTML>");
                                        break;
                                    case 3:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Marzo </FONT> est� cerrado.<BR>Se procesan s�lo los meses que tengan per�odo abierto.</HTML>");
                                        break;
                                    case 4:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Abril </FONT> est� cerrado.<BR>Se procesan s�lo los meses que tengan per�odo abierto.</HTML>");
                                        break;
                                    case 5:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Mayo </FONT> est� cerrado.<BR>Se procesan s�lo los meses que tengan per�odo abierto.</HTML>");
                                        break;
                                    case 6:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Junio </FONT> est� cerrado.<BR>Se procesan s�lo los meses que tengan per�odo abierto.</HTML>");
                                        break;
                                    case 7:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Julio </FONT> est� cerrado.<BR>Se procesan s�lo los meses que tengan per�odo abierto.</HTML>");
                                        break;
                                    case 8:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Agosto </FONT> est� cerrado.<BR>Se procesan s�lo los meses que tengan per�odo abierto.</HTML>");
                                        break;
                                    case 9:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Septiembre </FONT> est� cerrado.<BR>Se procesan s�lo los meses que tengan per�odo abierto.</HTML>");
                                        break;
                                    case 10:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Enero </FONT> est� cerrado.<BR>Se procesan s�lo los meses que tengan per�odo abierto.</HTML>");
                                        break;
                                    case 11:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Enero </FONT> est� cerrado.<BR>Se procesan s�lo los meses que tengan per�odo abierto.</HTML>");
                                        break;
                                    case 12:
                                        mostrarMsgInf("<HTML>El mes de <FONT COLOR=\"blue\">Enero </FONT> est� cerrado.<BR>Se procesan s�lo los meses que tengan per�odo abierto.</HTML>");
                                        break;
                                }
                            }
                            
                            k++;
                            pgrSis.setValue(k);
                        }
                    }
                    stm.close();
                    con.close();
                    stm=null;
                    con=null;
//                }
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butPro.setText("Procesar");
//                
                if(chkCtaEfe.isSelected()){
                    if( ! procesarCuentasEfectivo())
                        blnRes=false;
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta funci�n muestra un mensaje informativo al usuario. Se podr�a utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Esta funci�n muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si y No. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    /**
     * Esta funci�n muestra un mensaje de error al usuario. Se podr�a utilizar
     * para mostrar al usuario un mensaje que indique que los datos no se grabaron
     * y que debe comunicar de este particular al administrador del sistema.
     */
    private void mostrarMsgErr(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Esta clase crea un hilo que permite manipular la interface gr�fica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que est� ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podr�a presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estar�a informado en todo
     * momento de lo que ocurre. Si se desea hacer �sto es necesario utilizar �sta clase
     * ya que si no s�lo se apreciar�a los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        private int intIndFun;
        
        public ZafThreadGUI()
        {
            intIndFun=0;
        }
        
        public void run()
        {
            switch (intIndFun)
            {
                case 0: //Bot�n "Consultar".
                    break;
                case 1: //Bot�n "Procesar".
                    if (!procesar())
                    {
                        if (optMay.isSelected())
                            mostrarMsgErr("Ocurrió un error al realizar la operación MAYORIZAR.\nIntente realizar la operación nuevamente.\nSi el problema persiste notifiquelo a su administrador del sistema.");
                        else
                            mostrarMsgErr("Ocurrió un error al realizar la operación DESMAYORIZAR.\nIntente realizar la operación nuevamente.\nSi el problema persiste notifiquelo a su administrador del sistema.");
                        //Inicializar objetos si no se pudo cargar los datos.
                        lblMsgSis.setText("Listo");
                        pgrSis.setValue(0);
                        butPro.setText("Procesar");
                    }
                    else
                    {
                        if (optMay.isSelected())
                            mostrarMsgInf("La operación MAYORIZAR se realizó con éxito.");
                        else
                            mostrarMsgInf("La operación DESMAYORIZAR se realizó con éxito.");
                    }
                    break;
            }
            objThrGUI=null;
        }
        
        /**
         * Esta funci�n establece el indice de la funci�n a ejecutar. En la clase Thread
         * se pueden ejecutar diferentes funciones. Esta funci�n sirve para determinar
         * la funci�n que debe ejecutar el Thread.
         * @param indice El indice de la funci�n a ejecutar.
         */
        public void setIndFunEje(int indice)
        {
            intIndFun=indice;
        }
    }       
    
    /**
     * Esta funci�n establece si el mes que se desea procesar 
     * ha sido cerrado.
     * @param periodo El periodo que se desea saber si ha sido cerrado.
     */
    private boolean isMesCerrado(String mes, String anio){
        boolean blnRes=false;
        Connection conMesCer;
        Statement stmMesCer;
        ResultSet rstMesCer;
        try{
            conMesCer=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conMesCer!=null){
                stmMesCer=conMesCer.createStatement();
                strSQL="";
                strSQL+="SELECT ne_mes FROM tbm_cabCieSis AS a1";
                strSQL+=" INNER JOIN tbm_detCieSis AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.ne_ani=a2.ne_ani";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a1.ne_ani=" + anio + "";
                strSQL+=" AND a2.ne_mes=" + mes + "";
                System.out.println("SQL ISMESCERRADO: " + strSQL);
                rstMesCer=stmMesCer.executeQuery(strSQL);
                if(rstMesCer.next()){
                    blnRes=true;
                }
                conMesCer.close();
                conMesCer=null;
                stmMesCer.close();
                stmMesCer=null;
                rstMesCer.close();
                rstMesCer=null;
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite mayorizar/desmayorizar las cuentas de efectivo de acuerdo al criterio seleccionado.
     * @return true: Si se pudo realizar el proceso.
     * <BR>false: En el caso contrario.
     */
    private boolean procesarCuentasEfectivo(){
        String strPer;
        String strFecRan[][];
        boolean blnRes=true;
        double dblSalCta=0.00;
        String strMes="", strAni="";
        int intMes=0;
        
        try{
            butPro.setText("Detener");
            if (optMay.isSelected())
                lblMsgSis.setText("Mayorizando cuentas de efectivo...");
            else
                lblMsgSis.setText("Desmayorizando cuentas de efectivo...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                //Procesar las cuentas de la "Empresa seleccionada".
                strFecRan=objUti.getIntervalosMensualesRangoFechas(objSelDat.getDateFrom(), objSelDat.getDateTo(), "dd/MM/yyyy");
                if (optMay.isSelected()){
                    //Mayorizar.
                    for (int i=0; i<strFecRan.length; i++){
                        strPer="" + (objUti.getMes(strFecRan[i][0],"yyyy/MM/dd") + 1);
                        intMes=Integer.parseInt(strPer);
                        //VARIABLE USADA PARA VERIFICAR SI MAYORIZA O NO PORQUE EL MES FUE CERRADO
                        strMes=((strPer.length()==1)?"0"+strPer:strPer);
                        strPer="" + objUti.getAnio(strFecRan[i][0],"yyyy/MM/dd") + ((strPer.length()==1)?"0"+strPer:strPer);
                        //VARIABLE USADA PARA VERIFICAR SI MAYORIZA O NO PORQUE EL ANIO FUE CERRADO
                        strAni=""+objUti.getAnio(strFecRan[i][0],"yyyy/MM/dd");

                        if(! isMesCerrado(strMes, strAni)){
                            //Armar la sentencia SQL.
                            strSQL="";
                            strSQL+=" update tbm_salctaEfe";
                            strSQL+=" set nd_salCta=x.nd_salcta from (";
                            strSQL+=" SELECT b1.co_emp, b1.co_cta, " + strPer + " AS co_per, b2.nd_salCta";
                            strSQL+=" FROM tbm_plaCta AS b1";
                            strSQL+=" LEFT OUTER JOIN (";
                            //inicio de lo nuevo
                            strSQL+=" SELECT a1.co_emp, a2.co_cta, SUM(a2.nd_monDeb-a2.nd_monHab) AS nd_salCta";
                            strSQL+=" FROM tbm_cabDia AS a1 INNER JOIN tbm_detDia AS a2 ";
                            strSQL+=" ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_dia=a2.co_dia)";
                            strSQL+=" INNER JOIN (";
                            strSQL+=" 	SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_dia";
                            strSQL+=" 	FROM tbm_cabDia AS a1 INNER JOIN tbm_detDia AS a2 ";
                            strSQL+=" 	ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_dia=a2.co_dia)";
                            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                            strSQL+=" AND a1.st_reg='A'";
                            strSQL+=" AND (a1.fe_dia BETWEEN '" + strFecRan[i][0] + "' AND '" + strFecRan[i][1] + "')";
                            strSQL+=" 	AND a2.co_cta IN ";
                            strSQL+="                 (SELECT co_cta FROM tbm_plaCta WHERE co_emp=" + objParSis.getCodigoEmpresa() + " AND st_reg NOT IN('I','E') AND st_ctaFluEfe='S')";
                            strSQL+=" 	GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_dia";
                            strSQL+=" 	ORDER BY a1.co_tipDoc, a1.co_dia";
                            strSQL+=" ) as x";
                            strSQL+=" ON a1.co_emp=x.co_emp AND a1.co_loc=x.co_loc AND a1.co_tipDoc=x.co_tipDoc AND a1.co_dia=x.co_dia";
                            strSQL+=" INNER JOIN tbm_plaCta AS y";
                            strSQL+=" ON a1.co_emp=y.co_emp AND a2.co_cta=y.co_cta";
                            //strSQL+=" WHERE y.st_ctaFluEfe='N'";
                            strSQL+=" GROUP BY a1.co_emp, a2.co_cta";
                            //fin de lo nuevo
                            strSQL+=" ) AS b2 ON (b1.co_emp=b2.co_emp AND b1.co_cta=b2.co_cta)";
                            strSQL+=" WHERE b1.co_emp=" + objParSis.getCodigoEmpresa();
                            strSQL+=" ORDER BY b1.co_emp, b1.co_cta";
                            strSQL+=" ) as x";
                            strSQL+=" WHERE x.co_emp=tbm_salctaEfe.co_emp AND x.co_cta=tbm_salctaEfe.co_cta AND x.co_per=tbm_salctaEfe.co_per";
                            System.out.println("INSERT: " +strSQL);
                            stm.executeUpdate(strSQL);
                            //Armar la sentencia SQL.
                            strSQL="";
                            strSQL+="UPDATE tbm_salCtaEfe";
                            strSQL+=" SET nd_salCta=(CASE WHEN tbm_salCtaEfe.nd_salCta IS NULL THEN 0 ELSE tbm_salCtaEfe.nd_salCta END) + b1.nd_salCta";
                            strSQL+=" FROM (";
                            strSQL+=" SELECT a1.co_emp, a3.co_ctaRes AS co_cta, " + strPer + " AS co_per, SUM(a2.nd_salCta) AS nd_salCta";
                            strSQL+=" FROM tbm_plaCta AS a1";
                            strSQL+=" INNER JOIN tbm_salCtaEfe AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta)";
                            strSQL+=" INNER JOIN tbm_emp AS a3 ON (a1.co_emp=a3.co_emp)";
                            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                            strSQL+=" AND a1.tx_niv1 IN ('4', '5', '6', '7', '8')";
                            strSQL+=" AND a2.co_per=" + strPer;
                            strSQL+=" GROUP BY a1.co_emp, a3.co_ctaRes";
                            strSQL+=" ) AS b1";
                            strSQL+=" WHERE tbm_salCtaEfe.co_emp=b1.co_emp AND tbm_salCtaEfe.co_cta=b1.co_cta AND tbm_salCtaEfe.co_per=b1.co_per";
                            System.out.println("UPDATE: " +strSQL);
                            stm.executeUpdate(strSQL);
                            for (int j=6; j>1; j--){
                                //Armar la sentencia SQL.
                                strSQL="";
                                strSQL+="UPDATE tbm_salCtaEfe";
                                strSQL+=" SET nd_salCta=b1.nd_salCta";
                                strSQL+=" FROM (";
                                strSQL+=" SELECT a1.co_emp, a1.ne_pad AS co_cta, " + strPer + " AS co_per, SUM(a2.nd_salCta) AS nd_salCta";
                                strSQL+=" FROM tbm_plaCta AS a1";
                                strSQL+=" INNER JOIN tbm_salCtaEfe AS a2 ON (a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta)";
                                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                                strSQL+=" AND a1.ne_niv=" + j;
                                strSQL+=" AND a2.co_per=" + strPer;
                                strSQL+=" GROUP BY a1.co_emp, a1.ne_pad";
                                strSQL+=" ) AS b1";
                                strSQL+=" WHERE tbm_salCtaEfe.co_emp=b1.co_emp AND tbm_salCtaEfe.co_cta=b1.co_cta AND tbm_salCtaEfe.co_per=b1.co_per";
                                System.out.println("UPDATE EN FOR: " +strSQL);
                                stm.executeUpdate(strSQL);
                            }
                        }

                    }

                }
                else{
                    for (int i=0; i<strFecRan.length; i++){
                        strPer="" + (objUti.getMes(strFecRan[i][0],"yyyy/MM/dd") + 1);
                        intMes=Integer.parseInt(strPer);
                        //VARIABLE USADA PARA VERIFICAR SI MAYORIZA O NO PORQUE EL MES FUE CERRADO
                        strMes=((strPer.length()==1)?"0"+strPer:strPer);
                        strPer="" + objUti.getAnio(strFecRan[i][0],"yyyy/MM/dd") + ((strPer.length()==1)?"0"+strPer:strPer);
                        //VARIABLE USADA PARA VERIFICAR SI MAYORIZA O NO PORQUE EL ANIO FUE CERRADO
                        strAni=""+objUti.getAnio(strFecRan[i][0],"yyyy/MM/dd");

                        if(! isMesCerrado(strMes, strAni)){
                            //Armar la sentencia SQL.
                            strSQL="";
                            strSQL+="UPDATE tbm_salCtaEfe";
                            strSQL+=" SET nd_salCta=" + dblSalCta + "";
                            strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa();
                            strSQL+=" AND co_per=" + strPer;
                            stm.executeUpdate(strSQL);
                        }
                    }
                }
                stm.close();
                con.close();
                stm=null;
                con=null;
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butPro.setText("Procesar");

            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
}