/*
 * ZafCon03.java
 *
 * Created on 24 de enero de 2006, 11:06
 */
package Contabilidad.ZafCon28;

import Librerias.ZafUtil.ZafUtil;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import java.sql.*;
import Librerias.ZafVenCon.ZafVenCon;
import java.util.ArrayList;
import Librerias.ZafSelFec.ZafSelFec;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
/**
 * @author  ilino
 */
public class ZafCon28 extends javax.swing.JInternalFrame {
     Librerias.ZafUtil.ZafUtil objUti;
     Librerias.ZafParSis.ZafParSis objParSis;
     Vector vecDat, vecCab, vecReg;
     Vector vecDatDet, vecCabDet, vecRegDet;
     ZafTblMod objTblMod, objTblModDet;
     ZafColNumerada objColNum, objColNumDet;
     ZafTblPopMnu objTblPopMnu, objTblPopMnuDet;
     private ZafTblBus objTblBus, objTblBusDet;
     private ZafTblCelRenLbl  objTblCelRenLblCol, objTblCelRenLblDet;            //Render: Presentar JLabel en JTable.
     
     private String strSQL,strAux;
     private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
     private ZafMouMotAdaDet objMouMotAdaDet;
     private ZafVenCon vcoCli;                           //Ventana de consulta "Proveedor".
    
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_EMP=1;
    final int INT_TBL_DAT_COD_LOC=2;
    final int INT_TBL_DAT_COD_CLI=3;
    final int INT_TBL_DAT_NOM_CLI=4;
    final int INT_TBL_DAT_RUC=5;
    final int INT_TBL_DAT_NUM_DOC_FAC_PRV=6;
    final int INT_TBL_DAT_FEC_DOC_FAC_PRV=7;
    final int INT_TBL_DAT_VAL_SUB=8;
    final int INT_TBL_DAT_VAL_IVA=9;
    final int INT_TBL_DAT_VAL_TOT=10;
    final int INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV=11;
    final int INT_TBL_DAT_NUM_SER_DOC_FAC_PRV=12;
    final int INT_TBL_DAT_FEC_CAD_FAC_PRV=13;
    final int INT_TBL_DAT_EST=14;
    final int INT_TBL_DAT_COD_REG_DET_REC_DOC=15;
    


    final int INT_TBL_DAT_DET_LIN=0;
    final int INT_TBL_DAT_DET_COD_EMP=1;
    final int INT_TBL_DAT_DET_COD_LOC=2;
    final int INT_TBL_DAT_DET_COD_TIP_DOC=3;//PARA DESCRIPCION
    final int INT_TBL_DAT_DET_NOM_TIP_DOC=4;//PARA DESCRIPCION
    final int INT_TBL_DAT_DET_COD_DOC=5;
    final int INT_TBL_DAT_DET_NUM_DOC=6;
    final int INT_TBL_DAT_DET_FEC_DOC=7;
    final int INT_TBL_DAT_DET_VAL_SUB=8;
    final int INT_TBL_DAT_DET_VAL_IVA=9;
    final int INT_TBL_DAT_DET_VAL_TOT=10;
    final int INT_TBL_DAT_DET_VAL_ASI=11;


    private String strCodPrv, strDesLarPrv;             //Contenido del campo al obtener el foco.
    
    private boolean blnCon;
    private ZafThreadGUI objThrGUI;

    private Connection con;
    private Statement stm;
    private ResultSet rst;    
    private String strDesCorTipDoc, strDesLarTipDoc;
    
    private ZafSelFec objSelFecFacPrv;
    private ZafVenCon vcoTipDoc;
    private ZafTblOrd objTblOrd, objTblOrdDet;
    
    /** Creates new form ZafCon28 */
     public ZafCon28(Librerias.ZafParSis.ZafParSis obj) {         
      try{
          initComponents();
          this.objParSis = (Librerias.ZafParSis.ZafParSis) obj.clone();
        
        if (!configurarFrm())
            exitForm();
      }
      catch (CloneNotSupportedException e){
          objUti.mostrarMsgErr_F1(this, e);
      }
    }
    

    private void mostrarMsgError(String strMensaje){
            javax.swing.JOptionPane obj =new javax.swing.JOptionPane();
            String strTit;
            strTit="Zafiro.- Contabilidad";            
            obj.showMessageDialog(this,strMensaje,strTit,javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
     private void mostrarMsgInf(String strMsg) {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }   

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGrl = new javax.swing.JPanel();
        panCen = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        panFecFacPrv = new javax.swing.JPanel();
        panFil = new javax.swing.JPanel();
        lblPrv = new javax.swing.JLabel();
        txtCodPrv = new javax.swing.JTextField();
        txtDesLarPrv = new javax.swing.JTextField();
        butPrv = new javax.swing.JButton();
        txtCodTipDoc = new javax.swing.JTextField();
        lblTipDoc = new javax.swing.JLabel();
        txtDesCorTipDoc = new javax.swing.JTextField();
        txtDesLarTipDoc = new javax.swing.JTextField();
        butTipDoc = new javax.swing.JButton();
        chkExcVenEmp = new javax.swing.JCheckBox();
        panRep = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDet = new javax.swing.JTable();
        chkMosMovReg = new javax.swing.JCheckBox();
        panPie = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("TÃ­tulo de la ventana");
        lblTit.setPreferredSize(new java.awt.Dimension(138, 20));
        lblTit.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        tabFrm.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        panGrl.setLayout(new java.awt.BorderLayout());

        panCen.setName(""); // NOI18N
        panCen.setPreferredSize(new java.awt.Dimension(10, 300));
        panCen.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        panFecFacPrv.setLayout(new java.awt.BorderLayout());
        jPanel1.add(panFecFacPrv, java.awt.BorderLayout.CENTER);

        panCen.add(jPanel1, java.awt.BorderLayout.CENTER);

        panFil.setPreferredSize(new java.awt.Dimension(0, 230));
        panFil.setLayout(null);

        lblPrv.setText("Proveedor:");
        lblPrv.setToolTipText("Proveedor");
        panFil.add(lblPrv);
        lblPrv.setBounds(8, 32, 70, 20);

        txtCodPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodPrvActionPerformed(evt);
            }
        });
        txtCodPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusLost(evt);
            }
        });
        panFil.add(txtCodPrv);
        txtCodPrv.setBounds(150, 32, 80, 20);

        txtDesLarPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarPrvActionPerformed(evt);
            }
        });
        txtDesLarPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusLost(evt);
            }
        });
        panFil.add(txtDesLarPrv);
        txtDesLarPrv.setBounds(230, 32, 280, 20);

        butPrv.setText("...");
        butPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrvActionPerformed(evt);
            }
        });
        panFil.add(butPrv);
        butPrv.setBounds(510, 32, 20, 20);
        panFil.add(txtCodTipDoc);
        txtCodTipDoc.setBounds(116, 10, 32, 20);

        lblTipDoc.setText("Tipo de documento:");
        lblTipDoc.setToolTipText("Tipo de documento");
        panFil.add(lblTipDoc);
        lblTipDoc.setBounds(8, 10, 120, 20);

        txtDesCorTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorTipDocActionPerformed(evt);
            }
        });
        txtDesCorTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusLost(evt);
            }
        });
        panFil.add(txtDesCorTipDoc);
        txtDesCorTipDoc.setBounds(150, 10, 80, 20);

        txtDesLarTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarTipDocActionPerformed(evt);
            }
        });
        txtDesLarTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusLost(evt);
            }
        });
        panFil.add(txtDesLarTipDoc);
        txtDesLarTipDoc.setBounds(230, 10, 280, 20);

        butTipDoc.setText("...");
        butTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butTipDocActionPerformed(evt);
            }
        });
        panFil.add(butTipDoc);
        butTipDoc.setBounds(510, 10, 20, 20);

        chkExcVenEmp.setText("Excluir las ventas entre las empresas del grupo");
        chkExcVenEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkExcVenEmpActionPerformed(evt);
            }
        });
        panFil.add(chkExcVenEmp);
        chkExcVenEmp.setBounds(0, 56, 400, 20);

        panCen.add(panFil, java.awt.BorderLayout.SOUTH);

        panGrl.add(panCen, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panGrl);

        panRep.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setDividerSize(6);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.5);
        jSplitPane1.setOneTouchExpandable(true);
        jSplitPane1.setPreferredSize(new java.awt.Dimension(402, 800));

        jPanel2.setLayout(new java.awt.BorderLayout());

        spnDat.setPreferredSize(new java.awt.Dimension(452, 266));

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDat.setViewportView(tblDat);

        jPanel2.add(spnDat, java.awt.BorderLayout.CENTER);

        jSplitPane1.setTopComponent(jPanel2);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 60));

        tblDet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDet);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        chkMosMovReg.setText("Mostrar documento por pagar asociado a la factura de proveedor seleccionada");
        chkMosMovReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMosMovRegActionPerformed(evt);
            }
        });
        jPanel3.add(chkMosMovReg, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setBottomComponent(jPanel3);

        panRep.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Reporte", panRep);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panPie.setMinimumSize(new java.awt.Dimension(50, 33));
        panPie.setPreferredSize(new java.awt.Dimension(0, 50));
        panPie.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panPie.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panPie.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panPie, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        // TODO add your handling code here:
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="Ã¡EstÃ¡ seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                dispose();
            }
        }
        catch (Exception e){
            dispose();
        }
        
}//GEN-LAST:event_exitForm

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        // TODO add your handling code here:
        if (butCon.getText().equals("Consultar")){
            blnCon=true;
            if (objThrGUI==null){
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }
        }
        else{
            blnCon=false;
        }
}//GEN-LAST:event_butConActionPerformed

    /** Cerrar la aplicaciÃ¡n. */
    private void exitForm()
    {
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="Ã¡EstÃ¡ seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            this.dispose();
        }
    }        
    
    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        // TODO add your handling code here:
//        this.dispose();
        exitForm();
        
    }//GEN-LAST:event_butCerActionPerformed

private void txtCodPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodPrvActionPerformed
    txtCodPrv.transferFocus();
}//GEN-LAST:event_txtCodPrvActionPerformed

private void txtCodPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusGained
    strCodPrv=txtCodPrv.getText();
    txtCodPrv.selectAll();
}//GEN-LAST:event_txtCodPrvFocusGained

private void txtCodPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusLost
//Validar el contenido de la celda sÃ¡lo si ha cambiado.
        if (!txtCodPrv.getText().equalsIgnoreCase(strCodPrv))
        {
            if (txtCodPrv.getText().equals(""))
            {
                txtCodPrv.setText("");
                txtDesLarPrv.setText("");
                objTblMod.removeAllRows();
            }
            else
            {
                mostrarVenConPrv(1);
            }
        }
        else
            txtCodPrv.setText(strCodPrv);
}//GEN-LAST:event_txtCodPrvFocusLost

private void txtDesLarPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarPrvActionPerformed
    txtDesLarPrv.transferFocus();
}//GEN-LAST:event_txtDesLarPrvActionPerformed

private void txtDesLarPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusGained
    strDesLarPrv=txtDesLarPrv.getText();
    txtDesLarPrv.selectAll();
}//GEN-LAST:event_txtDesLarPrvFocusGained

private void txtDesLarPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusLost
//Validar el contenido de la celda sÃ¡lo si ha cambiado.
        if (!txtDesLarPrv.getText().equalsIgnoreCase(strDesLarPrv))
        {
            if (txtDesLarPrv.getText().equals(""))
            {
                txtCodPrv.setText("");
                txtDesLarPrv.setText("");
                objTblMod.removeAllRows();
            }
            else
            {
                mostrarVenConPrv(2);
            }
        }
        else
            txtDesLarPrv.setText(strDesLarPrv);
}//GEN-LAST:event_txtDesLarPrvFocusLost


private void butPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrvActionPerformed
strCodPrv=txtCodPrv.getText();
        mostrarVenConPrv(0);
}//GEN-LAST:event_butPrvActionPerformed

private void txtDesCorTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorTipDocActionPerformed
    // TODO add your handling code here:
    txtDesCorTipDoc.transferFocus();
}//GEN-LAST:event_txtDesCorTipDocActionPerformed

private void txtDesCorTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusGained
    // TODO add your handling code here:
        strDesCorTipDoc=txtDesCorTipDoc.getText();
        txtDesCorTipDoc.selectAll();
}//GEN-LAST:event_txtDesCorTipDocFocusGained

private void txtDesCorTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusLost
    // TODO add your handling code here:
        //Validar el contenido de la celda sÃ¡lo si ha cambiado.
        if (!txtDesCorTipDoc.getText().equalsIgnoreCase(strDesCorTipDoc))
        {
            if (txtDesCorTipDoc.getText().equals(""))
            {
                txtCodTipDoc.setText("");
                txtDesLarTipDoc.setText("");
            }
            else
            {
                mostrarVenConTipDoc(1);
            }
        }
        else
            txtDesCorTipDoc.setText(strDesCorTipDoc);
}//GEN-LAST:event_txtDesCorTipDocFocusLost

private void txtDesLarTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarTipDocActionPerformed
    // TODO add your handling code here:
    txtDesLarTipDoc.transferFocus();
}//GEN-LAST:event_txtDesLarTipDocActionPerformed

private void txtDesLarTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusGained
    // TODO add your handling code here:
        strDesLarTipDoc=txtDesLarTipDoc.getText();
        txtDesLarTipDoc.selectAll();
}//GEN-LAST:event_txtDesLarTipDocFocusGained

private void txtDesLarTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusLost
    // TODO add your handling code here:
        //Validar el contenido de la celda sÃ¡lo si ha cambiado.
        if (!txtDesLarTipDoc.getText().equalsIgnoreCase(strDesLarTipDoc))
        {
            if (txtDesLarTipDoc.getText().equals(""))
            {
                txtCodTipDoc.setText("");
                txtDesCorTipDoc.setText("");
            }
            else
            {
                mostrarVenConTipDoc(2);
            }
        }
        else
            txtDesLarTipDoc.setText(strDesLarTipDoc);
}//GEN-LAST:event_txtDesLarTipDocFocusLost

private void butTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butTipDocActionPerformed
    // TODO add your handling code here:
    mostrarVenConTipDoc(0);
}//GEN-LAST:event_butTipDocActionPerformed

private void chkExcVenEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkExcVenEmpActionPerformed

}//GEN-LAST:event_chkExcVenEmpActionPerformed

private void chkMosMovRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMosMovRegActionPerformed
     //TODO add your handling code here:
    if (chkMosMovReg.isSelected()){
        cargarDetReg();
    }
    else
        objTblModDet.removeAllRows();
}//GEN-LAST:event_chkMosMovRegActionPerformed
    


    /**
     * Esta funciÃ¡n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de bÃ¡squeda determina si se debe hacer
     * una bÃ¡squeda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se estÃ¡ buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opciÃ¡n que desea utilizar.
     * @param intTipBus El tipo de bÃ¡squeda a realizar.
     * @return true: Si no se presentÃ¡ ningÃ¡n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConPrv(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoCli.setCampoBusqueda(2);
                    vcoCli.show();
                    if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                    {
                        txtCodPrv.setText(vcoCli.getValueAt(1));
                        txtDesLarPrv.setText(vcoCli.getValueAt(3));
                        objTblMod.removeAllRows();
                    }
                    break;
                case 1: //BÃ¡squeda directa por "NÃ¡mero de cuenta".
                    if (vcoCli.buscar("a1.co_cli", txtCodPrv.getText()))
                    {
                        txtCodPrv.setText(vcoCli.getValueAt(1));
                        txtDesLarPrv.setText(vcoCli.getValueAt(3));
                        objTblMod.removeAllRows();
                    }
                    else
                    {
                        vcoCli.setCampoBusqueda(0);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                        {
                            txtCodPrv.setText(vcoCli.getValueAt(1));
                            txtDesLarPrv.setText(vcoCli.getValueAt(3));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtCodPrv.setText(strCodPrv);
                        }
                    }
                    break;
                case 2: //BÃ¡squeda directa por "DescripciÃ¡n larga".
                    if (vcoCli.buscar("a1.tx_nom", txtDesLarPrv.getText()))
                    {
                        txtCodPrv.setText(vcoCli.getValueAt(1));
                        txtDesLarPrv.setText(vcoCli.getValueAt(3));
                        objTblMod.removeAllRows();
                    }
                    else
                    {
                        vcoCli.setCampoBusqueda(2);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                        {
                            txtCodPrv.setText(vcoCli.getValueAt(1));
                            txtDesLarPrv.setText(vcoCli.getValueAt(3));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtDesLarPrv.setText(strDesLarPrv);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butPrv;
    private javax.swing.JButton butTipDoc;
    private javax.swing.JCheckBox chkExcVenEmp;
    private javax.swing.JCheckBox chkMosMovReg;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblPrv;
    private javax.swing.JLabel lblTipDoc;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panCen;
    private javax.swing.JPanel panFecFacPrv;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGrl;
    private javax.swing.JPanel panPie;
    private javax.swing.JPanel panRep;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblDet;
    private javax.swing.JTextField txtCodPrv;
    private javax.swing.JTextField txtCodTipDoc;
    private javax.swing.JTextField txtDesCorTipDoc;
    private javax.swing.JTextField txtDesLarPrv;
    private javax.swing.JTextField txtDesLarTipDoc;
    // End of variables declaration//GEN-END:variables

    private boolean isCamVal(){
        //Validar el "Tipo de documento".
        if (txtCodTipDoc.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Tipo de documento</FONT> es obligatorio.<BR>Escriba o seleccione un tipo de documento y vuelva a intentarlo.</HTML>");
            txtDesCorTipDoc.requestFocus();
            return false;
        }

        return true;
    }


    
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            objSelFecFacPrv=new ZafSelFec();
            objSelFecFacPrv.setCheckBoxVisible(true);
            objSelFecFacPrv.setCheckBoxChecked(false);
            objSelFecFacPrv.setTitulo("Rango de fecha de la factura");
            panFecFacPrv.add(objSelFecFacPrv);
            objSelFecFacPrv.setBounds(4, 4, 472, 72);

            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux+"  v0.4");
            lblTit.setText(strAux);
            //Configurar objetos.
            //txtCodCta.setVisible(false);
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(16);  //Almacena las cabeceras
            vecCab.clear();                                    
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_EMP,"cÃ³d.Emp.");
            vecCab.add(INT_TBL_DAT_COD_LOC,"CÃ³d.Loc.");
            
            vecCab.add(INT_TBL_DAT_COD_CLI,"CÃ³d.Cli.");
            vecCab.add(INT_TBL_DAT_NOM_CLI,"Nom.Cli.");
            vecCab.add(INT_TBL_DAT_RUC,"Ruc");
            vecCab.add(INT_TBL_DAT_NUM_DOC_FAC_PRV,"Num.Fac.Prv.");
            vecCab.add(INT_TBL_DAT_FEC_DOC_FAC_PRV,"Fec.Fac.Prv.");
            
            vecCab.add(INT_TBL_DAT_VAL_SUB,"Sub.Fac.Prv.");
            vecCab.add(INT_TBL_DAT_VAL_IVA,"Iva.Fac.Prv.");
            vecCab.add(INT_TBL_DAT_VAL_TOT,"Tot.Fac.Prv.");

            vecCab.add(INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV,"Num.Aut.Sri.Fac.Prv");
            vecCab.add(INT_TBL_DAT_NUM_SER_DOC_FAC_PRV,"Num.Ser.Fac.Prv.");
            vecCab.add(INT_TBL_DAT_FEC_CAD_FAC_PRV,"Fec.Cad..Fac.Prv.");
            vecCab.add(INT_TBL_DAT_EST,"Estado");
            vecCab.add(INT_TBL_DAT_COD_REG_DET_REC_DOC,"CÃ³d.Reg.Tbl.Det.Rec.Doc.");



            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);


            //Configurar JTable: Establecer tipo de selecciÃ¡n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            //Configurar JTable: Establecer el menÃ¡ de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(90);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(60);
            
            tcmAux.getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(200);
            tcmAux.getColumn(INT_TBL_DAT_RUC).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC_FAC_PRV).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC_FAC_PRV).setPreferredWidth(80);



            tcmAux.getColumn(INT_TBL_DAT_VAL_SUB).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_VAL_IVA).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_VAL_TOT).setPreferredWidth(80);




            tcmAux.getColumn(INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_NUM_SER_DOC_FAC_PRV).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_FEC_CAD_FAC_PRV).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_EST).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_COD_REG_DET_REC_DOC).setPreferredWidth(50);


            
            



            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);

            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_EMP, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_LOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_REG_DET_REC_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_EST, tblDat);
            
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Editor de bÃ¡squeda.
            objTblBus=new ZafTblBus(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);
            //Configurar JTable: Renderizar celdas.

            objTblCelRenLblCol=new ZafTblCelRenLbl();
            objTblCelRenLblCol.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLblCol.setTipoFormato(objTblCelRenLblCol.INT_FOR_GEN);
            tcmAux.getColumn(INT_TBL_DAT_COD_CLI).setCellRenderer(objTblCelRenLblCol);            
            objTblCelRenLblCol=null;

            objTblCelRenLblCol=new ZafTblCelRenLbl();
            objTblCelRenLblCol.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLblCol.setTipoFormato(objTblCelRenLblCol.INT_FOR_NUM);
            objTblCelRenLblCol.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_VAL_SUB).setCellRenderer(objTblCelRenLblCol);
            tcmAux.getColumn(INT_TBL_DAT_VAL_IVA).setCellRenderer(objTblCelRenLblCol);
            tcmAux.getColumn(INT_TBL_DAT_VAL_TOT).setCellRenderer(objTblCelRenLblCol);
            objTblCelRenLblCol=null;

            objTblCelRenLblCol=new ZafTblCelRenLbl();
            objTblCelRenLblCol.setHorizontalAlignment(javax.swing.JLabel.LEFT);
            objTblCelRenLblCol.setTipoFormato(objTblCelRenLblCol.INT_FOR_GEN);
            objTblCelRenLblCol.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setCellRenderer(objTblCelRenLblCol);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setCellRenderer(objTblCelRenLblCol);
            
            tcmAux.getColumn(INT_TBL_DAT_COD_CLI).setCellRenderer(objTblCelRenLblCol);
            tcmAux.getColumn(INT_TBL_DAT_NOM_CLI).setCellRenderer(objTblCelRenLblCol);
            tcmAux.getColumn(INT_TBL_DAT_RUC).setCellRenderer(objTblCelRenLblCol);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC_FAC_PRV).setCellRenderer(objTblCelRenLblCol);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC_FAC_PRV).setCellRenderer(objTblCelRenLblCol);
            tcmAux.getColumn(INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV).setCellRenderer(objTblCelRenLblCol);
            tcmAux.getColumn(INT_TBL_DAT_NUM_SER_DOC_FAC_PRV).setCellRenderer(objTblCelRenLblCol);
            tcmAux.getColumn(INT_TBL_DAT_FEC_CAD_FAC_PRV).setCellRenderer(objTblCelRenLblCol);
            objTblCelRenLblCol.addTblCelRenListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTblCelRenAdapter() {

                java.awt.Color colFonColFilOcu;
                public void beforeRender(Librerias.ZafTblUti.ZafTblEvt.ZafTblCelRenEvent evt) {
                    colFonColFilOcu=new java.awt.Color(228,228,203);
                    if (objTblMod.getValueAt(objTblCelRenLblCol.getRowRender(), INT_TBL_DAT_EST).equals("V")){//color verde para fechas diferentes
                        objTblCelRenLblCol.setForeground(new java.awt.Color(0,204,153));
                    }
                    else if (objTblMod.getValueAt(objTblCelRenLblCol.getRowRender(), INT_TBL_DAT_EST).equals("L")){//color lila para documentos no cancelados
                        objTblCelRenLblCol.setForeground(new java.awt.Color(153,0,153));
                    }
                    else if (objTblMod.getValueAt(objTblCelRenLblCol.getRowRender(), INT_TBL_DAT_EST).equals("A")){//color azul para retenciones canceladas en la fecha del filtro pero pertenecen a documentos de otra fecha
                        objTblCelRenLblCol.setForeground(new java.awt.Color(0,102,204));
                    }
                    else if (objTblMod.getValueAt(objTblCelRenLblCol.getRowRender(), INT_TBL_DAT_EST).equals("M")){//color verdoso-mostaza para retenciones canceladas a traves de cruces y otro documento que no sea retencion
                        objTblCelRenLblCol.setForeground(new java.awt.Color(153,153,0));
                    }
                    else{
                        //color automatico
                        objTblCelRenLblCol.setForeground(new java.awt.Color(0,0,0));
                    }
                }
            });


            //Libero los objetos auxiliares.
            tcmAux=null;


            configurarVenConPrv();
            configurarVenConTipDoc();


            txtCodTipDoc.setVisible(false);
            txtCodTipDoc.setEditable(false);
            txtCodTipDoc.setEnabled(false);

            configurarFrmDet();

            //Configurar JTable: Establecer el ListSelectionListener.
            javax.swing.ListSelectionModel lsm=tblDat.getSelectionModel();
            lsm.addListSelectionListener(new ZafLisSelLis());


        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    /** Configurar el formulario. */
    private boolean configurarFrmDet()
    {
        boolean blnRes=true;
        try
        {
            //Configurar JTable: Establecer el modelo.
            vecDatDet=new Vector();    //Almacena los datos
            vecCabDet=new Vector(12);  //Almacena las cabeceras
            vecCabDet.clear();
            vecCabDet.add(INT_TBL_DAT_DET_LIN,"");
            vecCabDet.add(INT_TBL_DAT_DET_COD_EMP,"cÃ³d.Emp.");
            vecCabDet.add(INT_TBL_DAT_DET_COD_LOC,"CÃ³d.Loc.");
            vecCabDet.add(INT_TBL_DAT_DET_COD_TIP_DOC,"cÃ³d.Tip.Doc.");
            vecCabDet.add(INT_TBL_DAT_DET_NOM_TIP_DOC,"Nom.Tip.Doc.");
            vecCabDet.add(INT_TBL_DAT_DET_COD_DOC,"CÃ³d.Doc.");
            vecCabDet.add(INT_TBL_DAT_DET_NUM_DOC,"NÃºm.Doc.");
            vecCabDet.add(INT_TBL_DAT_DET_FEC_DOC,"Fecha");
            vecCabDet.add(INT_TBL_DAT_DET_VAL_SUB,"Sub");
            vecCabDet.add(INT_TBL_DAT_DET_VAL_IVA,"Iva");
            vecCabDet.add(INT_TBL_DAT_DET_VAL_TOT,"Tot");
            vecCabDet.add(INT_TBL_DAT_DET_VAL_ASI,"Val.Asi.");

            objTblModDet=new ZafTblMod();
            objTblModDet.setHeader(vecCabDet);
            tblDet.setModel(objTblModDet);


            //Configurar JTable: Establecer tipo de selecciÃ¡n.
            tblDet.setRowSelectionAllowed(true);
            tblDet.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            objColNumDet=new ZafColNumerada(tblDet,INT_TBL_DAT_DET_LIN);
            //Configurar JTable: Establecer el menÃ¡ de contexto.
            objTblPopMnuDet=new ZafTblPopMnu(tblDet);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDet.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDet.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_DET_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_DET_COD_EMP).setPreferredWidth(90);
            tcmAux.getColumn(INT_TBL_DAT_DET_COD_LOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DET_COD_TIP_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DET_NOM_TIP_DOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_DET_COD_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DET_NUM_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DET_FEC_DOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_DET_VAL_SUB).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_DET_VAL_IVA).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_DET_VAL_TOT).setPreferredWidth(90);
            tcmAux.getColumn(INT_TBL_DAT_DET_VAL_ASI).setPreferredWidth(90);



            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDet.getTableHeader().setReorderingAllowed(false);

            objTblModDet.addSystemHiddenColumn(INT_TBL_DAT_DET_COD_EMP, tblDet);
            objTblModDet.addSystemHiddenColumn(INT_TBL_DAT_DET_COD_LOC, tblDet);
            objTblModDet.addSystemHiddenColumn(INT_TBL_DAT_DET_COD_TIP_DOC, tblDet);
            objTblModDet.addSystemHiddenColumn(INT_TBL_DAT_DET_COD_DOC, tblDet);

            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAdaDet=new ZafMouMotAdaDet();
            tblDet.getTableHeader().addMouseMotionListener(objMouMotAdaDet);
            //Configurar JTable: Editor de bÃ¡squeda.
            objTblBusDet=new ZafTblBus(tblDet);
            objTblOrdDet=new ZafTblOrd(tblDet);
            //Configurar JTable: Renderizar celdas.

            objTblCelRenLblDet=new ZafTblCelRenLbl();
            objTblCelRenLblDet.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLblDet.setTipoFormato(objTblCelRenLblCol.INT_FOR_GEN);
            tcmAux.getColumn(INT_TBL_DAT_DET_COD_EMP).setCellRenderer(objTblCelRenLblDet);
            tcmAux.getColumn(INT_TBL_DAT_DET_COD_LOC).setCellRenderer(objTblCelRenLblDet);
            tcmAux.getColumn(INT_TBL_DAT_DET_COD_TIP_DOC).setCellRenderer(objTblCelRenLblDet);
            tcmAux.getColumn(INT_TBL_DAT_DET_COD_DOC).setCellRenderer(objTblCelRenLblDet);
            tcmAux.getColumn(INT_TBL_DAT_DET_NUM_DOC).setCellRenderer(objTblCelRenLblDet);
            objTblCelRenLblDet=null;

            objTblCelRenLblDet=new ZafTblCelRenLbl();
            objTblCelRenLblDet.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLblDet.setTipoFormato(objTblCelRenLblCol.INT_FOR_NUM);
            objTblCelRenLblDet.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_DET_VAL_SUB).setCellRenderer(objTblCelRenLblDet);
            tcmAux.getColumn(INT_TBL_DAT_DET_VAL_IVA).setCellRenderer(objTblCelRenLblDet);
            tcmAux.getColumn(INT_TBL_DAT_DET_VAL_TOT).setCellRenderer(objTblCelRenLblDet);
            tcmAux.getColumn(INT_TBL_DAT_DET_VAL_ASI).setCellRenderer(objTblCelRenLblDet);

            //Libero los objetos auxiliares.
            tcmAux=null;



        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren mÃ¡s espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD_EMP:
                    strMsg="CÃ³digo Empresa";
                    break;
                case INT_TBL_DAT_COD_LOC:
                    strMsg="CÃ³digo Local";
                    break;
                case INT_TBL_DAT_COD_CLI:
                    strMsg="CÃ³digo proveedor";
                    break;                    
                case INT_TBL_DAT_NOM_CLI:
                    strMsg="Nombre del proveedor";
                    break;
                case INT_TBL_DAT_RUC:
                    strMsg="Ruc proveedor";
                    break;
                case INT_TBL_DAT_NUM_DOC_FAC_PRV:
                    strMsg="NÃºmero de la facturas del proveedor";
                    break;
                case INT_TBL_DAT_FEC_DOC_FAC_PRV:
                    strMsg="Fecha de la factura del proveedor";
                    break;
                case INT_TBL_DAT_VAL_SUB:
                    strMsg="Subtotal de la factura del proveedor";
                    break;
                case INT_TBL_DAT_VAL_IVA:
                    strMsg="iva de la factura del proveedor";
                    break;
                case INT_TBL_DAT_VAL_TOT:
                    strMsg="Total de la factura del proveedor";
                    break;
                case INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV:
                    strMsg="NÃºmero de autorizaciÃ³n de la factura del proveedor";
                    break;
                case INT_TBL_DAT_NUM_SER_DOC_FAC_PRV:
                    strMsg="NÃºmero de serie de la factura del proveedor";
                    break;
                case INT_TBL_DAT_FEC_CAD_FAC_PRV:
                    strMsg="Fecha de caducidad de la factura del proveedor";
                    break;
                case INT_TBL_DAT_EST:
                    strMsg="<HTML>Este estado determina si es un documento con iva y sin retencion(negro), <BR>Documento pagado en una fecha diferente al filtro(verde), <BR>Documentos que no han sido cancelados(lila)<HTML>";
                    break;
                case INT_TBL_DAT_COD_REG_DET_REC_DOC:
                    strMsg="Contiene el cÃ³digo de registro de la recepciÃ³n";
                    break;

                default:
                    break;




            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }



    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren mÃ¡s espacio.
     */
    private class ZafMouMotAdaDet extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDet.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_DET_COD_EMP:
                    strMsg="CÃ³digo Empresa";
                    break;
                case INT_TBL_DAT_DET_COD_LOC:
                    strMsg="CÃ³digo Local";
                    break;
                case INT_TBL_DAT_DET_COD_TIP_DOC:
                    strMsg="CÃ³digo Tipo Documento";
                    break;
                case INT_TBL_DAT_DET_NOM_TIP_DOC:
                    strMsg="Tipo Documento";
                    break;
                case INT_TBL_DAT_DET_COD_DOC:
                    strMsg="CÃ³digo Documento";
                    break;
                case INT_TBL_DAT_DET_NUM_DOC:
                    strMsg="NÃºmero del documento en el sistema";
                    break;
                case INT_TBL_DAT_DET_FEC_DOC:
                    strMsg="Fecha de emisiÃ³n orden de compra";
                    break;
                case INT_TBL_DAT_DET_VAL_SUB:
                    strMsg="Subtotal de la factura del proveedor";
                    break;
                case INT_TBL_DAT_DET_VAL_IVA:
                    strMsg="Valor de Iva";
                    break;
                case INT_TBL_DAT_DET_VAL_TOT:
                    strMsg="Total del Comprobante de Venta";
                    break;
                case INT_TBL_DAT_DET_VAL_ASI:
                    strMsg="Valor de la Factura de Proveedor que se le asignÃ³ al Documento por Pagar";
                    break;
                default:
                    break;

            }
            tblDet.getTableHeader().setToolTipText(strMsg);
        }
    }



    private class ZafThreadGUI extends Thread{
        public void run(){
            if (!cargarRegFacPrv()){
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sÃ¡lo cuando haya datos.
            if (tblDat.getRowCount()>0){
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }



    /**
     * Esta funciÃ¡n permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarRegFacPrv(){
        boolean blnRes=true;
        int i;
        strAux="";
        String strAuxFecFacPrv="";
        String strAuxFecDevCom="";
        String strFecDoc="";
        String strFecFac="";


        try{
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
           
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if( ! txtCodTipDoc.getText().equals(""))
                strAux+=" AND a1.co_tipDoc=" + txtCodTipDoc.getText() + "";
            if( ! txtCodPrv.getText().equals(""))
                strAux+=" AND a1.co_cli=" + txtCodPrv.getText() + "";


            if(objSelFecFacPrv.isCheckBoxChecked()){
                switch (objSelFecFacPrv.getTipoSeleccion()){
                    case 0: //BÃ¡squeda por rangos
                        strAuxFecFacPrv+=" AND (a2.fe_venChq BETWEEN '" + objUti.formatearFecha(objSelFecFacPrv.getFechaDesde(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFecFacPrv.getFechaHasta(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        strAuxFecDevCom+=" AND a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFecFacPrv.getFechaDesde(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFecFacPrv.getFechaHasta(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 1: //Fechas menores o iguales que "Hasta".
                        strAuxFecFacPrv+=" AND (a2.fe_venChq<='" + objUti.formatearFecha(objSelFecFacPrv.getFechaHasta(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        strAuxFecDevCom+=" AND a1.fe_doc<='" + objUti.formatearFecha(objSelFecFacPrv.getFechaHasta(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 2: //Fechas mayores o iguales que "Desde".
                        strAuxFecFacPrv+=" AND (a2.fe_venChq>='" + objUti.formatearFecha(objSelFecFacPrv.getFechaDesde(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        strAuxFecDevCom+=" AND a1.fe_doc>='" + objUti.formatearFecha(objSelFecFacPrv.getFechaDesde(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 3: //Todo.
                        break;
                }
            }


            if (chkExcVenEmp.isSelected())
            {
                //Temporal hasta que se busque una mejor manera de hacerlo.
                strAux+=" AND NOT (a1.co_emp=1 AND a1.co_cli IN(3515,602,2600, 3516, 603, 1039)  )";
                strAux+=" AND NOT (a1.co_emp=2 AND a1.co_cli IN(2853,2854,446,447,2105,789,790)  )";
                strAux+=" AND NOT (a1.co_emp=3 AND a1.co_cli IN(2857,2858,452,453,2107,832)  )";
                strAux+=" AND NOT (a1.co_emp=4 AND a1.co_cli IN(3116,3117,497,498,2294,886,887)   )";
            }

          
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT b2.co_emp, b2.co_loc";
                strSQL+=" , b2.co_cli, b2.tx_ruc, b2.tx_nomCli, (b2.nd_tot-b2.nd_valIva) AS nd_basImp, (b2.nd_valIva) AS nd_valIva, (b2.nd_tot) AS nd_tot";
                strSQL+=" , b2.tx_numChq, b2.fe_fac, b2.tx_numAutSri, b2.tx_numSer, b2.tx_fecCad, b2.st_colReg, b2.co_reg";
                strSQL+=" FROM(";
                strSQL+=" 	SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a2.tx_numChq";
                strSQL+=" 	FROM tbm_cabMovInv AS a1 INNER JOIN tbm_pagMovInv AS a2";
                strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                strSQL+=" 	INNER JOIN tbr_detRecDocCabMovInv AS a4";
                strSQL+=" 	ON a2.co_emp=a4.co_empRel AND a2.co_loc=a4.co_locRel AND a2.co_tipDoc=a4.co_tipDocRel AND a2.co_doc=a4.co_docRel";
                strSQL+=" 	INNER JOIN tbm_detRecDoc AS a5";
                strSQL+=" 	ON a4.co_emp=a5.co_emp AND a4.co_loc=a5.co_loc AND a4.co_tipDoc=a5.co_tipDoc AND a4.co_doc=a5.co_doc  AND a4.co_reg=a5.co_reg AND a2.tx_numChq=a5.tx_numChq";
                strSQL+=" 	INNER JOIN tbm_cabRecDoc AS a6";
                strSQL+=" 	ON a5.co_emp=a6.co_emp AND a5.co_loc=a6.co_loc AND a5.co_tipDoc=a6.co_tipDoc AND a5.co_doc=a6.co_doc";
                if(objParSis.getCodigoUsuario()==1){
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+="   AND a1.co_tipDoc IN(";
                    strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocPrg ";
                    strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                    strSQL+=" )";
                }
                else{
//                    if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="   AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+=" )";
//                    }
//                    else{
//                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
//                        strSQL+="   AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
//                        strSQL+="   AND a1.co_tipDoc IN(";
//                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
//                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
//                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
//                        strSQL+="                           AND co_usr=" + objParSis.getCodigoUsuario() + "";
//                        strSQL+=" )";
//                    }
                }
                strSQL+=" " + strAux + " " + strAuxFecFacPrv;

                strSQL+=" 	AND a1.st_reg NOT IN('E','I') AND a2.st_reg IN('A','C')";
                strSQL+=" 	AND a2.nd_valIva<>0";
                strSQL+=" 	EXCEPT";
                strSQL+=" 	SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a2.tx_numChq";
                strSQL+=" 	FROM tbm_cabMovInv AS a1 INNER JOIN tbm_pagMovInv AS a2";
                strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                strSQL+=" 	INNER JOIN tbr_detRecDocCabMovInv AS a4";
                strSQL+=" 	ON a2.co_emp=a4.co_empRel AND a2.co_loc=a4.co_locRel AND a2.co_tipDoc=a4.co_tipDocRel AND a2.co_doc=a4.co_docRel";
                strSQL+=" 	INNER JOIN tbm_detRecDoc AS a5";
                strSQL+=" 	ON a4.co_emp=a5.co_emp AND a4.co_loc=a5.co_loc AND a4.co_tipDoc=a5.co_tipDoc AND a4.co_doc=a5.co_doc  AND a4.co_reg=a5.co_reg AND a2.tx_numChq=a5.tx_numChq";
                strSQL+=" 	INNER JOIN tbm_cabRecDoc AS a6";
                strSQL+=" 	ON a5.co_emp=a6.co_emp AND a5.co_loc=a6.co_loc AND a5.co_tipDoc=a6.co_tipDoc AND a5.co_doc=a6.co_doc";
                if(objParSis.getCodigoUsuario()==1){
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+="   AND a1.co_tipDoc IN(";
                    strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocPrg ";
                    strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                    strSQL+=" )";
                }
                else{
//                    if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="   AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+=" )";
//                    }
//                    else{
//                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
//                        strSQL+="   AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
//                        strSQL+="   AND a1.co_tipDoc IN(";
//                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
//                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
//                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
//                        strSQL+="                           AND co_usr=" + objParSis.getCodigoUsuario() + "";
//                        strSQL+=" )";
//                    }
                }
                strSQL+=" " + strAux + " " + strAuxFecFacPrv;
                strSQL+=" 	AND a1.st_reg NOT IN('E','I') AND a2.st_reg IN('A','C')";
                strSQL+=" 	AND a2.nd_porRet>0";
                strSQL+=" ) AS b1";
                strSQL+=" INNER JOIN(";
                strSQL+=" 	SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a3.tx_desCor As tx_desCorTipDoc";
                strSQL+=" 	, a1.co_cli, a1.tx_ruc, a1.tx_nomCli, a1.ne_numDoc, a1.fe_doc, (a2.nd_valIva) AS nd_valIva, a2.tx_numChq";
                strSQL+=" 	, a2.fe_venChq AS fe_fac, a2.tx_numAutSri, a2.tx_numSer, a2.tx_fecCad, CAST('N'AS CHARACTER) AS st_colReg";
                strSQL+=" 	, (a5.nd_monChq) AS nd_tot, a5.co_reg";
                strSQL+=" 	FROM (tbm_cabMovInv AS a1 INNER JOIN tbm_cabTipDoc AS a3";
                strSQL+=" 		ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                strSQL+=" 	INNER JOIN tbm_pagMovInv AS a2";
                strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                strSQL+=" 	INNER JOIN tbr_detRecDocCabMovInv AS a4";
                strSQL+=" 	ON a2.co_emp=a4.co_empRel AND a2.co_loc=a4.co_locRel AND a2.co_tipDoc=a4.co_tipDocRel AND a2.co_doc=a4.co_docRel";
                strSQL+=" 	INNER JOIN tbm_detRecDoc AS a5";
                strSQL+=" 	ON a4.co_emp=a5.co_emp AND a4.co_loc=a5.co_loc AND a4.co_tipDoc=a5.co_tipDoc AND a4.co_doc=a5.co_doc  AND a4.co_reg=a5.co_reg AND a2.tx_numChq=a5.tx_numChq";
                strSQL+=" 	INNER JOIN tbm_cabRecDoc AS a6";
                strSQL+=" 	ON a5.co_emp=a6.co_emp AND a5.co_loc=a6.co_loc AND a5.co_tipDoc=a6.co_tipDoc AND a5.co_doc=a6.co_doc";
                if(objParSis.getCodigoUsuario()==1){
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+="   AND a1.co_tipDoc IN(";
                    strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocPrg ";
                    strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                    strSQL+=" )";
                }
                else{
//                    if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="   AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+=" )";
//                    }
//                    else{
//                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
//                        strSQL+="   AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
//                        strSQL+="   AND a1.co_tipDoc IN(";
//                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
//                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
//                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
//                        strSQL+="                           AND co_usr=" + objParSis.getCodigoUsuario() + "";
//                        strSQL+=" )";
//                    }
                }
                strSQL+=" " + strAux + " " + strAuxFecFacPrv;
                strSQL+=" 	AND a1.st_reg NOT IN('E','I') AND a2.st_reg IN('A','C')";
                strSQL+=" 	AND a2.nd_valIva<>0";
                strSQL+=" 	AND a4.st_reg NOT IN('E','I') AND a5.st_reg NOT IN('E','I') AND a6.st_reg NOT IN('E','I')";
                strSQL+=" 	GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a3.tx_desCor";
                strSQL+=" 	, a1.co_cli, a1.tx_ruc, a1.tx_nomCli, a1.ne_numDoc, a1.fe_doc";
                strSQL+=" 	, a2.tx_numChq, a2.fe_venChq, a2.tx_numAutSri, a2.tx_numSer, a2.tx_fecCad, a5.nd_monChq, a2.nd_valIva, a5.co_reg";
                strSQL+=" ) AS b2";
                strSQL+=" ON b1.co_emp=b2.co_emp AND b1.co_loc=b2.co_loc AND b1.co_tipDoc=b2.co_tipDoc AND b1.co_doc=b2.co_doc AND b1.tx_numChq=b2.tx_numChq";
                strSQL+=" GROUP BY b2.co_emp, b2.co_loc";
                strSQL+=" , b2.co_cli, b2.tx_ruc, b2.tx_nomCli";
                strSQL+=" , b2.tx_numChq, b2.fe_fac, b2.tx_numAutSri, b2.tx_numSer, b2.tx_fecCad, b2.st_colReg, b2.nd_valIva, b2.nd_tot, b2.co_reg";
                //strSQL+=" ORDER BY b2.tx_nomCli";

                strSQL+=" UNION";
                //este query lo que hace es presentar DEVCOM que se han cancelado a traves de tipoDocumento=61 CRUP,
                //este tipoDocumento(61) se usa cuando existe DEVCOM y existe la FACCOM pero ya fue cancelada antes de ser cruzada,
                //entonces la DEVCOM se la da de baja de forma masiva.
                strSQL+=" SELECT a1.co_emp, a1.co_loc";
                strSQL+=" , a1.co_cli, a1.tx_ruc, a1.tx_nomCli, (a1.nd_tot-a1.nd_valIva) AS nd_basImp, (a1.nd_valIva) AS nd_valIva, (a1.nd_tot) AS nd_tot";
                strSQL+=" , CAST(''||a1.ne_numDoc AS CHARACTER VARYING) AS tx_numChq, a1.fe_doc AS fe_fac, CAST('' AS CHARACTER VARYING) AS tx_numAutSri";
                strSQL+=" , CAST('' AS CHARACTER VARYING) AS tx_numSer, CAST('' AS CHARACTER VARYING) AS tx_fecCad, CAST('' AS CHARACTER) AS st_colReg, CAST(0 AS SMALLINT) AS co_reg";
                strSQL+=" FROM tbm_cabMovInv AS a1 INNER JOIN tbm_pagMovInv AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                strSQL+=" INNER JOIN tbm_detPag AS a3";
                strSQL+=" ON a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_locPag AND a2.co_tipDoc=a3.co_tipDocPag ";
                strSQL+=" AND a2.co_doc=a3.co_docPag AND a2.co_reg=a3.co_regPag";
                strSQL+=" INNER JOIN tbm_cabPag AS a4";
                strSQL+=" ON a3.co_emp=a4.co_emp AND a3.co_loc=a4.co_loc AND a3.co_tipDoc=a4.co_tipDoc AND a3.co_doc=a4.co_doc";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a1.co_tipDoc=4";//esta quemado el tipoDocumento=4 porque solo se quiere sacar DEVCOM
                strSQL+=" AND a1.st_reg NOT IN('E','I')";
                strSQL+=" AND a1.nd_valIva<>0 ";
                strSQL+="" + strAuxFecDevCom;//AND a1.fe_doc BETWEEN '2011-07-01' AND '2011-07-31'
                strSQL+=" AND a4.co_tipDoc=61";
                strSQL+=" AND";
                strSQL+="       CASE WHEN a4.co_emp IN(1,2) THEN a4.co_loc=5";
                strSQL+="       WHEN a4.co_emp IN(4)   THEN a4.co_loc=2 END";
                strSQL+=" ORDER BY tx_nomCli";


                System.out.println("SQL: " + strSQL);
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                //pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,                 "");
                        vecReg.add(INT_TBL_DAT_COD_EMP,             "" + rst.getInt("co_emp"));
                        vecReg.add(INT_TBL_DAT_COD_LOC,             "" + rst.getInt("co_loc"));
                        
                        vecReg.add(INT_TBL_DAT_COD_CLI,             "" + rst.getString("co_cli"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI,             "" + rst.getString("tx_nomCli"));
                        vecReg.add(INT_TBL_DAT_RUC,                 "" + rst.getString("tx_ruc"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC_FAC_PRV,     "" + rst.getObject("tx_numChq")==null?"":rst.getString("tx_numChq"));
                        strFecFac=rst.getObject("fe_fac")==null?"":rst.getString("fe_fac");
                        if(strFecFac.equals(""))
                            vecReg.add(INT_TBL_DAT_FEC_DOC_FAC_PRV, strFecFac);
                        else
                            vecReg.add(INT_TBL_DAT_FEC_DOC_FAC_PRV, "" + objUti.formatearFecha(strFecFac, "yyyy-MM-dd", "dd/MM/yyyy"));



                        vecReg.add(INT_TBL_DAT_VAL_SUB,             "" + rst.getString("nd_basImp"));
                        vecReg.add(INT_TBL_DAT_VAL_IVA,             "" + rst.getString("nd_valIva"));
                        vecReg.add(INT_TBL_DAT_VAL_TOT,             "" + rst.getString("nd_tot"));
                        



                        vecReg.add(INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV, "" + rst.getObject("tx_numAutSri")==null?"":rst.getString("tx_numAutSri"));
                        vecReg.add(INT_TBL_DAT_NUM_SER_DOC_FAC_PRV, "" + rst.getObject("tx_numSer")==null?"":rst.getString("tx_numSer"));
                        vecReg.add(INT_TBL_DAT_FEC_CAD_FAC_PRV, "" + rst.getObject("tx_fecCad")==null?"":rst.getString("tx_fecCad"));
                        vecReg.add(INT_TBL_DAT_EST, "" + rst.getString("st_colReg"));
                        vecReg.add(INT_TBL_DAT_COD_REG_DET_REC_DOC, "" + rst.getString("co_reg"));

                        vecDat.add(vecReg);

                        i++;
                        pgrSis.setValue(i);
                    }
                    else{
                        break;
                    }
                }
                rst.close();
                stm.close();
                rst=null;
                stm=null;
                
                





                con.close();
                con=null;



//                if(chkMosAdi.isSelected()){
//                    if( ! cargarDocumentosPagadosOtrosMeses())
//                        blnRes=false;
//                }
//                else{
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();


                if (tblDat.getRowCount()==tblDat.getRowCount())
                    lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
                tabFrm.setSelectedIndex(1);
                //Establecer el foco en el JTable sÃ¡lo cuando haya datos.
                if (tblDat.getRowCount()>0){
                    tblDat.setRowSelectionInterval(0, 0);
                    tblDat.requestFocus();
                }


//                }
                
//



                
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }





    /**
     * Esta funciÃ¡n permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg(){
        boolean blnRes=true;
        int i;
        strAux="";
        String strAuxFecFacPrv="";
        String strFecDoc="";
        try{
            if (tblDat.getSelectedRow()!=-1){
                con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
                if( ! txtCodTipDoc.getText().equals(""))
                    strAux+=" AND a1.co_tipDoc=" + txtCodTipDoc.getText() + "";
                if( ! txtCodPrv.getText().equals(""))
                    strAux+=" AND a1.co_cli=" + txtCodPrv.getText() + "";

                if(objSelFecFacPrv.isCheckBoxChecked()){
                    switch (objSelFecFacPrv.getTipoSeleccion()){
                        case 0: //BÃ¡squeda por rangos
                            strAuxFecFacPrv+=" AND (a2.fe_venChq BETWEEN '" + objUti.formatearFecha(objSelFecFacPrv.getFechaDesde(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFecFacPrv.getFechaHasta(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                            break;
                        case 1: //Fechas menores o iguales que "Hasta".
                            strAuxFecFacPrv+=" AND (a2.fe_venChq<='" + objUti.formatearFecha(objSelFecFacPrv.getFechaHasta(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                            break;
                        case 2: //Fechas mayores o iguales que "Desde".
                            strAuxFecFacPrv+=" AND (a2.fe_venChq>='" + objUti.formatearFecha(objSelFecFacPrv.getFechaDesde(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                            break;
                        case 3: //Todo.
                            break;
                    }
                }

                if (chkExcVenEmp.isSelected())
                {
                    //Temporal hasta que se busque una mejor manera de hacerlo.
                    strAux+=" AND NOT (a1.co_emp=1 AND a1.co_cli IN(3515,602,2600, 3516, 603, 1039)  )";
                    strAux+=" AND NOT (a1.co_emp=2 AND a1.co_cli IN(2853,2854,446,447,2105,789,790)  )";
                    strAux+=" AND NOT (a1.co_emp=3 AND a1.co_cli IN(2857,2858,452,453,2107,832)  )";
                    strAux+=" AND NOT (a1.co_emp=4 AND a1.co_cli IN(3116,3117,497,498,2294,886,887)   )";
                }

                if (con!=null){
                    stm=con.createStatement();
                    strSQL="";
                    strSQL+="SELECT b2.co_emp, b2.co_loc, b2.co_tipDoc, b2.co_doc, b2.tx_desCorTipDoc";
                    strSQL+=" , b2.co_cli, b2.tx_ruc, b2.tx_nomCli, b2.ne_numDoc, b2.fe_doc, b2.nd_sub AS nd_basImp, b2.nd_valIva, b2.nd_tot";
                    strSQL+=" , b2.tx_numChq, b2.fe_fac, b2.tx_numAutSri, b2.tx_numSer, b2.tx_fecCad, b2.st_colReg, b2.nd_valAsi";
                    strSQL+=" FROM(";
                    strSQL+=" 	SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a2.tx_numChq";
                    strSQL+=" 	FROM tbm_cabMovInv AS a1 INNER JOIN tbm_pagMovInv AS a2";
                    strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                    strSQL+=" 	INNER JOIN tbr_detRecDocCabMovInv AS a4";
                    strSQL+=" 	ON a2.co_emp=a4.co_empRel AND a2.co_loc=a4.co_locRel AND a2.co_tipDoc=a4.co_tipDocRel AND a2.co_doc=a4.co_docRel";
                    strSQL+=" 	INNER JOIN tbm_detRecDoc AS a5";
                    strSQL+=" 	ON a4.co_emp=a5.co_emp AND a4.co_loc=a5.co_loc AND a4.co_tipDoc=a5.co_tipDoc AND a4.co_doc=a5.co_doc AND a4.co_reg=a5.co_reg AND a2.tx_numChq=a5.tx_numChq";
                    strSQL+=" 	INNER JOIN tbm_cabRecDoc AS a6";
                    strSQL+=" 	ON a5.co_emp=a6.co_emp AND a5.co_loc=a6.co_loc AND a5.co_tipDoc=a6.co_tipDoc AND a5.co_doc=a6.co_doc";
                    if(objParSis.getCodigoUsuario()==1){
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="   AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocPrg ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+=" )";
                    }
                    else{
//                        if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                            strSQL+="   AND a1.co_tipDoc IN(";
                            strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                            strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                            strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                            strSQL+=" )";
//                        }
//                        else{
//                            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
//                            strSQL+="   AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
//                            strSQL+="   AND a1.co_tipDoc IN(";
//                            strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
//                            strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
//                            strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
//                            strSQL+="                           AND co_usr=" + objParSis.getCodigoUsuario() + "";
//                            strSQL+=" )";
//                        }
                    }
                    strSQL+=" " + strAux + " " + strAuxFecFacPrv;

                    strSQL+=" 	AND a1.st_reg NOT IN('E','I') AND a2.st_reg IN('A','C')";
                    strSQL+=" 	AND a2.nd_valIva<>0";
                    strSQL+=" 	EXCEPT";
                    strSQL+=" 	SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a2.tx_numChq";
                    strSQL+=" 	FROM tbm_cabMovInv AS a1 INNER JOIN tbm_pagMovInv AS a2";
                    strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                    strSQL+=" 	INNER JOIN tbr_detRecDocCabMovInv AS a4";
                    strSQL+=" 	ON a2.co_emp=a4.co_empRel AND a2.co_loc=a4.co_locRel AND a2.co_tipDoc=a4.co_tipDocRel AND a2.co_doc=a4.co_docRel";
                    strSQL+=" 	INNER JOIN tbm_detRecDoc AS a5";
                    strSQL+=" 	ON a4.co_emp=a5.co_emp AND a4.co_loc=a5.co_loc AND a4.co_tipDoc=a5.co_tipDoc AND a4.co_doc=a5.co_doc  AND a4.co_reg=a5.co_reg AND a2.tx_numChq=a5.tx_numChq";
                    strSQL+=" 	INNER JOIN tbm_cabRecDoc AS a6";
                    strSQL+=" 	ON a5.co_emp=a6.co_emp AND a5.co_loc=a6.co_loc AND a5.co_tipDoc=a6.co_tipDoc AND a5.co_doc=a6.co_doc";
                    if(objParSis.getCodigoUsuario()==1){
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="   AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocPrg ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+=" )";
                    }
                    else{
//                        if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                            strSQL+="   AND a1.co_tipDoc IN(";
                            strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                            strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                            strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                            strSQL+=" )";
//                        }
//                        else{
//                            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
//                            strSQL+="   AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
//                            strSQL+="   AND a1.co_tipDoc IN(";
//                            strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
//                            strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
//                            strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
//                            strSQL+="                           AND co_usr=" + objParSis.getCodigoUsuario() + "";
//                            strSQL+=" )";
//                        }
                    }
                    strSQL+=" " + strAux + " " + strAuxFecFacPrv;
                    strSQL+=" 	AND a1.st_reg NOT IN('E','I') AND a2.st_reg IN('A','C')";
                    strSQL+=" 	AND a2.nd_porRet>0";

                    strSQL+=" AND a1.co_cli=" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_COD_CLI) + "";
                    strSQL+=" AND a2.tx_numChq='" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_NUM_DOC_FAC_PRV) + "'";
                    strSQL+=" AND a2.tx_numAutSri='" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV) + "'";
                    strSQL+=" AND a2.tx_numSer='" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_NUM_SER_DOC_FAC_PRV) + "'";
                    strSQL+=" AND a2.tx_fecCad='" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_FEC_CAD_FAC_PRV) + "'";
                    strSQL+=" AND a5.co_reg=" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_COD_REG_DET_REC_DOC) + "";

                    

                    strSQL+=" ) AS b1";
                    strSQL+=" INNER JOIN(";
                    strSQL+=" 	SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a3.tx_desCor As tx_desCorTipDoc";
                    strSQL+=" 	, a1.co_cli, a1.tx_ruc, a1.tx_nomCli, a1.ne_numDoc, a1.fe_doc, a1.nd_valIva, a1.nd_sub, a2.tx_numChq";
                    strSQL+=" 	, a2.fe_venChq AS fe_fac, a2.tx_numAutSri, a2.tx_numSer, a2.tx_fecCad, CAST('N'AS CHARACTER) AS st_colReg";
                    strSQL+=" 	, a1.nd_tot AS nd_tot, a4.nd_valAsi, a5.co_reg";
                    strSQL+=" 	FROM (tbm_cabMovInv AS a1 INNER JOIN tbm_cabTipDoc AS a3";
                    strSQL+=" 		ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                    strSQL+=" 	INNER JOIN tbm_pagMovInv AS a2";
                    strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                    strSQL+=" 	INNER JOIN tbr_detRecDocCabMovInv AS a4";
                    strSQL+=" 	ON a2.co_emp=a4.co_empRel AND a2.co_loc=a4.co_locRel AND a2.co_tipDoc=a4.co_tipDocRel AND a2.co_doc=a4.co_docRel";
                    strSQL+=" 	INNER JOIN tbm_detRecDoc AS a5";
                    strSQL+=" 	ON a4.co_emp=a5.co_emp AND a4.co_loc=a5.co_loc AND a4.co_tipDoc=a5.co_tipDoc AND a4.co_doc=a5.co_doc  AND a4.co_reg=a5.co_reg AND a2.tx_numChq=a5.tx_numChq";
                    strSQL+=" 	INNER JOIN tbm_cabRecDoc AS a6";
                    strSQL+=" 	ON a5.co_emp=a6.co_emp AND a5.co_loc=a6.co_loc AND a5.co_tipDoc=a6.co_tipDoc AND a5.co_doc=a6.co_doc";
                    if(objParSis.getCodigoUsuario()==1){
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="   AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocPrg ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+=" )";
                    }
                    else{
//                        if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                            strSQL+="   AND a1.co_tipDoc IN(";
                            strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                            strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                            strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                            strSQL+=" )";
//                        }
//                        else{
//                            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
//                            strSQL+="   AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
//                            strSQL+="   AND a1.co_tipDoc IN(";
//                            strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
//                            strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
//                            strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
//                            strSQL+="                           AND co_usr=" + objParSis.getCodigoUsuario() + "";
//                            strSQL+=" )";
//                        }
                    }
                    strSQL+=" " + strAux + " " + strAuxFecFacPrv;
                    strSQL+=" 	AND a1.st_reg NOT IN('E','I') AND a2.st_reg IN('A','C')";
                    strSQL+=" 	AND a2.nd_valIva<>0";
                    strSQL+=" 	AND a4.st_reg NOT IN('E','I') AND a5.st_reg NOT IN('E','I') AND a6.st_reg NOT IN('E','I')";


                    strSQL+=" AND a1.co_cli=" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_COD_CLI) + "";
                    strSQL+=" AND a2.tx_numChq='" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_NUM_DOC_FAC_PRV) + "'";
                    strSQL+=" AND a2.tx_numAutSri='" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV) + "'";
                    strSQL+=" AND a2.tx_numSer='" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_NUM_SER_DOC_FAC_PRV) + "'";
                    strSQL+=" AND a2.tx_fecCad='" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_FEC_CAD_FAC_PRV) + "'";
                    strSQL+=" AND a5.co_reg=" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_COD_REG_DET_REC_DOC) + "";


                    strSQL+=" 	GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a3.tx_desCor";
                    strSQL+=" 	, a1.co_cli, a1.tx_ruc, a1.tx_nomCli, a1.ne_numDoc, a1.fe_doc, a1.nd_valIva, a1.nd_sub";
                    strSQL+=" 	, a2.tx_numChq, a2.fe_venChq, a2.tx_numAutSri, a2.tx_numSer, a2.tx_fecCad, a1.nd_tot, a4.nd_valAsi, a5.co_reg";
                    

                    strSQL+=" ) AS b2";
                    strSQL+=" ON b1.co_emp=b2.co_emp AND b1.co_loc=b2.co_loc AND b1.co_tipDoc=b2.co_tipDoc AND b1.co_doc=b2.co_doc AND b1.tx_numChq=b2.tx_numChq";

                    strSQL+=" AND b2.co_cli=" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_COD_CLI) + "";
                    strSQL+=" AND b2.tx_numChq='" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_NUM_DOC_FAC_PRV) + "'";
                    strSQL+=" AND b2.tx_numAutSri='" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV) + "'";
                    strSQL+=" AND b2.tx_numSer='" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_NUM_SER_DOC_FAC_PRV) + "'";
                    strSQL+=" AND b2.tx_fecCad='" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_FEC_CAD_FAC_PRV) + "'";
                    strSQL+=" AND b2.co_reg=" + objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_DAT_COD_REG_DET_REC_DOC) + "";

                    strSQL+=" GROUP BY b2.co_emp, b2.co_loc, b2.co_tipDoc, b2.co_doc, b2.tx_desCorTipDoc";
                    strSQL+=" , b2.co_cli, b2.tx_ruc, b2.tx_nomCli, b2.ne_numDoc, b2.fe_doc, b2.nd_valIva, b2.nd_tot";
                    strSQL+=" , b2.tx_numChq, b2.fe_fac, b2.tx_numAutSri, b2.tx_numSer, b2.tx_fecCad, b2.st_colReg, b2.nd_sub, b2.nd_valAsi";
                    strSQL+=" ORDER BY b2.co_tipDoc, b2.ne_numDoc";

                    System.out.println("cargarDetReg: " + strSQL);
                    rst=stm.executeQuery(strSQL);
                    //Limpiar vector de datos.
                    vecDatDet.clear();
                    //Obtener los registros.
                    lblMsgSis.setText("Cargando datos...");
                    pgrSis.setMinimum(0);
                    //pgrSis.setMaximum(intNumTotReg);
                    pgrSis.setValue(0);
                    i=0;
                    while (rst.next()){
                        if (blnCon){
                            vecRegDet=new Vector();
                            vecRegDet.add(INT_TBL_DAT_DET_LIN,                 "");
                            vecRegDet.add(INT_TBL_DAT_DET_COD_EMP,             "" + rst.getInt("co_emp"));
                            vecRegDet.add(INT_TBL_DAT_DET_COD_LOC,             "" + rst.getInt("co_loc"));
                            vecRegDet.add(INT_TBL_DAT_DET_COD_TIP_DOC,         "" + rst.getInt("co_tipdoc"));
                            vecRegDet.add(INT_TBL_DAT_DET_NOM_TIP_DOC,         "" + rst.getString("tx_desCorTipDoc"));
                            vecRegDet.add(INT_TBL_DAT_DET_COD_DOC,             "" + rst.getInt("co_doc"));
                            vecRegDet.add(INT_TBL_DAT_DET_NUM_DOC,             "" + rst.getString("ne_numdoc"));
                            strFecDoc=rst.getObject("fe_doc")==null?"":rst.getString("fe_doc");
                            if(strFecDoc.equals(""))
                                vecRegDet.add(INT_TBL_DAT_DET_FEC_DOC,         strFecDoc);
                            else
                                vecRegDet.add(INT_TBL_DAT_DET_FEC_DOC,         "" + objUti.formatearFecha(strFecDoc, "yyyy-MM-dd", "dd/MM/yyyy"));
                            vecRegDet.add(INT_TBL_DAT_DET_VAL_SUB,             "" + rst.getBigDecimal("nd_basImp"));
                            vecRegDet.add(INT_TBL_DAT_DET_VAL_IVA,             "" + rst.getBigDecimal("nd_valIva"));
                            vecRegDet.add(INT_TBL_DAT_DET_VAL_TOT,             "" + rst.getBigDecimal("nd_tot"));
                            vecRegDet.add(INT_TBL_DAT_DET_VAL_ASI,             "" + rst.getBigDecimal("nd_valAsi"));
                            vecDatDet.add(vecRegDet);

                            i++;
                            pgrSis.setValue(i);
                        }
                        else{
                            break;
                        }
                    }
                    rst.close();
                    stm.close();
                    rst=null;
                    stm=null;

                    con.close();
                    con=null;

                    //Asignar vectores al modelo.
                    objTblModDet.setData(vecDatDet);
                    tblDet.setModel(objTblModDet);
                    vecDatDet.clear();

                }
            }




        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }





  
    /**
     * Esta funciÃ¡n configura la "Ventana de consulta" que serÃ¡ utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConPrv()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("CÃ³digo");
            arlAli.add("IdentificaciÃ³n");
            arlAli.add("Nombre");
            arlAli.add("DirecciÃ³n");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
//            if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                strSQL="";
                strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
                strSQL+=" FROM tbm_cli AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.st_prv='S'";
                strSQL+=" ORDER BY a1.tx_nom";
//            }
//            else{
//                strSQL="";
//                strSQL+="SELECT a2.co_cli, a2.tx_ide, a2.tx_nom, a2.tx_dir";
//                strSQL+=" FROM tbr_cliLoc AS a1 INNER JOIN tbm_cli AS a2";
//                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli";
//                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
//                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
//                strSQL+=" AND a2.st_prv='S'";
//                strSQL+=" ORDER BY a2.tx_nom";
//            }
            //Ocultar columnas.
            int intColOcu[]=new int[1];
            intColOcu[0]=4;
            vcoCli=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de proveedores", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoCli.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    /**
     * Esta funciÃ¡n configura la "Ventana de consulta" que serÃ¡ utilizada para
     * mostrar los "Tipos de documentos".
     */
    private boolean configurarVenConTipDoc()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_tipdoc");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            arlCam.add("a1.ne_ultDoc");
            arlCam.add("a1.tx_natDoc");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("CÃ³digo");
            arlAli.add("Tip.Doc.");
            arlAli.add("Tipo de documento");
            arlAli.add("Ult.Doc.");
            arlAli.add("Nat.Doc.");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            arlAncCol.add("80");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            if(objParSis.getCodigoUsuario()==1){
                strSQL="";
                strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar, a1.ne_ultDoc, a1.tx_natDoc";
                strSQL+=" FROM tbm_cabTipDoc AS a1";
                strSQL+=" INNER JOIN tbr_tipDocPrg AS a3";
                strSQL+=" ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();
                strSQL+=" AND a3.co_mnu=" + objParSis.getCodigoMenu();
                strSQL+=" ORDER BY a1.tx_desCor";
            }
            else{
                strSQL="";
                strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar, a1.ne_ultDoc, a1.tx_natDoc";
                strSQL+=" FROM tbm_cabTipDoc AS a1 inner join tbr_tipDocUsr AS a3";
                strSQL+=" ON (a1.co_emp=a3.co_emp and a1.co_loc=a3.co_loc and a1.co_tipdoc=a3.co_tipdoc)";
                strSQL+=" WHERE ";
                strSQL+=" a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" AND a3.co_mnu=" + objParSis.getCodigoMenu() + "";
                strSQL+=" AND a3.co_usr=" + objParSis.getCodigoUsuario() + "";
            }
            vcoTipDoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de tipos de documentos", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoTipDoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoTipDoc.setConfiguracionColumna(4, javax.swing.JLabel.RIGHT);


        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funciÃ¡n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de bÃ¡squeda determina si se debe hacer
     * una bÃ¡squeda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se estÃ¡ buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opciÃ¡n que desea utilizar.
     * @param intTipBus El tipo de bÃ¡squeda a realizar.
     * @return true: Si no se presentÃ¡ ningÃ¡n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConTipDoc(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoTipDoc.setCampoBusqueda(1);
                    vcoTipDoc.show();
                    if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    break;
                case 1: //BÃ¡squeda directa por "DescripciÃ¡n corta".
                    if (vcoTipDoc.buscar("a1.tx_desCor", txtDesCorTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(1);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        }
                        else
                        {
                            txtDesCorTipDoc.setText(strDesCorTipDoc);
                        }
                    }
                    break;
                case 2: //BÃ¡squeda directa por "DescripciÃ¡n larga".
                    if (vcoTipDoc.buscar("a1.tx_desLar", txtDesLarTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(2);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        }
                        else
                        {
                            txtDesLarTipDoc.setText(strDesLarTipDoc);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    private class ZafLisSelLis implements javax.swing.event.ListSelectionListener{
        public void valueChanged(javax.swing.event.ListSelectionEvent e){
            javax.swing.ListSelectionModel lsm=(javax.swing.ListSelectionModel)e.getSource();
            int intMax=lsm.getMaxSelectionIndex();
            String strAux;
            if (!lsm.isSelectionEmpty()){
                if (chkMosMovReg.isSelected()){
                    cargarDetReg();
                    System.out.println("EN ZafLisSelLis");
                }
                else
                    objTblModDet.removeAllRows();
            }
        }
    }



}
