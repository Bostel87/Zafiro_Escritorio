/*
 * ZafVen01_01.java
 *
 * Created on 9 de marzo de 2006, 9:12
 *
 * v0.1 
 */

package Contabilidad.ZafCon48;

import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
//import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
//import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;
//import Librerias.ZafTblUti.ZafTblPopMnuIncDec.ZafTblPopMnuIncDec;
import Librerias.ZafDate.ZafSelectDate;
import java.util.ArrayList;
import Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt;
/**
 *
 * @author ilino
 */
public class ZafCon48_01 extends javax.swing.JDialog {
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod;
    private ZafTblEdi objTblEdi;                        //Editor: Editor del JTable.
    private boolean blnCon;                             //true: Continua la ejecución del hilo.    
    
    private ZafMouMotAda objMouMotAda;
    //PARA LA TABLA DE INCREMENTOS
    final int INT_TBL_LIN=0;
    final int INT_TBL_ANI=1;
    final int INT_TBL_MES=2;
    final int INT_TBL_PRC=3;
    final int INT_TBL_BLK=4;
    final int INT_TBL_MES_NUM=5;

    private Vector vecDat, vecCab, vecReg, vecAux;
    ZafColNumerada objColNum;
    private ZafTblCelRenLbl objTblCelRenLbl, objTblCelRenLblSal;            //Render: Presentar JLabel en JTable.
   
    private ZafCon48_02 objCon48_02;
    
    private int intIndFilSel;
    private Contabilidad.ZafCon48.ZafTblPopMnuIncDec objTblPopMnuIncDec;      //PopupMenu: Establecer PeopuMenú en JTable.
    
    private ZafSelectDate objSelDatTmp;
    private Vector vecAuxSal;
    //PARA CALCULO DE PORCENTAJES
    private int intAniIni, intAniFin;
    
    private ArrayList arlRegAniMes, arlDatAniMes;
    private int intAniDes, intAniHas, intMesDes, intMesHas;

    final int INT_ARL_ANI=0;
    final int INT_ARL_MES=1;
    final int INT_ARL_BLK=2;
    private boolean intCamTbl;
    //ARREGLO Q CONTIENE LOS PORCENTAJES DE LOS MESES CUANDO SE CONSULTA
    private ArrayList arlRegConPor, arlDatConPor;
    final int INT_ARL_CON_POR_ANI=0;
    final int INT_ARL_CON_POR_MES=1;
    final int INT_ARL_CON_POR_VAL=2;
    
    
//    final int INT_ARL_CON_POR_ENE=0;
//    final int INT_ARL_CON_POR_FEB=1;
//    final int INT_ARL_CON_POR_MAR=2;
//    final int INT_ARL_CON_POR_ABR=3;
//    final int INT_ARL_CON_POR_MAY=4;
//    final int INT_ARL_CON_POR_JUN=5;
//    final int INT_ARL_CON_POR_JUL=6;
//    final int INT_ARL_CON_POR_AGO=7;
//    final int INT_ARL_CON_POR_SEP=8;
//    final int INT_ARL_CON_POR_OCT=9;
//    final int INT_ARL_CON_POR_NOV=10;
//    final int INT_ARL_CON_POR_DIC=11;
//    final int INT_ARL_CON_POR_ANI=12;
    
    
    
    
    private String strSQL;
    private int intMesSrv, intAniSrv;
    
    private ZafTblCelEdiTxt objTblCelEdiTxt;
    
    private String strTmp;
    
     public ZafCon48_01(java.awt.Frame parent, boolean modal, ZafParSis obj, char tipOpe) {
        super(parent, modal);
        arlDatAniMes=new ArrayList();
        arlDatAniMes.clear();
        
        arlDatConPor=new ArrayList();
        arlDatConPor.clear();
        
        initComponents();
        
        
        
          //Inicializar objetos.
        objParSis=obj;
        configurarTblIncDcr();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        PanFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGen = new javax.swing.JPanel();
        panPryIncDecMen = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        butAce = new javax.swing.JButton();
        butCan = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lblInf = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        PanFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("T\u00edtulo");
        PanFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panGen.setLayout(new java.awt.BorderLayout());

        panPryIncDecMen.setLayout(new java.awt.BorderLayout());

        panPryIncDecMen.setPreferredSize(new java.awt.Dimension(204, 10));
        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDat);

        panPryIncDecMen.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panGen.add(panPryIncDecMen, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panGen);

        PanFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.BorderLayout());

        butAce.setText("Aceptar");
        butAce.setPreferredSize(new java.awt.Dimension(92, 25));
        butAce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAceActionPerformed(evt);
            }
        });

        jPanel1.add(butAce);

        butCan.setText("Cancelar");
        butCan.setToolTipText("Si presiona cancelar se borrar\u00e1 lo que ha ingresado");
        butCan.setPreferredSize(new java.awt.Dimension(92, 25));
        butCan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCanActionPerformed(evt);
            }
        });

        jPanel1.add(butCan);

        panBot.add(jPanel1, java.awt.BorderLayout.EAST);

        jPanel2.setLayout(new java.awt.BorderLayout());

        lblInf.setText("Si presiona cancelar se borrar\u00e1 el contenido ingresado");
        jPanel2.add(lblInf, java.awt.BorderLayout.CENTER);

        panBot.add(jPanel2, java.awt.BorderLayout.WEST);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        PanFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(PanFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-400)/2, 600, 400);
    }//GEN-END:initComponents

    private void butAceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAceActionPerformed
        // TODO add your handling code here:
        if(objTblMod.isDataModelChanged())
            intCamTbl=true;
        else
            intCamTbl=false;
        dispose();
    }//GEN-LAST:event_butAceActionPerformed

    private void butCanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCanActionPerformed
        // TODO add your handling code here:
//        if(objTblMod.isDataModelChanged())
//            intCamTbl=true;
//        else
//            intCamTbl=false;
        dispose();
    }//GEN-LAST:event_butCanActionPerformed
   
    public boolean isModChange(){
        return intCamTbl;
    }
    
    
    public javax.swing.JTable getTableIncDec(){
        System.out.println("EL NUMERO DE FILAS ES:" + tblDat.getRowCount());
        return tblDat;
    }
       
    public int numFilTabla(){
        return objTblMod.getRowCountTrue();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanFrm;
    private javax.swing.JButton butAce;
    private javax.swing.JButton butCan;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblInf;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panGen;
    private javax.swing.JPanel panPryIncDecMen;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables
   
    public boolean setAniMes(int anioDesde, int anioHasta, int mesDesde, int mesHasta){
        boolean blnRes=true;
        try{
            intAniDes=anioDesde;
            intAniHas=anioHasta;
            intMesDes=mesDesde;
            intMesHas=mesHasta;
            System.out.println("EL ANIO DESDE -48_01-: " + intAniDes);
            System.out.println("EL ANIO HASTA -48_01-: " + intAniHas);
            System.out.println("EL MES DESDE: -48_01-" + intMesDes);
            System.out.println("EL MES HASTA: -48_01-" + intMesHas);
            obtieneArrayListGenerarTabla();
            
        }
        catch(Exception e){
            System.out.println("" + e);
            blnRes=false;
        }
        return true;
    }
    
    
    /*    
    public boolean setDatosGuardBase(String CodEstFin, String CodCfg, String FecDes, String FecHas, String codCta){
        boolean blnRes=true;
        Connection conTmp;
        Statement stmTmp;
        ResultSet rstTmp;
        String strCodEstFin=CodEstFin;
        String strCodCfg=CodCfg;
        String strFecDes=FecDes;
        String strFecHas=FecHas;
        String strCodCta=codCta;
        arlDatConPor.clear();
        try{
            conTmp=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conTmp!=null){
                stmTmp=conTmp.createStatement();
                strSQL="";
                strSQL+="SELECT b1.nd_por AS porEne, b2.nd_por AS porFeb, b3.nd_por AS porMar, b4.nd_por AS porAbr, b5.nd_por AS porMay, b6.nd_por AS porJun,";
                strSQL+=" b7.nd_por AS porJul, b8.nd_por AS porAgo, b9.nd_por AS porSep, b10.nd_por AS porOct, b11.nd_por AS porNov, b12.nd_por AS porDic, b1.ne_ani";
                strSQL+=" FROM(";
                strSQL+=" 	SELECT a1.co_emp, a1.co_estFin, a1.co_cfg, a1.ne_ani, a1.co_cta, a1.nd_por";
                strSQL+=" 	FROM tbm_detCfgEstFinPer AS a1 INNER JOIN tbm_cabCfgEstFinPer AS a2";
                strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_estFin=a2.co_estFin AND a1.co_cfg=a2.co_cfg";
                strSQL+=" 	WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" 	AND a1.co_estFin=" + strCodEstFin + "";
                strSQL+=" 	AND a1.co_cfg=" + strCodCfg + "";
                strSQL+=" 	AND a2.fe_des='" + strFecDes + "' AND a2.fe_has='" + strFecHas + "'";
                strSQL+=" 	AND a1.co_cta=" + strCodCta + "";
                strSQL+=" 	AND a1.ne_mes=1) AS b1";
                for(int k=2;k<=12;k++){
                    strSQL+=" 	INNER JOIN";
                    strSQL+=" 	(";
                    strSQL+=" 	SELECT a1.co_emp, a1.co_estFin, a1.co_cfg, a1.ne_ani, a1.co_cta, a1.nd_por";
                    strSQL+=" 	FROM tbm_detCfgEstFinPer AS a1 INNER JOIN tbm_cabCfgEstFinPer AS a2";
                    strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_estFin=a2.co_estFin AND a1.co_cfg=a2.co_cfg";
                    strSQL+=" 	WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+=" 	AND a1.co_estFin=" + strCodEstFin + "";
                    strSQL+=" 	AND a1.co_cfg=" + strCodCfg + "";
                    strSQL+=" 	AND a2.fe_des='" + strFecDes + "' AND a2.fe_has='" + strFecHas + "'";
                    strSQL+=" 	AND a1.co_cta=" + strCodCta + "";
                    strSQL+=" 	AND a1.ne_mes=" + k + ") AS b" + k + "";
                    strSQL+=" ON (b1.co_emp=b" + k + ".co_emp AND b1.co_estFin=b" + k + ".co_estFin AND b1.co_cfg=b" + k + ".co_cfg AND b1.ne_ani=b" + k + ".ne_ani AND b1.co_cta=b" + k + ".co_cta)";
                }
                System.out.println("setDatosGuardBase: " +strSQL);
                rstTmp=stmTmp.executeQuery(strSQL);
                if(rstTmp.next()){
                    arlRegConPor=new ArrayList();
                    arlRegConPor.add(INT_ARL_CON_POR_ENE, "" + rstTmp.getDouble("porEne"));
                    arlRegConPor.add(INT_ARL_CON_POR_FEB, "" + rstTmp.getDouble("porFeb"));
                    arlRegConPor.add(INT_ARL_CON_POR_MAR, "" + rstTmp.getDouble("porMar"));
                    arlRegConPor.add(INT_ARL_CON_POR_ABR, "" + rstTmp.getDouble("porAbr"));
                    arlRegConPor.add(INT_ARL_CON_POR_MAY, "" + rstTmp.getDouble("porMay"));
                    arlRegConPor.add(INT_ARL_CON_POR_JUN, "" + rstTmp.getDouble("porJun"));
                    arlRegConPor.add(INT_ARL_CON_POR_JUL, "" + rstTmp.getDouble("porJul"));
                    arlRegConPor.add(INT_ARL_CON_POR_AGO, "" + rstTmp.getDouble("porAgo"));
                    arlRegConPor.add(INT_ARL_CON_POR_SEP, "" + rstTmp.getDouble("porSep"));
                    arlRegConPor.add(INT_ARL_CON_POR_OCT, "" + rstTmp.getDouble("porOct"));
                    arlRegConPor.add(INT_ARL_CON_POR_NOV, "" + rstTmp.getDouble("porNov"));
                    arlRegConPor.add(INT_ARL_CON_POR_DIC, "" + rstTmp.getDouble("porDic"));
                    arlRegConPor.add(INT_ARL_CON_POR_ANI, "" + rstTmp.getDouble("ne_ani"));
                    arlDatConPor.add(arlRegConPor);
                }
                System.out.println("EL VALOR DE PORCENTAJES CUANDO SE CONSULTA ES: " + arlDatConPor.toString());
                conTmp.close();
                conTmp=null;
                stmTmp.close();
                stmTmp=null;
                rstTmp.close();
                rstTmp=null;
            }
        }
        catch(Exception e){
            System.out.println("" + e);
            blnRes=false;
        }
        
        
        
        
        return blnRes;
    }
    */    
    
    
    private boolean obtieneArrayListGenerarTabla(){
        boolean blnRes=true;
        int intAniDif=0;
        int intAniPrcInt=0;
        arlDatAniMes.clear();
        getMesServidor();
        try{
            if(intAniDes==intAniHas){
                for(int i=intMesDes; i<=intMesHas; i++){
                    arlRegAniMes=new ArrayList();
                    arlRegAniMes.add(INT_ARL_ANI, "" + intAniDes);
                    arlRegAniMes.add(INT_ARL_MES, "" + i);
                    if(intAniDes<=intAniSrv){
                        if(i<intMesSrv){
                            arlRegAniMes.add(INT_ARL_BLK, "B");
                        }
                        else
                            arlRegAniMes.add(INT_ARL_BLK, "");                        
                    }

                    arlDatAniMes.add(arlRegAniMes);
                }
            }
            ////////////////////////////////////////////////////
            if(intAniDes!=intAniHas){
                intAniDif=intAniHas-intAniDes;
                ////////////////////////////////////////////////////
                for(int i=intAniDes; i<=intAniDes;i++){
                    for(int j=intMesDes; j<=12;j++){
                        arlRegAniMes=new ArrayList();
                        arlRegAniMes.add(INT_ARL_ANI, "" + intAniDes);
                        arlRegAniMes.add(INT_ARL_MES, "" + j);
                        if(i<intAniSrv){
                            arlRegAniMes.add(INT_ARL_BLK, "B");
                            System.out.println("LLEGA AKI");
                        }
                        
                        if(i==intAniSrv){
                            if(j<intMesSrv){
                                arlRegAniMes.add(INT_ARL_BLK, "B");
                            }
                            else
                                arlRegAniMes.add(INT_ARL_BLK, "");
                        }
                        
                        
                        
                        if(i>intAniSrv)
                            arlRegAniMes.add(INT_ARL_BLK, "");
                        arlDatAniMes.add(arlRegAniMes);
                    }
                }
                ////////////////////////////////////////////////////
                if(intAniDif>1){
                    for(int k=(intAniDes+1); k<=(intAniHas-1); k++){
                        for(int j=1; j<=12;j++){
                            arlRegAniMes=new ArrayList();
                            arlRegAniMes.add(INT_ARL_ANI, "" + k);
                            arlRegAniMes.add(INT_ARL_MES, "" + j);
                            
                            if(k<intAniSrv){
                                arlRegAniMes.add(INT_ARL_BLK, "B");
                            }
                            if(k==intAniSrv){
                                if(j<intMesSrv){
                                    arlRegAniMes.add(INT_ARL_BLK, "B");
                                }
                                else
                                    arlRegAniMes.add(INT_ARL_BLK, "");
                            }
                            if(k>intAniSrv){
                                arlRegAniMes.add(INT_ARL_BLK, "");
                            }
                            arlDatAniMes.add(arlRegAniMes);
                        }
                    }                    
                }
                ////////////////////////////////////////////////////
                for(int i=intAniHas; i<=intAniHas;i++){
                    for(int j=1; j<=intMesHas;j++){
                        arlRegAniMes=new ArrayList();
                        arlRegAniMes.add(INT_ARL_ANI, "" + intAniHas);
                        arlRegAniMes.add(INT_ARL_MES, "" + j);

                        if(i<intAniSrv){
                            arlRegAniMes.add(INT_ARL_BLK, "B");
                        }
                        if(i==intAniSrv){
                            if(j<intMesSrv){
                                arlRegAniMes.add(INT_ARL_BLK, "B");
                            }
                            else
                                arlRegAniMes.add(INT_ARL_BLK, "");
                        }
                        if(i>intAniSrv){
                            arlRegAniMes.add(INT_ARL_BLK, "");
                        }
                        arlDatAniMes.add(arlRegAniMes);
                    }
                }
                ////////////////////////////////////////////////////
            }
            System.out.println("ARRAYLIST COMPLETO: " + arlDatAniMes.toString());
            generarTablaMesesAnios();
        }
        catch(Exception e){
            System.out.println("ERROR: " +e);
            blnRes=false;
        }
        return blnRes;
    }
    
    private boolean generarTablaMesesAnios(){
        boolean blnRes=true;
        int intMesArl=0, intAniArl=0;
        String strFilMesBlk="";
        int intNumMes=0;
        try{
            for(int i=0; i<arlDatAniMes.size(); i++){
                intAniArl=objUti.getIntValueAt(arlDatAniMes, i, INT_ARL_ANI);
                intMesArl=objUti.getIntValueAt(arlDatAniMes, i, INT_ARL_MES);
                
                strFilMesBlk=objUti.getStringValueAt(arlDatAniMes, i, INT_ARL_BLK);
                
//                System.out.println("ANIO: " + intAniArl);
//                System.out.println("MES: " + intMesArl);
                vecReg=new Vector();
                vecReg.add(INT_TBL_LIN, "");
                vecReg.add(INT_TBL_ANI, "" +intAniArl);
                switch(intMesArl){
                    case 1:
                        vecReg.add(INT_TBL_MES, "Enero");
                        intNumMes=1;
//                        System.out.println("ENTRO EN UNO");
                        break;
                    case 2:
                        vecReg.add(INT_TBL_MES, "Febrero");
                        intNumMes=2;
//                        System.out.println("ENTRO EN DOS");
                        break;
                    case 3:
                        vecReg.add(INT_TBL_MES, "Marzo");
                        intNumMes=3;
//                        System.out.println("ENTRO EN TRES");
                        break;
                    case 4:
                        vecReg.add(INT_TBL_MES, "Abril");
                        intNumMes=4;
                        break;
                    case 5:
                        vecReg.add(INT_TBL_MES, "Mayo");
                        intNumMes=5;
                        break;
                    case 6:
                        vecReg.add(INT_TBL_MES, "Junio");
                        intNumMes=6;
                        break;
                    case 7:
                        vecReg.add(INT_TBL_MES, "Julio");
                        intNumMes=7;
                        break;
                    case 8:
                        vecReg.add(INT_TBL_MES, "Agosto");
                        intNumMes=8;
                        break;
                    case 9:
                        vecReg.add(INT_TBL_MES, "Septiembre");
                        intNumMes=9;
                        break;
                    case 10:
                        vecReg.add(INT_TBL_MES, "Octubre");
                        intNumMes=10;
                        break;
                    case 11:
                        vecReg.add(INT_TBL_MES, "Noviembre");
                        intNumMes=11;
                        break;
                    case 12:
                        vecReg.add(INT_TBL_MES, "Diciembre");
                        intNumMes=12;
                        break;
                }
                vecReg.add(INT_TBL_PRC, "0.00");
                vecReg.add(INT_TBL_BLK, "" + strFilMesBlk);

		vecReg.add(INT_TBL_MES_NUM, "" + intNumMes);
                
                
//                System.out.println("EL VECTOR REGISTROS: " + vecReg.toString());
                vecDat.add(vecReg);
//                System.out.println("EL VECTOR DATOS: " + vecDat.toString());
            }
            System.out.println("EL VECTOR EN CARGARMESES CONTIENE: " + vecDat.toString());
            asignaVectorModeloPorcentaj();
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }

    
    private ArrayList getAniMes(){
        return arlDatAniMes;
    }
    
    private boolean configurarTblIncDcr(){
        boolean blnRes=true;
        try{
            vecCab=new Vector(5);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_LIN,"");
            vecCab.add(INT_TBL_ANI,"Año");
            vecCab.add(INT_TBL_MES,"Mes");
            vecCab.add(INT_TBL_PRC,"% Increm./Decrem.");
            vecCab.add(INT_TBL_BLK,"Bloqueada");
            vecCab.add(INT_TBL_MES_NUM,"Mes#");
            
            
            objUti=new ZafUtil();            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            //Configurar ZafTblMod: Establecer el tipo de dato de las columnas.
            objTblMod.setColumnDataType(INT_TBL_PRC, objTblMod.INT_COL_DBL, null, null);
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            
            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);
            
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            objColNum=new ZafColNumerada(tblDat,INT_TBL_LIN);
            
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            
            tcmAux.getColumn(INT_TBL_LIN).setPreferredWidth(17);
            tcmAux.getColumn(INT_TBL_ANI).setPreferredWidth(32);
            tcmAux.getColumn(INT_TBL_MES).setPreferredWidth(68);
            tcmAux.getColumn(INT_TBL_PRC).setPreferredWidth(53);
            tcmAux.getColumn(INT_TBL_BLK).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_MES_NUM).setPreferredWidth(20);
            
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_MES).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);

            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer columnas editables.
            vecAux=new Vector();
            vecAux.add("" + INT_TBL_PRC);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;
            //Configurar JTable: Editor de la tabla.
            objTblEdi=new ZafTblEdi(tblDat);
            
            
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_PRC).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
                        
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnuIncDec=new ZafTblPopMnuIncDec(tblDat);
            
            objTblPopMnuIncDec.addTblPopMnuListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTblPopMnuAdapter() {
                public void beforeClick(Librerias.ZafTblUti.ZafTblEvt.ZafTblPopMnuEvent evt) {
                    if (objTblPopMnuIncDec.isClickIncreDecre()){
                        intIndFilSel=tblDat.getSelectedRow();
                        
                        strTmp=""+objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_BLK);
                        if( ! (strTmp.toString().equals("B")) )
                            cargaFuncion();
                        else
                            mostrarMsgInf("<HTML>Para cargar la ventana debe seleccionar meses no transcurridos<BR>Realice nuevamente la selección y vuelva a intentarlo</HTML>");
                    }
                }
                public void afterClick(Librerias.ZafTblUti.ZafTblEvt.ZafTblPopMnuEvent evt) {
                    if (objTblPopMnuIncDec.isClickIncreDecre()){
                        strTmp=""+objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_BLK);
                        if( ! (strTmp.toString().equals("B")) )
                            putIncDecMes();
                    }
                }
            });
            
            
            objTblCelEdiTxt=new ZafTblCelEdiTxt(tblDat);
            tcmAux.getColumn(INT_TBL_PRC).setCellEditor(objTblCelEdiTxt);
            objTblCelEdiTxt.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    strTmp=""+objTblMod.getValueAt(tblDat.getSelectedRow(), INT_TBL_BLK);
                    if(strTmp.toString().equals("B"))
                        objTblCelEdiTxt.setCancelarEdicion(true);
                    else
                        objTblCelEdiTxt.setCancelarEdicion(false);
                }
            });
            tcmAux=null;
            
            
            objTblMod.insertRow();
            objTblMod.insertRow();
            vecDat=new Vector();
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
        
    private boolean cargaFuncion(){
        boolean blnRes=true;
        objCon48_02=new ZafCon48_02(javax.swing.JOptionPane.getFrameForComponent(this), true, objParSis, objTblPopMnuIncDec.getNumFilSel());
        objCon48_02.show();
        return blnRes;
    }
        
    private boolean putIncDecMes(){
        boolean blnRes=true;
        try{
            int intNumFilSel=objTblPopMnuIncDec.getNumFilSel();
            char chrTipOpe=objCon48_02.getTipoOperac();
            double dblPrcIncDec=objCon48_02.getPorcentIncDec();
            double dblValIni=0.00;
            dblValIni=objCon48_02.getPorcentMinimo();
//            dblValFin=objCon48_02.getPorcentMaximo();
            for(int i=intIndFilSel; i<(intNumFilSel+intIndFilSel);i++){
                objTblMod.setValueAt(""+dblValIni, i, INT_TBL_PRC);
                if(chrTipOpe=='I')
                    dblValIni+=dblPrcIncDec;
                else
                    dblValIni-=dblPrcIncDec;
            }
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
        
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter{
        public void mouseMoved(java.awt.event.MouseEvent evt){
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol){
                case INT_TBL_LIN:
                    strMsg="";
                    break;
                case INT_TBL_ANI:
                    strMsg="Año";
                    break;
                case INT_TBL_MES:
                    strMsg="Mes";
                    break;
                case INT_TBL_PRC:
                    strMsg="% Incremento/Decremento";
                    break;
                case INT_TBL_BLK:
                    strMsg="Bloqueo";
                    break;
                case INT_TBL_MES_NUM:
                    strMsg="Mes #";
                    break;
                default:
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
    /** Cerrar la aplicación. */
    private void exitForm(){
        dispose();
    }    

    private boolean asignaVectorModeloPorcentaj(){
        boolean blnRes=true;
        try{
            //Asignar vectores al modelo.
            objTblMod.setData(vecDat);
            tblDat.setModel(objTblMod);
            vecDat.clear();
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    

    private boolean getMesServidor(){
        boolean blnRes=true;
        Connection conTmp;
        Statement stmTmp;
        ResultSet rstTmp;
        intMesSrv=0;
        try{
            conTmp=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conTmp!=null){
                stmTmp=conTmp.createStatement();
                strSQL="";
                strSQL+="SELECT EXTRACT (YEAR FROM CURRENT_TIMESTAMP) AS aniActSrv, EXTRACT (MONTH FROM CURRENT_TIMESTAMP) AS mesActSrv";
                rstTmp=stmTmp.executeQuery(strSQL);
                if(rstTmp.next()){
                    intAniSrv=rstTmp.getInt("aniActSrv");
                    intMesSrv=rstTmp.getInt("mesActSrv");
                }
                conTmp.close();
                conTmp=null;
                stmTmp.close();
                stmTmp=null;
                rstTmp.close();
                rstTmp=null;
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    
    private boolean blockMesesTranscurridos(){
        boolean blnRes=true;
        getMesServidor();
        try{
            
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    
    private void mostrarMsgInf(String strMsg){
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }    
    
    public boolean llenaTablaPorcDb(String CodEstFin, String CodCfg, String codReg){
        boolean blnRes=true;
        Connection conPrc;
        Statement stmPrc;
        ResultSet rstPrc;
        String strCodEstFin=CodEstFin;
        String strCodCfg=CodCfg;
        String strCodReg=codReg;
        arlDatConPor.clear();
        try{
            conPrc=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conPrc!=null){
                stmPrc=conPrc.createStatement();
                strSQL="";
                strSQL+="select ne_ani, ne_mes, co_reg, nd_por";
                strSQL+=" from tbm_detcfgestfinper";
                strSQL+=" where co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and co_estFin=" + strCodEstFin + "";
                strSQL+=" and co_cfg=" + strCodCfg + "";
                strSQL+=" and co_reg=" + strCodReg + "";
                strSQL+=" order by co_estfin, co_cfg, ne_ani, co_reg, ne_mes";
                rstPrc=stmPrc.executeQuery(strSQL);
                while(rstPrc.next()){
                    arlRegConPor=new ArrayList();
                    arlRegConPor.add(INT_ARL_CON_POR_ANI, "" + rstPrc.getString("ne_ani"));
		    arlRegConPor.add(INT_ARL_CON_POR_MES, "" + rstPrc.getString("ne_mes"));
		    arlRegConPor.add(INT_ARL_CON_POR_VAL, "" + rstPrc.getString("nd_por"));
                    arlDatConPor.add(arlRegConPor);
                }
                
                String strTblAni="";
                String strTblMes="";
                String strArlAni="";
                String strArlMes="";
                double dblPor=0.00;
                for(int k=0; k<objTblMod.getRowCountTrue();k++){
                    strTblAni=""+objTblMod.getValueAt(k, INT_TBL_ANI);
                    strTblMes=""+objTblMod.getValueAt(k, INT_TBL_MES_NUM);
                    for(int i=0; i<arlDatConPor.size();i++){
                        strArlAni=objUti.getStringValueAt(arlDatConPor, i, INT_ARL_CON_POR_ANI);
                        strArlMes=objUti.getStringValueAt(arlDatConPor, i, INT_ARL_CON_POR_MES);
                        if(strTblAni.equals(strArlAni)){
                            if(strTblMes.equals(strArlMes)){
                                dblPor=objUti.getDoubleValueAt(arlDatConPor, i, INT_ARL_CON_POR_VAL);
                            }
                        }
                        objTblMod.setValueAt(""+dblPor, k, INT_TBL_PRC);

                    }
                }
                objTblMod.initRowsState();
                conPrc.close();
                conPrc=null;
                stmPrc.close();
                stmPrc=null;
                rstPrc.close();
                rstPrc=null;
            }





            
            
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        
        return blnRes;
    }

   
}
