/*
 * ZafCom08.java
 *
 * Created on 16 de enero de 2005, 17:10 PM
 */
package Contabilidad.ZafCon55;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafPerUsr.ZafPerUsr;
import Librerias.ZafSelFec.ZafSelFec;
import Librerias.ZafTblUti.ZafTblTot.ZafTblTot;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import java.util.ArrayList;
import java.sql.*;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafVenCon.ZafVenCon;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
/**
 *
 * @author  Eddye Lino
 */
public class ZafCon55 extends javax.swing.JInternalFrame 
{
    //Constantes: Columnas del JTable:
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_EMP=1;
    final int INT_TBL_DAT_COD_LOC=2;
    final int INT_TBL_DAT_COD_TIP_DOC=3;
    final int INT_TBL_DAT_DES_COR=4;
    final int INT_TBL_DAT_DES_LAR=5;
    final int INT_TBL_DAT_COD_DOC=6;
    final int INT_TBL_DAT_COD_REG=7;
    final int INT_TBL_DAT_NUM_DOC=8;
    final int INT_TBL_DAT_FEC_DOC=9;
    final int INT_TBL_DAT_GLO=10;
    final int INT_TBL_DAT_VAL_DEB=11;
    final int INT_TBL_DAT_VAL_HAB=12;
    final int INT_TBL_DAT_CHK_CON=13;
    final int INT_TBL_DAT_CHK_CON_AUX=14;
    final int INT_TBL_DAT_FEC_CON=15;
    final int INT_TBL_DAT_COD_USU_CON=16;
    final int INT_TBL_DAT_ALI_USU_CON=17;
    final int INT_TBL_DAT_NOM_USU_CON=18;
    
    private ZafTblOrd objTblOrd;                        //JTable de ordenamiento.
    
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafColNumerada objColNum;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMená en JTable.
    private ZafThreadGUI objThrGUI;
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private ZafTblTot objTblTot;                        //JTable de totales.
    
    
    private Vector vecDat, vecCab, vecReg, vecAux;
    private boolean blnCon;                     //true: Continua la ejecucián del hilo.
    private String strMsg="";
    private javax.swing.JOptionPane oppMsg;
    private String strCodVen, strNomVen;             //Contenido del campo al obtener el foco.
    private ZafTblCelRenLbl objTblCelRenLbl;
    private ZafTblCelRenLbl objTblCelRenLblTot;

    private ZafTblBus objTblBus;
   
    private ZafSelFec objSelFec;
    private ArrayList arlReg, arlDat;

    private String strDesCorCta, strDesLarCta;
    private String strDesCorTipDoc, strDesLarTipDoc;
    private ZafVenCon vcoTipDoc, vcoCta;
    private ZafTblCelEdiChk objTblCelEdiChk, objTblCelEdiChkAux;
    private ZafTblCelRenChk objTblCelRenChk, objTblCelRenChkAux;

    private boolean blnConciliar, blnDesconciliar;
    private ZafPerUsr objPerUsr;

    private boolean blnMarTodChkTblEmp;
    private String strVersion="v0.1.3";

    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafCon55(ZafParSis obj) 
    {
        try{
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
            objUti=new ZafUtil();
            objPerUsr=new ZafPerUsr(objParSis);
            configurarVentanaPermisos();
            if (!configurarFrm())
                exitForm();
        }
        catch (CloneNotSupportedException e){
            this.setTitle(this.getTitle() + " [ERROR]");
        }



    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblTitTipDoc = new javax.swing.JLabel();
        txtCodTipDoc = new javax.swing.JTextField();
        txtDesCorTipDoc = new javax.swing.JTextField();
        txtDesLarTipDoc = new javax.swing.JTextField();
        butTipDoc = new javax.swing.JButton();
        lbCta = new javax.swing.JLabel();
        txtCodCta = new javax.swing.JTextField();
        txtDesCorCta = new javax.swing.JTextField();
        txtDesLarCta = new javax.swing.JTextField();
        butCta = new javax.swing.JButton();
        panCorRpt = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        chkMosDocSinCon = new javax.swing.JCheckBox();
        chkMosDocCon = new javax.swing.JCheckBox();
        panRpt = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        spnTotal = new javax.swing.JScrollPane();
        tblTotal = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butGua = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panFil.setLayout(new java.awt.BorderLayout());

        jPanel2.setPreferredSize(new java.awt.Dimension(100, 46));
        jPanel2.setLayout(null);

        lblTitTipDoc.setText("Tipo de documento:");
        jPanel2.add(lblTitTipDoc);
        lblTitTipDoc.setBounds(0, 26, 120, 14);
        jPanel2.add(txtCodTipDoc);
        txtCodTipDoc.setBounds(80, 22, 30, 20);

        txtDesCorTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorTipDocActionPerformed(evt);
            }
        });
        txtDesCorTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusLost(evt);
            }
        });
        jPanel2.add(txtDesCorTipDoc);
        txtDesCorTipDoc.setBounds(110, 22, 116, 20);

        txtDesLarTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarTipDocActionPerformed(evt);
            }
        });
        txtDesLarTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusLost(evt);
            }
        });
        jPanel2.add(txtDesLarTipDoc);
        txtDesLarTipDoc.setBounds(226, 22, 230, 20);

        butTipDoc.setText("...");
        butTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butTipDocActionPerformed(evt);
            }
        });
        jPanel2.add(butTipDoc);
        butTipDoc.setBounds(456, 22, 20, 20);

        lbCta.setText("Cuenta:");
        lbCta.setToolTipText("Cuenta");
        jPanel2.add(lbCta);
        lbCta.setBounds(0, 0, 90, 20);
        jPanel2.add(txtCodCta);
        txtCodCta.setBounds(80, 0, 30, 20);

        txtDesCorCta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorCtaActionPerformed(evt);
            }
        });
        txtDesCorCta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorCtaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorCtaFocusLost(evt);
            }
        });
        jPanel2.add(txtDesCorCta);
        txtDesCorCta.setBounds(110, 0, 116, 20);

        txtDesLarCta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarCtaActionPerformed(evt);
            }
        });
        txtDesLarCta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarCtaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarCtaFocusLost(evt);
            }
        });
        jPanel2.add(txtDesLarCta);
        txtDesLarCta.setBounds(226, 0, 230, 20);

        butCta.setText("...");
        butCta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCtaActionPerformed(evt);
            }
        });
        jPanel2.add(butCta);
        butCta.setBounds(456, 0, 20, 20);

        panFil.add(jPanel2, java.awt.BorderLayout.NORTH);

        panCorRpt.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panCorRpt.setPreferredSize(new java.awt.Dimension(560, 90));
        panCorRpt.setLayout(new java.awt.BorderLayout());
        panFil.add(panCorRpt, java.awt.BorderLayout.CENTER);
        panCorRpt.getAccessibleContext().setAccessibleName("Codigo");

        jPanel1.setPreferredSize(new java.awt.Dimension(0, 140));
        jPanel1.setLayout(null);

        chkMosDocSinCon.setSelected(true);
        chkMosDocSinCon.setText("Mostrar documentos sin conciliar");
        jPanel1.add(chkMosDocSinCon);
        chkMosDocSinCon.setBounds(0, 10, 300, 14);

        chkMosDocCon.setSelected(true);
        chkMosDocCon.setText("Mostrar documentos conciliados");
        jPanel1.add(chkMosDocCon);
        chkMosDocCon.setBounds(0, 30, 300, 14);

        panFil.add(jPanel1, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("Filtro", panFil);

        panRpt.setLayout(new java.awt.BorderLayout());

        spnDat.setPreferredSize(new java.awt.Dimension(453, 418));

        tblDat.setToolTipText("Doble click o ENTER para abrir la opción seleccionada.");
        tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblDat.setMaximumSize(new java.awt.Dimension(2147483647, 192));
        spnDat.setViewportView(tblDat);

        panRpt.add(spnDat, java.awt.BorderLayout.CENTER);

        spnTotal.setPreferredSize(new java.awt.Dimension(320, 35));

        tblTotal.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        spnTotal.setViewportView(tblTotal);

        panRpt.add(spnTotal, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("Reporte", panRpt);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butGua.setText("Guardar");
        butGua.setToolTipText("Guardar datos");
        butGua.setPreferredSize(new java.awt.Dimension(92, 25));
        butGua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGuaActionPerformed(evt);
            }
        });
        panBot.add(butGua);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    
                        
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar accián de acuerdo a la etiqueta del botán ("Consultar" o "Detener").
        objTblMod.removeAllRows();
        lblMsgSis.setText("");
        if(isCamVal()){
            if (butCon.getText().equals("Consultar")){
                blnCon=true;
                if (objThrGUI==null){
                    objThrGUI=new ZafThreadGUI();
                    objThrGUI.start();
                }
            }
            else{
                blnCon=false;
            }
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicacián. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void txtDesCorTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorTipDocActionPerformed
        // TODO add your handling code here:
        txtDesCorTipDoc.transferFocus();
    }//GEN-LAST:event_txtDesCorTipDocActionPerformed

    private void txtDesCorTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusGained
        // TODO add your handling code here:
        strDesCorTipDoc=txtDesCorTipDoc.getText();
        txtDesCorTipDoc.selectAll();
}//GEN-LAST:event_txtDesCorTipDocFocusGained

    private void txtDesCorTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusLost
        if (!txtDesCorTipDoc.getText().equalsIgnoreCase(strDesCorTipDoc)) {
            if (txtDesCorTipDoc.getText().equals("")) {
                txtCodTipDoc.setText("");
                txtDesLarTipDoc.setText("");
            } else {
                mostrarVenConTipDoc(1);
            }
        } else
            txtDesCorTipDoc.setText(strDesCorTipDoc);
}//GEN-LAST:event_txtDesCorTipDocFocusLost

    private void txtDesLarTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarTipDocActionPerformed
        // TODO add your handling code here:
        txtDesLarTipDoc.transferFocus();
}//GEN-LAST:event_txtDesLarTipDocActionPerformed

    private void txtDesLarTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusGained
        // TODO add your handling code here:
        strDesLarTipDoc=txtDesLarTipDoc.getText();
        txtDesLarTipDoc.selectAll();
}//GEN-LAST:event_txtDesLarTipDocFocusGained

    private void txtDesLarTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesLarTipDoc.getText().equalsIgnoreCase(strDesLarTipDoc)) {
            if (txtDesLarTipDoc.getText().equals("")) {
                txtCodTipDoc.setText("");
                txtDesCorTipDoc.setText("");
            } else {
                mostrarVenConTipDoc(2);
            }
        } else
            txtDesLarTipDoc.setText(strDesLarTipDoc);
}//GEN-LAST:event_txtDesLarTipDocFocusLost

    private void butTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butTipDocActionPerformed
        // TODO add your handling code here:
        mostrarVenConTipDoc(0);
}//GEN-LAST:event_butTipDocActionPerformed

    private void butGuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGuaActionPerformed
        // TODO add your handling code here:
        if(guardar()){
            mostrarMsgInf("<HTML>La información se guardó correctamente.</HTML>");
        }
        else{
            mostrarMsgInf("<HTML>La información no se pudo guardar.</HTML>");
        }


    }//GEN-LAST:event_butGuaActionPerformed

    private void txtDesCorCtaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorCtaActionPerformed
        txtDesCorCta.transferFocus();
        setPuntosCta();
}//GEN-LAST:event_txtDesCorCtaActionPerformed

    private void txtDesCorCtaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorCtaFocusGained
        strDesCorCta=txtDesCorCta.getText();
        txtDesCorCta.selectAll();
}//GEN-LAST:event_txtDesCorCtaFocusGained

    private void txtDesCorCtaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorCtaFocusLost
        //Validar el contenido de la celda sálo si ha cambiado.
        if (!txtDesCorCta.getText().equalsIgnoreCase(strDesCorCta))
        {
            if (txtDesCorCta.getText().equals(""))
            {
                txtCodCta.setText("");
                txtDesLarCta.setText("");
                objTblMod.removeAllRows();
            }
            else
            {
                mostrarVenConCta(1);
            }
        }
        else
            txtDesCorCta.setText(strDesCorCta);
}//GEN-LAST:event_txtDesCorCtaFocusLost

    private void txtDesLarCtaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarCtaActionPerformed
        txtDesLarCta.transferFocus();
}//GEN-LAST:event_txtDesLarCtaActionPerformed

    private void txtDesLarCtaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarCtaFocusGained
        strDesLarCta=txtDesLarCta.getText();
        txtDesLarCta.selectAll();
}//GEN-LAST:event_txtDesLarCtaFocusGained

    private void txtDesLarCtaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarCtaFocusLost
        //Validar el contenido de la celda sálo si ha cambiado.
        if (!txtDesLarCta.getText().equalsIgnoreCase(strDesLarCta))
        {
            if (txtDesLarCta.getText().equals(""))
            {
                txtCodCta.setText("");
                txtDesCorCta.setText("");
                objTblMod.removeAllRows();
            }
            else
            {
                mostrarVenConCta(2);
            }
        }
        else
            txtDesLarCta.setText(strDesLarCta);
}//GEN-LAST:event_txtDesLarCtaFocusLost

    private void butCtaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCtaActionPerformed
        mostrarVenConCta(0);

}//GEN-LAST:event_butCtaActionPerformed


    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConCta(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT a1.co_cta, a1.tx_codCta, a1.tx_desLar";
                strSQL+=" FROM tbm_plaCta AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.tx_tipCta='D' AND a1.st_ctaBan='S'";
                strSQL+=" ORDER BY a1.tx_codCta";
                System.out.println("mostrarVenConCta:" + strSQL);
                vcoCta.setSentenciaSQL(strSQL);
                switch (intTipBus)
                {
                    case 0: //Mostrar la ventana de consulta.
                        vcoCta.setCampoBusqueda(2);
                        vcoCta.show();
                        if (vcoCta.getSelectedButton()==vcoCta.INT_BUT_ACE)
                        {
                            txtCodCta.setText(vcoCta.getValueAt(1));
                            txtDesCorCta.setText(vcoCta.getValueAt(2));
                            txtDesLarCta.setText(vcoCta.getValueAt(3));
                            objTblMod.removeAllRows();
                        }
                        break;
                    case 1: //Básqueda directa por "Námero de cuenta".
                        if (vcoCta.buscar("a1.tx_codCta", txtDesCorCta.getText()))
                        {
                            txtCodCta.setText(vcoCta.getValueAt(1));
                            txtDesCorCta.setText(vcoCta.getValueAt(2));
                            txtDesLarCta.setText(vcoCta.getValueAt(3));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            vcoCta.setCampoBusqueda(1);
                            vcoCta.setCriterio1(11);
                            vcoCta.cargarDatos();
                            vcoCta.show();
                            if (vcoCta.getSelectedButton()==vcoCta.INT_BUT_ACE)
                            {
                                txtCodCta.setText(vcoCta.getValueAt(1));
                                txtDesCorCta.setText(vcoCta.getValueAt(2));
                                txtDesLarCta.setText(vcoCta.getValueAt(3));
                                objTblMod.removeAllRows();
                            }
                            else
                            {
                                txtDesCorCta.setText(strDesCorCta);
                            }
                        }
                        break;
                    case 2: //Básqueda directa por "Descripcián larga".
                        if (vcoCta.buscar("a1.tx_desLar", txtDesLarCta.getText()))
                        {
                            txtCodCta.setText(vcoCta.getValueAt(1));
                            txtDesCorCta.setText(vcoCta.getValueAt(2));
                            txtDesLarCta.setText(vcoCta.getValueAt(3));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            vcoCta.setCampoBusqueda(2);
                            vcoCta.setCriterio1(11);
                            vcoCta.cargarDatos();
                            vcoCta.show();
                            if (vcoCta.getSelectedButton()==vcoCta.INT_BUT_ACE)
                            {
                                txtCodCta.setText(vcoCta.getValueAt(1));
                                txtDesCorCta.setText(vcoCta.getValueAt(2));
                                txtDesLarCta.setText(vcoCta.getValueAt(3));
                                objTblMod.removeAllRows();
                            }
                            else
                            {
                                txtDesLarCta.setText(strDesLarCta);
                            }
                        }
                        break;
                }


        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funcián configura la "Ventana de consulta" que será utilizada para
     * mostrar las "Cuentas".
     */
    private boolean configurarVenConCta()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cta");
            arlCam.add("a1.tx_codCta");
            arlCam.add("a1.tx_desLar");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Cuenta");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            //Armar la sentencia SQL.
            vcoCta=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de cuentas", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoCta.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);




        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funcián configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Tipos de documentos".
     */
    private boolean configurarVenConTipDoc()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_tipdoc");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            arlCam.add("a1.ne_ultDoc");
            arlCam.add("a1.tx_natDoc");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Alias.Doc.");
            arlAli.add("Tipo de documento");
            arlAli.add("Ult.Doc.");
            arlAli.add("Nat.Doc.");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            arlAncCol.add("80");
            arlAncCol.add("80");

            strSQL="";
            strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar, a1.ne_ultDoc, a1.tx_natDoc";
            strSQL+=" FROM tbm_cabTipDoc AS a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();


//            if(objParSis.getCodigoUsuario()==1){
//                strSQL="";
//                strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar, a1.ne_ultDoc, a1.tx_natDoc";
//                strSQL+=" FROM tbm_cabTipDoc AS a1 INNER JOIN tbr_tipDocPrg AS a2";
//                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
//                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
//                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();
//                strSQL+=" AND a2.co_mnu=" + objParSis.getCodigoMenu();
//            }
//            else{
//                strSQL="";
//                strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar, a1.ne_ultDoc, a1.tx_natDoc";
//                strSQL+=" FROM tbm_cabTipDoc AS a1 INNER JOIN tbr_tipDocUsr AS a2";
//                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
//                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
//                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();
//                strSQL+=" AND a2.co_mnu=" + objParSis.getCodigoMenu();
//                strSQL+=" AND a2.co_usr=" + objParSis.getCodigoUsuario();
//
//            }


            vcoTipDoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de tipos de documentos", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoTipDoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoTipDoc.setConfiguracionColumna(4, javax.swing.JLabel.RIGHT);


        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean mostrarVenConTipDoc(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoTipDoc.setCampoBusqueda(1);
                    vcoTipDoc.show();
                    if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE){
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Descripción corta".
                    if (vcoTipDoc.buscar("a1.tx_desCor", txtDesCorTipDoc.getText())){
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(1);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE){
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        }
                        else
                        {
                            txtDesCorTipDoc.setText(strDesCorTipDoc);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoTipDoc.buscar("a1.tx_desLar", txtDesLarTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(2);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE){
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        }
                        else
                        {
                            txtDesLarTipDoc.setText(strDesLarTipDoc);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /** Cerrar la aplicacián. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butCta;
    private javax.swing.JButton butGua;
    private javax.swing.JButton butTipDoc;
    private javax.swing.JCheckBox chkMosDocCon;
    private javax.swing.JCheckBox chkMosDocSinCon;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lbCta;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JLabel lblTitTipDoc;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panCorRpt;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panRpt;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JScrollPane spnTotal;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblTotal;
    private javax.swing.JTextField txtCodCta;
    private javax.swing.JTextField txtCodTipDoc;
    private javax.swing.JTextField txtDesCorCta;
    private javax.swing.JTextField txtDesCorTipDoc;
    private javax.swing.JTextField txtDesLarCta;
    private javax.swing.JTextField txtDesLarTipDoc;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            blnConciliar=false;
            blnDesconciliar=false;


            if(objPerUsr.isOpcionEnabled(2394)){
                blnConciliar=true;
            }
            if(objPerUsr.isOpcionEnabled(2395)){
                blnDesconciliar=true;
            }


            txtCodCta.setBackground(objParSis.getColorCamposObligatorios());
            txtDesCorCta.setBackground(objParSis.getColorCamposObligatorios());
            txtDesLarCta.setBackground(objParSis.getColorCamposObligatorios());
            strAux=objParSis.getNombreMenu() + strVersion;
            this.setTitle(strAux);
            lblTit.setText(strAux);
            
            //Configurar ZafSelFec:
            objSelFec=new ZafSelFec();
            objSelFec.setCheckBoxVisible(false);
            panCorRpt.add(objSelFec);
            objSelFec.setBounds(4, 4, 472, 72);


            objSelFec.setFechaDesde(getMesAnterior(objSelFec.getFechaHasta()));
            
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(19);    //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_EMP,"Cod.Emp.");
            vecCab.add(INT_TBL_DAT_COD_LOC,"Cod.Loc.");
            vecCab.add(INT_TBL_DAT_COD_TIP_DOC,"Cod.Tip.Doc.");
            vecCab.add(INT_TBL_DAT_DES_COR,"Tip.Doc");
            vecCab.add(INT_TBL_DAT_DES_LAR,"Tipo de Documento");
            vecCab.add(INT_TBL_DAT_COD_DOC,"Cod.Doc.");
            vecCab.add(INT_TBL_DAT_COD_REG,"Cod.Doc.");
            vecCab.add(INT_TBL_DAT_NUM_DOC,"Num.Doc.");
            vecCab.add(INT_TBL_DAT_FEC_DOC,"Fec.Doc.");
            vecCab.add(INT_TBL_DAT_GLO,"Glosa");
            vecCab.add(INT_TBL_DAT_VAL_DEB,"Debe");
            vecCab.add(INT_TBL_DAT_VAL_HAB,"Haber");
            vecCab.add(INT_TBL_DAT_CHK_CON,"Conciliado");
            vecCab.add(INT_TBL_DAT_CHK_CON_AUX,"Conciliado Auxiliar");
            vecCab.add(INT_TBL_DAT_FEC_CON,"Fecha");
            vecCab.add(INT_TBL_DAT_COD_USU_CON,"Usuario");
            vecCab.add(INT_TBL_DAT_ALI_USU_CON,"Alias Usuario");
            vecCab.add(INT_TBL_DAT_NOM_USU_CON,"Nombre Usuario");


            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);            


            //Configurar JTable: Establecer relacián entre el JTable de datos y JTable de totales.
            int intCol[]={INT_TBL_DAT_VAL_DEB, INT_TBL_DAT_VAL_HAB};
            objTblTot=new ZafTblTot(spnDat, spnTotal, tblDat, tblTotal, intCol);

            //Configurar JTable: Establecer tipo de seleccián.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el mená de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Tamaáo de las celdas
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_LIN).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(20);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DES_COR).setPreferredWidth(60);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DES_LAR).setPreferredWidth(40);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(60);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(70);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_GLO).setPreferredWidth(35);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_DEB).setPreferredWidth(90);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_HAB).setPreferredWidth(90);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON).setPreferredWidth(60);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FEC_CON).setPreferredWidth(40);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_CON).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_CON).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NOM_USU_CON).setPreferredWidth(50);


            //Configurar JTable: Establecer los listener para el TableHeader.
            tblDat.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tblDatMouseClicked(evt);
                }
            });



            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);                       
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_DEB).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_HAB).setCellRenderer(objTblCelRenLbl);

            tblTotal.setRowSelectionAllowed(true);
            tblTotal.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            //objColNum=new ZafColNumerada(tblTotal,INT_TBL_DAT_LIN);            
            tblTotal.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_LIN).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(20);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_DES_COR).setPreferredWidth(60);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_DES_LAR).setPreferredWidth(40);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(60);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(70);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_GLO).setPreferredWidth(35);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_VAL_DEB).setPreferredWidth(90);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_VAL_HAB).setPreferredWidth(90);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON).setPreferredWidth(60);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_FEC_CON).setPreferredWidth(40);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_CON).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_CON).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_NOM_USU_CON).setPreferredWidth(50);

                                                           
            tblDat.getTableHeader().setReorderingAllowed(false);


            //Configurar JTable: Ocultar columnas del sistema.
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setMaxWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setMinWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setResizable(false);

            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setMaxWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setMinWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setResizable(false);

            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setMaxWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setMinWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setResizable(false);

            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setMaxWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setMinWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setResizable(false);

            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setMaxWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setMinWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setResizable(false);

            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_CON).setWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_CON).setMaxWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_CON).setMinWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_CON).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_CON).setResizable(false);

            tblDat.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_CON).setWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_CON).setMaxWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_CON).setMinWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_CON).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_CON).setResizable(false);



            //Configurar JTable: Ocultar columnas del sistema.
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setMaxWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setMinWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setResizable(false);

            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setMaxWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setMinWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setResizable(false);

            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setMaxWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setMinWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setResizable(false);

            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setMaxWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setMinWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setResizable(false);

            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setMaxWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setMinWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setResizable(false);

            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_CON).setWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_CON).setMaxWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_CON).setMinWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_CON).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_CON).setResizable(false);

            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_CON).setWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_CON).setMaxWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_CON).setMinWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_CON).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_CON).setResizable(false);





            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_CON).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_CON).setResizable(false);

            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setResizable(false);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setResizable(false);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setResizable(false);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setResizable(false);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setResizable(false);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_USU_CON).setResizable(false);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_ALI_USU_CON).setResizable(false);
            

            objTblBus=new ZafTblBus(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);
            
            arlDat=new ArrayList();



            //Configurar JTable: Renderizar celdas.
            objTblCelRenChkAux=new ZafTblCelRenChk();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setCellRenderer(objTblCelRenChkAux);
            objTblCelRenChkAux=null;

            //Configurar JTable: Editor de celdas.
            objTblCelEdiChkAux=new ZafTblCelEdiChk(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setCellEditor(objTblCelEdiChkAux);

            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk=new ZafTblCelRenChk();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk=null;

            //Configurar JTable: Editor de celdas.
            objTblCelEdiChk=new ZafTblCelEdiChk(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON).setCellEditor(objTblCelEdiChk);

            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    System.out.println("beforeEdit");
                    System.out.println("blnConciliar: " + blnConciliar);
                    System.out.println("blnDesconciliar: " + blnDesconciliar);
                    objTblCelEdiChk.setCancelarEdicion(false);
                    if((objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_CON)) && (objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_CON_AUX)) ){
                        System.out.println("1");
                        if(( ! blnDesconciliar) && ( ! blnConciliar) )
                            objTblCelEdiChk.setCancelarEdicion(true);
                        if(blnDesconciliar)
                            objTblCelEdiChk.setCancelarEdicion(false);
                        else
                            objTblCelEdiChk.setCancelarEdicion(true);
                    }
                    else if((objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_CON)) && ( ! objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_CON_AUX)) ){
                        System.out.println("2");
                        if( (blnDesconciliar)  || (blnConciliar) ){
                            objTblCelEdiChk.setCancelarEdicion(false);
                        }
                        else
                            objTblCelEdiChk.setCancelarEdicion(true);
                    }
                    else if(( ! objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_CON)) && ( ! objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_CON_AUX)) ){
                        System.out.println("3");
                        if( ( ! blnConciliar) && ( ! blnDesconciliar))
                            objTblCelEdiChk.setCancelarEdicion(true);

                        if(blnConciliar)
                            objTblCelEdiChk.setCancelarEdicion(false);
                        else
                            objTblCelEdiChk.setCancelarEdicion(true);
                        
                    }
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    System.out.println("afterEdit");
                }
                
            });








            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_CHK_CON);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;

            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);

            configurarVenConCta();
            configurarVenConTipDoc();



            txtCodCta.setVisible(false);
            txtCodCta.setEditable(false);
            txtCodCta.setEnabled(false);
            txtCodTipDoc.setVisible(false);
            txtCodTipDoc.setEditable(false);
            txtCodTipDoc.setEnabled(false);






        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funcián muestra un mensaje informativo al usuario. Se podráa utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podráa presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaráa informado en todo
     * momento de lo que ocurre. Si se desea hacer ásto es necesario utilizar ásta clase
     * ya que si no sálo se apreciaráa los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sálo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }
    
    /**
     * Esta función permite establecer la conexión para consultas DML
     * @return true: Si se pudo establecer conexión y cargar datos.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg(){
        String strNiv;
        int intCodEmp, intNumTotReg, i;
        boolean blnRes=true;
        double dblNumVta=0.00;
        double dblValNet=0.00;
        
        try{
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            intCodEmp=objParSis.getCodigoEmpresa();
            
            if (con!=null){
                
                switch (objSelFec.getTipoSeleccion()){
                    case 0: //Básqueda por rangos
                        strAux=" AND a1.fe_dia BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 1: //Fechas menores o iguales que "Hasta".
                        strAux=" AND a1.fe_dia<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 2: //Fechas mayores o iguales que "Desde".
                        strAux=" AND a1.fe_dia>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 3: //Todo.
                        break;
                }

                
                stm=con.createStatement();

                strSQL="";
                strSQL+=" SELECT COUNT(*)";
                strSQL+=" FROM (tbm_cabDia AS a1 INNER JOIN tbm_cabTipDoc AS b1";
                strSQL+=" 			ON a1.co_emp=b1.co_emp AND a1.co_loc=b1.co_loc AND a1.co_tipDoc=b1.co_tipDoc)";
                strSQL+=" INNER JOIN (tbm_detDia AS a2 INNER JOIN tbm_plaCta AS b2";
                strSQL+=" 			ON a2.co_emp=b2.co_emp AND a2.co_cta=b2.co_cta)";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_dia=a2.co_dia";
                strSQL+=" LEFT OUTER JOIN tbm_usr AS c1 ON a2.co_usrConBan=c1.co_usr";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + " AND a1.st_reg NOT IN('E','I','O')";
                strSQL+=" AND a2.co_cta=" + txtCodCta.getText() + "";
                if( ! txtCodTipDoc.getText().equals(""))
                    strSQL+=" AND a1.co_tipDoc=" + txtCodTipDoc.getText() + "";
                strSQL+=strAux;
                strSQL+=" AND b2.st_ctaBan='S'";
                if((chkMosDocSinCon.isSelected()) && (chkMosDocCon.isSelected()) ){
                    strSQL+=" AND (a2.st_conBan IN('S') OR a2.st_conBan IS NULL OR a2.st_conBan='N')";
                }
                else if(chkMosDocSinCon.isSelected()){
                    strSQL+=" AND (a2.st_conBan IS NULL OR a2.st_conBan='N')";
                }
                else if(chkMosDocCon.isSelected()){
                    strSQL+=" AND a2.st_conBan='S'";
                }
                System.out.println("COUNT cargarDetReg: "+strSQL);
                intNumTotReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intNumTotReg==-1)
                    return false;                                
                
                //PARA FACTURAS Y NOTAS DE CREDITO
                strSQL="";
                strSQL+=" SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, b1.tx_desCor, b1.tx_desLar";
                strSQL+=" 	, a1.co_dia, a1.tx_numDia, a1.fe_dia, a1.tx_glo, a2.nd_monDeb, a2.nd_monHab, a2.co_reg";
                strSQL+=" 	, a1.st_tieConBan, a2.st_conBan, a2.fe_conBan, a2.co_usrConBan, c1.tx_usr, c1.tx_nom";
                strSQL+=" FROM (tbm_cabDia AS a1 INNER JOIN tbm_cabTipDoc AS b1";
                strSQL+=" 			ON a1.co_emp=b1.co_emp AND a1.co_loc=b1.co_loc AND a1.co_tipDoc=b1.co_tipDoc)";
                strSQL+=" INNER JOIN (tbm_detDia AS a2 INNER JOIN tbm_plaCta AS b2";
                strSQL+=" 			ON a2.co_emp=b2.co_emp AND a2.co_cta=b2.co_cta)";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_dia=a2.co_dia";
                strSQL+=" LEFT OUTER JOIN tbm_usr AS c1 ON a2.co_usrConBan=c1.co_usr";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + " AND a1.st_reg NOT IN('E','I','O')";
                strSQL+=" AND a2.co_cta=" + txtCodCta.getText() + "";
                if( ! txtCodTipDoc.getText().equals(""))
                    strSQL+=" AND a1.co_tipDoc=" + txtCodTipDoc.getText() + "";
                strSQL+=strAux;
                strSQL+=" AND b2.st_ctaBan='S'";
                if((chkMosDocSinCon.isSelected()) && (chkMosDocCon.isSelected()) ){
                    strSQL+=" AND (a2.st_conBan IN('S') OR a2.st_conBan IS NULL  OR a2.st_conBan='N')";
                }
                else if(chkMosDocSinCon.isSelected()){
                    strSQL+=" AND (a2.st_conBan IS NULL OR a2.st_conBan='N')";
                }
                else if(chkMosDocCon.isSelected()){
                    strSQL+=" AND a2.st_conBan='S'";
                }
                strSQL+=" ORDER BY a1.fe_dia, a1.tx_numDia";
                System.out.println("SQL cargarDetReg: " + strSQL);
                rst=stm.executeQuery(strSQL);

                vecDat.clear();
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;                

                lblMsgSis.setText("Listo");
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_COD_EMP,     "" + rst.getString("co_emp"));
                        vecReg.add(INT_TBL_DAT_COD_LOC,     "" + rst.getString("co_loc"));
                        vecReg.add(INT_TBL_DAT_COD_TIP_DOC, "" + rst.getString("co_tipDoc"));
                        vecReg.add(INT_TBL_DAT_DES_COR,     "" + rst.getString("tx_desCor"));
                        vecReg.add(INT_TBL_DAT_DES_LAR,     "" + rst.getString("tx_desLar"));
                        vecReg.add(INT_TBL_DAT_COD_DOC,     "" + rst.getString("co_dia"));
                        vecReg.add(INT_TBL_DAT_COD_REG,     "" + rst.getString("co_reg"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC,     "" + rst.getString("tx_numDia"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC,     "" + rst.getString("fe_dia"));
                        vecReg.add(INT_TBL_DAT_GLO,         "" + rst.getString("tx_glo"));
                        vecReg.add(INT_TBL_DAT_VAL_DEB,     "" + rst.getBigDecimal("nd_monDeb"));
                        vecReg.add(INT_TBL_DAT_VAL_HAB,     "" + rst.getBigDecimal("nd_monHab"));
                        vecReg.add(INT_TBL_DAT_CHK_CON,     null);
                        vecReg.add(INT_TBL_DAT_CHK_CON_AUX,     null);
                        vecReg.add(INT_TBL_DAT_FEC_CON,     "" + rst.getObject("fe_conBan")==null?"":rst.getString("fe_conBan"));
                        vecReg.add(INT_TBL_DAT_COD_USU_CON,     "" + rst.getObject("co_usrConBan")==null?"":rst.getString("co_usrConBan"));
                        vecReg.add(INT_TBL_DAT_ALI_USU_CON,     "" + rst.getObject("tx_usr")==null?"":rst.getString("tx_usr"));
                        vecReg.add(INT_TBL_DAT_NOM_USU_CON,     "" + rst.getObject("tx_nom")==null?"":rst.getString("tx_nom"));

                        strAux=rst.getObject("st_conBan")==null?"":rst.getString("st_conBan");
                        if(strAux.equals("S")){
                            vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK_CON);
                            vecReg.setElementAt(new Boolean(true),INT_TBL_DAT_CHK_CON_AUX);
                        }
                        vecDat.add(vecReg);                                                                                                
                        i++;
                        pgrSis.setValue(i);                        
                        lblMsgSis.setText("Se encontraron " + rst.getRow() + " registros.");                        
                    }
                    else{
                        lblMsgSis.setText("Se encontraron " + rst.getRow() + " registros.");
                        break;
                    }                    
                }
                rst.close();
                stm.close();
                rst=null;
                stm=null;

                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);                
                pgrSis.setValue(0);
                butCon.setText("Consultar");
//                objTblTot.calcularTotales();


                blnMarTodChkTblEmp=true;

            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite establecer la conexión
     * @return true: Si se pudo establecer conexión y cargar datos.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                if(cargarDetReg())
                    objTblTot.calcularTotales();
                con.close();
                con=null;
            }            
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
    
    /**
     * Esta función coloca puntos entre la cadena ingresada,
     * permitiendo que el usuario ingrese 1010101 en lugar de ingresar 1.01.01.01
     */
    private void setPuntosCta(){
        strAux=txtDesCorCta.getText();
        String strCodCtaOri=strAux;
        String strCodCtaDes="";
        char chrCtaOri;
        //obtengo la longitud de mi cadena
        int intLonCodCta=strCodCtaOri.length();
        int intLonCodCtaMen=intLonCodCta-1;
        //PARA CUANDO LOS TRES ULTIMOS DIGITOS SE LOS DEBE TOMAR COMO UN NIVEL DIFERENTE
        int intLonCodCtaMenTreDig=intLonCodCta-2;
        if (strCodCtaOri.length()<=1)
            return;
        else{
            chrCtaOri=strCodCtaOri.charAt(1);
            if(chrCtaOri!='.'){
                for (int i=0; i < strCodCtaOri.length(); i++){
                    if(i==0){
                        strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                        strCodCtaDes=strCodCtaDes+".";
                    }
                    else{
                        if(  (strCodCtaOri.length() % 2) == 0 ){
                            if(((i % 2)==0)&&(i<intLonCodCtaMenTreDig)){
                                strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                                strCodCtaDes=strCodCtaDes+".";
                            }
                            if(((i % 2)==0)&&(i==intLonCodCtaMenTreDig)){
                                strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                            }
                            else{
                                if((i % 2)!= 0)
                                    strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                            }
                        }
                        else{
                            if(((i % 2)==0)&&(i!=intLonCodCtaMen)){
                                strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                                strCodCtaDes=strCodCtaDes+".";
                            }
                            if(((i % 2)==0)&&(i==intLonCodCtaMen)){
                                strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                            }
                            else{
                                if((i % 2)!= 0)
                                    strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                            }
                        }
                    }
                }
                txtDesCorCta.setText(strCodCtaDes);
            }
        }
    }

    /**
     * Esta función obtiene la "fecha desde" que se presenta en el formulario.
     * @param fechaActual La fecha del presente día.
     * @return String: Contiene la fecha del primer día del mes anterior.
     */
    private String getMesAnterior(String fechaActual){
        Connection conMesAnt;
        Statement stmMesAnt;
        ResultSet rstMesAnt;
        String strMesAnt="";
        try{
            conMesAnt=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conMesAnt!=null){
                stmMesAnt=conMesAnt.createStatement();
                strSQL="";
                strSQL+=" select '01/' ||";
                strSQL+=" case when extract('month' FROM cast('";
                strSQL+="" + objUti.formatearFecha(fechaActual, "dd/MM/yyyy", "yyyy-MM-dd") + "";
                strSQL+=" ' as date))<10 then '0'||extract('month' FROM cast('";
                strSQL+="" + objUti.formatearFecha(fechaActual, "dd/MM/yyyy", "yyyy-MM-dd") + "";
                strSQL+=" ' as date))";
                strSQL+=" else ''||extract('month' FROM cast('";
                strSQL+="" + objUti.formatearFecha(fechaActual, "dd/MM/yyyy", "yyyy-MM-dd") + "";
                strSQL+=" ' as date)) end";
                strSQL+=" || '/'  ||";
                strSQL+=" extract('year' FROM cast('";
                strSQL+="" + objUti.formatearFecha(fechaActual, "dd/MM/yyyy", "yyyy-MM-dd") + "";
                strSQL+=" ' as date))  as fechaInicial";

                rstMesAnt=stmMesAnt.executeQuery(strSQL);
                if(rstMesAnt.next()){
                    strMesAnt=rstMesAnt.getString("fechaInicial");
                }
                conMesAnt.close();
                conMesAnt=null;
                stmMesAnt.close();
                stmMesAnt=null;
                rstMesAnt.close();
                rstMesAnt=null;
            }
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return objUti.formatearFecha(strMesAnt,"dd/MM/yyyy","dd/MM/yyyy");
    }

    /**
     * Esta función establece la conexión y contiene las funciones que insertan y modifican campos de auditoria.
     * @return true: Si se pudo modificar.
     * <BR>false: En el caso contrario.
     */
    private boolean guardar(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                con.setAutoCommit(false);
                if(guardarDatos()){
                    con.commit();
                }
                else{
                    con.rollback();
                    blnRes=false;
                }
                con.close();
                con=null;
            }
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }

    /**
     * Esta función permite actualizar en tbm_cabDia los campos para consignación bancaria.
     * @return true: Si se pudo modificar.
     * <BR>false: En el caso contrario.
     */
    private boolean guardarDatos(){
        boolean blnRes=true;
        String strLin="";
        String strUpd="";
        try{
            if(con!=null){
                stm=con.createStatement();
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    strLin=objTblMod.getValueAt(i, INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_LIN).toString();
                    if(strLin.equals("M")){
                        strSQL="";
                        strSQL+="UPDATE tbm_cabDia";
                        if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_CON))
                            strSQL+=" SET st_tieConBan='S'";
                        else
                            strSQL+=" SET st_tieConBan='N'";
                        strSQL+=" WHERE co_emp=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_EMP) + "";
                        strSQL+=" AND co_loc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC) + "";
                        strSQL+=" AND co_tipDoc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC) + "";
                        strSQL+=" AND co_dia=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC) + "";
                        strSQL+=";";
                        strSQL+=" UPDATE tbm_detDia";
                        if(objTblMod.isChecked(i, INT_TBL_DAT_CHK_CON)){
                            strSQL+=" SET st_conBan='S'";
                            strSQL+=", fe_conBan=" + objParSis.getFuncionFechaHoraBaseDatos() + "";
                            strSQL+=", co_usrConBan=" + objParSis.getCodigoUsuario() + "";
                        }
                        else{
                            strSQL+=" SET st_conBan='N'";
                            strSQL+=", fe_conBan=Null";
                            strSQL+=", co_usrConBan=Null";
                        }
                        strSQL+=" WHERE co_emp=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_EMP) + "";
                        strSQL+=" AND co_loc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC) + "";
                        strSQL+=" AND co_tipDoc=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC) + "";
                        strSQL+=" AND co_dia=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC) + "";
                        strSQL+=" AND co_reg=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_REG) + "";
                        strSQL+=";";
                        strUpd+=strSQL;
                    }
                    
                }
                System.out.println("strUpd: " + strUpd);
                stm.executeUpdate(strUpd);
                stm.close();
                stm=null;
            }

        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }

    /**
     * Esta funcián determina si los campos son válidos.
     * @return true: Si los campos son válidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal(){
        //Validar la "Cuenta".
        if (txtCodCta.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Cuenta</FONT> es obligatorio.<BR>Escriba o seleccione una cuenta y vuelva a intentarlo.</HTML>");
            txtDesCorCta.requestFocus();
            return false;
        }
        if( (! chkMosDocSinCon.isSelected()) &&( ! chkMosDocCon.isSelected()) ){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>Se debe tener al menos un filtro de documentos a mostrar seleccionado.<BR>Seleccione alguno y vuelva a intentarlo.</HTML>");
            return false;
        }


        return true;
    }



    /**
     * Esta función se ejecuta cuando se hace el "MouseClicked" en la cabecera del JTable.
     * Se utiliza ésta función especificamente para marcar todas las casillas de verificación
     * de la columna que indica la bodega seleccionada en el el JTable de bodegas.
     */
    private void tblDatMouseClicked(java.awt.event.MouseEvent evt)
    {
        int i, intNumFil;
        try
        {
            intNumFil=objTblMod.getRowCountTrue();
            //Marcar la casilla sólo si se da 1 click con el botón izquierdo.
            if (evt.getButton()==evt.BUTTON1 && evt.getClickCount()==1 && tblDat.columnAtPoint(evt.getPoint())==INT_TBL_DAT_CHK_CON)
            {
                if (blnMarTodChkTblEmp)
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        objTblMod.setChecked(true, i, INT_TBL_DAT_CHK_CON);
                    }
                    blnMarTodChkTblEmp=false;
                }
                else
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        objTblMod.setChecked(false, i, INT_TBL_DAT_CHK_CON);
                    }
                    blnMarTodChkTblEmp=true;
                }
            }
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }
/**
     * Configura Permisos de Usuarios
     */
    private void configurarVentanaPermisos()
    {
        if (objPerUsr.isOpcionEnabled(2392)) {
            butGua.setEnabled(true);
        }else{
            butGua.setEnabled(false);    
        }
        if (objPerUsr.isOpcionEnabled(2391)) {
            butCon.setEnabled(true);
        }else{
            butCon.setEnabled(false);    
        }
        if (objPerUsr.isOpcionEnabled(2393)) {
            butCer.setEnabled(true);
        }else{
            butCer.setEnabled(false);    
        }
    }

    
}