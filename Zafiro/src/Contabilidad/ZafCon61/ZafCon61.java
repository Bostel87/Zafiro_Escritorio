/*
 * ZafCon61.java
 *
 */

package Contabilidad.ZafCon61;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import java.util.Vector;
import Librerias.ZafPerUsr.ZafPerUsr;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;

import java.sql.*;
import java.util.ArrayList;


/**
 *
 * @author  Ingrid Lino
 */
public class ZafCon61 extends javax.swing.JInternalFrame
{
    //Constantes: Columnas del JTable:
    final int INT_TBL_DAT_LIN=0;                //Lánea
    final int INT_TBL_DAT_COD_SIS=1;            //Cádigo de la cuenta (Sistema).
    final int INT_TBL_DAT_NIV_CTA=2;            //Nivel de la cuenta.
    final int INT_TBL_DAT_NUM_CTA=3;            //Cádigo de la cuenta (Contable).
    final int INT_TBL_DAT_NOM_CTA=4;            //Nombre de la cuenta.
    final int INT_TBL_DAT_CHK_CON=5;
    final int INT_TBL_DAT_CHK_CON_AUX=6;

    
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblFilCab objTblFilCab;
    private ZafTblMod objTblMod;
    private ZafThreadGUI objThrGUI;
    private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PopupMená en JTable.
    private ZafTblBus objTblBus;                        //Editor de básqueda.
    private ZafTblOrd objTblOrd;                        //JTable de ordenamiento.
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg, vecAux;
    private ZafPerUsr objPerUsr;


    private ZafTblCelRenChk objTblCelRenChk, objTblCelRenChkAux;            //Render: Presentar JCheckBox en JTable.
    private ZafTblCelEdiChk objTblCelEdiChk, objTblCelEdiChkAux;            //Editor: JCheckBox en celda.
    private boolean blnMarTodChkTblEmp;
    private boolean blnConciliar, blnDesconciliar;


    private ArrayList arlReg, arlDat;
    private int INT_ARL_NUM_CTA=0;
    private int INT_ARL_NOM_CTA=1;
    private int INT_ARL_EST_PRO=2;
            
    public ZafCon61(ZafParSis obj){
        try{
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
            objUti=new ZafUtil();
            objPerUsr=new ZafPerUsr(objParSis);
            arlDat=new ArrayList();
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        lblNiv = new javax.swing.JLabel();
        cboNiv = new javax.swing.JComboBox();
        panRpt = new javax.swing.JPanel();
        panRptReg = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butGua = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        jPanel2.setPreferredSize(new java.awt.Dimension(100, 240));
        jPanel2.setLayout(null);

        lblNiv.setText("Nivel:");
        jPanel2.add(lblNiv);
        lblNiv.setBounds(10, 6, 100, 20);
        jPanel2.add(cboNiv);
        cboNiv.setBounds(110, 6, 180, 20);

        tabFrm.addTab("Filtro", jPanel2);

        panRpt.setLayout(new java.awt.BorderLayout());

        panRptReg.setLayout(new java.awt.BorderLayout(0, 1));

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnDat.setViewportView(tblDat);

        panRptReg.add(spnDat, java.awt.BorderLayout.CENTER);

        panRpt.add(panRptReg, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Reporte", panRpt);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butGua.setText("Guardar");
        butGua.setPreferredSize(new java.awt.Dimension(93, 26));
        butGua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGuaActionPerformed(evt);
            }
        });
        panBot.add(butGua);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents
  
    
    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        configurarFrm();
    }//GEN-LAST:event_formInternalFrameOpened

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar accián de acuerdo a la etiqueta del botán ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar")){
            if (objThrGUI==null){
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicacián. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="áEstá seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void butGuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGuaActionPerformed
        // TODO add your handling code here:
        if(guardarDatos()){
            mostrarMsgInf("<HTML>La información se guardó correctamente.</HTML>");
            cargarDetReg();
        } else{
            mostrarMsgInf("<HTML>La información no se pudo guardar.<BR>Verifique y vuelva a intentarlo.</HTML>");
        }
        //arlDatEstEliPed.clear();
}//GEN-LAST:event_butGuaActionPerformed

    /** Cerrar la aplicacián. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butGua;
    private javax.swing.JComboBox cboNiv;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblNiv;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panRpt;
    private javax.swing.JPanel panRptReg;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Configurar el combo "Mes de corte".
            cargarAnioCreados();
            //Configurar el combo "Nivel".
            cboNiv.addItem("1");
            cboNiv.addItem("2");
            cboNiv.addItem("3");
            cboNiv.addItem("4");
            cboNiv.addItem("5");
            cboNiv.addItem("6");
            cboNiv.setSelectedIndex(5);
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.1.1");
            lblTit.setText(strAux);
            //Configurar los JTables.
            configurarTblDat();

            //las dos sgts variables son true porque no hay restriccion de quien puede configurar o no las cuentas. SINO se descomenta lo de abajo y comenta esto, claro cambiando codigoMenu
            blnConciliar=true;
            blnDesconciliar=true;

//            blnConciliar=false;
//            blnDesconciliar=false;
//            if(objParSis.getCodigoUsuario()==1){
//                blnConciliar=true;
//                blnDesconciliar=true;
//            }
//            else{
//                if(objPerUsr.isOpcionEnabled(2394)){
//                    blnConciliar=true;
//                }
//                if(objPerUsr.isOpcionEnabled(2395)){
//                    blnDesconciliar=true;
//                }
//            }

            butCon.setVisible(false);
            butGua.setVisible(false);
            butCer.setVisible(false);
            if(objParSis.getCodigoUsuario()==1){
                butCon.setVisible(true);
                butGua.setVisible(true);
                butCer.setVisible(true);
            }
            else{
                if(objPerUsr.isOpcionEnabled(2978)){
                    butCon.setVisible(true);
                }
                if(objPerUsr.isOpcionEnabled(2979)){
                    butGua.setVisible(true);
                }
                if(objPerUsr.isOpcionEnabled(2980)){
                   butCer.setVisible(true);
                }
            }



        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funcián configura el JTable "tblDat".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDat(){
        boolean blnRes=true;
        try{
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(7);   //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_SIS,"Cád.Sis.");
            vecCab.add(INT_TBL_DAT_NIV_CTA,"Nivel");
            vecCab.add(INT_TBL_DAT_NUM_CTA,"Cuenta");
            vecCab.add(INT_TBL_DAT_NOM_CTA,"Nombre");
            vecCab.add(INT_TBL_DAT_CHK_CON,"");
            vecCab.add(INT_TBL_DAT_CHK_CON_AUX,"Auxiliar");

            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de seleccián.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el mená de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_SIS).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_NIV_CTA).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_NUM_CTA).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_DAT_NOM_CTA).setPreferredWidth(377);
            tcmAux.getColumn(INT_TBL_DAT_CHK_CON).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_CHK_CON_AUX).setPreferredWidth(50);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            //Configurar JTable: Ocultar columnas del sistema.
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_SIS, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_NIV_CTA, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_CHK_CON_AUX, tblDat);

            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_SIS).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NIV_CTA).setResizable(false);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setResizable(false);

            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Editor de básqueda.
            objTblBus=new ZafTblBus(tblDat);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);
            //Configurar JTable: Establecer la clase que controla el ordenamiento.
            objTblOrd=new ZafTblOrd(tblDat);

            //Configurar JTable: Establecer los listener para el TableHeader.
            tblDat.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tblDatMouseClicked(evt);
                }
            });



            //Configurar JTable: Renderizar celdas.
            objTblCelRenChkAux=new ZafTblCelRenChk();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setCellRenderer(objTblCelRenChkAux);
            objTblCelRenChkAux=null;

            //Configurar JTable: Editor de celdas.
            objTblCelEdiChkAux=new ZafTblCelEdiChk(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setCellEditor(objTblCelEdiChkAux);

            //Configurar JTable: Renderizar celdas.
            objTblCelRenChk=new ZafTblCelRenChk();
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON).setCellRenderer(objTblCelRenChk);
            objTblCelRenChk=null;

            //Configurar JTable: Editor de celdas.
            objTblCelEdiChk=new ZafTblCelEdiChk(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON).setCellEditor(objTblCelEdiChk);

            objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    objTblCelEdiChk.setCancelarEdicion(false);
                    if((objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_CON)) && (objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_CON_AUX)) ){
                        if(( ! blnDesconciliar) && ( ! blnConciliar) )
                            objTblCelEdiChk.setCancelarEdicion(true);
                        if(blnDesconciliar)
                            objTblCelEdiChk.setCancelarEdicion(false);
                        else
                            objTblCelEdiChk.setCancelarEdicion(true);
                    }
                    else if((objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_CON)) && ( ! objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_CON_AUX)) ){
                        if( (blnDesconciliar)  || (blnConciliar) ){
                            objTblCelEdiChk.setCancelarEdicion(false);
                        }
                        else
                            objTblCelEdiChk.setCancelarEdicion(true);
                    }
                    else if(( ! objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_CON)) && ( ! objTblMod.isChecked(tblDat.getSelectedRow(), INT_TBL_DAT_CHK_CON_AUX)) ){
                        if( ( ! blnConciliar) && ( ! blnDesconciliar))
                            objTblCelEdiChk.setCancelarEdicion(true);
                        if(blnConciliar)
                            objTblCelEdiChk.setCancelarEdicion(false);
                        else
                            objTblCelEdiChk.setCancelarEdicion(true);

                    }
                }
                public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                    System.out.println("afterEdit");
                }

            });


            vecAux=new Vector();
            vecAux.add("" + INT_TBL_DAT_CHK_CON);
            objTblMod.setColumnasEditables(vecAux);
            vecAux=null;

            objTblMod.setModoOperacion(objTblMod.INT_TBL_EDI);



                       
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
            
    /**
     * Esta funcián permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg(){
        int intNiv, j;
        String strCodCtaCfg="";
        boolean blnRes=true;
        try{
            pgrSis.setIndeterminate(true);
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                //Obtener la condicián.
                strAux="";
                //Obtener los datos del "Grupo".
                strSQL="";
                strSQL+=" SELECT ";
                if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                    strSQL+=" 0 AS co_cta, a1.ne_niv, a1.tx_codCta, a1.tx_desLar";
                else
                    strSQL+=" a1.co_cta, a1.ne_niv,  a1.tx_codCta, a1.tx_desLar, a2.co_cta AS co_ctaCfg";
                strSQL+=" FROM tbm_plaCta AS a1 LEFT OUTER JOIN tbr_ctaPrg AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta";
                strSQL+=" AND a2.co_mnu=" + objParSis.getCodigoMenu() + "";
                if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()){
                    strSQL+=" WHERE a1.co_emp<>" + objParSis.getCodigoEmpresaGrupo();
                }
                else{
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                }
                strSQL+=" AND a1.ne_niv<=" + (cboNiv.getSelectedIndex()+1);
                //Estado de Resultados.
                strSQL+=" AND a1.tx_niv1 NOT IN ('1', '2', '3')";//CUENTAS DE RESULTADO
                strSQL+=" GROUP BY ";
                if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                    strSQL+=" a1.ne_niv, a1.tx_codCta, a1.tx_desLar";
                else
                    strSQL+=" a1.co_cta, a1.ne_niv, a1.tx_codCta, a1.tx_desLar,  a2.co_cta";
                strSQL+=" ORDER BY a1.tx_codCta";


                System.out.println("SQL:  " + strSQL);
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                while (rst.next()){
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_LIN,"");

                    if (objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                        vecReg.add(INT_TBL_DAT_COD_SIS,null);
                    else
                        vecReg.add(INT_TBL_DAT_COD_SIS,rst.getString("co_cta"));
                    intNiv=rst.getInt("ne_niv");
                    vecReg.add(INT_TBL_DAT_NIV_CTA,"" + intNiv);
                    vecReg.add(INT_TBL_DAT_NUM_CTA,rst.getString("tx_codCta"));
                    //Generar la tabulacián para el campo "tx_desLar".
                    strAux="";
                    for (j=1; j<intNiv; j++)
                        strAux+="        ";
                    vecReg.add(INT_TBL_DAT_NOM_CTA,strAux + rst.getString("tx_desLar"));
                    vecReg.add(INT_TBL_DAT_CHK_CON,     null);
                    vecReg.add(INT_TBL_DAT_CHK_CON_AUX, null);

                    if(objParSis.getCodigoEmpresa()!=objParSis.getCodigoEmpresaGrupo()){
                        strCodCtaCfg=rst.getObject("co_ctaCfg")==null?"":rst.getString("co_ctaCfg");
                        if(!strCodCtaCfg.equals("")){
                            vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK_CON);
                            vecReg.setElementAt(new Boolean(true), INT_TBL_DAT_CHK_CON_AUX);
                        }
                    }
                    vecDat.add(vecReg);
                }

                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");
                butCon.setText("Consultar");
                pgrSis.setIndeterminate(false);

                rst.close();
                stm.close();
                rst=null;
                stm=null;

                if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo())
                    marcarCuentasConfiguradas();


                blnMarTodChkTblEmp=true;
                con.close();
                con=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funcián muestra un mensaje informativo al usuario. Se podráa utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Esta funcián muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si y No. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    /**
     * Esta funcián muestra un mensaje de error al usuario. Se podráa utilizar
     * para mostrar al usuario un mensaje que indique que los datos no se grabaron
     * y que debe comunicar de este particular al administrador del sistema.
     */
    private void mostrarMsgErr(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podráa presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaráa informado en todo
     * momento de lo que ocurre. Si se desea hacer ásto es necesario utilizar ásta clase
     * ya que si no sálo se apreciaráa los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarDetReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sálo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }
    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD_SIS:
                    strMsg="Código del Sistema";
                    break;
                case INT_TBL_DAT_NIV_CTA:
                    strMsg="Nivel de la cuenta";
                    break;
                case INT_TBL_DAT_NUM_CTA:
                    strMsg="Código de la cuenta";
                    break;
                case INT_TBL_DAT_NOM_CTA:
                    strMsg="Nombre de la cuenta";
                    break;
                case INT_TBL_DAT_CHK_CON:
                    strMsg="Configurar la cuenta o Quitar la cuenta";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
     
    private boolean cargarAnioCreados(){
        boolean blnRes=true;
        int intUltAni=-1;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT co_emp, ne_ani";
                strSQL+=" FROM tbm_anicresis";
                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" ORDER BY ne_ani";
                
                rst=stm.executeQuery(strSQL);
                while(rst.next()){
                    intUltAni++;
                }                
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                con.close();
                con=null;
            }
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite actualizar en tbm_cabDia los campos para consignación bancaria.
     * @return true: Si se pudo modificar.
     * <BR>false: En el caso contrario.
     */
    private boolean guardarDatos(){
        boolean blnRes=true;
        String strLin="";
        String strUpd="";
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    strLin=objTblMod.getValueAt(i, INT_TBL_DAT_LIN)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_LIN).toString();
                    if(strLin.equals("M")){
                        if( (objTblMod.isChecked(i, INT_TBL_DAT_CHK_CON))  &&  (!objTblMod.isChecked(i, INT_TBL_DAT_CHK_CON_AUX))  ){
                            if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()){
                                strSQL="";
                                strSQL+="INSERT INTO tbr_ctaPrg(co_emp, co_cta, co_mnu, st_reg)";
                                strSQL+=" (";
                                strSQL+="       SELECT a1.co_emp, a1.co_cta, " + objParSis.getCodigoMenu() + ", 'A'";//, a1.tx_codCta, a1.tx_desLar
                                strSQL+="       FROM tbm_plaCta AS a1";
                                strSQL+="       WHERE a1.co_emp<>" + objParSis.getCodigoEmpresa() + "";
                                strSQL+="       AND a1.tx_codCta='" + objTblMod.getValueAt(i, INT_TBL_DAT_NUM_CTA) + "'";
                                strSQL+="       AND a1.tx_desLar=trim('" + objTblMod.getValueAt(i, INT_TBL_DAT_NOM_CTA) + "')";
                                strSQL+="       ORDER BY a1.co_emp";
                                strSQL+=" );";
                                strUpd+=strSQL;
                                System.out.println("D: " + strSQL);
                            }
                            else{
                                strSQL="";
                                strSQL+="INSERT INTO tbr_ctaPrg(co_emp, co_cta, co_mnu, st_reg)";
                                strSQL+=" VALUES(";
                                strSQL+="  " + objParSis.getCodigoEmpresa() + "";
                                strSQL+=" ," + objTblMod.getValueAt(i, INT_TBL_DAT_COD_SIS) + "";
                                strSQL+=" ," + objParSis.getCodigoMenu() + "";
                                strSQL+=" ,'A'";
                                strSQL+=" );";
                                strUpd+=strSQL;
                            }
                        }
                        else if( (!objTblMod.isChecked(i, INT_TBL_DAT_CHK_CON))  &&  (objTblMod.isChecked(i, INT_TBL_DAT_CHK_CON_AUX))  ){
                            if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()){
                                strSQL="";
                                strSQL+="UPDATE tbr_ctaPrg";//(co_emp, co_cta, co_mnu)
                                strSQL+=" SET st_reg='E' FROM";
                                strSQL+="       (";
                                strSQL+="           SELECT a1.co_emp, a1.co_cta, " + objParSis.getCodigoMenu() + " AS co_mnu";//, a1.tx_codCta, a1.tx_desLar
                                strSQL+="           FROM tbm_plaCta AS a1";
                                strSQL+="           WHERE a1.co_emp<>" + objParSis.getCodigoEmpresa() + "";
                                strSQL+="           AND a1.tx_codCta='" + objTblMod.getValueAt(i, INT_TBL_DAT_NUM_CTA) + "'";
                                strSQL+="           AND a1.tx_desLar=trim('" + objTblMod.getValueAt(i, INT_TBL_DAT_NOM_CTA) + "')";
                                strSQL+="           ORDER BY a1.co_emp";
                                strSQL+="       ) AS x";
                                strSQL+=" WHERE tbr_ctaPrg.co_emp=x.co_emp";
                                strSQL+="   AND tbr_ctaPrg.co_cta=x.co_cta";
                                strSQL+="   AND tbr_ctaPrg.co_mnu=x.co_mnu";
                                strSQL+=" ;";
                                strSQL+=" DELETE FROM tbr_ctaPrg";
                                strSQL+=" WHERE st_reg='E'";
                                strSQL+=" AND co_mnu=" + objParSis.getCodigoMenu() + "";
                                strSQL+=" ;";
                                strUpd+=strSQL;
                            }
                            else{
                                strSQL="";
                                strSQL+="DELETE FROM tbr_ctaPrg";//(co_emp, co_cta, co_mnu)
                                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                                strSQL+="   AND co_cta=" + objTblMod.getValueAt(i, INT_TBL_DAT_COD_SIS) + "";
                                strSQL+="   AND co_mnu=" + objParSis.getCodigoMenu() + "";
                                strSQL+=" ;";
                                strUpd+=strSQL;
                            }
                        }
                        
                    }

                }
                System.out.println("strUpd: " + strUpd);
                stm.executeUpdate(strUpd);
                stm.close();
                stm=null;
                con.close();
                con=null;
            }

        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }



    /**
     * Esta función se ejecuta cuando se hace el "MouseClicked" en la cabecera del JTable.
     * Se utiliza ésta función especificamente para marcar todas las casillas de verificación
     * de la columna que indica la bodega seleccionada en el el JTable de bodegas.
     */
    private void tblDatMouseClicked(java.awt.event.MouseEvent evt)
    {
        int i, intNumFil;
        try
        {
            intNumFil=objTblMod.getRowCountTrue();
            //Marcar la casilla sólo si se da 1 click con el botón izquierdo.
            if (evt.getButton()==evt.BUTTON1 && evt.getClickCount()==1 && tblDat.columnAtPoint(evt.getPoint())==INT_TBL_DAT_CHK_CON)
            {
                if (blnMarTodChkTblEmp)
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        objTblMod.setChecked(true, i, INT_TBL_DAT_CHK_CON);
                    }
                    blnMarTodChkTblEmp=false;
                }
                else
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        objTblMod.setChecked(false, i, INT_TBL_DAT_CHK_CON);
                    }
                    blnMarTodChkTblEmp=true;
                }
            }
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }



    private boolean marcarCuentasConfiguradas(){
        boolean blnRes=true;
        String strNumCtaTbl="", strNumCtaArl="", strLin="";
        String strNomCtaTbl="", strNomCtaArl="";
        String strSQLTmp="";
        try{
            if(con!=null){
                System.out.println("Z");
                stm=con.createStatement();
                strSQLTmp="";
                strSQLTmp+="SELECT a1.tx_codCta, a1.tx_desLar AS tx_nomCta";
                strSQLTmp+=" FROM tbm_plaCta AS a1 INNER JOIN tbr_ctaPrg AS a2";
                strSQLTmp+=" ON a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta";
                strSQLTmp+=" WHERE a1.co_emp<>" + objParSis.getCodigoEmpresaGrupo() + "";
                strSQLTmp+=" AND a2.co_mnu=" + objParSis.getCodigoMenu() + "";
                strSQLTmp+=" GROUP BY a1.tx_codCta, a1.tx_desLar";
                strSQLTmp+=" ORDER BY a1.tx_codCta";
                rst=stm.executeQuery(strSQLTmp);
                arlDat.clear();
                while(rst.next()){
                    arlReg=new ArrayList();
                    arlReg.add(INT_ARL_NUM_CTA, rst.getString("tx_codCta"));
                    arlReg.add(INT_ARL_NOM_CTA, rst.getString("tx_nomCta"));
                    arlReg.add(INT_ARL_EST_PRO, "");
                    arlDat.add(arlReg);
                }
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    strNumCtaTbl=objTblMod.getValueAt(i, INT_TBL_DAT_NUM_CTA)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_NUM_CTA).toString();
                    strNomCtaTbl=objTblMod.getValueAt(i, INT_TBL_DAT_NOM_CTA)==null?"":objTblMod.getValueAt(i, INT_TBL_DAT_NOM_CTA).toString();
                    for(int j=0; j<arlDat.size(); j++){
                        strNumCtaArl=objUti.getObjectValueAt(arlDat, j, INT_ARL_NUM_CTA)==null?"":objUti.getStringValueAt(arlDat, j, INT_ARL_NUM_CTA);
                        strNomCtaArl=objUti.getObjectValueAt(arlDat, j, INT_ARL_NOM_CTA)==null?"":objUti.getStringValueAt(arlDat, j, INT_ARL_NOM_CTA);
                        strLin=objUti.getObjectValueAt(arlDat, j, INT_ARL_EST_PRO)==null?"":objUti.getStringValueAt(arlDat, j, INT_ARL_EST_PRO);
                        if(strLin.equals("")){
                            if( (strNumCtaTbl.trim().equals(strNumCtaArl.trim())) && (strNomCtaTbl.trim().equals(strNomCtaArl.trim())) ){
                                objTblMod.setChecked(true, i, INT_TBL_DAT_CHK_CON);
                                objTblMod.setChecked(true, i, INT_TBL_DAT_CHK_CON_AUX);
                                objUti.setStringValueAt(arlDat, j, INT_ARL_EST_PRO, "S");
                            }
                        }
                    }
                }
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    
}