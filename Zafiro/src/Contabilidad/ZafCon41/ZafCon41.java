/*
 * ZafMae40.java
 *
 * Created on July 3, 2007, 4:21 PM
 */

package Contabilidad.ZafCon41;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import javax.swing.SpinnerNumberModel;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
//import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafVenCon.ZafVenCon;
import java.util.ArrayList;
import javax.swing.JScrollBar;
import Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt;
import Librerias.ZafPerUsr.ZafPerUsr;
/**
 *
 * @author  ilino
 */
public class ZafCon41 extends javax.swing.JInternalFrame {
    
    final int intJspValMin=2006;
    final int intJspValMax=9999;
    final int intJspValIni=2007;
    final int intJspValInc=1;
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod, objTblModTot;
    private ZafTblPopMnu objTblPopMnu;
//    private ZafTblBus objTblBus;
    javax.swing.JInternalFrame jfrThis;
    private MiToolBar objTooBar;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    ZafColNumerada objColNum;
    Vector vecCab, vecReg, vecDat, vecAux;
    private ZafTblCelRenLbl objTblCelRenLbl;
    private ZafTblModLis objTblModLis;
    private ZafTblEdi objTblEdi;
    private ZafVenCon vcoTipDoc;
    private String strCodCta, strNumCta, strNomCta, strAux, strSQL;
    private java.util.Date datFecAux;
    private boolean blnHayCam;
    private ZafDocLis objDocLis;
    
    final int INT_TBL_LIN=0;
    final int INT_TBL_DES=1;
    final int INT_TBL_ENE=2;
    final int INT_TBL_FEB=3;
    final int INT_TBL_MAR=4;
    final int INT_TBL_ABR=5;
    final int INT_TBL_MAY=6;
    final int INT_TBL_JUN=7;
    final int INT_TBL_JUL=8;
    final int INT_TBL_AGO=9;
    final int INT_TBL_SEP=10;
    final int INT_TBL_OCT=11;
    final int INT_TBL_NOV=12;
    final int INT_TBL_DIC=13;
    final int INT_TBL_TOT=14;
    
    private JScrollBar barTblDat, barTblTot;
    
    private ZafTblCelEdiTxt objTblCelEdiTxtDes;
    private ZafTblCelEdiTxt objTblCelEdiTxtEne;
    private ZafTblCelEdiTxt objTblCelEdiTxtFeb;
    private ZafTblCelEdiTxt objTblCelEdiTxtMar;
    private ZafTblCelEdiTxt objTblCelEdiTxtAbr;
    private ZafTblCelEdiTxt objTblCelEdiTxtMay;
    private ZafTblCelEdiTxt objTblCelEdiTxtJun;
    private ZafTblCelEdiTxt objTblCelEdiTxtJul;
    private ZafTblCelEdiTxt objTblCelEdiTxtAgo;
    private ZafTblCelEdiTxt objTblCelEdiTxtSep;
    private ZafTblCelEdiTxt objTblCelEdiTxtOct;
    private ZafTblCelEdiTxt objTblCelEdiTxtNov;
    private ZafTblCelEdiTxt objTblCelEdiTxtDic;
    
    private int intFilSel, intColSel;
    
    ZafPerUsr objPerUsr;
    private boolean blnPerUsrMod;
    private boolean blnModFrm;
    
    
    /** Creates new form ZafMae40 */
    public ZafCon41(ZafParSis obj) {
        try{
            initComponents();
            //Inicializar objetos.
            this.objParSis=obj;
            jfrThis=this;
            objParSis=(ZafParSis)obj.clone();
            jspAni.setModel(new SpinnerNumberModel(intJspValIni, intJspValMin, intJspValMax, intJspValInc));

//            if (!configurarFrm())
//                exitForm();
        }
        catch (CloneNotSupportedException e){
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        panFrm = new javax.swing.JPanel();
        tabFrm = new javax.swing.JTabbedPane();
        panTab = new javax.swing.JPanel();
        panCab = new javax.swing.JPanel();
        panTit = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        panFilCta = new javax.swing.JPanel();
        lblGrp = new javax.swing.JLabel();
        lblAni = new javax.swing.JLabel();
        jspAni = new javax.swing.JSpinner();
        txtCodCta = new javax.swing.JTextField();
        txtNumCta = new javax.swing.JTextField();
        txtNomCta = new javax.swing.JTextField();
        butCta = new javax.swing.JButton();
        panTblDatTblTot = new javax.swing.JPanel();
        panTblDat = new javax.swing.JPanel();
        spnTblDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panTblTot = new javax.swing.JPanel();
        spnTblTot = new javax.swing.JScrollPane();
        tblTot = new javax.swing.JTable();
        panTooBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        panTab.setLayout(new java.awt.BorderLayout());

        panCab.setLayout(new java.awt.BorderLayout());

        panCab.setPreferredSize(new java.awt.Dimension(10, 50));
        panTit.setLayout(new java.awt.BorderLayout());

        panTit.setPreferredSize(new java.awt.Dimension(0, 20));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("jLabel2");
        panTit.add(lblTit, java.awt.BorderLayout.CENTER);

        panCab.add(panTit, java.awt.BorderLayout.NORTH);

        panFilCta.setLayout(null);

        lblGrp.setText("Cuenta:");
        panFilCta.add(lblGrp);
        lblGrp.setBounds(6, 8, 50, 15);

        lblAni.setText("A\u00f1o:");
        panFilCta.add(lblAni);
        lblAni.setBounds(500, 8, 40, 15);

        panFilCta.add(jspAni);
        jspAni.setBounds(550, 6, 80, 20);

        panFilCta.add(txtCodCta);
        txtCodCta.setBounds(48, 6, 32, 20);

        txtNumCta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumCtaActionPerformed(evt);
            }
        });
        txtNumCta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNumCtaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNumCtaFocusLost(evt);
            }
        });

        panFilCta.add(txtNumCta);
        txtNumCta.setBounds(80, 6, 80, 20);

        txtNomCta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomCtaActionPerformed(evt);
            }
        });
        txtNomCta.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomCtaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomCtaFocusLost(evt);
            }
        });

        panFilCta.add(txtNomCta);
        txtNomCta.setBounds(160, 6, 240, 20);

        butCta.setText("...");
        butCta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCtaActionPerformed(evt);
            }
        });

        panFilCta.add(butCta);
        butCta.setBounds(400, 6, 20, 20);

        panCab.add(panFilCta, java.awt.BorderLayout.CENTER);

        panTab.add(panCab, java.awt.BorderLayout.NORTH);

        panTblDatTblTot.setLayout(new java.awt.BorderLayout());

        panTblDat.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnTblDat.setViewportView(tblDat);

        panTblDat.add(spnTblDat, java.awt.BorderLayout.NORTH);

        panTblDatTblTot.add(panTblDat, java.awt.BorderLayout.CENTER);

        panTblTot.setLayout(new java.awt.BorderLayout());

        panTblTot.setPreferredSize(new java.awt.Dimension(10, 34));
        tblTot.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnTblTot.setViewportView(tblTot);

        panTblTot.add(spnTblTot, java.awt.BorderLayout.CENTER);

        panTblDatTblTot.add(panTblTot, java.awt.BorderLayout.SOUTH);

        panTab.add(panTblDatTblTot, java.awt.BorderLayout.CENTER);

        panTooBar.setLayout(new java.awt.BorderLayout());

        panTooBar.setPreferredSize(new java.awt.Dimension(10, 80));
        panTab.add(panTooBar, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("tab1", panTab);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        configurarFrm();
        agregarDocLis();
    }//GEN-LAST:event_formInternalFrameOpened

    private void butCtaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCtaActionPerformed
        // TODO add your handling code here:
        mostrarVenConCta(0);
    }//GEN-LAST:event_butCtaActionPerformed

    private void txtNomCtaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCtaFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtNomCta.getText().equalsIgnoreCase(strNomCta))
        {
            if (txtNomCta.getText().equals(""))
            {
                txtCodCta.setText("");
                txtNumCta.setText("");
                txtCodCta.setText("");
            }
            else
            {
                mostrarVenConCta(2);
            }
        }
        else
            txtNomCta.setText(strNomCta);        
    }//GEN-LAST:event_txtNomCtaFocusLost

    private void txtNomCtaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCtaFocusGained
        // TODO add your handling code here:
        strNomCta=txtNomCta.getText();
        txtNomCta.selectAll();
    }//GEN-LAST:event_txtNomCtaFocusGained

    private void txtNomCtaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomCtaActionPerformed
        // TODO add your handling code here:
        txtNomCta.transferFocus();
    }//GEN-LAST:event_txtNomCtaActionPerformed

    private void txtNumCtaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumCtaFocusLost
        String strCodCtaOri=txtNumCta.getText()==null?"":txtNumCta.getText();
        String strCodCtaDes="";
        if( ! (strCodCtaOri.toString().equals(""))  ){
            //obtengo la longitud de mi cadena
            int intLonCodCta=strCodCtaOri.length();
            int intLonCodCtaMen=intLonCodCta-1;

            char chrCtaOri=strCodCtaOri.charAt(1);
            if(chrCtaOri!='.'){//nuevo if               
                for (int i=0; i < strCodCtaOri.length(); i++) {
                                if(i==0){
                                    strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                                    strCodCtaDes=strCodCtaDes+".";
                                }
                                else{
                                    if(((i % 2)==0)&&(i!=intLonCodCtaMen)){
                                        strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                                        strCodCtaDes=strCodCtaDes+".";
                                    }

                                    if(((i % 2)==0)&&(i==intLonCodCtaMen)){
                                        strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                                    }
                                    else{
                                        if((i % 2)!= 0){
                                            strCodCtaDes=strCodCtaDes+strCodCtaOri.charAt(i);
                                        }
                                    }                    
                                }
                }
            txtNumCta.setText(strCodCtaDes);        
            }
            //Validar el contenido de la celda sólo si ha cambiado.
            if (!txtNumCta.getText().equalsIgnoreCase(strNumCta))
            {
                if (txtNumCta.getText().equals(""))
                {
                    txtCodCta.setText("");
                    txtNomCta.setText("");
                    txtCodCta.setText("");
                }
                else
                {
                    mostrarVenConCta(1);
                }
            }
            else
                txtNumCta.setText(strNumCta);            
        }
    }//GEN-LAST:event_txtNumCtaFocusLost

    private void txtNumCtaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumCtaFocusGained
        // TODO add your handling code here:
        strNumCta=txtNumCta.getText();
        txtNumCta.selectAll();
    }//GEN-LAST:event_txtNumCtaFocusGained

    private void txtNumCtaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumCtaActionPerformed
        // TODO add your handling code here:
        txtNumCta.transferFocus();
    }//GEN-LAST:event_txtNumCtaActionPerformed

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        // TODO add your handling code here:
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION){
            dispose();
        }
    }//GEN-LAST:event_exitForm
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCta;
    private javax.swing.JSpinner jspAni;
    private javax.swing.JLabel lblAni;
    private javax.swing.JLabel lblGrp;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panFilCta;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panTab;
    private javax.swing.JPanel panTblDat;
    private javax.swing.JPanel panTblDatTblTot;
    private javax.swing.JPanel panTblTot;
    private javax.swing.JPanel panTit;
    private javax.swing.JPanel panTooBar;
    private javax.swing.JScrollPane spnTblDat;
    private javax.swing.JScrollPane spnTblTot;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblTot;
    private javax.swing.JTextField txtCodCta;
    private javax.swing.JTextField txtNomCta;
    private javax.swing.JTextField txtNumCta;
    // End of variables declaration//GEN-END:variables

    private void exitForm(){
        dispose();
    }
    
    
    private boolean configurarFrm(){
        boolean blnRes=true;
        lblTit.setText(objParSis.getNombreMenu() + "v0.2b1");
        txtCodCta.setBackground(objParSis.getColorCamposObligatorios());
        txtNumCta.setBackground(objParSis.getColorCamposObligatorios());
        txtNomCta.setBackground(objParSis.getColorCamposObligatorios());
        this.setTitle(objParSis.getNombreMenu());
        objUti=new ZafUtil();
//        objTblBus= new ZafTblBus(tblDat);
        objTooBar=new MiToolBar(this);
        panTooBar.add(objTooBar);
        txtCodCta.setVisible(false);
        
        ZafPerUsr objPerUsr = new ZafPerUsr(objParSis);
        if(objPerUsr.isModificarEnabled())
            blnPerUsrMod=true;
        else
            blnPerUsrMod=false;
        
        objDocLis=new ZafDocLis();
        
        
//        if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()){
//            objTooBar.setVisibleInsertar(false);
////            objTooBar.setVisibleModificar(false);
//        }
//        else{
            objTooBar.setVisibleInsertar(true);
            objTooBar.setVisibleModificar(true);
            objTooBar.setVisibleConsultar(true);
            objTooBar.setVisibleCancelar(true);
            objTooBar.setVisibleAceptar(true);
//        }
        

        
        
        
        
        vecCab=new Vector(5);
        vecDat=new Vector();
        vecCab.clear();
        
        vecCab.add(INT_TBL_LIN, "");
        vecCab.add(INT_TBL_DES, "DESCRIPCIÓN");
        vecCab.add(INT_TBL_ENE, "ENERO");
        vecCab.add(INT_TBL_FEB, "FEBRERO");
        vecCab.add(INT_TBL_MAR, "MARZO");
        vecCab.add(INT_TBL_ABR, "ABRIL");
        vecCab.add(INT_TBL_MAY, "MAYO");
        vecCab.add(INT_TBL_JUN, "JUNIO");
        vecCab.add(INT_TBL_JUL, "JULIO");
        vecCab.add(INT_TBL_AGO, "AGOSTO");
        vecCab.add(INT_TBL_SEP, "SEPTIEMBRE");
        vecCab.add(INT_TBL_OCT, "OCTUBRE");
        vecCab.add(INT_TBL_NOV, "NOVIEMBRE");
        vecCab.add(INT_TBL_DIC, "DICIEMBRE");
        vecCab.add(INT_TBL_TOT, "TOTAL");
        
        objTblMod=new ZafTblMod();
        objTblMod.setHeader(vecCab);
                
        //Configurar ZafTblMod: Establecer el tipo de dato de las columnas.
        objTblMod.setColumnDataType(INT_TBL_ENE, objTblMod.INT_COL_DBL, new Integer(0), null);
        objTblMod.setColumnDataType(INT_TBL_FEB, objTblMod.INT_COL_DBL, new Integer(0), null);
        objTblMod.setColumnDataType(INT_TBL_MAR, objTblMod.INT_COL_DBL, new Integer(0), null);
        objTblMod.setColumnDataType(INT_TBL_ABR, objTblMod.INT_COL_DBL, new Integer(0), null);
        objTblMod.setColumnDataType(INT_TBL_MAY, objTblMod.INT_COL_DBL, new Integer(0), null);
        objTblMod.setColumnDataType(INT_TBL_JUN, objTblMod.INT_COL_DBL, new Integer(0), null);
        objTblMod.setColumnDataType(INT_TBL_JUL, objTblMod.INT_COL_DBL, new Integer(0), null);
        objTblMod.setColumnDataType(INT_TBL_AGO, objTblMod.INT_COL_DBL, new Integer(0), null);
        objTblMod.setColumnDataType(INT_TBL_SEP, objTblMod.INT_COL_DBL, new Integer(0), null);
        objTblMod.setColumnDataType(INT_TBL_OCT, objTblMod.INT_COL_DBL, new Integer(0), null);
        objTblMod.setColumnDataType(INT_TBL_NOV, objTblMod.INT_COL_DBL, new Integer(0), null);
        objTblMod.setColumnDataType(INT_TBL_DIC, objTblMod.INT_COL_DBL, new Integer(0), null);
        objTblMod.setColumnDataType(INT_TBL_TOT, objTblMod.INT_COL_DBL, new Integer(0), null);
        
        java.util.ArrayList arlAux=new java.util.ArrayList();
        arlAux.add("" + INT_TBL_DES);
        objTblMod.setColumnasObligatorias(arlAux);
        arlAux=null;
        
            //Configurar ZafTblMod: Establecer el color de fondo de las filas incompletas.
        objTblMod.setBackgroundIncompleteRows(objParSis.getColorCamposObligatorios());
        tblDat.setModel(objTblMod);        
                
        //Configurar JTable: Establecer tipo de selección.
        tblDat.setRowSelectionAllowed(true);
        tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        //Configurar JTable: Establecer el menú de contexto.
        objTblPopMnu=new ZafTblPopMnu(tblDat);
        objColNum=new ZafColNumerada(tblDat,INT_TBL_LIN);
        tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
        //Tamaño de las celdas
        tcmAux.getColumn(INT_TBL_LIN).setPreferredWidth(30);
        tcmAux.getColumn(INT_TBL_DES).setPreferredWidth(100);
        tcmAux.getColumn(INT_TBL_ENE).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_FEB).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_MAR).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_ABR).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_MAY).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_JUN).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_JUL).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_AGO).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_SEP).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_OCT).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_NOV).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_DIC).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_TOT).setPreferredWidth(90);
        
        
        //Configurar JTable: Establecer columnas editables.
        vecAux=new Vector();
        vecAux.add("" + INT_TBL_DES);
        vecAux.add("" + INT_TBL_ENE);
        vecAux.add("" + INT_TBL_FEB);
        vecAux.add("" + INT_TBL_MAR);
        vecAux.add("" + INT_TBL_ABR);
        vecAux.add("" + INT_TBL_MAY);
        vecAux.add("" + INT_TBL_JUN);
        vecAux.add("" + INT_TBL_JUL);
        vecAux.add("" + INT_TBL_AGO);
        vecAux.add("" + INT_TBL_SEP);
        vecAux.add("" + INT_TBL_OCT);
        vecAux.add("" + INT_TBL_NOV);
        vecAux.add("" + INT_TBL_DIC);
        //vecAux.add("" + INT_TBL_TOT);
        objTblMod.setColumnasEditables(vecAux);
        vecAux=null;
        
        objTblEdi=new ZafTblEdi(tblDat);
        
        objTblCelRenLbl=new ZafTblCelRenLbl();
        objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_GEN);
        objTblCelRenLbl.setBackground(objParSis.getColorCamposObligatorios());
        tcmAux.getColumn(INT_TBL_DES).setCellRenderer(objTblCelRenLbl);
        objTblCelRenLbl=null;        
        
        objTblCelRenLbl=new ZafTblCelRenLbl();
        objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
        objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
        objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
        tcmAux.getColumn(INT_TBL_ENE).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_FEB).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_MAR).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_ABR).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_MAY).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_JUN).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_JUL).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_AGO).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_SEP).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_OCT).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_NOV).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_DIC).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_TOT).setCellRenderer(objTblCelRenLbl);
        objTblCelRenLbl=null;
        
        objTblModLis=new ZafTblModLis();
        objTblMod.addTableModelListener(objTblModLis);
        tcmAux=null;
        
        tblDat.getTableHeader().setReorderingAllowed(false);
        
//PARA LA TABLA DE TOTALES                                 
        objTblModTot=new ZafTblMod();
        objTblModTot.setHeader(vecCab);                        
        tblTot.setModel(objTblModTot);
        //Configurar JTable: Establecer tipo de selección.
        tblTot.setRowSelectionAllowed(true);
        tblTot.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        objColNum=new ZafColNumerada(tblTot,INT_TBL_LIN);
        objTblPopMnu=new ZafTblPopMnu(tblTot);
        tblTot.setAutoResizeMode(tblDat.getAutoResizeMode());
        tcmAux=tblTot.getColumnModel();        
        //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
        tblTot.setAutoResizeMode(tblDat.getAutoResizeMode());
        tcmAux=tblTot.getColumnModel();

        tcmAux.getColumn(INT_TBL_LIN).setPreferredWidth(30);
        tcmAux.getColumn(INT_TBL_DES).setPreferredWidth(100);
        tcmAux.getColumn(INT_TBL_ENE).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_FEB).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_MAR).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_ABR).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_MAY).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_JUN).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_JUL).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_AGO).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_SEP).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_OCT).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_NOV).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_DIC).setPreferredWidth(80);
        tcmAux.getColumn(INT_TBL_TOT).setPreferredWidth(90);

        //Configurar JTable: Renderizar celdas.
        objTblCelRenLbl=new ZafTblCelRenLbl();
        objTblCelRenLbl.setBackground(objParSis.getColorCamposObligatorios());
        tcmAux.getColumn(INT_TBL_DES).setCellRenderer(objTblCelRenLbl);
        objTblCelRenLbl=null;
        
        objTblCelRenLbl=new ZafTblCelRenLbl();
        objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
        objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
        objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
        tcmAux.getColumn(INT_TBL_ENE).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_FEB).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_MAR).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_ABR).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_MAY).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_JUN).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_JUL).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_AGO).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_SEP).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_OCT).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_NOV).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_DIC).setCellRenderer(objTblCelRenLbl);
        tcmAux.getColumn(INT_TBL_TOT).setCellRenderer(objTblCelRenLbl);
        objTblCelRenLbl=null;

        //Configurar JTable: Igualar el ancho de las columnas del JTable de totales con el JTable de totales.
        for (int j=0; j<tblDat.getColumnCount(); j++)
        {
            tcmAux.getColumn(j).setWidth(tblDat.getColumnModel().getColumn(j).getWidth());
            tcmAux.getColumn(j).setMaxWidth(tblDat.getColumnModel().getColumn(j).getMaxWidth());
            tcmAux.getColumn(j).setMinWidth(tblDat.getColumnModel().getColumn(j).getMinWidth());
            tcmAux.getColumn(j).setPreferredWidth(tblDat.getColumnModel().getColumn(j).getPreferredWidth());
            tcmAux.getColumn(j).setResizable(tblDat.getColumnModel().getColumn(j).getResizable());
        }
        tcmAux=null;
        objTblModTot.insertRow();
        tblTot.getTableHeader().setReorderingAllowed(false);
        tblTot.setValueAt("TOTAL ", 0, INT_TBL_DES);
//////FIN TOTALES///         
        
          
        //Evitar que aparezca la barra de desplazamiento horizontal y vertical en el JTable de totales.
        spnTblDat.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        //spnTblDat.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);            
        spnTblTot.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

        tblTot.setTableHeader(null);

        //Adicionar el listener que controla el redimensionamiento de las columnas.
        ZafTblColModLis objTblColModLis=new ZafTblColModLis();
        tblDat.getColumnModel().addColumnModelListener(objTblColModLis);

        //Adicionar el listener que controla el desplazamiento del JTable de datos y totales.
        barTblDat=spnTblDat.getHorizontalScrollBar();
        barTblTot=spnTblTot.getHorizontalScrollBar();

        //PARA DESPLAZAMIENTOS DE CELDAS
        barTblDat.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {                    
                barTblTot.setValue(evt.getValue());
            }
        });
        barTblTot.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                barTblDat.setValue(evt.getValue());
            }
        });
        tcmAux=null;
        
//        javax.swing.ListSelectionModel lsm=tblDat.getSelectionModel();
//        lsm.addListSelectionListener(new ZafLisSelLis());
        
        objTblCelEdiTxtDes=new ZafTblCelEdiTxt(tblDat);
        tblDat.getColumnModel().getColumn(INT_TBL_DES).setCellEditor(objTblCelEdiTxtDes);
        
        objTblCelEdiTxtEne=new ZafTblCelEdiTxt(tblDat);
        tblDat.getColumnModel().getColumn(INT_TBL_ENE).setCellEditor(objTblCelEdiTxtEne);            
        objTblCelEdiTxtEne.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                intFilSel=tblDat.getSelectedRow();
                intColSel=tblDat.getSelectedColumn();
            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isDataModelChanged()){
                    calculaTblTot(intColSel);
                    calculaTotales(intFilSel);
                    calculaColumnaTotales();
                }
            }
            });

        objTblCelEdiTxtFeb=new ZafTblCelEdiTxt(tblDat);
        tblDat.getColumnModel().getColumn(INT_TBL_FEB).setCellEditor(objTblCelEdiTxtFeb);            
        objTblCelEdiTxtFeb.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                intFilSel=tblDat.getSelectedRow();
                intColSel=tblDat.getSelectedColumn();
            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isDataModelChanged()){
                    calculaTblTot(intColSel);
                    calculaTotales(intFilSel);
                    calculaColumnaTotales();
                }
            }
            });
            
        objTblCelEdiTxtMar=new ZafTblCelEdiTxt(tblDat);
        tblDat.getColumnModel().getColumn(INT_TBL_MAR).setCellEditor(objTblCelEdiTxtMar);
        objTblCelEdiTxtMar.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                intFilSel=tblDat.getSelectedRow();
                intColSel=tblDat.getSelectedColumn();
            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isDataModelChanged()){
                    calculaTblTot(intColSel);
                    calculaTotales(intFilSel);
                    calculaColumnaTotales();
                }
            }
            });
            
        objTblCelEdiTxtAbr=new ZafTblCelEdiTxt(tblDat);
        tblDat.getColumnModel().getColumn(INT_TBL_ABR).setCellEditor(objTblCelEdiTxtAbr);
        objTblCelEdiTxtAbr.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                intFilSel=tblDat.getSelectedRow();
                intColSel=tblDat.getSelectedColumn();
            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isDataModelChanged()){
                    calculaTblTot(intColSel);
                    calculaTotales(intFilSel);
                    calculaColumnaTotales();
                }
            }
            });
            
        objTblCelEdiTxtMay=new ZafTblCelEdiTxt(tblDat);
        tblDat.getColumnModel().getColumn(INT_TBL_MAY).setCellEditor(objTblCelEdiTxtMay);
        objTblCelEdiTxtMay.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                intFilSel=tblDat.getSelectedRow();
                intColSel=tblDat.getSelectedColumn();
            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isDataModelChanged()){
                    calculaTblTot(intColSel);
                    calculaTotales(intFilSel);
                    calculaColumnaTotales();
                }
            }
            });
            
        objTblCelEdiTxtJun=new ZafTblCelEdiTxt(tblDat);
        tblDat.getColumnModel().getColumn(INT_TBL_JUN).setCellEditor(objTblCelEdiTxtJun);
        objTblCelEdiTxtJun.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                intFilSel=tblDat.getSelectedRow();
                intColSel=tblDat.getSelectedColumn();
            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isDataModelChanged()){
                    calculaTblTot(intColSel);
                    calculaTotales(intFilSel);
                    calculaColumnaTotales();
                }
            }
            });
            
        objTblCelEdiTxtJul=new ZafTblCelEdiTxt(tblDat);
        tblDat.getColumnModel().getColumn(INT_TBL_JUL).setCellEditor(objTblCelEdiTxtJul);
        objTblCelEdiTxtJul.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                intFilSel=tblDat.getSelectedRow();
                intColSel=tblDat.getSelectedColumn();
            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isDataModelChanged()){
                    calculaTblTot(intColSel);
                    calculaTotales(intFilSel);
                    calculaColumnaTotales();
                }
            }
            });
            
        objTblCelEdiTxtAgo=new ZafTblCelEdiTxt(tblDat);
        tblDat.getColumnModel().getColumn(INT_TBL_AGO).setCellEditor(objTblCelEdiTxtAgo);
        objTblCelEdiTxtAgo.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                intFilSel=tblDat.getSelectedRow();
                intColSel=tblDat.getSelectedColumn();
            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isDataModelChanged()){
                    calculaTblTot(intColSel);
                    calculaTotales(intFilSel);
                    calculaColumnaTotales();
                }
            }
            });
            
        objTblCelEdiTxtSep=new ZafTblCelEdiTxt(tblDat);
        tblDat.getColumnModel().getColumn(INT_TBL_SEP).setCellEditor(objTblCelEdiTxtSep);
        objTblCelEdiTxtSep.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                intFilSel=tblDat.getSelectedRow();
                intColSel=tblDat.getSelectedColumn();
            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isDataModelChanged()){
                    calculaTblTot(intColSel);
                    calculaTotales(intFilSel);
                    calculaColumnaTotales();
                }
            }
            });

        objTblCelEdiTxtOct=new ZafTblCelEdiTxt(tblDat);
        tblDat.getColumnModel().getColumn(INT_TBL_OCT).setCellEditor(objTblCelEdiTxtOct);
        objTblCelEdiTxtOct.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                intFilSel=tblDat.getSelectedRow();
                intColSel=tblDat.getSelectedColumn();
            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isDataModelChanged()){
                    calculaTblTot(intColSel);
                    calculaTotales(intFilSel);
                    calculaColumnaTotales();
                }
            }
            });
                        
        objTblCelEdiTxtNov=new ZafTblCelEdiTxt(tblDat);
        tblDat.getColumnModel().getColumn(INT_TBL_NOV).setCellEditor(objTblCelEdiTxtNov);
        objTblCelEdiTxtNov.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                intFilSel=tblDat.getSelectedRow();
                intColSel=tblDat.getSelectedColumn();
            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isDataModelChanged()){
                    calculaTblTot(intColSel);
                    calculaTotales(intFilSel);
                    calculaColumnaTotales();
                }
            }
            });
            
        objTblCelEdiTxtDic=new ZafTblCelEdiTxt(tblDat);
        tblDat.getColumnModel().getColumn(INT_TBL_DIC).setCellEditor(objTblCelEdiTxtDic);
        objTblCelEdiTxtDic.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                intFilSel=tblDat.getSelectedRow();
                intColSel=tblDat.getSelectedColumn();
            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                if(objTblMod.isDataModelChanged()){
                    calculaTblTot(intColSel);
                    calculaTotales(intFilSel);
                    calculaColumnaTotales();
                }
            }
            });
            
        configurarVenConCta();
        
        objTooBar.setVisibleEliminar(false);
        objTooBar.setVisibleAnular(false);
        objTooBar.setVisibleVistaPreliminar(false);
        objTooBar.setVisibleImprimir(false);
        
        return blnRes;
    }
    
    
    private void agregarDocLis(){
        txtCodCta.getDocument().addDocumentListener(objDocLis);
        txtNumCta.getDocument().addDocumentListener(objDocLis);
        txtNomCta.getDocument().addDocumentListener(objDocLis);
    }
        
    public class MiToolBar extends ZafToolBar{
        
        public MiToolBar(javax.swing.JInternalFrame jfrThis){
            super(jfrThis, objParSis);
        }        
        
        public boolean aceptar() {
            return true;
        }
        
        public boolean afterAceptar() {
            return true;
        }
        
        public boolean afterAnular() {
            return true;
        }
        
        public boolean afterCancelar() {
            return true;
        }
        
        public boolean afterConsultar() {
            return true;
        }
        
        public boolean afterEliminar() {
            return true;
        }
        
        public boolean afterImprimir() {
            return true;
        }
        
        public boolean afterInsertar() {
            //this.setEstado('w');
            return true;
        }
        
        public boolean afterModificar() {
            System.out.println("LlEGO A LA OPCION AFTER MODIFICAR");
            objTblMod.initRowsState();
            objTooBar.setEstado('w');
            return true;
        }
        
        public boolean afterVistaPreliminar() {
            return true;
        }
        
        public boolean anular() {
            return true;
        }
        
        public boolean beforeAceptar() {
            return true;
        }
        
        public boolean beforeAnular() {
            return true;
        }
        
        public boolean beforeCancelar() {
            return true;
        }
        
        public boolean beforeConsultar() {
            return true;
        }
        
        public boolean beforeEliminar() {
            return true;
        }
        
        public boolean beforeImprimir() {
            return true;
        }
        
        public boolean beforeInsertar() {
            if (!isCamVal())
                return false;
            return true;
        }
        
        public boolean beforeModificar() {
            if (!isCamValMod())
                return false;
            return true;
        }
        
        public boolean beforeVistaPreliminar() {
            return true;
        }
        
        public boolean cancelar() {
            return true;
        }
        
        public void clickAceptar() {
        }
        
        public void clickAnterior() {
            blnHayCam=objTblMod.isDataModelChanged();
            try{
                if (!rstCab.isFirst()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.previous();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.previous();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }            
        }
        
        public void clickAnular() {
        }
        
        public void clickCancelar() {
//            if(objParSis.getCodigoEmpresa()!=objParSis.getCodigoEmpresaGrupo())
                objTooBar.setVisibleInsertar(true);
            limpiaFrm();
        }
        
        public void clickConsultar() {
        }
        
        public void clickEliminar() {
        }
        
        public void clickFin() {
            blnHayCam=objTblMod.isDataModelChanged();
            try{
                if (!rstCab.isLast()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.last();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.last();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }            
        }
        
        public void clickImprimir() {
        }
        
        public void clickInicio() {
            blnHayCam=objTblMod.isDataModelChanged();
            try{
                if (!rstCab.isFirst()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.first();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.first();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }
        
        public void clickInsertar() {
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            limpiaFrm();
        }
        
        public void clickModificar() {
//            if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()){
//                objTblMod.setModoOperacion(objTblMod.INT_TBL_NO_EDI);
//                objTblMod.initRowsState();
//            }
//            else{
                objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
                objTblMod.initRowsState();
//            }
        }
        
        public void clickSiguiente() {
            blnHayCam=objTblMod.isDataModelChanged();
            try{
                if (!rstCab.isLast()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.next();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.next();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }            
        }
        
        public void clickVisPreliminar() {
        }
        
        public boolean consultar() {
            consultarReg();
            return true;
        }
        
        public boolean eliminar() {
            return true;
        }
        
        public boolean imprimir() {
            return true;
        }
        
        public boolean insertar() {
            if(  (objTooBar.getEstado()=='m') ||  (objTooBar.getEstado()=='x')  ){
                objTooBar.setVisibleInsertar(false);
                objTooBar.clickModificar();
                return false;                
            }
            else{
                if (!insertarReg())
                    return false;
            }
            return true;
        }
        
        public boolean modificar() {
//            if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()){
//                
//            }
//            else{
                inactivaCamposFrm();
                    if (!actualizarReg())
                        return false;
//            }
            return true;
        }
        
        public boolean vistaPreliminar() {
            return true;
        }
    }
    
    
    private class ZafTblModLis implements javax.swing.event.TableModelListener
    {
        public void tableChanged(javax.swing.event.TableModelEvent e)
        {
            switch (e.getType())
            {
                case javax.swing.event.TableModelEvent.INSERT:
                    break;
                case javax.swing.event.TableModelEvent.DELETE:
                    //calcularDif();
                    break;
                case javax.swing.event.TableModelEvent.UPDATE:
//                    if ( (tblDat.getEditingColumn()==INT_TBL_DAT_DEB) || (tblDat.getEditingColumn()==INT_TBL_DAT_HAB) )
//                        calcularDif();
                    break;
            }
        }
    }    
    
 
    private boolean configurarVenConCta()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cta");
            arlCam.add("a1.tx_codCta");
            arlCam.add("a1.tx_desLar");
            arlCam.add("a1.tx_tipcta");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Número Cuenta");
            arlAli.add("Nombre Cuenta");
            arlAli.add("Tipo Cuenta");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            arlAncCol.add("50");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_cta, a1.tx_codCta, a1.tx_desLar, a1.tx_tipcta";
            strSQL+=" FROM tbm_plaCta as a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" ORDER BY a1.tx_codCta";
            //Ocultar columnas.
//            int intColOcu[]=new int[1];
//            intColOcu[0]=3;
            vcoTipDoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de Cuentas", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoTipDoc.setConfiguracionColumna(2, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    private boolean mostrarVenConCta(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoTipDoc.setCampoBusqueda(1);
                    vcoTipDoc.show();
                    if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                    {
                        if(vcoTipDoc.getValueAt(4).toString().equals("D")){
                            txtCodCta.setText(vcoTipDoc.getValueAt(1));
                            txtNumCta.setText(vcoTipDoc.getValueAt(2));
                            txtNomCta.setText(vcoTipDoc.getValueAt(3));                            
                        }
                        else
                            mostrarMsgInf("<HTML>La cuenta seleccionada es de cabecera. <BR>No puede seleccionar cuentas de cabecera<BR>Seleccione una cuenta de detalle y vuelva a intentarlo</HTML>");
                    }
                    break;
                case 1: //Búsqueda directa por "Descripción corta".
                    if (vcoTipDoc.buscar("a1.tx_codCta", txtNumCta.getText()))
                    {
                        if(vcoTipDoc.getValueAt(4).toString().equals("D")){
                            txtCodCta.setText(vcoTipDoc.getValueAt(1));
                            txtNumCta.setText(vcoTipDoc.getValueAt(2));
                            txtNomCta.setText(vcoTipDoc.getValueAt(3));                            
                        }
                        else
                            mostrarMsgInf("<HTML>La cuenta seleccionada es de cabecera. <BR>No puede seleccionar cuentas de cabecera<BR>Seleccione una cuenta de detalle y vuelva a intentarlo</HTML>");
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(1);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            if(vcoTipDoc.getValueAt(4).toString().equals("D")){
                                txtCodCta.setText(vcoTipDoc.getValueAt(1));
                                txtNumCta.setText(vcoTipDoc.getValueAt(2));
                                txtNomCta.setText(vcoTipDoc.getValueAt(3));                                
                            }
                        else
                            mostrarMsgInf("<HTML>La cuenta seleccionada es de cabecera. <BR>No puede seleccionar cuentas de cabecera<BR>Seleccione una cuenta de detalle y vuelva a intentarlo</HTML>");
                        }
                        else
                        {
                            txtNumCta.setText(strNumCta);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoTipDoc.buscar("a1.tx_desLar", txtNomCta.getText()))
                    {
                        if(vcoTipDoc.getValueAt(4).toString().equals("D")){
                            txtCodCta.setText(vcoTipDoc.getValueAt(1));
                            txtNumCta.setText(vcoTipDoc.getValueAt(2));
                            txtNomCta.setText(vcoTipDoc.getValueAt(3));                            
                        }
                        else
                            mostrarMsgInf("<HTML>La cuenta seleccionada es de cabecera. <BR>No puede seleccionar cuentas de cabecera<BR>Seleccione una cuenta de detalle y vuelva a intentarlo</HTML>");
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(2);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            if(vcoTipDoc.getValueAt(4).toString().equals("D")){
                                txtCodCta.setText(vcoTipDoc.getValueAt(1));
                                txtNumCta.setText(vcoTipDoc.getValueAt(2));
                                txtNomCta.setText(vcoTipDoc.getValueAt(3));
                            }
                        else
                            mostrarMsgInf("<HTML>La cuenta seleccionada es de cabecera. <BR>No puede seleccionar cuentas de cabecera<BR>Seleccione una cuenta de detalle y vuelva a intentarlo</HTML>");
                        }
                        else
                        {
                            txtNomCta.setText(strNomCta);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    

    private boolean insertarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if(con!=null){
                if(insertaTbmCabEstFinPre()){
                    if(insertaTbmDetEstFinPre()){
                        if(insertaTbmDetCtaEstFinPre()){
                            con.commit();
                            blnRes=true;
                        }
                        else
                            con.rollback();
                    }
                    else
                        con.rollback();
                }
                else
                    con.rollback();
                con.close();
                con=null;
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }        
        return blnRes;
    }
    
    
    private boolean insertaTbmCabEstFinPre(){
        boolean blnRes=true;
        datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="INSERT INTO tbm_cabestfinpre(";
                strSQL+=" co_emp, ne_ani, tx_obs1, st_reg, st_cie, fe_ing, fe_ultmod, co_usring, co_usrmod)";
                strSQL+=" VALUES (";
                strSQL+="" + objParSis.getCodigoEmpresa() + ",";
                strSQL+="" + jspAni.getValue() + ",";
                strSQL+="" + null + ",";
                strSQL+="'A',";
                strSQL+="'O',";
                strSQL+="'" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "',";
                strSQL+="'" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "',";
                strSQL+="" + objParSis.getCodigoUsuario() + ",";
                strSQL+="" + objParSis.getCodigoUsuario() + "";
                strSQL+=")";
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
            datFecAux=null;
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    
    private boolean insertaTbmDetEstFinPre(){
        boolean blnRes=true;
        double dlbValMes=0.00;
        datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
        try{
            if(con!=null){
                stm=con.createStatement();
                for(int j=INT_TBL_ENE; j<=13; j++){
                    strSQL="";
                    strSQL+=" INSERT INTO tbm_detestfinpre(";
                    strSQL+=" co_emp, ne_ani, co_cta, ne_mes, nd_val, tx_obs1, fe_ultmod, co_usrmod)";
                    strSQL+=" VALUES (";
                    strSQL+="" + objParSis.getCodigoEmpresa() + ",";
                    strSQL+="" + jspAni.getValue() + ",";
                    strSQL+="" + txtCodCta.getText() + ",";
                    strSQL+="" + (j-1) + ",";
                    dlbValMes=Double.parseDouble("" + ( objTblModTot.getValueAt(0, j)==null?"0.00":objTblModTot.getValueAt(0, j) )  );
                    strSQL+="" + dlbValMes + ",";//falta colocar el valor del JTable
                    strSQL+=" null,";
                    strSQL+="'" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "',";
                    strSQL+="" + objParSis.getCodigoUsuario() + "";
                    strSQL+=")";
                    System.out.println("SQL DE DETESTFINPRE: " + strSQL);
                    stm.executeUpdate(strSQL);
                }                    
                datFecAux=null;
                stm.close();
                stm=null;
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    
    private boolean insertaTbmDetCtaEstFinPre(){
        boolean blnRes=true;
        double dlbValMes=0.00;
        int k=0;
        int intUltRegSQL=0;
        datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT MAX(a1.co_reg)";
                strSQL+=" FROM tbm_detCtaEstFinPre AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.ne_ani=" + jspAni.getValue() + "";
                strSQL+=" AND a1.co_cta=" + txtCodCta.getText() + "";
                intUltRegSQL=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intUltRegSQL==-1)
                    return false;
                intUltRegSQL++;
                
                for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                    for(int j=INT_TBL_ENE; j<=13; j++){
                        strSQL="";
                        strSQL+=" INSERT INTO tbm_detctaestfinpre(";
                        strSQL+=" co_emp, ne_ani, co_cta, ne_mes, co_reg, tx_nom, nd_val, fe_ultmod, co_usrmod)";
                        strSQL+=" VALUES(";
                        strSQL+="" + objParSis.getCodigoEmpresa() + ",";
                        strSQL+="" + jspAni.getValue() + ",";
                        strSQL+="" + txtCodCta.getText() + ",";
                        strSQL+="" + (j-1) + ",";
                        strSQL+="" + intUltRegSQL + ",";//registro
                        strSQL+="" + objUti.codificar(objTblMod.getValueAt(i, INT_TBL_DES)) + ",";//nombre
                        dlbValMes=Double.parseDouble("" + ( objTblMod.getValueAt(i, j)==null?"0.00":objTblMod.getValueAt(i, j) )  );
                        strSQL+="" + dlbValMes + ",";//valor
                        strSQL+="'" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "',";
                        strSQL+="" + objParSis.getCodigoUsuario() + "";
                        strSQL+=")";
                        System.out.println("SQL DE DETCTAESTFINPRE: " + strSQL);
                        stm.executeUpdate(strSQL);
                    }
                    intUltRegSQL++;
                }
                datFecAux=null;
                stm.close();
                stm=null;
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }

    
    private class ZafTblColModLis implements javax.swing.event.TableColumnModelListener{
        
        public void columnAdded(javax.swing.event.TableColumnModelEvent e){

        }
        
        public void columnMarginChanged(javax.swing.event.ChangeEvent e)
        {
            int intColSel, intAncCol;
            if (tblDat.getTableHeader().getResizingColumn()!=null)
            {
                intColSel=tblDat.getTableHeader().getResizingColumn().getModelIndex();
                if (intColSel>=0)
                {
                    intAncCol=tblDat.getColumnModel().getColumn(intColSel).getPreferredWidth();
                    tblTot.getColumnModel().getColumn(intColSel).setPreferredWidth(intAncCol);
                }
            }
        }
        
        public void columnMoved(javax.swing.event.TableColumnModelEvent e){
        }
        
        public void columnRemoved(javax.swing.event.TableColumnModelEvent e){
        }
        
        public void columnSelectionChanged(javax.swing.event.ListSelectionEvent e){
        }
    } 

    private void calculaTblTot(int columna){
        int intColAct=columna;
        double dblVal=0.00;
        for(int i=0; i<objTblMod.getRowCountTrue();i++){
            dblVal+=Double.parseDouble(""+(objTblMod.getValueAt(i, intColAct)==null?"0.00":""+objTblMod.getValueAt(i, intColAct)));
        }
        tblTot.setValueAt(""+ dblVal, 0, intColAct);
    }
    
    /*Esta funcion realiza la suma de cada fila desde la columna de enero hasta diciembre y coloca la suma en la columna de totales*/
    private void calculaTotales(int fila){
        int intFilAct=fila;
        double dblValColTot=0.00;
        for(int i=INT_TBL_ENE; i<=INT_TBL_DIC;i++){
            dblValColTot+=Double.parseDouble(""+(objTblMod.getValueAt(intFilAct, i)==null?"0.00":""+objTblMod.getValueAt(intFilAct, i)));
        }
        tblDat.setValueAt(""+ dblValColTot, intFilAct, INT_TBL_TOT);
    }
    
    /*Esta funcion toma todos los valores q contiene la columna de totales, los suma y los coloca en  en tabla de totales*/
    private void calculaColumnaTotales(){
        double dblColTot=0.00;
        for(int i=0; i<objTblMod.getRowCountTrue();i++){
            dblColTot+=Double.parseDouble(""+(objTblMod.getValueAt(i, INT_TBL_TOT)==null?"0.00":""+objTblMod.getValueAt(i, INT_TBL_TOT)));
        }
        tblTot.setValueAt(""+ dblColTot, 0, INT_TBL_TOT);
    }    
    
    private boolean isCamVal(){
        objTblMod.removeEmptyRows();
        if (!objTblMod.isAllRowsComplete()){
            mostrarMsgInf("<HTML>Existen campos que no han sido ingresados<BR>Ingrese la descripción correspondiente para los valores ingresados y vuelva a intentarlo</HTML>");
            return false;
        }
        
        //Validar el "Tipo de documento".
        if (txtCodCta.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Cuenta</FONT> es obligatorio.<BR>Escriba o seleccione una cuenta y vuelva a intentarlo.</HTML>");
            txtNumCta.requestFocus();
            return false;
        }
        
        if ( ! (txtCodCta.getText().equals(""))  ){
            String strTit, strMsg;
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="<HTML>El año <FONT COLOR=\"blue\">" + jspAni.getValue() + "</FONT> ya está presupuestado<br>¿Desea modificar dicho año?</HTML>";

            strSQL="";
            strSQL+="SELECT a1.ne_ani";
            strSQL+=" FROM tbm_cabEstFinPre AS a1 ";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" AND a1.ne_ani=" + jspAni.getValue() + "";
            if (!objUti.isCodigoUnico(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL)){
                if (objTooBar.getEstado()=='n'){
                    if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION){
                        if(blnPerUsrMod){
                            objTooBar.setVisibleModificar(true);
                            objTooBar.setEnabledModificar(true);
                            objTooBar.setEstado('m');
                        }
                        else{
                            mostrarMsgInf("Ud. no está autorizado para ingresar al modo MODIFICAR");
                            objTooBar.setVisibleModificar(false);
                            objTooBar.setEnabledModificar(false);
                            return false;
                        }
                    }
                    else{
                        System.out.println("POR LA OPCION NOP");
                        return false;
                    }
                }
            }
        }
        return true;
    }    
    
    private boolean isCamValMod(){
        objTblMod.removeEmptyRows();
        if (!objTblMod.isAllRowsComplete()){
            mostrarMsgInf("<HTML>Existen campos que no han sido ingresados<BR>Ingrese la descripción correspondiente para los valores ingresados y vuelva a intentarlo</HTML>");
            return false;
        }
        
        
        
        //Validar el "Tipo de documento".
        if (txtCodCta.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Cuenta</FONT> es obligatorio.<BR>Escriba o seleccione una cuenta y vuelva a intentarlo.</HTML>");
            txtNumCta.requestFocus();
            return false;
        }
        
        strSQL="";
        strSQL+="SELECT a1.ne_ani";
        strSQL+=" FROM tbm_cabEstFinPre AS a1 ";
        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
        strSQL+=" AND a1.ne_ani=" + jspAni.getValue() + "";
        if (!objUti.isCodigoUnico(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL)){
            if( ! (txtCodCta.getText().toString().equals("")) ){
                strSQL="";
                strSQL+="SELECT a1.co_cta";
                strSQL+=" FROM tbm_detEstFinPre AS a1 ";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.ne_ani=" + jspAni.getValue() + "";
                strSQL+=" AND a1.co_cta=" + txtCodCta.getText() + "";
                if (!objUti.isCodigoUnico(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL)){
                    blnModFrm=true;
                }
                else
                    blnModFrm=false;
            }
        }
        else{
            mostrarMsgInf("<HTML>El año <FONT COLOR=\"blue\">" + jspAni.getValue() + "</FONT> no ha sido ingresado<br> Selecccione un año ya ingresado o cancele e intente de nuevo</HTML>");
            return false;
        }
        return true;
    }        
    
    
    
    
    private void mostrarMsgInf(String strMsg){
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void limpiaFrm(){
        txtCodCta.setText("");
        txtNumCta.setText("");
        txtNomCta.setText("");
        objTblMod.removeAllRows();
        objTblModTot.removeAllRows();
        jspAni.setEnabled(true);
        txtCodCta.setEnabled(true);
        txtNomCta.setEnabled(true);
        txtNumCta.setEnabled(true);
        objTblModTot.insertRow();
        jspAni.setModel(new SpinnerNumberModel(intJspValIni, intJspValMin, intJspValMax, intJspValInc));
    }
    
    private void inactivaCamposFrm(){
        txtCodCta.setEnabled(false);
        txtNomCta.setEnabled(false);
        txtNumCta.setEnabled(false);
        jspAni.setEnabled(false);
    }
    
    
    private boolean actualizarReg(){
        boolean blnRes=false;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if(blnModFrm){
                    if(updateTbmDetEstFinPre()){
                        if(deleteTbmDetCtaEstFinPre()){
                            if(insertaTbmDetCtaEstFinPre()){
                                con.commit();
                                blnRes=true;
                            }
                            else
                                con.rollback();
                        }
                        else
                            con.rollback();
                    }
                    else
                        con.rollback();                    
                }
                else{
                    if(insertaTbmDetEstFinPre()){
                        if(insertaTbmDetCtaEstFinPre()){
                            con.commit();
                            blnRes=true;
                        }
                        else
                            con.rollback();
                    }
                    else
                        con.rollback();
                }

            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    private boolean updateTbmDetEstFinPre(){
        boolean blnRes=true;
        double dlbValMes=0.00;
        datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
        try{
            if(con!=null){
                stm=con.createStatement();
                for(int j=INT_TBL_ENE; j<=13; j++){
                    strSQL="";
                    strSQL+=" UPDATE tbm_detestfinpre";
                    dlbValMes=Double.parseDouble("" + ( objTblModTot.getValueAt(0, j)==null?"0.00":objTblModTot.getValueAt(0, j) )  );
                    strSQL+=" SET nd_val=" + dlbValMes + ",";
                    strSQL+="fe_ultmod='" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "',";
                    strSQL+=" co_usrmod=" + objParSis.getCodigoUsuario() + "";
                    strSQL+=" WHERE co_emp= " + objParSis.getCodigoEmpresa() + "";
                    strSQL+=" AND ne_ani=" + jspAni.getValue() + "";
                    strSQL+=" AND co_cta=" + txtCodCta.getText() + "";
                    strSQL+=" AND ne_mes=" + (j-1) + "";
                    System.out.println("SQL DE UPDATE TBMDETESTFINPRE: " + strSQL);
                    stm.executeUpdate(strSQL);
                }
                datFecAux=null;
                stm.close();
                stm=null;
            }
            
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    private boolean deleteTbmDetCtaEstFinPre(){
        boolean blnRes=true;
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="DELETE FROM tbm_detctaestfinpre";
                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND ne_ani=" + jspAni.getValue() + "";
                strSQL+=" AND co_cta=" + txtCodCta.getText() + "";
                System.out.println("SQL DE DELETE TBMDETESTFINPRE: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
 
    class ZafDocLis implements javax.swing.event.DocumentListener{
        public void changedUpdate(javax.swing.event.DocumentEvent evt){
            blnHayCam=true;
        }
        public void insertUpdate(javax.swing.event.DocumentEvent evt){
            blnHayCam=true;
        }
        public void removeUpdate(javax.swing.event.DocumentEvent evt){
            blnHayCam=true;
        }
    }    
    
    
    
    private boolean consultarReg(){
        int intCodEmp, intCodLoc;
        boolean blnRes=true;
        try{
            intCodEmp=objParSis.getCodigoEmpresa();
            intCodLoc=objParSis.getCodigoLocal();
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null){
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
//                if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()){
//                    strSQL="";
//                    strSQL+="SELECT a1.ne_ani, a2.tx_codCta";
//                    strSQL+=" FROM tbm_detCtaEstFinPre AS a1 INNER JOIN tbm_plaCta AS a2";
//                    strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta";
//                    strSQL+=" WHERE a1.co_emp<>" + objParSis.getCodigoEmpresa() + "";
//                    strSQL+=" and a1.ne_ani=" + jspAni.getValue() + "";
//                    strAux=txtNumCta.getText();
//                    if (!strAux.equals(""))
//                        strSQL+=" AND a2.tx_codCta LIKE '" + strAux.replaceAll("'", "''") + "'";
//                    
//                    strSQL+=" GROUP BY a1.ne_ani, a2.tx_codCta";
//                    strSQL+=" ORDER BY a1.ne_ani, a2.tx_codCta";
//                }
//                else{
                    strSQL="";
                    strSQL+="SELECT co_emp, ne_ani, co_cta";
                    strSQL+=" FROM tbm_detCtaEstFinPre";
                    strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+=" and ne_ani=" + jspAni.getValue() + "";
                    strAux=txtCodCta.getText();
                    if (!strAux.equals(""))
                        strSQL+=" AND co_cta LIKE '" + strAux.replaceAll("'", "''") + "'";

                    strSQL+=" GROUP BY co_emp, ne_ani, co_cta";
                    strSQL+=" ORDER BY co_emp, ne_ani, co_cta";
//                }
                rstCab=stmCab.executeQuery(strSQL);
                if (rstCab.next()){
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                }
                else{
                    mostrarMsgInf("No se ha encontrado ningún registro que cumpla el criterio de búsqueda especificado.");
                    limpiaFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    

    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            if (cargarCabReg()){
                if (cargarDetReg()){
                }
            }
            blnHayCam=false;
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }    
    
    
    private boolean cargarCabReg(){
        int intPosRel;
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
//                if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()){
//                    strSQL="";
//                    strSQL+="SELECT a1.ne_ani, a2.tx_codCta, a2.tx_desLar";
//                    strSQL+=" FROM tbm_detCtaEstFinPre AS a1 INNER JOIN tbm_plaCta AS a2";
//                    strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta";
//                    strSQL+=" WHERE a1.co_emp<>" + objParSis.getCodigoEmpresa() + "";
//                    strSQL+=" and a1.ne_ani=" + rstCab.getString("ne_ani") + "";
//                    strSQL+=" AND a2.tx_codCta='" + rstCab.getString("tx_codCta") + "'";
//                    strSQL+=" GROUP BY a1.ne_ani, a2.tx_codCta, a2.tx_desLar";
//                    strSQL+=" ORDER BY a1.ne_ani, a2.tx_codCta, a2.tx_desLar";
//                }
//                else{
                    strSQL="";
                    strSQL+="SELECT a1.co_emp, a1.ne_ani, a1.co_cta, a2.tx_codCta, a2.tx_desLar";
                    strSQL+=" FROM tbm_detCtaEstFinPre AS a1 INNER JOIN tbm_plaCta as a2";
                    strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta";
                    strSQL+=" WHERE a1.co_emp=" + rstCab.getString("co_emp") + "";
                    strSQL+=" and a1.ne_ani=" + rstCab.getString("ne_ani") + "";
                    strSQL+=" and a1.co_cta=" + rstCab.getString("co_cta") + "";
                    strSQL+=" GROUP BY a1.co_emp, a1.ne_ani, a1.co_cta, a2.tx_codCta, a2.tx_desLar";
//                }
                rst=stm.executeQuery(strSQL);
                if (rst.next()){
                    strAux=rst.getString("ne_ani");
                    jspAni.setModel(new SpinnerNumberModel(Integer.parseInt(strAux), intJspValMin, intJspValMax, intJspValInc));
                    
//                    if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()){
//                        txtCodCta.setText("");
//                    }
//                    else{
                        strAux=rst.getString("co_cta");
                        txtCodCta.setText((strAux==null)?"":strAux);
//                    }

                    strAux=rst.getString("tx_codCta");
                    txtNumCta.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_desLar");
                    txtNomCta.setText((strAux==null)?"":strAux);
                }
                else{
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiaFrm();
                    blnRes=false;
                }
            }
            rst.close();
            stm.close();
            con.close();
            rst=null;
            stm=null;
            con=null;
            intPosRel=rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    
    private boolean cargarDetReg(){
        int intCodEmp, intCodLoc;
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                intCodEmp=objParSis.getCodigoEmpresa();
                intCodLoc=objParSis.getCodigoLocal();
//                if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()){
//                    strSQL="";
//                    strSQL+=" SELECT z.tx_codcta, z.tx_desLar,";
//                    strSQL+=" z.ne_ani, z.tx_nom, SUM(salEne) AS salEne, SUM(salFeb) AS salFeb, SUM(salMar) AS salMar, SUM(salAbr) AS salAbr,";
//                    strSQL+=" SUM(salMay) AS salMay, SUM(salJun) AS salJun, SUM(salJul) AS salJul, SUM(salAgo) AS salAgo, SUM(salSep) AS salSep,";
//                    strSQL+=" SUM(salOct) AS salOct, SUM(salNov) AS salNov, SUM(salDic) AS salDic FROM(";
//                    strSQL+=" 	 SELECT x.tx_codcta, x.tx_desLar,";
//                    strSQL+=" 	 x.ne_ani, x.tx_nom, SUM(salEne) AS salEne, SUM(salFeb) AS salFeb, SUM(salMar) AS salMar, SUM(salAbr) AS salAbr,";
//                    strSQL+=" 	 SUM(salMay) AS salMay, SUM(salJun) AS salJun, SUM(salJul) AS salJul, SUM(salAgo) AS salAgo, SUM(salSep) AS salSep,";
//                    strSQL+=" 	 SUM(salOct) AS salOct, SUM(salNov) AS salNov, SUM(salDic) AS salDic";
//                    strSQL+=" 	 FROM(";
//                    strSQL+=" 		SELECT a2.co_cta, a2.tx_codcta, a2.tx_desLar, a1.co_reg,";
//                    strSQL+=" 		a1.ne_ani, a1.tx_nom,";
//                    strSQL+=" 		CASE WHEN a1.ne_mes=1 THEN SUM(a1.nd_val) END AS salEne,";
//                    strSQL+=" 		CASE WHEN a1.ne_mes=2 THEN SUM(a1.nd_val) END AS salFeb,";
//                    strSQL+=" 		CASE WHEN a1.ne_mes=3 THEN SUM(a1.nd_val) END AS salMar,";
//                    strSQL+=" 		CASE WHEN a1.ne_mes=4 THEN SUM(a1.nd_val) END AS salAbr,";
//                    strSQL+=" 		CASE WHEN a1.ne_mes=5 THEN SUM(a1.nd_val) END AS salMay,";
//                    strSQL+=" 		CASE WHEN a1.ne_mes=6 THEN SUM(a1.nd_val) END AS salJun,";
//                    strSQL+=" 		CASE WHEN a1.ne_mes=7 THEN SUM(a1.nd_val) END AS salJul,";
//                    strSQL+=" 		CASE WHEN a1.ne_mes=8 THEN SUM(a1.nd_val) END AS salAgo,";
//                    strSQL+=" 		CASE WHEN a1.ne_mes=9 THEN SUM(a1.nd_val) END AS salSep,";
//                    strSQL+=" 		CASE WHEN a1.ne_mes=10 THEN SUM(a1.nd_val) END AS salOct,";
//                    strSQL+=" 		CASE WHEN a1.ne_mes=11 THEN SUM(a1.nd_val) END AS salNov,";
//                    strSQL+=" 		CASE WHEN a1.ne_mes=12 THEN SUM(a1.nd_val) END AS salDic";
//                    strSQL+=" 		FROM tbm_detCtaEstFinPre AS a1 LEFT OUTER JOIN tbm_plaCta as a2";
//                    strSQL+=" 		ON a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta";
//                    strSQL+=" 		WHERE a1.co_emp<>" + objParSis.getCodigoEmpresa() + "";
//                    strSQL+=" 		AND a1.ne_ani=" + rstCab.getString("ne_ani") + "";
//                    strSQL+=" 		AND a2.tx_codcta='" + rstCab.getString("tx_codcta") + "'";
//                    strSQL+=" 		GROUP BY a2.co_cta, a2.tx_codcta, a2.tx_desLar,";
//                    strSQL+=" 		a1.ne_ani, a1.tx_nom, a1.ne_mes, a1.co_reg";
//                    strSQL+=" 	 ) AS x";
//                    strSQL+=" 	 GROUP BY x.tx_codcta, x.tx_desLar, x.ne_ani, x.tx_nom, x.co_reg";
//                    strSQL+=" 	 ORDER BY x.co_reg";
//                    strSQL+=" ) AS z";
//                    strSQL+=" GROUP BY z.tx_codcta, z.tx_desLar, z.ne_ani, z.tx_nom";
//                }
//                else{
                    strSQL="";
                    strSQL+="SELECT x.co_cta, x.tx_codcta, x.tx_desLar,";
                    strSQL+=" x.ne_ani, x.tx_nom, SUM(salEne) AS salEne, SUM(salFeb) AS salFeb, SUM(salMar) AS salMar, SUM(salAbr) AS salAbr,";
                    strSQL+=" SUM(salMay) AS salMay, SUM(salJun) AS salJun, SUM(salJul) AS salJul, SUM(salAgo) AS salAgo, SUM(salSep) AS salSep,";
                    strSQL+=" SUM(salOct) AS salOct, SUM(salNov) AS salNov, SUM(salDic) AS salDic";
                    strSQL+=" FROM(";
                    strSQL+=" 	SELECT a2.co_cta, a2.tx_codcta, a2.tx_desLar, a1.co_reg,";
                    strSQL+=" 	a1.ne_ani, a1.tx_nom,";
                    strSQL+=" 	CASE WHEN a1.ne_mes=1 THEN SUM(a1.nd_val) END AS salEne,";
                    strSQL+=" 	CASE WHEN a1.ne_mes=2 THEN SUM(a1.nd_val) END AS salFeb,";
                    strSQL+=" 	CASE WHEN a1.ne_mes=3 THEN SUM(a1.nd_val) END AS salMar,";
                    strSQL+=" 	CASE WHEN a1.ne_mes=4 THEN SUM(a1.nd_val) END AS salAbr,";
                    strSQL+=" 	CASE WHEN a1.ne_mes=5 THEN SUM(a1.nd_val) END AS salMay,";
                    strSQL+=" 	CASE WHEN a1.ne_mes=6 THEN SUM(a1.nd_val) END AS salJun,";
                    strSQL+=" 	CASE WHEN a1.ne_mes=7 THEN SUM(a1.nd_val) END AS salJul,";
                    strSQL+=" 	CASE WHEN a1.ne_mes=8 THEN SUM(a1.nd_val) END AS salAgo,";
                    strSQL+=" 	CASE WHEN a1.ne_mes=9 THEN SUM(a1.nd_val) END AS salSep,";
                    strSQL+=" 	CASE WHEN a1.ne_mes=10 THEN SUM(a1.nd_val) END AS salOct,";
                    strSQL+=" 	CASE WHEN a1.ne_mes=11 THEN SUM(a1.nd_val) END AS salNov,";
                    strSQL+=" 	CASE WHEN a1.ne_mes=12 THEN SUM(a1.nd_val) END AS salDic";
                    strSQL+=" 	FROM tbm_detCtaEstFinPre AS a1 LEFT OUTER JOIN tbm_plaCta as a2";
                    strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta";
                    strSQL+=" 	WHERE a1.co_emp=" + rstCab.getString("co_emp") + "";
                    strSQL+="       AND a1.ne_ani=" + rstCab.getString("ne_ani") + "";
                    strSQL+="       AND a1.co_cta=" + rstCab.getString("co_cta") + "";
                    strSQL+=" 	GROUP BY a2.co_cta, a2.tx_codcta, a2.tx_desLar,";
                    strSQL+=" 	a1.ne_ani, a1.tx_nom, a1.ne_mes, a1.co_reg";
                    strSQL+=" ) AS x";
                    strSQL+=" GROUP BY x.co_cta, x.tx_codcta, x.tx_desLar, x.ne_ani, x.tx_nom, x.co_reg";
                    strSQL+=" ORDER BY x.co_reg";
//                }

                System.out.println("EN CARGARDETREG: " + strSQL);
                rst=stm.executeQuery(strSQL);
                vecDat.clear();
                while (rst.next()){
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_LIN,"");
                    vecReg.add(INT_TBL_DES,"" + rst.getString("tx_nom"));
                    vecReg.add(INT_TBL_ENE,"" + rst.getDouble("salEne"));
                    vecReg.add(INT_TBL_FEB,"" + rst.getDouble("salFeb"));
                    vecReg.add(INT_TBL_MAR,"" + rst.getDouble("salMar"));
                    vecReg.add(INT_TBL_ABR,"" + rst.getDouble("salAbr"));
                    vecReg.add(INT_TBL_MAY,"" + rst.getDouble("salMay"));
                    vecReg.add(INT_TBL_JUN,"" + rst.getDouble("salJun"));
                    vecReg.add(INT_TBL_JUL,"" + rst.getDouble("salJul"));
                    vecReg.add(INT_TBL_AGO,"" + rst.getDouble("salAgo"));
                    vecReg.add(INT_TBL_SEP,"" + rst.getDouble("salSep"));
                    vecReg.add(INT_TBL_OCT,"" + rst.getDouble("salOct"));
                    vecReg.add(INT_TBL_NOV,"" + rst.getDouble("salNov"));
                    vecReg.add(INT_TBL_DIC,"" + rst.getDouble("salDic"));
                    vecReg.add(INT_TBL_TOT,"");
                    vecDat.add(vecReg);
                    
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                
                calculaValoresTablaDatosColumnaTotales();
                calculaValoresTablaTotales();
                objTblMod.initRowsState();
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean isRegPro()
    {
        boolean blnRes=true;
        strAux="¿Desea guardar los cambios efectuados a éste registro?\n";
        strAux+="Si no guarda los cambios perderá toda la información que no haya guardado.";
        switch (mostrarMsgCon(strAux)){
            case 0: //YES_OPTION
                switch (objTooBar.getEstado()){
                    case 'n': //Insertar
                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }    
    
    private int mostrarMsgCon(String strMsg){
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }    
    

    private void calculaValoresTablaTotales(){
        double dblVal=0.00;
        for(int j=INT_TBL_ENE; j<=14; j++){
            for(int i=0; i<objTblMod.getRowCountTrue();i++){
                dblVal+=Double.parseDouble(""+(objTblMod.getValueAt(i, j)==null?"0.00":""+objTblMod.getValueAt(i, j)));
            }
            tblTot.setValueAt(""+ dblVal, 0, j);
            dblVal=0.00;
        }
    }
    
    //primera se debe llamar a esta funcion y luego a la de arriba
    private void calculaValoresTablaDatosColumnaTotales(){
        double dblVal=0.00;
        for(int i=0; i<objTblMod.getRowCountTrue();i++){
            for(int j=INT_TBL_ENE; j<=13; j++){
                dblVal+=Double.parseDouble(""+(objTblMod.getValueAt(i, j)==null?"0.00":""+objTblMod.getValueAt(i, j)));
            }
            tblDat.setValueAt(""+ dblVal, i, INT_TBL_TOT);
            dblVal=0.00;
        }
    }
        
}