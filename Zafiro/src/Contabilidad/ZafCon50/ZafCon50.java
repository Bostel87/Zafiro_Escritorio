/*
 * ZafCon03.java
 *
 * Created on 24 de enero de 2006, 11:06
 */

package Contabilidad.ZafCon50;

import Librerias.ZafUtil.ZafUtil;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import java.sql.*;
import Librerias.ZafVenCon.ZafVenCon;
import java.util.ArrayList;
import Librerias.ZafSelFec.ZafSelFec;
import Librerias.ZafTblUti.ZafTblTot.ZafTblTot;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafUtil.ZafLocPrgUsr;
/**
 * @author  ilino
 */
public class ZafCon50 extends javax.swing.JInternalFrame {
     Librerias.ZafUtil.ZafUtil objUti;
     Librerias.ZafParSis.ZafParSis objParSis;
     Vector vecDat, vecCab, vecReg;
     ZafTblMod objTblMod, objTblModTot;
     ZafColNumerada objColNum;
     ZafTblPopMnu objTblPopMnu;
     private ZafTblBus objTblBus;
     private ZafTblCelRenLbl objTblCelRenLbl;            //Render: Presentar JLabel en JTable.
     
     private String strSQL,strAux;
     private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
     private ZafVenCon vcoCli;                           //Ventana de consulta "Proveedor".
     private ZafVenCon vcoLoc;                           //Ventana de consulta "Local".
     private ZafLocPrgUsr objLocPrgUsr;                          //Objeto que almacena los locales por usuario y programa.
     
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_EMP=1;
    final int INT_TBL_DAT_COD_LOC=2;
    final int INT_TBL_DAT_NOM_LOC=3;
    final int INT_TBL_DAT_COD_TIP_DOC=4;
    final int INT_TBL_DAT_DES_COR_TIP_DOC=5;
    final int INT_TBL_DAT_DES_LAR_TIP_DOC=6;
    final int INT_TBL_DAT_COD_DOC=7;
    final int INT_TBL_DAT_NUM_DOC=8;
    final int INT_TBL_DAT_FEC_DOC=9;
    final int INT_TBL_DAT_COD_CLI=10;
    final int INT_TBL_DAT_NOM_CLI=11;
    final int INT_TBL_DAT_VAL_DOC=12;
    final int INT_TBL_DAT_VAL_PND=13;

    private String strCodPrv, strDesLarPrv;             //Contenido del campo al obtener el foco.
    private String strCodLoc, strNomLoc;                //Contenido del campo al obtener el foco.
    private boolean blnCon; 
    private ZafThreadGUI objThrGUI;

    private Connection con;
    private Statement stm;
    private ResultSet rst;    
    private String strDesCorTipDoc, strDesLarTipDoc;
    
    private ZafSelFec objSelFec;
    private ZafVenCon vcoTipDoc;
    private ZafTblTot objTblTot;
    private ZafTblOrd objTblOrd;
    
    /** Creates new form ZafCon03 */
     public ZafCon50(Librerias.ZafParSis.ZafParSis obj) {
         initComponents();
      try{
        this.objParSis = (Librerias.ZafParSis.ZafParSis) obj.clone();
        objUti = new Librerias.ZafUtil.ZafUtil();
        this.setTitle(objParSis.getNombreMenu()+ "v0.1");
        if (!configurarFrm())
            exitForm();        
        //this.setBounds(10,10, 625,295);       
      }catch (CloneNotSupportedException e){
          objUti.mostrarMsgErr_F1(this, e);
      }
    }
    

    private void mostrarMsgError(String strMensaje){
            javax.swing.JOptionPane obj =new javax.swing.JOptionPane();
            String strTit;
            strTit="Zafiro.- Contabilidad";            
            obj.showMessageDialog(this,strMensaje,strTit,javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
     private void mostrarMsgInf(String strMsg) {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }   

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      panFrm = new javax.swing.JPanel();
      lblTit = new javax.swing.JLabel();
      tabFrm = new javax.swing.JTabbedPane();
      panGrl = new javax.swing.JPanel();
      panCen = new javax.swing.JPanel();
      panFec = new javax.swing.JPanel();
      panFil = new javax.swing.JPanel();
      lblPrv = new javax.swing.JLabel();
      txtCodPrv = new javax.swing.JTextField();
      txtDesLarPrv = new javax.swing.JTextField();
      butPrv = new javax.swing.JButton();
      txtCodTipDoc = new javax.swing.JTextField();
      lblTipDoc = new javax.swing.JLabel();
      txtDesCorTipDoc = new javax.swing.JTextField();
      txtDesLarTipDoc = new javax.swing.JTextField();
      butTipDoc = new javax.swing.JButton();
      chkMosRet = new javax.swing.JCheckBox();
      lblLoc = new javax.swing.JLabel();
      txtCodLoc = new javax.swing.JTextField();
      txtNomLoc = new javax.swing.JTextField();
      butLoc = new javax.swing.JButton();
      panRep = new javax.swing.JPanel();
      spnDat = new javax.swing.JScrollPane();
      tblDat = new javax.swing.JTable();
      spnTotal = new javax.swing.JScrollPane();
      tblTotal = new javax.swing.JTable();
      panPie = new javax.swing.JPanel();
      panBot = new javax.swing.JPanel();
      butCon = new javax.swing.JButton();
      butCer = new javax.swing.JButton();
      panBarEst = new javax.swing.JPanel();
      lblMsgSis = new javax.swing.JLabel();
      jPanel6 = new javax.swing.JPanel();
      pgrSis = new javax.swing.JProgressBar();

      setClosable(true);
      setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
      setIconifiable(true);
      setMaximizable(true);
      setResizable(true);
      addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
         public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
         }
         public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
         }
         public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            exitForm(evt);
         }
         public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
         }
         public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
         }
         public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
         }
         public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
         }
      });

      panFrm.setLayout(new java.awt.BorderLayout());

      lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
      lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      lblTit.setText("TÃ­tulo de la ventana");
      lblTit.setPreferredSize(new java.awt.Dimension(138, 20));
      lblTit.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
      panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

      tabFrm.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

      panGrl.setLayout(new java.awt.BorderLayout());

      panCen.setName(""); // NOI18N
      panCen.setPreferredSize(new java.awt.Dimension(10, 300));
      panCen.setLayout(new java.awt.BorderLayout());

      panFec.setPreferredSize(new java.awt.Dimension(0, 100));
      panFec.setLayout(new java.awt.BorderLayout());
      panCen.add(panFec, java.awt.BorderLayout.NORTH);

      panFil.setLayout(null);

      lblPrv.setText("Cliente:");
      lblPrv.setToolTipText("Proveedor");
      panFil.add(lblPrv);
      lblPrv.setBounds(8, 32, 70, 20);

      txtCodPrv.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtCodPrvActionPerformed(evt);
         }
      });
      txtCodPrv.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            txtCodPrvFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            txtCodPrvFocusLost(evt);
         }
      });
      panFil.add(txtCodPrv);
      txtCodPrv.setBounds(150, 32, 80, 20);

      txtDesLarPrv.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtDesLarPrvActionPerformed(evt);
         }
      });
      txtDesLarPrv.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            txtDesLarPrvFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            txtDesLarPrvFocusLost(evt);
         }
      });
      panFil.add(txtDesLarPrv);
      txtDesLarPrv.setBounds(230, 32, 280, 20);

      butPrv.setText("...");
      butPrv.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            butPrvActionPerformed(evt);
         }
      });
      panFil.add(butPrv);
      butPrv.setBounds(510, 32, 20, 20);
      panFil.add(txtCodTipDoc);
      txtCodTipDoc.setBounds(116, 10, 32, 20);

      lblTipDoc.setText("Tipo de documento:");
      lblTipDoc.setToolTipText("Tipo de documento");
      panFil.add(lblTipDoc);
      lblTipDoc.setBounds(8, 10, 120, 20);

      txtDesCorTipDoc.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtDesCorTipDocActionPerformed(evt);
         }
      });
      txtDesCorTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            txtDesCorTipDocFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            txtDesCorTipDocFocusLost(evt);
         }
      });
      panFil.add(txtDesCorTipDoc);
      txtDesCorTipDoc.setBounds(150, 10, 80, 20);

      txtDesLarTipDoc.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtDesLarTipDocActionPerformed(evt);
         }
      });
      txtDesLarTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            txtDesLarTipDocFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            txtDesLarTipDocFocusLost(evt);
         }
      });
      panFil.add(txtDesLarTipDoc);
      txtDesLarTipDoc.setBounds(230, 10, 280, 20);

      butTipDoc.setText("...");
      butTipDoc.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            butTipDocActionPerformed(evt);
         }
      });
      panFil.add(butTipDoc);
      butTipDoc.setBounds(510, 10, 20, 20);

      chkMosRet.setText("Mostrar sÃ³lo retenciones");
      panFil.add(chkMosRet);
      chkMosRet.setBounds(10, 90, 340, 16);

      lblLoc.setText("Local:");
      lblLoc.setToolTipText("Local");
      panFil.add(lblLoc);
      lblLoc.setBounds(8, 54, 90, 20);

      txtCodLoc.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtCodLocActionPerformed(evt);
         }
      });
      txtCodLoc.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            txtCodLocFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            txtCodLocFocusLost(evt);
         }
      });
      panFil.add(txtCodLoc);
      txtCodLoc.setBounds(150, 54, 80, 20);

      txtNomLoc.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtNomLocActionPerformed(evt);
         }
      });
      txtNomLoc.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            txtNomLocFocusGained(evt);
         }
         public void focusLost(java.awt.event.FocusEvent evt) {
            txtNomLocFocusLost(evt);
         }
      });
      panFil.add(txtNomLoc);
      txtNomLoc.setBounds(230, 54, 280, 20);

      butLoc.setText("...");
      butLoc.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            butLocActionPerformed(evt);
         }
      });
      panFil.add(butLoc);
      butLoc.setBounds(510, 54, 20, 20);

      panCen.add(panFil, java.awt.BorderLayout.CENTER);

      panGrl.add(panCen, java.awt.BorderLayout.CENTER);

      tabFrm.addTab("General", panGrl);

      panRep.setLayout(new java.awt.BorderLayout());

      spnDat.setPreferredSize(new java.awt.Dimension(452, 266));

      tblDat.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
         },
         new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4"
         }
      ));
      spnDat.setViewportView(tblDat);

      panRep.add(spnDat, java.awt.BorderLayout.CENTER);

      spnTotal.setPreferredSize(new java.awt.Dimension(320, 35));

      tblTotal.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {
            {null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null}
         },
         new String [] {
            "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13"
         }
      ) {
         boolean[] canEdit = new boolean [] {
            false, false, false, false, false, false, false, true, true, true, true, true, true
         };

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
         }
      });
      tblTotal.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
      spnTotal.setViewportView(tblTotal);

      panRep.add(spnTotal, java.awt.BorderLayout.SOUTH);

      tabFrm.addTab("Reporte", panRep);

      panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

      panPie.setMinimumSize(new java.awt.Dimension(50, 33));
      panPie.setPreferredSize(new java.awt.Dimension(0, 50));
      panPie.setLayout(new java.awt.BorderLayout());

      panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

      butCon.setText("Consultar");
      butCon.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            butConActionPerformed(evt);
         }
      });
      panBot.add(butCon);

      butCer.setText("Cerrar");
      butCer.setToolTipText("Cierra la ventana.");
      butCer.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            butCerActionPerformed(evt);
         }
      });
      panBot.add(butCer);

      panPie.add(panBot, java.awt.BorderLayout.CENTER);

      panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
      panBarEst.setLayout(new java.awt.BorderLayout());

      lblMsgSis.setText("Listo");
      lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
      panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

      jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
      jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
      jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
      jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

      pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
      pgrSis.setBorderPainted(false);
      pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
      pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
      jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

      panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

      panPie.add(panBarEst, java.awt.BorderLayout.SOUTH);

      panFrm.add(panPie, java.awt.BorderLayout.SOUTH);

      getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

      java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
      setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
   }// </editor-fold>//GEN-END:initComponents

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        // TODO add your handling code here:
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="Ã¡EstÃ¡ seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                dispose();
            }
        }
        catch (Exception e){
            dispose();
        }
        
}//GEN-LAST:event_exitForm

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        // TODO add your handling code here:
        if (butCon.getText().equals("Consultar")){
            blnCon=true;
            if (objThrGUI==null){
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }
        }
        else{
            blnCon=false;
        }
}//GEN-LAST:event_butConActionPerformed

    /** Cerrar la aplicaciÃ¡n. */
    private void exitForm()
    {
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="Ã¡EstÃ¡ seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            this.dispose();
        }
    }        
    
    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        // TODO add your handling code here:
//        this.dispose();
        exitForm();
        
    }//GEN-LAST:event_butCerActionPerformed

private void txtCodPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodPrvActionPerformed
    txtCodPrv.transferFocus();
}//GEN-LAST:event_txtCodPrvActionPerformed

private void txtCodPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusGained
    strCodPrv=txtCodPrv.getText();
    txtCodPrv.selectAll();
}//GEN-LAST:event_txtCodPrvFocusGained

private void txtCodPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusLost
//Validar el contenido de la celda sÃ¡lo si ha cambiado.
        if (!txtCodPrv.getText().equalsIgnoreCase(strCodPrv))
        {
            if (txtCodPrv.getText().equals(""))
            {
                txtCodPrv.setText("");
                txtDesLarPrv.setText("");
                objTblMod.removeAllRows();
            }
            else
            {
                mostrarVenConPrv(1);
            }
        }
        else
            txtCodPrv.setText(strCodPrv);
}//GEN-LAST:event_txtCodPrvFocusLost

private void txtDesLarPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarPrvActionPerformed
    txtDesLarPrv.transferFocus();
}//GEN-LAST:event_txtDesLarPrvActionPerformed

private void txtDesLarPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusGained
    strDesLarPrv=txtDesLarPrv.getText();
    txtDesLarPrv.selectAll();
}//GEN-LAST:event_txtDesLarPrvFocusGained

private void txtDesLarPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusLost
//Validar el contenido de la celda sÃ¡lo si ha cambiado.
        if (!txtDesLarPrv.getText().equalsIgnoreCase(strDesLarPrv))
        {
            if (txtDesLarPrv.getText().equals(""))
            {
                txtCodPrv.setText("");
                txtDesLarPrv.setText("");
                objTblMod.removeAllRows();
            }
            else
            {
                mostrarVenConPrv(2);
            }
        }
        else
            txtDesLarPrv.setText(strDesLarPrv);
}//GEN-LAST:event_txtDesLarPrvFocusLost


private void butPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrvActionPerformed
strCodPrv=txtCodPrv.getText();
        mostrarVenConPrv(0);
}//GEN-LAST:event_butPrvActionPerformed

private void txtDesCorTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorTipDocActionPerformed
    // TODO add your handling code here:
    txtDesCorTipDoc.transferFocus();
}//GEN-LAST:event_txtDesCorTipDocActionPerformed

private void txtDesCorTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusGained
    // TODO add your handling code here:
        strDesCorTipDoc=txtDesCorTipDoc.getText();
        txtDesCorTipDoc.selectAll();
}//GEN-LAST:event_txtDesCorTipDocFocusGained

private void txtDesCorTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusLost
    // TODO add your handling code here:
        //Validar el contenido de la celda sÃ¡lo si ha cambiado.
        if (!txtDesCorTipDoc.getText().equalsIgnoreCase(strDesCorTipDoc))
        {
            if (txtDesCorTipDoc.getText().equals(""))
            {
                txtCodTipDoc.setText("");
                txtDesLarTipDoc.setText("");
            }
            else
            {
                mostrarVenConTipDoc(1);
            }
        }
        else
            txtDesCorTipDoc.setText(strDesCorTipDoc);
}//GEN-LAST:event_txtDesCorTipDocFocusLost

private void txtDesLarTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarTipDocActionPerformed
    // TODO add your handling code here:
    txtDesLarTipDoc.transferFocus();
}//GEN-LAST:event_txtDesLarTipDocActionPerformed

private void txtDesLarTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusGained
    // TODO add your handling code here:
        strDesLarTipDoc=txtDesLarTipDoc.getText();
        txtDesLarTipDoc.selectAll();
}//GEN-LAST:event_txtDesLarTipDocFocusGained

private void txtDesLarTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusLost
    // TODO add your handling code here:
        //Validar el contenido de la celda sÃ¡lo si ha cambiado.
        if (!txtDesLarTipDoc.getText().equalsIgnoreCase(strDesLarTipDoc))
        {
            if (txtDesLarTipDoc.getText().equals(""))
            {
                txtCodTipDoc.setText("");
                txtDesCorTipDoc.setText("");
            }
            else
            {
                mostrarVenConTipDoc(2);
            }
        }
        else
            txtDesLarTipDoc.setText(strDesLarTipDoc);
}//GEN-LAST:event_txtDesLarTipDocFocusLost

private void butTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butTipDocActionPerformed
    // TODO add your handling code here:
    mostrarVenConTipDoc(0);
}//GEN-LAST:event_butTipDocActionPerformed

   private void txtCodLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodLocActionPerformed
      txtCodLoc.transferFocus();
   }//GEN-LAST:event_txtCodLocActionPerformed

   private void txtCodLocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodLocFocusGained
      strCodLoc=txtCodLoc.getText();
      txtCodLoc.selectAll();
   }//GEN-LAST:event_txtCodLocFocusGained

   private void txtCodLocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodLocFocusLost
      //Validar el contenido de la celda sÃ³lo si ha cambiado.
      if (!txtCodLoc.getText().equalsIgnoreCase(strCodLoc))
      {
         if (txtCodLoc.getText().equals(""))
         {
            txtCodLoc.setText("");
            txtNomLoc.setText("");
         }
         else
         {
            mostrarVenConLoc(1);
         }
      }
      else
         txtCodLoc.setText(strCodLoc);
   }//GEN-LAST:event_txtCodLocFocusLost

   private void txtNomLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomLocActionPerformed
      txtNomLoc.transferFocus();
   }//GEN-LAST:event_txtNomLocActionPerformed

   private void txtNomLocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomLocFocusGained
      strNomLoc=txtNomLoc.getText();
      txtNomLoc.selectAll();
   }//GEN-LAST:event_txtNomLocFocusGained

   private void txtNomLocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomLocFocusLost
      //Validar el contenido de la celda sÃ³lo si ha cambiado.
      if (!txtNomLoc.getText().equalsIgnoreCase(strNomLoc))
      {
         if (txtNomLoc.getText().equals(""))
         {
            txtCodLoc.setText("");
            txtNomLoc.setText("");
         }
         else
         {
            mostrarVenConLoc(2);
         }
      }
      else
         txtNomLoc.setText(strNomLoc);
   }//GEN-LAST:event_txtNomLocFocusLost

   private void butLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butLocActionPerformed
      mostrarVenConLoc(0);
   }//GEN-LAST:event_butLocActionPerformed
    


    /**
     * Esta funciÃ¡n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de bÃ¡squeda determina si se debe hacer
     * una bÃ¡squeda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se estÃ¡ buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opciÃ¡n que desea utilizar.
     * @param intTipBus El tipo de bÃ¡squeda a realizar.
     * @return true: Si no se presentÃ¡ ningÃ¡n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConPrv(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoCli.setCampoBusqueda(2);
                    vcoCli.show();
                    if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                    {
                        txtCodPrv.setText(vcoCli.getValueAt(1));
                        txtDesLarPrv.setText(vcoCli.getValueAt(3));
                        objTblMod.removeAllRows();
                    }
                    break;
                case 1: //BÃ¡squeda directa por "NÃ¡mero de cuenta".
                    if (vcoCli.buscar("a1.co_cli", txtCodPrv.getText()))
                    {
                        txtCodPrv.setText(vcoCli.getValueAt(1));
                        txtDesLarPrv.setText(vcoCli.getValueAt(3));
                        objTblMod.removeAllRows();
                    }
                    else
                    {
                        vcoCli.setCampoBusqueda(0);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                        {
                            txtCodPrv.setText(vcoCli.getValueAt(1));
                            txtDesLarPrv.setText(vcoCli.getValueAt(3));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtCodPrv.setText(strCodPrv);
                        }
                    }
                    break;
                case 2: //BÃ¡squeda directa por "DescripciÃ¡n larga".
                    if (vcoCli.buscar("a1.tx_nom", txtDesLarPrv.getText()))
                    {
                        txtCodPrv.setText(vcoCli.getValueAt(1));
                        txtDesLarPrv.setText(vcoCli.getValueAt(3));
                        objTblMod.removeAllRows();
                    }
                    else
                    {
                        vcoCli.setCampoBusqueda(2);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                        {
                            txtCodPrv.setText(vcoCli.getValueAt(1));
                            txtDesLarPrv.setText(vcoCli.getValueAt(3));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtDesLarPrv.setText(strDesLarPrv);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta funciÃ³n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de bÃºsqueda determina si se debe hacer
     * una bÃºsqueda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se estÃ¡ buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opciÃ³n que desea utilizar.
     * @param intTipBus El tipo de bÃºsqueda a realizar.
     * @return true: Si no se presentÃ³ ningÃºn problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConLoc(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoLoc.setCampoBusqueda(2);
                    vcoLoc.setVisible(true);
                    if (vcoLoc.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                    {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtNomLoc.setText(vcoLoc.getValueAt(2));
                    }
                    break;
                case 1: //BÃºsqueda directa por "CÃ³digo".
                    if (vcoLoc.buscar("a1.co_loc", txtCodLoc.getText()))
                    {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtNomLoc.setText(vcoLoc.getValueAt(2));
                    }
                    else
                    {
                        vcoLoc.setCampoBusqueda(0);
                        vcoLoc.setCriterio1(11);
                        vcoLoc.cargarDatos();
                        vcoLoc.setVisible(true);
                        if (vcoLoc.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodLoc.setText(vcoLoc.getValueAt(1));
                            txtNomLoc.setText(vcoLoc.getValueAt(2));
                        }
                        else
                        {
                            txtCodLoc.setText(strCodLoc);
                        }
                    }
                    break;
                case 2: //BÃºsqueda directa por "Nombre".
                    if (vcoLoc.buscar("a1.tx_nom", txtNomLoc.getText()))
                    {
                        txtCodLoc.setText(vcoLoc.getValueAt(1));
                        txtNomLoc.setText(vcoLoc.getValueAt(2));
                    }
                    else
                    {
                        vcoLoc.setCampoBusqueda(2);
                        vcoLoc.setCriterio1(11);
                        vcoLoc.cargarDatos();
                        vcoLoc.setVisible(true);
                        if (vcoLoc.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodLoc.setText(vcoLoc.getValueAt(1));
                            txtNomLoc.setText(vcoLoc.getValueAt(2));
                        }
                        else
                        {
                            txtNomLoc.setText(strNomLoc);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton butCer;
   private javax.swing.JButton butCon;
   private javax.swing.JButton butLoc;
   private javax.swing.JButton butPrv;
   private javax.swing.JButton butTipDoc;
   private javax.swing.JCheckBox chkMosRet;
   private javax.swing.JPanel jPanel6;
   private javax.swing.JLabel lblLoc;
   private javax.swing.JLabel lblMsgSis;
   private javax.swing.JLabel lblPrv;
   private javax.swing.JLabel lblTipDoc;
   private javax.swing.JLabel lblTit;
   private javax.swing.JPanel panBarEst;
   private javax.swing.JPanel panBot;
   private javax.swing.JPanel panCen;
   private javax.swing.JPanel panFec;
   private javax.swing.JPanel panFil;
   private javax.swing.JPanel panFrm;
   private javax.swing.JPanel panGrl;
   private javax.swing.JPanel panPie;
   private javax.swing.JPanel panRep;
   private javax.swing.JProgressBar pgrSis;
   private javax.swing.JScrollPane spnDat;
   private javax.swing.JScrollPane spnTotal;
   private javax.swing.JTabbedPane tabFrm;
   private javax.swing.JTable tblDat;
   private javax.swing.JTable tblTotal;
   private javax.swing.JTextField txtCodLoc;
   private javax.swing.JTextField txtCodPrv;
   private javax.swing.JTextField txtCodTipDoc;
   private javax.swing.JTextField txtDesCorTipDoc;
   private javax.swing.JTextField txtDesLarPrv;
   private javax.swing.JTextField txtDesLarTipDoc;
   private javax.swing.JTextField txtNomLoc;
   // End of variables declaration//GEN-END:variables

    private boolean isCamVal(){
        //Validar el "Tipo de documento".
        if (txtCodTipDoc.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Tipo de documento</FONT> es obligatorio.<BR>Escriba o seleccione un tipo de documento y vuelva a intentarlo.</HTML>");
            txtDesCorTipDoc.requestFocus();
            return false;
        }

        return true;
    }


    
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            
            //Configurar ZafSelFec:
            objSelFec=new ZafSelFec();
            objSelFec.setCheckBoxVisible(false);
            panFec.add(objSelFec);
            objSelFec.setBounds(4, 4, 472, 72);

            //Inicializar objetos.
            objUti=new ZafUtil();
            //Obtener los locales por Usuario y Programa.
            objLocPrgUsr=new ZafLocPrgUsr(objParSis);
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux+"  v0.2.3");
            lblTit.setText(strAux);
            //Configurar objetos.
            //txtCodCta.setVisible(false);
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(13);  //Almacena las cabeceras
            vecCab.clear();                                    
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_EMP,"CÃ³d.Emp.");
            vecCab.add(INT_TBL_DAT_COD_LOC,"CÃ³d.Loc.");
            vecCab.add(INT_TBL_DAT_NOM_LOC,"Nom.Loc.");
            vecCab.add(INT_TBL_DAT_COD_TIP_DOC,"cÃ³d.Tip.Doc.");
            vecCab.add(INT_TBL_DAT_DES_COR_TIP_DOC,"CÃ³d.Tip.Doc.");
            vecCab.add(INT_TBL_DAT_DES_LAR_TIP_DOC,"Tip.Doc");
            vecCab.add(INT_TBL_DAT_COD_DOC,"CÃ³d.Doc.");
            vecCab.add(INT_TBL_DAT_NUM_DOC,"NÃºm.Doc.");
            vecCab.add(INT_TBL_DAT_FEC_DOC,"Fec.Doc.");
            vecCab.add(INT_TBL_DAT_COD_CLI,"CÃ³d.Cli.");
            vecCab.add(INT_TBL_DAT_NOM_CLI,"Cliente/Proveedor");
            
            
            vecCab.add(INT_TBL_DAT_VAL_DOC,"Val.Doc.");
            vecCab.add(INT_TBL_DAT_VAL_PND,"Val.Pnd.");


            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);


            //Configurar JTable: Establecer tipo de selecciÃ¡n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            //Configurar JTable: Establecer el menÃ¡ de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(25);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_NOM_LOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DES_COR_TIP_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DES_LAR_TIP_DOC).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(66);
            tcmAux.getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(168);
            tcmAux.getColumn(INT_TBL_DAT_VAL_DOC).setPreferredWidth(77);
            tcmAux.getColumn(INT_TBL_DAT_VAL_PND).setPreferredWidth(77);


            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);

            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_EMP, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_LOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_TIP_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_DOC, tblDat);
            //objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_CLI, tblDat);
            
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Editor de bÃ¡squeda.
            objTblBus=new ZafTblBus(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);
            //Configurar JTable: Renderizar celdas.
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_GEN);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_COD_CLI).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;



            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_VAL_DOC).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VAL_PND).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;

            //Libero los objetos auxiliares.
            tcmAux=null;


            //PARA TOTALES
//            objTblModTot=new ZafTblMod();
//            objTblModTot.setHeader(vecCab);
//            tblTotal.setModel(objTblModTot);
            //Configurar JTable: Establecer el ancho de las columnas.

            //Configurar JTable: Establecer relaciÃ¡n entre el JTable de datos y JTable de totales.
            int intCol[]={INT_TBL_DAT_VAL_DOC,INT_TBL_DAT_VAL_PND};
            objTblTot=new ZafTblTot(spnDat, spnTotal, tblDat, tblTotal, intCol);

            tblTotal.setRowSelectionAllowed(true);
            tblTotal.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            tblTotal.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);

            tcmAux=tblTotal.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(25);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_NOM_LOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DES_COR_TIP_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DES_LAR_TIP_DOC).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(66);
            tcmAux.getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(168);
            tcmAux.getColumn(INT_TBL_DAT_VAL_DOC).setPreferredWidth(77);
            tcmAux.getColumn(INT_TBL_DAT_VAL_PND).setPreferredWidth(77);

            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(0);
//            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(0);


            configurarVenConPrv();
            configurarVenConTipDoc();
            configurarVenConLoc();

            txtCodTipDoc.setVisible(false);
            txtCodTipDoc.setEditable(false);
            txtCodTipDoc.setEnabled(false);


        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren mÃ¡s espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD_EMP:
                    strMsg="CÃ³digo Empresa";
                    break;
                case INT_TBL_DAT_COD_LOC:
                    strMsg="CÃ³digo Local";
                    break;
                case INT_TBL_DAT_COD_TIP_DOC:
                    strMsg="CÃ³digo Tipo Documento";
                    break;
                case INT_TBL_DAT_COD_DOC:
                    strMsg="CÃ³digo Documento";
                    break;
                case INT_TBL_DAT_NUM_DOC:
                    strMsg="No. Secuencial del Comprobante de Venta Factura";
                    break;
                case INT_TBL_DAT_FEC_DOC:
                    strMsg="Fecha de EmisiÃ³n Comprobante de Venta";
                    break;
                case INT_TBL_DAT_COD_CLI:
                    strMsg="CÃ³digo Cliente";
                    break;                    
                case INT_TBL_DAT_NOM_CLI:
                    strMsg="RazÃ³n Social";
                    break;
                case INT_TBL_DAT_VAL_PND:
                    strMsg="Valor pendiente";
                    break;
                default:
                    break;

            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }


    private class ZafThreadGUI extends Thread{
        public void run(){
            if (!cargarDetReg()){
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sÃ¡lo cuando haya datos.
            if (tblDat.getRowCount()>0){
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }


    private String tipoDocPrgUsr(){
        String strTipDocUsr="";
        Statement stmTipDoc;
        ResultSet rstTipDoc;
        String strSQLTipDoc="";
        try{
            if(con!=null){
                stmTipDoc=con.createStatement();
                if(objParSis.getCodigoUsuario()==1){
                    strSQLTipDoc="";
                    strSQLTipDoc+="SELECT co_tipDoc";
                    strSQLTipDoc+=" FROM tbr_tipDocPrg AS a1";
                    strSQLTipDoc+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQLTipDoc+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                    strSQLTipDoc+=" AND a1.co_mnu=" + objParSis.getCodigoMenu() + "";
                }
                else{
                    strSQLTipDoc="";
                    strSQLTipDoc+="SELECT co_tipDoc";
                    strSQLTipDoc+=" FROM tbr_tipDocUsr AS a1";
                    strSQLTipDoc+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQLTipDoc+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                    strSQLTipDoc+=" AND a1.co_mnu=" + objParSis.getCodigoMenu() + "";
                    strSQLTipDoc+=" AND a1.co_usr=" + objParSis.getCodigoUsuario() + "";
                    strSQLTipDoc+="";
                }
                rstTipDoc=stmTipDoc.executeQuery(strSQLTipDoc);
                for(int k=0; rstTipDoc.next(); k++){
                    if(k==0){
                        strTipDocUsr="" + rstTipDoc.getString("co_tipDoc");
                    }
                    else{
                        strTipDocUsr+=", " + rstTipDoc.getString("co_tipDoc");
                    }
                }
                stmTipDoc.close();
                stmTipDoc=null;
                rstTipDoc.close();
                rstTipDoc=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return strTipDocUsr;
    }



    /**
     * Esta funciÃ¡n permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg(){
        boolean blnRes=true;
        int i, intNumTotReg;
        strAux="";
        int intCodEmpRst, intCodLocRst, intCodTipDocRst, intCodDocRst;
        int intTipLoc = 1; //Tipo de Consulta para generar query de locales. 1=CÃ³digo Local; 2=Todos los datos del local.
        String strEstDoc="";
        
        try{
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
           
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());


            if( ! txtCodPrv.getText().equals(""))
                strAux+=" AND a1.co_cli=" + txtCodPrv.getText() + "";

            switch (objSelFec.getTipoSeleccion()){
                case 0: //BÃ¡squeda por rangos
                    strAux+=" AND (a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                    break;
                case 1: //Fechas menores o iguales que "Hasta".
                    strAux+=" AND (a1.fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                    break;
                case 2: //Fechas mayores o iguales que "Desde".
                    strAux+=" AND (a1.fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                    break;
                case 3: //Todo.
                    break;
            }
            
            if (con!=null){

                if( ! txtCodTipDoc.getText().equals(""))
                    strAux+=" AND a1.co_tipDoc=" + txtCodTipDoc.getText() + "";
                else{
                    strAux+=" AND a1.co_tipDoc IN(" + tipoDocPrgUsr() + ")";
                }

                stm=con.createStatement();
                strSQL="";
                strSQL+="                 SELECT a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc,";
                strSQL+="                         a1.co_cli, a1.tx_nomCli, a1.fe_doc,";
                strSQL+="                         a1.ne_numDoc,";
                strSQL+="                         sum(a2.mo_pag + a2.nd_abo) AS nd_valPnd";
                strSQL+="                   , sum(a2.mo_pag) AS nd_valDoc,c1.tx_nom AS tx_nomLoc, a3.tx_desCor AS tx_desCorTipDoc, a3.tx_desLar AS tx_desLarTipDoc";
                strSQL+="                  FROM (tbm_cabMovInv as a1 inner join tbm_cabtipdoc as a3";
                strSQL+="                           on a1.co_emp=a3.co_emp and a1.co_loc=a3.co_loc and a1.co_tipdoc=a3.co_tipdoc)";
                strSQL+="                  inner join tbm_pagmovinv as a2";
                strSQL+="                  on a1.co_emp=a2.co_emp and a1.co_loc=a2.co_loc and a1.co_tipdoc=a2.co_tipdoc and a1.co_doc=a2.co_doc";



                strSQL+=" INNER JOIN tbm_loc AS c1 ON a2.co_emp=c1.co_emp AND a2.co_loc=c1.co_loc";


                if(objParSis.getCodigoUsuario()==1){
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    
                    if (txtCodLoc.getText().length() > 0)
                    {  strSQL += " AND a1.co_loc = " + txtCodLoc.getText();
                    }
                }
                else{
                    if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+=" AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+=" )";
                        
                        if (txtCodLoc.getText().length() > 0)
                        {  strSQL += " AND a1.co_loc = " + txtCodLoc.getText();
                        }
                    }
                    else{
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        //--- Inicio bloque comentado el 04/Ene/2018 ---
                        //Se comenta esta linea para que se muestre en el listado todos los locales de la empresa, sin importar el local por el cual el
                        //usuario se logoneo.
                        //strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                        //--- Fin bloque comentado el 04/Ene/2018 ------
                        
                        if (txtCodLoc.getText().length() > 0)
                        {  strSQL += " AND a1.co_loc = " + txtCodLoc.getText();
                        }
                        else
                        {  //Valida si el usuario tiene acceso a locales.
                           if ((objLocPrgUsr.validaLocUsr()))
                           {
                               strSQL += " AND a1.co_loc in ("+objLocPrgUsr.cargarLocUsr(intTipLoc)+")";
                           }
                           else 
                           {
                               strSQL += " AND a1.co_loc not in ("+objLocPrgUsr.cargarLoc(intTipLoc)+")";
                           }
                        }
                        
                        strSQL+=" AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        //strSQL+="                           AND co_loc=" + objParSis.getCodigoLocal() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+="                           AND co_usr=" + objParSis.getCodigoUsuario() + "";
                        strSQL+=" )";
                    }
                }

                strSQL+=strAux;
                strSQL+= "AND a1.st_reg NOT IN('E','I')  AND a2.st_reg IN('A','C')";
                strSQL+= " and case when a3.tx_natDoc='I' THEN (a2.mo_pag + a2.nd_abo)>0";
                strSQL+= "      when a3.tx_natDoc='E' THEN (a2.mo_pag + a2.nd_abo)<0 END";
                if(chkMosRet.isSelected()){
                    strSQL+=" AND a2.nd_porRet>0";
                }


                strSQL+= " GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.co_cli, a1.tx_nomCli, a1.fe_doc,";
                strSQL+= " a1.ne_numdoc, c1.tx_nom, a3.tx_desCor, a3.tx_desLar";
                strSQL+=" ORDER BY a1.fe_doc";
                System.out.println("SQL: " + strSQL);
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                //pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;
                while (rst.next()){
                    if (blnCon){

                        intCodEmpRst=rst.getInt("co_emp");
                        intCodLocRst=rst.getInt("co_loc");
                        intCodTipDocRst=rst.getInt("co_tipdoc");
                        intCodDocRst=rst.getInt("co_doc");
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_COD_EMP,""      + intCodEmpRst);
                        vecReg.add(INT_TBL_DAT_COD_LOC,""      + intCodLocRst);
                        vecReg.add(INT_TBL_DAT_NOM_LOC,""      + rst.getString("tx_nomLoc"));
                        vecReg.add(INT_TBL_DAT_COD_TIP_DOC,""  + intCodTipDocRst);
                        vecReg.add(INT_TBL_DAT_DES_COR_TIP_DOC,""  + rst.getString("tx_desCorTipDoc"));
                        vecReg.add(INT_TBL_DAT_DES_LAR_TIP_DOC,""  + rst.getString("tx_desLarTipDoc"));
                        vecReg.add(INT_TBL_DAT_COD_DOC,""      + intCodDocRst);
                        vecReg.add(INT_TBL_DAT_NUM_DOC,""     + rst.getString("ne_numDoc"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC,""      + objUti.formatearFecha(rst.getString("fe_doc"), "yyyy-MM-dd", "dd/MM/yyyy"));
                        vecReg.add(INT_TBL_DAT_COD_CLI,""      + rst.getString("co_cli"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI,""      + rst.getString("tx_nomCli"));                        
                        vecReg.add(INT_TBL_DAT_VAL_DOC,""      + rst.getString("nd_valDoc"));
                        vecReg.add(INT_TBL_DAT_VAL_PND,""      + rst.getString("nd_valPnd"));

                        vecDat.add(vecReg); 
                        i++;
                        pgrSis.setValue(i);
                    }
                    else{
                        break;
                    }
                }
                rst.close();
                stm.close();
                rst=null;
                stm=null;
                
                
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();



                if (tblDat.getRowCount()==tblDat.getRowCount())
                    lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
                tabFrm.setSelectedIndex(1);
                //Establecer el foco en el JTable sÃ¡lo cuando haya datos.
                if (tblDat.getRowCount()>0){
                    tblDat.setRowSelectionInterval(0, 0);
                    tblDat.requestFocus();
                }


                objTblTot.calcularTotales();

                con.close();
                con=null;
                
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


  
    /**
     * Esta funciÃ¡n configura la "Ventana de consulta" que serÃ¡ utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConPrv()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("CÃ³digo");
            arlAli.add("IdentificaciÃ³n");
            arlAli.add("Nombre");
            arlAli.add("DirecciÃ³n");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                strSQL="";
                strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
                strSQL+=" FROM tbm_cli AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.st_cli='S'";
                strSQL+=" ORDER BY a1.tx_nom";
            }
            else{
                strSQL="";
                strSQL+="SELECT a2.co_cli, a2.tx_ide, a2.tx_nom, a2.tx_dir";
                strSQL+=" FROM tbr_cliLoc AS a1 INNER JOIN tbm_cli AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" AND a2.st_cli='S'";
                strSQL+=" ORDER BY a2.tx_nom";
            }
            //Ocultar columnas.
            int intColOcu[]=new int[1];
            intColOcu[0]=4;
            vcoCli=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de clientes", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoCli.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    /**
     * Esta funciÃ¡n configura la "Ventana de consulta" que serÃ¡ utilizada para
     * mostrar los "Tipos de documentos".
     */
    private boolean configurarVenConTipDoc()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_tipdoc");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            arlCam.add("a1.ne_ultDoc");
            arlCam.add("a1.tx_natDoc");
            arlCam.add("tblActNumDoc");
            arlCam.add("a2.co_grpTipDoc");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("CÃ³digo");
            arlAli.add("Tip.Doc.");
            arlAli.add("Tipo de documento");
            arlAli.add("Ult.Doc.");
            arlAli.add("Nat.Doc.");
            arlAli.add("Ref.Tbl.Act.");
            arlAli.add("Cod.Grp.Tbl.Tip.Doc.");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            arlAncCol.add("80");
            arlAncCol.add("80");
            arlAncCol.add("80");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            if(objParSis.getCodigoUsuario()==1){
                strSQL="";
                strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar, ";
                strSQL+=" CASE WHEN a2.ne_ultDoc IS NULL THEN a1.ne_ultDoc ELSE a2.ne_ultDoc END AS ne_ultDoc";
                strSQL+=" ,a1.tx_natDoc";
                strSQL+=" ,CASE WHEN a2.ne_ultDoc IS NULL THEN 'L' ELSE 'G' END AS tblActNumDoc, a2.co_grpTipDoc";
                strSQL+=" FROM (tbm_cabTipDoc AS a1 LEFT OUTER JOIN tbm_cabGrpTipDoc AS a2 ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_grpTipDoc=a2.co_grpTipDoc)";
                strSQL+=" INNER JOIN tbr_tipDocPrg AS a3";
                strSQL+=" ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();
                strSQL+=" AND a3.co_mnu=" + objParSis.getCodigoMenu();
                strSQL+=" ORDER BY a1.tx_desCor";
            }
            else{
                strSQL="";
                strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar,";
                strSQL+=" CASE WHEN a2.ne_ultDoc IS NULL THEN a1.ne_ultDoc ELSE a2.ne_ultDoc END AS ne_ultDoc";
                strSQL+=" ,a1.tx_natDoc";
                strSQL+=" ,CASE WHEN a2.ne_ultDoc IS NULL THEN 'L' ELSE 'G' END AS tblActNumDoc, a2.co_grpTipDoc";
                strSQL+=" FROM tbr_tipDocUsr AS a3 inner join  (tbm_cabTipDoc AS a1 LEFT OUTER JOIN tbm_cabGrpTipDoc AS a2 ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_grpTipDoc=a2.co_grpTipDoc)";
                strSQL+=" ON (a1.co_emp=a3.co_emp and a1.co_loc=a3.co_loc and a1.co_tipdoc=a3.co_tipdoc)";
                strSQL+=" WHERE ";
                strSQL+=" a3.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a3.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" AND a3.co_mnu=" + objParSis.getCodigoMenu() + "";
                strSQL+=" AND a3.co_usr=" + objParSis.getCodigoUsuario() + "";
            }


            //Ocultar columnas.
            int intColOcu[]=new int[3];
            intColOcu[0]=7;
            vcoTipDoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de tipos de documentos", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoTipDoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoTipDoc.setConfiguracionColumna(4, javax.swing.JLabel.RIGHT);


        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta funciÃ³n configura la "Ventana de consulta" que serÃ¡ utilizada para
     * mostrar los "Locales".
     */
    private boolean configurarVenConLoc()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_loc");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("CÃ³digo");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("400");
           
            strSQL="";
            
            if(objParSis.getCodigoUsuario()==1)  
            {    strSQL=objLocPrgUsr.cargarLoc(2);       }
            else 
            {    strSQL=objLocPrgUsr.cargarLocUsr(2);    }

            //System.out.println("ConfigurarVenConLoc: "+strSQL);
            vcoLoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de locales", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoLoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funciÃ¡n permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de bÃ¡squeda determina si se debe hacer
     * una bÃ¡squeda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se estÃ¡ buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opciÃ¡n que desea utilizar.
     * @param intTipBus El tipo de bÃ¡squeda a realizar.
     * @return true: Si no se presentÃ¡ ningÃ¡n problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConTipDoc(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoTipDoc.setCampoBusqueda(1);
                    vcoTipDoc.show();
                    if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    break;
                case 1: //BÃ¡squeda directa por "DescripciÃ¡n corta".
                    if (vcoTipDoc.buscar("a1.tx_desCor", txtDesCorTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(1);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        }
                        else
                        {
                            txtDesCorTipDoc.setText(strDesCorTipDoc);
                        }
                    }
                    break;
                case 2: //BÃ¡squeda directa por "DescripciÃ¡n larga".
                    if (vcoTipDoc.buscar("a1.tx_desLar", txtDesLarTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(2);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        }
                        else
                        {
                            txtDesLarTipDoc.setText(strDesLarTipDoc);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
}