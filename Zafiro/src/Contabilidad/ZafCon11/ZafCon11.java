/*
 * ZafCom08.java
 *
 * Created on 16 de enero de 2005, 17:10 PM
 */
package Contabilidad.ZafCon11;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
//import Librerias.ZafPopupMenu.ZafPopupMenu;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafSelFec.ZafSelFec;
import Librerias.ZafTblUti.ZafTblTot.ZafTblTot;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.*;
import java.util.ArrayList;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import java.math.BigDecimal;
/**
 *
 * @author  Eddye Lino
 */
public class ZafCon11 extends javax.swing.JInternalFrame 
{
    //Constantes: Columnas del JTable:    
    
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_CLI=1;
    final int INT_TBL_DAT_NOM_CLI=2;
    final int INT_TBL_DAT_TIP_OID=3;
    final int INT_TBL_DAT_RUC_CLI=4;
    final int INT_TBL_DAT_TIP_COM=5;
    final int INT_TBL_DAT_FEC_MES=6;
    final int INT_TBL_DAT_BAS_CER=7;
    final int INT_TBL_DAT_BAS_GRB=8;
    final int INT_TBL_DAT_IVA_DCT=9;
    final int INT_TBL_DAT_BAS_ICE=10;
    final int INT_TBL_DAT_COD_ICE=11;
    final int INT_TBL_DAT_VAL_ICE=12;
    final int INT_TBL_DAT_CNT_FAC=13;
    final int INT_TBL_DAT_NUM_SER_FAC=14;
    final int INT_TBL_DAT_VAL_COM_SOL=15; //Valor de compensacion solidaria
    final int INT_TBL_DAT_FOR_PAG_SRI=16; //Forma de pago SRI
    final int INT_TBL_DAT_TIP_EMI=17; //Tipo de emision
    final int INT_TBL_DAT_COD_IVA_SRI=18;
    
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafColNumerada objColNum;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMená en JTable.
    private ZafThreadGUI objThrGUI;
    private Connection con, conTot, conCab;
    private Statement stm, stmTot, stmCab;
    private ResultSet rst, rstTot, rstCab;
    private String strSQL, strAux, strAuxTmp, strAuxTmpFec;
    private ZafTblTot objTblTot;                        //JTable de totales.
        
    private Vector vecDat, vecDatUno, vecCab, vecReg, vecRegUno;
    private Vector vecTipCta, vecNatCta, vecEstReg;
    private boolean blnCon;                     //true: Continua la ejecucián del hilo.
    private String strMsg="";
    private String strTit;
    private javax.swing.JOptionPane oppMsg;
//    private ZafMouMotAda objMouMotAda;
    private String strCodVen, strNomVen;             //Contenido del campo al obtener el foco.
    private ZafTblCelRenLbl objTblCelRenLbl;    
    private ZafTblCelRenLbl objTblCelRenLblTot;    

    private String strCodCli, strNomCli, strDesLarCli, strDirCli, strDesCorTipDoc, strDesLarTipDoc, strTipDoc;
    private String strIdeCli;   
    private ZafTblBus objTblBus;
    private ZafVenCon vcoTipDoc, vcoCli;
   
    javax.swing.JInternalFrame jfrThis; //Hace referencia a this

    private ZafSelFec objSelFec;
    private ZafTblOrd objTblOrd;                        //JTable de ordenamiento.
    private String strVersion = "v0.9.20";

    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafCon11(ZafParSis obj) 
    {
        try{
            initComponents();
            this.objParSis=obj;
            jfrThis=this;
            objParSis=(ZafParSis)obj.clone();
            objUti=new ZafUtil();
            if (!configurarFrm())
                exitForm(); 
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }               
        
        
        
        

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFrmGrl = new javax.swing.JPanel();
        panFilCom = new javax.swing.JPanel();
        panEnu = new javax.swing.JPanel();
        optTod = new javax.swing.JRadioButton();
        optFil = new javax.swing.JRadioButton();
        txtDesLarTipDoc = new javax.swing.JTextField();
        lblTipDoc = new javax.swing.JLabel();
        txtCodTipDoc = new javax.swing.JTextField();
        txtDesCorTipDoc = new javax.swing.JTextField();
        butTipDoc = new javax.swing.JButton();
        lblCli = new javax.swing.JLabel();
        txtCodCli = new javax.swing.JTextField();
        txtNomCli = new javax.swing.JTextField();
        butCli = new javax.swing.JButton();
        panFec = new javax.swing.JPanel();
        panRpt = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        spnTotal = new javax.swing.JScrollPane();
        tblTotal = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butExp = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFrmGrl.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panFrmGrl.setLayout(new java.awt.BorderLayout());

        panFilCom.setLayout(new java.awt.BorderLayout());

        panEnu.setLayout(null);

        bgrFil.add(optTod);
        optTod.setSelected(true);
        optTod.setActionCommand("Todos los registros");
        optTod.setIconTextGap(2);
        optTod.setLabel("Todos los registros");
        optTod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optTodItemStateChanged(evt);
            }
        });
        optTod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTodActionPerformed(evt);
            }
        });
        panEnu.add(optTod);
        optTod.setBounds(10, 10, 400, 20);

        bgrFil.add(optFil);
        optFil.setLabel("Sólo los registros que cumplan el criterio seleccionado");
        optFil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optFilActionPerformed(evt);
            }
        });
        panEnu.add(optFil);
        optFil.setBounds(10, 30, 400, 20);

        txtDesLarTipDoc.setPreferredSize(new java.awt.Dimension(100, 20));
        txtDesLarTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarTipDocActionPerformed(evt);
            }
        });
        txtDesLarTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusLost(evt);
            }
        });
        panEnu.add(txtDesLarTipDoc);
        txtDesLarTipDoc.setBounds(198, 56, 272, 20);

        lblTipDoc.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblTipDoc.setText("Tipo Documento:");
        panEnu.add(lblTipDoc);
        lblTipDoc.setBounds(30, 56, 110, 15);

        txtCodTipDoc.setMinimumSize(new java.awt.Dimension(0, 0));
        txtCodTipDoc.setPreferredSize(new java.awt.Dimension(25, 20));
        panEnu.add(txtCodTipDoc);
        txtCodTipDoc.setBounds(80, 56, 0, 0);

        txtDesCorTipDoc.setMaximumSize(null);
        txtDesCorTipDoc.setPreferredSize(new java.awt.Dimension(70, 20));
        txtDesCorTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorTipDocActionPerformed(evt);
            }
        });
        txtDesCorTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusLost(evt);
            }
        });
        panEnu.add(txtDesCorTipDoc);
        txtDesCorTipDoc.setBounds(116, 56, 80, 20);

        butTipDoc.setFont(new java.awt.Font("SansSerif", 1, 12));
        butTipDoc.setText("...");
        butTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butTipDocActionPerformed(evt);
            }
        });
        panEnu.add(butTipDoc);
        butTipDoc.setBounds(470, 56, 24, 20);

        lblCli.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblCli.setText("Cliente:");
        lblCli.setPreferredSize(new java.awt.Dimension(110, 15));
        panEnu.add(lblCli);
        lblCli.setBounds(30, 86, 80, 15);

        txtCodCli.setMaximumSize(null);
        txtCodCli.setPreferredSize(new java.awt.Dimension(70, 20));
        txtCodCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodCliActionPerformed(evt);
            }
        });
        txtCodCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodCliFocusLost(evt);
            }
        });
        panEnu.add(txtCodCli);
        txtCodCli.setBounds(116, 82, 80, 20);

        txtNomCli.setMaximumSize(null);
        txtNomCli.setPreferredSize(new java.awt.Dimension(70, 20));
        txtNomCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomCliActionPerformed(evt);
            }
        });
        txtNomCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomCliFocusLost(evt);
            }
        });
        panEnu.add(txtNomCli);
        txtNomCli.setBounds(198, 82, 272, 20);

        butCli.setFont(new java.awt.Font("SansSerif", 1, 12));
        butCli.setText("...");
        butCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCliActionPerformed(evt);
            }
        });
        panEnu.add(butCli);
        butCli.setBounds(470, 82, 24, 20);

        panFilCom.add(panEnu, java.awt.BorderLayout.CENTER);

        panFrmGrl.add(panFilCom, java.awt.BorderLayout.CENTER);

        panFec.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panFec.setPreferredSize(new java.awt.Dimension(560, 90));
        panFec.setLayout(new java.awt.BorderLayout());
        panFrmGrl.add(panFec, java.awt.BorderLayout.NORTH);

        tabFrm.addTab("Filtro", panFrmGrl);

        panRpt.setLayout(new java.awt.BorderLayout());

        spnDat.setPreferredSize(new java.awt.Dimension(453, 418));

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lin", "Código Empresa", "Código Alterno", "Código Item", "Nombre Item", "Stock Actual", "Bodega"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDat.setToolTipText("Doble click o ENTER para abrir la opción seleccionada.");
        tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblDat.setMaximumSize(new java.awt.Dimension(2147483647, 192));
        spnDat.setViewportView(tblDat);

        panRpt.add(spnDat, java.awt.BorderLayout.CENTER);

        spnTotal.setPreferredSize(new java.awt.Dimension(320, 35));

        tblTotal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTotal.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        spnTotal.setViewportView(tblTotal);

        panRpt.add(spnTotal, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("Reporte", panRpt);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butExp.setText("Exportar");
        butExp.setPreferredSize(new java.awt.Dimension(92, 25));
        butExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butExpActionPerformed(evt);
            }
        });
        panBot.add(butExp);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-418)/2, 600, 418);
    }// </editor-fold>//GEN-END:initComponents

    private void optFilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optFilActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_optFilActionPerformed
       
    private void optTodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_optTodActionPerformed
            /*Permite obtener un log de la tabla tbm_grpvar
 *
 */    
     
    
    
                    
    private void optTodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optTodItemStateChanged
       
    }//GEN-LAST:event_optTodItemStateChanged
    
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar accián de acuerdo a la etiqueta del botán ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar"))
        {
            //objTblTotales.isActivo(false);
            blnCon=true;
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();                
                
            }            
        }
        else
        {
            blnCon=false;
        }    
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicacián. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="áEstá seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void txtDesCorTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorTipDocActionPerformed
        // TODO add your handling code here:
        txtDesCorTipDoc.transferFocus();
    }//GEN-LAST:event_txtDesCorTipDocActionPerformed

    private void txtDesCorTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusGained
        // TODO add your handling code here:
        strDesCorTipDoc=txtDesCorTipDoc.getText();
        txtDesCorTipDoc.selectAll();
    }//GEN-LAST:event_txtDesCorTipDocFocusGained

    private void txtDesCorTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusLost
        // TODO add your handling code here:
        //Validar el contenido de la celda sálo si ha cambiado.
        if (!txtDesCorTipDoc.getText().equalsIgnoreCase(strDesCorTipDoc))
        {
            if (txtDesCorTipDoc.getText().equals(""))
            {
                txtCodTipDoc.setText("");
                txtDesLarTipDoc.setText("");
            }
            else
            {
                mostrarVenConTipDoc(1);
            }
        }
        else
            txtDesCorTipDoc.setText(strDesCorTipDoc);
    }//GEN-LAST:event_txtDesCorTipDocFocusLost

    private void txtDesLarTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarTipDocActionPerformed
        // TODO add your handling code here:
            txtDesLarTipDoc.transferFocus();
    }//GEN-LAST:event_txtDesLarTipDocActionPerformed

    private void txtDesLarTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusGained
        // TODO add your handling code here:
        strDesLarTipDoc=txtDesLarTipDoc.getText();
        txtDesLarTipDoc.selectAll();
    }//GEN-LAST:event_txtDesLarTipDocFocusGained

    private void txtDesLarTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusLost
        // TODO add your handling code here:
        //Validar el contenido de la celda sálo si ha cambiado.
        if (!txtDesLarTipDoc.getText().equalsIgnoreCase(strDesLarTipDoc))
        {
            if (txtDesLarTipDoc.getText().equals(""))
            {
                txtCodTipDoc.setText("");
                txtDesCorTipDoc.setText("");
            }
            else
            {
                mostrarVenConTipDoc(2);
            }
        }
        else
            txtDesLarTipDoc.setText(strDesLarTipDoc);
    }//GEN-LAST:event_txtDesLarTipDocFocusLost

    private void butTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butTipDocActionPerformed
        // TODO add your handling code here:
        mostrarVenConTipDoc(0);
    }//GEN-LAST:event_butTipDocActionPerformed

    private void txtCodCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodCliActionPerformed
        // TODO add your handling code here:
        txtCodCli.transferFocus();
    }//GEN-LAST:event_txtCodCliActionPerformed

    private void txtCodCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCliFocusGained
        // TODO add your handling code here:
    strCodCli=txtCodCli.getText();
    txtCodCli.selectAll();
    }//GEN-LAST:event_txtCodCliFocusGained

    private void txtCodCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCliFocusLost
        // TODO add your handling code here:
        //Validar el contenido de la celda sálo si ha cambiado.
        if (!txtCodCli.getText().equalsIgnoreCase(strCodCli))
        {
            if (txtCodCli.getText().equals(""))
            {
                txtCodCli.setText("");
                txtNomCli.setText("");
                objTblMod.removeAllRows();
            }
            else
            {
                mostrarVenConCli(1);
                optTod.setSelected(false);
                optFil.setSelected(true);
            }
        }
        else
        {   txtCodCli.setText(strCodCli);
            optTod.setSelected(false);
            optFil.setSelected(true);
        }
    }//GEN-LAST:event_txtCodCliFocusLost

    private void txtNomCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomCliActionPerformed
        // TODO add your handling code here:
        txtNomCli.transferFocus();
    }//GEN-LAST:event_txtNomCliActionPerformed

    private void txtNomCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliFocusGained
        // TODO add your handling code here:
    strDesLarCli=txtNomCli.getText();
    txtNomCli.selectAll();
    }//GEN-LAST:event_txtNomCliFocusGained

    private void txtNomCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliFocusLost
        // TODO add your handling code here:
        //Validar el contenido de la celda sálo si ha cambiado.
        if (!txtNomCli.getText().equalsIgnoreCase(strDesLarCli))
        {
            if (txtNomCli.getText().equals(""))
            {
                txtCodCli.setText("");
                txtNomCli.setText("");
                objTblMod.removeAllRows();
            }
            else
            {
                mostrarVenConCli(2);
            }
        }
        else
            txtNomCli.setText(strDesLarCli);
    }//GEN-LAST:event_txtNomCliFocusLost

    private void butCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCliActionPerformed
        // TODO add your handling code here:
        strCodCli=txtCodCli.getText();
        mostrarVenConCli(0);
    }//GEN-LAST:event_butCliActionPerformed

    private void butExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butExpActionPerformed
        // TODO add your handling code here:
        java.io.File filExc;
        Process pro;
        try{

            if(System.getProperty("os.name").equals("Linux")){
                filExc=new java.io.File("/tmp/ZafCon11.xls");
            }
            else{
                filExc=new java.io.File("C:\\Zafiro\\Reportes\\Contabilidad\\ZafCon11\\ZafCon11.xls");
            }


//            filExc=new java.io.File("C:\\Zafiro\\Reportes\\Contabilidad\\ZafCon11\\ZafCon11.xls");
            String strNomHoj="Hoja1";

            ZafCon11_01 objCon11_01= new ZafCon11_01(tblDat, filExc, strNomHoj);

            if(objCon11_01.export()){
                mostrarMsgInf("El archivo se cargó correctamente.");
//                Process pro = Runtime.getRuntime().exec("cmd /c start C:/Zafiro/Reportes/Contabilidad/ZafCon11/ZafCon11.xls");

                if(System.getProperty("os.name").equals("Linux")){
                    pro = Runtime.getRuntime().exec("oocalc /tmp/ZafCon11.xls");
                    System.out.println("LINUX: " + pro.toString());
                }
                else{
                    pro = Runtime.getRuntime().exec("cmd /c start C:/Zafiro/Reportes/Contabilidad/ZafCon11/ZafCon11.xls");
                    System.out.println("WINDOWS: " + pro.toString());
                }

            }
            else
                mostrarMsgInf("<HTML>Se generó un problema al cargar el archivo.<BR>El archivo puede estar abierto o no se generaró correctamente.</HTML>");
        } catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
}//GEN-LAST:event_butExpActionPerformed

    /** Cerrar la aplicacián. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCli;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butExp;
    private javax.swing.JButton butTipDoc;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblCli;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTipDoc;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optFil;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panEnu;
    private javax.swing.JPanel panFec;
    private javax.swing.JPanel panFilCom;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panFrmGrl;
    private javax.swing.JPanel panRpt;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JScrollPane spnTotal;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblTotal;
    private javax.swing.JTextField txtCodCli;
    private javax.swing.JTextField txtCodTipDoc;
    private javax.swing.JTextField txtDesCorTipDoc;
    private javax.swing.JTextField txtDesLarTipDoc;
    private javax.swing.JTextField txtNomCli;
    // End of variables declaration//GEN-END:variables


    /**
     * Esta funcián muestra un mensaje informativo al usuario. Se podráa utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }



    private boolean mostrarVenConCli_Old(int intTipBus)
    {
        String strAli, strCam;
        Librerias.ZafConsulta.ZafConsulta objVenCon;
        boolean blnRes=true;
        try
        {
            strAli="Cádigo, Identificacián, Nombre, Direccián";
            strCam="a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
            strSQL+=" FROM tbm_cli AS a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" AND st_reg='A'";
            objVenCon=new Librerias.ZafConsulta.ZafConsulta(javax.swing.JOptionPane.getFrameForComponent(this), strAli, strCam, strSQL, "", objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            objVenCon.setTitle("Listado de proveedores");
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    objVenCon.show();
                    if (objVenCon.acepto())
                    {
                        txtCodCli.setText(objVenCon.GetCamSel(1));
                        strIdeCli=objVenCon.GetCamSel(2);
                        txtNomCli.setText(objVenCon.GetCamSel(3));
                        strDirCli=objVenCon.GetCamSel(4);
                    }
                    break;
                case 1: //Básqueda directa por "Cádigo".
                    if (objVenCon.buscar("LOWER(a1.co_cli) LIKE '" + txtCodCli.getText() + "'"))
                    {
                        txtCodCli.setText(objVenCon.GetCamSel(1));
                        strIdeCli=objVenCon.GetCamSel(2);
                        txtNomCli.setText(objVenCon.GetCamSel(3));
                        strDirCli=objVenCon.GetCamSel(4);
                    }
                    else
                    {
                        objVenCon.setFiltroConsulta(txtCodCli.getText());
                        objVenCon.setSelectedTipBus(2);
                        objVenCon.setSelectedCamBus(0);
                        objVenCon.show();
                        if (objVenCon.acepto())
                        {
                            txtCodCli.setText(objVenCon.GetCamSel(1));
                            strIdeCli=objVenCon.GetCamSel(2);
                            txtNomCli.setText(objVenCon.GetCamSel(3));
                            strDirCli=objVenCon.GetCamSel(4);
                        }
                        else
                        {
                            txtCodCli.setText(strCodCli);
                        }
                    }
                    break;
                case 2: //Básqueda directa por "Descripcián larga".
                    if (objVenCon.buscar("LOWER(a1.tx_nom) LIKE '" + txtNomCli.getText().toLowerCase() + "'"))
                    {
                        txtCodCli.setText(objVenCon.GetCamSel(1));
                        strIdeCli=objVenCon.GetCamSel(2);
                        txtNomCli.setText(objVenCon.GetCamSel(3));
                        strDirCli=objVenCon.GetCamSel(4);
                    }
                    else
                    {
                        objVenCon.setFiltroConsulta(txtNomCli.getText());
                        objVenCon.setSelectedTipBus(2);
                        objVenCon.setSelectedCamBus(2);
                        objVenCon.show();
                        if (objVenCon.acepto())
                        {
                            txtCodCli.setText(objVenCon.GetCamSel(1));
                            strIdeCli=objVenCon.GetCamSel(2);
                            txtNomCli.setText(objVenCon.GetCamSel(3));
                            strDirCli=objVenCon.GetCamSel(4);
                        }
                        else
                        {
                            txtNomCli.setText(strDesLarCli);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }  

    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConCli(int intTipBus)
    {
        boolean blnRes = true;
        
        try
        {  switch (intTipBus)
           {  case 0: //Mostrar la ventana de consulta
                 vcoCli.setCampoBusqueda(2);
                 vcoCli.show();
                 if (vcoCli.getSelectedButton() == vcoCli.INT_BUT_ACE)
                 {  txtCodCli.setText(vcoCli.getValueAt(1));
                    txtNomCli.setText(vcoCli.getValueAt(3));
                    objTblMod.removeAllRows();
                 }
                 break;
                
              case 1: //Busqueda directa por "Codigo de cliente"
                 if (vcoCli.buscar("a1.co_cli", txtCodCli.getText()))
                 {  txtCodCli.setText(vcoCli.getValueAt(1));
                    txtNomCli.setText(vcoCli.getValueAt(3));
                    objTblMod.removeAllRows();
                 }
                 else
                 {  vcoCli.setCampoBusqueda(0);
                    vcoCli.setCriterio1(11);
                    vcoCli.cargarDatos();
                    vcoCli.show();
                    if (vcoCli.getSelectedButton() == vcoCli.INT_BUT_ACE)
                    {  txtCodCli.setText(vcoCli.getValueAt(1));
                       txtCodCli.setText(vcoCli.getValueAt(3));
                       objTblMod.removeAllRows();
                    }
                    else
                       txtCodCli.setText(strCodCli);
                 }
                 break;
                 
              case 2: //Busqueda directa por "Descripcion larga"
                 if (vcoCli.buscar("a1.tx_nom", txtNomCli.getText()))
                 {  txtCodCli.setText(vcoCli.getValueAt(1));
                    txtNomCli.setText(vcoCli.getValueAt(3));
                    objTblMod.removeAllRows();
                 }
                 else
                 {  vcoCli.setCampoBusqueda(2);
                    vcoCli.setCriterio1(11);
                    vcoCli.cargarDatos();
                    vcoCli.show();
                    if (vcoCli.getSelectedButton() == vcoCli.INT_BUT_ACE)
                    {  txtCodCli.setText(vcoCli.getValueAt(1));
                       txtNomCli.setText(vcoCli.getValueAt(3));
                       objTblMod.removeAllRows();
                    }
                    else
                       txtCodCli.setText(strDesLarCli);
                 }
                 break;
            }
        }
        
        catch (Exception e)
        {  blnRes = false;
           objUti.mostrarMsgErr_F1(this, e);
        }
        
        return blnRes;
    }

    private boolean invocarClase(String clase)
    {
        boolean blnRes=true;
        try
        {
            //Obtener el constructor de la clase que se va a invocar.
            Class objVen=Class.forName(clase);
            Class objCla[]=new Class[2];
            objCla[0]=objParSis.getClass();
            objCla[1]=new Integer(0).getClass();
            java.lang.reflect.Constructor objCon=objVen.getConstructor(objCla);
            //Inicializar el constructor que se obtuvo.
            Object objObj[]=new Object[2];
            objObj[0]=objParSis;
            objObj[1]=new Integer(tblDat.getValueAt(tblDat.getSelectedRow(),INT_TBL_DAT_COD_CLI).toString());
            javax.swing.JInternalFrame ifrVen;
            ifrVen=(javax.swing.JInternalFrame)objCon.newInstance(objObj);
            this.getParent().add(ifrVen,javax.swing.JLayeredPane.DEFAULT_LAYER);
            ifrVen.show();
        }
        catch (ClassNotFoundException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (NoSuchMethodException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (SecurityException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (InstantiationException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (IllegalAccessException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (IllegalArgumentException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (java.lang.reflect.InvocationTargetException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            
                                    
            if (!cargarDetReg()){
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            
            
            
            
            
            
            //Establecer el foco en el JTable sálo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }


    private boolean cargarReg()
    {
        boolean blnRes=true;
        try
        {
            System.out.println("TODO BIEN!!!");
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }         
    
 
    
    
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            strAux=objParSis.getNombreMenu() + strVersion;
            this.setTitle(strAux);
            lblTit.setText(strAux);

            //Configurar ZafSelFec:
            objSelFec=new ZafSelFec();
            objSelFec.setCheckBoxVisible(false);
            panFec.add(objSelFec);
            objSelFec.setBounds(4, 4, 472, 72);


            
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(18);    //Almacena las cabeceras
            vecCab.clear();

            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_CLI,"Cód.Cli.");
            vecCab.add(INT_TBL_DAT_NOM_CLI,"Nom.Cli.");
            vecCab.add(INT_TBL_DAT_TIP_OID,"Tip.Ide.");
            vecCab.add(INT_TBL_DAT_RUC_CLI,"Ruc");
            vecCab.add(INT_TBL_DAT_TIP_COM,"Tip.Com.");
            vecCab.add(INT_TBL_DAT_FEC_MES,"Fec.Emi.");
            vecCab.add(INT_TBL_DAT_BAS_CER,"Bas.Cer.");
            vecCab.add(INT_TBL_DAT_BAS_GRB,"Bas.Grb.");
            vecCab.add(INT_TBL_DAT_IVA_DCT,"Iva");
            vecCab.add(INT_TBL_DAT_BAS_ICE,"Bas.Ice.");
            vecCab.add(INT_TBL_DAT_COD_ICE,"Cod.Ice.");
            vecCab.add(INT_TBL_DAT_VAL_ICE,"Ice");
            vecCab.add(INT_TBL_DAT_CNT_FAC,"Can.Doc.");
            vecCab.add(INT_TBL_DAT_NUM_SER_FAC,"Núm.Ser.Doc.");
            vecCab.add(INT_TBL_DAT_VAL_COM_SOL,"Val.Com.Sol.");
            vecCab.add(INT_TBL_DAT_FOR_PAG_SRI,"For.Pag.");
            vecCab.add(INT_TBL_DAT_TIP_EMI,"Tip.Emi.");
            vecCab.add(INT_TBL_DAT_COD_IVA_SRI,"Cod.Iva");
            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);            
               
            //Configurar JTable: Establecer relacián entre el JTable de datos y JTable de totales.
            int intCol[]={INT_TBL_DAT_BAS_CER,INT_TBL_DAT_BAS_GRB,INT_TBL_DAT_IVA_DCT, INT_TBL_DAT_CNT_FAC,INT_TBL_DAT_VAL_COM_SOL};
            objTblTot=new ZafTblTot(spnDat, spnTotal, tblDat, tblTotal, intCol);            
            
            //Configurar JTable: Establecer tipo de seleccián.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el mená de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Tamaáo de las celdas
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_LIN).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(40);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(200);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_TIP_OID).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_RUC_CLI).setPreferredWidth(100);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_TIP_COM).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FEC_MES).setPreferredWidth(90);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_BAS_CER).setPreferredWidth(100);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_BAS_GRB).setPreferredWidth(100);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_IVA_DCT).setPreferredWidth(100);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_BAS_ICE).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_ICE).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_ICE).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_CNT_FAC).setPreferredWidth(60);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NUM_SER_FAC).setPreferredWidth(60);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_COM_SOL).setPreferredWidth(60);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FOR_PAG_SRI).setPreferredWidth(60);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_TIP_EMI).setPreferredWidth(60);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_IVA_SRI).setPreferredWidth(60);
            
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);                       
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_BAS_GRB).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_BAS_CER).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_IVA_DCT).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_COM_SOL).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
            //tblDat.getColumnModel().getColumn(INT_TBL_DAT_CNT_FAC).setCellRenderer(objTblCelRenLbl);
            tblTotal.setRowSelectionAllowed(true);
            tblTotal.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            //objColNum=new ZafColNumerada(tblTotal,INT_TBL_DAT_LIN);            
            tblTotal.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_LIN).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(40);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(200);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_TIP_OID).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_RUC_CLI).setPreferredWidth(100);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_TIP_COM).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_FEC_MES).setPreferredWidth(90);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_BAS_CER).setPreferredWidth(100);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_BAS_GRB).setPreferredWidth(100);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_IVA_DCT).setPreferredWidth(100);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_BAS_ICE).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_ICE).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_VAL_ICE).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_CNT_FAC).setPreferredWidth(60);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_VAL_COM_SOL).setPreferredWidth(60);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_NUM_SER_FAC).setPreferredWidth(60);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_VAL_COM_SOL).setPreferredWidth(60);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_FOR_PAG_SRI).setPreferredWidth(60);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_TIP_EMI).setPreferredWidth(60);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_IVA_SRI).setPreferredWidth(60);
            
            tblDat.getTableHeader().setReorderingAllowed(false);                        
            objTblBus=new ZafTblBus(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);


            configurarVenConTipDoc();
            configurarVenConPrv();
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    
    private boolean cargarDetReg(){
        boolean blnRes=true;
        int i, intNumTotReg;
        strAux="";
        String strAuxFecDia="";
        String strNomEmp="", strAuxLoc;
        BigDecimal bdeAux;
        
        try{
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");

            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if( ! txtCodTipDoc.getText().equals(""))
                strAux+=" AND a1.co_tipDoc=" + txtCodTipDoc.getText() + "";
            if( ! txtCodCli.getText().equals(""))
                strAux+=" AND a1.co_cli=" + txtCodCli.getText() + "";

            switch (objSelFec.getTipoSeleccion()){
                case 0: //Básqueda por rangos
                    strAux+=" AND (a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                    break;
                case 1: //Fechas menores o iguales que "Hasta".
                    strAux+=" AND (a1.fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                    break;
                case 2: //Fechas mayores o iguales que "Desde".
                    strAux+=" AND (a1.fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                    break;
                case 3: //Todo.
                    break;
            }

            
            switch (objSelFec.getTipoSeleccion()){
                case 0: //Básqueda por rangos
                    strAuxFecDia+=" AND (a1.fe_dia BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                    break;
                case 1: //Fechas menores o iguales que "Hasta".
                    strAuxFecDia+=" AND (a1.fe_dia<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                    break;
                case 2: //Fechas mayores o iguales que "Desde".
                    strAuxFecDia+=" AND (a1.fe_dia>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                    break;
                case 3: //Todo.
                    break;
            }

            if( ! txtCodTipDoc.getText().equals(""))
                strAuxFecDia+=" AND a1.co_tipDoc=" + txtCodTipDoc.getText() + "";

            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+=" SELECT x.tx_ruc AS rucCli, x.co_cli, x.tx_nomCli AS nomCli,";
                //strSQL+=" SUM(x.nd_basCer) AS nd_basCer, SUM(x.nd_basImp) AS nd_basImp,";
                strSQL+=" (SUM(x.nd_basCer_DetSoloSinIva) + SUM(x.nd_basCer_DetConSinIva)) AS nd_basCer, ";
                strSQL+=" (SUM(x.nd_basImp_DetSoloConIva) + SUM(x.nd_basImp_DetConSinIva)) AS nd_basImp, ";
                strSQL+=" 	SUM(x.nd_valIva)  AS ivaDoc,";
                strSQL+=" SUM(x.nd_tot)  AS nd_tot,";
                strSQL+=" MAX(x.fecRep) AS fecRep,";
                //strSQL+=" COUNT(*) AS numFacCli, x.tx_tipIde, x.tipCom, x.tx_numSerDoc, sum(x.nd_valComSol) as nd_valComSol, x.co_forPagSri, x.tx_tipEmi, x.ne_codIvaSri ";
                strSQL+=" COUNT(*) AS numFacCli, x.tx_tipIde, x.tipCom, x.tx_numSerDoc, (sum(x.nd_valComSol))*0.02 as nd_valComSol, x.co_forPagSri, x.tx_tipEmi, x.ne_codIvaSri ";
                strSQL+=" FROM(";
                
                //strSQL+=" SELECT b1.* FROM(";
                strSQL+=" SELECT b1.co_emp, b1.co_loc, b1.co_tipDoc, b1.co_doc, b1.tx_ruc, b1.co_cli, b1.tx_nomCli, b1.nd_poriva, b1.ne_tipforpag, ";
                //strSQL+="    (case when b1.nd_basImp is not null then b1.nd_basImp else 0 end) as nd_basImp, ";
                //strSQL+="    (case when b1.nd_basCer is not null then b1.nd_basCer else 0 end) as nd_basCer, ";
                strSQL+="    (case when b1.nd_basImp_DetSoloConIva is not null then b1.nd_basImp_DetSoloConIva else 0 end) as nd_basImp_DetSoloConIva, ";
                strSQL+="    (case when b1.nd_basCer_DetSoloSinIva is not null then b1.nd_basCer_DetSoloSinIva else 0 end) as nd_basCer_DetSoloSinIva, ";
                strSQL+="    (case when b1.nd_basImp_DetConSinIva is not null then b1.nd_basImp_DetConSinIva else 0 end) as nd_basImp_DetConSinIva, ";
                strSQL+="    (case when b1.nd_basCer_DetConSinIva is not null then b1.nd_basCer_DetConSinIva else 0 end) as nd_basCer_DetConSinIva, ";
                strSQL+="    b1.nd_valIva, b1.nd_tot, b1.fecRep, b1.tx_tipIde, b1.tipCom, b1.tx_numSerDoc, b1.nd_valcomsol, b1.co_forpagsri, b1.tx_tipemi, b1.ne_codIvaSri ";
                strSQL+="FROM(";
                
                strSQL+="       SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc,";
                strSQL+="       a1.tx_ruc, a1.co_cli, a1.tx_nomCli, a1.nd_poriva, a4.ne_tipforpag, ";
                /*
                strSQL+="       CASE WHEN a1.nd_valIva<>0 THEN a1.nd_sub";
                strSQL+="               ELSE 0 END AS nd_basImp";
                strSQL+="       ,CASE WHEN a1.nd_valIva=0 THEN a1.nd_sub";
                strSQL+="               ELSE 0 END AS nd_basCer,";
                */
                
                //Subquery para traer Base Imponible de IVA <> 0% donde en tbm_detMovInv solo hallan registros que tengan items con IVA
                strSQL+="       ( select CASE WHEN a1.nd_valIva <> 0 THEN a1.nd_sub ELSE 0 END AS nd_basImp ";
                strSQL+="         from tbm_cabMovInv ";
                strSQL+="         where co_emp = a1.co_emp and co_loc = a1.co_loc and co_tipdoc = a1.co_tipdoc and co_doc = a1.co_doc ";
                strSQL+="            and ( select count(a.*) ";
                strSQL+="                  from ( select distinct st_ivacom from tbm_detMovInv where co_emp = a1.co_emp and co_loc = a1.co_loc and co_tipdoc = a1.co_tipdoc and co_doc = a1.co_doc ";
		strSQL+="		        ) as a ";
		strSQL+="                ) = 1 ";
		strSQL+="            and ( select distinct st_ivacom from tbm_detMovInv where co_emp = a1.co_emp and co_loc = a1.co_loc and co_tipdoc = a1.co_tipdoc and co_doc = a1.co_doc ";
		strSQL+="                ) = 'S' ";
                strSQL+="       ) AS nd_basImp_DetSoloConIva, ";

                //Subquery para traer Base Imponible de IVA 0% donde en tbm_detMovInv solo hallan registros que no tengan items con IVA
                strSQL+="       ( select CASE WHEN a1.nd_valIva = 0 THEN a1.nd_sub ELSE 0 END AS nd_basCer ";
                strSQL+="         from tbm_cabMovInv ";
                strSQL+="         where co_emp = a1.co_emp and co_loc = a1.co_loc and co_tipdoc = a1.co_tipdoc and co_doc = a1.co_doc ";
                strSQL+="            and ( select count(a.*) ";
                strSQL+="                  from ( select distinct st_ivacom from tbm_detMovInv where co_emp = a1.co_emp and co_loc = a1.co_loc and co_tipdoc = a1.co_tipdoc and co_doc = a1.co_doc ";
		strSQL+="		        ) as a ";
		strSQL+="                ) = 1 ";
		strSQL+="            and ( select distinct st_ivacom from tbm_detMovInv where co_emp = a1.co_emp and co_loc = a1.co_loc and co_tipdoc = a1.co_tipdoc and co_doc = a1.co_doc ";
		strSQL+="                ) = 'N' ";
                strSQL+="       ) AS nd_basCer_DetSoloSinIva, ";

                //Subquery para traer Base Imponible de IVA <> 0% donde en tbm_detMovInv hallan registros que tengan items con y sin IVA
                strSQL+="       ( select round( (sum( (nd_can * nd_preuni) - (nd_can * nd_preuni * (nd_pordes / 100)) )), 2) as nd_basImp ";
                strSQL+="         from tbm_detMovInv ";
                strSQL+="         where st_ivacom = 'S' and co_emp = a1.co_emp and co_loc = a1.co_loc and co_tipdoc = a1.co_tipdoc and co_doc = a1.co_doc ";
                strSQL+="            and ( select count(a.*) ";
                strSQL+="                  from ( select distinct st_ivacom from tbm_detMovInv where co_emp = a1.co_emp and co_loc = a1.co_loc and co_tipdoc = a1.co_tipdoc and co_doc = a1.co_doc ";
		strSQL+="		        ) as a ";
		strSQL+="                ) > 1 ";
                strSQL+="       ) AS nd_basImp_DetConSinIva, ";

                //Subquery para traer Base Imponible de IVA 0% donde en tbm_detMovInv hallan registros que tengan items con y sin IVA
                strSQL+="       ( select round( (sum( (nd_can * nd_preuni) - (nd_can * nd_preuni * (nd_pordes / 100)) )), 2) as nd_basCer ";
                strSQL+="         from tbm_detMovInv ";
                strSQL+="         where st_ivacom = 'N' and co_emp = a1.co_emp and co_loc = a1.co_loc and co_tipdoc = a1.co_tipdoc and co_doc = a1.co_doc ";
                strSQL+="            and ( select count(a.*) ";
                strSQL+="                  from ( select distinct st_ivacom from tbm_detMovInv where co_emp = a1.co_emp and co_loc = a1.co_loc and co_tipdoc = a1.co_tipdoc and co_doc = a1.co_doc ";
		strSQL+="		        ) as a ";
		strSQL+="                ) > 1 ";
                strSQL+="       ) AS nd_basCer_DetConSinIva, ";
                
                strSQL+="       a1.nd_valIva  AS nd_valIva,";
                strSQL+="       a1.nd_tot  AS nd_tot,";
                strSQL+="       MAX(a1.fe_doc) AS fecRep";
                strSQL+="       , a2.tx_tipIde";
                strSQL+="       ,CASE WHEN a1.co_tipDoc IN(1,228) THEN '18'";
                strSQL+="       WHEN a1.co_tipDoc IN(3,28,229) THEN '04'";
                strSQL+="       WHEN a1.co_tipDoc IN(51) THEN '05'";
                strSQL+="       ELSE '' END AS tipCom";
                strSQL+="       , (CASE WHEN substring(a3.tx_numSerFac, 4, 1) = '-' THEN substring(a3.tx_numSerFac, 5, 3) ELSE substring(a3.tx_numSerFac, 4, 3) END) AS tx_numSerDoc, ";
                                //Cod_emp 2 Cod_loc 4 = Castek Manta
                
                //cambio tony valor  compensacion mal
//                strSQL+="       ( case when a1.co_tipDoc in (228) and a1.co_emp = 2 and a1.co_loc = 4 and a1.fe_doc >= '2016-06-01' then a1.nd_sub * 0.02 ";
//                strSQL+="              else 0 ";
//                strSQL+="       end ) as nd_valComSol, "; // nd_valComSol = Valor de Compensacion Solidaria 
                strSQL+="(case when a1.co_tipDoc in (228)   and a1.fe_doc >= '2016-06-01' and a1.fe_doc <= '2017-01-31' and a1.nd_poriva = 12 or ( a1.co_tipDoc in (229)  and a1.fe_doc >= '2016-06-01' and a1.fe_doc <= '2017-01-31' and a1.nd_poriva = 12 )  then \n" +
"                                   (case when  (select CASE WHEN a1.nd_valIva <> 0 THEN a1.nd_sub ELSE 0 END AS nd_basImp\n" +
"                        from tbm_cabMovInv          \n" +
"                       where co_emp = a1.co_emp \n" +
"                         and co_loc = a1.co_loc \n" +
"                         and co_tipdoc = a1.co_tipdoc \n" +
"                         and co_doc = a1.co_doc              \n" +
"                         and (select count(a.*)\n" +
"                              from (select distinct st_ivacom \n" +
"                                    from tbm_detMovInv \n" +
"                                   where co_emp = a1.co_emp \n" +
"                                     and co_loc = a1.co_loc \n" +
"                                     and co_tipdoc = a1.co_tipdoc \n" +
"                                     and co_doc = a1.co_doc) as a) = 1\n" +
"                                     and (select distinct st_ivacom \n" +
"                                          from tbm_detMovInv \n" +
"                                          where co_emp = a1.co_emp \n" +
"                                          and co_loc = a1.co_loc \n" +
"                                          and co_tipdoc = a1.co_tipdoc \n" +
"                                          and co_doc = a1.co_doc) = 'S') \n" +
"                                          is not null then\n" +
"	(select CASE WHEN a1.nd_valIva <> 0 THEN a1.nd_sub ELSE 0 END AS nd_basImp\n" +
"                        from tbm_cabMovInv          \n" +
"                       where co_emp = a1.co_emp \n" +
"                         and co_loc = a1.co_loc \n" +
"                         and co_tipdoc = a1.co_tipdoc \n" +
"                         and co_doc = a1.co_doc             \n" +
"                         and (select count(a.*)\n" +
"                              from (select distinct st_ivacom \n" +
"                                    from tbm_detMovInv \n" +
"                                   where co_emp = a1.co_emp \n" +
"                                     and co_loc = a1.co_loc \n" +
"                                     and co_tipdoc = a1.co_tipdoc \n" +
"                                     and co_doc = a1.co_doc) as a) = 1\n" +
"                                     and (select distinct st_ivacom \n" +
"                                          from tbm_detMovInv \n" +
"                                          where co_emp = a1.co_emp \n" +
"                                          and co_loc = a1.co_loc \n" +
"                                          and co_tipdoc = a1.co_tipdoc \n" +
"                                          and co_doc = a1.co_doc) = 'S') \n" +
"else 0\n" +
"                                            end)\n" +
"                                          \n" +
"                                          +\n" +
"\n" +
"(case when \n" +
"                                          (select CASE WHEN a1.nd_valIva = 0 THEN a1.nd_sub ELSE 0 END AS nd_basCer\n" +
"                                            from tbm_cabMovInv          \n" +
"                                           where co_emp = a1.co_emp \n" +
"                                             and co_loc = a1.co_loc \n" +
"                                             and co_tipdoc = a1.co_tipdoc \n" +
"                                             and co_doc = a1.co_doc             \n" +
"                                             and (select count(a.*)\n" +
"                                                  from (select distinct st_ivacom \n" +
"                                                        from tbm_detMovInv \n" +
"                                                        where co_emp = a1.co_emp \n" +
"                                                        and co_loc = a1.co_loc \n" +
"                                                        and co_tipdoc = a1.co_tipdoc \n" +
"                                                        and co_doc = a1.co_doc) as a) = 1\n" +
"                                                        and (select distinct st_ivacom \n" +
"                                                             from tbm_detMovInv \n" +
"                                                             where co_emp = a1.co_emp \n" +
"                                                             and co_loc = a1.co_loc \n" +
"                                                             and co_tipdoc = a1.co_tipdoc \n" +
"                                                             and co_doc = a1.co_doc) = 'N')\n" +
"                                                             is not null \n" +
"then (select CASE WHEN a1.nd_valIva = 0 THEN a1.nd_sub ELSE 0 END AS nd_basCer\n" +
"                                            from tbm_cabMovInv          \n" +
"                                           where co_emp = a1.co_emp \n" +
"                                             and co_loc = a1.co_loc \n" +
"                                             and co_tipdoc = a1.co_tipdoc \n" +
"                                             and co_doc = a1.co_doc             \n" +
"                                             and (select count(a.*)\n" +
"                                                  from (select distinct st_ivacom \n" +
"                                                        from tbm_detMovInv \n" +
"                                                        where co_emp = a1.co_emp \n" +
"                                                        and co_loc = a1.co_loc \n" +
"                                                        and co_tipdoc = a1.co_tipdoc \n" +
"                                                        and co_doc = a1.co_doc) as a) = 1\n" +
"                                                        and (select distinct st_ivacom \n" +
"                                                             from tbm_detMovInv \n" +
"                                                             where co_emp = a1.co_emp \n" +
"                                                             and co_loc = a1.co_loc \n" +
"                                                             and co_tipdoc = a1.co_tipdoc \n" +
"                                                             and co_doc = a1.co_doc) = 'N')\n" +
"                                                             else 0 end\n" +
"                                                             ) else 0 end \n" +
"                                                             ) as nd_valComSol,";
                
                
                strSQL+="       ( case when a1.co_tipDoc in (1,228) and a4.ne_tipforpag = 1 then 1 "; //1 = Sin utilizacion del sistema financiero
                strSQL+="              when a1.co_tipDoc in (3,28,51,229) then 1 "; //1 = Sin utilizacion del sistema financiero
                strSQL+="              when a1.fe_doc >= '2016-09-01' and a1.co_tipDoc in (1,228) and a4.ne_tipforpag = 4 then 19 "; //19 = Tarjeta de credito
                strSQL+="              when a1.fe_doc >= '2016-09-01' and a1.co_tipDoc in (1,228) and a4.ne_tipforpag not in (1,4) then 20 "; //20 = Otros con utilizacion del sistema financiero
                strSQL+="              when a1.fe_doc < '2016-09-01' and a1.co_tipDoc in (1,228) and a4.ne_tipforpag in (4) then 1 "; //1 = Sin utilizacion del sistema financiero
                strSQL+="              when a1.fe_doc < '2016-09-01' and a1.co_tipDoc in (1,228) and a4.ne_tipforpag not in (1,4) then 2 "; //2 = Cheque propio (credito)
                strSQL+="              else 0 ";
                strSQL+="       end ) as co_forPagSri, ";
                strSQL+="       ( case when a1.co_tipDoc in (1,3) then 'F' "; // F = FACTURA FISICA
                strSQL+="              when a1.co_tipDoc in (228,229) then 'E' "; // E = FACTURA ELECTRONICA
                strSQL+="              else '' ";
                strSQL+="       end ) as tx_tipEmi, ";
                strSQL+="       ( case when a1.nd_porIva = 12 then 2 "; //2 = Cod. Iva 12%
                strSQL+="              when a1.nd_porIva = 14 then 3 "; //3 = Cod. Iva 14%
                strSQL+="              else 0 ";
                strSQL+="       end ) as ne_codIvaSri ";
                strSQL+="               FROM ((tbm_cabMovInv AS a1 INNER JOIN tbm_cli AS a2 ON a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli) INNER JOIN tbm_cabTipDoc AS b1";
                strSQL+="                   ON a1.co_emp=b1.co_emp AND a1.co_loc=b1.co_loc AND a1.co_tipDoc=b1.co_tipDoc";
                if(objParSis.getCodigoUsuario()==1){
                    strSQL+="       INNER JOIN tbr_tipDocPrg AS b2 ";
                    strSQL+="       ON b1.co_emp=b2.co_emp AND b1.co_loc=b2.co_loc AND b1.co_tipdoc=b2.co_tipDoc";
                }
                else{
                    strSQL+="       INNER JOIN tbr_tipDocUsr AS b2 ";
                    strSQL+="       ON b1.co_emp=b2.co_emp AND b1.co_loc=b2.co_loc AND b1.co_tipdoc=b2.co_tipDoc";
                }
                strSQL+=" )";
                strSQL+="               LEFT OUTER JOIN tbm_datAutSri AS a3";
                strSQL+="               ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc";
                strSQL+="               AND a1.ne_numDoc BETWEEN a3.ne_numDocDes AND a3.ne_numDocHas";
                strSQL+="               LEFT OUTER JOIN tbm_cabforpag as a4 on a1.co_emp = a4.co_emp and a1.co_forpag = a4.co_forpag ";
                strSQL+="       WHERE a1.st_reg IN('A','C','F','O')";


                if(objParSis.getCodigoUsuario()==1){
                    strSQL+=" AND a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                }
                else{
                    if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                        strSQL+=" AND a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+=" AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+=" )";
                    }
                    else{
                        strSQL+=" AND a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        //--- Inicio bloque comentado el 09/Ene/2018 ---
                        //Se comenta esta linea para que se muestre en el listado todos los locales de la empresa, sin importar el local por el cual el
                        //usuario se logoneo.
                        //strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                        //--- Fin bloque comentado el 09/Ene/2018 ------
                        strSQL+=" AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="                           AND co_loc=" + objParSis.getCodigoLocal() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+=" )";
                    }
                }
                strSQL+=strAux;
                strSQL+="    AND b1.ne_mod IN(1,2,3) AND b2.co_mnu=" + objParSis.getCodigoMenu() + "";
                if(objParSis.getCodigoUsuario()!=1)
                    strSQL+="    AND b2.co_usr=" + objParSis.getCodigoUsuario() + "";
                strSQL+=" 	GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc,";
                strSQL+=" 	a1.tx_ruc, a1.co_cli, a1.tx_nomCli, a4.ne_tipForPag, a2.tx_tipIde,a1.nd_valIva,a1.nd_sub,a1.nd_tot, a3.tx_numSerFac,a1.nd_poriva,a1.fe_doc";
                strSQL+=" 	ORDER BY a1.tx_nomCli";
                
                
                strSQL+=" 		) AS b1";
                strSQL+="		INNER JOIN(";
                strSQL+=" 			SELECT a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_dia";
                strSQL+=" 			FROM tbm_cabDia AS a1 INNER JOIN tbm_detDia AS a2";
                strSQL+=" 			ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_dia=a2.co_dia";
                strSQL+=" 			WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="                       AND a1.st_reg NOT IN('I','E')";
                strSQL+="" + strAuxFecDia;
                
                
                strNomEmp = "" + objParSis.getNombreEmpresa();
                strNomEmp = strNomEmp.substring(0,6);

                if(strNomEmp.toUpperCase().trim().equals("ECUATO")){
                    if(objParSis.getCodigoEmpresa()==1)
                        strSQL+=" AND a2.co_cta IN(411,428)";
                }
                else if(strNomEmp.toUpperCase().trim().equals("DETOPA")){
                    if(objParSis.getCodigoEmpresa()==1)
                        strSQL+=" AND a2.co_cta IN(1811,2069)";
                }
                else{
                    if (objParSis.getCodigoEmpresa()==1)//tuval y cosenco
                    {  strSQL+=" AND a2.co_cta IN(1434,1815,1030"; //1815 = OTROS INGRESOS POR SERVICIOS //4680 = VENTAS CON IVA 0%tuval 2058= ventas con iva 0 cosenco  
                       if (strNomEmp.toUpperCase().trim().equals("TUVAL"))
                       {  strSQL+="4545,4680,1810,677,1809)";  } //INTERES GANADOS = 1810 //VEHICULOS=677 //OTROS INGRESOS = 1809
                       else
                       {  strSQL+="2034,2058,1810,677,1809)";  } //Cosenco //INTERES GANADOS = 1810 //VEHICULOS = 677 //OTROS INGRESOS = 1809
                    }
                    
                    if (objParSis.getCodigoEmpresa()==2)//castek
                    {  //907 = OTROS INGRESOS POR SERVICIOS //ventas con iva 0 castek 2303 //INTERESES GANADOS=902 //VEHICULOS=119 //OTROS INGRESOS = 901
                       strSQL+=" AND a2.co_cta IN(1163,551,1037,545,1904,907,224,2218,2303,902,119,901)";
                    }
                    
                    if (objParSis.getCodigoEmpresa()==4)//dimulti
                    {  //1747 = OTROS INGRESOS POR SERVICIOS //ventas iva 0 dimulti //INTERESES GANADOS = 1742 //VEHICULOS=637 //OTROS INGRESOS = 1741
                       strSQL+=" AND a2.co_cta IN(1373,1747,977,3135,3210,1742,637,1741)"; 
                    }
                }

                strSQL+="           ) AS b2";
                strSQL+=" ON b1.co_emp=b2.co_emp AND b1.co_loc=b2.co_loc AND b1.co_tipDoc=b2.co_tipDoc AND b1.co_doc=b2.co_dia";
                strSQL+=" GROUP BY b1.co_emp, b1.co_loc, b1.co_tipDoc, b1.co_doc, b1.tx_ruc, b1.co_cli, b1.tx_nomCli, b1.nd_poriva, ";
                strSQL+=" b1.ne_tipForPag, b1.co_forPagSri, b1.tx_tipEmi, ";
                //strSQL+="   b1.nd_basImp, b1.nd_basCer, ";
                strSQL+=" b1.nd_basImp_DetSoloConIva, b1.nd_basCer_DetSoloSinIva, b1.nd_basImp_DetConSinIva, b1.nd_basCer_DetConSinIva, ";
                strSQL+="   b1.nd_valIva, b1.nd_tot, b1.tx_tipIde, b1.tipCom, b1.fecRep, b1.tx_numSerDoc, b1.nd_valComSol, b1.ne_codIvaSri";
                strSQL+=" ) AS x";
                strSQL+=" GROUP BY x.tx_ruc, x.co_cli, x.tx_nomCli, x.nd_poriva, x.tx_tipIde, x.tipCom, x.tx_numSerDoc,  x.co_forPagSri, x.tx_tipEmi, x.ne_codIvaSri";
                strSQL+=" ORDER BY x.tx_nomCli";
                System.out.println("SQL: " + strSQL);
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                //pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;
                
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_COD_CLI, ""+rst.getString("co_cli"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI, ""+rst.getString("nomCli"));
                        
                        //vecReg.add(INT_TBL_DAT_TIP_OID, ""+rst.getString("tx_tipIde"));
                        strAuxLoc = buscarTipoIdentificacion(rst.getString("rucCli"));
                        vecReg.add(INT_TBL_DAT_TIP_OID, "" + strAuxLoc);
                        
                        //vecReg.add(INT_TBL_DAT_RUC_CLI, ""+rst.getObject("rucCli")==null?"":rst.getString("rucCli"));
                        strAuxLoc = rst.getObject("rucCli") == null? "" :rst.getString("rucCli");
                        strAuxLoc = buscarNumEnCadena(strAuxLoc);
                        vecReg.add(INT_TBL_DAT_RUC_CLI, "" + strAuxLoc);
                        
                        vecReg.add(INT_TBL_DAT_TIP_COM, ""+rst.getString("tipCom"));
                        vecReg.add(INT_TBL_DAT_FEC_MES, ""+objUti.formatearFecha(rst.getDate("fecRep"), "dd/MM/yyyy"));
                        vecReg.add(INT_TBL_DAT_BAS_CER, ""+(objUti.redondearBigDecimal(rst.getString("nd_basCer"), objParSis.getDecimalesMostrar())).multiply(new BigDecimal("-1")));
                        vecReg.add(INT_TBL_DAT_BAS_GRB, ""+(objUti.redondearBigDecimal(rst.getString("nd_basImp"), objParSis.getDecimalesMostrar())).multiply(new BigDecimal("-1")));
                        vecReg.add(INT_TBL_DAT_IVA_DCT, ""+(objUti.redondearBigDecimal(rst.getString("ivaDoc"), objParSis.getDecimalesMostrar())).multiply(new BigDecimal("-1")));
                        vecReg.add(INT_TBL_DAT_BAS_ICE, "");
                        vecReg.add(INT_TBL_DAT_COD_ICE, "");
                        vecReg.add(INT_TBL_DAT_VAL_ICE, "");
                        vecReg.add(INT_TBL_DAT_CNT_FAC, ""+rst.getString("numFacCli"));
                        vecReg.add(INT_TBL_DAT_NUM_SER_FAC, ""+rst.getString("tx_numSerDoc"));
                        
                        bdeAux = rst.getBigDecimal("nd_valComSol");
                        bdeAux = objUti.redondearBigDecimal(bdeAux, objParSis.getDecimalesMostrar());

                        if (bdeAux.equals(new BigDecimal("0.00")))
                        {   
                           strAuxLoc = "";
                        }
                        else
                        {  bdeAux = bdeAux.multiply(new BigDecimal("-1"));
                           strAuxLoc = bdeAux.toString();
                        }

                        vecReg.add(INT_TBL_DAT_VAL_COM_SOL, strAuxLoc);

                        vecReg.add(INT_TBL_DAT_FOR_PAG_SRI, ""+rst.getString("co_forPagSri"));
                        vecReg.add(INT_TBL_DAT_TIP_EMI, ""+rst.getString("tx_tipEmi"));
                        vecReg.add(INT_TBL_DAT_COD_IVA_SRI, ""+rst.getInt("ne_codIvaSri"));
                        vecDat.add(vecReg);
                        i++;
                        pgrSis.setValue(i);
                    }
                    else{
                        break;
                    }
                }
                
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();

                if (tblDat.getRowCount()==tblDat.getRowCount())
                    lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
                tabFrm.setSelectedIndex(1);
                //Establecer el foco en el JTable sálo cuando haya datos.
                if (tblDat.getRowCount()>0){
                    tblDat.setRowSelectionInterval(0, 0);
                    tblDat.requestFocus();
                }

                objTblTot.calcularTotales();
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private String buscarTipoIdentificacion(String strCad)
    {
      String strRes = "", strUlt3Dig, strAux;
     
      try
      {
         strAux = "";
         strUlt3Dig = "";
         
         if (strCad.length() == 13)
            strUlt3Dig = strCad.substring(10, 13);
         
         if (strCad.length() == 13 && strUlt3Dig.equals("001"))
            strAux = "R";
         else if (strCad.length() == 10 && objUti.isNumero(strCad) == true)
            strAux = "C";
         else if (strCad.equals("9999999999999"))
            strAux = "F";
         else
            strAux = "P";
         
         strRes = strAux;
      }
       
      catch(Exception e)
      {
         strRes = strCad;
      }
    
      return strRes;
    } //Funcion buscarTipoIdentificacion()
    
    private String buscarNumEnCadena(String strCad)
    {
      //Esta funcion barre todo el contenido de la cadena y en la cadena resultante solo va a quedar numeros. Los caracteres que no sean numeros seran ignorados.
      String strRes = "", strAux;
      char[] arrCad;
      int i;
      
      try
      {
         strAux = "";
         arrCad = strCad.toCharArray();
         
         for (i = 0; i < arrCad.length; i++)
         {  if (arrCad[i] == '0' || arrCad[i] == '1' || arrCad[i] == '2' || arrCad[i] == '3' || arrCad[i] == '4' || arrCad[i] == '5' 
               || arrCad[i] == '6' || arrCad[i] == '7' || arrCad[i] == '8' || arrCad[i] == '9')
            {  //Solo se concatena si el caracter es un numero.
               strAux += arrCad[i];
            }
         }
         
         strRes = strAux;
      }
       
      catch(Exception e)
      {
         strRes = strCad;
      }
    
      return strRes;
    } //Funcion buscarNumEnCadena()

    /**
     * Esta funcián configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Tipos de documentos".
     */
    private boolean configurarVenConTipDoc()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_tipdoc");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            arlCam.add("a1.ne_ultDoc");
            arlCam.add("a1.tx_natDoc");
            arlCam.add("tblActNumDoc");
            arlCam.add("a2.co_grpTipDoc");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Tip.Doc.");
            arlAli.add("Tipo de documento");
            arlAli.add("Ult.Doc.");
            arlAli.add("Nat.Doc.");
            arlAli.add("Ref.Tbl.Act.");
            arlAli.add("Cod.Grp.Tbl.Tip.Doc.");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            arlAncCol.add("80");
            arlAncCol.add("80");
            arlAncCol.add("80");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            if(objParSis.getCodigoUsuario()==1){
                strSQL="";
                strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar, ";
                strSQL+=" CASE WHEN a2.ne_ultDoc IS NULL THEN a1.ne_ultDoc ELSE a2.ne_ultDoc END AS ne_ultDoc";
                strSQL+=" ,a1.tx_natDoc";
                strSQL+=" ,CASE WHEN a2.ne_ultDoc IS NULL THEN 'L' ELSE 'G' END AS tblActNumDoc, a2.co_grpTipDoc";
                strSQL+=" FROM (tbm_cabTipDoc AS a1 LEFT OUTER JOIN tbm_cabGrpTipDoc AS a2 ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_grpTipDoc=a2.co_grpTipDoc)";
                strSQL+=" INNER JOIN tbr_tipDocPrg AS a3";
                strSQL+=" ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();
                strSQL+=" AND a3.co_mnu=" + objParSis.getCodigoMenu();
                strSQL+=" ORDER BY a1.tx_desCor";
            }
            else{
                strSQL="";
                strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar,";
                strSQL+=" CASE WHEN a2.ne_ultDoc IS NULL THEN a1.ne_ultDoc ELSE a2.ne_ultDoc END AS ne_ultDoc";
                strSQL+=" ,a1.tx_natDoc";
                strSQL+=" ,CASE WHEN a2.ne_ultDoc IS NULL THEN 'L' ELSE 'G' END AS tblActNumDoc, a2.co_grpTipDoc";
                strSQL+=" FROM tbr_tipDocUsr AS a3 inner join  (tbm_cabTipDoc AS a1 LEFT OUTER JOIN tbm_cabGrpTipDoc AS a2 ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_grpTipDoc=a2.co_grpTipDoc)";
                strSQL+=" ON (a1.co_emp=a3.co_emp and a1.co_loc=a3.co_loc and a1.co_tipdoc=a3.co_tipdoc)";
                strSQL+=" WHERE ";
                strSQL+=" a3.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a3.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" AND a3.co_mnu=" + objParSis.getCodigoMenu() + "";
                strSQL+=" AND a3.co_usr=" + objParSis.getCodigoUsuario() + "";
            }


            //Ocultar columnas.
            int intColOcu[]=new int[3];
            intColOcu[0]=7;
            vcoTipDoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de tipos de documentos", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoTipDoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoTipDoc.setConfiguracionColumna(4, javax.swing.JLabel.RIGHT);


        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConTipDoc(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoTipDoc.setCampoBusqueda(1);
                    vcoTipDoc.show();
                    if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    break;
                case 1: //Básqueda directa por "Descripcián corta".
                    if (vcoTipDoc.buscar("a1.tx_desCor", txtDesCorTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(1);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        }
                        else
                        {
                            txtDesCorTipDoc.setText(strDesCorTipDoc);
                        }
                    }
                    break;
                case 2: //Básqueda directa por "Descripcián larga".
                    if (vcoTipDoc.buscar("a1.tx_desLar", txtDesLarTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(2);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        }
                        else
                        {
                            txtDesLarTipDoc.setText(strDesLarTipDoc);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funcián configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConPrv()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Identificación");
            arlAli.add("Nombre");
            arlAli.add("Dirección");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                strSQL="";
                strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
                strSQL+=" FROM tbm_cli AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.st_cli='S'";
                strSQL+=" ORDER BY a1.tx_nom";
            }
            else{
                strSQL="";
                strSQL+="SELECT a2.co_cli, a2.tx_ide, a2.tx_nom, a2.tx_dir";
                strSQL+=" FROM tbr_cliLoc AS a1 INNER JOIN tbm_cli AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" AND a2.st_cli='S'";
                strSQL+=" ORDER BY a2.tx_nom";
            }
            //Ocultar columnas.
            int intColOcu[]=new int[1];
            intColOcu[0]=4;
            vcoCli=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de clientes", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoCli.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



}