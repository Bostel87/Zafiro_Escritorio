/*
 * ZafCom08.java
 *
 * Created on 16 de enero de 2005, 17:10 PM
 */

package Contabilidad.ZafCon16;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
//import Librerias.ZafPopupMenu.ZafPopupMenu;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafSelFec.ZafSelFec;
import Librerias.ZafTblUti.ZafTblTot.ZafTblTot;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
//import Librerias.ZafSelFec.ZafSelFec;
import java.util.ArrayList;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.view.JasperViewer;
import java.util.HashMap;
import java.util.Map;
import java.sql.*;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
/**
 *
 * @author  Eddye Lino
 */
public class ZafCon16 extends javax.swing.JInternalFrame 
{
    //Constantes: Columnas del JTable:
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_EMP=1;
    final int INT_TBL_DAT_COD_LOC=2;
    final int INT_TBL_DAT_COD_TIP_DOC=3;
    final int INT_TBL_DAT_COD_DOC=4;
    final int INT_TBL_DAT_TIP=5;
    final int INT_TBL_DAT_NUM_DOC=6;
    final int INT_TBL_DAT_FEC_DOC=7;
    final int INT_TBL_DAT_SUB=8;
    final int INT_TBL_DAT_DES=9;
    final int INT_TBL_DAT_VAL_NET=10;
    final int INT_TBL_DAT_IVA=11;
    final int INT_TBL_DAT_TOT_DOC=12;
    final int INT_TBL_DAT_VAL_ABO=13;
    final int INT_TBL_DAT_VAL_PND=14;
    final int INT_TBL_DAT_COD_CLI=15;
    final int INT_TBL_DAT_NOM_CLI=16;
    final int INT_TBL_DAT_RUC_CLI=17;
    final int INT_TBL_DAT_FOR_PAG_CON=18;
    final int INT_TBL_DAT_FOR_PAG_CRE=19;
    
    private ZafTblOrd objTblOrd;                        //JTable de ordenamiento.
    
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblFilCab objTblFilCab;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMená en JTable.
    private ZafThreadGUI objThrGUI;
    private Connection con, conTot, conCab;
    private Statement stm, stmTot, stmCab;
    private ResultSet rst, rstTot, rstCab;
    private String strSQL, strAux, strAuxTmp;
    private ZafTblTot objTblTot;                        //JTable de totales.
    
    private String strFilDoc, strFilDocUno, strOr, strFilDocDos; 
    
    private Vector vecDat, vecDatUno, vecCab, vecReg, vecRegUno;
    private Vector vecTipCta, vecNatCta, vecEstReg;
    private boolean blnCon;                     //true: Continua la ejecucián del hilo.
    private String strMsg="";
    private String strTit;
    private javax.swing.JOptionPane oppMsg;
    private String strCodVen, strNomVen;             //Contenido del campo al obtener el foco.
    private ZafTblCelRenLbl objTblCelRenLbl;
    private String strCodCli, strNomCli;             //Contenido del campo al obtener el foco.   
    private String strIdeCli;   
    private String strIdeVen;                //Campos: RUC y Direccián del Beneficiario.
    private ZafTblBus objTblBus;
   
   private ZafSelFec objSelFec;
   private ArrayList arlReg, arlDat;
   //para almacenar los datos en el arraylist q necesito para presentar los valores de las columnas para declaracion por CxC
   
   final int INT_ARL_COD_EMP=0;   
   final int INT_ARL_COD_LOC=1;
   final int INT_ARL_COD_TIP_DOC=2;
   final int INT_ARL_COD_DOC=3;
   final int INT_ARL_COD_LOC_PAG=4;
   final int INT_ARL_COD_TIP_DOC_PAG=5;
   final int INT_ARL_COD_DOC_PAG=6;
   final int INT_ARL_VAL_ABO=7;

   private ZafMouMotAda objMouMotAda;
    
    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafCon16(ZafParSis obj) 
    {
        initComponents();
        //Inicializar objetos.
        objParSis=obj;
        objUti=new ZafUtil();
        
        if (!configurarFrm())
            exitForm();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        panCorRpt = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        optTod = new javax.swing.JRadioButton();
        optFil = new javax.swing.JRadioButton();
        lblDocFac = new javax.swing.JCheckBox();
        lblDocNC = new javax.swing.JCheckBox();
        optOrd = new javax.swing.JRadioButton();
        lblOrdFec = new javax.swing.JCheckBox();
        lblOrdVen = new javax.swing.JCheckBox();
        lblOrdCli = new javax.swing.JCheckBox();
        txtCodVen = new javax.swing.JTextField();
        txtNomVen = new javax.swing.JTextField();
        txtCodCli = new javax.swing.JTextField();
        txtNomCli = new javax.swing.JTextField();
        butVen = new javax.swing.JButton();
        butCli = new javax.swing.JButton();
        panRpt = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        spnTotal = new javax.swing.JScrollPane();
        tblTotal = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        butImp = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panFil.setLayout(new java.awt.BorderLayout());

        panCorRpt.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panCorRpt.setPreferredSize(new java.awt.Dimension(560, 90));
        panCorRpt.setLayout(new java.awt.BorderLayout());
        panFil.add(panCorRpt, java.awt.BorderLayout.NORTH);
        panCorRpt.getAccessibleContext().setAccessibleName("Codigo");

        jPanel1.setLayout(null);

        bgrFil.add(optTod);
        optTod.setSelected(true);
        optTod.setActionCommand("Todos los registros");
        optTod.setIconTextGap(2);
        optTod.setLabel("Todos los registros");
        optTod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optTodItemStateChanged(evt);
            }
        });
        optTod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTodActionPerformed(evt);
            }
        });
        jPanel1.add(optTod);
        optTod.setBounds(10, 10, 400, 20);

        bgrFil.add(optFil);
        optFil.setLabel("Sólo los registros que cumplan el criterio seleccionado");
        jPanel1.add(optFil);
        optFil.setBounds(10, 30, 400, 20);

        lblDocFac.setText("Facturas");
        lblDocFac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblDocFacActionPerformed(evt);
            }
        });
        jPanel1.add(lblDocFac);
        lblDocFac.setBounds(50, 50, 164, 23);

        lblDocNC.setText("Notas de Crédito");
        lblDocNC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblDocNCActionPerformed(evt);
            }
        });
        jPanel1.add(lblDocNC);
        lblDocNC.setBounds(50, 70, 242, 23);

        bgrFil.add(optOrd);
        optOrd.setText("Registros ordenados por:");
        jPanel1.add(optOrd);
        optOrd.setBounds(10, 90, 400, 20);
        optOrd.getAccessibleContext().setAccessibleName("Registros ordenados por");

        lblOrdFec.setText("Fecha");
        lblOrdFec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblOrdFecActionPerformed(evt);
            }
        });
        jPanel1.add(lblOrdFec);
        lblOrdFec.setBounds(50, 110, 80, 23);

        lblOrdVen.setText("Vendedor");
        lblOrdVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblOrdVenActionPerformed(evt);
            }
        });
        jPanel1.add(lblOrdVen);
        lblOrdVen.setBounds(50, 130, 90, 23);

        lblOrdCli.setText("Cliente");
        lblOrdCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblOrdCliActionPerformed(evt);
            }
        });
        jPanel1.add(lblOrdCli);
        lblOrdCli.setBounds(50, 220, 80, 23);

        txtCodVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodVenActionPerformed(evt);
            }
        });
        txtCodVen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodVenFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodVenFocusLost(evt);
            }
        });
        jPanel1.add(txtCodVen);
        txtCodVen.setBounds(150, 130, 50, 20);

        txtNomVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomVenActionPerformed(evt);
            }
        });
        txtNomVen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomVenFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomVenFocusLost(evt);
            }
        });
        jPanel1.add(txtNomVen);
        txtNomVen.setBounds(202, 130, 220, 20);

        txtCodCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodCliActionPerformed(evt);
            }
        });
        txtCodCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodCliFocusLost(evt);
            }
        });
        jPanel1.add(txtCodCli);
        txtCodCli.setBounds(150, 222, 50, 20);

        txtNomCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomCliActionPerformed(evt);
            }
        });
        txtNomCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomCliFocusLost(evt);
            }
        });
        jPanel1.add(txtNomCli);
        txtNomCli.setBounds(202, 222, 220, 20);

        butVen.setText("...");
        butVen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butVenActionPerformed(evt);
            }
        });
        jPanel1.add(butVen);
        butVen.setBounds(424, 130, 20, 20);

        butCli.setText("...");
        butCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCliActionPerformed(evt);
            }
        });
        jPanel1.add(butCli);
        butCli.setBounds(424, 222, 20, 20);

        panFil.add(jPanel1, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Filtro", panFil);

        panRpt.setLayout(new java.awt.BorderLayout());

        spnDat.setPreferredSize(new java.awt.Dimension(453, 418));

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lin", "Código Empresa", "Código Alterno", "Código Item", "Nombre Item", "Stock Actual", "Bodega"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDat.setToolTipText("Doble click o ENTER para abrir la opción seleccionada.");
        tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblDat.setMaximumSize(new java.awt.Dimension(2147483647, 192));
        spnDat.setViewportView(tblDat);

        panRpt.add(spnDat, java.awt.BorderLayout.CENTER);

        spnTotal.setPreferredSize(new java.awt.Dimension(320, 35));

        tblTotal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTotal.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        spnTotal.setViewportView(tblTotal);

        panRpt.add(spnTotal, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("Reporte", panRpt);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        butImp.setText("Imprimir");
        butImp.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butImp.setEnabled(false);
        butImp.setPreferredSize(new java.awt.Dimension(92, 25));
        butImp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butImpActionPerformed(evt);
            }
        });
        panBot.add(butImp);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void butCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCliActionPerformed
        strCodCli=txtCodCli.getText();
        mostrarVenConCli(0);
    }//GEN-LAST:event_butCliActionPerformed

    private void txtNomCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliFocusGained
        strNomCli=txtNomCli.getText();
        txtNomCli.selectAll();
    }//GEN-LAST:event_txtNomCliFocusGained

    
    private boolean mostrarVenConCli(int intTipBus)
    {
        String strAli, strCam;
        Librerias.ZafConsulta.ZafConsulta objVenCon;
        boolean blnRes=true;
        try
        {
            strAli="Cádigo, Identificacián, Nombre, Direccián";
            strCam="a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
            strSQL+=" FROM tbm_cli AS a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" AND a1.st_cli='S' and st_reg='A'";
            objVenCon=new Librerias.ZafConsulta.ZafConsulta(javax.swing.JOptionPane.getFrameForComponent(this), strAli, strCam, strSQL, "", objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            objVenCon.setTitle("Listado de Clientes");
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    objVenCon.show();
                    if (objVenCon.acepto())
                    {
                        txtCodCli.setText(objVenCon.GetCamSel(1));
                        strIdeCli=objVenCon.GetCamSel(2);
                        txtNomCli.setText(objVenCon.GetCamSel(3));
                    }
                    break;
                case 1: //Básqueda directa por "Cádigo".
                    if (objVenCon.buscar("a1.co_cli = " + txtCodCli.getText() + ""))
                    {
                        txtCodCli.setText(objVenCon.GetCamSel(1));
                        strIdeCli=objVenCon.GetCamSel(2);
                        txtNomCli.setText(objVenCon.GetCamSel(3));
                    }
                    else
                    {
                        objVenCon.setFiltroConsulta(txtCodCli.getText());
                        objVenCon.setSelectedTipBus(2);
                        objVenCon.setSelectedCamBus(0);
                        objVenCon.show();
                        if (objVenCon.acepto())
                        {
                            txtCodCli.setText(objVenCon.GetCamSel(1));
                            strIdeCli=objVenCon.GetCamSel(2);
                            txtNomCli.setText(objVenCon.GetCamSel(3));
                        }
                        else
                        {
                            txtCodCli.setText(strCodCli);
                        }
                    }
                    break;
                case 2: //Básqueda directa por "Descripcián larga".
                    if (objVenCon.buscar("LOWER(a1.tx_nom) LIKE '" + txtNomCli.getText().toLowerCase() + "'"))
                    {
                        txtCodCli.setText(objVenCon.GetCamSel(1));
                        strIdeCli=objVenCon.GetCamSel(2);
                        txtNomCli.setText(objVenCon.GetCamSel(3));
                    }
                    else
                    {
                        objVenCon.setFiltroConsulta(txtNomCli.getText());
                        objVenCon.setSelectedTipBus(2);
                        objVenCon.setSelectedCamBus(2);
                        objVenCon.show();
                        if (objVenCon.acepto())
                        {
                            txtCodCli.setText(objVenCon.GetCamSel(1));
                            strIdeCli=objVenCon.GetCamSel(2);
                            txtNomCli.setText(objVenCon.GetCamSel(3));
                        }
                        else
                        {
                            txtNomCli.setText(strNomCli);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    private void txtNomCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCliFocusLost
        //Validar el contenido de la celda sálo si ha cambiado.
        if (!txtNomCli.getText().equalsIgnoreCase(strNomCli))
        {
            if (txtNomCli.getText().equals(""))
            {
                txtCodCli.setText("");
                txtNomCli.setText("");
            }
            else
            {
                mostrarVenConCli(2);
            }
        }
        else
            txtNomCli.setText(strNomCli);
    }//GEN-LAST:event_txtNomCliFocusLost

    private void txtNomCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomCliActionPerformed
        txtNomCli.transferFocus();
    }//GEN-LAST:event_txtNomCliActionPerformed

    private void txtCodCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCliFocusLost
        //Validar el contenido de la celda sálo si ha cambiado.
        if (!txtCodCli.getText().equalsIgnoreCase(strCodCli))
        {
            if (txtCodCli.getText().equals(""))
            {
                txtCodCli.setText("");
                txtNomCli.setText("");
            }
            else
            {
                mostrarVenConCli(1);
            }
        }
        else
            txtCodCli.setText(strCodCli);
    }//GEN-LAST:event_txtCodCliFocusLost

    private void txtCodCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCliFocusGained
        strCodCli=txtCodCli.getText();
        txtCodCli.selectAll();
    }//GEN-LAST:event_txtCodCliFocusGained

    private void txtCodCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodCliActionPerformed
        txtCodCli.transferFocus();
    }//GEN-LAST:event_txtCodCliActionPerformed

    private void butVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butVenActionPerformed
        strCodVen=txtCodVen.getText();
        mostrarVenConVen(0);
    }//GEN-LAST:event_butVenActionPerformed

    private void txtNomVenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomVenFocusLost
        //Validar el contenido de la celda sálo si ha cambiado.
        if (!txtNomVen.getText().equalsIgnoreCase(strNomVen))
        {
            if (txtNomVen.getText().equals(""))
            {
                txtCodVen.setText("");
                txtNomVen.setText("");
            }
            else
            {
                mostrarVenConVen(2);
            }
        }
        else
            txtNomVen.setText(strNomVen);
    }//GEN-LAST:event_txtNomVenFocusLost

    private void txtNomVenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomVenFocusGained
        strNomVen=txtNomVen.getText();
        txtNomVen.selectAll();
    }//GEN-LAST:event_txtNomVenFocusGained

    private void txtNomVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomVenActionPerformed
        txtNomVen.transferFocus();
    }//GEN-LAST:event_txtNomVenActionPerformed

    private boolean mostrarVenConVen(int intTipBus)
    {
        String strAli, strCam;
        Librerias.ZafConsulta.ZafConsulta objVenCon;
        boolean blnRes=true;
        try
        {
            strAli="Cádigo, Usuario, Nombre";
            strCam="a1.co_usr, a1.tx_usr, a1.tx_nom";
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_usr, a1.tx_usr, a1.tx_nom";
            strSQL+=" FROM tbm_usr AS a1";
            strSQL+=" WHERE a1.st_reg='A'";
            objVenCon=new Librerias.ZafConsulta.ZafConsulta(javax.swing.JOptionPane.getFrameForComponent(this), strAli, strCam, strSQL, "", objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            objVenCon.setTitle("Listado de usuarios");
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    objVenCon.show();
                    if (objVenCon.acepto())
                    {
                        txtCodVen.setText(objVenCon.GetCamSel(1));
                        strIdeVen=objVenCon.GetCamSel(2);
                        txtNomVen.setText(objVenCon.GetCamSel(3));
                    }
                    break;
                case 1: //Básqueda directa por "Cádigo".
                    if (objVenCon.buscar("a1.co_usr =" + txtCodVen.getText() + ""))
                    {
                        txtCodVen.setText(objVenCon.GetCamSel(1));
                        strIdeVen=objVenCon.GetCamSel(2);
                        txtNomVen.setText(objVenCon.GetCamSel(3));
                    }
                    else
                    {
                        objVenCon.setFiltroConsulta(txtCodVen.getText());
                        objVenCon.setSelectedTipBus(2);
                        objVenCon.setSelectedCamBus(0);
                        objVenCon.show();
                        if (objVenCon.acepto())
                        {
                            txtCodVen.setText(objVenCon.GetCamSel(1));
                            strIdeVen=objVenCon.GetCamSel(2);
                            txtNomVen.setText(objVenCon.GetCamSel(3));
                        }
                        else
                        {
                            txtCodVen.setText(strCodVen);
                        }
                    }
                    break;
                case 2: //Básqueda directa por "Descripcián larga".
                    if (objVenCon.buscar("LOWER(a1.tx_nom) LIKE '" + txtNomVen.getText().toLowerCase() + "'"))
                    {
                        txtCodVen.setText(objVenCon.GetCamSel(1));
                        strIdeVen=objVenCon.GetCamSel(2);
                        txtNomVen.setText(objVenCon.GetCamSel(3));
                    }
                    else
                    {
                        objVenCon.setFiltroConsulta(txtNomVen.getText());
                        objVenCon.setSelectedTipBus(2);
                        objVenCon.setSelectedCamBus(2);
                        objVenCon.show();
                        if (objVenCon.acepto())
                        {
                            txtCodVen.setText(objVenCon.GetCamSel(1));
                            strIdeVen=objVenCon.GetCamSel(2);
                            txtNomVen.setText(objVenCon.GetCamSel(3));
                        }
                        else
                        {
                            txtNomVen.setText(strNomVen);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    
    
    private void txtCodVenFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodVenFocusLost
        //Validar el contenido de la celda sálo si ha cambiado.
        if (!txtCodVen.getText().equalsIgnoreCase(strCodVen))
        {
            if (txtCodVen.getText().equals(""))
            {
                txtCodVen.setText("");
                txtNomVen.setText("");
            }
            else
            {
                mostrarVenConVen(1);
            }
        }
        else
            txtCodVen.setText(strCodVen);
    }//GEN-LAST:event_txtCodVenFocusLost

    private void txtCodVenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodVenFocusGained
        strCodVen=txtCodVen.getText();
        txtCodVen.selectAll();
    }//GEN-LAST:event_txtCodVenFocusGained

    private void txtCodVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodVenActionPerformed
        txtCodVen.transferFocus();
    }//GEN-LAST:event_txtCodVenActionPerformed

    private void lblOrdFecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblOrdFecActionPerformed
        if (lblOrdFec.isSelected()){
            lblOrdVen.setSelected(false);
            lblOrdCli.setSelected(false);            
        }        
        
    }//GEN-LAST:event_lblOrdFecActionPerformed

    private void lblOrdVenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblOrdVenActionPerformed
        if (lblOrdVen.isSelected()){
            txtCodVen.setEditable(true);
            txtNomVen.setEditable(true);
            butVen.setEnabled(true);

            txtCodCli.setEditable(false);
            txtNomCli.setEditable(false);
            butCli.setEnabled(false);

            lblOrdFec.setSelected(false);
            lblOrdCli.setSelected(false);                            
            
            txtCodCli.setText("");
            txtNomCli.setText("");                        
        }
        else{
            txtCodVen.setEditable(false);
            txtNomVen.setEditable(false);
            butVen.setEnabled(false);            
        }
                       
    }//GEN-LAST:event_lblOrdVenActionPerformed

    
    protected void impRpt()
    {
            int intCodEmp=objParSis.getCodigoEmpresa();
            String strnomEmp=retNomEmp(intCodEmp);
            String strOrdFec="";
            Connection conIns;
            java.util.Date dtFecHor=new java.util.Date();
            String fecha=objUti.formatearFecha(dtFecHor,"dd/MM/yyyy-hh-mm-ss");
            String fecha2=objUti.formatearFecha(dtFecHor,"dd/MM/yyyy");
            String usua=objParSis.getNombreUsuario();   
            String strTitMnu=objParSis.getNombreMenu();
                        
            try
            {
                conIns =DriverManager.getConnection(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos());
            try
            {
                if(conIns!=null){

                    if (optTod.isSelected()){                                                
                        JasperDesign jasperDesign = JRXmlLoader.load("C://Zafiro//Reportes_impresos//RptZafCon16All.jrxml");
                        //JasperDesign jasperDesign = JRXmlLoader.load("//Tuval//Ingrid_Lino//Fuentes//Reportes//Reportes_impresos//RptZafCon16All.jrxml");
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);                         
                        Map parameters = new HashMap();                    
                        parameters.put("codEmp", ""+intCodEmp); 
                        parameters.put("fecAct", fecha2);                    
                        parameters.put("fecDes", ""    + objUti.formatearFecha(objSelFec.getFechaDesde(), "dd/MM/yyyy","dd 'de' MMMMM 'de' yyyy"));
                        parameters.put("fecHas", ""    + objUti.formatearFecha(objSelFec.getFechaHasta(), "dd/MM/yyyy","dd 'de' MMMMM 'de' yyyy"));                                       
                        parameters.put("filFecDes", "" + objUti.formatearFecha(objSelFec.getFechaDesde(), "dd/MM/yyyy","yyyy MM dd"));
                        parameters.put("filFecHas", "" + objUti.formatearFecha(objSelFec.getFechaHasta(), "dd/MM/yyyy","yyyy MM dd"));
                        parameters.put("nomEmp", strnomEmp);     
                        parameters.put("titMnu", strTitMnu);
                        parameters.put("usu", usua);
                        
                        if(!(txtCodVen.getText().equals(null))){
                            String strAuxSQL=" and a1.co_com=" + txtCodVen.getText() + "";            
                            parameters.put("codVen" , strAuxSQL);
                        }                        
                        
                        JasperPrint report = JasperFillManager.fillReport(jasperReport, parameters, conIns);
                        JasperViewer.viewReport(report, false);                                                                                         
                    }
                    
                    if(lblDocFac.isSelected()){
                        JasperDesign jasperDesign = JRXmlLoader.load("C://Zafiro//Reportes_impresos//RptZafCon16Fac.jrxml");
                        //JasperDesign jasperDesign = JRXmlLoader.load("//Tuval//Ingrid_Lino//Fuentes//Reportes//Reportes_impresos//RptZafCon16Fac.jrxml");
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);                         
                        Map parameters = new HashMap();                    
                        parameters.put("codEmp", ""+intCodEmp); 
                        parameters.put("fecAct", fecha2);                    
                        parameters.put("fecDes", ""+objUti.formatearFecha(objSelFec.getFechaDesde(), "dd/MM/yyyy","dd 'de' MMMMM 'de' yyyy"));
                        parameters.put("fecHas", ""+objUti.formatearFecha(objSelFec.getFechaHasta(), "dd/MM/yyyy","dd 'de' MMMMM 'de' yyyy"));                                       
                        parameters.put("filFecDes", ""+objUti.formatearFecha(objSelFec.getFechaDesde(), "dd/MM/yyyy","yyyy MM dd"));
                        parameters.put("filFecHas", ""+objUti.formatearFecha(objSelFec.getFechaHasta(), "dd/MM/yyyy","yyyy MM dd"));
                        parameters.put("nomEmp", strnomEmp);     
                        parameters.put("titMnu", strTitMnu);
                        parameters.put("usu", usua);                        
                        JasperPrint report = JasperFillManager.fillReport(jasperReport, parameters, conIns);
                        JasperViewer.viewReport(report, false);                                                                                         
                    }
                    
                    if(lblDocNC.isSelected()){
                        JasperDesign jasperDesign = JRXmlLoader.load("C://Zafiro//Reportes_impresos//RptZafCon16NC.jrxml");
                        //JasperDesign jasperDesign = JRXmlLoader.load("//Tuval//Ingrid_Lino//Fuentes//Reportes//Reportes_impresos//RptZafCon16NC.jrxml");
                        JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);                         
                        Map parameters = new HashMap();                    
                        parameters.put("codEmp", ""+intCodEmp); 
                        parameters.put("fecAct", fecha2);                    
                        parameters.put("fecDes", ""+objUti.formatearFecha(objSelFec.getFechaDesde(), "dd/MM/yyyy","dd 'de' MMMMM 'de' yyyy"));
                        parameters.put("fecHas", ""+objUti.formatearFecha(objSelFec.getFechaHasta(), "dd/MM/yyyy","dd 'de' MMMMM 'de' yyyy"));                                       
                        parameters.put("filFecDes", ""+objUti.formatearFecha(objSelFec.getFechaDesde(), "dd/MM/yyyy","yyyy MM dd"));
                        parameters.put("filFecHas", ""+objUti.formatearFecha(objSelFec.getFechaHasta(), "dd/MM/yyyy","yyyy MM dd"));
                        parameters.put("nomEmp", strnomEmp);     
                        parameters.put("titMnu", strTitMnu);
                        parameters.put("usu", usua);                        
                        JasperPrint report = JasperFillManager.fillReport(jasperReport, parameters, conIns);
                        JasperViewer.viewReport(report, false);                                                                                                                 
                    }                                                     
                }
                conIns.close();
                conIns=null;
            }
            catch (JRException e)
            {
                System.out.println("Excepcián: " + e.toString());
            }

            }

            catch(SQLException ex)
            {
                System.out.println("Error al conectarse a la base");
            }                                    
    }
    
    
    
    
    
    
    
    
    private void butImpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butImpActionPerformed
            strFilDoc="";                        
            if (optTod.isSelected())
                cargarDetReg();
            
            if(lblDocFac.isSelected())
                cargarDetFac();
            
            if(lblDocNC.isSelected())
                cargarDetNC();
                        
            impRpt();                
                               
    }//GEN-LAST:event_butImpActionPerformed

    private void lblOrdCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblOrdCliActionPerformed
        if (lblOrdCli.isSelected()){
            txtCodCli.setEditable(true);
            txtNomCli.setEditable(true);
            butCli.setEnabled(true);

            txtCodVen.setEditable(false);
            txtNomVen.setEditable(false);
            butVen.setEnabled(false);

            lblOrdFec.setSelected(false);
            lblOrdVen.setSelected(false);                            
            
            txtCodVen.setText("");
            txtNomVen.setText("");                        
            
        }
        else
        {
            txtCodCli.setEditable(false);
            txtNomCli.setEditable(false);
            butCli.setEnabled(false);            
        }
    }//GEN-LAST:event_lblOrdCliActionPerformed

    private void lblDocNCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblDocNCActionPerformed
        if (lblDocNC.isSelected())
            optFil.setSelected(true);
            optTod.setSelected(false);
            lblDocFac.setSelected(false);                
    }//GEN-LAST:event_lblDocNCActionPerformed

    private void lblDocFacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblDocFacActionPerformed
        if (lblDocFac.isSelected())
            optFil.setSelected(true);
            optTod.setSelected(false);
            lblDocNC.setSelected(false);                
    }//GEN-LAST:event_lblDocFacActionPerformed

    private void optTodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_optTodActionPerformed
            /*Permite obtener un log de la tabla tbm_grpvar
 *
 */    
     
    
    
                    
    private void optTodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optTodItemStateChanged
        if (optTod.isSelected())
        {
            optFil.setSelected(false);
            lblDocFac.setSelected(false);
            lblDocNC.setSelected(false);                 
        }        
    }//GEN-LAST:event_optTodItemStateChanged
    
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar accián de acuerdo a la etiqueta del botán ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar"))
        {
            //objTblTotales.isActivo(false);
            blnCon=true;
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();                
                
            }            
        }
        else
        {
            blnCon=false;
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicacián. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="áEstá seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    /** Cerrar la aplicacián. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCli;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butImp;
    private javax.swing.JButton butVen;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JCheckBox lblDocFac;
    private javax.swing.JCheckBox lblDocNC;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JCheckBox lblOrdCli;
    private javax.swing.JCheckBox lblOrdFec;
    private javax.swing.JCheckBox lblOrdVen;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optFil;
    private javax.swing.JRadioButton optOrd;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panCorRpt;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panRpt;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JScrollPane spnTotal;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblTotal;
    private javax.swing.JTextField txtCodCli;
    private javax.swing.JTextField txtCodVen;
    private javax.swing.JTextField txtNomCli;
    private javax.swing.JTextField txtNomVen;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            strAux=objParSis.getNombreMenu() + "v1.7";
            this.setTitle(strAux);
            lblTit.setText(strAux);
            
            //Configurar ZafSelFec:
            objSelFec=new ZafSelFec();
            objSelFec.setCheckBoxVisible(false);
            panCorRpt.add(objSelFec);
            objSelFec.setBounds(4, 4, 472, 72);
            
            txtCodVen.setEditable(false);
            txtNomVen.setEditable(false);
            butVen.setEnabled(false);
            
            txtCodCli.setEditable(false);
            txtNomCli.setEditable(false);
            butCli.setEnabled(false);
            
            
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(20);    //Almacena las cabeceras
            vecCab.clear();

            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_EMP,"Cód.Emp.");
            vecCab.add(INT_TBL_DAT_COD_LOC,"Cód.Loc.");
            vecCab.add(INT_TBL_DAT_COD_TIP_DOC,"Cód.Tip.Doc.");
            vecCab.add(INT_TBL_DAT_COD_DOC,"Cód.Doc.");
            vecCab.add(INT_TBL_DAT_TIP,"Tipo de documento");
            vecCab.add(INT_TBL_DAT_NUM_DOC,"Núm.Doc.");
            vecCab.add(INT_TBL_DAT_FEC_DOC, "Fec.Doc.");
            vecCab.add(INT_TBL_DAT_SUB,"Sub.");
            vecCab.add(INT_TBL_DAT_DES,"Des.");
            vecCab.add(INT_TBL_DAT_VAL_NET,"Val.Net.");
            vecCab.add(INT_TBL_DAT_IVA,"Iva");
            vecCab.add(INT_TBL_DAT_TOT_DOC,"Tot.Doc.");
            vecCab.add(INT_TBL_DAT_VAL_ABO,"Abo.");
            vecCab.add(INT_TBL_DAT_VAL_PND,"Val.Pnd.");
            vecCab.add(INT_TBL_DAT_COD_CLI,"Cód.Cli");
            vecCab.add(INT_TBL_DAT_NOM_CLI,"Cliente");
            vecCab.add(INT_TBL_DAT_RUC_CLI,"Ruc");
            vecCab.add(INT_TBL_DAT_FOR_PAG_CON,"For.Pag.Con.");
            vecCab.add(INT_TBL_DAT_FOR_PAG_CRE,"For.Pag.Cre.");

            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);            
               
            //Configurar JTable: Establecer relacián entre el JTable de datos y JTable de totales.
            int intCol[]={INT_TBL_DAT_SUB, INT_TBL_DAT_DES,INT_TBL_DAT_VAL_NET,INT_TBL_DAT_IVA,INT_TBL_DAT_TOT_DOC,INT_TBL_DAT_VAL_ABO,INT_TBL_DAT_VAL_PND, INT_TBL_DAT_FOR_PAG_CON, INT_TBL_DAT_FOR_PAG_CRE};
            objTblTot=new ZafTblTot(spnDat, spnTotal, tblDat, tblTotal, intCol);

            //Configurar JTable: Establecer tipo de seleccián.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el mená de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDat);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);

            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Tamaáo de las celdas
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_LIN).setPreferredWidth(20);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_TIP).setPreferredWidth(55);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(60);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(70);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_SUB).setPreferredWidth(75);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DES).setPreferredWidth(70);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_NET).setPreferredWidth(70);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_IVA).setPreferredWidth(70);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_TOT_DOC).setPreferredWidth(70);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_ABO).setPreferredWidth(70);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_PND).setPreferredWidth(70);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(60);                        
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(100);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_RUC_CLI).setPreferredWidth(95);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FOR_PAG_CON).setPreferredWidth(75);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FOR_PAG_CRE).setPreferredWidth(75);
            
            //Configurar JTable: Ocultar columnas del sistema.
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_EMP, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_TIP_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_CLI, tblDat);


            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);                       
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_SUB).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DES).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_NET).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_IVA).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_TOT_DOC).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_ABO).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_VAL_PND).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FOR_PAG_CON).setCellRenderer(objTblCelRenLbl);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FOR_PAG_CRE).setCellRenderer(objTblCelRenLbl);

            
            tblTotal.setRowSelectionAllowed(true);
            tblTotal.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            //objColNum=new ZafColNumerada(tblTotal,INT_TBL_DAT_LIN);            
            tblTotal.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);                        
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_LIN).setPreferredWidth(20);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(50);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_TIP).setPreferredWidth(55);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(60);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(70);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_SUB).setPreferredWidth(75);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_DES).setPreferredWidth(70);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_VAL_NET).setPreferredWidth(70);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_IVA).setPreferredWidth(70);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_TOT_DOC).setPreferredWidth(70);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_VAL_ABO).setPreferredWidth(70);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_VAL_PND).setPreferredWidth(70);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(60);                        
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(100);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_RUC_CLI).setPreferredWidth(95);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_FOR_PAG_CON).setPreferredWidth(75);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_FOR_PAG_CRE).setPreferredWidth(75);

            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setMaxWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setMinWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setResizable(false);

            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setMaxWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setMinWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setResizable(false);

            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setMaxWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setMinWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setResizable(false);

            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_CLI).setWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_CLI).setMaxWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_CLI).setMinWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_CLI).setResizable(false);
            
            tblDat.getTableHeader().setReorderingAllowed(false);                        
            objTblBus=new ZafTblBus(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);

            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            
            arlDat=new ArrayList();

        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podráa presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaráa informado en todo
     * momento de lo que ocurre. Si se desea hacer ásto es necesario utilizar ásta clase
     * ya que si no sálo se apreciaráa los cambios cuando ha terminado todo el proceso.
     */    
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sálo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }


    public String retNomEmp(int codEmp){
        java.sql.Connection conTipDoc;
        java.sql.Statement stmTipDoc;
        java.sql.ResultSet rstTipDoc;
        String que, auxTipDoc="";        
        try{            
            conTipDoc=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conTipDoc!=null){
                stmTipDoc=conTipDoc.createStatement();
                que="";
                que+=" select tx_nom from tbm_emp";
                que+=" where co_emp=" + codEmp + "";                                                
                System.out.println("el query del nombre de la empresa es:"+que);
                rstTipDoc=stmTipDoc.executeQuery(que);
                if (rstTipDoc.next()){
                    auxTipDoc=rstTipDoc.getString("tx_nom");
                }
            }
            conTipDoc.close();
            conTipDoc=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }        
        return auxTipDoc;
        
    }             
    
    
    
    
    private boolean cargarDetReg()
    {
        String strNiv;
        int intCodEmp, i;
        boolean blnRes=true;
        double dblNumVta=0.00;
        double dblValNet=0.00;
        String strForPag="";
        try
        {
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            intCodEmp=objParSis.getCodigoEmpresa();
            String strNomEmp=retNomEmp(intCodEmp);
            
            if (con!=null){
                strAuxTmp="";
                
                switch (objSelFec.getTipoSeleccion()){
                    case 0: //Básqueda por rangos
                        strAuxTmp+=" AND a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 1: //Fechas menores o iguales que "Hasta".
                        strAuxTmp+=" AND a1.fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 2: //Fechas mayores o iguales que "Desde".
                        strAuxTmp+=" AND a1.fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 3: //Todo.
                        break;
                }
//                if (dtpFecDes.isFecha() && dtpFecHas.isFecha()){
//                    strAuxTmp+=" AND (a1.fe_doc>='" + objUti.formatearFecha(dtpFecDes.getText(),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "'";
//                    strAuxTmp+=" AND a1.fe_doc<='" + objUti.formatearFecha(dtpFecHas.getText(),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "') ";                    
//                }                                
                if(lblOrdVen.isSelected()){
                    strAuxTmp+=" AND a1.co_com=" + txtCodVen.getText()  + "";
                }                    
                if(lblOrdCli.isSelected()){
                    strAuxTmp+=" AND a1.co_cli=" + txtCodCli.getText()  + "";
                }
                
                stm=con.createStatement();
                //PARA FACTURAS Y NOTAS DE CREDITO
                strSQL="";
                strSQL+=" SELECT * from(";
                strSQL+="               select distinct(a1.co_emp) AS co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+="               a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc, a3.tx_descor as nomTipDoc,";
                strSQL+="               CASE WHEN a1.co_tipdoc=1 THEN (abs(a1.nd_sub)+(round(sum(round(  ((abs(round(nd_can,6))*round(nd_preuni,6))*(round(nd_pordes,2)/100)   )  ,6)),2)))";
                strSQL+="                 END AS subtotal,";
                strSQL+="               CASE WHEN a1.co_tipdoc=1 THEN round(sum(round(  ((abs(round(nd_can,6))*round(nd_preuni,6))*(round(nd_pordes,2)/100)   )  ,6)),2)";
                strSQL+="                 END AS descuento,";
                strSQL+="               CASE WHEN a1.co_tipdoc=1 THEN ((abs(a1.nd_sub)+(round(sum(round(  ((abs(round(nd_can,6))*round(nd_preuni,6))*(round(nd_pordes,2)/100)   )  ,6)),2)))   -  (round(sum(round(  ((abs(round(nd_can,6))*round(nd_preuni,6))*(round(nd_pordes,2)/100)   )  ,6)),2))   )";
                strSQL+="                 END AS valorNeto,";
                strSQL+="               CASE WHEN a1.co_tipdoc=1 THEN (abs(a1.nd_valIva))";
                strSQL+="                 END AS ivaTotal,";
                strSQL+="               CASE WHEN a1.co_tipdoc=1 THEN (abs(a1.nd_tot))";
                strSQL+="                 END AS totalDcto";
                strSQL+="                 ,a1.co_forPag, a1.tx_desForPag from tbm_cabmovinv as a1 inner join tbm_detmovinv as a2";
                strSQL+="                  on a1.co_emp=a2.co_emp and a1.co_loc=a2.co_loc and a1.co_tipdoc=a2.co_tipdoc and a1.co_doc=a2.co_doc";
                strSQL+="             inner join tbm_cabtipdoc as a3";
                strSQL+="           on a2.co_emp=a3.co_emp and a2.co_loc=a3.co_loc and a2.co_tipdoc=a3.co_tipdoc";
                strSQL+="                where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="                  and a1.co_tipdoc in (1) and a1.st_reg in('A', 'R', 'C', 'F')";
                strSQL+=strAuxTmp;
                strSQL+="              group by a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numdoc, a1.fe_doc, a1.co_cli, a1.tx_nomcli, a1.tx_ruc, a1.co_tipdoc, a3.co_tipdoc, a3.tx_descor, a1.nd_sub, a1.nd_valIva, a1.nd_tot,a1.co_forPag, a1.tx_desForPag";

                strSQL+=" UNION ALL";
                strSQL+="       select distinct(a1.co_emp) AS co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+="       a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc, a3.tx_descor as nomTipDoc,";
                strSQL+="        CASE WHEN a1.co_tipdoc=3 THEN ";
                strSQL+=" 		round(sum(round(  ((abs(nd_can)*nd_preuni))  ,3)),3)*-1";
                strSQL+="        ELSE ";
                strSQL+=" 		round(sum(round(  ((abs(nd_can)*nd_preuni))  ,3)),3)";
                strSQL+="        END AS  subtotal,";
                strSQL+="        CASE WHEN a1.co_tipdoc=3 THEN ";
                strSQL+=" 		round(sum(round(  ((abs(round(nd_can,3))*round(nd_preuni,3))*(round(nd_pordes,3)/100) ),3)),3)*-1 ";
                strSQL+=" 	ELSE";
                strSQL+=" 		round(sum(round(  ((abs(round(nd_can,3))*round(nd_preuni,3))*(round(nd_pordes,3)/100) ),3)),3)";
                strSQL+=" 	END AS descuento,";
                strSQL+="        CASE WHEN a1.co_tipdoc=3 THEN";
                strSQL+=" 		(round(sum(round(  ((abs(nd_can)*nd_preuni))  ,3)),3)-round(sum(round(  ((abs(round(nd_can,3))*round(nd_preuni,3))*(round(nd_pordes,3)/100)   )  ,3)),3))*-1 ";
                strSQL+=" 	ELSE ";
                strSQL+=" 		(round(sum(round(  ((abs(nd_can)*nd_preuni))  ,3)),3)-round(sum(round(  ((abs(round(nd_can,3))*round(nd_preuni,3))*(round(nd_pordes,3)/100)   )  ,3)),3))";
                strSQL+=" 	END AS valorNeto,";
                strSQL+=" 	CASE WHEN a1.co_tipdoc=3 THEN";
                strSQL+="        (round(sum(case when st_ivacom='S' then";
                strSQL+="  	     ( round( ((abs(nd_can)*nd_preuni)-((abs(nd_can)*nd_preuni)*(nd_pordes/100))),3)*0.12)";
                strSQL+="  	       when st_ivacom='N' then ( ( (abs(nd_can)*nd_preuni)-((abs(nd_can)*nd_preuni)*(nd_pordes/100)))*0) end";
                strSQL+="  	     ),3)*-1) ";
                strSQL+=" 	ELSE";
                strSQL+="        (round(sum(case when st_ivacom='S' then";
                strSQL+="  	     ( round( ((abs(nd_can)*nd_preuni)-((abs(nd_can)*nd_preuni)*(nd_pordes/100))),3)*0.12)";
                strSQL+="  	       when st_ivacom='N' then ( ( (abs(nd_can)*nd_preuni)-((abs(nd_can)*nd_preuni)*(nd_pordes/100)))*0) end";
                strSQL+="  	     ),3))";
                strSQL+=" 	END AS ivaTotal,";
                strSQL+=" 	CASE WHEN a1.co_tipdoc=3 THEN";
                strSQL+=" 	       round( round(sum( round(((abs(nd_can)*nd_preuni)-((abs(nd_can)*nd_preuni)*(nd_pordes/100))),3)  ),3)  +";
                strSQL+=" 		   round(sum(case when st_ivacom='S' then ( round( ((abs(nd_can)*nd_preuni)-((abs(nd_can)*nd_preuni)*(nd_pordes/100))),3)*0.12)";
                strSQL+=" 				  when st_ivacom='N' then ( ( (abs(nd_can)*nd_preuni)-((abs(nd_can)*nd_preuni)*(nd_pordes/100)))*0) end";
                strSQL+=" 		      ),3) ,3 )*-1";
                strSQL+=" 	ELSE";
                strSQL+=" 	       round( round(sum( round(((abs(nd_can)*nd_preuni)-((abs(nd_can)*nd_preuni)*(nd_pordes/100))),3)  ),3)  +";
                strSQL+=" 		   round(sum(case when st_ivacom='S' then ( round( ((abs(nd_can)*nd_preuni)-((abs(nd_can)*nd_preuni)*(nd_pordes/100))),3)*0.12)";
                strSQL+=" 				  when st_ivacom='N' then ( ( (abs(nd_can)*nd_preuni)-((abs(nd_can)*nd_preuni)*(nd_pordes/100)))*0) end";
                strSQL+="		      ),3) ,3 )";
                strSQL+="	END AS totalDcto";
                strSQL+="       ,co_forPag, tx_desForPag from tbm_cabmovinv as a1 inner join tbm_detmovinv as a2";
                strSQL+="       on a1.co_emp=a2.co_emp and a1.co_loc=a2.co_loc and a1.co_tipdoc=a2.co_tipdoc and a1.co_doc=a2.co_doc";
                strSQL+="       inner join tbm_cabtipdoc as a3 on a2.co_emp=a3.co_emp and a2.co_loc=a3.co_loc and a2.co_tipdoc=a3.co_tipdoc";
                strSQL+="       where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="       and a1.co_tipdoc in (3,99) and a1.st_reg in('A', 'R', 'C', 'F')";
                strSQL+=strAuxTmp;
                strSQL+="       and a1.st_tipdev='C'";
                strSQL+="       group by a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numdoc, a1.fe_doc, a1.co_cli, a1.tx_nomcli, a1.tx_ruc, a1.co_tipdoc, a3.co_tipdoc, a3.tx_descor, a1.nd_sub, a1.nd_valIva, a1.nd_tot,a1.co_forPag, a1.tx_desForPag";
                strSQL+="   UNION ALL";
                
                strSQL+=" select distinct(a1.co_emp) AS co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+=" a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc, a3.tx_descor as nomTipDoc,";
                strSQL+=" CASE WHEN a1.co_tipDoc=3 THEN";
                strSQL+=" nd_sub*-1";
                strSQL+=" ELSE nd_sub";
                strSQL+=" END AS subtotal,";
                strSQL+=" CASE WHEN a1.co_tipDoc=3 THEN";
                strSQL+=" round(sum(round(  ((nd_preuni*((nd_canorg)/100)))  ,3)),3)*0";
                strSQL+=" ELSE round(sum(round(  ((nd_preuni*((nd_canorg)/100)))  ,3)),3)*0";
                strSQL+=" END AS descuento,";
                strSQL+=" CASE WHEN a1.co_tipDoc=3 THEN";
                strSQL+=" (nd_sub-(round(sum(round(  ((nd_preuni*((nd_canorg)/100)))  ,3)),3)*0)) *-1";
                strSQL+=" ELSE (nd_sub-(round(sum(round(  ((nd_preuni*((nd_canorg)/100)))  ,3)),3)*0))";
                strSQL+=" END AS valorNeto,";
                strSQL+=" CASE WHEN a1.co_tipDoc=3 THEN";
                strSQL+=" (nd_valiva) *-1";
                strSQL+=" ELSE (nd_valiva) *-1";
                strSQL+=" END AS ivaTotal,";
                strSQL+=" CASE WHEN a1.co_tipDoc=3 THEN";
                strSQL+=" (((nd_sub-(round(sum(round(  ((nd_preuni*((nd_canorg)/100)))  ,3)),3)*0))+nd_valiva)*-1) ";
                strSQL+=" ELSE (((nd_sub-(round(sum(round(  ((nd_preuni*((nd_canorg)/100)))  ,3)),3)*0))+nd_valiva))";
                strSQL+=" END AS totalDcto";
                strSQL+=" ,co_forPag, tx_desForPag from tbm_cabmovinv as a1 inner join tbm_detmovinv as a2";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.co_loc=a2.co_loc and a1.co_tipdoc=a2.co_tipdoc and a1.co_doc=a2.co_doc";
                strSQL+=" inner join tbm_cabtipdoc as a3 on a2.co_emp=a3.co_emp and a2.co_loc=a3.co_loc and a2.co_tipdoc=a3.co_tipdoc";
                strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and a1.co_tipdoc in (3,99) and a1.st_reg in('A', 'R', 'C', 'F')";
                strSQL+=strAuxTmp;
                strSQL+="   and a1.st_tipdev='P'";
                strSQL+="   group by a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numdoc, a1.fe_doc, a1.co_cli, a1.tx_nomcli, a1.tx_ruc, a1.co_tipdoc, a3.tx_descor, nd_can";                
                strSQL+=" , nd_sub, nd_valiva,a1.co_forPag, a1.tx_desForPag";
                
                strSQL+="   UNION ALL";
                strSQL+="       select distinct(a1.co_emp) AS co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+="       a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc, a3.tx_descor as nomTipDoc,";
                strSQL+=" CASE WHEN a1.co_tipDoc=3 THEN";
                strSQL+="       round(sum(round(  ((nd_can*nd_canorg))  ,3)),3)*-1";
                strSQL+="   ELSE round(sum(round(  ((nd_can*nd_canorg))  ,3)),3)";
                strSQL+="END AS  subtotal,";
                strSQL+=" CASE WHEN a1.co_tipDoc=3 THEN";
                strSQL+="       round((round(sum(round(  ((nd_can*nd_canorg))  ,3)),3)*(nd_pordes/100)),3)*-1 ";
                strSQL+="       ELSE round((round(sum(round(  ((nd_can*nd_canorg))  ,3)),3)*(nd_pordes/100)),3)";
                strSQL+="END AS descuento,";
                strSQL+=" CASE WHEN a1.co_tipDoc=3 THEN";
                strSQL+="       sum((round((round(  ((nd_can*nd_canorg))  ,3)),3)-round((round((round(  ((nd_can*nd_canorg))  ,3)),3)*(nd_pordes/100)),3))) *-1";
                strSQL+=" ELSE sum((round((round(  ((nd_can*nd_canorg))  ,3)),3)-round((round((round(  ((nd_can*nd_canorg))  ,3)),3)*(nd_pordes/100)),3)))";
                strSQL+=" END  AS valorNeto,";
                strSQL+=" CASE WHEN a1.co_tipDoc=3 THEN";
                strSQL+="       (round(sum(case when st_ivacom='S' then";
                strSQL+=" 	     ( ((round((round(  ((nd_can*nd_canorg))  ,3)),3)-round((round((round(  ((nd_can*nd_canorg))  ,3)),3)*(nd_pordes/100)),3)))*0.12)";
                strSQL+=" 	       when st_ivacom='N' then ( ((round((round(  ((nd_can*nd_canorg))  ,3)),3)-round((round((round(  ((nd_can*nd_canorg))  ,3)),3)*(nd_pordes/100)),3)))*0)";
                strSQL+=" 		end";
                strSQL+=" 	     ),3)*-1) ";
                strSQL+="       ELSE (round(sum(case when st_ivacom='S' then";
                strSQL+=" 	     ( ((round((round(  ((nd_can*nd_canorg))  ,3)),3)-round((round((round(  ((nd_can*nd_canorg))  ,3)),3)*(nd_pordes/100)),3)))*0.12)";
                strSQL+=" 	       when st_ivacom='N' then ( ((round((round(  ((nd_can*nd_canorg))  ,3)),3)-round((round((round(  ((nd_can*nd_canorg))  ,3)),3)*(nd_pordes/100)),3)))*0)";
                strSQL+=" 		end";
                strSQL+=" 	     ),3)) ";
                strSQL+=" END AS ivaTotal,";
                strSQL+=" CASE WHEN a1.co_tipDoc=3 THEN";
                strSQL+="       ( (sum((round((round(  ((nd_can*nd_canorg))  ,3)),3)-round((round((round(  ((nd_can*nd_canorg))  ,3)),3)*(nd_pordes/100)),3)))*-1) +";
                strSQL+=" 		round(sum(case when st_ivacom='S' then";
                strSQL+=" 	     ( ((round((round(  ((nd_can*nd_canorg))  ,3)),3)-round((round((round(  ((nd_can*nd_canorg))  ,3)),3)*(nd_pordes/100)),3)))*0.12)";
                strSQL+=" 	       when st_ivacom='N' then ( ((round((round(  ((nd_can*nd_canorg))  ,3)),3)-round((round((round(  ((nd_can*nd_canorg))  ,3)),3)*(nd_pordes/100)),3)))*0)";
                strSQL+=" 		end";
                strSQL+=" 	     ),3)*-1) ";
                strSQL+="       ELSE ( (sum((round((round(  ((nd_can*nd_canorg))  ,3)),3)-round((round((round(  ((nd_can*nd_canorg))  ,3)),3)*(nd_pordes/100)),3)))*-1) +";
                strSQL+=" 		round(sum(case when st_ivacom='S' then";
                strSQL+=" 	     ( ((round((round(  ((nd_can*nd_canorg))  ,3)),3)-round((round((round(  ((nd_can*nd_canorg))  ,3)),3)*(nd_pordes/100)),3)))*0.12)";
                strSQL+=" 	       when st_ivacom='N' then ( ((round((round(  ((nd_can*nd_canorg))  ,3)),3)-round((round((round(  ((nd_can*nd_canorg))  ,3)),3)*(nd_pordes/100)),3)))*0)";
                strSQL+=" 		end";
                strSQL+=" 	     ),3)*-1) ";
                strSQL+=" END AS totalDcto";
                strSQL+="       ,co_forPag, tx_desForPag from tbm_cabmovinv as a1 inner join tbm_detmovinv as a2";
                strSQL+="       on a1.co_emp=a2.co_emp and a1.co_loc=a2.co_loc and a1.co_tipdoc=a2.co_tipdoc and a1.co_doc=a2.co_doc";
                strSQL+="       inner join tbm_cabtipdoc as a3 on a2.co_emp=a3.co_emp and a2.co_loc=a3.co_loc and a2.co_tipdoc=a3.co_tipdoc";
                strSQL+="       where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="       and a1.co_tipdoc in (3,99) and a1.st_reg in('A', 'R', 'C', 'F')";
                strSQL+=strAuxTmp;
                strSQL+="       and a1.st_tipdev='V'";
                strSQL+="       group by a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numdoc, a1.fe_doc, a1.co_cli, a1.tx_nomcli, a1.tx_ruc, a1.co_tipdoc, a3.tx_descor, nd_can, a2.nd_pordes,a1.co_forPag, a1.tx_desForPag";

                strSQL+="   UNION ALL";
                strSQL+="      select distinct(co_emp) AS co_emp, co_loc, co_tipDoc, co_doc, numDoc, fecDoc, codCli, nomCli, rucCli,codTipDoc, nomTipDoc, subtotal, descuento, valorNeto, ivaTotal, totalDcto";
                strSQL+="      ,co_forPag, tx_desForPag from (";
                strSQL+=" 	      select a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+="               a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc , d.tx_descor as nomTipDoc,";
                strSQL+=" 	      round(a1.nd_sub,2)*-1 as subtotal, 0 as descuento, round(a1.nd_sub,2)*-1 as valorNeto,";
                strSQL+="               0 as ivaTotal, round(a1.nd_sub,2)*-1 as totalDcto";
                strSQL+="               ,co_forPag, tx_desForPag from tbm_cabmovinv as a1  inner join tbm_cabdia as b";
                strSQL+="               on (a1.co_emp=b.co_emp and a1.co_loc=b.co_loc and a1.co_tipdoc=b.co_tipdoc and a1.co_doc=b.co_dia)";
                strSQL+=" 	      inner join tbm_detdia as c on (b.co_emp=c.co_emp and b.co_loc=c.co_loc and b.co_tipdoc=c.co_tipdoc and b.co_dia=c.co_dia)";
                strSQL+="               inner join tbm_cabtipdoc as d on (b.co_emp=d.co_emp and b.co_loc=d.co_loc and b.co_tipdoc=d.co_tipdoc)";
                strSQL+="               where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="               and a1.co_tipdoc=28 and a1.st_reg in ('A', 'R', 'C', 'F')";
                if(objParSis.getCodigoEmpresa() == 1)
                    strSQL+="           and c.co_cta in(1434)";
                if(objParSis.getCodigoEmpresa() == 2)
                    strSQL+="           and c.co_cta in(545,551,1037,1163)";
                if(objParSis.getCodigoEmpresa() == 3)
                    strSQL+="           and c.co_cta in(1333)";
                if(objParSis.getCodigoEmpresa() == 4)
                    strSQL+="           and c.co_cta in(1373)";
                strSQL+=strAuxTmp;

                strSQL+="EXCEPT";
                strSQL+=" 			select distinct(a1.co_emp) AS co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+="                       a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc , d.tx_descor as nomTipDoc,";
                strSQL+="                       round(a1.nd_sub,2)*-1 as subtotal, 0 as descuento, round(a1.nd_sub,2)*-1 as valorNeto,";
                strSQL+="                       0 as ivaTotal, round(a1.nd_sub,2)*-1 as totalDcto";
                strSQL+="                       ,co_forPag, tx_desForPag from tbm_cabmovinv as a1 inner join tbm_cabdia as b";
                strSQL+=" 			on (a1.co_emp=b.co_emp and a1.co_loc=b.co_loc and a1.co_tipdoc=b.co_tipdoc and a1.co_doc=b.co_dia)";
                strSQL+=" 			inner join tbm_detdia as c on (b.co_emp=c.co_emp and b.co_loc=c.co_loc and b.co_tipdoc=c.co_tipdoc";
                strSQL+=" 			and b.co_dia=c.co_dia) inner join tbm_cabtipdoc as d on (b.co_emp=d.co_emp and b.co_loc=d.co_loc";
                strSQL+=" 			and b.co_tipdoc=d.co_tipdoc)";
                strSQL+="                         where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="                         and a1.co_tipdoc=28 and a1.st_reg in ('A', 'R', 'C', 'F')";
                if(objParSis.getCodigoEmpresa() == 1)
                    strSQL+="           and c.co_cta in(1437,1030)";
                if(objParSis.getCodigoEmpresa() == 2)
                    strSQL+="           and c.co_cta in(548,224)";
                if(objParSis.getCodigoEmpresa() == 3)
                    strSQL+="           and c.co_cta in(1336,945)";
                if(objParSis.getCodigoEmpresa() == 4)
                    strSQL+="           and c.co_cta in(1376,977)";
                
                strSQL+=" UNION ALL";
                strSQL+="       select distinct(a1.co_emp) AS co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+="       a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc , d.tx_descor as nomTipDoc,";
                strSQL+="       round((a1.nd_sub/1.12),2)*-1 as subtotal, 0 as descuento, round((a1.nd_sub/1.12),2)*-1 as valorNeto,";
                strSQL+="       round(((a1.nd_sub/1.12)*0.12),2)*-1 as ivaTotal,";
                strSQL+="       round ((round((a1.nd_sub/1.12),2) + round(((a1.nd_sub/1.12)*0.12),2)),2)*-1 as totalDcto";
                strSQL+="       ,co_forPag, tx_desForPag from tbm_cabmovinv as a1 inner join tbm_cabdia as b on (a1.co_emp=b.co_emp and a1.co_loc=b.co_loc";
                strSQL+="       and a1.co_tipdoc=b.co_tipdoc and a1.co_doc=b.co_dia) inner join tbm_detdia as c";
                strSQL+="       on (b.co_emp=c.co_emp and b.co_loc=c.co_loc and b.co_tipdoc=c.co_tipdoc and b.co_dia=c.co_dia)";
                strSQL+="       inner join tbm_cabtipdoc as d on (b.co_emp=d.co_emp and b.co_loc=d.co_loc and b.co_tipdoc=d.co_tipdoc)";
                strSQL+="       where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="       and a1.co_tipdoc=28 and a1.st_reg in ('A', 'R', 'C', 'F')";
                if(objParSis.getCodigoEmpresa() == 1)
                    strSQL+="           and c.co_cta in(1030)";
                if(objParSis.getCodigoEmpresa() == 2)
                    strSQL+="           and c.co_cta in(224)";
                if(objParSis.getCodigoEmpresa() == 3)
                    strSQL+="           and c.co_cta in(945)";
                if(objParSis.getCodigoEmpresa() == 4)
                    strSQL+="           and c.co_cta in(977)";
                strSQL+=strAuxTmp;
                strSQL+=" EXCEPT";
                strSQL+="             select distinct(a1.co_emp) AS co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+="       a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc , d.tx_descor as nomTipDoc,";
                strSQL+="       round((a1.nd_sub/1.12),2)*-1 as subtotal, 0 as descuento, round((a1.nd_sub/1.12),2)*-1 as valorNeto,";
                strSQL+="       round(((a1.nd_sub/1.12)*0.12),2)*-1 as ivaTotal,";
                strSQL+="       round ((round((a1.nd_sub/1.12),2) + round(((a1.nd_sub/1.12)*0.12),2)),2)*-1 as totalDcto";
                strSQL+="             ,co_forPag, tx_desForPag from tbm_cabmovinv as a1 inner join tbm_cabdia as b";
                strSQL+="             on (a1.co_emp=b.co_emp and a1.co_loc=b.co_loc and a1.co_tipdoc=b.co_tipdoc and a1.co_doc=b.co_dia)";
                strSQL+=" 	    inner join tbm_detdia as c on (b.co_emp=c.co_emp and b.co_loc=c.co_loc and b.co_tipdoc=c.co_tipdoc and b.co_dia=c.co_dia)";
                strSQL+="             inner join tbm_cabtipdoc as d on (b.co_emp=d.co_emp and b.co_loc=d.co_loc and b.co_tipdoc=d.co_tipdoc)";
                strSQL+=" 	    where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="             and a1.co_tipdoc=28 and a1.st_reg in ('A', 'R', 'C', 'F')";
                if(objParSis.getCodigoEmpresa() == 1)
                    strSQL+="           and c.co_cta in(1437)";
                if(objParSis.getCodigoEmpresa() == 2)
                    strSQL+="           and c.co_cta in(548)";
                if(objParSis.getCodigoEmpresa() == 3)
                    strSQL+="           and c.co_cta in(1336)";
                if(objParSis.getCodigoEmpresa() == 4)
                    strSQL+="           and c.co_cta in(1376)";                
                strSQL+="           ) as a1";
                
                strSQL+=" ) as a5";
                strSQL+=" order by a5.fecDoc, a5.numDoc";
                System.out.println("SQL cargarDetReg: " + strSQL);
                rst=stm.executeQuery(strSQL);

                vecDat.clear();
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                //pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;                

                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_COD_EMP,"" + rst.getString("co_emp"));
                        vecReg.add(INT_TBL_DAT_COD_LOC,"" + rst.getString("co_loc"));
                        vecReg.add(INT_TBL_DAT_COD_TIP_DOC,"" + rst.getString("co_tipDoc"));
                        vecReg.add(INT_TBL_DAT_COD_DOC,"" + rst.getString("co_doc"));
                        vecReg.add(INT_TBL_DAT_TIP,     "" + rst.getString("nomTipDoc"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC, "" + rst.getString("numDoc"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC, "" + rst.getDate("fecDoc"));
                        double dblsubTot=rst.getDouble("subtotal");
                        double dblDes=rst.getDouble("descuento");                       
                        double dblSubtotal=dblsubTot+dblDes;                        
                        vecReg.add(INT_TBL_DAT_SUB, ""+dblsubTot);
                        vecReg.add(INT_TBL_DAT_DES, ""+dblDes);
                        vecReg.add(INT_TBL_DAT_VAL_NET, ""+rst.getDouble("valorNeto"));
                        vecReg.add(INT_TBL_DAT_IVA, ""+rst.getDouble("ivaTotal"));
                        vecReg.add(INT_TBL_DAT_TOT_DOC, ""+rst.getDouble("totalDcto"));
                        vecReg.add(INT_TBL_DAT_VAL_ABO, "");
                        vecReg.add(INT_TBL_DAT_VAL_PND, "");
                        vecReg.add(INT_TBL_DAT_COD_CLI, ""+rst.getString("codCli"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI, ""+rst.getString("nomCli"));  
                        String strRucCli=rst.getString("rucCli")==null?"":rst.getString("rucCli");
                        vecReg.add(INT_TBL_DAT_RUC_CLI, ""+strRucCli);
                        vecReg.add(INT_TBL_DAT_FOR_PAG_CON, "");
                        vecReg.add(INT_TBL_DAT_FOR_PAG_CRE, "");

                        strForPag=rst.getObject("co_forPag")==null?"":rst.getString("co_forPag");
                        if(strForPag.equals("1"))
                            vecReg.setElementAt(rst.getString("valorNeto"), INT_TBL_DAT_FOR_PAG_CON);
                        else
                            vecReg.setElementAt(rst.getString("valorNeto"), INT_TBL_DAT_FOR_PAG_CRE);

                        vecDat.add(vecReg);                                                                                                
                        i++;
                        pgrSis.setValue(i);                        
                        lblMsgSis.setText("Se encontraron " + rst.getRow() + " registros.");                        
                    }
                    else
                    {                        
                        break;
                    }                    
                }
                rst.close();
                stm.close();
                rst=null;
                stm=null;

                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);                
                pgrSis.setValue(0);
                butCon.setText("Consultar");
//                objTblTot.calcularTotales();

            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    

  
    private boolean cargarDetNC()
    {
        String strNiv;
        int intCodEmp, i;
        boolean blnRes=true;
        double dblNumVta=0.00;
        double dblValNet=0.00;
        String strForPag="";
        try
        {
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            intCodEmp=objParSis.getCodigoEmpresa();
            String strNomEmp=retNomEmp(intCodEmp);
            if (con!=null){
                strAuxTmp="";
                
                switch (objSelFec.getTipoSeleccion()){
                    case 0: //Básqueda por rangos
                        strAuxTmp+=" AND a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 1: //Fechas menores o iguales que "Hasta".
                        strAuxTmp+=" AND a1.fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 2: //Fechas mayores o iguales que "Desde".
                        strAuxTmp+=" AND a1.fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 3: //Todo.
                        break;
                }

                if(lblOrdVen.isSelected()){
                    strAuxTmp+=" AND a1.co_com=" + txtCodVen.getText()  + "";
                }                    
                if(lblOrdCli.isSelected()){
                    strAuxTmp+=" AND a1.co_cli=" + txtCodCli.getText()  + "";
                }
                stm=con.createStatement();
                strSQL="";
                strSQL+=" SELECT co_emp, co_loc, co_doc, numDoc, fecDoc, codCli, nomCli, rucCli, codTipDoc, nomTipDoc, subtotal, descuento, valorNeto, ivaTotal, totalDcto ,co_forPag, tx_desForPag from(";
                strSQL+="       select a1.co_emp, a1.co_loc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+="       a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc, a3.tx_descor as nomTipDoc,";
                strSQL+="       (abs(a1.nd_sub)  +  (round(sum(round(  ((abs(round(nd_can,6))*round(nd_preuni,6))*(round(nd_pordes,2)/100) ),6)),2) ))  *-1 AS subtotal,";
                strSQL+="       round(sum(round(  ((abs(round(nd_can,6))*round(nd_preuni,6))*(round(nd_pordes,2)/100) ),6)),2)*-1 AS descuento,";
                strSQL+="       ((abs(a1.nd_sub)  +  (round(sum(round(  ((abs(round(nd_can,6))*round(nd_preuni,6))*(round(nd_pordes,2)/100) ),6)),2) ))  -   (round(sum(round(  ((abs(round(nd_can,6))*round(nd_preuni,6))*(round(nd_pordes,2)/100) ),6)),2))   )  *-1 AS valorNeto,";
                strSQL+="       (abs(a1.nd_valIva)) *-1 AS ivaTotal,";
                strSQL+="       (abs(a1.nd_tot)) *-1 AS totalDcto";
                strSQL+="       ,a1.co_forPag, a1.tx_desForPag from tbm_cabmovinv as a1 inner join tbm_detmovinv as a2";
                strSQL+="       on a1.co_emp=a2.co_emp and a1.co_loc=a2.co_loc and a1.co_tipdoc=a2.co_tipdoc and a1.co_doc=a2.co_doc";
                strSQL+="       inner join tbm_cabtipdoc as a3 on a2.co_emp=a3.co_emp and a2.co_loc=a3.co_loc and a2.co_tipdoc=a3.co_tipdoc";
                strSQL+="       where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="       and a1.co_tipdoc in (3) and a1.st_reg in('A', 'R', 'C', 'F')";
                strSQL+=strAuxTmp;
                strSQL+="       and a1.st_tipdev='C'";
                strSQL+="       group by a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc, a1.ne_numdoc, a1.fe_doc, a1.co_cli, a1.tx_nomcli, a1.tx_ruc, a3.co_tipdoc, a3.tx_descor, a1.nd_sub, a1.nd_valIva, a1.nd_tot,a1.co_forPag, a1.tx_desForPag";
                strSQL+="   UNION ALL";
                strSQL+=" select a1.co_emp, a1.co_loc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+=" a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc, a3.tx_descor as nomTipDoc,";
                strSQL+=" nd_sub*-1 AS  subtotal,";
                strSQL+=" round(sum(round(  ((nd_preuni*((nd_canorg)/100)))  ,2)),2)*0 AS descuento,";
                strSQL+=" (nd_sub-(round(sum(round(  ((nd_preuni*((nd_canorg)/100)))  ,2)),2)*0)) *-1 AS valorNeto,";
                strSQL+=" (nd_valiva) AS ivaTotal,";
                strSQL+=" (((nd_sub-(round(sum(round(  ((nd_preuni*((nd_canorg)/100)))  ,2)),2)*0))+nd_valiva)*-1) AS totalDcto";
                strSQL+=" ,a1.co_forPag, a1.tx_desForPag from tbm_cabmovinv as a1 inner join tbm_detmovinv as a2";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.co_loc=a2.co_loc and a1.co_tipdoc=a2.co_tipdoc and a1.co_doc=a2.co_doc";
                strSQL+=" inner join tbm_cabtipdoc as a3 on a2.co_emp=a3.co_emp and a2.co_loc=a3.co_loc and a2.co_tipdoc=a3.co_tipdoc";
                strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and a1.co_tipdoc in (3) and a1.st_reg in('A', 'R', 'C', 'F')";
                strSQL+=strAuxTmp;
                strSQL+="   and a1.st_tipdev='P'";
                strSQL+="   group by a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc, a1.ne_numdoc, a1.fe_doc, a1.co_cli, a1.tx_nomcli, a1.tx_ruc, a3.tx_descor, nd_can";                
                strSQL+=" , nd_sub, nd_valiva,a1.co_forPag, a1.tx_desForPag";
                strSQL+="   UNION ALL";
                strSQL+="       select a1.co_emp, a1.co_loc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+="       a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc, a3.tx_descor as nomTipDoc,";
                strSQL+="       round(sum(round(  ((nd_can*nd_canorg))  ,2)),2)*-1 AS  subtotal,";
                strSQL+="       round((round(sum(round(  ((nd_can*nd_canorg))  ,2)),2)*(nd_pordes/100)),2)*-1 AS descuento,";
                strSQL+="       sum((round((round(  ((nd_can*nd_canorg))  ,2)),2)-round((round((round(  ((nd_can*nd_canorg))  ,2)),2)*(nd_pordes/100)),2))) *-1 AS valorNeto,";
                strSQL+="       (round(sum(case when st_ivacom='S' then";
                strSQL+=" 	     ( ((round((round(  ((nd_can*nd_canorg))  ,2)),2)-round((round((round(  ((nd_can*nd_canorg))  ,2)),2)*(nd_pordes/100)),2)))*0.12)";
                strSQL+=" 	       when st_ivacom='N' then ( ((round((round(  ((nd_can*nd_canorg))  ,2)),2)-round((round((round(  ((nd_can*nd_canorg))  ,2)),2)*(nd_pordes/100)),2)))*0)";
                strSQL+=" 		end";
                strSQL+=" 	     ),2)*-1) AS ivaTotal,";
                strSQL+="       ( (sum((round((round(  ((nd_can*nd_canorg))  ,2)),2)-round((round((round(  ((nd_can*nd_canorg))  ,2)),2)*(nd_pordes/100)),2)))*-1) +";
                strSQL+=" 		round(sum(case when st_ivacom='S' then";
                strSQL+=" 	     ( ((round((round(  ((nd_can*nd_canorg))  ,2)),2)-round((round((round(  ((nd_can*nd_canorg))  ,2)),2)*(nd_pordes/100)),2)))*0.12)";
                strSQL+=" 	       when st_ivacom='N' then ( ((round((round(  ((nd_can*nd_canorg))  ,2)),2)-round((round((round(  ((nd_can*nd_canorg))  ,2)),2)*(nd_pordes/100)),2)))*0)";
                strSQL+=" 		end";
                strSQL+=" 	     ),2)*-1) AS totalDcto";
                strSQL+="       ,a1.co_forPag, a1.tx_desForPag from tbm_cabmovinv as a1 inner join tbm_detmovinv as a2";
                strSQL+="       on a1.co_emp=a2.co_emp and a1.co_loc=a2.co_loc and a1.co_tipdoc=a2.co_tipdoc and a1.co_doc=a2.co_doc";
                strSQL+="       inner join tbm_cabtipdoc as a3 on a2.co_emp=a3.co_emp and a2.co_loc=a3.co_loc and a2.co_tipdoc=a3.co_tipdoc";
                strSQL+="       where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="       and a1.co_tipdoc in (3) and a1.st_reg in('A', 'R', 'C', 'F')";
                strSQL+=strAuxTmp;
                strSQL+="       and a1.st_tipdev='V'";
                strSQL+="       group by a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc, a1.ne_numdoc, a1.fe_doc, a1.co_cli, a1.tx_nomcli, a1.tx_ruc, a3.tx_descor, nd_can, a2.nd_pordes,a1.co_forPag, a1.tx_desForPag";
                strSQL+="   UNION ALL";
                strSQL+="      select co_emp, co_loc, co_doc, numDoc, fecDoc, codCli, nomCli, rucCli,codTipDoc, nomTipDoc, subtotal, descuento, valorNeto, ivaTotal, totalDcto";
                strSQL+="      ,co_forPag, tx_desForPag from (";
                strSQL+=" 	      select a1.co_emp, a1.co_loc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+="               a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc , d.tx_descor as nomTipDoc,";
                strSQL+=" 	      round(a1.nd_sub,2)*-1 as subtotal, 0 as descuento, round(a1.nd_sub,2)*-1 as valorNeto,";
                strSQL+="               0 as ivaTotal, round(a1.nd_sub,2)*-1 as totalDcto";
                strSQL+="               ,a1.co_forPag, a1.tx_desForPag from tbm_cabmovinv as a1  inner join tbm_cabdia as b";
                strSQL+="               on (a1.co_emp=b.co_emp and a1.co_loc=b.co_loc and a1.co_tipdoc=b.co_tipdoc and a1.co_doc=b.co_dia)";
                strSQL+=" 	      inner join tbm_detdia as c on (b.co_emp=c.co_emp and b.co_loc=c.co_loc and b.co_tipdoc=c.co_tipdoc and b.co_dia=c.co_dia)";
                strSQL+="             inner join tbm_cabtipdoc as d on (b.co_emp=d.co_emp and b.co_loc=d.co_loc and b.co_tipdoc=d.co_tipdoc)";
                strSQL+=" 		where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" 		and a1.co_tipdoc=28 and a1.st_reg in ('A', 'R', 'C', 'F')";
                if(objParSis.getCodigoEmpresa() == 1)
                    strSQL+="           and c.co_cta in(1434)";
                if(objParSis.getCodigoEmpresa() == 2)
                    strSQL+="           and c.co_cta in(545,551,1037,1163)";
                if(objParSis.getCodigoEmpresa() == 3)
                    strSQL+="           and c.co_cta in(1333)";
                if(objParSis.getCodigoEmpresa() == 4)
                    strSQL+="           and c.co_cta in(1373)";  

                strSQL+=strAuxTmp;
                strSQL+="       EXCEPT";

                strSQL+=" 			select a1.co_emp, a1.co_loc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+="                       a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc , d.tx_descor as nomTipDoc,";
                strSQL+="                       round(a1.nd_sub,2)*-1 as subtotal, 0 as descuento, round(a1.nd_sub,2)*-1 as valorNeto,";
                strSQL+="                       0 as ivaTotal, round(a1.nd_sub,2)*-1 as totalDcto";
                strSQL+="                       ,a1.co_forPag, a1.tx_desForPag from tbm_cabmovinv as a1 inner join tbm_cabdia as b";
                strSQL+=" 			on (a1.co_emp=b.co_emp and a1.co_loc=b.co_loc and a1.co_tipdoc=b.co_tipdoc and a1.co_doc=b.co_dia)";
                strSQL+=" 			inner join tbm_detdia as c on (b.co_emp=c.co_emp and b.co_loc=c.co_loc and b.co_tipdoc=c.co_tipdoc";
                strSQL+=" 			and b.co_dia=c.co_dia) inner join tbm_cabtipdoc as d on (b.co_emp=d.co_emp and b.co_loc=d.co_loc";
                strSQL+=" 			and b.co_tipdoc=d.co_tipdoc)";
                strSQL+="                       where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="                       and a1.co_tipdoc=28 and a1.st_reg in ('A', 'R', 'C', 'F')";
                if(objParSis.getCodigoEmpresa() == 1)
                    strSQL+="           and c.co_cta in(1437,1030)";
                if(objParSis.getCodigoEmpresa() == 2)
                    strSQL+="           and c.co_cta in(548,224)";
                if(objParSis.getCodigoEmpresa() == 3)
                    strSQL+="           and c.co_cta in(1336,945)";
                if(objParSis.getCodigoEmpresa() == 4)
                    strSQL+="           and c.co_cta in(1376,977)";
                strSQL+=" UNION ALL";
                strSQL+="       select a1.co_emp, a1.co_loc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+="       a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc , d.tx_descor as nomTipDoc,";
                strSQL+="       round((a1.nd_sub/1.12),2)*-1 as subtotal, 0 as descuento, round((a1.nd_sub/1.12),2)*-1 as valorNeto,";
                strSQL+="       round(((a1.nd_sub/1.12)*0.12),2)*-1 as ivaTotal,";
                strSQL+="       round ((round((a1.nd_sub/1.12),2) + round(((a1.nd_sub/1.12)*0.12),2)),2)*-1 as totalDcto";
                strSQL+="       ,a1.co_forPag, a1.tx_desForPag from tbm_cabmovinv as a1 inner join tbm_cabdia as b on (a1.co_emp=b.co_emp and a1.co_loc=b.co_loc";
                strSQL+="       and a1.co_tipdoc=b.co_tipdoc and a1.co_doc=b.co_dia) inner join tbm_detdia as c";
                strSQL+="       on (b.co_emp=c.co_emp and b.co_loc=c.co_loc and b.co_tipdoc=c.co_tipdoc and b.co_dia=c.co_dia)";
                strSQL+="       inner join tbm_cabtipdoc as d on (b.co_emp=d.co_emp and b.co_loc=d.co_loc and b.co_tipdoc=d.co_tipdoc)";
                strSQL+="       where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="       and a1.co_tipdoc=28 and a1.st_reg in ('A', 'R', 'C', 'F')";
                if(objParSis.getCodigoEmpresa() == 1)
                    strSQL+="           and c.co_cta in(1030)";
                if(objParSis.getCodigoEmpresa() == 2)
                    strSQL+="           and c.co_cta in(224)";
                if(objParSis.getCodigoEmpresa() == 3)
                    strSQL+="           and c.co_cta in(945)";
                if(objParSis.getCodigoEmpresa() == 4)
                    strSQL+="           and c.co_cta in(977)";
                strSQL+=strAuxTmp;
                strSQL+="      EXCEPT";
                strSQL+="             select  a1.co_emp, a1.co_loc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+="       a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc , d.tx_descor as nomTipDoc,";
                strSQL+="       round((a1.nd_sub/1.12),2)*-1 as subtotal, 0 as descuento, round((a1.nd_sub/1.12),2)*-1 as valorNeto,";
                strSQL+="       round(((a1.nd_sub/1.12)*0.12),2)*-1 as ivaTotal,";
                strSQL+="       round ((round((a1.nd_sub/1.12),2) + round(((a1.nd_sub/1.12)*0.12),2)),2)*-1 as totalDcto";
                strSQL+="             ,a1.co_forPag, a1.tx_desForPag from tbm_cabmovinv as a1 inner join tbm_cabdia as b";
                strSQL+="             on (a1.co_emp=b.co_emp and a1.co_loc=b.co_loc and a1.co_tipdoc=b.co_tipdoc and a1.co_doc=b.co_dia)";
                strSQL+=" 	    inner join tbm_detdia as c on (b.co_emp=c.co_emp and b.co_loc=c.co_loc and b.co_tipdoc=c.co_tipdoc and b.co_dia=c.co_dia)";
                strSQL+="             inner join tbm_cabtipdoc as d on (b.co_emp=d.co_emp and b.co_loc=d.co_loc and b.co_tipdoc=d.co_tipdoc)";
                strSQL+=" 	    where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="             and a1.co_tipdoc=28 and a1.st_reg in ('A', 'R', 'C', 'F')";
                if(objParSis.getCodigoEmpresa() == 1)
                    strSQL+="           and c.co_cta in(1437)";
                if(objParSis.getCodigoEmpresa() == 2)
                    strSQL+="           and c.co_cta in(548)";
                if(objParSis.getCodigoEmpresa() == 3)
                    strSQL+="           and c.co_cta in(1336)";
                if(objParSis.getCodigoEmpresa() == 4)
                    strSQL+="           and c.co_cta in(1376)";
                strSQL+="          ) as a1";
                strSQL+="   ) as a5";
                strSQL+=" order by a5.fecDoc, a5.numDoc";
                System.out.println("SQL cargarDetNC: " + strSQL);
                rst=stm.executeQuery(strSQL);
                vecDat.clear();
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                //pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;
                
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_COD_EMP,"" + rst.getString("co_emp"));
                        vecReg.add(INT_TBL_DAT_COD_LOC,"" + rst.getString("co_loc"));
                        vecReg.add(INT_TBL_DAT_COD_TIP_DOC,"" + rst.getString("codTipDoc"));
                        vecReg.add(INT_TBL_DAT_COD_DOC,"" + rst.getString("co_doc"));
                        vecReg.add(INT_TBL_DAT_TIP, ""+rst.getString("nomTipDoc"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC, ""+rst.getString("numDoc"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC, ""+rst.getDate("fecDoc"));
                        double dblsubTot=rst.getDouble("subtotal");
                        double dblDes=rst.getDouble("descuento");
                        double dblSubtotal=dblsubTot+dblDes;                        
                        vecReg.add(INT_TBL_DAT_SUB, ""+dblsubTot);
                        vecReg.add(INT_TBL_DAT_DES, ""+dblDes);
                        vecReg.add(INT_TBL_DAT_VAL_NET, ""+rst.getDouble("valorNeto"));
                        vecReg.add(INT_TBL_DAT_IVA, ""+rst.getDouble("ivaTotal"));
                        vecReg.add(INT_TBL_DAT_TOT_DOC, ""+rst.getDouble("totalDcto"));
                        vecReg.add(INT_TBL_DAT_VAL_ABO, "");
                        vecReg.add(INT_TBL_DAT_VAL_PND, "");
                        vecReg.add(INT_TBL_DAT_COD_CLI, ""+rst.getString("codCli"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI, ""+rst.getString("nomCli"));  
                        String strRucCli=rst.getString("rucCli")==null?"":rst.getString("rucCli");
                        vecReg.add(INT_TBL_DAT_RUC_CLI, ""+strRucCli);
                        vecReg.add(INT_TBL_DAT_FOR_PAG_CON, "");
                        vecReg.add(INT_TBL_DAT_FOR_PAG_CRE, "");

                        strForPag=rst.getObject("co_forPag")==null?"":rst.getString("co_forPag");
                        if(strForPag.equals("1"))
                            vecReg.setElementAt(rst.getString("subtotal"), INT_TBL_DAT_FOR_PAG_CON);
                        else
                            vecReg.setElementAt(rst.getString("subtotal"), INT_TBL_DAT_FOR_PAG_CRE);

                        vecDat.add(vecReg);                                                
                        i++;
                        pgrSis.setValue(i);
                        lblMsgSis.setText("Se encontraron " + rst.getRow() + " registros");
                    }
                    else
                    {
                        break;
                    }
                }
                rst.close();
                stm.close();
                rst=null;
                stm=null;
 

                //Asignar vectores al modelo.
//                objTblMod.setData(vecDat);
//                tblDat.setModel(objTblMod);
//                
//                if (intNumTotReg==tblDat.getRowCount())
//                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros.");
//                else
//                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros pero sálo se procesaron " + tblDat.getRowCount() + ".");
//                pgrSis.setValue(0);
//                butCon.setText("Consultar");
//                  objTblTot.calcularTotales();                
                                                
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);                
                pgrSis.setValue(0);
                butCon.setText("Consultar");
//                  objTblTot.calcularTotales();                 
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
        

    private boolean cargarDetFac()
    {
        String strNiv;
        int intCodEmp, i;
        boolean blnRes=true;
        double dblNumVta=0.00;
        double dblValNet=0.00;
        String strForPag="";
        try
        {
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            intCodEmp=objParSis.getCodigoEmpresa();
            String strNomEmp=retNomEmp(intCodEmp);
            if (con!=null){
                strAuxTmp="";
                
                switch (objSelFec.getTipoSeleccion()){
                    case 0: //Básqueda por rangos
                        strAuxTmp+=" AND a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 1: //Fechas menores o iguales que "Hasta".
                        strAuxTmp+=" AND a1.fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 2: //Fechas mayores o iguales que "Desde".
                        strAuxTmp+=" AND a1.fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 3: //Todo.
                        break;
                }

                if(lblOrdVen.isSelected()){
                    strAuxTmp+=" AND a1.co_com=" + txtCodVen.getText()  + "";
                }                    
                if(lblOrdCli.isSelected()){
                    strAuxTmp+=" AND a1.co_cli=" + txtCodCli.getText()  + "";
                }
                
                //PARA FACTURAS
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT co_emp, co_loc, co_doc, numDoc, fecDoc, codCli, nomCli, rucCli, codTipDoc, nomTipDoc, subtotal, descuento, valorNeto, ivaTotal, totalDcto";
                strSQL+=" ,co_forPag, tx_desForPag from(";
                strSQL+=" 		select a1.co_emp, a1.co_loc, a1.co_doc, a1.ne_numdoc as numDoc, a1.fe_doc as fecDoc, a1.co_cli as codCli, a1.tx_nomcli as nomCli,";
                strSQL+=" 		a1.tx_ruc as rucCli, a1.co_tipdoc as codTipDoc, a3.tx_descor as nomTipDoc,";
                strSQL+="               CASE WHEN a1.co_tipdoc=1 THEN round(sum(round(  ((abs(round(nd_can,6))*round(nd_preuni,6))*(round(nd_pordes,2)/100)   )  ,6)),2)";
                strSQL+="                 END AS descuento,";
                strSQL+="               CASE WHEN a1.co_tipdoc=1 THEN (abs(a1.nd_sub)+(round(sum(round(  ((abs(round(nd_can,6))*round(nd_preuni,6))*(round(nd_pordes,2)/100)   )  ,6)),2)))";
                strSQL+="                 END AS subtotal,";
                strSQL+="               CASE WHEN a1.co_tipdoc=1 THEN ((abs(a1.nd_sub)+(round(sum(round(  ((abs(round(nd_can,6))*round(nd_preuni,6))*(round(nd_pordes,2)/100)   )  ,6)),2)))   -  (round(sum(round(  ((abs(round(nd_can,6))*round(nd_preuni,6))*(round(nd_pordes,2)/100)   )  ,6)),2))   )";
                strSQL+="                 END AS valorNeto,";
                strSQL+="               CASE WHEN a1.co_tipdoc=1 THEN (abs(a1.nd_valIva))";
                strSQL+="                 END AS ivaTotal,";
                strSQL+="               CASE WHEN a1.co_tipdoc=1 THEN (abs(a1.nd_tot))";
                strSQL+="                 END AS totalDcto";
                
                strSQL+=" 		,a1.co_forPag, a1.tx_desForPag from tbm_cabmovinv as a1 inner join tbm_detmovinv as a2";
		strSQL+=" 		on a1.co_emp=a2.co_emp and a1.co_loc=a2.co_loc and a1.co_tipdoc=a2.co_tipdoc and a1.co_doc=a2.co_doc";
                strSQL+=" 		inner join tbm_cabtipdoc as a3";
                strSQL+=" 		on a2.co_emp=a3.co_emp and a2.co_loc=a3.co_loc and a2.co_tipdoc=a3.co_tipdoc";
                strSQL+="               where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="                 and a1.co_tipdoc in (1) and a1.st_reg in('A', 'R', 'C', 'F')";
                strSQL+=strAuxTmp;
                strSQL+=" 		group by a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numdoc, a1.fe_doc, a1.co_cli, a1.tx_nomcli, a1.tx_ruc, a3.co_tipdoc, a3.tx_descor, a1.nd_sub, a1.nd_valIva, a1.nd_tot,a1.co_forPag, a1.tx_desForPag";
                strSQL+=" ) as a5";
                strSQL+=" order by a5.fecDoc, a5.numDoc";
                System.out.println("SQL cargarDetFac:" +strSQL);
                rst=stm.executeQuery(strSQL);

                vecDat.clear();
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                //pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;
                                
                while (rst.next())
                {
                    if (blnCon)
                    {                        
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        
                        vecReg.add(INT_TBL_DAT_COD_EMP,"" + rst.getString("co_emp"));
                        vecReg.add(INT_TBL_DAT_COD_LOC,"" + rst.getString("co_loc"));
                        vecReg.add(INT_TBL_DAT_COD_TIP_DOC,"" +rst.getString("codTipDoc"));
                        vecReg.add(INT_TBL_DAT_COD_DOC,"" + rst.getString("co_doc"));
                        vecReg.add(INT_TBL_DAT_TIP, ""+rst.getString("nomTipDoc"));                        
                        vecReg.add(INT_TBL_DAT_NUM_DOC, ""+rst.getString("numDoc"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC, ""+rst.getDate("fecDoc"));
                        double dblsubTot=rst.getDouble("subtotal");
                        double dblDes=rst.getDouble("descuento");
                        double dblSubtotal=dblsubTot+dblDes;                        
                        vecReg.add(INT_TBL_DAT_SUB, ""+dblsubTot);
                        vecReg.add(INT_TBL_DAT_DES, ""+dblDes);
                        vecReg.add(INT_TBL_DAT_VAL_NET, ""+rst.getDouble("valorNeto"));
                        vecReg.add(INT_TBL_DAT_IVA, ""+rst.getDouble("ivaTotal"));
                        vecReg.add(INT_TBL_DAT_TOT_DOC, ""+rst.getDouble("totalDcto"));
                        vecReg.add(INT_TBL_DAT_VAL_ABO, "");
                        vecReg.add(INT_TBL_DAT_VAL_PND, "");
                        vecReg.add(INT_TBL_DAT_COD_CLI, ""+rst.getString("codCli"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI, ""+rst.getString("nomCli"));   
                        String strRucCli=rst.getString("rucCli")==null?"":rst.getString("rucCli");
                        vecReg.add(INT_TBL_DAT_RUC_CLI, ""+strRucCli);
                        vecReg.add(INT_TBL_DAT_FOR_PAG_CON, "");
                        vecReg.add(INT_TBL_DAT_FOR_PAG_CRE, "");

                        strForPag=rst.getObject("co_forPag")==null?"":rst.getString("co_forPag");
                        if(strForPag.equals("1"))
                            vecReg.setElementAt(rst.getString("subtotal"), INT_TBL_DAT_FOR_PAG_CON);
                        else
                            vecReg.setElementAt(rst.getString("subtotal"), INT_TBL_DAT_FOR_PAG_CRE);

                        vecDat.add(vecReg);
                        i++;
                        pgrSis.setValue(i);
                        lblMsgSis.setText("Se encontraron " + rst.getRow() + " registros");                                                
                    }
                    else
                    {
                        break;
                    }
                }
                rst.close();
                stm.close();
                rst=null;
                stm=null;
                //Asignar vectores al modelo.                                                
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                pgrSis.setValue(0);
                butCon.setText("Consultar");
//                objTblTot.calcularTotales();
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
            
    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                if (optTod.isSelected()){
                    if(cargarDetReg())
                        if(cargarValAbo())
                            objTblTot.calcularTotales();
                }

                if(lblDocNC.isSelected()){
                    if(cargarDetNC())
                        if(cargarValAbo())
                            objTblTot.calcularTotales();
                }

                if(lblDocFac.isSelected()){
                    if(cargarDetFac())
                        if(cargarValAbo())
                            objTblTot.calcularTotales();
                }
                con.close();
                con=null;
            }            
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
    
    
    private boolean cargarValAbo(){
        boolean blnRes=true;
        arlDat.clear();
        
        int intCodEmp,intCodLoc, intCodTipDoc, intCodDoc;
        int intArlCodEmp,intArlCodLoc, intArlCodTipDoc, intArlCodDoc;
        double dblValAbo, dblValPnd;
        
        try{
            if(con!=null){
                strAuxTmp="";
                switch (objSelFec.getTipoSeleccion()){
                    case 0: //Básqueda por rangos
                        strAuxTmp+=" AND a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 1: //Fechas menores o iguales que "Hasta".
                        strAuxTmp+=" AND a1.fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 2: //Fechas mayores o iguales que "Desde".
                        strAuxTmp+=" AND a1.fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 3: //Todo.
                        break;
                }
                
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc,";
                strSQL+=" a2.co_locPag, a2.co_tipDocPag, a2.co_docPag, a2.nd_abo";
                strSQL+=" FROM tbm_cabPag AS a1 INNER JOIN tbm_detPag AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc";
                strSQL+=" AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a2.co_tipDocPag IN(1,3,28)";
                strSQL+=strAuxTmp;
                strSQL+=" AND a1.st_reg NOT IN ('I', 'E')";
                System.out.println("SQL para llenado de ArrayList: " + strSQL);
                rst=stm.executeQuery(strSQL);
                while(rst.next()){
                    arlReg=new ArrayList();
                    arlReg.add(INT_ARL_COD_EMP,         "" + rst.getString("co_emp"));
                    arlReg.add(INT_ARL_COD_LOC,         "" + rst.getString("co_loc"));
                    arlReg.add(INT_ARL_COD_TIP_DOC,     "" + rst.getString("co_tipDoc"));
                    arlReg.add(INT_ARL_COD_DOC,         "" + rst.getString("co_doc"));
                    arlReg.add(INT_ARL_COD_LOC_PAG,     "" + rst.getString("co_locPag"));
                    arlReg.add(INT_ARL_COD_TIP_DOC_PAG, "" + rst.getString("co_tipDocPag"));
                    arlReg.add(INT_ARL_COD_DOC_PAG,     "" + rst.getString("co_docPag"));
                    arlReg.add(INT_ARL_VAL_ABO,         "" + rst.getString("nd_abo"));
                    arlDat.add(arlReg);
                }
                stm.close();
                stm=null;
            }
            
//            System.out.println(" EL ARRAYLIST CONTIENE: " + arlDat.toString());
            
            
            for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                intCodEmp=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_EMP).toString());
                intCodLoc=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_LOC).toString());
                intCodTipDoc=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_TIP_DOC).toString());
                intCodDoc=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_DOC).toString());
                dblValAbo=0.00;
                dblValPnd=0.00;
                
                for(int j=0; j<arlDat.size(); j++){
                    intArlCodEmp=objUti.getIntValueAt(arlDat, j, INT_ARL_COD_EMP);
                    intArlCodLoc=objUti.getIntValueAt(arlDat, j, INT_ARL_COD_LOC_PAG);
                    intArlCodTipDoc=objUti.getIntValueAt(arlDat, j, INT_ARL_COD_TIP_DOC_PAG);
                    intArlCodDoc=objUti.getIntValueAt(arlDat, j, INT_ARL_COD_DOC_PAG);
                    
                    if(intCodEmp==intArlCodEmp){
                        if(intCodLoc==intArlCodLoc){
                            if(intCodTipDoc==intArlCodTipDoc){
                                if(intCodDoc==intArlCodDoc){
                                    dblValAbo+=objUti.getDoubleValueAt(arlDat, j, INT_ARL_VAL_ABO);                                    
                                }
                            }
                        }
                    }                    
                }
                
                objTblMod.setValueAt("" + dblValAbo, i, INT_TBL_DAT_VAL_ABO);
                dblValPnd=Double.parseDouble(objTblMod.getValueAt(i, INT_TBL_DAT_TOT_DOC).toString()) - Double.parseDouble(objTblMod.getValueAt(i, INT_TBL_DAT_VAL_ABO).toString());
                objTblMod.setValueAt("" + dblValPnd, i, INT_TBL_DAT_VAL_PND);
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }


    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD_EMP:
                    strMsg="Código de la empresa";
                    break;
                case INT_TBL_DAT_COD_LOC:
                    strMsg="Código del local";
                    break;
                case INT_TBL_DAT_COD_TIP_DOC:
                    strMsg="Código del tipo de documento";
                    break;
                case INT_TBL_DAT_TIP:
                    strMsg="Descripción corta del tipo de documento";
                    break;
                case INT_TBL_DAT_NUM_DOC:
                    strMsg="Número del documento";
                    break;
                case INT_TBL_DAT_FEC_DOC:
                    strMsg="Fecha del documento";
                    break;
                case INT_TBL_DAT_SUB:
                    strMsg="Subtotal";
                    break;
                case INT_TBL_DAT_DES:
                    strMsg="Descuento";
                    break;
                case INT_TBL_DAT_VAL_NET:
                    strMsg="Valor neto";
                    break;
                case INT_TBL_DAT_IVA:
                    strMsg="Iva";
                    break;
                case INT_TBL_DAT_TOT_DOC:
                    strMsg="Total del documento";
                    break;
                case INT_TBL_DAT_VAL_ABO:
                    strMsg="Abono";
                    break;
                case INT_TBL_DAT_VAL_PND:
                    strMsg="Valor Pendiente de pago";
                    break;
                case INT_TBL_DAT_COD_CLI:
                    strMsg="Código del cliente";
                    break;
                case INT_TBL_DAT_NOM_CLI:
                    strMsg="Nombre del cliente";
                    break;
                case INT_TBL_DAT_RUC_CLI:
                    strMsg="R.U.C. del cliente";
                    break;
                case INT_TBL_DAT_FOR_PAG_CON:
                    strMsg="Valor del documentos que tienen pagos de contado";
                    break;
                case INT_TBL_DAT_FOR_PAG_CRE:
                    strMsg="Valor del documentos que tienen pagos a crédito";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }

    
    
    
}