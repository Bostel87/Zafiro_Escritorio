/*
 * ZafVen01_01.java
 *
 * Created on 9 de marzo de 2006, 9:12
 *
 * v0.1 
 */


package Contabilidad.ZafCon54;

import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
//import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
//import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
//import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;




/**
 *
 * @author  Javier Ayapata
 */
public class ZafCon54_01 extends javax.swing.JDialog {
    
    
    //Constantes: Columnas del JTable:    
    //Variable
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblMod objTblMod;
    private ZafTblEdi objTblEdi;                        //Editor: Editor del JTable.
    private ZafTblPopMnu objTblPopMnu;
    private String strSQL;
    
    
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_EMP=1;
    final int INT_TBL_DAT_COD_LOC=2;
    final int INT_TBL_DAT_COD_TIP_DOC=3;
    final int INT_TBL_DAT_DES_COR_TIP_DOC=4;
    final int INT_TBL_DAT_DES_LAR_TIP_DOC=5;
    final int INT_TBL_DAT_COD_DOC=6;
    final int INT_TBL_DAT_COD_REG=7;
    final int INT_TBL_DAT_COD_PRV=8;
    final int INT_TBL_DAT_NUM_DOC=9;
    final int INT_TBL_DAT_FEC_DOC=10;
    final int INT_TBL_DAT_VAL_PAG=11;
    String strAux;
    private Vector vecCab, vecReg, vecDat;
    private ZafMouMotAda objMouMotAda;
    private ZafTblFilCab objTblFilCab;
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strCorFec;
    private String strCodTipDocFil;
    private String strCodPrv;
    private String strCodCtaAcr;
    private ZafTblCelRenLbl objTblCelRenLblVal;
    
    
     public ZafCon54_01(java.awt.Frame parent, boolean modal, ZafParSis obj) {
         super(parent, modal);
        initComponents();
          //Inicializar objetos.
        objParSis=obj;
        strCorFec="";
        strCodTipDocFil="";
        strCodPrv="";
        configurarFrm();

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGen = new javax.swing.JPanel();
        panGenDet = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butAce = new javax.swing.JButton();
        butCan = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        PanFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Valores a pagar");
        PanFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panGen.setLayout(new java.awt.BorderLayout());

        panGenDet.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDat.setViewportView(tblDat);

        panGenDet.add(spnDat, java.awt.BorderLayout.CENTER);

        panGen.add(panGenDet, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panGen);

        PanFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butAce.setText("Aceptar");
        butAce.setPreferredSize(new java.awt.Dimension(92, 25));
        butAce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAceActionPerformed(evt);
            }
        });
        panBot.add(butAce);

        butCan.setText("Cancelar");
        butCan.setToolTipText("Si presiona cancelar se borrará lo que ha ingresado");
        butCan.setPreferredSize(new java.awt.Dimension(92, 25));
        butCan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCanActionPerformed(evt);
            }
        });
        panBot.add(butCan);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        PanFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(PanFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void butAceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAceActionPerformed
        // TODO add your handling code here:        
        dispose();
    }//GEN-LAST:event_butAceActionPerformed

    private void butCanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCanActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_butCanActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_formWindowClosing
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanFrm;
    private javax.swing.JButton butAce;
    private javax.swing.JButton butCan;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panGen;
    private javax.swing.JPanel panGenDet;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    // End of variables declaration//GEN-END:variables
    
    /** Cerrar la aplicaci�n. */
    private void exitForm(){
        dispose();
    }
    
    
    /** Configurar el formulario. */
    private boolean configurarFrm(){
        boolean blnRes=true;
        strAux="Valores a retener v0.2";
        try{
            //Inicializar objetos.
            objUti=new ZafUtil();
            this.setTitle(strAux);
            lblTit.setText(strAux);
            configurarTblDat();
                
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta funci�n configura el JTable "tblDat".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDat(){
        boolean blnRes=true;
        try{
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(12);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_EMP,"Cód. Emp.");
            vecCab.add(INT_TBL_DAT_COD_LOC,"Cód.Loc.");
            vecCab.add(INT_TBL_DAT_COD_TIP_DOC,"Cód. Tip.Doc.");
            vecCab.add(INT_TBL_DAT_DES_COR_TIP_DOC,"Des.Cor.Tip.Doc.");
            vecCab.add(INT_TBL_DAT_DES_LAR_TIP_DOC,"Des.Lar.Tip.Doc.");
            vecCab.add(INT_TBL_DAT_COD_DOC,"Cód.Doc.");
            vecCab.add(INT_TBL_DAT_COD_REG,"Cód.Reg.");
            vecCab.add(INT_TBL_DAT_COD_PRV,"Cód.Prv.");
            vecCab.add(INT_TBL_DAT_NUM_DOC,"Núm.Doc.");
            vecCab.add(INT_TBL_DAT_FEC_DOC,"Fec.Doc.");
            vecCab.add(INT_TBL_DAT_VAL_PAG,"Val.Pag.");
            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de selecci�n.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el men� de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_DES_COR_TIP_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_DES_LAR_TIP_DOC).setPreferredWidth(120);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_COD_REG).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_COD_PRV).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_VAL_PAG).setPreferredWidth(70);

            
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC).setResizable(false);
            tcmAux.getColumn(INT_TBL_DAT_COD_REG).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
            
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);
            //Configurar JTable: Editor de la tabla.
            objTblEdi=new ZafTblEdi(tblDat);
            //Libero los objetos auxiliares.
            
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_EMP, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_TIP_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_REG, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_PRV, tblDat);


            objTblCelRenLblVal=new ZafTblCelRenLbl();
            objTblCelRenLblVal.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLblVal.setTipoFormato(objTblCelRenLblVal.INT_FOR_NUM);
            objTblCelRenLblVal.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_VAL_PAG).setCellRenderer(objTblCelRenLblVal);
            objTblCelRenLblVal=null;



            tcmAux=null;
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren m�s espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD_EMP:
                    strMsg="Código de empresa";
                    break;
                case INT_TBL_DAT_COD_LOC:
                    strMsg="Código del local";
                    break;
                case INT_TBL_DAT_COD_TIP_DOC:
                    strMsg="Código de tipo de documento";
                    break;
                case INT_TBL_DAT_DES_COR_TIP_DOC:
                    strMsg="Descripción corta del tipo de documento";
                    break;
                case INT_TBL_DAT_DES_LAR_TIP_DOC:
                    strMsg="Descripción larga del tipo de documento";
                    break;
                case INT_TBL_DAT_COD_DOC:
                    strMsg="Código de documento";
                    break;
                case INT_TBL_DAT_COD_REG:
                    strMsg="Código de registro";
                    break;
                case INT_TBL_DAT_COD_PRV:
                    strMsg="Código de proveedor";
                    break;
                case INT_TBL_DAT_NUM_DOC:
                    strMsg="Número de documento";
                    break;
                case INT_TBL_DAT_FEC_DOC:
                    strMsg="Fecha de documento";
                    break;
                case INT_TBL_DAT_VAL_PAG:
                    strMsg="Valor a pagar";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
    protected boolean cargarDatosRetener(){
        boolean blnRes=true;
        int intNumTotReg, i;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT z.co_emp, z.co_loc, z.co_tipdoc, z.co_doc, z.tx_desCor, z.tx_desLar, z.ne_numDoc, z.fe_doc,";
                strSQL+=" 	z.co_cli, z.tx_nom, z.nd_val AS nd_valPnd,";
                strSQL+=" 	z.co_reg";
                strSQL+=" 	,(z.nd_val + z.nd_valApl) AS nd_val FROM(";
                strSQL+=" 	SELECT x.co_emp, x.co_loc, x.co_tipdoc, x.co_doc, x.tx_desCor, x.tx_desLar, x.ne_numDoc, x.fe_doc,";
                strSQL+=" 		x.co_cli, x.tx_nom, x.nd_val,";
                strSQL+=" 		x.co_reg";
                strSQL+="		,CASE WHEN y.nd_valApl IS NULL THEN cast(0.00 as numeric) ELSE y.nd_valApl END AS nd_valApl FROM(";
                strSQL+=" 		SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc,";
                strSQL+=" 		a1.co_cli, a3.tx_nom, SUM(a2.mo_pag + a2.nd_abo) as nd_val";
                strSQL+=" 		,b3.tx_desCor, b3.tx_desLar, a1.fe_doc, a2.co_reg";
                strSQL+=" 		FROM (tbm_cabMovInv AS a1 INNER JOIN tbm_cli AS a3 ON a1.co_emp=a3.co_emp AND a1.co_cli=a3.co_cli)";
                strSQL+=" 		INNER JOIN tbm_cabTipDoc AS b3";
                strSQL+=" 		 ON a1.co_emp=b3.co_emp AND a1.co_loc=b3.co_loc AND a1.co_tipDoc=b3.co_tipDoc";
                strSQL+=" 		INNER JOIN tbm_pagMovInv AS a2";
                strSQL+=" 		ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc";
                strSQL+=" 		AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                strSQL+=" 		INNER JOIN (";
                strSQL+=" 			SELECT b.co_emp, b.co_loc, b.co_tipDoc, b.co_doc, b.ne_numVisBue FROM(";
                strSQL+=" 					      SELECT b1.co_emp, b1.co_loc, b1.co_tipDoc, b1.ne_numVisBue";
                strSQL+=" 					      FROM tbm_cabTipDoc AS b1";
                strSQL+=" 					      WHERE b1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" 					      AND b1.st_reg='A') AS a";
                strSQL+=" 				      INNER JOIN(";
                strSQL+=" 					      SELECT COUNT(co_visBue) AS ne_numVisBue, x.co_emp, x.co_loc, x.co_tipDoc, x.co_doc FROM(";
                strSQL+=" 						      SELECT b1.co_emp, b1.co_loc, b1.co_tipDoc, b1.co_doc, b1.co_visBue";
                strSQL+=" 						      FROM tbm_visBueMovInv AS b1";
                strSQL+=" 						      WHERE b1.co_emp=" + objParSis.getCodigoEmpresa() + " AND b1.st_reg='A'";
                strSQL+=" 						      ORDER BY b1.co_doc, b1.co_visBue";
                strSQL+=" 					      ) AS x";
                strSQL+=" 					      GROUP BY x.co_emp, x.co_loc, x.co_tipDoc, x.co_doc) AS b";
                strSQL+=" 				      ON a.co_emp=b.co_emp AND a.co_loc=b.co_loc AND a.co_tipDoc=b.co_tipDoc AND a.ne_numVisBue=b.ne_numVisBue";
                strSQL+=" 		) AS p";
                strSQL+=" 		ON a1.co_emp=p.co_emp AND a1.co_loc=p.co_loc AND a1.co_tipDoc=p.co_tipDoc AND a1.co_doc=p.co_doc";
                strSQL+=" 		WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" 		AND (a2.nd_porRet = 0  OR a2.nd_porRet IS NULL) AND a1.st_reg NOT IN ('I','E')";
                strSQL+=" 		AND a2.st_reg IN('A','C') AND (a2.mo_pag + a2.nd_abo) > 0";
                if( ! strCodTipDocFil.equals(""))
                    strSQL+=" AND a1.co_tipDoc IN("  + strCodTipDocFil + ")";
                if( ! strCorFec.equals(""))
                    strSQL+=" " + strCorFec + "";
                if( ! strCodPrv.equals(""))
                    strSQL+=" AND a1.co_cli IN(" + strCodPrv + ")";
                strSQL+=" AND a2.st_autpag='S' AND a2.co_ctaautpag=" + strCodCtaAcr + "";
                strSQL+=" 		GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc,a1.ne_numDoc, a1.co_cli, a3.tx_nom,b3.tx_desCor, b3.tx_desLar, a1.fe_doc,a2.co_reg";
                strSQL+=" 		HAVING SUM(a2.mo_pag + a2.nd_abo) > 0";
                strSQL+=" 		) AS x";
                strSQL+=" 		LEFT OUTER JOIN(";
                strSQL+=" 			SELECT b1.co_emp, b1.co_locRel, b1.co_tipDocRel, b1.co_docRel,";
                strSQL+=" 			(b2.mo_pag + b2.nd_abo) AS nd_valApl";
                strSQL+=" 			FROM tbr_cabMovInv AS b1 INNER JOIN tbm_pagMovInv AS b2";
                strSQL+=" 			ON b1.co_emp=b2.co_emp AND b1.co_loc=b2.co_loc AND b1.co_tipDoc=b2.co_tipDoc AND b1.co_doc=b2.co_doc";
                strSQL+=" 			WHERE b1.co_tipDoc=4 AND (b2.mo_pag+b2.nd_abo)<0";
                strSQL+=" 			AND (b2.nd_porRet=0 OR b2.nd_porRet IS NULL) AND b2.st_reg IN ('A','C')";
                strSQL+=" 		) AS y";
                strSQL+=" 	ON x.co_emp=y.co_emp AND x.co_loc=y.co_locRel AND x.co_tipDoc=y.co_tipDocRel AND x.co_doc=y.co_docRel";
                strSQL+=" ) AS z";
                strSQL+=" WHERE (z.nd_val + z.nd_valApl)>0";
                intNumTotReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intNumTotReg==-1)
                    return false;
                
//                strSQL="";
//                strSQL+="SELECT a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc, a3.tx_desCor, a3.tx_desLar, a1.ne_numDoc, a1.fe_doc,";
//                strSQL+=" a1.co_cli, b3.tx_nom, (a2.mo_pag + a2.nd_abo) as nd_val, ";
//                strSQL+=" a2.co_reg";
//                strSQL+=" FROM ((tbm_cabMovInv AS a1 INNER JOIN tbm_cli AS b3 ON a1.co_emp=b3.co_emp AND a1.co_cli=b3.co_cli)";
//                strSQL+=" INNER JOIN tbm_cabTipDoc AS a3";
//                strSQL+=" ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
//                strSQL+=" INNER JOIN tbm_pagMovInv AS a2";
//                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc ";
//                strSQL+=" AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
//                strSQL+=" INNER JOIN (";
//                strSQL+=" 		SELECT b.co_emp, b.co_loc, b.co_tipDoc, b.co_doc, b.ne_numVisBue FROM(";
//                strSQL+="                                      SELECT b1.co_emp, b1.co_loc, b1.co_tipDoc, b1.ne_numVisBue";
//                strSQL+="                                      FROM tbm_cabTipDoc AS b1";
//                strSQL+="                                      WHERE b1.co_emp=" + objParSis.getCodigoEmpresa() + "";
//                strSQL+="                                      AND b1.st_reg='A') AS a";
//                strSQL+="                              INNER JOIN(";
//                strSQL+="                                      SELECT COUNT(co_visBue) AS ne_numVisBue, x.co_emp, x.co_loc, x.co_tipDoc, x.co_doc FROM(";
//                strSQL+="                                              SELECT b1.co_emp, b1.co_loc, b1.co_tipDoc, b1.co_doc, b1.co_visBue";
//                strSQL+="                                              FROM tbm_visBueMovInv AS b1";
//                strSQL+="                                              WHERE b1.co_emp=" + objParSis.getCodigoEmpresa() + "";
//                strSQL+="                                              AND b1.st_reg='A'";
//                strSQL+="                                              ORDER BY b1.co_doc, b1.co_visBue";
//                strSQL+="                                      ) AS x";
//                strSQL+="                                      GROUP BY x.co_emp, x.co_loc, x.co_tipDoc, x.co_doc) AS b";
//                strSQL+="                              ON a.co_emp=b.co_emp AND a.co_loc=b.co_loc AND a.co_tipDoc=b.co_tipDoc AND a.ne_numVisBue=b.ne_numVisBue";
//                strSQL+=" ) AS p";
//                strSQL+=" ON a1.co_emp=p.co_emp AND a1.co_loc=p.co_loc AND a1.co_tipDoc=p.co_tipDoc AND a1.co_doc=p.co_doc";
//                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
//                strSQL+=" AND (a2.mo_pag + a2.nd_abo) > 0";
//                strSQL+=" AND (a2.nd_porRet = 0   OR a2.nd_porRet IS NULL) AND a1.st_reg IN ('A','R','C','F')";
//                strSQL+=" AND a2.st_reg IN('A','C')";
//                if( ! strCodTipDocFil.equals(""))
//                    strSQL+=" AND a1.co_tipDoc IN("  + strCodTipDocFil + ")";
//                if( ! strCorFec.equals(""))
//                    strSQL+=" " + strCorFec + "";
//                if( ! strCodPrv.equals(""))
//                    strSQL+=" AND a1.co_cli IN(" + strCodPrv + ")";
//                strSQL+=" AND a2.st_autpag='S' AND a2.co_ctaautpag=" + strCodCtaAcr + "";
//                strSQL+=" ORDER BY a1.co_tipdoc, a1.fe_doc, b3.tx_nom";


                strSQL="";
                strSQL+="SELECT z.co_emp, z.co_loc, z.co_tipdoc, z.co_doc, z.tx_desCor, z.tx_desLar, z.ne_numDoc, z.fe_doc,";
                strSQL+=" 	z.co_cli, z.tx_nom, z.nd_val AS nd_valPnd,";
                strSQL+=" 	z.co_reg";
                strSQL+=" 	,(z.nd_val + z.nd_valApl) AS nd_val FROM(";
                strSQL+=" 	SELECT x.co_emp, x.co_loc, x.co_tipdoc, x.co_doc, x.tx_desCor, x.tx_desLar, x.ne_numDoc, x.fe_doc,";
                strSQL+=" 		x.co_cli, x.tx_nom, x.nd_val,";
                strSQL+=" 		x.co_reg";
                strSQL+="		,CASE WHEN y.nd_valApl IS NULL THEN cast(0.00 as numeric) ELSE y.nd_valApl END AS nd_valApl FROM(";
                strSQL+=" 		SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc,";
                strSQL+=" 		a1.co_cli, a3.tx_nom, SUM(a2.mo_pag + a2.nd_abo) as nd_val";
                strSQL+=" 		,b3.tx_desCor, b3.tx_desLar, a1.fe_doc, a2.co_reg";
                strSQL+=" 		FROM (tbm_cabMovInv AS a1 INNER JOIN tbm_cli AS a3 ON a1.co_emp=a3.co_emp AND a1.co_cli=a3.co_cli)";
                strSQL+=" 		INNER JOIN tbm_cabTipDoc AS b3";
                strSQL+=" 		 ON a1.co_emp=b3.co_emp AND a1.co_loc=b3.co_loc AND a1.co_tipDoc=b3.co_tipDoc";
                strSQL+=" 		INNER JOIN tbm_pagMovInv AS a2";
                strSQL+=" 		ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc";
                strSQL+=" 		AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                strSQL+=" 		INNER JOIN (";
                strSQL+=" 			SELECT b.co_emp, b.co_loc, b.co_tipDoc, b.co_doc, b.ne_numVisBue FROM(";
                strSQL+=" 					      SELECT b1.co_emp, b1.co_loc, b1.co_tipDoc, b1.ne_numVisBue";
                strSQL+=" 					      FROM tbm_cabTipDoc AS b1";
                strSQL+=" 					      WHERE b1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" 					      AND b1.st_reg='A') AS a";
                strSQL+=" 				      INNER JOIN(";
                strSQL+=" 					      SELECT COUNT(co_visBue) AS ne_numVisBue, x.co_emp, x.co_loc, x.co_tipDoc, x.co_doc FROM(";
                strSQL+=" 						      SELECT b1.co_emp, b1.co_loc, b1.co_tipDoc, b1.co_doc, b1.co_visBue";
                strSQL+=" 						      FROM tbm_visBueMovInv AS b1";
                strSQL+=" 						      WHERE b1.co_emp=" + objParSis.getCodigoEmpresa() + " AND b1.st_reg='A'";
                strSQL+=" 						      ORDER BY b1.co_doc, b1.co_visBue";
                strSQL+=" 					      ) AS x";
                strSQL+=" 					      GROUP BY x.co_emp, x.co_loc, x.co_tipDoc, x.co_doc) AS b";
                strSQL+=" 				      ON a.co_emp=b.co_emp AND a.co_loc=b.co_loc AND a.co_tipDoc=b.co_tipDoc AND a.ne_numVisBue=b.ne_numVisBue";
                strSQL+=" 		) AS p";
                strSQL+=" 		ON a1.co_emp=p.co_emp AND a1.co_loc=p.co_loc AND a1.co_tipDoc=p.co_tipDoc AND a1.co_doc=p.co_doc";
                strSQL+=" 		WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" 		AND (a2.nd_porRet = 0  OR a2.nd_porRet IS NULL) AND a1.st_reg NOT IN ('I','E')";
                strSQL+=" 		AND a2.st_reg IN('A','C') AND (a2.mo_pag + a2.nd_abo) > 0";
                if( ! strCodTipDocFil.equals(""))
                    strSQL+=" AND a1.co_tipDoc IN("  + strCodTipDocFil + ")";
                if( ! strCorFec.equals(""))
                    strSQL+=" " + strCorFec + "";
                if( ! strCodPrv.equals(""))
                    strSQL+=" AND a1.co_cli IN(" + strCodPrv + ")";
                strSQL+=" AND a2.st_autpag='S' AND a2.co_ctaautpag=" + strCodCtaAcr + "";
                strSQL+=" 		GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc,a1.ne_numDoc, a1.co_cli, a3.tx_nom,b3.tx_desCor, b3.tx_desLar, a1.fe_doc,a2.co_reg";
                strSQL+=" 		HAVING SUM(a2.mo_pag + a2.nd_abo) > 0";
                strSQL+=" 		) AS x";
                strSQL+=" 		LEFT OUTER JOIN(";
                strSQL+=" 			SELECT b1.co_emp, b1.co_locRel, b1.co_tipDocRel, b1.co_docRel,";
                strSQL+=" 			(b2.mo_pag + b2.nd_abo) AS nd_valApl";
                strSQL+=" 			FROM tbr_cabMovInv AS b1 INNER JOIN tbm_pagMovInv AS b2";
                strSQL+=" 			ON b1.co_emp=b2.co_emp AND b1.co_loc=b2.co_loc AND b1.co_tipDoc=b2.co_tipDoc AND b1.co_doc=b2.co_doc";
                strSQL+=" 			WHERE b1.co_tipDoc=4 AND (b2.mo_pag+b2.nd_abo)<0";
                strSQL+=" 			AND (b2.nd_porRet=0 OR b2.nd_porRet IS NULL) AND b2.st_reg IN ('A','C')";
                strSQL+=" 		) AS y";
                strSQL+=" 	ON x.co_emp=y.co_emp AND x.co_loc=y.co_locRel AND x.co_tipDoc=y.co_tipDocRel AND x.co_doc=y.co_docRel";
                strSQL+=" ) AS z";
                strSQL+=" WHERE (z.nd_val + z.nd_valApl)>0";
                System.out.println("SQL: " + strSQL);
                rst=stm.executeQuery(strSQL);
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;
                while(rst.next()){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN, "");
                        vecReg.add(INT_TBL_DAT_COD_EMP,         "" + rst.getString("co_emp"));
                        vecReg.add(INT_TBL_DAT_COD_LOC,         "" + rst.getString("co_loc"));
                        vecReg.add(INT_TBL_DAT_COD_TIP_DOC,     "" + rst.getString("co_tipdoc"));
                        vecReg.add(INT_TBL_DAT_DES_COR_TIP_DOC, "" + rst.getString("tx_desCor"));
                        vecReg.add(INT_TBL_DAT_DES_LAR_TIP_DOC, "" + rst.getString("tx_desLar"));
                        vecReg.add(INT_TBL_DAT_COD_DOC,         "" + rst.getString("co_doc"));
                        vecReg.add(INT_TBL_DAT_COD_REG,         "" + rst.getString("co_reg"));
                        vecReg.add(INT_TBL_DAT_COD_PRV,         "" + rst.getString("co_cli"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC,         "" + rst.getString("ne_numDoc"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC,         "" + rst.getString("fe_doc"));                        
                        vecReg.add(INT_TBL_DAT_VAL_PAG,         "" + rst.getString("nd_val"));
                        vecDat.add(vecReg);
                        
                        i++;
                        pgrSis.setValue(i);
                }
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");
                pgrSis.setIndeterminate(false);
                con.close();
                con=null;
                rst.close();
                rst=null;
                stm.close();
                stm=null;
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    
    public String getFechaCorte(){
        return strCorFec;
    }
    
    public void setFechaCorte(String fechaCorte){
        strCorFec=fechaCorte==null?"":fechaCorte;
    }
    
    
    public String getCodigoTipoDocumento(){
        return strCodTipDocFil;
    }
    
    public void setCodigoTipoDocumento(String tipoDocumentoFiltro){
        strCodTipDocFil=tipoDocumentoFiltro==null?"":tipoDocumentoFiltro;
    }
            
            
    
    public String getCodigoProveedor(){
        return strCodPrv;
    }
    
    public void setCodigoProveedor(String codigoProveedor){
        strCodPrv=codigoProveedor==null?"":codigoProveedor;
    }
            
    
    
    public String getCodigoCuentaAcreedora(){
        return strCodCtaAcr;
    }
    
    public void setCodigoCuentaDeudora(String codigoCuentaAcreedora){
        strCodCtaAcr=codigoCuentaAcreedora==null?"":codigoCuentaAcreedora;
    }
    
    
    
    
    
    
    
            
}
