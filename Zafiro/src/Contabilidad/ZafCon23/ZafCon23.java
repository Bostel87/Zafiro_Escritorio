/*
 * ZafMae21.java 
 *
 * Created on 02 de noviembre de 2005, 11:25 PM
 * PROGRAM PARA INGRESO DE DATOS NECESARIOS PARA EL SRI...
 */  
package Contabilidad.ZafCon23;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafVenCon.ZafVenCon;
import java.util.ArrayList;


/**
 *
 * @author Javier Ayapata
 */
public class ZafCon23 extends javax.swing.JInternalFrame 
{
  
    Librerias.ZafParSis.ZafParSis objZafParSis;
    private ZafUtil objUti;
    private MiToolBar objTooBar;
    private java.sql.Connection CONN_GLO=null;
    private java.sql.ResultSet RSTLOC=null;
    private java.sql.Statement STM_GLO=null;

    private boolean blnHayCam;                          //Determina si hay cambios en el formulario.
    private ZafDocLis objDocLis;
    
    String strCodTipDoc="", strDesCorTipDoc="",strDesLarTipDoc="";
    String strAux="";
    
    javax.swing.JTextField txtCodTipDoc = new javax.swing.JTextField();

    ZafVenCon objVenConTipdoc;

    String strVersion = " v0.5 ";

    private Librerias.ZafDate.ZafDatePicker txtFecDoc;


    /** Crea una nueva instancia de la clase ZafCon06. */
    public ZafCon23(Librerias.ZafParSis.ZafParSis obj)
    {
        try
        {
            this.objZafParSis = (Librerias.ZafParSis.ZafParSis) obj.clone();
            
            initComponents();
            //Inicializar objetos.
            if (!configurarFrm())
                exitForm();
            agregarDocLis();

            txtFecDoc = new Librerias.ZafDate.ZafDatePicker(((javax.swing.JFrame)this.getParent()),"d/m/y");
            txtFecDoc.setPreferredSize(new java.awt.Dimension(70, 20));
            txtFecDoc.setText("");
            panGenCab.add(txtFecDoc);
            txtFecDoc.setBounds(120, 111, 92, 20);

        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    public ZafCon23(Librerias.ZafParSis.ZafParSis obj, Integer codigoCuenta)
    {
        this(obj);
//        txtCodSis.setText(codigoCuenta.toString());
        objTooBar.setEstado('c');
        objTooBar.consultar();
        objTooBar.setEstado('w');
    }



public void abrirCon(){
    try{
       CONN_GLO=java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());
    }
    catch(java.sql.SQLException  Evt){  objUti.mostrarMsgErr_F1(this, Evt); }
}


 public void CerrarCon(){
    try{
        CONN_GLO.close();
        CONN_GLO=null;
    }
    catch(java.sql.SQLException  Evt){  objUti.mostrarMsgErr_F1(this, Evt); }
}



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGen = new javax.swing.JPanel();
        panGenCab = new javax.swing.JPanel();
        lblTipDoc = new javax.swing.JLabel();
        lblCodDoc = new javax.swing.JLabel();
        txtCodDoc = new javax.swing.JTextField();
        lblNumFac1 = new javax.swing.JLabel();
        txtNumFac1 = new javax.swing.JTextField();
        lblNumFac2 = new javax.swing.JLabel();
        txtNumFac2 = new javax.swing.JTextField();
        jLabelSecDoc = new javax.swing.JLabel();
        txtSerDoc = new javax.swing.JTextField();
        jLabelAutSri = new javax.swing.JLabel();
        txtAutSri = new javax.swing.JTextField();
        jLabelFecCad = new javax.swing.JLabel();
        txtDesCorTipDoc = new javax.swing.JTextField();
        txtDesLarTipDoc = new javax.swing.JTextField();
        butTipDoc = new javax.swing.JButton();
        panGenTot = new javax.swing.JPanel();
        panGenTotLbl = new javax.swing.JPanel();
        lblObs1 = new javax.swing.JLabel();
        panGenTotObs = new javax.swing.JPanel();
        spnObs1 = new javax.swing.JScrollPane();
        txaObs1 = new javax.swing.JTextArea();
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panGen.setLayout(new java.awt.BorderLayout());

        panGenCab.setPreferredSize(new java.awt.Dimension(0, 180));
        panGenCab.setLayout(null);

        lblTipDoc.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblTipDoc.setText("Tipo de documento:");
        lblTipDoc.setToolTipText("Tipo de documento");
        panGenCab.add(lblTipDoc);
        lblTipDoc.setBounds(5, 4, 110, 20);

        lblCodDoc.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblCodDoc.setText("Código del documento:");
        lblCodDoc.setToolTipText("Código del documento");
        panGenCab.add(lblCodDoc);
        lblCodDoc.setBounds(5, 28, 120, 20);

        txtCodDoc.setBackground(objZafParSis.getColorCamposSistema());
        panGenCab.add(txtCodDoc);
        txtCodDoc.setBounds(120, 26, 70, 20);

        lblNumFac1.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblNumFac1.setText("Núm.Doc.Desde");
        lblNumFac1.setToolTipText("Número Factura Desde");
        panGenCab.add(lblNumFac1);
        lblNumFac1.setBounds(5, 50, 90, 20);

        txtNumFac1.setBackground(objZafParSis.getColorCamposObligatorios());
        txtNumFac1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGenCab.add(txtNumFac1);
        txtNumFac1.setBounds(120, 50, 90, 20);

        lblNumFac2.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblNumFac2.setText("Núm.Doc.Hasta");
        lblNumFac2.setToolTipText("Número Factura Hasta");
        panGenCab.add(lblNumFac2);
        lblNumFac2.setBounds(220, 50, 100, 20);

        txtNumFac2.setBackground(objZafParSis.getColorCamposObligatorios());
        txtNumFac2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGenCab.add(txtNumFac2);
        txtNumFac2.setBounds(300, 50, 90, 20);

        jLabelSecDoc.setFont(new java.awt.Font("SansSerif", 0, 11));
        jLabelSecDoc.setText("Núm.Ser.Doc.");
        jLabelSecDoc.setToolTipText("Número de Serie del Doc.");
        panGenCab.add(jLabelSecDoc);
        jLabelSecDoc.setBounds(5, 70, 90, 20);

        txtSerDoc.setBackground(objZafParSis.getColorCamposObligatorios());
        txtSerDoc.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGenCab.add(txtSerDoc);
        txtSerDoc.setBounds(120, 70, 90, 20);

        jLabelAutSri.setFont(new java.awt.Font("SansSerif", 0, 11));
        jLabelAutSri.setText("Núm.Aut.SRI.");
        jLabelAutSri.setToolTipText("Número de Autorizacion del S.R.I.");
        panGenCab.add(jLabelAutSri);
        jLabelAutSri.setBounds(5, 90, 90, 20);

        txtAutSri.setBackground(objZafParSis.getColorCamposObligatorios());
        txtAutSri.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGenCab.add(txtAutSri);
        txtAutSri.setBounds(120, 90, 90, 20);

        jLabelFecCad.setFont(new java.awt.Font("SansSerif", 0, 11));
        jLabelFecCad.setText("Fec.Cad.Doc.");
        jLabelFecCad.setToolTipText("Fecha de Caducidad del Documento");
        panGenCab.add(jLabelFecCad);
        jLabelFecCad.setBounds(5, 110, 90, 20);

        txtDesCorTipDoc.setBackground(objZafParSis.getColorCamposObligatorios());
        txtDesCorTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorTipDocActionPerformed(evt);
            }
        });
        txtDesCorTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusLost(evt);
            }
        });
        panGenCab.add(txtDesCorTipDoc);
        txtDesCorTipDoc.setBounds(120, 5, 70, 20);

        txtDesLarTipDoc.setBackground(objZafParSis.getColorCamposObligatorios());
        txtDesLarTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarTipDocActionPerformed(evt);
            }
        });
        txtDesLarTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusLost(evt);
            }
        });
        panGenCab.add(txtDesLarTipDoc);
        txtDesLarTipDoc.setBounds(190, 5, 260, 20);

        butTipDoc.setText("...");
        butTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butTipDocActionPerformed(evt);
            }
        });
        panGenCab.add(butTipDoc);
        butTipDoc.setBounds(450, 5, 20, 20);

        panGen.add(panGenCab, java.awt.BorderLayout.NORTH);

        panGenTot.setPreferredSize(new java.awt.Dimension(34, 50));
        panGenTot.setLayout(new java.awt.BorderLayout());

        panGenTotLbl.setPreferredSize(new java.awt.Dimension(100, 30));
        panGenTotLbl.setLayout(new java.awt.BorderLayout());

        lblObs1.setFont(new java.awt.Font("SansSerif", 0, 11));
        lblObs1.setText("Observación1:");
        lblObs1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        panGenTotLbl.add(lblObs1, java.awt.BorderLayout.CENTER);

        panGenTot.add(panGenTotLbl, java.awt.BorderLayout.WEST);

        panGenTotObs.setLayout(new java.awt.BorderLayout());

        spnObs1.setViewportView(txaObs1);

        panGenTotObs.add(spnObs1, java.awt.BorderLayout.CENTER);

        panGenTot.add(panGenTotObs, java.awt.BorderLayout.CENTER);

        panGen.add(panGenTot, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("General", panGen);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());
        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents





    public void Configura_ventana_consulta(){
        configurarVenConTipDoc();
    }
    
    

private boolean configurarVenConTipDoc() {
 boolean blnRes=true;
 try {
    ArrayList arlCam=new ArrayList();
    arlCam.add("a.co_tipdoc");
    arlCam.add("a.tx_descor");
    arlCam.add("a.tx_deslar");

    ArrayList arlAli=new ArrayList();
    arlAli.add("Código");
    arlAli.add("Des.Cor.");
    arlAli.add("Des.Lar.");

    ArrayList arlAncCol=new ArrayList();
    arlAncCol.add("85");
    arlAncCol.add("105");
    arlAncCol.add("350");

    //Armar la sentencia SQL.   a7.nd_stkTot,
    String Str_Sql="";

    if(objZafParSis.getCodigoUsuario()==1){
       Str_Sql="Select a.co_tipdoc,a.tx_descor,a.tx_deslar from tbr_tipdocprg as b " +
            " left outer join tbm_cabtipdoc as a on (b.co_emp = a.co_emp and b.co_loc = a.co_loc and b.co_tipdoc = a.co_tipdoc)" +
            " where   b.co_emp="+objZafParSis.getCodigoEmpresa()+" and " +
            " b.co_loc = " + objZafParSis.getCodigoLocal()   + " and " +
            " b.co_mnu = "+objZafParSis.getCodigoMenu();
     }else {
            Str_Sql ="SELECT a.co_tipdoc, a.tx_desCor, a.tx_desLar "+
            " FROM tbr_tipDocUsr AS a1 inner join  tbm_cabTipDoc AS a ON (a.co_emp=a1.co_Emp and a.co_loc=a1.co_loc and a.co_tipdoc=a1.co_tipdoc)"+
            " WHERE "+
            "  a1.co_emp=" + objZafParSis.getCodigoEmpresa()+""+
            " AND a1.co_loc=" + objZafParSis.getCodigoLocal()+""+
            " AND a1.co_mnu=" + objZafParSis.getCodigoMenu()+""+
            " AND a1.co_usr=" + objZafParSis.getCodigoUsuario();
     }

    objVenConTipdoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objZafParSis, objZafParSis.getNombreMenu(), Str_Sql, arlCam, arlAli, arlAncCol);
    arlCam=null;
    arlAli=null;
    arlAncCol=null;

    objVenConTipdoc.setConfiguracionColumna(1, javax.swing.JLabel.CENTER);
 }catch (Exception e) {  blnRes=false;  objUti.mostrarMsgErr_F1(this, e); }
 return blnRes;
}





    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="¿Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                //Cerrar la conexión si está abierta.
                if(RSTLOC!=null)
                {
                    RSTLOC.close();
                    RSTLOC=null;
                    STM_GLO.close();
                    STM_GLO=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:

        Configura_ventana_consulta();


    }//GEN-LAST:event_formInternalFrameOpened

    private void txtDesCorTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorTipDocActionPerformed
        // TODO add your handling code here:
        txtDesCorTipDoc.transferFocus();
}//GEN-LAST:event_txtDesCorTipDocActionPerformed

    private void txtDesCorTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusGained
        // TODO add your handling code here:
        strDesCorTipDoc=txtDesCorTipDoc.getText();
        txtDesCorTipDoc.selectAll();
}//GEN-LAST:event_txtDesCorTipDocFocusGained

    private void txtDesCorTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusLost
        // TODO add your handling code here:
        if (!txtDesCorTipDoc.getText().equalsIgnoreCase(strDesCorTipDoc)) {
            if (txtDesCorTipDoc.getText().equals("")) {
                txtCodTipDoc.setText("");
                txtDesLarTipDoc.setText("");
                txtDesCorTipDoc.setText("");
            } else{ BuscarTipDoc("a.tx_descor",txtDesCorTipDoc.getText(),1);   }
        }else
            txtDesCorTipDoc.setText(strDesCorTipDoc);
}//GEN-LAST:event_txtDesCorTipDocFocusLost

    private void txtDesLarTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarTipDocActionPerformed
        // TODO add your handling code here:
        txtDesLarTipDoc.transferFocus();
}//GEN-LAST:event_txtDesLarTipDocActionPerformed

    private void txtDesLarTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusGained
        // TODO add your handling code here:
        strDesLarTipDoc=txtDesLarTipDoc.getText();
        txtDesLarTipDoc.selectAll();
}//GEN-LAST:event_txtDesLarTipDocFocusGained

    private void txtDesLarTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusLost
        // TODO add your handling code here:

        if (!txtDesLarTipDoc.getText().equalsIgnoreCase(strDesLarTipDoc)) {
            if (txtDesLarTipDoc.getText().equals("")) {
                txtCodTipDoc.setText("");
                txtDesLarTipDoc.setText("");
                txtDesCorTipDoc.setText("");
            } else{ BuscarTipDoc("a.tx_deslar",txtDesLarTipDoc.getText(),2);   }
        }else
            txtDesLarTipDoc.setText(strDesLarTipDoc);

    }//GEN-LAST:event_txtDesLarTipDocFocusLost

    private void butTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butTipDocActionPerformed
        // TODO add your handling code here:
        BuscarTipDoc("a.co_tipdoc","",0);
}//GEN-LAST:event_butTipDocActionPerformed




     public void BuscarTipDoc(String campo,String strBusqueda,int tipo){
      objVenConTipdoc.setTitle("Listado de Clientes");
      if (objVenConTipdoc.buscar(campo, strBusqueda )) {
          txtCodTipDoc.setText(objVenConTipdoc.getValueAt(1));
          txtDesCorTipDoc.setText(objVenConTipdoc.getValueAt(2));
          txtDesLarTipDoc.setText(objVenConTipdoc.getValueAt(3));
	  strCodTipDoc=objVenConTipdoc.getValueAt(1);
	  strDesCorTipDoc=objVenConTipdoc.getValueAt(2);
	  strDesLarTipDoc=objVenConTipdoc.getValueAt(3);
      }
      else{
            objVenConTipdoc.setCampoBusqueda(tipo);
            objVenConTipdoc.cargarDatos();
            objVenConTipdoc.show();
            if (objVenConTipdoc.getSelectedButton()==objVenConTipdoc.INT_BUT_ACE) {
                txtCodTipDoc.setText(objVenConTipdoc.getValueAt(1));
                txtDesCorTipDoc.setText(objVenConTipdoc.getValueAt(2));
                txtDesLarTipDoc.setText(objVenConTipdoc.getValueAt(3));
		strCodTipDoc=objVenConTipdoc.getValueAt(1);
		strDesCorTipDoc=objVenConTipdoc.getValueAt(2);
		strDesLarTipDoc=objVenConTipdoc.getValueAt(3);
            }
            else{
		txtCodTipDoc.setText(strCodTipDoc);
                txtDesCorTipDoc.setText(strDesCorTipDoc);
                txtDesLarTipDoc.setText(strDesLarTipDoc);
      }}}




     
    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butTipDoc;
    private javax.swing.JLabel jLabelAutSri;
    private javax.swing.JLabel jLabelFecCad;
    private javax.swing.JLabel jLabelSecDoc;
    private javax.swing.JLabel lblCodDoc;
    private javax.swing.JLabel lblNumFac1;
    private javax.swing.JLabel lblNumFac2;
    private javax.swing.JLabel lblObs1;
    private javax.swing.JLabel lblTipDoc;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGen;
    private javax.swing.JPanel panGenCab;
    private javax.swing.JPanel panGenTot;
    private javax.swing.JPanel panGenTotLbl;
    private javax.swing.JPanel panGenTotObs;
    private javax.swing.JScrollPane spnObs1;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTextArea txaObs1;
    private javax.swing.JTextField txtAutSri;
    private javax.swing.JTextField txtCodDoc;
    private javax.swing.JTextField txtDesCorTipDoc;
    private javax.swing.JTextField txtDesLarTipDoc;
    private javax.swing.JTextField txtNumFac1;
    private javax.swing.JTextField txtNumFac2;
    private javax.swing.JTextField txtSerDoc;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
private boolean configurarFrm(){
  boolean blnRes=true;
  try{           
    //Inicializar objetos.
    objUti=new ZafUtil();
    objTooBar=new MiToolBar(this);
    objDocLis=new ZafDocLis();
    panBar.add(objTooBar);
    this.setTitle(objZafParSis.getNombreMenu() + strVersion );
    lblTit.setText(objZafParSis.getNombreMenu());
            
 }catch(Exception e){ blnRes=false; objUti.mostrarMsgErr_F1(this, e); }
 return blnRes;
}

    /**
     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
     * insertar, consultar, modificar, eliminar, etc. Además de los botones de navegación
     * que permiten desplazarse al primero, anterior, siguiente y último registro.
     */
    private class MiToolBar extends ZafToolBar
    {
        public MiToolBar(javax.swing.JInternalFrame ifrFrm)
        {
            super(ifrFrm, objZafParSis);
        }

        public boolean anular()
        {
            if (!anularReg())
                return false;
            
            blnHayCam=false;
            return true;
        }

        public void clickAceptar()
        {
            
        }

        public void clickAnterior(){
          try
           {  abrirCon();
               if(RSTLOC != null ) {
                   if (!RSTLOC.isFirst()) {
                       if (blnHayCam) {
                           if (isRegPro()) {
                               RSTLOC.previous();
                               cargarReg();
                           }
                       }
                       else {
                           RSTLOC.previous();
                           cargarReg();
                       }
                   }}
               CerrarCon();
            }
            catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
        
        }

        public void clickAnular()
        {
            //cargarDetReg();
            cargarCabReg();
        }

        public void clickCancelar()
        {

        }

        public void clickConsultar() 
        {
            switch (objTooBar.getEstado())
            {
                case 'c':
                case 'x':
                case 'y':
                case 'z':
                    txtDesCorTipDoc.requestFocus();
                    break;
                case 'j':
                    ///cargarDetReg();
                    cargarCabReg();
                    break;
            }
            //Inicializar las variables que indican cambios.
            blnHayCam=false;
            System.out.println("pilas loko");
        }

        public void clickEliminar()
        {
            ///cargarDetReg();
            cargarCabReg();
        }

        public void clickFin() 
        {
          try {
                abrirCon();
                if(RSTLOC != null ) {
                    if (!RSTLOC.isLast()) {
                        if (blnHayCam) {
                            if (isRegPro()) {
                                RSTLOC.last();
                                cargarReg();
                            }
                        }
                        else {
                            RSTLOC.last();
                            cargarReg();
                        }
                    }}
                CerrarCon();
            }
            catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }

           
        }

        public void clickImprimir()
        {
            
        }

        public void clickInicio(){
          try
            {   abrirCon();
                if(RSTLOC != null ) {
                    if (!RSTLOC.isFirst()) {
                        if (blnHayCam) {
                            if (isRegPro()) {
                                RSTLOC.first();
                                cargarReg();
                            }
                        }
                        else {
                            RSTLOC.first();
                            cargarReg();
                        }
                    }}
                CerrarCon();
            }
            catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
            
        }

        public void clickInsertar()
        {
            try
            {
                if (blnHayCam)
                {
                    isRegPro();
                }
                if(RSTLOC!=null)
                {
                    RSTLOC.close();
                    RSTLOC=null;
                     STM_GLO.close();
                    STM_GLO=null;
                }
                limpiarFrm();

                noEditable(false);

                blnHayCam=false;
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }



   public void  noEditable(boolean blnEditable){
        java.awt.Color colBack = txtCodDoc.getBackground();
        txtCodDoc.setEditable(blnEditable);

        txtCodDoc.setEditable(blnEditable);
       
    }


        public void clickModificar()
        {
            txtDesCorTipDoc.setEditable(false);
            txtDesLarTipDoc.setEditable(false);
            butTipDoc.setEnabled(false);
            txtCodDoc.setEditable(false);
            ///OJO ESTA LINEA ESTABA ACTIVA///
            switch (objTooBar.getEstado())
            {
                case 'm':
                    cargarCabReg();
                    break;
            }
            //Inicializar las variables que indican cambios.
            blnHayCam=false;
        }

        public void clickSiguiente(){
             try
            {  abrirCon();
               if(RSTLOC != null ) {
                   if (!RSTLOC.isLast()) {
                       if (blnHayCam ) {
                           if (isRegPro()) {
                               RSTLOC.next();
                               cargarReg();
                           }
                       }
                       else {
                           RSTLOC.next();
                           cargarReg();
                       }
                   } }
               CerrarCon();
            }
            catch (java.sql.SQLException e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e) {
                objUti.mostrarMsgErr_F1(this, e);
            }
          
        }

        public void clickVisPreliminar() 
        {
        }

        public boolean consultar() 
        {
            if(consultarReg())
             return true;
            else  return false;
        }

        public boolean eliminar()
        {
            return true;
        }

        public boolean insertar()
        {
            if (!insertarReg())
                return false;
            return true;
        }

        public boolean modificar()
        {
            if (!actualizarReg())
                return false;
            return true;
        }
        
        public boolean cancelar()
        {
            boolean blnRes=true;
            try
            {
                
                if (objTooBar.getEstado()=='n' && objTooBar.getEstado()=='m')
                {
                   if (!isRegPro())
                      return false;
                }                
                
                if(RSTLOC!=null)
                {
                    RSTLOC.close();
                    RSTLOC=null;
                    STM_GLO.close();
                    STM_GLO=null;
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            limpiarFrm();
            blnHayCam=false;
            return blnRes;
        }
        
        public boolean vistaPreliminar()
        {
             return true;
        }
//            int intCodEmp=objParSis.getCodigoEmpresa();
//
//            Connection conIns;
//            try
//            {
//                conIns =DriverManager.getConnection(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos());
//            try
//            {
//                if(conIns!=null){
//                        JasperDesign jasperDesign = JasperManager.loadXmlDesign("C://Zafiro//Reportes_impresos//RptZafCon05.jrxml");
//                        //JasperDesign jasperDesign = JasperManager.loadXmlDesign("//Tuval//Ingrid_Lino//Fuentes//Reportes//Reportes_impresos//RptZafCon05.jrxml");
//                        JasperReport jasperReport = JasperManager.compileReport(jasperDesign);
//
//                        String NumDoc=obtenerNumeros(conIns);
//                        Map parameters = new HashMap();
//                        parameters.put("codEmp", ""+intCodEmp);
//                        parameters.put("codLoc", ""+objParSis.getCodigoLocal());
//                        parameters.put("codTipDoc", txtCodTipDoc.getText());
//                        parameters.put("codDoc", txtCodDoc.getText());
//                        parameters.put("Numdoc", NumDoc);
//
//                        //parameters.put("usu", usua);
//                        JasperPrint report = JasperFillManager.fillReport(jasperReport, parameters, conIns);
//                        JasperViewer.viewReport(report, false);
//
//                }
//                conIns.close();
//                conIns=null;
//            }
//            catch (JRException e)
//            {
//                System.out.println("Excepción: " + e.toString());
//            }
//
//            }
//
//            catch(SQLException ex)
//            {
//                System.out.println("Error al conectarse a la base");
//            }
//
//            return true;
//        }
//
        
        
//public String obtenerNumeros(java.sql.Connection con){
//   String strDato="";
// try{
//   String sql="select a.ne_numdoc from tbm_detpag as pag" +
//              " inner join tbm_cabmovinv  as a on (pag.co_emp=a.co_emp and pag.co_locpag=a.co_loc and " +
//              " pag.co_tipdocpag=a.co_tipdoc and pag.co_docpag=a.co_doc)" +
//              " where pag.co_tipdoc="+txtCodTipDoc.getText()+" and pag.co_emp="+objZafParSis.getCodigoEmpresa()+" and pag.co_loc="+objZafParSis.getCodigoLocal()+"  and  pag.co_doc ="+txtCodDoc.getText();
//     stm3 = con.createStatement();
//     java.sql.ResultSet rst3 = stm3.executeQuery(sql);
//      while(rst3.next()){
//       strDato=strDato+"  "+rst3.getString(1);
//      }
// } catch (java.sql.SQLException e)  { objUti.mostrarMsgErr_F1(this, e); }
//   return strDato;
//}

        
        
        public boolean aceptar()
        {            
            return true;           
        }
        
        public boolean imprimir()
        {
             return true;
        }

        
//            int intCodEmp=objParSis.getCodigoEmpresa();
//
//            Connection conIns;
//            try
//            {
//                conIns =DriverManager.getConnection(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos());
//            try
//            {
//                if(conIns!=null){
//                        JasperDesign jasperDesign = JasperManager.loadXmlDesign("C://Zafiro//Reportes_impresos//RptZafCon05.jrxml");
//                        //JasperDesign jasperDesign = JasperManager.loadXmlDesign("//Tuval//Ingrid_Lino//Fuentes//Reportes//Reportes_impresos//RptZafCon05.jrxml");
//                        //JasperDesign jasperDesign = JasperManager.loadXmlDesign("//Tuval//Ingrid_Lino//Fuentes//Reportes//Reportes_impresos//RptZafCon05.jrxml");
//                        JasperReport jasperReport = JasperManager.compileReport(jasperDesign);
//                        String NumDoc=obtenerNumeros(conIns);
//                        Map parameters = new HashMap();
//                        parameters.put("codEmp", ""+intCodEmp);
//                        parameters.put("codLoc", ""+objParSis.getCodigoLocal());
//                        parameters.put("codTipDoc", txtCodTipDoc.getText());
//                        parameters.put("codDoc", txtCodDoc.getText());
//                        parameters.put("Numdoc", NumDoc);
//                        //parameters.put("usu", usua);
//                        JasperPrint report = JasperFillManager.fillReport(jasperReport, parameters, conIns);
//
//                        JasperManager.printReport(report, false);
//                }
//                conIns.close();
//                conIns=null;
//            }
//            catch (JRException e)
//            {
//                System.out.println("Excepción: " + e.toString());
//            }
//
//            }
//
//            catch(SQLException ex)
//            {
//                System.out.println("Error al conectarse a la base");
//            }
//
//            return true;
//        }
        
        public boolean beforeInsertar()
        {
            if (!isCamVal())
                return false;
//            if (objAsiDia.getGeneracionDiario()==2)
//                return regenerarDiario();
            return true;
        }
        
        public boolean beforeConsultar()
        {
            return true;
        }

        public boolean beforeModificar()
        {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible modificar un documento eliminado.");
                return false;
            }
            if (strAux.equals("Anulado"))
            {
                mostrarMsgInf("El documento está ANULADO.\nNo es posible modificar un documento anulado.");
                return false;
            }
            if (!isCamVal())
                return false;
//            if (objAsiDia.getGeneracionDiario()==2)
//                return regenerarDiario();
            return true;
        }

        public boolean beforeEliminar()
        {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                mostrarMsgInf("El documento ya está ELIMINADO.\nNo es posible eliminar un documento eliminado.");
                return false;
            }
            return true;
        }

        public boolean beforeAnular()
        {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible anular un documento eliminado.");
                return false;
            }
            if (strAux.equals("Anulado"))
            {
                mostrarMsgInf("El documento ya está ANULADO.\nNo es posible anular un documento anulado.");
                return false;
            }
            return true;
        }

        public boolean beforeImprimir()
        {
            return true;
        }

        public boolean beforeVistaPreliminar()
        {
            return true;
        }

        public boolean beforeAceptar()
        {
            return true;
        }
        
        public boolean beforeCancelar()
        {
            return true;
        }
        
        public boolean afterInsertar()
        {
            this.setEstado('w');
            blnHayCam=false;
            objTooBar.setEstado('w');
            blnHayCam=false;
            return true;
        }

        public boolean afterConsultar()
        {
            return true;
        }

        public boolean afterModificar()
        {
            blnHayCam=false;
            return true;
        }

        public boolean afterEliminar()
        {
            blnHayCam=false;
            return true;
        }

        public boolean afterAnular()
        {
            return true;
        }

        public boolean afterImprimir()
        {
            return true;
        }

        public boolean afterVistaPreliminar()
        {
            return true;
        }

        public boolean afterAceptar()
        {
            return true;
        }
        
        public boolean afterCancelar()
        {
            return true;
        }
        
    }
    
    /**
     * Esta función determina si los campos son válidos.
     * @return true: Si los campos son válidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal()
    {
        //Validar el "Tipo de documento".
        if (txtCodTipDoc.getText().equals(""))
        {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Tipo de documento</FONT> es obligatorio.<BR>Escriba o seleccione un tipo de documento y vuelva a intentarlo.</HTML>");
            txtDesCorTipDoc.requestFocus();
            return false;
        }
        return true;
    }

    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje de advertencia al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos se han cargado
     * con errores y que debe revisar dichos datos.
     */
    private void mostrarMsgAdv(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        if (strMsg.equals(""))
            strMsg="<HTML>Este registro tiene <FONT COLOR=\"red\">problemas</FONT>. <BR>Notifíquelo a su administrador del sistema.</HTML>";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.WARNING_MESSAGE);
    }
    
    
    /**
     * Esta función inserta el registro en la base de datos.
     * @return true: Si se pudo insertar el registro.
     * <BR>false: En el caso contrario.
     */
private boolean insertarReg(){
 boolean blnRes=false;
 java.sql.Connection conn;
 java.sql.Statement stmLoc;
 java.sql.ResultSet rstLoc;
 String strSql="";
 int intCodReg=0;
 try{
   conn=java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(),objZafParSis.getUsuarioBaseDatos(),objZafParSis.getClaveBaseDatos());
   if(conn!=null) {
      conn.setAutoCommit(false);

      stmLoc=conn.createStatement();

      strSql="SELECT CASE WHEN MAX(co_reg)+1 IS NULL THEN 1 ELSE MAX(co_reg)+1 END AS coreg  FROM tbm_datautsri "
      + " WHERE co_emp="+objZafParSis.getCodigoEmpresa()+" AND co_loc="+objZafParSis.getCodigoLocal()+" AND co_tipDoc="+txtCodTipDoc.getText();
      rstLoc=stmLoc.executeQuery(strSql);
      if(rstLoc.next()){
          intCodReg = rstLoc.getInt("coreg");
      }
      rstLoc.close();
      rstLoc=null;
      stmLoc.close();
      stmLoc=null;

      if(_getValidar()){
        if(_getExisNumDesHas(conn)){
         if(insertarCab(conn, intCodReg)){
               conn.commit();
               txtCodDoc.setText(""+intCodReg);
               blnRes=true;
        }else   conn.rollback();
       }else{ conn.rollback();  MensajeInf("YA EXISTE NUMERACION INGRESADA..");  }
      }

    conn.close();
    conn=null;
 }}catch (java.sql.SQLException e){  objUti.mostrarMsgErr_F1(this, e); }
   catch (Exception e){  objUti.mostrarMsgErr_F1(this, e);  }
  return blnRes;
}


private boolean _getValidar(){
  boolean blnRes=true;
  try{
    if(txtNumFac1.getText().equals("")){
        MensajeInf("INGRESE LE NUMERO DESDE..");
        return false;
    }
    if(txtNumFac2.getText().equals("")){
        MensajeInf("INGRESE LE NUMERO HASTA..");
         return false;
    }

    if(txtSerDoc.getText().equals("")){
        MensajeInf("INGRESE LE NUMERO SERIE..");
         return false;
    }
    if(txtAutSri.getText().equals("")){
        MensajeInf("INGRESE LE NUMERO DE AUTORIZACIÓN..");
         return false;
    }
 
    
    if(txtFecDoc.getText().equals("")){
        MensajeInf("INGRESE LA FECHA DE CADUCIDAD..");
         return false;
    }

 
    if(!txtFecDoc.isFecha()){
        MensajeInf("INGRESE LA FECHA DE CADUCIDAD..");
         return false;
    }



      
 
  }catch(Exception e){ blnRes=false; objUti.mostrarMsgErr_F1(this, e); }
 return blnRes;
}

private boolean _getExisNumDesHas(java.sql.Connection conn){
  boolean blnRes=true;
  java.sql.Statement stmLoc;
  java.sql.ResultSet rstLoc;
  String strSql="";
  try{
    if(conn!=null){
       stmLoc=conn.createStatement();

       strSql="SELECT * FROM tbm_datautsri WHERE co_emp="+objZafParSis.getCodigoEmpresa()+" and co_loc="+objZafParSis.getCodigoLocal()+" " +
       " and co_tipdoc="+txtCodTipDoc.getText()+" and  st_reg not in ('I','E') " +
       //"  and  ( ne_numdocdes >= "+txtNumFac1.getText()+" and   ne_numdochas <= "+txtNumFac2.getText()+"    ) ";

       " and ( ( "+txtNumFac1.getText()+" between ne_numdocdes and ne_numdochas ) or " +
       "  (  "+txtNumFac2.getText()+" between ne_numdocdes and ne_numdochas ) ) ";

       rstLoc=stmLoc.executeQuery(strSql);
       if(rstLoc.next()){
           blnRes=false;
       }
       rstLoc.close();
       rstLoc=null;
       stmLoc.close();
       stmLoc=null;

  }}catch(java.sql.SQLException e){ blnRes=false; objUti.mostrarMsgErr_F1(this, e); }
    catch(Exception e){ blnRes=false; objUti.mostrarMsgErr_F1(this, e); }
 return blnRes;
}

/**
 * Mensaje que presenta el sistema
 * @param strMensaje recibe el mensaje a mostrar
 */
       private void MensajeInf(String strMensaje){
        javax.swing.JOptionPane obj =new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        obj.showMessageDialog(this,strMensaje,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }





    

  
    
    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
private boolean consultarReg(){
 boolean blnRes=false;
 String strSql="";
 try{
   if(validarDat()){
   
      abrirCon();
      if(CONN_GLO!=null) {
                
        STM_GLO=CONN_GLO.createStatement(java.sql.ResultSet.TYPE_SCROLL_SENSITIVE, java.sql.ResultSet.CONCUR_READ_ONLY );
              
        strSql="SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_reg, ne_numdocdes, ne_numdochas, tx_numserfac, tx_numautsri,  "
        + " tx_feccadfac, fe_ing "
        + " FROM tbm_datautsri a1 WHERE a1.co_emp="+objZafParSis.getCodigoEmpresa()+" AND a1.co_loc="+objZafParSis.getCodigoLocal()+" "
        + " AND a1.co_tipdoc="+txtCodTipDoc.getText()+" ORDER BY a1.co_reg ";
        RSTLOC=STM_GLO.executeQuery(strSql);
        if(RSTLOC.next())
        {
           RSTLOC.last();
           objTooBar.setMenSis("Se encontraron " + RSTLOC.getRow() + " registros");
           blnRes=true;
           cargarReg();

        }else{
           mostrarMsgInf("No se ha encontrado ningún registro que cumpla el criterio de búsqueda especificado.");
           objTooBar.setEstado('l');
           objTooBar.setMenSis("Listo");
        }
      
      CerrarCon();
  }
 }}catch (java.sql.SQLException e) { blnRes=false;  objUti.mostrarMsgErr_F1(this, e); }
   catch (Exception e)    { blnRes=false;   objUti.mostrarMsgErr_F1(this, e); }
  return blnRes;
}


private boolean validarDat(){
  boolean blnRes=true;
  try{

     if(txtCodTipDoc.getText().equals("")){
         MensajeInf("SELECCIONE EL TIPO DE DOCUMENTO PARA CONSULTAR ..");
         blnRes=false;
     }
      

  }catch (Exception e){ blnRes=false;  objUti.mostrarMsgErr_F1(this, e); }
  return blnRes;
}

    
   
     /**
     * Esta función actualiza el registro en la base de datos.
     * @return true: Si se pudo actualizar el registro.
     * <BR>false: En el caso contrario.
     */
private boolean actualizarReg(){
 java.sql.Connection conn;
 boolean blnRes=false;
 try{
    conn=java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
    if(conn!=null){
       conn.setAutoCommit(false);

      if(_getValidar()){

       if(actualizarCab(conn)){
         conn.commit();
         blnRes=true;
      }else
           conn.rollback();
      }

     conn.close();
     conn=null;
           
 }}catch (java.sql.SQLException e){  objUti.mostrarMsgErr_F1(this, e);  }
  catch (Exception e) {   objUti.mostrarMsgErr_F1(this, e);  }
 return blnRes;
}
    
        
 
   
    /**
     * Esta función anula el registro de la base de datos.
     * @return true: Si se pudo anular el registro.
     * <BR>false: En el caso contrario.
     */
private boolean anularReg(){
 java.sql.Connection conn;
 boolean blnRes=false;
 try{
    conn=java.sql.DriverManager.getConnection(objZafParSis.getStringConexion(), objZafParSis.getUsuarioBaseDatos(), objZafParSis.getClaveBaseDatos());
    if(conn!=null){
       conn.setAutoCommit(false);

       if(anularCab(conn)){
         conn.commit();
         objTooBar.setEstadoRegistro("Anulado");
         blnRes=true;
      }else
           conn.rollback();

     conn.close();
     conn=null;
           
 }}catch (java.sql.SQLException e){  objUti.mostrarMsgErr_F1(this, e);  }
  catch (Exception e) {   objUti.mostrarMsgErr_F1(this, e);  }
 return blnRes;
}
            

    /**
     * Esta función permite insertar la cabecera de un registro.
     * @return true: Si se pudo insertar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
private boolean insertarCab(java.sql.Connection conn, int intCodReg ){
  boolean blnRes=true;
  java.sql.Statement stmLoc;
  String strSql="";
  try{
   if(conn!=null){
      stmLoc=conn.createStatement();
                
        strSql="INSERT INTO tbm_datautsri(co_emp, co_loc, co_tipDoc, co_reg, ne_numdocdes, ne_numdochas, tx_numserfac, tx_numautsri,  "
        + " tx_feccadfac, tx_obs1,  st_reg, fe_ing, co_usrIng ) "
        + " VALUES("+objZafParSis.getCodigoEmpresa()+", "+objZafParSis.getCodigoLocal()+", "+txtCodTipDoc.getText()+", "
        + " "+intCodReg+", "+objUti.codificar(txtNumFac1.getText(),2)+", "+objUti.codificar(txtNumFac2.getText(),2)+", "
        + " "+objUti.codificar(txtSerDoc.getText())+", "+objUti.codificar(txtAutSri.getText())+", '"+txtFecDoc.getText()+"', "
        + " "+objUti.codificar(txaObs1.getText())+",  'A', "+objZafParSis.getFuncionFechaHoraBaseDatos()+", "
        + " "+objZafParSis.getCodigoUsuario()+" ) ";
       // System.out.println("-->" +strSql );
        stmLoc.executeUpdate(strSql);

        stmLoc.close();
        stmLoc=null;

}}catch (java.sql.SQLException e){  blnRes=false; objUti.mostrarMsgErr_F1(this, e); }
  catch (Exception e){ blnRes=false; objUti.mostrarMsgErr_F1(this, e); }
 return blnRes;
}
  
    
    /**
     * Esta función permite cargar el registro seleccionado.
     * @return true: Si se pudo cargar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg()
    {
        boolean blnRes=true;
        try
        {
            cargarCabReg();
            
            blnHayCam=false;
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }
        
    
private boolean cargarCabReg(){
  boolean blnRes=true;
  java.sql.Statement stmLoc;
  java.sql.ResultSet rstLoc;
  String strSql="";
  try{
    if(CONN_GLO!=null){
                 
      stmLoc=CONN_GLO.createStatement();

      strSql="SELECT  a2.tx_descor, a2.tx_deslar, a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_reg, a1.ne_numdocdes, a1.ne_numdochas, "
      + " tx_numserfac, tx_numautsri, a1.tx_feccadfac, a1.tx_obs1, a1.st_reg "
      + " FROM tbm_datautsri AS a1 "
      + " INNER JOIN TBM_CABTIPDOC AS a2 on( a2.CO_EMP=a1.co_emp and a2.co_loc=a1.co_loc and a2.co_tipdoc=a1.co_tipdoc ) "
      + " WHERE a1.co_emp="+RSTLOC.getString("co_emp")+" AND a1.co_loc="+RSTLOC.getString("co_loc")+" "
      + " AND a1.co_tipDoc="+RSTLOC.getString("co_tipDoc")+" AND a1.co_reg="+RSTLOC.getString("co_reg");
      rstLoc=stmLoc.executeQuery(strSql);
      if(rstLoc.next()){

        txtDesCorTipDoc.setText(rstLoc.getString("tx_descor") );
        txtDesLarTipDoc.setText(rstLoc.getString("tx_deslar"));
        txtCodTipDoc.setText(rstLoc.getString("co_tipDoc"));
        txtCodDoc.setText(rstLoc.getString("co_reg"));
        txtNumFac1.setText(rstLoc.getString("ne_numDocdes"));
        txtNumFac2.setText(rstLoc.getString("ne_numDochas"));
        txtSerDoc.setText(rstLoc.getString("tx_numserfac"));
        txtAutSri.setText(rstLoc.getString("tx_numautsri"));
        txtFecDoc.setText(rstLoc.getString("tx_feccadfac"));
        txaObs1.setText(rstLoc.getString("tx_obs1"));
        
         if (rstLoc.getString("st_reg").equals("A"))
            strAux="Activo";
         else if (rstLoc.getString("st_reg").equals("I"))
             strAux="Anulado";
          else if (rstLoc.getString("st_reg").equals("E"))
             strAux="Eliminado";
          else
              strAux="Otro";
         objTooBar.setEstadoRegistro(strAux);

       }else{
          objTooBar.setEstadoRegistro("Eliminado");
          limpiarFrm();
          blnRes=false;
       }
                
       rstLoc.close();
       rstLoc=null;
       stmLoc.close();
       stmLoc=null;

       objTooBar.setPosicionRelativa("" +  RSTLOC.getRow() + " / " + RSTLOC.getRow());

   }}catch (java.sql.SQLException e){ blnRes=false;  objUti.mostrarMsgErr_F1(this, e); }
    catch (Exception e) { blnRes=false; objUti.mostrarMsgErr_F1(this, e); }
  return blnRes;
}
    
        
    /**
     * Esta función permite actualizar la cabecera de un registro.
     * @return true: Si se pudo actualizar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
private boolean actualizarCab(java.sql.Connection conn){
  boolean blnRes=true;
  java.sql.Statement stmLoc;
  String strSql="";
  try{
    if(conn!=null){
       stmLoc=conn.createStatement();

       strSql="UPDATE tbm_datautsri SET ne_numDocdes="+objUti.codificar(txtNumFac1.getText(),2)+" "
       + " ,ne_numDochas="+objUti.codificar(txtNumFac2.getText(),2)+", tx_numserfac="+objUti.codificar(txtSerDoc.getText())+" "
       + " ,tx_numautsri="+objUti.codificar(txtAutSri.getText())+", tx_feccadfac='"+txtFecDoc.getText()+"' "
       + " ,tx_obs1="+objUti.codificar(txaObs1.getText())+", fe_ultMod="+objZafParSis.getFuncionFechaHoraBaseDatos()+" "
       + " ,co_usrMod="+objZafParSis.getCodigoUsuario()+" "
       + " WHERE co_emp="+objZafParSis.getCodigoEmpresa()+" AND co_loc="+objZafParSis.getCodigoLocal()+" "
       + " AND co_tipDoc="+txtCodTipDoc.getText()+" AND co_reg="+txtCodDoc.getText();
       stmLoc.executeUpdate(strSql);

      stmLoc.close();
      stmLoc=null;

 }}catch (java.sql.SQLException e){ blnRes=false;  objUti.mostrarMsgErr_F1(this, e); }
   catch (Exception e){  blnRes=false;   objUti.mostrarMsgErr_F1(this, e); }
  return blnRes;
}

    
  
  
  
    /**
     * Esta función permite anular la cabecera de un registro.
     * @return true: Si se pudo anular la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
private boolean anularCab(java.sql.Connection conn){
  boolean blnRes=true;
  java.sql.Statement stmLoc;
  String strSql="";
  try{
   if(conn!=null){
       stmLoc=conn.createStatement();
       
        strSql="UPDATE tbm_datautsri SET st_reg='E', fe_ultMod="+objZafParSis.getFuncionFechaHoraBaseDatos()+", co_usrMod="+objZafParSis.getCodigoUsuario()+" "
        + " WHERE co_emp="+objZafParSis.getCodigoEmpresa()+" AND co_loc="+objZafParSis.getCodigoLocal()+" "
        + " AND co_tipDoc="+txtCodTipDoc.getText()+" AND co_reg="+txtCodDoc.getText();
        stmLoc.executeUpdate(strSql);

        stmLoc.close();
        stmLoc=null;

   }}catch (java.sql.SQLException e){  blnRes=false; objUti.mostrarMsgErr_F1(this, e); }
     catch (Exception e){ blnRes=false; objUti.mostrarMsgErr_F1(this, e); }
  return blnRes;
}


    /**
     * Esta función permite limpiar el formulario.
     * @return true: Si se pudo limpiar la ventana sin ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean limpiarFrm()
    {
        boolean blnRes=true;
        try
        {
            txtCodTipDoc.setText("");
            txtDesCorTipDoc.setText("");
            txtDesLarTipDoc.setText("");            
            txtCodDoc.setText("");
            txtNumFac1.setText("");
            txtNumFac2.setText("");
            txtSerDoc.setText("");
            txtAutSri.setText("");
            txtFecDoc.setText("");
            
            
            ////datos para las retenciones///
            txtSerDoc.setText("");
            ///txtNumPed.setText("");
            txtAutSri.setText("");
            txtFecDoc.setText("");
            
            txaObs1.setText("");
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }



   
    /**
     * Esta clase implementa la interface DocumentListener que observa los cambios que
     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
     * Se la usa en el sistema para determinar si existe algún cambio que se deba grabar
     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
     * presentará un mensaje advirtiendo que si no guarda los cambios los perderá.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener 
    {
        public void changedUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }
    }

    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private void agregarDocLis()
    {
        txtCodTipDoc.getDocument().addDocumentListener(objDocLis);
        txtDesCorTipDoc.getDocument().addDocumentListener(objDocLis);
        txtDesLarTipDoc.getDocument().addDocumentListener(objDocLis);
        ///txtCodBen.getDocument().addDocumentListener(objDocLis);
        //txtDesLarBen.getDocument().addDocumentListener(objDocLis);
        txtCodDoc.getDocument().addDocumentListener(objDocLis);
        //txtNumFac1.getDocument().addDocumentListener(objDocLis);
        //txtNumFac2.getDocument().addDocumentListener(objDocLis);
    }   

    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private boolean isRegPro()
    {
        boolean blnRes=true;
        strAux="¿Desea guardar los cambios efectuados a éste registro?\n";
        strAux+="Si no guarda los cambios perderá toda la información que no haya guardado.";
        switch (mostrarMsgCon(strAux))
        {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado())
                {
                    case 'n': //Insertar
                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }
    
   

  
}

