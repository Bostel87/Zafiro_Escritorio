/*
 * ZafCom08.java
 *
 * Created on 16 de enero de 2005, 17:10 PM
 */
package Contabilidad.ZafCon35;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
//import Librerias.ZafPopupMenu.ZafPopupMenu;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafSelFec.ZafSelFec;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
//import Librerias.ZafSelFec.ZafSelFec;
import java.util.ArrayList;
import java.sql.*;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafVenCon.ZafVenCon;
/**
 *
 * @author  Eddye Lino
 */
public class ZafCon35 extends javax.swing.JInternalFrame 
{
    //Constantes: Columnas del JTable:
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_EMP=1;
    final int INT_TBL_DAT_COD_LOC=2;
    final int INT_TBL_DAT_COD_TIP_DOC=3;
    final int INT_TBL_DAT_COD_DOC=4;
    final int INT_TBL_DAT_DES_COR_TIP_DOC=5;
    final int INT_TBL_DAT_DES_LAR_TIP_DOC=6;
    final int INT_TBL_DAT_NUM_DOC=7;
    final int INT_TBL_DAT_FEC_DOC=8;
    final int INT_TBL_DAT_COD_CLI=9;
    final int INT_TBL_DAT_NOM_CLI=10;

    final int INT_TBL_DAT_TIP_COM=11;
    final int INT_TBL_DAT_NUM_SER=12;
    final int INT_TBL_DAT_SEC_DES=13;
    final int INT_TBL_DAT_SEC_HAS=14;
    final int INT_TBL_DAT_AUT=15;
    final int INT_TBL_DAT_FEC_ANU=16;
    
    private ZafTblOrd objTblOrd;                        //JTable de ordenamiento.    
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafColNumerada objColNum;
    //private ZafPopupMenu objPopMnu;
    private ZafTblMod objTblMod;
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMená en JTable.
    private ZafThreadGUI objThrGUI;
    private Connection con, conTot, conCab;
    private Statement stm, stmTot, stmCab;
    private ResultSet rst, rstTot, rstCab;
    private String strSQL, strAux;    
    private Vector vecDat, vecDatUno, vecCab, vecReg, vecRegUno;
    private Vector vecTipCta, vecNatCta, vecEstReg;
    private boolean blnCon;                     //true: Continua la ejecucián del hilo.
    private String strMsg="";
    private String strTit;
    private javax.swing.JOptionPane oppMsg;
    private String strCodVen, strNomVen;             //Contenido del campo al obtener el foco.
    private ZafTblCelRenLbl objTblCelRenLbl;    
    private ZafTblCelRenLbl objTblCelRenLblTot;
    private String strCodCli, strNomCli;             //Contenido del campo al obtener el foco.   
    private String strIdeCli;   
    private String strIdeVen;                //Campos: RUC y Direccián del Beneficiario.   
    private ZafTblBus objTblBus;
   
   private ZafSelFec objSelFec;
   private ArrayList arlReg, arlDat;
   //para almacenar los datos en el arraylist q necesito para presentar los valores de las columnas para declaracion por CxC
   
   final int INT_ARL_COD_EMP=0;   
   final int INT_ARL_COD_LOC=1;
   final int INT_ARL_COD_TIP_DOC=2;
   final int INT_ARL_COD_DOC=3;
   final int INT_ARL_COD_LOC_PAG=4;
   final int INT_ARL_COD_TIP_DOC_PAG=5;
   final int INT_ARL_COD_DOC_PAG=6;
   final int INT_ARL_VAL_ABO=7;
    
   private String strDesLarCli, strDirCli;
   private ZafVenCon vcoCli;
    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafCon35(ZafParSis obj) 
    {
        initComponents();
        //Inicializar objetos.
        objParSis=obj;
        objUti=new ZafUtil();
        
        if (!configurarFrm())
            exitForm();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        panCorRpt = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        panInfFilCli = new javax.swing.JPanel();
        lblCli = new javax.swing.JLabel();
        txtCodCli = new javax.swing.JTextField();
        txtDesLarCli = new javax.swing.JTextField();
        butCli = new javax.swing.JButton();
        panFilDoc = new javax.swing.JPanel();
        chkDocFac = new javax.swing.JCheckBox();
        chkDocNC = new javax.swing.JCheckBox();
        chkRet = new javax.swing.JCheckBox();
        optTod = new javax.swing.JRadioButton();
        optFil = new javax.swing.JRadioButton();
        panRpt = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butExp = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panFil.setLayout(new java.awt.BorderLayout());

        panCorRpt.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panCorRpt.setPreferredSize(new java.awt.Dimension(560, 100));
        panCorRpt.setLayout(new java.awt.BorderLayout());
        panFil.add(panCorRpt, java.awt.BorderLayout.NORTH);
        panCorRpt.getAccessibleContext().setAccessibleName("Codigo");

        jPanel1.setLayout(new java.awt.BorderLayout());

        panInfFilCli.setPreferredSize(new java.awt.Dimension(10, 40));
        panInfFilCli.setLayout(null);

        lblCli.setText("Cliente:");
        lblCli.setToolTipText("Cliente");
        panInfFilCli.add(lblCli);
        lblCli.setBounds(20, 6, 80, 20);

        txtCodCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodCliActionPerformed(evt);
            }
        });
        txtCodCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodCliFocusLost(evt);
            }
        });
        panInfFilCli.add(txtCodCli);
        txtCodCli.setBounds(90, 6, 56, 20);

        txtDesLarCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarCliActionPerformed(evt);
            }
        });
        txtDesLarCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarCliFocusLost(evt);
            }
        });
        panInfFilCli.add(txtDesLarCli);
        txtDesLarCli.setBounds(147, 6, 264, 20);

        butCli.setText("...");
        butCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCliActionPerformed(evt);
            }
        });
        panInfFilCli.add(butCli);
        butCli.setBounds(411, 6, 20, 20);

        jPanel1.add(panInfFilCli, java.awt.BorderLayout.SOUTH);

        panFilDoc.setLayout(null);

        chkDocFac.setText("Facturas");
        chkDocFac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDocFacActionPerformed(evt);
            }
        });
        panFilDoc.add(chkDocFac);
        chkDocFac.setBounds(50, 50, 300, 14);

        chkDocNC.setText("Notas de Crédito");
        chkDocNC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDocNCActionPerformed(evt);
            }
        });
        panFilDoc.add(chkDocNC);
        chkDocNC.setBounds(50, 66, 280, 14);

        chkRet.setText("Retenciones");
        chkRet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRetActionPerformed(evt);
            }
        });
        panFilDoc.add(chkRet);
        chkRet.setBounds(50, 84, 280, 14);

        optTod.setSelected(true);
        optTod.setText("Todos los registros");
        optTod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTodActionPerformed(evt);
            }
        });
        panFilDoc.add(optTod);
        optTod.setBounds(10, 10, 340, 14);

        optFil.setText("Sólo los registros que cumplan el criterio seleccionado");
        optFil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optFilActionPerformed(evt);
            }
        });
        panFilDoc.add(optFil);
        optFil.setBounds(10, 26, 340, 14);

        jPanel1.add(panFilDoc, java.awt.BorderLayout.CENTER);

        panFil.add(jPanel1, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Filtro", panFil);

        panRpt.setLayout(new java.awt.BorderLayout());

        spnDat.setPreferredSize(new java.awt.Dimension(453, 418));

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lin", "Código Empresa", "Código Alterno", "Código Item", "Nombre Item", "Stock Actual", "Bodega"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDat.setToolTipText("Doble click o ENTER para abrir la opción seleccionada.");
        tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblDat.setMaximumSize(new java.awt.Dimension(2147483647, 192));
        spnDat.setViewportView(tblDat);

        panRpt.add(spnDat, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Reporte", panRpt);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setPreferredSize(new java.awt.Dimension(320, 64));
        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 10));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butExp.setText("Exportar");
        butExp.setPreferredSize(new java.awt.Dimension(92, 25));
        butExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butExpActionPerformed(evt);
            }
        });
        panBot.add(butExp);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void chkDocNCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDocNCActionPerformed
        if (chkDocNC.isSelected()){
            optFil.setSelected(true);
            optTod.setSelected(false);
        }

}//GEN-LAST:event_chkDocNCActionPerformed

    private void chkDocFacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDocFacActionPerformed
        if (chkDocFac.isSelected()){
            optFil.setSelected(true);
            optTod.setSelected(false);
        }
            
}//GEN-LAST:event_chkDocFacActionPerformed
            /*Permite obtener un log de la tabla tbm_grpvar
 *
 */    
     
    
    
                        
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar accián de acuerdo a la etiqueta del botán ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar"))
        {
            blnCon=true;
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();                
                
            }            
        }
        else
        {
            blnCon=false;
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicacián. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="áEstá seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

private void txtCodCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodCliActionPerformed
// TODO add your handling code here:
        txtCodCli.transferFocus();
}//GEN-LAST:event_txtCodCliActionPerformed

private void txtCodCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCliFocusGained
// TODO add your handling code here:
        strCodCli=txtCodCli.getText();
        txtCodCli.selectAll();
}//GEN-LAST:event_txtCodCliFocusGained

private void txtCodCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCliFocusLost
// TODO add your handling code here:
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtCodCli.getText().equalsIgnoreCase(strCodCli)){
            if (txtCodCli.getText().equals("")){
                txtCodCli.setText("");
                txtDesLarCli.setText("");
            }
            else
                mostrarVenConCli(1);
        }
        else
            txtCodCli.setText(strCodCli);
}//GEN-LAST:event_txtCodCliFocusLost

private void txtDesLarCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarCliActionPerformed
// TODO add your handling code here:
        txtDesLarCli.transferFocus();
}//GEN-LAST:event_txtDesLarCliActionPerformed

private void txtDesLarCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarCliFocusGained
// TODO add your handling code here:
        strDesLarCli=txtDesLarCli.getText();
        txtDesLarCli.selectAll();
}//GEN-LAST:event_txtDesLarCliFocusGained

private void txtDesLarCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarCliFocusLost
// TODO add your handling code here:
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesLarCli.getText().equalsIgnoreCase(strDesLarCli))
        {
            if (txtDesLarCli.getText().equals(""))
            {
                txtCodCli.setText("");
                txtDesLarCli.setText("");
            }
            else
            {
                mostrarVenConCli(2);
            }
        }
        else
            txtDesLarCli.setText(strDesLarCli);
}//GEN-LAST:event_txtDesLarCliFocusLost

private void butCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCliActionPerformed
// TODO add your handling code here:
        strCodCli=txtCodCli.getText();
        mostrarVenConCli(0);
}//GEN-LAST:event_butCliActionPerformed

private void chkRetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRetActionPerformed
    // TODO add your handling code here:
        if (chkRet.isSelected()){
            optFil.setSelected(true);
            optTod.setSelected(false);
        }
}//GEN-LAST:event_chkRetActionPerformed

private void optTodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTodActionPerformed
    // TODO add your handling code here:
    if(optTod.isSelected()){
        chkDocFac.setSelected(false);
        chkDocNC.setSelected(false);
        chkRet.setSelected(false);
        optFil.setSelected(false);
    }
    else
        optFil.setSelected(true);
}//GEN-LAST:event_optTodActionPerformed

private void optFilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optFilActionPerformed
    // TODO add your handling code here:
    if(optFil.isSelected())
        optTod.setSelected(false);
    else{
        optTod.setSelected(true);
        chkDocFac.setSelected(false);
        chkDocNC.setSelected(false);
        chkRet.setSelected(false);
    }
}//GEN-LAST:event_optFilActionPerformed

private void butExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butExpActionPerformed
    // TODO add your handling code here:
    java.io.File filExc;
    Process pro;
    try{
        //filExc=new java.io.File("C:\\Zafiro\\Reportes\\Contabilidad\\ZafCon35\\ZafCon35.xls");
        if(System.getProperty("os.name").equals("Linux")){
            filExc=new java.io.File("/tmp/ZafCon35.xls");
        }
        else{
            filExc=new java.io.File("C:\\Zafiro\\Reportes\\Contabilidad\\ZafCon35\\ZafCon35.xls");
        }
        String strNomHoj="Hoja1";

        ZafCon35_01 objCon35_01= new ZafCon35_01(tblDat, filExc, strNomHoj);

        if(objCon35_01.export()){
            mostrarMsgInf("El archivo se cargó correctamente.");
            //Process pro = Runtime.getRuntime().exec("cmd /c start C:/Zafiro/Reportes/Contabilidad/ZafCon35/ZafCon35.xls");
            if(System.getProperty("os.name").equals("Linux")){
                pro = Runtime.getRuntime().exec("oocalc /tmp/ZafCon35.xls");
                System.out.println("LINUX: " + pro.toString());
            }
            else{
                pro = Runtime.getRuntime().exec("cmd /c start C:/Zafiro/Reportes/Contabilidad/ZafCon35/ZafCon35.xls");
                System.out.println("WINDOWS: " + pro.toString());
            }
        } else
            mostrarMsgInf("Falló la carga del archivo. Puede ser que el archivo este abierto.");
    } catch(Exception e){
        objUti.mostrarMsgErr_F1(this, e);
    }
}//GEN-LAST:event_butExpActionPerformed


    /**
     * Esta funcián muestra un mensaje informativo al usuario. Se podráa utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }


    /** Cerrar la aplicacián. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCli;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butExp;
    private javax.swing.JCheckBox chkDocFac;
    private javax.swing.JCheckBox chkDocNC;
    private javax.swing.JCheckBox chkRet;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblCli;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optFil;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panCorRpt;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFilDoc;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panInfFilCli;
    private javax.swing.JPanel panRpt;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodCli;
    private javax.swing.JTextField txtDesLarCli;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm(){
        boolean blnRes=true;
        try{
            strAux=objParSis.getNombreMenu() + "v0.2.4";
            this.setTitle(strAux);
            lblTit.setText(strAux);
            
            //Configurar ZafSelFec:
            objSelFec=new ZafSelFec();
            objSelFec.setCheckBoxVisible(false);
            panCorRpt.add(objSelFec);
            objSelFec.setBounds(4, 4, 472, 72);
            
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(17);    //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");            
            vecCab.add(INT_TBL_DAT_COD_EMP,"Cod.Emp.");
            vecCab.add(INT_TBL_DAT_COD_LOC,"Cod.Loc.");
            vecCab.add(INT_TBL_DAT_COD_TIP_DOC,"Cod.Tip.Doc");
            vecCab.add(INT_TBL_DAT_COD_DOC,"Cod.Doc");
            vecCab.add(INT_TBL_DAT_DES_COR_TIP_DOC,"Tip.Doc.");
            vecCab.add(INT_TBL_DAT_DES_LAR_TIP_DOC,"Des.Lar.Tip.Doc");
            vecCab.add(INT_TBL_DAT_NUM_DOC,"Num.Doc");
            vecCab.add(INT_TBL_DAT_FEC_DOC, "Fec.Doc.");
            vecCab.add(INT_TBL_DAT_COD_CLI,"Cod.Cli.");
            vecCab.add(INT_TBL_DAT_NOM_CLI,"Nom.Cli.");
            vecCab.add(INT_TBL_DAT_TIP_COM,"Tip.Com.");
            vecCab.add(INT_TBL_DAT_NUM_SER,"Num.Ser.");
            vecCab.add(INT_TBL_DAT_SEC_DES,"Sec.Des.");
            vecCab.add(INT_TBL_DAT_SEC_HAS,"Sec.Has.");
            vecCab.add(INT_TBL_DAT_AUT,"Aut.");
            vecCab.add(INT_TBL_DAT_FEC_ANU,"Fec.Anu.");

            
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);            
               
            //Configurar JTable: Establecer tipo de seleccián.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el mená de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Tamaáo de las celdas
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_LIN).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DES_COR_TIP_DOC).setPreferredWidth(70);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_DES_LAR_TIP_DOC).setPreferredWidth(20);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(70);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(70);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(150);

            tblDat.getColumnModel().getColumn(INT_TBL_DAT_TIP_COM).setPreferredWidth(50);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_NUM_SER).setPreferredWidth(80);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_SEC_DES).setPreferredWidth(80);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_SEC_HAS).setPreferredWidth(80);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_AUT).setPreferredWidth(80);
            tblDat.getColumnModel().getColumn(INT_TBL_DAT_FEC_ANU).setPreferredWidth(70);

            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);                       
            

            tblDat.getTableHeader().setReorderingAllowed(false);                        
            objTblBus=new ZafTblBus(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);
            
            arlDat=new ArrayList();
            configurarVenConCli();

            txtCodCli.setEditable(false);
            txtDesLarCli.setEditable(false);
            butCli.setEnabled(false);


            //Configurar JTable: Ocultar columnas del sistema.
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_EMP, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_LOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_TIP_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_DOC, tblDat);





        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }




    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podráa presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaráa informado en todo
     * momento de lo que ocurre. Si se desea hacer ásto es necesario utilizar ásta clase
     * ya que si no sálo se apreciaráa los cambios cuando ha terminado todo el proceso.
     */
    
 

    
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sálo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }



        

    private boolean cargarDetReg()
    {
        String strNiv, strAuxLoc;
        int intCodEmp, intNumTotReg, i;
        boolean blnRes=true;
        double dblNumVta=0.00;
        double dblValNet=0.00;
        
        try
        {
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            intCodEmp=objParSis.getCodigoEmpresa();
            if (con!=null){
                strAux="";
                
                switch (objSelFec.getTipoSeleccion()){
                    case 0: //Básqueda por rangos
                        strAux+=" AND a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 1: //Fechas menores o iguales que "Hasta".
                        strAux+=" AND a1.fe_doc<='" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 2: //Fechas mayores o iguales que "Desde".
                        strAux+=" AND a1.fe_doc>='" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                        break;
                    case 3: //Todo.
                        break;
                }
                
                stm=con.createStatement();
                if(optTod.isSelected()){
                    strSQL="";
                    strSQL+="SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc,";
                    strSQL+=" a2.tx_desCor, a2.tx_desLar, a1.ne_numdoc, a1.fe_doc, a1.co_cli, a1.tx_nomCli";
                    strSQL+=" , CASE WHEN a1.co_tipDoc IN(1,228) THEN '18' 	WHEN a1.co_tipDoc IN(3,28,229) THEN '04' 	ELSE '' END AS tx_tipCom";
                    strSQL+=" , b3.tx_numserfac, ";
                    //strSQL+=" b3.tx_numautsri "; //Se comenta esta linea porque ahora, si el CodTipDoc = 228 (FACVENE) o 229 (DEVVENE) se va a buscar el numero de autorizacion en la tabla tbm_cabmovinv. Si es diferente, va a seguir buscando en tbm_datAutSri
                    strSQL+=" (case when a1.co_tipDoc not in (228,229) then b3.tx_numAutSRI else a1.tx_numAutFacEle end) AS tx_numautsri ";
                    strSQL+=" FROM tbm_cabmovinv AS a1 INNER JOIN tbm_cabtipdoc AS a2";
                    strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipdoc=a2.co_tipdoc";
                    strSQL+=" LEFT OUTER JOIN tbm_datautsri AS b3";
                    strSQL+=" ON a1.co_emp=b3.co_emp AND a1.co_loc=b3.co_loc AND a1.co_tipDoc=b3.co_tipDoc AND a1.ne_numDoc BETWEEN b3.ne_numdocdes AND b3.ne_numdochas";
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+=" AND a1.co_tipdoc in (";
                    strSQL+="1,3,28,228,229";
                    strSQL+=")";
                    strSQL+="" + strAux;
                    strSQL+=" AND a1.st_reg='I'";
                    strSQL+=" UNION";
                    strSQL+=" SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc,";
                    strSQL+=" a2.tx_desCor, a2.tx_desLar, a1.ne_numdoc1 AS ne_numDoc, a1.fe_doc, a1.co_cli, a1.tx_nomCli";
                    strSQL+=" 	, CASE WHEN a1.co_tipDoc IN(33,160,230) THEN '07'";
                    strSQL+=" 	ELSE '' END AS tx_tipCom";
                    strSQL+=" , b3.tx_numserfac, "; 
                    //strSQL+=" b3.tx_numautsri"; //Se comenta esta linea porque ahora, si el CodTipDoc = 230 (RFP1E) se va a buscar el numero de autorizacion en la tabla tbm_cabpag. Si es diferente a 230, va a seguir buscando en tbm_datAutSri
                    strSQL+=" (case when a1.co_tipDoc <> 230 then b3.tx_numAutSRI else a1.tx_numAutFacEle end) AS tx_numautsri ";
                    strSQL+=" FROM tbm_cabPag AS a1 INNER JOIN tbm_cabtipdoc AS a2";
                    strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipdoc=a2.co_tipdoc";
                    strSQL+=" LEFT OUTER JOIN tbm_datautsri AS b3";
                    strSQL+=" ON a1.co_emp=b3.co_emp AND a1.co_loc=b3.co_loc AND a1.co_tipDoc=b3.co_tipDoc AND a1.ne_numDoc1 BETWEEN b3.ne_numdocdes AND b3.ne_numdochas";
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+=" AND a1.co_tipdoc in (";
                    strSQL+=" 33,160,230";
                    strSQL+=" )";
                    strSQL+="" + strAux + "";
                    strSQL+=" AND a1.st_reg='I'";
                }
                else{
                    if(   (chkDocFac.isSelected()) || (chkDocNC.isSelected()) ){
                        strSQL="";
                        strSQL+="SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc,";
                        strSQL+=" a2.tx_desCor, a2.tx_desLar, a1.ne_numdoc, a1.fe_doc, a1.co_cli, a1.tx_nomCli";
                        strSQL+=" , CASE WHEN a1.co_tipDoc IN(1,228) THEN '18' 	WHEN a1.co_tipDoc IN(3,28,229) THEN '04' 	ELSE '' END AS tx_tipCom";
                        strSQL+=" , b3.tx_numserfac, ";
                        //strSQL+=" b3.tx_numautsri"; //Se comenta esta linea porque ahora, si el CodTipDoc = 228 (FACVENE) o 229 (DEVVENE) se va a buscar el numero de autorizacion en la tabla tbm_cabmovinv. Si es diferente, va a seguir buscando en tbm_datAutSri
                        strSQL+=" (case when a1.co_tipDoc not in (228,229) then b3.tx_numAutSRI else a1.tx_numAutFacEle end) AS tx_numautsri ";
                        strSQL+=" FROM tbm_cabmovinv AS a1 INNER JOIN tbm_cabtipdoc AS a2";
                        strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipdoc=a2.co_tipdoc";
                        strSQL+=" LEFT OUTER JOIN tbm_datautsri AS b3";
                        strSQL+=" ON a1.co_emp=b3.co_emp AND a1.co_loc=b3.co_loc AND a1.co_tipDoc=b3.co_tipDoc AND a1.ne_numDoc BETWEEN b3.ne_numdocdes AND b3.ne_numdochas";
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+=" AND a1.co_tipdoc in (";
                        if( (chkDocFac.isSelected()) && (chkDocNC.isSelected()) )
                            strSQL+="1,3,28,228,229";
                        else{
                            if(chkDocFac.isSelected())
                                strSQL+="1";
                            else if(chkDocNC.isSelected())
                                strSQL+="3,28,229";
                        }
                        strSQL+=")";
                        strSQL+="" + strAux;
                        strSQL+=" AND a1.st_reg='I'";
                    }

                    if(chkRet.isSelected()){
                        if(   (chkDocFac.isSelected()) || (chkDocNC.isSelected()) )
                            strSQL+=" UNION";
                        else
                            strSQL="";
                        strSQL+=" SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc,";
                        strSQL+=" a2.tx_desCor, a2.tx_desLar, a1.ne_numdoc1 AS ne_numDoc, a1.fe_doc, a1.co_cli, a1.tx_nomCli";
                        strSQL+=" 	, CASE WHEN a1.co_tipDoc IN(33,160,230) THEN '07'";
                        strSQL+=" 	ELSE '' END AS tx_tipCom";
                        strSQL+=" , b3.tx_numserfac, ";
                        //strSQL+=" b3.tx_numautsri"; //Se comenta esta linea porque ahora, si el CodTipDoc = 230 (RFP1E) se va a buscar el numero de autorizacion en la tabla tbm_cabpag. Si es diferente a 230, va a seguir buscando en tbm_datAutSri
                        strSQL+=" (case when a1.co_tipDoc <> 230 then b3.tx_numAutSRI else a1.tx_numAutFacEle end) AS tx_numautsri ";
                        strSQL+=" FROM tbm_cabPag AS a1 INNER JOIN tbm_cabtipdoc AS a2";
                        strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipdoc=a2.co_tipdoc";
                        strSQL+=" LEFT OUTER JOIN tbm_datautsri AS b3";
                        strSQL+=" ON a1.co_emp=b3.co_emp AND a1.co_loc=b3.co_loc AND a1.co_tipDoc=b3.co_tipDoc AND a1.ne_numDoc1 BETWEEN b3.ne_numdocdes AND b3.ne_numdochas";
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+=" AND a1.co_tipdoc in (";
                        strSQL+=" 33,160,230";
                        strSQL+=" )";
                        strSQL+="" + strAux + "";
                        strSQL+=" AND a1.st_reg='I'";
                    }
                }

                strSQL+=" ORDER BY fe_doc, tx_nomCli, ne_numdoc";

                System.out.println("SQL cargarDetFac:" +strSQL);
                rst=stm.executeQuery(strSQL);

                vecDat.clear();
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                //pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;
                                
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,             "");
                        vecReg.add(INT_TBL_DAT_COD_EMP,         "" + rst.getObject("co_emp")==null?"":rst.getString("co_emp"));
                        vecReg.add(INT_TBL_DAT_COD_LOC,         "" + rst.getObject("co_loc")==null?"":rst.getString("co_loc"));
                        vecReg.add(INT_TBL_DAT_COD_TIP_DOC,     "" + rst.getObject("co_tipDoc")==null?"":rst.getString("co_tipDoc"));
                        vecReg.add(INT_TBL_DAT_COD_DOC,         "" + rst.getObject("co_doc")==null?"":rst.getString("co_doc"));
                        vecReg.add(INT_TBL_DAT_DES_COR_TIP_DOC, "" + rst.getObject("tx_desCor")==null?"":rst.getString("tx_desCor"));
                        vecReg.add(INT_TBL_DAT_DES_LAR_TIP_DOC, "" + rst.getObject("tx_desLar")==null?"":rst.getString("tx_desLar"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC,         "" + rst.getObject("ne_numdoc")==null?"":rst.getString("ne_numdoc"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC,         "" + rst.getObject("fe_doc")==null?"":rst.getString("fe_doc"));
                        vecReg.add(INT_TBL_DAT_COD_CLI,         "" + rst.getObject("co_cli")==null?"":rst.getString("co_cli"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI,         "" + rst.getObject("tx_nomCli")==null?"":rst.getString("tx_nomCli"));
                        vecReg.add(INT_TBL_DAT_TIP_COM,         "" + rst.getObject("tx_tipCom")==null?"":rst.getString("tx_tipCom"));
                        
                        strAuxLoc = rst.getObject("tx_numserfac") == null? "" :rst.getString("tx_numserfac");
                        strAuxLoc = strAuxLoc.replace("-", "");
                        vecReg.add(INT_TBL_DAT_NUM_SER,         "" + strAuxLoc);
                        
                        vecReg.add(INT_TBL_DAT_SEC_DES,         "" + rst.getObject("ne_numdoc")==null?"":rst.getString("ne_numdoc"));
                        vecReg.add(INT_TBL_DAT_SEC_HAS,         "" + rst.getObject("ne_numdoc")==null?"":rst.getString("ne_numdoc"));
                        vecReg.add(INT_TBL_DAT_AUT,             "" + rst.getObject("tx_numautsri")==null?"":rst.getString("tx_numautsri"));
                        vecReg.add(INT_TBL_DAT_FEC_ANU,         "" + rst.getObject("tx_numautsri")==null?"":(objUti.formatearFecha(rst.getString("fe_doc"), "yyyy-MM-dd", "dd/MM/yyyy")));

                        vecDat.add(vecReg);
                        i++;
                        pgrSis.setValue(i);
                        
                    }
                    else
                    {
                        break;
                    }
                }
                
                rst.close();
                stm.close();
                rst=null;
                stm=null;
                //Asignar vectores al modelo.                                                
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                pgrSis.setValue(0);
                butCon.setText("Consultar");
                lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros");
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
            
    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                cargarDetReg();
                con.close();
                con=null;
            }            
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
    
     private boolean configurarVenConCli(){
        boolean blnRes=true;
        String strTitVenCon="";
        try{
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Identificación");
            arlAli.add("Nombre");
            arlAli.add("Dirección");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            
            if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                strSQL="";
                strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
                strSQL+=" FROM tbm_cli AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                if(objParSis.getCodigoMenu()==232){
                    strSQL+=" AND a1.st_cli='S'";
                    strTitVenCon="Listado de Clientes";
                }
                else{
                    strSQL+=" AND a1.st_prv='S'";
                    strTitVenCon="Listado de Proveedores";
                }

                strSQL+=" ORDER BY a1.tx_nom";
            }
            else{
                strSQL="";
                strSQL+="SELECT a2.co_cli, a2.tx_ide, a2.tx_nom, a2.tx_dir";
                strSQL+=" FROM tbr_cliLoc AS a1 INNER JOIN tbm_cli AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                if(objParSis.getCodigoMenu()==232){
                    strSQL+=" AND a2.st_cli='S'";
                    strTitVenCon="Listado de Clientes";
                }
                else{
                    strSQL+=" AND a2.st_prv='S'";
                    strTitVenCon="Listado de Proveedores";
                }
                strSQL+=" ORDER BY a2.tx_nom";
            }
            
            
            
            
            

            System.out.println("CONFIGURARVENCONCLI: " +strSQL);
            //Ocultar columnas.
            int intColOcu[]=new int[1];
            intColOcu[0]=4;
            vcoCli=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, strTitVenCon, strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoCli.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
     private boolean mostrarVenConCli(int intTipBus){
        boolean blnRes=true;
        try{
            switch (intTipBus){
                case 0: //Mostrar la ventana de consulta.
                    vcoCli.setCampoBusqueda(2);
                    vcoCli.show();
                    if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE){
                        txtCodCli.setText(vcoCli.getValueAt(1));
                        strIdeCli=vcoCli.getValueAt(2);
                        txtDesLarCli.setText(vcoCli.getValueAt(3));
                        strDirCli=vcoCli.getValueAt(4);
                    }
                    break;
                case 1: //Búsqueda directa por "Número de cuenta".
                    if (vcoCli.buscar("a1.co_cli", txtCodCli.getText())){
                        txtCodCli.setText(vcoCli.getValueAt(1));
                        strIdeCli=vcoCli.getValueAt(2);
                        txtDesLarCli.setText(vcoCli.getValueAt(3));
                        strDirCli=vcoCli.getValueAt(4);
                    }
                    else{
                        vcoCli.setCampoBusqueda(0);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE){
                            txtCodCli.setText(vcoCli.getValueAt(1));
                            strIdeCli=vcoCli.getValueAt(2);
                            txtDesLarCli.setText(vcoCli.getValueAt(3));
                            strDirCli=vcoCli.getValueAt(4);
                        }
                        else{
                            txtCodCli.setText(strCodCli);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoCli.buscar("a1.tx_nom", txtDesLarCli.getText())){
                        txtCodCli.setText(vcoCli.getValueAt(1));
                        strIdeCli=vcoCli.getValueAt(2);
                        txtDesLarCli.setText(vcoCli.getValueAt(3));
                        strDirCli=vcoCli.getValueAt(4);
                    }
                    else{
                        vcoCli.setCampoBusqueda(2);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                        {
                            txtCodCli.setText(vcoCli.getValueAt(1));
                            strIdeCli=vcoCli.getValueAt(2);
                            txtDesLarCli.setText(vcoCli.getValueAt(3));
                            strDirCli=vcoCli.getValueAt(4);
                        }
                        else{
                            txtDesLarCli.setText(strDesLarCli);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }   
    
    
    
    
}