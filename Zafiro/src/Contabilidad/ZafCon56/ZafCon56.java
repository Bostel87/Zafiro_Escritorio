/*
 * ZafCon56.java
 *
 * Created on 02 de octubre de 2006, 11:38 AM
 */
package Contabilidad.ZafCon56;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafSelFec.ZafSelFec;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaColGrp;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaGrp;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Vector;

//para ireports
import java.sql.*;
import java.util.ArrayList;
import javax.swing.JScrollBar;


/**
 *
 * @author  Eddye Lino
 */
public class ZafCon56 extends javax.swing.JInternalFrame 
{
    //Constantes: Columnas del JTable:
    final int INT_TBL_DAT_LIN=0;                //Lánea
    final int INT_TBL_DAT_COD_SIS=1;            //Cádigo de la cuenta (Sistema).
    final int INT_TBL_DAT_NIV_CTA=2;            //Nivel de la cuenta.
    final int INT_TBL_DAT_PAD_CTA=3;            //Padre de la cuenta.
    final int INT_TBL_DAT_COD_CTA=4;            //Cádigo de la cuenta (Contable).
    final int INT_TBL_DAT_NOM_CTA=5;            //Nombre de la cuenta.
    final int INT_TBL_DAT_TIP_CTA=6;            //Saldo acumulado.
    
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafTblFilCab objTblFilCab;
    private ZafTblMod objTblMod, objTblModTot;
    private ZafThreadGUI objThrGUI;
    private ZafTblCelRenLbl objTblCelRenLbl, objTblCelRenLblTot;            //Render: Presentar JLabel en JTable.
    private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PopupMená en JTable.
    private ZafTblBus objTblBus;                        //Editor de básqueda.
    private ZafTblOrd objTblOrd;                        //JTable de ordenamiento.
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg;
    private boolean blnCon;                             //true: Continua la ejecucián del hilo.
    //private java.util.Date datFecAux;
    private String strFecAux;
    
    private double dblSalMenImp;
    private double dblSalAcuImp;
    //private String strNivRep;
    //private String strFecCor;

    private ZafSelFec objSelFec;
    private String strFecRan[][];
    private int intNumColAdi, intNumColIni, intNumColFin;
    private int intNumColIniTot;

    private ArrayList arlReg, arlDat;
    final int INT_ARL_ANI=0;
    final int INT_ARL_MES_NUM=1;
    final int INT_ARL_MES_LET=2;


    private ArrayList arlRegFec, arlDatFec;
    final int INT_ARL_FEC_DES=0;
    final int INT_ARL_FEC_HAS=1;


    private String strFecDes="";
    private String strFecHas="";

    private JScrollBar barDat, barTot;


    
//    private Librerias.ZafDate.ZafDatePicker txtFecDoc;
    
    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafCon56(ZafParSis obj) 
    {
        try
        {
            
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
            if (objParSis.getCodigoEmpresa() == objParSis.getCodigoEmpresaGrupo()) {
                mostrarMsgInf("Este programa no se encuenta implementado para Grupo solo para Empresas");
                dispose();
            }
            else{
                initComponents();
                configurarFrm();

            }
            
            
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        panFilFec = new javax.swing.JPanel();
        lblNiv = new javax.swing.JLabel();
        cboNiv = new javax.swing.JComboBox();
        chkSalCer = new javax.swing.JCheckBox();
        panRpt = new javax.swing.JPanel();
        panRptReg = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable() {
            protected javax.swing.table.JTableHeader createDefaultTableHeader()
            {
                return new ZafTblHeaGrp(columnModel);
            }
        };
        spnTot = new javax.swing.JScrollPane();
        tblTot = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setLayout(new java.awt.BorderLayout());

        panFilFec.setBorder(javax.swing.BorderFactory.createTitledBorder("Fecha de corte"));
        panFilFec.setPreferredSize(new java.awt.Dimension(100, 150));
        panFilFec.setLayout(null);

        lblNiv.setText("Nivel:");
        panFilFec.add(lblNiv);
        lblNiv.setBounds(10, 100, 100, 20);
        panFilFec.add(cboNiv);
        cboNiv.setBounds(100, 100, 180, 20);

        chkSalCer.setSelected(true);
        chkSalCer.setText("No incluir cuentas con saldo cero");
        chkSalCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSalCerActionPerformed(evt);
            }
        });
        panFilFec.add(chkSalCer);
        chkSalCer.setBounds(6, 130, 280, 23);

        panFil.add(panFilFec, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Filtro", panFil);

        panRpt.setLayout(new java.awt.BorderLayout());

        panRptReg.setLayout(new java.awt.BorderLayout(0, 1));

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        spnDat.setViewportView(tblDat);

        panRptReg.add(spnDat, java.awt.BorderLayout.CENTER);

        spnTot.setPreferredSize(new java.awt.Dimension(454, 40));

        tblTot.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnTot.setViewportView(tblTot);

        panRptReg.add(spnTot, java.awt.BorderLayout.SOUTH);

        panRpt.add(panRptReg, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Reporte", panRpt);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        jButton1.setText("Imprimir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panBot.add(jButton1);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void chkSalCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSalCerActionPerformed
        // TODO add your handling code here:        
    }//GEN-LAST:event_chkSalCerActionPerformed

        private boolean isProRep(){
            if(!(imprimir())){
                mostrarMsgInf("<HTML>El reporte no se pudo generar correctamente<BR>Intentelo nuevamente.</HTML>");
                return false;
            }   
            return true;
        }    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        isProRep();            
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        
    }//GEN-LAST:event_formInternalFrameOpened

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar accián de acuerdo a la etiqueta del botán ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar"))
        {
            blnCon=true;
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
        }
        else
        {
            blnCon=false;
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    /** Cerrar la aplicacián. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    /** Cerrar la aplicacián. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JComboBox cboNiv;
    private javax.swing.JCheckBox chkSalCer;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblNiv;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFilFec;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panRpt;
    private javax.swing.JPanel panRptReg;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JScrollPane spnTot;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblTot;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            arlDat=new ArrayList();
            //Configurar ZafSelFec:
            objSelFec=new ZafSelFec();
            objSelFec.setCheckBoxVisible(false);
            panFilFec.add(objSelFec);
            objSelFec.setBounds(4, 4, 472, 72);
            //objSelFec.setFlechaDerechaHabilitada(false);
            //objSelFec.setFlechaIzquierdaHabilitada(false);
            
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.1");
            lblTit.setText(strAux);
            //Configurar objetos.
//            txtCodItm.setVisible(false);
            //Configurar los JTables.
            configurarTblDat();
            configurarFrmTotales();
            
            arlDatFec=new ArrayList();

            //Configurar el combo "Nivel".
            cboNiv.addItem("1");
            cboNiv.addItem("2");
            cboNiv.addItem("3");
            cboNiv.addItem("4");
            cboNiv.addItem("5");
            cboNiv.addItem("6");
            cboNiv.setSelectedIndex(5);




        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta funcián configura el JTable "tblDat".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDat()
    {
        boolean blnRes=true;
        
        try
        {
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(7);   //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_SIS,"Cód.Sis.");
            vecCab.add(INT_TBL_DAT_NIV_CTA,"Nivel");
            vecCab.add(INT_TBL_DAT_PAD_CTA,"Cód.Cta.Pad.");
            vecCab.add(INT_TBL_DAT_COD_CTA,"Cuenta");
            vecCab.add(INT_TBL_DAT_NOM_CTA,"Nombre");
            vecCab.add(INT_TBL_DAT_TIP_CTA,"Tip.Cta.");

            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            //Configurar JTable: Establecer tipo de seleccián.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el mená de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_SIS).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_NIV_CTA).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_PAD_CTA).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_CTA).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_DAT_NOM_CTA).setPreferredWidth(377);
            tcmAux.getColumn(INT_TBL_DAT_TIP_CTA).setPreferredWidth(40);
            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
//            tcmAux.getColumn(INT_TBL_DAT_BUT_CTA).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);


            //Configurar JTable: Ocultar columnas del sistema.
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_SIS, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_NIV_CTA, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_PAD_CTA, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_TIP_CTA, tblDat);



            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Editor de básqueda.
            objTblBus=new ZafTblBus(tblDat);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDat);
            tcmAux.getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);
            //Configurar JTable: Establecer la clase que controla el ordenamiento.
            objTblOrd=new ZafTblOrd(tblDat);
            
            //Libero los objetos auxiliares.
            tcmAux=null;

            intNumColIni=objTblMod.getColumnCount();

        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    private boolean configurarFrmTotales(){
        boolean blnRes=true;
        try{
            //Configurar JTable: Establecer el modelo.
            objTblModTot=new ZafTblMod();
            objTblModTot.setHeader(vecCab);
            tblTot.setModel(objTblModTot);



            //Configurar JTable: Establecer tipo de seleccián.
            tblTot.setRowSelectionAllowed(true);
            tblTot.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblTot);
            tblTot.getColumnModel().getColumn(INT_TBL_DAT_LIN).setCellRenderer(objTblFilCab);

            tblTot.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Tamaáo de las celdas
            tblTot.getColumnModel().getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tblTot.getColumnModel().getColumn(INT_TBL_DAT_COD_SIS).setPreferredWidth(30);
            tblTot.getColumnModel().getColumn(INT_TBL_DAT_NIV_CTA).setPreferredWidth(30);
            tblTot.getColumnModel().getColumn(INT_TBL_DAT_PAD_CTA).setPreferredWidth(30);
            tblTot.getColumnModel().getColumn(INT_TBL_DAT_COD_CTA).setPreferredWidth(100);
            tblTot.getColumnModel().getColumn(INT_TBL_DAT_NOM_CTA).setPreferredWidth(377);
            tblTot.getColumnModel().getColumn(INT_TBL_DAT_TIP_CTA).setPreferredWidth(40);

            tblTot.getTableHeader().setReorderingAllowed(false);

            //Configurar JTable: Ocultar columnas del sistema.

            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
//            tblTot.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setResizable(false);
//            tblTot.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setResizable(false);
//            tblTot.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setResizable(false);
//            tblTot.getColumnModel().getColumn(INT_TBL_DAT_COD_REG).setResizable(false);
//            tblTot.getColumnModel().getColumn(INT_TBL_DAT_CHK_CON_AUX).setResizable(false);


            //Configurar JTable: Igualar el ancho de las columnas del JTable de totales con el JTable de totales.
            for (int j=0; j<tblDat.getColumnCount(); j++){
                tblTot.getColumnModel().getColumn(j).setWidth(tblTot.getColumnModel().getColumn(j).getWidth());
                tblTot.getColumnModel().getColumn(j).setMaxWidth(tblTot.getColumnModel().getColumn(j).getMaxWidth());
                tblTot.getColumnModel().getColumn(j).setMinWidth(tblTot.getColumnModel().getColumn(j).getMinWidth());
                tblTot.getColumnModel().getColumn(j).setPreferredWidth(tblTot.getColumnModel().getColumn(j).getPreferredWidth());
                tblTot.getColumnModel().getColumn(j).setResizable(tblTot.getColumnModel().getColumn(j).getResizable());
            }


            //Evitar que aparezca la barra de desplazamiento horizontal y vertical en el JTable de totales.
            spnDat.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
            tblTot.setTableHeader(null);

            //Adicionar el listener que controla el redimensionamiento de las columnas.
            ZafTblColModLis objTblColModLisCta=new ZafTblColModLis();
            tblDat.getColumnModel().addColumnModelListener(objTblColModLisCta);

            //Adicionar el listener que controla el desplazamiento del JTable de datos y totales.
            barDat=spnDat.getHorizontalScrollBar();
            barTot=spnTot.getHorizontalScrollBar();

            //PARA DESPLAZAMIENTOS DE CELDAS
            barDat.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
                public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                    barTot.setValue(evt.getValue());
                }
            });
            barTot.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
                public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                    barDat.setValue(evt.getValue());
                }
            });

            spnTot.setColumnHeader(null);


            //Configurar JTable: Ocultar columnas del sistema.
            objTblModTot.addSystemHiddenColumn(INT_TBL_DAT_COD_SIS, tblTot);
            objTblModTot.addSystemHiddenColumn(INT_TBL_DAT_NIV_CTA, tblTot);
            objTblModTot.addSystemHiddenColumn(INT_TBL_DAT_PAD_CTA, tblTot);
            objTblModTot.addSystemHiddenColumn(INT_TBL_DAT_TIP_CTA, tblTot);


            intNumColIniTot=objTblModTot.getColumnCount();

        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }





    /**
     * Esta funcián permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */


    
    private boolean cargarDetReg()
    {
        boolean blnRes=true;
        int intAni=0;
        int intMes=0;
        String strCamSel="";
        int intNumTotReg=0, i;
        String strFilItm="";
        strAux="";
        String strAuxSalCta="";
        int intNiv=0;
        int intQueExtIzq=0;
        int intQueExtDer=0;
        int intQueMed=0;
        int intQueEje=0;//si se ha ejecutado un query dentro del for
        try{
            if(con!=null){
                stm=con.createStatement();
                if(objParSis.getCodigoEmpresa()==objParSis.getCodigoEmpresaGrupo()){
                }
                else
                    strAuxSalCta+=" AND a2.nd_salCta<>0";

                intQueExtIzq++;

                for(int j=0; j<arlDatFec.size(); j++){
                    if( (intQueExtIzq==1) && (intQueEje==0) ) {//solo un mes
                        intQueExtIzq++;
                        intQueEje++;

                        if(arlDatFec.size()==2)
                            intQueExtDer++;
                        else if(arlDatFec.size()>2)
                            intQueMed++;


                        strAux+=" LEFT OUTER JOIN(";
                        //--extremo izquierdo tbm_detDia

                        strAux+=" SELECT c1.co_emp, c1.co_cta, c1.ne_niv, c1.ne_pad, c1.tx_codCta, c1.tx_desLar, c1.tx_tipCta";
                        strAux+=" ,sum(c1.nd_salMen) AS nd_salMen FROM(";



                        strAux+=" 	SELECT a1.co_emp, a4.co_cta, a4.ne_niv, a4.ne_pad, a4.tx_codCta, a4.tx_desLar, a4.tx_tipCta";
                        strAux+=" 	,sum(  (CASE WHEN a2.nd_mondeb IS NULL THEN 0 ELSE a2.nd_mondeb END)-(CASE WHEN a2.nd_monhab IS NULL THEN 0 ELSE a2.nd_monhab END) ) as nd_salMen";
                        strAux+=" 	FROM tbm_cabdia as a1 INNER JOIN tbm_detdia AS a2";
                        strAux+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipdoc=a2.co_tipdoc AND a1.co_dia=a2.co_dia";
                        strAux+=" 	INNER JOIN tbm_plaCta AS a4 ON a2.co_emp=a4.co_emp AND a2.co_cta=a4.co_cta";
                        strAux+=" 	where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strAux+="       AND (a1.fe_dia BETWEEN '" + objUti.getStringValueAt(arlDatFec, j, INT_ARL_FEC_DES) + "' AND '" + objUti.getStringValueAt(arlDatFec, j, INT_ARL_FEC_HAS) + "')";
                        strAux+=" 	AND a1.st_reg='A' AND a4.tx_tipCta='D'";
                        if (objParSis.getCodigoMenu()==2454){
                            //Balance General comparativo
                            strAux+=" AND a4.tx_niv1 IN ('1', '2', '3')";
                        }
                        else{
                            //Estado de Resultados comparativo
                            strAux+=" AND a4.tx_niv1 NOT IN ('1', '2', '3')";
                        }
                        strAux+=" 	GROUP BY a1.co_emp, a4.co_cta, a4.ne_niv, a4.ne_pad, a4.tx_codCta, a4.tx_desLar, a4.tx_tipCta";



                        strAux+=" 	UNION";
                        strAux+=" 	(";
                        strAux+=" 	 SELECT b1.co_emp, b1.co_cta, b1.ne_niv, b1.ne_pad, b1.tx_codCta, b1.tx_desLar, b1.tx_tipCta, SUM(b2.nd_salCta) AS nd_salCta FROM(";
                        strAux+=" 		SELECT a1.co_emp, a1.co_ctaRes AS co_cta, a2.ne_niv, a2.ne_pad, a2.tx_codCta, a2.tx_desLar, a2.tx_tipCta";
                        strAux+=" 		FROM tbm_emp AS a1 INNER JOIN tbm_plaCta AS a2";
                        strAux+=" 		ON a1.co_emp=a2.co_emp AND a1.co_ctaRes=a2.co_cta";
                        strAux+=" 		WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strAux+=" 		) AS b1";
                        strAux+=" 	 INNER JOIN(";
                        strAux+=" 		SELECT a1.co_emp, a4.co_cta, a4.ne_niv, a4.ne_pad, a4.tx_codCta, a4.tx_desLar";
                        strAux+=" 		,sum(  (CASE WHEN a2.nd_mondeb IS NULL THEN 0 ELSE a2.nd_mondeb END)-(CASE WHEN a2.nd_monhab IS NULL THEN 0 ELSE a2.nd_monhab END) ) as nd_salCta";
                        strAux+=" 		FROM tbm_cabdia as a1 INNER JOIN tbm_detdia AS a2";
                        strAux+=" 		ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipdoc=a2.co_tipdoc AND a1.co_dia=a2.co_dia";
                        strAux+=" 		INNER JOIN tbm_plaCta AS a4 ON a2.co_emp=a4.co_emp AND a2.co_cta=a4.co_cta";
                        strAux+=" 		where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strAux+="		AND a1.fe_dia BETWEEN '" + objUti.getStringValueAt(arlDatFec, j, INT_ARL_FEC_DES) + "' AND '" + objUti.getStringValueAt(arlDatFec, j, INT_ARL_FEC_HAS) + "'";
                        strAux+=" 		AND a1.st_reg='A' AND a4.tx_niv1 IN ('4', '5', '6', '7', '8') AND a4.tx_tipCta='D'";
                        strAux+=" 		GROUP BY a1.co_emp, a4.co_cta, a4.ne_niv, a4.ne_pad, a4.tx_codCta, a4.tx_desLar";
                        strAux+=" 		ORDER BY a4.tx_codCta";
                        strAux+=" 	) AS b2";
                        strAux+=" 	 ON b1.co_emp=b2.co_emp";
                        strAux+=" 	 GROUP BY b1.co_emp, b1.co_cta, b1.ne_niv, b1.ne_pad, b1.tx_codCta, b1.tx_desLar, b1.tx_tipCta";
                        strAux+=" 	)";

                        strAux+="                         ) AS c1";
                        strAux+=" GROUP BY c1.co_emp, c1.co_cta, c1.ne_niv, c1.ne_pad, c1.tx_codCta, c1.tx_desLar, c1.tx_tipCta";
                        strAux+=" order by c1.co_cta";


                        strAux+=" ) AS b" + (j+2) + "";
                        strAux+=" ON b1.co_emp=b" + (j+2) + ".co_emp AND b1.co_cta=b" + (j+2) + ".co_cta";
                        //FIN de un solo mes
                    }
                    if(  (intQueMed>0) && (intQueEje==0) ){// INICIO - si es mayor o igual a 3 meses
                        intQueEje++;
                        if((j+1)==(arlDatFec.size()-1)){
                            intQueExtDer++;
                            intQueMed=0;
                        }
                        else{
                            intQueMed++;
                        }

                        


                        //VALORES CENTRALES DE MI RANGO DE FECHAS SELECCIONADAS tbm_salCta (SIN EXTREMOS)
                        strAux+=" LEFT OUTER JOIN(";


                        strAux+=" SELECT c1.co_emp, c1.co_cta, c1.ne_niv, c1.ne_pad, c1.tx_codCta, c1.tx_desLar, c1.tx_tipCta";
                        strAux+=" ,sum(c1.nd_salMen) AS nd_salMen FROM(";


                        strAux+="	SELECT a1.co_emp, a1.co_cta, a1.ne_niv, a1.ne_pad, a1.tx_codCta, a1.tx_desLar, a1.tx_tipCta";
                        strAux+=" 	,a2.nd_salCta AS nd_salMen";
                        strAux+=" 	FROM tbm_plaCta AS a1 INNER JOIN tbm_salCta as a2";
                        strAux+=" 	ON a1.co_emp=a2.co_emp AND a1.co_cta=a2.co_cta";
                        strAux+=" 	WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strAux+=" 	AND a2.co_per>="  + objUti.getStringValueAt(arlDatFec, j, INT_ARL_FEC_DES) + " AND a2.co_per<=" + objUti.getStringValueAt(arlDatFec, j, INT_ARL_FEC_HAS) + "";
                        strAux+=" 	AND a1.ne_niv<=6";
                        if (objParSis.getCodigoMenu()==2454){
                            //Balance General comparativo
                            strAux+=" AND a1.tx_niv1 IN ('1', '2', '3')";
                        }
                        else{
                            //Estado de Resultados comparativo
                            strAux+=" AND a1.tx_niv1 NOT IN ('1', '2', '3')";
                        }
                        strAux+="                 AND a1.tx_tipCta='D'";




//
//                        strAux+="	UNION";
//                        strAux+=" (";
//                        strAux+=" 	  SELECT b1.co_emp, b1.co_cta, b1.ne_niv, b1.ne_pad, b1.tx_codCta, b1.tx_desLar, b1.tx_tipCta, SUM(b2.nd_salCta) AS nd_salCta FROM(";
//                        strAux+=" 		SELECT a1.co_emp, a1.co_ctaRes AS co_cta, a2.ne_niv, a2.ne_pad, a2.tx_codCta, a2.tx_desLar, a2.tx_tipCta";
//                        strAux+=" 		FROM tbm_emp AS a1 INNER JOIN tbm_plaCta AS a2";
//                        strAux+=" 		ON a1.co_emp=a2.co_emp AND a1.co_ctaRes=a2.co_cta";
//                        strAux+=" 		WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
//                        strAux+=" 		) AS b1";
//                        strAux+=" 	 INNER JOIN(";
//                        strAux+=" 		SELECT a4.co_emp, a4.co_cta, a4.ne_niv, a4.ne_pad, a4.tx_codCta, a4.tx_desLar";
//                        strAux+=" 		,sum( nd_salCta) as nd_salCta";
//                        strAux+=" 		FROM tbm_plaCta AS a4 ";
//                        strAux+=" 		INNER JOIN tbm_salCta AS a5";
//                        strAux+=" 		ON a4.co_emp=a5.co_emp AND a4.co_cta=a5.co_cta";
//                        strAux+=" 		where a4.co_emp=" + objParSis.getCodigoEmpresa() + "";
//                        strAux+=" 		AND a5.co_per>=" + objUti.getStringValueAt(arlDatFec, j, INT_ARL_FEC_DES) + " AND a5.co_per<=" + objUti.getStringValueAt(arlDatFec, j, INT_ARL_FEC_HAS) + "";
//                        strAux+=" 		AND a4.st_reg='A'";
//                        strAux+=" 		AND a4.tx_niv1 IN ('4', '5', '6', '7', '8')";
//                        strAux+=" 		AND a4.tx_tipCta='D'";
//                        strAux+=" 		GROUP BY a4.co_emp, a4.co_cta, a4.ne_niv, a4.ne_pad, a4.tx_codCta, a4.tx_desLar";
//                        strAux+=" 		ORDER BY a4.tx_codCta";
//                        strAux+=" 	) AS b2";
//                        strAux+=" 	 ON b1.co_emp=b2.co_emp";
//                        strAux+=" 	 GROUP BY b1.co_emp, b1.co_cta, b1.ne_niv, b1.ne_pad, b1.tx_codCta, b1.tx_desLar, b1.tx_tipCta";
//                        strAux+=" )";

                        strAux+="                         ) AS c1";
                        strAux+=" GROUP BY c1.co_emp, c1.co_cta, c1.ne_niv, c1.ne_pad, c1.tx_codCta, c1.tx_desLar, c1.tx_tipCta";
                        strAux+=" order by c1.co_cta";
                        


                        strAux+=" ) AS b" + (j+2) + "";
                        strAux+=" ON b1.co_emp=b" + (j+2) + ".co_emp AND b1.co_cta=b" + (j+2) + ".co_cta";
                        //FIN - si es mayor a 3 meses
                    }
                    if( (intQueExtDer==1) && (intQueEje==0)){//INICIO -si son dos meses
                        intQueExtDer++;
                        intQueEje++;
                                if(arlDatFec.size()>2){
                                    intQueMed++;
                                }
                        //extremo derecho tbm_detDia
                        strAux+=" LEFT OUTER JOIN(";

                        strAux+=" SELECT c1.co_emp, c1.co_cta, c1.ne_niv, c1.ne_pad, c1.tx_codCta, c1.tx_desLar, c1.tx_tipCta";
                        strAux+=" ,sum(c1.nd_salMen) AS nd_salMen FROM(";

                        strAux+=" 	SELECT a1.co_emp, a4.co_cta, a4.ne_niv, a4.ne_pad, a4.tx_codCta, a4.tx_desLar, a4.tx_tipCta";
                        strAux+=" 	,sum(  (CASE WHEN a2.nd_mondeb IS NULL THEN 0 ELSE a2.nd_mondeb END)-(CASE WHEN a2.nd_monhab IS NULL THEN 0 ELSE a2.nd_monhab END) ) as nd_salMen";
                        strAux+=" 	FROM tbm_cabdia as a1 INNER JOIN tbm_detdia AS a2";
                        strAux+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipdoc=a2.co_tipdoc AND a1.co_dia=a2.co_dia";
                        strAux+=" 	INNER JOIN tbm_plaCta AS a4 ON a2.co_emp=a4.co_emp AND a2.co_cta=a4.co_cta";
                        strAux+=" 	where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strAux+="	AND (a1.fe_dia BETWEEN '" + objUti.getStringValueAt(arlDatFec, j, INT_ARL_FEC_DES) + "' AND '" + objUti.getStringValueAt(arlDatFec, j, INT_ARL_FEC_HAS) + "')";
                        strAux+=" 	and a1.st_reg='A' AND a4.tx_tipCta='D'";
                        if (objParSis.getCodigoMenu()==2454){
                            //Balance General comparativo
                            strAux+=" AND a4.tx_niv1 IN ('1', '2', '3')";
                        }
                        else{
                            //Estado de Resultados comparativo
                            strAux+=" AND a4.tx_niv1 NOT IN ('1', '2', '3')";
                        }
                        strAux+=" 	GROUP BY a1.co_emp, a4.co_cta, a4.ne_niv, a4.ne_pad, a4.tx_codCta, a4.tx_desLar, a4.tx_tipCta";
                        //strAux+=" 	ORDER BY co_emp, co_cta, ne_niv, ne_pad, tx_codCta, tx_desLar, tx_tipCta";


                        strAux+=" 	UNION";
                        strAux+=" 	(";
                        strAux+=" 	 SELECT b1.co_emp, b1.co_cta, b1.ne_niv, b1.ne_pad, b1.tx_codCta, b1.tx_desLar, b1.tx_tipCta, SUM(b2.nd_salCta) AS nd_salCta FROM(";
                        strAux+=" 		SELECT a1.co_emp, a1.co_ctaRes AS co_cta, a2.ne_niv, a2.ne_pad, a2.tx_codCta, a2.tx_desLar, a2.tx_tipCta";
                        strAux+=" 		FROM tbm_emp AS a1 INNER JOIN tbm_plaCta AS a2";
                        strAux+=" 		ON a1.co_emp=a2.co_emp AND a1.co_ctaRes=a2.co_cta";
                        strAux+=" 		WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strAux+=" 		) AS b1";
                        strAux+=" 	 INNER JOIN(";
                        strAux+=" 		SELECT a1.co_emp, a4.co_cta, a4.ne_niv, a4.ne_pad, a4.tx_codCta, a4.tx_desLar";
                        strAux+=" 		,sum(  (CASE WHEN a2.nd_mondeb IS NULL THEN 0 ELSE a2.nd_mondeb END)-(CASE WHEN a2.nd_monhab IS NULL THEN 0 ELSE a2.nd_monhab END) ) as nd_salCta";
                        strAux+=" 		FROM tbm_cabdia as a1 INNER JOIN tbm_detdia AS a2";
                        strAux+=" 		ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipdoc=a2.co_tipdoc AND a1.co_dia=a2.co_dia";
                        strAux+=" 		INNER JOIN tbm_plaCta AS a4 ON a2.co_emp=a4.co_emp AND a2.co_cta=a4.co_cta";
                        strAux+=" 		where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strAux+="		AND a1.fe_dia BETWEEN '" + objUti.getStringValueAt(arlDatFec, j, INT_ARL_FEC_DES) + "' AND '" + objUti.getStringValueAt(arlDatFec, j, INT_ARL_FEC_HAS) + "'";
                        strAux+=" 		AND a1.st_reg='A' AND a4.tx_niv1 IN ('4', '5', '6', '7', '8') AND a4.tx_tipCta='D'";
                        strAux+=" 		GROUP BY a1.co_emp, a4.co_cta, a4.ne_niv, a4.ne_pad, a4.tx_codCta, a4.tx_desLar";
                        strAux+=" 		ORDER BY a4.tx_codCta";
                        strAux+=" 	) AS b2";
                        strAux+=" 	 ON b1.co_emp=b2.co_emp";
                        strAux+=" 	 GROUP BY b1.co_emp, b1.co_cta, b1.ne_niv, b1.ne_pad, b1.tx_codCta, b1.tx_desLar, b1.tx_tipCta";
                        strAux+=" 	)";



                        strAux+="                         ) AS c1";
                        strAux+=" GROUP BY c1.co_emp, c1.co_cta, c1.ne_niv, c1.ne_pad, c1.tx_codCta, c1.tx_desLar, c1.tx_tipCta";
                        strAux+=" order by c1.co_cta";






                        strAux+=" ) AS b" + (j+2) + "";
                        strAux+=" ON b1.co_emp=b" + (j+2) + ".co_emp AND b1.co_cta=b" + (j+2) + ".co_cta";
                        //FIN -si son dos meses
                    }
                    strCamSel+=" , SUM(b" + (j+2) + ".nd_salMen) AS " + "b" + (j+2) + "_nd_salMen" ;
                    intQueEje=0;
                }
                


                strSQL="";
                strSQL+=" SELECT b1.co_emp, b1.co_cta, b1.ne_niv, b1.ne_pad, b1.tx_codCta, b1.tx_desLar, b1.tx_tipCta";
                strSQL+=" " + strCamSel + "";
                strSQL+=" 	FROM(";
                strSQL+=" 	SELECT a1.co_emp, a1.co_cta, a1.ne_niv, a1.ne_pad, a1.tx_codCta, a1.tx_desLar, a1.tx_tipCta";
                strSQL+=" 	FROM tbm_plaCta AS a1 WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + " AND a1.st_reg='A'";

                if (objParSis.getCodigoMenu()==2454){
                    //Balance General comparativo
                    strSQL+=" AND a1.tx_niv1 IN ('1', '2', '3')";
                }
                else{
                    //Estado de Resultados comparativo
                    strSQL+=" AND a1.tx_niv1 NOT IN ('1', '2', '3')";
                }

                strSQL+=" ) AS b1";

                strSQL+=strAux;

                strSQL+=" GROUP BY b1.co_emp, b1.co_cta, b1.ne_niv, b1.ne_pad, b1.tx_codCta, b1.tx_desLar, b1.tx_tipCta";
                strSQL+=" ORDER BY b1.co_emp, b1.tx_codCta";
                rst=stm.executeQuery(strSQL);
                vecDat.clear();
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;

                
                while(rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,"");
                        vecReg.add(INT_TBL_DAT_COD_SIS, "" + rst.getString("co_cta"));
                        intNiv=rst.getInt("ne_niv");
                        vecReg.add(INT_TBL_DAT_NIV_CTA, "" + intNiv);
                        vecReg.add(INT_TBL_DAT_PAD_CTA, "" + rst.getObject("ne_pad")==null?"0":rst.getString("ne_pad"));
                        vecReg.add(INT_TBL_DAT_COD_CTA, "" + rst.getString("tx_codCta"));

                        strAux="";
                        for (int j=1; j<intNiv; j++)
                            strAux+="        ";
                        vecReg.add(INT_TBL_DAT_NOM_CTA, strAux + rst.getString("tx_desLar"));
                        vecReg.add(INT_TBL_DAT_TIP_CTA, "" + rst.getString("tx_tipCta"));

                        //adicionar las columnas 
                        for(int j=intNumColIni; j<intNumColFin;j++){
                            vecReg.add(j, "");
                        }

                        for(int j=intNumColIni; j<(intNumColFin-1);j++){
                            vecReg.setElementAt((rst.getObject(j+1)==null?"0":rst.getString(j+1)),     j);
                        }


                        vecDat.add(vecReg);
                        i++;
                        pgrSis.setValue(i);
//                        lblMsgSis.setText("Se encontraron " + rst.getRow() + " registros.");
                    }
                    else{
                        break;
                    }
                }
                lblMsgSis.setText("Se encontraron " + rst.getRow() + " registros.");
                rst.close();
                stm.close();
                rst=null;
                stm=null;

                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);

                tblDat.setModel(objTblMod);
                vecDat.clear();
                

                pgrSis.setValue(0);
                butCon.setText("Consultar");

                if(generaSaldosCuentasPadres()){

                }
                if(chkSalCer.isSelected()){
                    if(sumarSaldosMensuales()){
                        quitarCtasSaldoCero();
                    }
                }


            }
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }







    /**
     * Esta funcián muestra un mensaje informativo al usuario. Se podráa utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Esta funcián muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si y No. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    /**
     * Esta funcián muestra un mensaje de error al usuario. Se podráa utilizar
     * para mostrar al usuario un mensaje que indique que los datos no se grabaron
     * y que debe comunicar de este particular al administrador del sistema.
     */
    private void mostrarMsgErr(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podráa presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaráa informado en todo
     * momento de lo que ocurre. Si se desea hacer ásto es necesario utilizar ásta clase
     * ya que si no sálo se apreciaráa los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sálo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }



    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            objTblModTot.removeAllRows();
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                if(configurarColumnasAdicionar()){
                    if(cargarDetReg()){
                        if(quitarNiveles()){
                            if(obtenerDiferencias()){
                                lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");
                            }
                        }
                    }
                }
                con.close();
                con=null;
            }
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }







    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_LIN:
                    strMsg="";
                    break;
                case INT_TBL_DAT_COD_SIS:
                    strMsg="Código del Sistema";
                    break;
                case INT_TBL_DAT_NIV_CTA:
                    strMsg="Nivel de la cuenta";
                    break;
                case INT_TBL_DAT_PAD_CTA:
                    strMsg="Cuenta padre";
                    break;
                case INT_TBL_DAT_COD_CTA:
                    strMsg="Código de la cuenta";
                    break;
                case INT_TBL_DAT_NOM_CTA:
                    strMsg="Nombre de la cuenta";
                    break;
                default:
                    strMsg=null;
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
 
    

    public boolean imprimir() {
        boolean blnRes=true;
        return blnRes;
     }       

    
   

    private String getFechaInicioMesCorte(String fechaCorte){
        String strFecIniMesCor="";

        try{
            java.util.Calendar cal=java.util.Calendar.getInstance();
            cal.setTime(objUti.parseDate(fechaCorte,"yyyy-MM-dd"));

            cal.set(java.util.Calendar.DATE, cal.getActualMinimum(cal.DAY_OF_MONTH)    );
            strFecIniMesCor=objUti.formatearFecha(cal.getTime(), "yyyy-MM-dd");

        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return strFecIniMesCor;

    }

    private String getFechaFinalMesCorte(String fechaCorte){
        String strFecIniMesCor="";

        try{
            java.util.Calendar cal=java.util.Calendar.getInstance();
            cal.setTime(objUti.parseDate(fechaCorte,"yyyy-MM-dd"));

            cal.set(java.util.Calendar.DATE, cal.getActualMaximum(cal.DAY_OF_MONTH)    );
            strFecIniMesCor=objUti.formatearFecha(cal.getTime(), "yyyy-MM-dd");

        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return strFecIniMesCor;
    }


    private boolean generaSaldosCuentasPadres(){
        boolean blnRes=true;
        String strLin="";
        //VARIABLES PARA EL DETALLE(O SEA QUIENES SE VAN A IR SUMANDO)
        int intCodCtaPadDetIni=-1;
        int intCodCtaPadDetFin=-1;
        BigDecimal bdeValMen=new BigDecimal("0");
        BigDecimal bdeSumMen=new BigDecimal("0");

        //VARIABLES DE CABECERA(O SEA DE LA CUENTA DONDE SE VA A COLOCAR LO QUE SE SUMO EN LAS DE DETALLE)
        int intCodCtaCab=-1;
        int intPriNiv=0;//captura cual es el primer nivel(este nivel es el q se busca.
        int intNivCta=0;//contiene la cuenta padre que es la q se buscara para ir sumando.

        int intNumColTot=(tblDat.getColumnCount()-1);//porq se quita la columna de suma de saldos mensuales

        try{
            for(int p=6;p>0;p--){
                for (int j=intNumColIni; j<intNumColTot; j++){
                    for(int i=(objTblMod.getRowCountTrue()-1); i>=0; i--){
                        intNivCta=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_NIV_CTA)==null?"0":objTblMod.getValueAt(i, INT_TBL_DAT_NIV_CTA).toString());
                        if(intNivCta==p){
                            if(intPriNiv==0){
                                intCodCtaPadDetIni=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_PAD_CTA)==null?"0":objTblMod.getValueAt(i, INT_TBL_DAT_PAD_CTA).toString());
                                intPriNiv++;
                            }
                            intCodCtaPadDetFin=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_PAD_CTA)==null?"0":objTblMod.getValueAt(i, INT_TBL_DAT_PAD_CTA).toString());

                            if(i>0){
                                intCodCtaCab=Integer.parseInt(objTblMod.getValueAt((i-1), INT_TBL_DAT_COD_SIS)==null?"0":objTblMod.getValueAt((i-1), INT_TBL_DAT_COD_SIS).toString());
                            }
                            else{
                                intCodCtaCab=Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_COD_SIS)==null?"0":objTblMod.getValueAt(i, INT_TBL_DAT_COD_SIS).toString());
                            }

                            if(intCodCtaPadDetIni==intCodCtaCab){
                                bdeValMen=new BigDecimal(objTblMod.getValueAt(i, j)==null?"0":objTblMod.getValueAt(i, j).toString());
                                bdeSumMen=bdeSumMen.add(bdeValMen);
                                objTblMod.setValueAt(bdeSumMen, (i-1), j);
                                intPriNiv=0;
                                bdeSumMen=new BigDecimal("0");
                            }
                            else{
                                if(intCodCtaPadDetIni==intCodCtaPadDetFin){
                                    bdeValMen=new BigDecimal(objTblMod.getValueAt(i, j)==null?"0":objTblMod.getValueAt(i, j).toString());
                                    bdeSumMen=bdeSumMen.add(bdeValMen);
                                }
                            }
                        }


                    }
                }
            }


        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }





    private boolean quitarCtasSaldoCero(){
        boolean blnRes=true;
        BigDecimal bdeSumAcu=new BigDecimal("0");
        BigDecimal bdeValCer=new BigDecimal("0");
        try{
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            for(int i=(objTblMod.getRowCountTrue()-1);i>=0;i--){
                bdeSumAcu=new BigDecimal(objTblMod.getValueAt(i, (objTblMod.getColumnCount()-1))==null?"0":objTblMod.getValueAt(i, (objTblMod.getColumnCount()-1)).toString());
                if((bdeSumAcu.compareTo(bdeValCer)==0) ){
                    objTblMod.removeRow(i);
                }
            }
            objTblMod.setModoOperacion(objTblMod.INT_TBL_NO_EDI);
            objTblMod.removeEmptyRows();
            lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");

        }catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;

    }



   private boolean configurarColumnasAdicionar(){
       boolean blnRes=true;
       try{
           if(con!=null){
               if(eliminaColumnasAdicionadas()){
                   if(eliminaTodasColumnasAdicionadasTotales()){
                       if(obtieneColumnasAdicionar()){
                           if(obtieneFechasQuery()){
                               if(agregarColumnasAdicionadas()){
                                   if(agregarColumnasAdicionadasTotales()){
                                   }
                               }
                           }

                       }
                   }
               }
           }
       }
       catch(Exception e){
           objUti.mostrarMsgErr_F1(this, e);
           blnRes=false;
       }
       return blnRes;
   }


   private boolean eliminaColumnasAdicionadas(){
        boolean blnRes=true;
        int intNumColTot=tblDat.getColumnCount();//obtiene el numero total de columnas en ese momento
        try{
            for (int i=(intNumColTot-1); i>=intNumColIni; i--){
                objTblMod.removeColumn(tblDat, i);
            }
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }


   private boolean eliminaTodasColumnasAdicionadasTotales(){
        boolean blnRes=true;
        int intNumColTot=tblTot.getColumnCount();
        try{
            for (int i=(intNumColTot-1); i>=intNumColIniTot; i--){
                objTblModTot.removeColumn(tblTot, i);
            }
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }






    private boolean agregarColumnasAdicionadas(){
        boolean blnRes=true;
        strAux="";
        javax.swing.table.TableColumn tbc;
        ZafTblHeaGrp objTblHeaGrp=(ZafTblHeaGrp)tblDat.getTableHeader();
        objTblHeaGrp.setHeight(16*3);
        ZafTblHeaColGrp objTblHeaColGrp=null;
        intNumColAdi=strFecRan.length;
        String strAni="", strMes="";
        javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
        try{
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            for (int i=0; i<arlDat.size(); i++){
                tbc=new javax.swing.table.TableColumn(intNumColIni+i);
                tbc.setHeaderValue("" + objUti.getStringValueAt(arlDat, i, INT_ARL_MES_LET));

                //Configurar JTable: Establecer el ancho de la columna.
                tbc.setPreferredWidth(80);
                //Configurar JTable: Renderizar celdas.
                tbc.setCellRenderer(objTblCelRenLbl);
                //Configurar JTable: Agregar la columna al JTable.
                objTblMod.addColumn(tblDat, tbc);

                if (!strAni.equals(objUti.getStringValueAt(arlDat, i, INT_ARL_ANI).toString())){
                    objTblHeaColGrp=new ZafTblHeaColGrp("" + objUti.getStringValueAt(arlDat, i, INT_ARL_ANI));
                    objTblHeaColGrp.setHeight(16);
                    strAni=objUti.getStringValueAt(arlDat, i, INT_ARL_ANI).toString();
                }
                objTblHeaColGrp.add(tbc);

                objTblHeaGrp.addColumnGroup(objTblHeaColGrp);

            }

            tbc=new javax.swing.table.TableColumn(intNumColIni+arlDat.size());
            tbc.setHeaderValue("<> CERO la fila se presenta");

            //Configurar JTable: Establecer el ancho de la columna.
            tbc.setPreferredWidth(80);
            //Configurar JTable: Renderizar celdas.
            tbc.setCellRenderer(objTblCelRenLbl);
            //Configurar JTable: Agregar la columna al JTable.
            objTblMod.addColumn(tblDat, tbc);

            intNumColFin=objTblMod.getColumnCount();

            objTblCelRenLbl=null;

            tblDat.getColumnModel().getColumn((intNumColIni+arlDat.size())).setWidth(0);
            tblDat.getColumnModel().getColumn((intNumColIni+arlDat.size())).setMaxWidth(0);
            tblDat.getColumnModel().getColumn((intNumColIni+arlDat.size())).setMinWidth(0);
            tblDat.getColumnModel().getColumn((intNumColIni+arlDat.size())).setPreferredWidth(0);
            tblDat.getColumnModel().getColumn((intNumColIni+arlDat.size())).setResizable(false);



        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }

        return blnRes;
    }


   private boolean agregarColumnasAdicionadasTotales(){//para las columnas que van despues de las columnas chk de bancos
        boolean blnRes=true;
        javax.swing.table.TableColumn tbcTot;
        try{
            objTblCelRenLblTot=new ZafTblCelRenLbl();
            objTblCelRenLblTot.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLblTot.setTipoFormato(objTblCelRenLblTot.INT_FOR_NUM);
            objTblCelRenLblTot.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);

            for (int i=0; i<=arlDat.size(); i++){
                tbcTot=new javax.swing.table.TableColumn(intNumColIniTot+i);
                tbcTot.setHeaderValue(" ");
                //Configurar JTable: Establecer el ancho de la columna.
                tbcTot.setPreferredWidth(80);
                //Configurar JTable: Renderizar celdas.
                tbcTot.setCellRenderer(objTblCelRenLblTot);
                //Configurar JTable: Agregar la columna al JTable.
                objTblModTot.addColumn(tblTot, tbcTot);
            }

            tblTot.getColumnModel().getColumn((intNumColIni+arlDat.size())).setWidth(0);
            tblTot.getColumnModel().getColumn((intNumColIni+arlDat.size())).setMaxWidth(0);
            tblTot.getColumnModel().getColumn((intNumColIni+arlDat.size())).setMinWidth(0);
            tblTot.getColumnModel().getColumn((intNumColIni+arlDat.size())).setPreferredWidth(0);
            tblTot.getColumnModel().getColumn((intNumColIni+arlDat.size())).setResizable(false);



        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }

        return blnRes;
    }



    private boolean obtieneColumnasAdicionar(){
        boolean blnRes=true;
        try{
        arlDat.clear();
        String strMesLet="";

        switch (objSelFec.getTipoSeleccion()){
            case 0: //Básqueda por rangos
                strFecDes=objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos());
                strFecHas=objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos());
                break;
            case 1: //Fechas menores o iguales que "Hasta".
                //strFecDes="1999-01-01";
                strFecDes="" + obtieneFechaDesde();
                strFecHas=objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos());
                break;
            case 2: //Fechas mayores o iguales que "Desde".
                strFecDes=objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos());
                //strFecHas="2010-03-29";//aqui debe ir la fecha del dia de hoy obtieneFechaHasta
                strFecHas="" + obtieneFechaHasta();
                break;
            case 3: //Todo.
                break;
        }

        strFecRan=objUti.getIntervalosMensualesRangoFechas(strFecDes, strFecHas, "yyyy-MM-dd");

        for (int i=0; i<strFecRan.length; i++){
            arlReg=new ArrayList();
            arlReg.add(INT_ARL_ANI,     "" + objUti.getAnio(strFecRan[i][0],"yyyy/MM/dd") );
            arlReg.add(INT_ARL_MES_NUM, "" + (objUti.getMes(strFecRan[i][0],"yyyy/MM/dd") + 1));
            switch( (objUti.getMes(strFecRan[i][0],"yyyy/MM/dd") + 1) ){
                case 1:                    strMesLet="Enero";                   break;
                case 2:                    strMesLet="Febrero";                 break;
                case 3:                    strMesLet="Marzo";                   break;
                case 4:                    strMesLet="Abril";                   break;
                case 5:                    strMesLet="Mayo";                    break;
                case 6:                    strMesLet="Junio";                   break;
                case 7:                    strMesLet="Julio";                   break;
                case 8:                    strMesLet="Agosto";                  break;
                case 9:                    strMesLet="Septiembre";              break;
                case 10:                   strMesLet="Octubre";                 break;
                case 11:                   strMesLet="Noviembre";               break;
                case 12:                   strMesLet="Diciembre";               break;

            }
            arlReg.add(INT_ARL_MES_LET, "" +  strMesLet);
            arlDat.add(arlReg);
        }

        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    private boolean obtieneFechasQuery(){
        boolean blnRes=true;
        arlDatFec.clear();
        String strFecCen="";

        try{
            if(strFecRan.length==1){//es solo un mes
                arlRegFec=new ArrayList();
                arlRegFec.add(INT_ARL_FEC_DES, "" + objUti.formatearFecha(strFecDes, "yyyy-MM-dd", objParSis.getFormatoFechaBaseDatos()) );
                arlRegFec.add(INT_ARL_FEC_HAS, "" + objUti.formatearFecha(strFecHas, "yyyy-MM-dd", objParSis.getFormatoFechaBaseDatos()) );
                arlDatFec.add(arlRegFec);
            }

            if(strFecRan.length==2){//dos meses. Ejm: 2009-04-25 al 2009-05-15   -> 2009-04-25 al 2009-04-30  y 2009-05-01 al 2009-05-15
                //2009-04-25 al 2009-04-30
                arlRegFec=new ArrayList();
                arlRegFec.add(INT_ARL_FEC_DES, "" + objUti.formatearFecha(strFecDes, "yyyy-MM-dd", objParSis.getFormatoFechaBaseDatos()) );
                arlRegFec.add(INT_ARL_FEC_HAS, "" + objUti.formatearFecha(getFechaFinalMesCorte(strFecDes),"yyyy-MM-dd",objParSis.getFormatoFechaBaseDatos())   );
                arlDatFec.add(arlRegFec);

                //2009-05-01 al 2009-05-15
                arlRegFec=new ArrayList();
                arlRegFec.add(INT_ARL_FEC_DES, "" + objUti.formatearFecha(getFechaInicioMesCorte(strFecHas),"yyyy-MM-dd",objParSis.getFormatoFechaBaseDatos())  );
                arlRegFec.add(INT_ARL_FEC_HAS, "" + objUti.formatearFecha(strFecHas,"yyyy-MM-dd",objParSis.getFormatoFechaBaseDatos())  );
                arlDatFec.add(arlRegFec);
            }
            if(strFecRan.length>2){//tres meses o mas
                //Ejm: 2009-04-25 al 2009-06-15   -> 2009-04-25 al 2009-04-30  y 2009-05-01 al 2009-05-31 y 2009-06-01 al 2009-06-15
                for (int i=0; i<strFecRan.length; i++){
                    if(i==0){
                        arlRegFec=new ArrayList();
                        arlRegFec.add(INT_ARL_FEC_DES, "" + objUti.formatearFecha(strFecDes, "yyyy-MM-dd", objParSis.getFormatoFechaBaseDatos()) );
                        arlRegFec.add(INT_ARL_FEC_HAS, "" + objUti.formatearFecha(getFechaFinalMesCorte(strFecDes),"yyyy-MM-dd",objParSis.getFormatoFechaBaseDatos())   );
                        arlDatFec.add(arlRegFec);
                    }
                    else if(i==(strFecRan.length-1)){
                        arlRegFec=new ArrayList();
                        arlRegFec.add(INT_ARL_FEC_DES, "" + objUti.formatearFecha(getFechaInicioMesCorte(strFecHas),"yyyy-MM-dd",objParSis.getFormatoFechaBaseDatos())  );
                        arlRegFec.add(INT_ARL_FEC_HAS, "" + objUti.formatearFecha(strFecHas,"yyyy-MM-dd",objParSis.getFormatoFechaBaseDatos())  );
                        arlDatFec.add(arlRegFec);
                    }
                    else{
                       strFecCen="" + objUti.getAnio(strFecRan[i][0],"yyyy/MM/dd") + "" + (   (objUti.getMes(strFecRan[i][0],"yyyy/MM/dd") + 1)<10?"0" + (objUti.getMes(strFecRan[i][0],"yyyy/MM/dd") + 1):"" + (objUti.getMes(strFecRan[i][0],"yyyy/MM/dd") + 1)     );
                        arlRegFec=new ArrayList();
                        arlRegFec.add(INT_ARL_FEC_DES, "" + strFecCen  );
                        arlRegFec.add(INT_ARL_FEC_HAS, "" + strFecCen  );
                        arlDatFec.add(arlRegFec);
                    }
                }
            }
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

/*
 * en realidad no saca el saldo, sino q determina si la fila se presenta o no,
 para sacar el saldo quitar el abs() de la asignacion a la variable "bdeValMes"
 * */
    private boolean sumarSaldosMensuales(){
        boolean blnRes=true;
        BigDecimal bdeSumAcu=new BigDecimal("0");
        BigDecimal bdeValMes=new BigDecimal("0");
        int intNumColTot=(tblDat.getColumnCount()-1);//obtiene el numero total de columnas menos la de suma de saldos mensuales
        try{
            for(int i=0; i<objTblMod.getRowCountTrue(); i++){
                for (int j=intNumColIni; j<intNumColTot; j++){
                    bdeValMes=new BigDecimal(objTblMod.getValueAt(i, j)==null?"0":(objTblMod.getValueAt(i, j).toString().equals("")?"0":objTblMod.getValueAt(i, j).toString())  );
                    bdeSumAcu=bdeSumAcu.add(bdeValMes.abs());
                }
                objTblMod.setValueAt(bdeSumAcu, i, (objTblMod.getColumnCount()-1));
                bdeSumAcu=new BigDecimal("0");
            }
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private String obtieneFechaDesde(){
        String strFecDes="";
        Connection conFecDes;
        Statement stmFecDes;
        ResultSet rstFecDes;
        try{
            conFecDes=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conFecDes!=null){
                stmFecDes=conFecDes.createStatement();
                strSQL="select min(fe_dia) as fe_des from tbm_cabdia where co_emp=" + objParSis.getCodigoEmpresa() + "";
                rstFecDes=stmFecDes.executeQuery(strSQL);
                if(rstFecDes.next()){
                    strFecDes=rstFecDes.getString("fe_des");
                }

                rstFecDes.close();
                rstFecDes=null;
                stmFecDes.close();
                stmFecDes=null;
                conFecDes.close();
                conFecDes=null;
            }
            

        }
        catch(Exception e){
            strFecDes="";
            objUti.mostrarMsgErr_F1(this, e);
        }
        return strFecDes;
    }

    private String obtieneFechaHasta(){
        String strFecHast="";
        Connection conFecDes;
        Statement stmFecDes;
        ResultSet rstFecDes;
        try{
            conFecDes=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conFecDes!=null){
                stmFecDes=conFecDes.createStatement();
                strSQL="select max(fe_dia) as fe_has from tbm_cabdia where co_emp=" + objParSis.getCodigoEmpresa() + "";
                rstFecDes=stmFecDes.executeQuery(strSQL);
                if(rstFecDes.next()){
                    strFecHast=rstFecDes.getString("fe_has");
                }

                rstFecDes.close();
                rstFecDes=null;
                stmFecDes.close();
                stmFecDes=null;
                conFecDes.close();
                conFecDes=null;
            }


        }
        catch(Exception e){
            strFecHast="";
            objUti.mostrarMsgErr_F1(this, e);
        }
        return strFecHast;
    }

    private boolean quitarNiveles(){
        boolean blnRes=true;
        int intNiv=-1;
        int intNivSel=(cboNiv.getSelectedIndex()+1);
        try{
            objTblMod.setModoOperacion(objTblMod.INT_TBL_INS);
            for(int i=(objTblMod.getRowCountTrue()-1); i>=0; i--){
                intNiv=objTblMod.getValueAt(i, INT_TBL_DAT_NIV_CTA)==null?0:Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_NIV_CTA).toString());
                if(intNiv>intNivSel){
                    objTblMod.removeRow(i);
                }
            }
            objTblMod.setModoOperacion(objTblMod.INT_TBL_NO_EDI);
            objTblMod.removeEmptyRows();
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private class ZafTblColModLis implements javax.swing.event.TableColumnModelListener{
        public void columnAdded(javax.swing.event.TableColumnModelEvent e){
        }

        public void columnMarginChanged(javax.swing.event.ChangeEvent e){
            int intColSel, intAncCol;
            //PARA CUENTAS
            if (tblDat.getTableHeader().getResizingColumn()!=null){
                intColSel=tblDat.getTableHeader().getResizingColumn().getModelIndex();
                if (intColSel>=0){
                    intAncCol=tblDat.getColumnModel().getColumn(intColSel).getPreferredWidth();
                    tblTot.getColumnModel().getColumn(intColSel).setPreferredWidth(intAncCol);
                }
            }
        }

        public void columnMoved(javax.swing.event.TableColumnModelEvent e){
        }

        public void columnRemoved(javax.swing.event.TableColumnModelEvent e){
        }

        public void columnSelectionChanged(javax.swing.event.ListSelectionEvent e){
        }
    }



    private boolean obtenerDiferencias(){
        boolean blnRes=true;
        int intNivUno=-1;
        BigDecimal bdeDif=new BigDecimal("0");
        BigDecimal bdeVal=new BigDecimal("0");
        int intCnt=0;
        int intNumNivSum=0;//numero de niveles que se deben sumar(3 para BG y 5 para ER)
        try{
            objTblModTot.insertRow();
            if(objParSis.getCodigoMenu()==2454){
                objTblModTot.setValueAt("Diferencias: ", 0, INT_TBL_DAT_NOM_CTA);
                intNumNivSum=3;
            }
            else{
                objTblModTot.setValueAt("Utilidad/Pérdida: ", 0, INT_TBL_DAT_NOM_CTA);
                intNumNivSum=5;
            }

            for (int j=(intNumColIni); j<(intNumColIni + arlDat.size()); j++){
                bdeVal=new BigDecimal("0");
                bdeDif=new BigDecimal("0");
                for(int i=0;i<objTblMod.getRowCountTrue(); i++){
                    intNivUno=objTblMod.getValueAt(i, INT_TBL_DAT_NIV_CTA)==null?0:Integer.parseInt(objTblMod.getValueAt(i, INT_TBL_DAT_NIV_CTA).toString());
                    if(intNivUno==1){
                        intCnt++;
                        bdeVal=new BigDecimal(objTblMod.getValueAt(i, j)==null?"0":(objTblMod.getValueAt(i, j).equals("")?"0":objTblMod.getValueAt(i, j).toString())      );
                        bdeDif=bdeDif.add(bdeVal);
                        if(intCnt==intNumNivSum)
                            break;
                    }
                }
                objTblModTot.setValueAt(bdeDif, 0, j);
            }
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    
}