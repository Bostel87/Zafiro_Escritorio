/*
 * ZafCon03.java
 *
 * Created on 24 de enero de 2006, 11:06
 */

package Contabilidad.ZafCon29;

import Librerias.ZafUtil.ZafUtil;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import java.sql.*;
import Librerias.ZafVenCon.ZafVenCon;
import java.util.ArrayList;
import Librerias.ZafSelFec.ZafSelFec;
import java.math.BigDecimal;
import Librerias.ZafTblUti.ZafTblTot.ZafTblTot;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
/**
 * @author  ilino
 */
public class ZafCon29 extends javax.swing.JInternalFrame {
     Librerias.ZafUtil.ZafUtil objUti;
     Librerias.ZafParSis.ZafParSis objParSis;
     Vector vecDat, vecCab, vecReg;
     ZafTblMod objTblMod, objTblModTot;
     ZafColNumerada objColNum;
     ZafTblPopMnu objTblPopMnu;
     private ZafTblBus objTblBus;
     private ZafTblCelRenLbl objTblCelRenLbl;            //Render: Presentar JLabel en JTable.
     
     private String strSQL,strAux;
     private ZafMouMotAda objMouMotAda;                  //ToolTipText en TableHeader.
     private ZafVenCon vcoCli;                           //Ventana de consulta "Proveedor".
    
    final int INT_TBL_DAT_LIN=0;
    final int INT_TBL_DAT_COD_EMP=1;
    final int INT_TBL_DAT_COD_LOC=2;
    final int INT_TBL_DAT_COD_TIP_DOC=3;//PARA DESCRIPCION
    final int INT_TBL_DAT_COD_DOC=4;
    final int INT_TBL_DAT_RUC=5;
    final int INT_TBL_DAT_COD_CLI=6;
    final int INT_TBL_DAT_NOM_CLI=7;
    final int INT_TBL_DAT_DES_COR_TIP_DOC=8;
    final int INT_TBL_DAT_NUM_DOC=9;
    final int INT_TBL_DAT_FEC_DOC=10;
    final int INT_TBL_DAT_VAL_SUB=11;
    final int INT_TBL_DAT_VAL_IVA=12;
    final int INT_TBL_DAT_VAL_TOT=13;
    final int INT_TBL_DAT_NUM_DOC_FAC_PRV=14;
    final int INT_TBL_DAT_FEC_DOC_FAC_PRV=15;
    final int INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV=16;
    final int INT_TBL_DAT_NUM_SER_DOC_FAC_PRV=17;
    final int INT_TBL_DAT_FEC_CAD_FAC_PRV=18;
    

    private String strCodPrv, strDesLarPrv;             //Contenido del campo al obtener el foco.
    
    private boolean blnCon;
    private ZafThreadGUI objThrGUI;

    private Connection con;
    private Statement stm;
    private ResultSet rst;    
    private String strDesCorTipDoc, strDesLarTipDoc;
    
    private ZafSelFec objSelFecOrdCom, objSelFecFacPrv;
    private ZafVenCon vcoTipDoc;
    private ZafTblTot objTblTot;
    private ZafTblOrd objTblOrd;
    
    /** Creates new form ZafCon29 */
     public ZafCon29(Librerias.ZafParSis.ZafParSis obj) {
      try{
          initComponents();
          this.objParSis = (Librerias.ZafParSis.ZafParSis) obj.clone();
        
        if (!configurarFrm())
            exitForm();
      }
      catch (CloneNotSupportedException e){
          objUti.mostrarMsgErr_F1(this, e);
      }
    }
    

    private void mostrarMsgError(String strMensaje){
            javax.swing.JOptionPane obj =new javax.swing.JOptionPane();
            String strTit;
            strTit="Zafiro.- Contabilidad";            
            obj.showMessageDialog(this,strMensaje,strTit,javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
     private void mostrarMsgInf(String strMsg) {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }   

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGrl = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        optTod = new javax.swing.JRadioButton();
        optFil = new javax.swing.JRadioButton();
        panCen = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        panFecOrdCom = new javax.swing.JPanel();
        panFecFacPrv = new javax.swing.JPanel();
        panFil = new javax.swing.JPanel();
        lblPrv = new javax.swing.JLabel();
        txtCodPrv = new javax.swing.JTextField();
        txtDesLarPrv = new javax.swing.JTextField();
        butPrv = new javax.swing.JButton();
        txtCodTipDoc = new javax.swing.JTextField();
        lblTipDoc = new javax.swing.JLabel();
        txtDesCorTipDoc = new javax.swing.JTextField();
        txtDesLarTipDoc = new javax.swing.JTextField();
        butTipDoc = new javax.swing.JButton();
        chkExcVenEmp = new javax.swing.JCheckBox();
        panItmDesHas2 = new javax.swing.JPanel();
        lblNumFacPrvDes = new javax.swing.JLabel();
        txtNumFacPrvDes = new javax.swing.JTextField();
        lblNumFacPrvHas = new javax.swing.JLabel();
        txtNumFacPrvHas = new javax.swing.JTextField();
        panRep = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        spnTotal = new javax.swing.JScrollPane();
        tblTotal = new javax.swing.JTable();
        panPie = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        lblTit.setPreferredSize(new java.awt.Dimension(138, 20));
        lblTit.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        tabFrm.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        panGrl.setLayout(new java.awt.BorderLayout());

        jPanel2.setPreferredSize(new java.awt.Dimension(100, 40));
        jPanel2.setLayout(null);

        optTod.setSelected(true);
        optTod.setText("Todos los registros");
        optTod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optTodActionPerformed(evt);
            }
        });
        jPanel2.add(optTod);
        optTod.setBounds(1, 2, 410, 14);

        optFil.setText("Sólo los registros que cumplan con el criterio seleccionado");
        optFil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optFilActionPerformed(evt);
            }
        });
        jPanel2.add(optFil);
        optFil.setBounds(1, 20, 400, 14);

        panGrl.add(jPanel2, java.awt.BorderLayout.NORTH);

        panCen.setName(""); // NOI18N
        panCen.setPreferredSize(new java.awt.Dimension(10, 300));
        panCen.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(2, 0));

        panFecOrdCom.setPreferredSize(new java.awt.Dimension(0, 100));
        panFecOrdCom.setLayout(new java.awt.BorderLayout());
        jPanel1.add(panFecOrdCom);

        panFecFacPrv.setLayout(new java.awt.BorderLayout());
        jPanel1.add(panFecFacPrv);

        panCen.add(jPanel1, java.awt.BorderLayout.CENTER);

        panFil.setPreferredSize(new java.awt.Dimension(0, 120));
        panFil.setLayout(null);

        lblPrv.setText("Proveedor:");
        lblPrv.setToolTipText("Proveedor");
        panFil.add(lblPrv);
        lblPrv.setBounds(10, 32, 70, 20);

        txtCodPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodPrvActionPerformed(evt);
            }
        });
        txtCodPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodPrvFocusLost(evt);
            }
        });
        panFil.add(txtCodPrv);
        txtCodPrv.setBounds(150, 32, 80, 20);

        txtDesLarPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarPrvActionPerformed(evt);
            }
        });
        txtDesLarPrv.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarPrvFocusLost(evt);
            }
        });
        panFil.add(txtDesLarPrv);
        txtDesLarPrv.setBounds(230, 32, 280, 20);

        butPrv.setText("...");
        butPrv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrvActionPerformed(evt);
            }
        });
        panFil.add(butPrv);
        butPrv.setBounds(510, 32, 20, 20);
        panFil.add(txtCodTipDoc);
        txtCodTipDoc.setBounds(116, 10, 32, 20);

        lblTipDoc.setText("Tipo de documento:");
        lblTipDoc.setToolTipText("Tipo de documento");
        panFil.add(lblTipDoc);
        lblTipDoc.setBounds(8, 10, 120, 20);

        txtDesCorTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorTipDocActionPerformed(evt);
            }
        });
        txtDesCorTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusLost(evt);
            }
        });
        panFil.add(txtDesCorTipDoc);
        txtDesCorTipDoc.setBounds(150, 10, 80, 20);

        txtDesLarTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarTipDocActionPerformed(evt);
            }
        });
        txtDesLarTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusLost(evt);
            }
        });
        panFil.add(txtDesLarTipDoc);
        txtDesLarTipDoc.setBounds(230, 10, 280, 20);

        butTipDoc.setText("...");
        butTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butTipDocActionPerformed(evt);
            }
        });
        panFil.add(butTipDoc);
        butTipDoc.setBounds(510, 10, 20, 20);

        chkExcVenEmp.setSelected(true);
        chkExcVenEmp.setText("Excluir las ventas entre las empresas del grupo");
        chkExcVenEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkExcVenEmpActionPerformed(evt);
            }
        });
        panFil.add(chkExcVenEmp);
        chkExcVenEmp.setBounds(5, 56, 400, 20);

        panItmDesHas2.setBorder(javax.swing.BorderFactory.createTitledBorder("Número de factura de proveedor"));
        panItmDesHas2.setLayout(null);

        lblNumFacPrvDes.setText("Desde:");
        panItmDesHas2.add(lblNumFacPrvDes);
        lblNumFacPrvDes.setBounds(40, 18, 60, 14);

        txtNumFacPrvDes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumFacPrvDesActionPerformed(evt);
            }
        });
        txtNumFacPrvDes.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNumFacPrvDesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNumFacPrvDesFocusLost(evt);
            }
        });
        panItmDesHas2.add(txtNumFacPrvDes);
        txtNumFacPrvDes.setBounds(86, 14, 100, 20);

        lblNumFacPrvHas.setText("Hasta:");
        panItmDesHas2.add(lblNumFacPrvHas);
        lblNumFacPrvHas.setBounds(194, 18, 50, 14);

        txtNumFacPrvHas.setVerifyInputWhenFocusTarget(false);
        txtNumFacPrvHas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNumFacPrvHasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNumFacPrvHasFocusLost(evt);
            }
        });
        panItmDesHas2.add(txtNumFacPrvHas);
        txtNumFacPrvHas.setBounds(240, 14, 100, 20);

        panFil.add(panItmDesHas2);
        panItmDesHas2.setBounds(8, 80, 430, 40);

        panCen.add(panFil, java.awt.BorderLayout.SOUTH);

        panGrl.add(panCen, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panGrl);

        panRep.setLayout(new java.awt.BorderLayout());

        spnDat.setPreferredSize(new java.awt.Dimension(452, 266));

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDat.setViewportView(tblDat);

        panRep.add(spnDat, java.awt.BorderLayout.CENTER);

        spnTotal.setPreferredSize(new java.awt.Dimension(320, 35));

        tblTotal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTotal.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        spnTotal.setViewportView(tblTotal);

        panRep.add(spnTotal, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("Reporte", panRep);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panPie.setMinimumSize(new java.awt.Dimension(50, 33));
        panPie.setPreferredSize(new java.awt.Dimension(0, 50));
        panPie.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        panBot.add(butCer);

        panPie.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panPie.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panPie, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        // TODO add your handling code here:
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="áEstá seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                dispose();
            }
        }
        catch (Exception e){
            dispose();
        }
        
}//GEN-LAST:event_exitForm

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        // TODO add your handling code here:
        if (butCon.getText().equals("Consultar")){
            blnCon=true;
            if (objThrGUI==null){
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }
        }
        else{
            blnCon=false;
        }
}//GEN-LAST:event_butConActionPerformed

    /** Cerrar la aplicacián. */
    private void exitForm()
    {
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="áEstá seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            this.dispose();
        }
    }        
    
    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        // TODO add your handling code here:
//        this.dispose();
        exitForm();
        
    }//GEN-LAST:event_butCerActionPerformed

private void txtCodPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodPrvActionPerformed
    txtCodPrv.transferFocus();
}//GEN-LAST:event_txtCodPrvActionPerformed

private void txtCodPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusGained
    strCodPrv=txtCodPrv.getText();
    txtCodPrv.selectAll();
}//GEN-LAST:event_txtCodPrvFocusGained

private void txtCodPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodPrvFocusLost
//Validar el contenido de la celda sálo si ha cambiado.
        if (!txtCodPrv.getText().equalsIgnoreCase(strCodPrv))
        {
            if (txtCodPrv.getText().equals(""))
            {
                txtCodPrv.setText("");
                txtDesLarPrv.setText("");
                objTblMod.removeAllRows();
            }
            else
            {
                mostrarVenConPrv(1);
            }
        }
        else
            txtCodPrv.setText(strCodPrv);


        if(txtCodPrv.getText().length()>0){
            optFil.setSelected(true);
            optTod.setSelected(false);
        }



}//GEN-LAST:event_txtCodPrvFocusLost

private void txtDesLarPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarPrvActionPerformed
    txtDesLarPrv.transferFocus();
}//GEN-LAST:event_txtDesLarPrvActionPerformed

private void txtDesLarPrvFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusGained
    strDesLarPrv=txtDesLarPrv.getText();
    txtDesLarPrv.selectAll();
}//GEN-LAST:event_txtDesLarPrvFocusGained

private void txtDesLarPrvFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarPrvFocusLost
//Validar el contenido de la celda sálo si ha cambiado.
        if (!txtDesLarPrv.getText().equalsIgnoreCase(strDesLarPrv))
        {
            if (txtDesLarPrv.getText().equals(""))
            {
                txtCodPrv.setText("");
                txtDesLarPrv.setText("");
                objTblMod.removeAllRows();
            }
            else
            {
                mostrarVenConPrv(2);
            }
        }
        else
            txtDesLarPrv.setText(strDesLarPrv);

        if(txtDesLarPrv.getText().length()>0){
            optFil.setSelected(true);
            optTod.setSelected(false);
        }



}//GEN-LAST:event_txtDesLarPrvFocusLost


private void butPrvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrvActionPerformed
strCodPrv=txtCodPrv.getText();
        mostrarVenConPrv(0);
}//GEN-LAST:event_butPrvActionPerformed

private void txtDesCorTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorTipDocActionPerformed
    // TODO add your handling code here:
    txtDesCorTipDoc.transferFocus();
}//GEN-LAST:event_txtDesCorTipDocActionPerformed

private void txtDesCorTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusGained
    // TODO add your handling code here:
        strDesCorTipDoc=txtDesCorTipDoc.getText();
        txtDesCorTipDoc.selectAll();
}//GEN-LAST:event_txtDesCorTipDocFocusGained

private void txtDesCorTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusLost
    // TODO add your handling code here:
        //Validar el contenido de la celda sálo si ha cambiado.
        if (!txtDesCorTipDoc.getText().equalsIgnoreCase(strDesCorTipDoc))
        {
            if (txtDesCorTipDoc.getText().equals(""))
            {
                txtCodTipDoc.setText("");
                txtDesLarTipDoc.setText("");
            }
            else
            {
                mostrarVenConTipDoc(1);
            }
        }
        else
            txtDesCorTipDoc.setText(strDesCorTipDoc);

        if(txtDesLarPrv.getText().length()>0){
            optFil.setSelected(true);
            optTod.setSelected(false);
        }


}//GEN-LAST:event_txtDesCorTipDocFocusLost

private void txtDesLarTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarTipDocActionPerformed
    // TODO add your handling code here:
    txtDesLarTipDoc.transferFocus();
}//GEN-LAST:event_txtDesLarTipDocActionPerformed

private void txtDesLarTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusGained
    // TODO add your handling code here:
        strDesLarTipDoc=txtDesLarTipDoc.getText();
        txtDesLarTipDoc.selectAll();
}//GEN-LAST:event_txtDesLarTipDocFocusGained

private void txtDesLarTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusLost
    // TODO add your handling code here:
        //Validar el contenido de la celda sálo si ha cambiado.
        if (!txtDesLarTipDoc.getText().equalsIgnoreCase(strDesLarTipDoc))
        {
            if (txtDesLarTipDoc.getText().equals(""))
            {
                txtCodTipDoc.setText("");
                txtDesCorTipDoc.setText("");
            }
            else
            {
                mostrarVenConTipDoc(2);
            }
        }
        else
            txtDesLarTipDoc.setText(strDesLarTipDoc);


        if(txtDesLarPrv.getText().length()>0){
            optFil.setSelected(true);
            optTod.setSelected(false);
        }


}//GEN-LAST:event_txtDesLarTipDocFocusLost

private void butTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butTipDocActionPerformed
    // TODO add your handling code here:
    mostrarVenConTipDoc(0);
}//GEN-LAST:event_butTipDocActionPerformed

private void chkExcVenEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkExcVenEmpActionPerformed

}//GEN-LAST:event_chkExcVenEmpActionPerformed

private void txtNumFacPrvDesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumFacPrvDesFocusGained
    // TODO add your handling code here:
    txtNumFacPrvDes.selectAll();
}//GEN-LAST:event_txtNumFacPrvDesFocusGained

private void txtNumFacPrvDesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumFacPrvDesFocusLost
    // TODO add your handling code here:
    if (txtNumFacPrvDes.getText().length()>0) {
        optFil.setSelected(true);
        optTod.setSelected(false);

        if (txtNumFacPrvHas.getText().length()==0)
            txtNumFacPrvHas.setText(txtNumFacPrvDes.getText());
    }
}//GEN-LAST:event_txtNumFacPrvDesFocusLost

private void txtNumFacPrvHasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumFacPrvHasFocusGained
    // TODO add your handling code here:
    txtNumFacPrvHas.selectAll();
}//GEN-LAST:event_txtNumFacPrvHasFocusGained

private void txtNumFacPrvHasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumFacPrvHasFocusLost
    // TODO add your handling code here:
    if (txtNumFacPrvHas.getText().length()>0){
        optFil.setSelected(true);
        optTod.setSelected(false);
    }
}//GEN-LAST:event_txtNumFacPrvHasFocusLost

private void optTodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optTodActionPerformed
    // TODO add your handling code here:
    if(optTod.isSelected()){
        optFil.setSelected(false);
        objSelFecFacPrv.setCheckBoxChecked(false);
        objSelFecOrdCom.setCheckBoxChecked(false);
        txtCodTipDoc.setText("");
        txtDesCorTipDoc.setText("");
        txtDesLarTipDoc.setText("");
        txtCodPrv.setText("");
        txtDesLarPrv.setText("");
        txtNumFacPrvDes.setText("");
        txtNumFacPrvHas.setText("");
    }
    else
        optFil.setSelected(true);
}//GEN-LAST:event_optTodActionPerformed

private void txtNumFacPrvDesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumFacPrvDesActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_txtNumFacPrvDesActionPerformed

private void optFilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optFilActionPerformed
    // TODO add your handling code here:
    if(optFil.isSelected())
        optTod.setSelected(false);
    else
        optTod.setSelected(true);


}//GEN-LAST:event_optFilActionPerformed
    


    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConPrv(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoCli.setCampoBusqueda(2);
                    vcoCli.show();
                    if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                    {
                        txtCodPrv.setText(vcoCli.getValueAt(1));
                        txtDesLarPrv.setText(vcoCli.getValueAt(3));
                        objTblMod.removeAllRows();
                    }
                    break;
                case 1: //Básqueda directa por "Námero de cuenta".
                    if (vcoCli.buscar("a1.co_cli", txtCodPrv.getText()))
                    {
                        txtCodPrv.setText(vcoCli.getValueAt(1));
                        txtDesLarPrv.setText(vcoCli.getValueAt(3));
                        objTblMod.removeAllRows();
                    }
                    else
                    {
                        vcoCli.setCampoBusqueda(0);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                        {
                            txtCodPrv.setText(vcoCli.getValueAt(1));
                            txtDesLarPrv.setText(vcoCli.getValueAt(3));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtCodPrv.setText(strCodPrv);
                        }
                    }
                    break;
                case 2: //Básqueda directa por "Descripcián larga".
                    if (vcoCli.buscar("a1.tx_nom", txtDesLarPrv.getText()))
                    {
                        txtCodPrv.setText(vcoCli.getValueAt(1));
                        txtDesLarPrv.setText(vcoCli.getValueAt(3));
                        objTblMod.removeAllRows();
                    }
                    else
                    {
                        vcoCli.setCampoBusqueda(2);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                        {
                            txtCodPrv.setText(vcoCli.getValueAt(1));
                            txtDesLarPrv.setText(vcoCli.getValueAt(3));
                            objTblMod.removeAllRows();
                        }
                        else
                        {
                            txtDesLarPrv.setText(strDesLarPrv);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butPrv;
    private javax.swing.JButton butTipDoc;
    private javax.swing.JCheckBox chkExcVenEmp;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblNumFacPrvDes;
    private javax.swing.JLabel lblNumFacPrvHas;
    private javax.swing.JLabel lblPrv;
    private javax.swing.JLabel lblTipDoc;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optFil;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panCen;
    private javax.swing.JPanel panFecFacPrv;
    private javax.swing.JPanel panFecOrdCom;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGrl;
    private javax.swing.JPanel panItmDesHas2;
    private javax.swing.JPanel panPie;
    private javax.swing.JPanel panRep;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JScrollPane spnTotal;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTable tblTotal;
    private javax.swing.JTextField txtCodPrv;
    private javax.swing.JTextField txtCodTipDoc;
    private javax.swing.JTextField txtDesCorTipDoc;
    private javax.swing.JTextField txtDesLarPrv;
    private javax.swing.JTextField txtDesLarTipDoc;
    private javax.swing.JTextField txtNumFacPrvDes;
    private javax.swing.JTextField txtNumFacPrvHas;
    // End of variables declaration//GEN-END:variables

    private boolean isCamVal(){
        //Validar el "Tipo de documento".
        if (txtCodTipDoc.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Tipo de documento</FONT> es obligatorio.<BR>Escriba o seleccione un tipo de documento y vuelva a intentarlo.</HTML>");
            txtDesCorTipDoc.requestFocus();
            return false;
        }

        return true;
    }


    
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            
            //Configurar ZafSelFec:
            objSelFecOrdCom=new ZafSelFec();
            objSelFecOrdCom.setCheckBoxVisible(true);
            objSelFecOrdCom.setCheckBoxChecked(false);
            objSelFecOrdCom.setTitulo("Rango de fecha de la orden de compra");
            panFecOrdCom.add(objSelFecOrdCom);
            objSelFecOrdCom.setBounds(4, 4, 472, 72);


            objSelFecFacPrv=new ZafSelFec();
            objSelFecFacPrv.setCheckBoxVisible(true);
            objSelFecFacPrv.setCheckBoxChecked(false);
            objSelFecFacPrv.setTitulo("Rango de fecha de la factura");
            panFecFacPrv.add(objSelFecFacPrv);
            objSelFecFacPrv.setBounds(4, 4, 472, 72);


            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux+"  v0.1.1");
            lblTit.setText(strAux);
            //Configurar objetos.
            //txtCodCta.setVisible(false);
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(18);  //Almacena las cabeceras
            vecCab.clear();                                    
            vecCab.add(INT_TBL_DAT_LIN,"");
            vecCab.add(INT_TBL_DAT_COD_EMP,"Cód.Emp.");
            vecCab.add(INT_TBL_DAT_COD_LOC,"Cód.Loc.");
            vecCab.add(INT_TBL_DAT_COD_TIP_DOC,"cód.Tip.Doc.");
            vecCab.add(INT_TBL_DAT_COD_DOC,"Cód.Doc.");
            vecCab.add(INT_TBL_DAT_RUC,"Ruc");
            vecCab.add(INT_TBL_DAT_COD_CLI,"Cód.Cli.");
            vecCab.add(INT_TBL_DAT_NOM_CLI,"Nom.Cli.");
            vecCab.add(INT_TBL_DAT_DES_COR_TIP_DOC,"Tip.Doc");
            vecCab.add(INT_TBL_DAT_NUM_DOC,"Núm.Doc.");
            vecCab.add(INT_TBL_DAT_FEC_DOC,"Fec.Doc.");
            vecCab.add(INT_TBL_DAT_VAL_SUB,"Sub.");
            vecCab.add(INT_TBL_DAT_VAL_IVA,"Iva.");
            vecCab.add(INT_TBL_DAT_VAL_TOT,"Tot.");
            vecCab.add(INT_TBL_DAT_NUM_DOC_FAC_PRV,"Num.Fac.Prv.");
            vecCab.add(INT_TBL_DAT_FEC_DOC_FAC_PRV,"Fec.Fac.Prv.");
            vecCab.add(INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV,"Num.Aut.Sri.Fac.Prv");
            vecCab.add(INT_TBL_DAT_NUM_SER_DOC_FAC_PRV,"Num.Ser.Fac.Prv.");
            vecCab.add(INT_TBL_DAT_FEC_CAD_FAC_PRV,"Fec.Cad..Fac.Prv.");

            
            


            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);


            //Configurar JTable: Establecer tipo de seleccián.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer la fila de cabecera.
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            //Configurar JTable: Establecer el mená de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(90);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_RUC).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(200);
            tcmAux.getColumn(INT_TBL_DAT_DES_COR_TIP_DOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_VAL_SUB).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_VAL_IVA).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_VAL_TOT).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC_FAC_PRV).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC_FAC_PRV).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_NUM_SER_DOC_FAC_PRV).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_FEC_CAD_FAC_PRV).setPreferredWidth(80);

            
            



            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);

            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_EMP, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_LOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_TIP_DOC, tblDat);
            objTblMod.addSystemHiddenColumn(INT_TBL_DAT_COD_DOC, tblDat);
            
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            //Configurar JTable: Editor de básqueda.
            objTblBus=new ZafTblBus(tblDat);
            objTblOrd=new ZafTblOrd(tblDat);
            //Configurar JTable: Renderizar celdas.

            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
//            tcmAux.getColumn(INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV).setCellRenderer(objTblCelRenLbl);
//    	    tcmAux.getColumn(INT_TBL_DAT_NUM_SER_DOC_FAC_PRV).setCellRenderer(objTblCelRenLbl);
//            tcmAux.getColumn(INT_TBL_DAT_FEC_CAD_FAC_PRV).setCellRenderer(objTblCelRenLbl);
//            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC_FAC_PRV).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_COD_CLI).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;

            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);

            tcmAux.getColumn(INT_TBL_DAT_VAL_IVA).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VAL_TOT).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VAL_SUB).setCellRenderer(objTblCelRenLbl);
            
            objTblCelRenLbl=null;
            //Libero los objetos auxiliares.
            tcmAux=null;


            //Configurar JTable: Establecer relacián entre el JTable de datos y JTable de totales.
            int intCol[]={INT_TBL_DAT_VAL_SUB, INT_TBL_DAT_VAL_IVA, INT_TBL_DAT_VAL_TOT};
            objTblTot=new ZafTblTot(spnDat, spnTotal, tblDat, tblTotal, intCol);

            tblTotal.setRowSelectionAllowed(true);
            tblTotal.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            tblTotal.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);

            tcmAux=tblTotal.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(30);
            tcmAux.getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(90);
            tcmAux.getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_RUC).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_DAT_COD_CLI).setPreferredWidth(50);
            tcmAux.getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(200);
            tcmAux.getColumn(INT_TBL_DAT_DES_COR_TIP_DOC).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_VAL_SUB).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_VAL_IVA).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_VAL_TOT).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC_FAC_PRV).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC_FAC_PRV).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_NUM_SER_DOC_FAC_PRV).setPreferredWidth(80);
            tcmAux.getColumn(INT_TBL_DAT_FEC_CAD_FAC_PRV).setPreferredWidth(80);

            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_EMP).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_LOC).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_TIP_DOC).setPreferredWidth(0);
            tblTotal.getColumnModel().getColumn(INT_TBL_DAT_COD_DOC).setPreferredWidth(0);




            configurarVenConPrv();
            configurarVenConTipDoc();


            txtCodTipDoc.setVisible(false);
            txtCodTipDoc.setEditable(false);
            txtCodTipDoc.setEnabled(false);


        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_COD_EMP:
                    strMsg="Código Empresa";
                    break;
                case INT_TBL_DAT_COD_LOC:
                    strMsg="Código Local";
                    break;
                case INT_TBL_DAT_COD_TIP_DOC:
                    strMsg="Código Tipo Documento";
                    break;
                case INT_TBL_DAT_COD_DOC:
                    strMsg="Código Documento";
                    break;
                case INT_TBL_DAT_RUC:
                    strMsg="Ruc proveedor";
                    break;                    
                case INT_TBL_DAT_COD_CLI:
                    strMsg="Código proveedor";
                    break;                    
                case INT_TBL_DAT_NOM_CLI:
                    strMsg="Nombre del proveedor";
                    break;
                case INT_TBL_DAT_DES_COR_TIP_DOC:
                    strMsg="Tipo de documento";
                    break;
                case INT_TBL_DAT_NUM_DOC:
                    strMsg="Número de orden de compra";
                    break;
                case INT_TBL_DAT_FEC_DOC:
                    strMsg="Fecha de emisión orden de compra";
                    break;
                case INT_TBL_DAT_VAL_SUB:
                    strMsg="Subtotal de la factura del proveedor";
                    break;
                case INT_TBL_DAT_VAL_IVA:
                    strMsg="Valor de Iva";
                    break;
                case INT_TBL_DAT_VAL_TOT:
                    strMsg="Total del Comprobante de Venta";
                    break;
                case INT_TBL_DAT_NUM_DOC_FAC_PRV:
                    strMsg="Número de la facturas del proveedor";
                    break;
                case INT_TBL_DAT_FEC_DOC_FAC_PRV:
                    strMsg="Fecha de la factura del proveedor";
                    break;
                case INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV:
                    strMsg="Número de autorización de la factura del proveedor";
                    break;
                case INT_TBL_DAT_NUM_SER_DOC_FAC_PRV:
                    strMsg="Número de serie de la factura del proveedor";
                    break;
                case INT_TBL_DAT_FEC_CAD_FAC_PRV:
                    strMsg="Fecha de caducidad de la factura del proveedor";
                    break;
                default:
                    break;




            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }


    private class ZafThreadGUI extends Thread{
        public void run(){
            if (!cargarDetReg()){
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sálo cuando haya datos.
            if (tblDat.getRowCount()>0){
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }



    /**
     * Esta funcián permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg(){
        boolean blnRes=true;
        int i;
        strAux="";
        String strAuxFecFacPrv="";
        String strFecDoc="";
        String strFecFac="";


        try{
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
           
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if( ! txtCodTipDoc.getText().equals(""))
                strAux+=" AND a1.co_tipDoc=" + txtCodTipDoc.getText() + "";
            if( ! txtCodPrv.getText().equals(""))
                strAux+=" AND a1.co_cli=" + txtCodPrv.getText() + "";

            if(objSelFecOrdCom.isCheckBoxChecked()){
                switch (objSelFecOrdCom.getTipoSeleccion()){
                    case 0: //Básqueda por rangos
                        strAux+=" AND (a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFecOrdCom.getFechaDesde(), objSelFecOrdCom.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFecOrdCom.getFechaHasta(), objSelFecOrdCom.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        break;
                    case 1: //Fechas menores o iguales que "Hasta".
                        strAux+=" AND (a1.fe_doc<='" + objUti.formatearFecha(objSelFecOrdCom.getFechaHasta(), objSelFecOrdCom.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        break;
                    case 2: //Fechas mayores o iguales que "Desde".
                        strAux+=" AND (a1.fe_doc>='" + objUti.formatearFecha(objSelFecOrdCom.getFechaDesde(), objSelFecOrdCom.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        break;
                    case 3: //Todo.
                        break;
                }
            }

            if(objSelFecFacPrv.isCheckBoxChecked()){
                switch (objSelFecFacPrv.getTipoSeleccion()){
                    case 0: //Básqueda por rangos
                        strAuxFecFacPrv+=" WHERE (b2.fe_fac BETWEEN '" + objUti.formatearFecha(objSelFecFacPrv.getFechaDesde(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFecFacPrv.getFechaHasta(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        break;
                    case 1: //Fechas menores o iguales que "Hasta".
                        strAuxFecFacPrv+=" WHERE (b2.fe_fac<='" + objUti.formatearFecha(objSelFecFacPrv.getFechaHasta(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        break;
                    case 2: //Fechas mayores o iguales que "Desde".
                        strAuxFecFacPrv+=" WHERE (b2.fe_fac>='" + objUti.formatearFecha(objSelFecFacPrv.getFechaDesde(), objSelFecFacPrv.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "')";
                        break;
                    case 3: //Todo.
                        break;
                }
            }


            if (chkExcVenEmp.isSelected())
            {
//                //Temporal hasta que se busque una mejor manera de hacerlo.
//                strAux+=" AND NOT (a1.co_emp=1 AND a1.co_cli=3515)";                   strAux+=" AND NOT (a1.co_emp=1 AND a1.co_cli=3516)";
//                strAux+=" AND NOT (a1.co_emp=1 AND a1.co_cli=602)";                    strAux+=" AND NOT (a1.co_emp=1 AND a1.co_cli=603)";
//                strAux+=" AND NOT (a1.co_emp=1 AND a1.co_cli=2600)";                   strAux+=" AND NOT (a1.co_emp=1 AND a1.co_cli=1039)";
//
//                strAux+=" AND NOT (a1.co_emp=2 AND a1.co_cli=2853)";                   strAux+=" AND NOT (a1.co_emp=2 AND a1.co_cli=2854)";
//                strAux+=" AND NOT (a1.co_emp=2 AND a1.co_cli=446)";                    strAux+=" AND NOT (a1.co_emp=2 AND a1.co_cli=447)";
//                strAux+=" AND NOT (a1.co_emp=2 AND a1.co_cli=2105)";                   strAux+=" AND NOT (a1.co_emp=2 AND a1.co_cli=789)";
//                strAux+=" AND NOT (a1.co_emp=2 AND a1.co_cli=790)";
//
//                strAux+=" AND NOT (a1.co_emp=3 AND a1.co_cli=2857)";                   strAux+=" AND NOT (a1.co_emp=3 AND a1.co_cli=2858)";
//                strAux+=" AND NOT (a1.co_emp=3 AND a1.co_cli=452)";                    strAux+=" AND NOT (a1.co_emp=3 AND a1.co_cli=453)";
//                strAux+=" AND NOT (a1.co_emp=3 AND a1.co_cli=2107)";                   strAux+=" AND NOT (a1.co_emp=3 AND a1.co_cli=832)";
//
//                strAux+=" AND NOT (a1.co_emp=4 AND a1.co_cli=3116)";                   strAux+=" AND NOT (a1.co_emp=4 AND a1.co_cli=3117)";
//                strAux+=" AND NOT (a1.co_emp=4 AND a1.co_cli=497)";                    strAux+=" AND NOT (a1.co_emp=4 AND a1.co_cli=498)";
//                strAux+=" AND NOT (a1.co_emp=4 AND a1.co_cli=2294)";                   strAux+=" AND NOT (a1.co_emp=4 AND a1.co_cli=886)";
//                strAux+=" AND NOT (a1.co_emp=4 AND a1.co_cli=887)";

                
                strAux+=" AND CASE WHEN a1.co_emp=1 THEN a1.co_cli NOT IN(3515,3516,602,603, 2600, 1039)";
                strAux+=" WHEN a1.co_emp=2 THEN a1.co_cli NOT IN(2853,2854,446,447,2105,789,790)";
                strAux+=" WHEN a1.co_emp=3 THEN a1.co_cli NOT IN(2857,2858,452,453,2107,832)";
                strAux+=" WHEN a1.co_emp=4 THEN a1.co_cli NOT IN(3116,3117,497,498,2294,886,887) END";

            }



           
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+=" SELECT b1.co_emp, b1.co_loc, b1.co_tipdoc, b1.co_doc, b1.ne_numDoc";
                strSQL+=" , b1.tx_ruc, b1.co_cli, b1.tx_nomCli";
                strSQL+=" , CASE WHEN b1.nd_sub IS NULL THEN 0 ELSE b1.nd_sub END AS nd_sub";
                strSQL+=" , CASE WHEN b1.nd_valIva IS NULL THEN 0 ELSE b1.nd_valIva END AS nd_valIva";
                strSQL+=" , CASE WHEN b1.nd_tot IS NULL THEN 0 ELSE b1.nd_tot END AS nd_tot";
                strSQL+=" , b1.fe_doc";
                strSQL+=" , b2.tx_numChq, b2.fe_fac, b2.tx_numSer, b2.tx_numAutSRI, b2.tx_fecCad, b1.tx_desCorTipDoc";
                strSQL+=" FROM(";
                strSQL+=" 	SELECT a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc, a1.ne_numDoc";
                strSQL+=" 	, a1.tx_ruc, a1.co_cli, a1.tx_nomCli, a1.nd_sub, a1.nd_valIva, a1.nd_tot, a1.fe_doc";
                strSQL+=" 	, a3.tx_desCor AS tx_desCorTipDoc";
                strSQL+=" 	FROM (tbm_cabMovInv AS a1 INNER JOIN tbm_cabTipDoc AS a3 ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc)";
                strSQL+=" 	INNER JOIN tbm_pagMovInv AS a2";
                strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc";
                if(objParSis.getCodigoUsuario()==1){
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                }
                else{
                    if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="   AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+=" )";
                    }
                    else{
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="   AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                        strSQL+="   AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+="                           AND co_usr=" + objParSis.getCodigoUsuario() + "";
                        strSQL+=" )";
                    }
                }
                strSQL+="         AND a1.st_reg NOT IN('I','E') AND a2.st_reg IN('A','C')";
                strSQL+="         " + strAux;
                strSQL+=" 	AND a3.ne_mod IN(2,4,5)";
                strSQL+=" 	GROUP BY a1.co_emp, a1.co_loc, a1.co_tipdoc, a1.co_doc, a1.ne_numDoc";
                strSQL+=" 	, a1.tx_ruc, a1.co_cli, a1.tx_nomCli, a1.nd_sub, a1.nd_valIva, a1.nd_tot, a1.fe_doc";
                strSQL+=" 	, a3.tx_desCor";
                strSQL+=" ) AS b1";
                strSQL+=" INNER JOIN(";
                strSQL+=" 	SELECT a2.co_empRel AS co_emp, a2.co_locRel AS co_loc, a2.co_tipDocRel AS co_tipDoc";
                strSQL+=" 	, a2.co_docRel AS co_doc";
                strSQL+=" 	,a3.tx_numChq, a3.fe_venChq AS fe_fac, a3.tx_numSer, a3.tx_numAutSRI, a3.tx_fecCad";
                strSQL+=" 	FROM tbm_detRecDoc AS a3";
                strSQL+=" 	INNER JOIN tbr_detRecDocCabMovInv AS a2";
                strSQL+=" 	ON a2.co_emp=a3.co_emp AND a2.co_loc=a3.co_loc AND a2.co_tipDoc=a3.co_tipDoc";
                strSQL+=" 	LEFT OUTER JOIN tbm_pagMovInv AS a1";
                strSQL+=" 	ON a1.co_emp=a2.co_empRel AND a1.co_loc=a2.co_locRel AND a1.co_tipDoc=a2.co_tipDocRel AND a1.co_doc=a2.co_docRel";
                strSQL+=" 	AND a2.co_doc=a3.co_doc AND a2.co_reg=a3.co_reg";
                if(objParSis.getCodigoUsuario()==1){
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                }
                else{
                    if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="   AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+=" )";
                    }
                    else{
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="   AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                        strSQL+="   AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+="                           AND co_usr=" + objParSis.getCodigoUsuario() + "";
                        strSQL+=" )";
                    }
                }
                strSQL+=" 	AND a3.tx_numChq IS NOT NULL AND a3.fe_venChq IS NOT NULL AND a3.tx_numSer IS NOT NULL";
                strSQL+=" 	AND a3.tx_numAutSRI IS NOT NULL AND a3.tx_fecCad IS NOT NULL";
                strSQL+=" 	AND a1.st_reg IN('A','C') AND a2.st_reg NOT IN('I','E') AND a3.st_reg NOT IN('I','E')";
                strSQL+=" 	GROUP BY a2.co_empRel, a2.co_locRel, a2.co_tipDocRel, a2.co_docRel";
                strSQL+=" 	,a3.tx_numChq, a3.fe_venChq, a3.tx_numSer, a3.tx_numAutSRI, a3.tx_fecCad";
                strSQL+=" UNION";
                strSQL+=" 	SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc";
                strSQL+=" 	,a1.tx_numChq, a1.fe_venChq AS fe_fac, a1.tx_numSer, a1.tx_numAutSRI, a1.tx_fecCad";
                strSQL+=" 	FROM tbm_pagMovInv AS a1";
                if(objParSis.getCodigoUsuario()==1){
                    strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                }
                else{
                    if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="   AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+=" )";
                    }
                    else{
                        strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="   AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                        strSQL+="   AND a1.co_tipDoc IN(";
                        strSQL+="                       SELECT co_tipDoc FROM tbr_tipDocUsr ";
                        strSQL+="                           WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="                           AND co_mnu=" + objParSis.getCodigoMenu() + "";
                        strSQL+="                           AND co_usr=" + objParSis.getCodigoUsuario() + "";
                        strSQL+=" )";
                    }
                }
                strSQL+=" 	AND a1.st_reg IN('A','C')";
                strSQL+=" 	AND a1.tx_numChq IS NOT NULL /*AND a1.fe_venChq IS NOT NULL*/ AND a1.tx_numSer IS NOT NULL";
                strSQL+=" 	AND a1.tx_numAutSRI IS NOT NULL AND a1.tx_fecCad IS NOT NULL";
                strSQL+=" 	GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc";
                strSQL+=" 	,a1.tx_numChq, a1.fe_venChq, a1.tx_numSer, a1.tx_numAutSRI, a1.tx_fecCad";
                strSQL+=" ) AS b2";
                strSQL+=" ON b1.co_emp=b2.co_emp AND b1.co_loc=b2.co_loc AND b1.co_tipDoc=b2.co_tipDoc AND b1.co_doc=b2.co_doc";
                strSQL+="" + strAuxFecFacPrv;

                if (txtNumFacPrvDes.getText().length()>0 || txtNumFacPrvHas.getText().length()>0)
                    strSQL+=" AND ((LOWER(b2.tx_numChq) BETWEEN '" + txtNumFacPrvDes.getText().replaceAll("'", "''").toLowerCase() + "' AND '" + txtNumFacPrvHas.getText().replaceAll("'", "''").toLowerCase() + "') OR LOWER(b2.tx_numChq) LIKE '%" + txtNumFacPrvHas.getText().replaceAll("'", "''").toLowerCase() + "%')";

                System.out.println("SQL: " + strSQL);
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                //pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                i=0;
                while (rst.next()){
                    if (blnCon){
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_LIN,                 "");
                        vecReg.add(INT_TBL_DAT_COD_EMP,             "" + rst.getInt("co_emp"));
                        vecReg.add(INT_TBL_DAT_COD_LOC,             "" + rst.getInt("co_loc"));
                        vecReg.add(INT_TBL_DAT_COD_TIP_DOC,         "" + rst.getInt("co_tipdoc"));
                        vecReg.add(INT_TBL_DAT_COD_DOC,             "" + rst.getInt("co_doc"));
                        vecReg.add(INT_TBL_DAT_RUC,                 "" + rst.getString("tx_ruc"));
                        vecReg.add(INT_TBL_DAT_COD_CLI,             "" + rst.getString("co_cli"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI,             "" + rst.getString("tx_nomCli"));
                        vecReg.add(INT_TBL_DAT_DES_COR_TIP_DOC,     "" + rst.getString("tx_desCorTipDoc"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC,             "" + rst.getString("ne_numdoc"));


                        strFecDoc=rst.getObject("fe_doc")==null?"":rst.getString("fe_doc");
                        if(strFecDoc.equals(""))
                            vecReg.add(INT_TBL_DAT_FEC_DOC,         strFecDoc);
                        else
                            vecReg.add(INT_TBL_DAT_FEC_DOC,         "" + objUti.formatearFecha(strFecDoc, "yyyy-MM-dd", "dd/MM/yy"));
                        vecReg.add(INT_TBL_DAT_VAL_SUB,             "" + rst.getObject("nd_sub")==null?"0":(rst.getString("nd_sub").equals("")?"0":"" + rst.getBigDecimal("nd_sub").abs()));
                        vecReg.add(INT_TBL_DAT_VAL_IVA,             "" + rst.getObject("nd_valIva")==null?"0":(rst.getString("nd_valIva").equals("")?"0":"" + rst.getBigDecimal("nd_valIva").abs()));
                        vecReg.add(INT_TBL_DAT_VAL_TOT,             "" + rst.getObject("nd_tot")==null?"0":(rst.getString("nd_tot").equals("")?"0":"" + rst.getBigDecimal("nd_tot").abs()));

                        vecReg.add(INT_TBL_DAT_NUM_DOC_FAC_PRV,     "" + rst.getObject("tx_numChq")==null?"":(rst.getString("tx_numChq").equals("null")?"":rst.getString("tx_numChq")));

                        strFecFac=rst.getObject("fe_fac")==null?"":rst.getString("fe_fac");
                        if(strFecFac.equals(""))
                            vecReg.add(INT_TBL_DAT_FEC_DOC_FAC_PRV, strFecFac);
                        else
                            vecReg.add(INT_TBL_DAT_FEC_DOC_FAC_PRV, "" + objUti.formatearFecha(strFecFac, "yyyy-MM-dd", "dd/MM/yy"));
                        vecReg.add(INT_TBL_DAT_NUM_AUT_SRI_FAC_PRV, "" + rst.getObject("tx_numAutSri")==null?"":(rst.getString("tx_numAutSri").equals("null")?"":rst.getString("tx_numAutSri")));
                        vecReg.add(INT_TBL_DAT_NUM_SER_DOC_FAC_PRV, "" + rst.getObject("tx_numSer")==null?"":(rst.getString("tx_numSer").equals("null")?"":rst.getString("tx_numSer")));
                        vecReg.add(INT_TBL_DAT_FEC_CAD_FAC_PRV, "" + rst.getObject("tx_fecCad")==null?"":(rst.getString("tx_fecCad").equals("null")?"":rst.getString("tx_fecCad")));
                       

                        vecDat.add(vecReg);









                        i++;
                        pgrSis.setValue(i);
                    }
                    else{
                        break;
                    }
                }
                rst.close();
                stm.close();
                rst=null;
                stm=null;
                
                
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();



                if (tblDat.getRowCount()==tblDat.getRowCount())
                    lblMsgSis.setText("Se encontraron " + tblDat.getRowCount() + " registros.");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
                tabFrm.setSelectedIndex(1);
                //Establecer el foco en el JTable sálo cuando haya datos.
                if (tblDat.getRowCount()>0){
                    tblDat.setRowSelectionInterval(0, 0);
                    tblDat.requestFocus();
                }


                objTblTot.calcularTotales();

                con.close();
                con=null;
                
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


  
    /**
     * Esta funcián configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Proveedores".
     */
    private boolean configurarVenConPrv()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Identificación");
            arlAli.add("Nombre");
            arlAli.add("Dirección");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("414");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            if(objUti.utilizarClientesEmpresa(objParSis, objParSis.getCodigoEmpresa(), objParSis.getCodigoLocal(), objParSis.getCodigoUsuario())){
                strSQL="";
                strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
                strSQL+=" FROM tbm_cli AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.st_prv='S'";
                strSQL+=" ORDER BY a1.tx_nom";
            }
            else{
                strSQL="";
                strSQL+="SELECT a2.co_cli, a2.tx_ide, a2.tx_nom, a2.tx_dir";
                strSQL+=" FROM tbr_cliLoc AS a1 INNER JOIN tbm_cli AS a2";
                strSQL+=" ON a1.co_emp=a2.co_emp AND a1.co_cli=a2.co_cli";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" AND a2.st_prv='S'";
                strSQL+=" ORDER BY a2.tx_nom";
            }
            //Ocultar columnas.
            int intColOcu[]=new int[1];
            intColOcu[0]=4;
            vcoCli=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de proveedores", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoCli.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



    /**
     * Esta funcián configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Tipos de documentos".
     */
    private boolean configurarVenConTipDoc()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_tipdoc");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            arlCam.add("a1.ne_ultDoc");
            arlCam.add("a1.tx_natDoc");
            arlCam.add("tblActNumDoc");
            arlCam.add("a2.co_grpTipDoc");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Tip.Doc.");
            arlAli.add("Tipo de documento");
            arlAli.add("Ult.Doc.");
            arlAli.add("Nat.Doc.");
            arlAli.add("Ref.Tbl.Act.");
            arlAli.add("Cod.Grp.Tbl.Tip.Doc.");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            arlAncCol.add("80");
            arlAncCol.add("80");
            arlAncCol.add("80");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            if(objParSis.getCodigoUsuario()==1){
                strSQL="";
                strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar, ";
                strSQL+=" CASE WHEN a2.ne_ultDoc IS NULL THEN a1.ne_ultDoc ELSE a2.ne_ultDoc END AS ne_ultDoc";
                strSQL+=" ,a1.tx_natDoc";
                strSQL+=" ,CASE WHEN a2.ne_ultDoc IS NULL THEN 'L' ELSE 'G' END AS tblActNumDoc, a2.co_grpTipDoc";
                strSQL+=" FROM (tbm_cabTipDoc AS a1 LEFT OUTER JOIN tbm_cabGrpTipDoc AS a2 ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_grpTipDoc=a2.co_grpTipDoc)";
                strSQL+=" INNER JOIN tbr_tipDocPrg AS a3";
                strSQL+=" ON a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();
                strSQL+=" AND a3.co_mnu=" + objParSis.getCodigoMenu();
                strSQL+=" ORDER BY a1.tx_desCor";
            }
            else{
                strSQL="";
                strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar,";
                strSQL+=" CASE WHEN a2.ne_ultDoc IS NULL THEN a1.ne_ultDoc ELSE a2.ne_ultDoc END AS ne_ultDoc";
                strSQL+=" ,a1.tx_natDoc";
                strSQL+=" ,CASE WHEN a2.ne_ultDoc IS NULL THEN 'L' ELSE 'G' END AS tblActNumDoc, a2.co_grpTipDoc";
                strSQL+=" FROM tbr_tipDocUsr AS a3 inner join  (tbm_cabTipDoc AS a1 LEFT OUTER JOIN tbm_cabGrpTipDoc AS a2 ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_grpTipDoc=a2.co_grpTipDoc)";
                strSQL+=" ON (a1.co_emp=a3.co_emp and a1.co_loc=a3.co_loc and a1.co_tipdoc=a3.co_tipdoc)";
                strSQL+=" WHERE ";
                strSQL+=" a3.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a3.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" AND a3.co_mnu=" + objParSis.getCodigoMenu() + "";
                strSQL+=" AND a3.co_usr=" + objParSis.getCodigoUsuario() + "";
            }


            //Ocultar columnas.
            int intColOcu[]=new int[3];
            intColOcu[0]=7;
            vcoTipDoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de tipos de documentos", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoTipDoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoTipDoc.setConfiguracionColumna(4, javax.swing.JLabel.RIGHT);


        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /**
     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
     * una básqueda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opcián que desea utilizar.
     * @param intTipBus El tipo de básqueda a realizar.
     * @return true: Si no se presentá ningán problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConTipDoc(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoTipDoc.setCampoBusqueda(1);
                    vcoTipDoc.show();
                    if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        if(txtDesLarPrv.getText().length()>0){
                            optFil.setSelected(true);
                            optTod.setSelected(false);
                        }
                    }
                    break;
                case 1: //Básqueda directa por "Descripcián corta".
                    if (vcoTipDoc.buscar("a1.tx_desCor", txtDesCorTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        if(txtDesLarPrv.getText().length()>0){
                            optFil.setSelected(true);
                            optTod.setSelected(false);
                        }
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(1);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                            if(txtDesLarPrv.getText().length()>0){
                                optFil.setSelected(true);
                                optTod.setSelected(false);
                            }
                        }
                        else
                        {
                            txtDesCorTipDoc.setText(strDesCorTipDoc);
                        }
                    }
                    break;
                case 2: //Básqueda directa por "Descripcián larga".
                    if (vcoTipDoc.buscar("a1.tx_desLar", txtDesLarTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        if(txtDesLarPrv.getText().length()>0){
                            optFil.setSelected(true);
                            optTod.setSelected(false);
                        }
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(2);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                            if(txtDesLarPrv.getText().length()>0){
                                optFil.setSelected(true);
                                optTod.setSelected(false);
                            }
                        }
                        else
                        {
                            txtDesLarTipDoc.setText(strDesLarTipDoc);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



}
