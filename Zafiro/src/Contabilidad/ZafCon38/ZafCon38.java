/*
 * ZafMae32.java
 * modificado el 18 de Mayo del 2007 14h14
 * Created on May 11, 2007, 11:44 AM
 */

package Contabilidad.ZafCon38;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafVenCon.ZafVenCon;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import java.util.ArrayList;
import java.util.Vector;
/**
 *
 * @author  ilino
 */
public class ZafCon38 extends javax.swing.JInternalFrame {

    javax.swing.JInternalFrame jfrThis; //Hace referencia a this
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private MiToolBar objTooBar;
    private ZafTblMod objTblModPlaCta;
    private ZafTblPopMnu objTblPopMnuPlaCta;
    private ZafColNumerada objColNumPlaCta;
    //para plan de cuentas
    private ZafTblCelRenChk objTblCelRenChkPlaCta;
    private ZafTblCelEdiChk objTblCelEdiChkPlaCta;
    private ZafTblEdi objTblEdi;
    private ZafTblCelRenLbl objTblCelRenLbl;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private String strCodGrp, strDesLarGrp, strAux, strSQL;
    private ZafVenCon vcoTipDoc;
    private Vector vecCabPlaCta, vecRegPlaCta, vecDatPlaCta;
    private int numFilPlaCta;
    private Vector vecAux;
    
    private boolean blnMarTodChkTblEmp=true;
    
    final int INT_TBL_PLA_CTA_LIN=0;
    final int INT_TBL_PLA_CTA_COD_EMP=1;
    final int INT_TBL_PLA_CTA_COD_CTA=2;
    final int INT_TBL_PLA_CTA_NUM_CTA=3;
    final int INT_TBL_PLA_CTA_NOM_CTA=4;
    final int INT_TBL_PLA_CTA_SEL=5;
    final int INT_TBL_PLA_CTA_TIP_CTA=6;
    
    //PARA COLOCAR LOS NODOS PADRES DE LA CUENTA QUE SE SELECCIONA
    private ArrayList arlRegNodPad, arlDatNodPad;
    final int INT_ARL_NOD_PAD_CTA_SEL=0;
    
    
    private boolean blnHayCam;
    
//    private int intNumDatVecDat;
    private ZafTblBus objTblBus;
    /** Creates new form ZafMae32 */
    public ZafCon38(ZafParSis obj) {
        try{
            initComponents();
            //Inicializar objetos.
            this.objParSis=obj;
            jfrThis = this;
            objParSis=(ZafParSis)obj.clone();
            objUti=new ZafUtil();
            objTooBar=new MiToolBar(this);
            panTooBar.add(objTooBar);//llama a la barra de botones

            if (!configurarFrm())
                exitForm();
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        panFrm = new javax.swing.JPanel();
        tabFrm = new javax.swing.JTabbedPane();
        panGrl = new javax.swing.JPanel();
        panGrlCab = new javax.swing.JPanel();
        panTit = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        panCab = new javax.swing.JPanel();
        butGrp = new javax.swing.JButton();
        txtDesLarGrp = new javax.swing.JTextField();
        txtCodGrp = new javax.swing.JTextField();
        lblTitTipDoc = new javax.swing.JLabel();
        panGrlCta = new javax.swing.JPanel();
        chkSelAct = new javax.swing.JCheckBox();
        chkSelPas = new javax.swing.JCheckBox();
        chkSelPat = new javax.swing.JCheckBox();
        chkSelIng = new javax.swing.JCheckBox();
        chkSelCos = new javax.swing.JCheckBox();
        chkSelGto = new javax.swing.JCheckBox();
        chkSelOtrIng = new javax.swing.JCheckBox();
        chkSelOtrGto = new javax.swing.JCheckBox();
        panGrlGrp = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        spnPlaCta = new javax.swing.JScrollPane();
        tblDatPlaCta = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCop = new javax.swing.JButton();
        panTooBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        panGrl.setLayout(new java.awt.BorderLayout());

        panGrlCab.setLayout(new java.awt.BorderLayout());

        panGrlCab.setPreferredSize(new java.awt.Dimension(0, 100));
        panTit.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("jLabel1");
        lblTit.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        panTit.add(lblTit, java.awt.BorderLayout.NORTH);

        panGrlCab.add(panTit, java.awt.BorderLayout.NORTH);

        panCab.setLayout(null);

        butGrp.setText("...");
        butGrp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butGrpActionPerformed(evt);
            }
        });

        panCab.add(butGrp);
        butGrp.setBounds(460, 8, 30, 23);

        txtDesLarGrp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarGrpActionPerformed(evt);
            }
        });
        txtDesLarGrp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarGrpFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarGrpFocusLost(evt);
            }
        });

        panCab.add(txtDesLarGrp);
        txtDesLarGrp.setBounds(138, 10, 321, 20);

        txtCodGrp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodGrpActionPerformed(evt);
            }
        });
        txtCodGrp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodGrpFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodGrpFocusLost(evt);
            }
        });

        panCab.add(txtCodGrp);
        txtCodGrp.setBounds(80, 10, 57, 20);

        lblTitTipDoc.setText("Grupo:");
        panCab.add(lblTitTipDoc);
        lblTitTipDoc.setBounds(10, 12, 70, 15);

        panGrlCab.add(panCab, java.awt.BorderLayout.CENTER);

        panGrlCta.setLayout(null);

        panGrlCta.setBorder(new javax.swing.border.TitledBorder("Cuentas"));
        panGrlCta.setPreferredSize(new java.awt.Dimension(0, 40));
        chkSelAct.setSelected(true);
        chkSelAct.setText("Activo");
        panGrlCta.add(chkSelAct);
        chkSelAct.setBounds(6, 15, 80, 18);

        chkSelPas.setSelected(true);
        chkSelPas.setText("Pasivo");
        panGrlCta.add(chkSelPas);
        chkSelPas.setBounds(82, 15, 80, 18);

        chkSelPat.setSelected(true);
        chkSelPat.setText("Patrimonio");
        panGrlCta.add(chkSelPat);
        chkSelPat.setBounds(158, 15, 80, 18);

        chkSelIng.setSelected(true);
        chkSelIng.setText("Ingresos");
        panGrlCta.add(chkSelIng);
        chkSelIng.setBounds(234, 15, 80, 18);

        chkSelCos.setSelected(true);
        chkSelCos.setText("Costos");
        panGrlCta.add(chkSelCos);
        chkSelCos.setBounds(310, 15, 80, 18);

        chkSelGto.setSelected(true);
        chkSelGto.setText("Gastos");
        panGrlCta.add(chkSelGto);
        chkSelGto.setBounds(386, 15, 80, 18);

        chkSelOtrIng.setSelected(true);
        chkSelOtrIng.setText("Otros Ingresos");
        panGrlCta.add(chkSelOtrIng);
        chkSelOtrIng.setBounds(462, 15, 100, 18);

        chkSelOtrGto.setSelected(true);
        chkSelOtrGto.setText("Otros Gastos");
        panGrlCta.add(chkSelOtrGto);
        chkSelOtrGto.setBounds(558, 15, 100, 18);

        panGrlCab.add(panGrlCta, java.awt.BorderLayout.SOUTH);

        panGrl.add(panGrlCab, java.awt.BorderLayout.NORTH);

        panGrlGrp.setLayout(new java.awt.BorderLayout());

        panGrlGrp.setBorder(new javax.swing.border.TitledBorder("Grupo de usuarios"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(452, 280));
        spnPlaCta.setPreferredSize(new java.awt.Dimension(452, 202));
        tblDatPlaCta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnPlaCta.setViewportView(tblDatPlaCta);

        jPanel1.add(spnPlaCta, java.awt.BorderLayout.CENTER);

        panGrlGrp.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(null);

        jPanel2.setPreferredSize(new java.awt.Dimension(0, 29));
        butCon.setMnemonic('C');
        butCon.setText("Consultar");
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });

        jPanel2.add(butCon);
        butCon.setBounds(481, 3, 90, 23);

        butCop.setMnemonic('o');
        butCop.setText("Copiar");
        butCop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCopActionPerformed(evt);
            }
        });

        jPanel2.add(butCop);
        butCop.setBounds(580, 3, 90, 23);

        panGrlGrp.add(jPanel2, java.awt.BorderLayout.SOUTH);

        panGrl.add(panGrlGrp, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("General", panGrl);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panTooBar.setLayout(new java.awt.BorderLayout());

        panFrm.add(panTooBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }//GEN-END:initComponents

    private void txtDesLarGrpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarGrpFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesLarGrp.getText().equalsIgnoreCase(strDesLarGrp))
        {
            if (txtDesLarGrp.getText().equals(""))
            {
                txtCodGrp.setText("");
            }
            else
            {
                mostrarVenConGrp(2);
            }
        }
        else
            txtDesLarGrp.setText(strDesLarGrp);
    }//GEN-LAST:event_txtDesLarGrpFocusLost

    private void txtDesLarGrpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarGrpFocusGained
        // TODO add your handling code here:
        strDesLarGrp=txtDesLarGrp.getText();
        txtDesLarGrp.selectAll();
    }//GEN-LAST:event_txtDesLarGrpFocusGained

    private void txtDesLarGrpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarGrpActionPerformed
        // TODO add your handling code here:
        txtDesLarGrp.transferFocus();
    }//GEN-LAST:event_txtDesLarGrpActionPerformed

    private void txtCodGrpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodGrpFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtCodGrp.getText().equalsIgnoreCase(strCodGrp))
        {
            if (txtCodGrp.getText().equals(""))
                txtDesLarGrp.setText("");
            else
                mostrarVenConGrp(1);
        }
        else
            txtCodGrp.setText(strCodGrp);
    }//GEN-LAST:event_txtCodGrpFocusLost

    private void txtCodGrpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodGrpFocusGained
        // TODO add your handling code here:
        strCodGrp=txtCodGrp.getText();
        txtCodGrp.selectAll();        
    }//GEN-LAST:event_txtCodGrpFocusGained

    private void txtCodGrpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodGrpActionPerformed
        // TODO add your handling code here:
        txtCodGrp.transferFocus();
    }//GEN-LAST:event_txtCodGrpActionPerformed

    private void butCopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCopActionPerformed
        // TODO add your handling code here:
        txtCodGrp.setEditable(true);
        txtDesLarGrp.setEditable(true);
        butGrp.setEnabled(true);
        objTooBar.setEstado('n');
        butCon.setEnabled(false);
        objTooBar.setEnabledInsertar(true);
        if( ! (cargarPlaCta()) )
            mostrarMsgInf("El Plan de Cuentas no se cargó correctamente<BR>Cancele y vuelva a intentarlo");
    }//GEN-LAST:event_butCopActionPerformed

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        // TODO add your handling code here:
        if(  ! (cargarPlaCtaNotFor())  )
            mostrarMsgInf("<HTML>No se cargaron correctamente los datos<BR>Cancele e intente nuevamente.</HTML>");
    }//GEN-LAST:event_butConActionPerformed

    private void butGrpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butGrpActionPerformed
        // TODO add your handling code here:
        mostrarVenConGrp(0);
    }//GEN-LAST:event_butGrpActionPerformed

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }        
    }//GEN-LAST:event_exitForm
    
    
    private void exitForm(){
        dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCon;
    private javax.swing.JButton butCop;
    private javax.swing.JButton butGrp;
    private javax.swing.JCheckBox chkSelAct;
    private javax.swing.JCheckBox chkSelCos;
    private javax.swing.JCheckBox chkSelGto;
    private javax.swing.JCheckBox chkSelIng;
    private javax.swing.JCheckBox chkSelOtrGto;
    private javax.swing.JCheckBox chkSelOtrIng;
    private javax.swing.JCheckBox chkSelPas;
    private javax.swing.JCheckBox chkSelPat;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblTit;
    private javax.swing.JLabel lblTitTipDoc;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGrl;
    private javax.swing.JPanel panGrlCab;
    private javax.swing.JPanel panGrlCta;
    private javax.swing.JPanel panGrlGrp;
    private javax.swing.JPanel panTit;
    private javax.swing.JPanel panTooBar;
    private javax.swing.JScrollPane spnPlaCta;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDatPlaCta;
    private javax.swing.JTextField txtCodGrp;
    private javax.swing.JTextField txtDesLarGrp;
    // End of variables declaration//GEN-END:variables

    
    public class MiToolBar extends ZafToolBar{
        
        public MiToolBar(javax.swing.JInternalFrame jfrThis){
            super(jfrThis, objParSis);       
        }
        
        public boolean aceptar() {
            boolean blnRes=true;
            return blnRes;
        }
        
        public boolean afterAceptar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterAnular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterCancelar() {
            boolean blnRes=true;
            return blnRes;
        }
        
        public boolean afterConsultar() {
            boolean blnRes=true;
            objTooBar.setEstado('w');
            System.out.println("AFTER CONSULTAR: " + objTooBar.getEstado());
            butCop.setEnabled(true);
            return blnRes;            
        }
        
        public boolean afterEliminar() {
            boolean blnRes=true;
            return blnRes;
        }
        
        public boolean afterImprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterInsertar() {
            boolean blnRes=true;
            objTooBar.setEstado('w');
            return blnRes;            
        }
        
        public boolean afterModificar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterVistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean anular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeAceptar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeAnular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeCancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeConsultar() {
            boolean blnRes=true;
//                if(!(isTipDocSel())){
//                    return false;
//                }
            System.out.println("BEFORE CONSULTAR: " + objTooBar.getEstado());
            return blnRes;            
        }
        
        public boolean beforeEliminar() {
            boolean blnRes=true;
            return blnRes;
        }
        
        public boolean beforeImprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeInsertar() {
            boolean blnRes=true;
            if(!(isTipDocSel()))
                return false;            
            return blnRes;            
        }
        
        public boolean beforeModificar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeVistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean cancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public void clickAceptar() {
        }
        
        public void clickAnterior() {
            blnHayCam=objTblModPlaCta.isDataModelChanged();
            try{
                if (!rstCab.isFirst()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.previous();
                            cargarPlaCta();
                        }
                    }
                    else{
                        rstCab.previous();
                        cargarPlaCta();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }
        
        public void clickAnular() {
        }
        
        public void clickCancelar() {
            cleanFrm();
            objTblModPlaCta.removeAllRows();
            chkSelAct.setSelected(true);
            chkSelPas.setSelected(true);
            chkSelPat.setSelected(true);
            chkSelIng.setSelected(true);
            chkSelCos.setSelected(true);
            chkSelGto.setSelected(true);
            chkSelOtrIng.setSelected(true);
            chkSelOtrGto.setSelected(true);
            txtCodGrp.setEnabled(true);
            txtDesLarGrp.setEnabled(true);
            butGrp.setEnabled(true);
            strAux="";
            
            if(con!=null){
                try{
                    con.close();
                    con=null;
                }
                catch (java.sql.SQLException e){
                    objUti.mostrarMsgErr_F1(this, e);
                }               
            }
            
        }
        
        public void clickConsultar() {
            chkSelAct.setEnabled(false);
            chkSelPas.setEnabled(false);
            chkSelPat.setEnabled(false);
            chkSelIng.setEnabled(false);
            chkSelCos.setEnabled(false);
            chkSelGto.setEnabled(false);
            chkSelOtrIng.setEnabled(false);
            chkSelOtrGto.setEnabled(false);
            butCop.setEnabled(false);
            butCon.setEnabled(false);
        }
        
        public void clickEliminar() {
        }
        
        public void clickFin() {
            try{
                if (!rstCab.isLast()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.last();
                            cargarPlaCta();
                        }
                    }
                    else{
                        rstCab.last();
                        cargarPlaCta();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }            
        }
        
        public void clickImprimir() {
        }
        
        public void clickInicio() {
            try{
                if (!rstCab.isFirst()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.first();
                            cargarPlaCta();
                        }
                    }
                    else{
                        rstCab.first();
                        cargarPlaCta();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }            
        }
        
        public void clickInsertar() {
            butCop.setEnabled(false);
        }
        
        public void clickModificar() {
            txtCodGrp.setEnabled(false);
            txtDesLarGrp.setEnabled(false);
            butGrp.setEnabled(false);
            noSelBloCta(true);
            cargarPlaCta();
            butCon.setEnabled(false);
        }
        
        public void clickSiguiente() {
            blnHayCam=objTblModPlaCta.isDataModelChanged();
            try{
                if (!rstCab.isLast()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.next();
                            cargarPlaCta();
                        }
                    }
                    else{
                        rstCab.next();
                        cargarPlaCta();
                    }
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }            
        }
        
        public void clickVisPreliminar() {
        }
        
        public boolean consultar() {
//            if(  ! (cargarPlaCta())  ){
//                mostrarMsgInf("No se pudo realizar la operación de consuta<BR>Cancele e intente nuevamente.");
//                return false;
//            }
            System.out.println("CONSULTAR: " + objTooBar.getEstado());
            consultarReg();            
            return true;            
        }
        
        public boolean eliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean imprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean insertar() {
            if (!insertarReg())
                return false;
            return true;            
        }
        
        public boolean modificar() {
            if (!actualizarReg())
                return false;            
            return true;
        }
        
        public boolean vistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
    }
    
    
    
    private boolean configurarFrm(){
        boolean blnRes=true;
        lblTit.setText(objParSis.getNombreMenu());
        this.setTitle(objParSis.getNombreMenu() + "v0.1.2b1");        
        txtCodGrp.setBackground(objParSis.getColorCamposObligatorios());
        txtDesLarGrp.setBackground(objParSis.getColorCamposObligatorios());
        configurarVenConGrp();
        configurarPlaCta();
        objTooBar.setVisibleAnular(false);
        objTooBar.setVisibleEliminar(false);
        
        arlDatNodPad=new ArrayList();
        arlDatNodPad.clear();
        
        
        return blnRes;
    }    
    
    
    
    private void configurarPlaCta(){
        vecDatPlaCta=new Vector();
        vecDatPlaCta.clear();
        vecCabPlaCta=new Vector(7);
        vecCabPlaCta.clear();
        vecCabPlaCta.add(INT_TBL_PLA_CTA_LIN, "");
        vecCabPlaCta.add(INT_TBL_PLA_CTA_COD_EMP, "COD. EMP.");
        vecCabPlaCta.add(INT_TBL_PLA_CTA_COD_CTA, "COD. CTA.");
        vecCabPlaCta.add(INT_TBL_PLA_CTA_NUM_CTA, "NUM. CTA.");
        vecCabPlaCta.add(INT_TBL_PLA_CTA_NOM_CTA, "NOMBRE CUENTA");
        vecCabPlaCta.add(INT_TBL_PLA_CTA_SEL, "SEL");
        vecCabPlaCta.add(INT_TBL_PLA_CTA_TIP_CTA, "TIPO CTA");
        
        

        objTblModPlaCta=new ZafTblMod();
        objTblModPlaCta.setHeader(vecCabPlaCta);            
        //Configurar JTable: Establecer el modelo de la tabla.
        tblDatPlaCta.setModel(objTblModPlaCta);
        objColNumPlaCta=new ZafColNumerada(tblDatPlaCta, INT_TBL_PLA_CTA_LIN);
        //Configurar JTable: Establecer tipo de selección.
        tblDatPlaCta.setRowSelectionAllowed(true);
        tblDatPlaCta.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        //Configurar JTable: Establecer el menú de contexto.
        objTblPopMnuPlaCta=new ZafTblPopMnu(tblDatPlaCta);
        //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
        tblDatPlaCta.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        //Configurar JTable: Establecer el ancho de las columnas.
        javax.swing.table.TableColumnModel tcmAuxPlaCta=tblDatPlaCta.getColumnModel();
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_LIN).setPreferredWidth(40);
//        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_EMP).setPreferredWidth(40);
//        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_CTA).setPreferredWidth(30);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_NUM_CTA).setPreferredWidth(90);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_NOM_CTA).setPreferredWidth(300);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_SEL).setPreferredWidth(40);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_TIP_CTA).setPreferredWidth(40);
        
        
        //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_CTA).setResizable(false);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_EMP).setResizable(false);
        //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
        tblDatPlaCta.getTableHeader().setReorderingAllowed(false);
        
        tblDatPlaCta.getTableHeader().addMouseMotionListener(new ZafMouMotAda());
        //Configurar JTable: Establecer los listener para el TableHeader.
        tblDatPlaCta.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEmpMouseClicked(evt);
            }
        }); 
        
        
        objTblBus=new ZafTblBus(tblDatPlaCta);
        //Configurar JTable: Ocultar columnas del sistema.
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_CTA).setWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_CTA).setMaxWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_CTA).setMinWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_CTA).setPreferredWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_CTA).setResizable(false);
        
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_EMP).setWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_EMP).setMaxWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_EMP).setMinWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_EMP).setPreferredWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_EMP).setResizable(false);
        
        //para hacer editable las celdas
        vecAux=new Vector();                       
        vecAux.add("" + INT_TBL_PLA_CTA_SEL);
        objTblModPlaCta.setColumnasEditables(vecAux);            
        vecAux=null;
        
        
        objTblCelRenChkPlaCta=new ZafTblCelRenChk();
        tblDatPlaCta.getColumnModel().getColumn(INT_TBL_PLA_CTA_SEL).setCellRenderer(objTblCelRenChkPlaCta);
        objTblCelEdiChkPlaCta=new ZafTblCelEdiChk(tblDatPlaCta);
        tblDatPlaCta.getColumnModel().getColumn(INT_TBL_PLA_CTA_SEL).setCellEditor(objTblCelEdiChkPlaCta);
        
        objTblCelEdiChkPlaCta.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
            public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                int intFil=tblDatPlaCta.getSelectedRow();
                int intCol=tblDatPlaCta.getSelectedColumn();
                String strTipCta=""+objTblModPlaCta.getValueAt(intFil, INT_TBL_PLA_CTA_TIP_CTA);
            }
            public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                int intFil=tblDatPlaCta.getSelectedRow();
                if(objTblModPlaCta.isChecked(intFil, INT_TBL_PLA_CTA_SEL)){
                    String strNumCtaNodPad=""+objTblModPlaCta.getValueAt(intFil, INT_TBL_PLA_CTA_NUM_CTA);
                    callNodosPadres(strNumCtaNodPad);
                    String strCodCtaNodPadTbl="", strCodCtaNodPadArl="";
                    if(arlDatNodPad.size()>0){
                        for(int i=0; i<objTblModPlaCta.getRowCountTrue(); i++){
                            strCodCtaNodPadTbl=objUti.codificar(objTblModPlaCta.getValueAt(i, INT_TBL_PLA_CTA_COD_CTA), 1);
                            for(int j=0; j<arlDatNodPad.size(); j++){
                                strCodCtaNodPadArl=objUti.codificar(objUti.getStringValueAt(arlDatNodPad, j, INT_ARL_NOD_PAD_CTA_SEL),1);
                                if(strCodCtaNodPadTbl.toString().equals(strCodCtaNodPadArl)){
                                    objTblModPlaCta.setChecked(true, i, INT_TBL_PLA_CTA_SEL);
                                }
                            }
                        }
                    }
                    arlDatNodPad.clear();
                }
                else{
                    String strNumCtaNodPad=""+objTblModPlaCta.getValueAt(intFil, INT_TBL_PLA_CTA_NUM_CTA);
                    callNodosPadres(strNumCtaNodPad);
                    String strCodCtaNodPadTbl="", strCodCtaNodPadArl="";
                    if(arlDatNodPad.size()>0){
                        for(int i=0; i<objTblModPlaCta.getRowCountTrue(); i++){
                            strCodCtaNodPadTbl=objUti.codificar(objTblModPlaCta.getValueAt(i, INT_TBL_PLA_CTA_COD_CTA), 1);
                            for(int j=0; j<arlDatNodPad.size(); j++){
                                strCodCtaNodPadArl=objUti.codificar(objUti.getStringValueAt(arlDatNodPad, j, INT_ARL_NOD_PAD_CTA_SEL),1);
                                if(strCodCtaNodPadTbl.toString().equals(strCodCtaNodPadArl)){
                                    objTblModPlaCta.setChecked(false, i, INT_TBL_PLA_CTA_SEL);
                                }
                            }
                        }
                    }
                    arlDatNodPad.clear();
                }
            }
            });
    }
    
    
    
    //para q puedan editarse las columnas especificadas en funcion configurarFrmPlaCta();
    public void setEditablePlaCta(boolean editable)
    {
        if (editable==true)
        {
            objTblModPlaCta.setModoOperacion(objTblModPlaCta.INT_TBL_INS);
        }
        else
        {
            objTblModPlaCta.setModoOperacion(objTblModPlaCta.INT_TBL_NO_EDI);
        }
    }    
    

    
    private boolean cargarPlaCta(){
        System.out.println("EL ESTADO ES: " + objTooBar.getEstado());
        String strVecTmp[] = new String [11];
        int intPosRel;
        boolean blnRes=true;
        int intTmp=0;
        strAux="";
        String strCodCtaGrp="";
        setEditablePlaCta(true);
        String strAuxConMod="";
        strAuxConMod=txtCodGrp.getText();
        String strCodGrpLoc="";
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+=" select a1.co_emp as codEmpPla, a1.co_cta as codCtaPla, a1.tx_codcta as numCtaPla, a1.tx_deslar as nomCtaPla,";
                strSQL+=" a2.co_emp as codEmpTipGrp, a2.co_cta as codCtaTipGrp, a1.tx_tipcta, a3.co_grp, a3.tx_nom as nomGrp";
                if(   (objTooBar.getEstado()=='m') ||  ( objTooBar.getEstado()=='x') ||  (objTooBar.getEstado()=='n')  ){
                    strSQL+=" from tbm_placta as a1 left outer join";
                    
                //AQUI NO DEB DE HACERSELO FALSE PORQ ESTOY EN MODO INSERTAR
                if(   (objTooBar.getEstado()=='m') ||  ( objTooBar.getEstado()=='x')){
                    txtCodGrp.setEnabled(false);
                    txtDesLarGrp.setEnabled(false);                        
                }

                }
                else
                    strSQL+=" from tbm_placta as a1 inner join";
                    
                strSQL+=" (tbr_ctaGrpCta as a2 inner join tbm_grpCta as a3 on a2.co_emp=a3.co_emp and a2.co_grp=a3.co_grp";

                if( (!(objTooBar.getEstado()=='x'))   ||   (!(objTooBar.getEstado()=='m'))   ||   (!(objTooBar.getEstado()=='n'))  )
                    strSQL+=" and a3.co_grp=" + rstCab.getString("co_grp") + "";
                
                strSQL+=" )";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.co_cta=a2.co_cta";
                strSQL+=" where a1.co_emp=" + rstCab.getString("co_emp") + "";                
                
                strSQL+=" and a1.st_reg='A'";
                if(  (objTooBar.getEstado()=='n')  ||  (objTooBar.getEstado()=='x')  ||  (objTooBar.getEstado()=='m')  ){
                    int z=0;
                    if(chkSelAct.isSelected())                    z++;
                    if(chkSelPas.isSelected())                    z++;
                    if(chkSelPat.isSelected())                    z++;
                    if(chkSelIng.isSelected())                    z++;
                    if(chkSelCos.isSelected())                    z++;
                    if(chkSelGto.isSelected())                    z++;
                    if(chkSelOtrIng.isSelected())                    z++;
                    if(chkSelOtrGto.isSelected())                    z++;                               

                    for(int j=0;j<=z;j++){
                        if (chkSelAct.isSelected()){                        strVecTmp[j]="'1'";                        j++;                    }                        
                        if (chkSelPas.isSelected()){                        strVecTmp[j]="'2'";                        j++;                    }                        
                        if (chkSelPat.isSelected()){                        strVecTmp[j]="'3'";                        j++;                    }                        
                        if (chkSelIng.isSelected()){                        strVecTmp[j]="'4'";                        j++;                    }                        
                        if (chkSelCos.isSelected()){                        strVecTmp[j]="'5'";                        j++;                    }                        
                        if (chkSelGto.isSelected()){                        strVecTmp[j]="'6'";                        j++;                    }                        
                        if (chkSelOtrIng.isSelected()){                     strVecTmp[j]="'7'";                        j++;                    }                        
                        if (chkSelOtrGto.isSelected()){                     strVecTmp[j]="'8'";                        j++;                    }  
                    }
                    for(int j=z-1;j>=0;j--){
                        if(intTmp==0){
                            strAux+=" and a1.tx_niv1 in (";
                            intTmp++;
                        }                                        
                        if(j==0){
                            strAux+=strVecTmp[j];
                            strAux+=" )";
                        }
                        else{
                            strAux+=strVecTmp[j] + ",";
                        }
                    }
                    strSQL+=strAux;
                }                strSQL+=" group by a1.tx_codcta, a1.co_emp, a1.co_cta, a1.tx_deslar,";
                strSQL+=" a2.co_emp, a2.co_cta, a1.tx_tipcta, a3.co_grp, a3.tx_nom";
                strSQL+=" order by a1.tx_codcta";
                System.out.println("ESTO SE CARGA EN FUNCION DE PLAN DE CUENTAS: " + strSQL);
                rst=stm.executeQuery(strSQL);
                               
                while (rst.next()){
                    vecRegPlaCta=new Vector();
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_LIN, "");
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_COD_EMP, "" + ( rst.getString("codEmpPla")==null?"":"" + rst.getInt("codEmpPla") )  );
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_COD_CTA, "" + ( rst.getString("codCtaPla")==null?"":"" + rst.getInt("codCtaPla") )  );
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_NUM_CTA, "" + ( rst.getString("numCtaPla")==null?"":"" + rst.getString("numCtaPla") )  );
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_NOM_CTA, "" + ( rst.getString("nomCtaPla")==null?"":"" + rst.getString("nomCtaPla") ));
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_SEL, "" );
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_TIP_CTA, "" + ( rst.getString("tx_tipcta")==null?"":"" + rst.getString("tx_tipcta") ));
                    strCodCtaGrp=(rst.getString("codCtaTipGrp")==null?"":"" + rst.getString("codCtaTipGrp"));
                    if(  ! ( strCodCtaGrp.toString().equals("") )   ){
                        vecRegPlaCta.setElementAt(new Boolean(true),INT_TBL_PLA_CTA_SEL);
                    }
                    vecDatPlaCta.add(vecRegPlaCta);
                    strCodGrpLoc=rst.getString("co_grp")==null?"":"" + rst.getString("co_grp");
                    if( ! (strCodGrpLoc.toString().equals(""))  ){
                        txtCodGrp.setText("" + rst.getString("co_grp")==null?"":"" + rst.getString("co_grp"));
                        txtDesLarGrp.setText("" + rst.getString("nomGrp")==null?"":"" + rst.getString("nomGrp"));
                    }
                    blnMarTodChkTblEmp=false;
                }
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                objTblModPlaCta.setData(vecDatPlaCta);
                tblDatPlaCta.setModel(objTblModPlaCta);
                vecDatPlaCta.clear();
                intPosRel=rstCab.getRow();
                rstCab.last();
                objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
                rstCab.absolute(intPosRel);
            }            
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }                
        return blnRes;
    }
        


    private boolean cargarPlaCtaNotFor(){
        String strVecTmp[] = new String [11];
        boolean blnRes=true;
        int intTmp=0;
        strAux="";
        String strCodCtaGrp="";
        setEditablePlaCta(true);
        String strCodGrpLoc="";
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+=" select a1.co_emp as codEmpPla, a1.co_cta as codCtaPla, a1.tx_codcta as numCtaPla, a1.tx_deslar as nomCtaPla,";
                strSQL+=" a2.co_emp as codEmpTipGrp, a2.co_cta as codCtaTipGrp, a1.tx_tipcta/*, a3.co_grp, a3.tx_nom as nomGrp*/";
                strSQL+=" from tbm_placta as a1 left outer join";
                strSQL+=" (tbr_ctaGrpCta as a2 inner join tbm_grpCta as a3 on a2.co_emp=a3.co_emp and a2.co_grp=a3.co_grp";
                strSQL+=" )";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.co_cta=a2.co_cta";
                strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";                
                
                strSQL+=" and a1.st_reg='A'";
                    int z=0;
                    if(chkSelAct.isSelected())                    z++;
                    if(chkSelPas.isSelected())                    z++;
                    if(chkSelPat.isSelected())                    z++;
                    if(chkSelIng.isSelected())                    z++;
                    if(chkSelCos.isSelected())                    z++;
                    if(chkSelGto.isSelected())                    z++;
                    if(chkSelOtrIng.isSelected())                    z++;
                    if(chkSelOtrGto.isSelected())                    z++;                               

                    for(int j=0;j<=z;j++){
                        if (chkSelAct.isSelected()){                        strVecTmp[j]="'1'";                        j++;                    }                        
                        if (chkSelPas.isSelected()){                        strVecTmp[j]="'2'";                        j++;                    }                        
                        if (chkSelPat.isSelected()){                        strVecTmp[j]="'3'";                        j++;                    }                        
                        if (chkSelIng.isSelected()){                        strVecTmp[j]="'4'";                        j++;                    }                        
                        if (chkSelCos.isSelected()){                        strVecTmp[j]="'5'";                        j++;                    }                        
                        if (chkSelGto.isSelected()){                        strVecTmp[j]="'6'";                        j++;                    }                        
                        if (chkSelOtrIng.isSelected()){                     strVecTmp[j]="'7'";                        j++;                    }                        
                        if (chkSelOtrGto.isSelected()){                     strVecTmp[j]="'8'";                        j++;                    }  
                    }
                    for(int j=z-1;j>=0;j--){
                        if(intTmp==0){
                            strAux+=" and a1.tx_niv1 in (";
                            intTmp++;
                        }                                        
                        if(j==0){
                            strAux+=strVecTmp[j];
                            strAux+=" )";
                        }
                        else{
                            strAux+=strVecTmp[j] + ",";
                        }
                    }
                    strSQL+=strAux;
                strSQL+=" group by a1.tx_codcta, a1.co_emp, a1.co_cta, a1.tx_deslar,";
                strSQL+=" a2.co_emp, a2.co_cta, a1.tx_tipcta/*, a3.co_grp, a3.tx_nom*/";
                strSQL+=" order by a1.tx_codcta";
                System.out.println("ESTO SE CARGA EN FUNCION DE PLAN DE CUENTAS: " + strSQL);
                rst=stm.executeQuery(strSQL);
                               
                while (rst.next()){
                    vecRegPlaCta=new Vector();
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_LIN, "");
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_COD_EMP, "" + ( rst.getString("codEmpPla")==null?"":"" + rst.getInt("codEmpPla") )  );
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_COD_CTA, "" + ( rst.getString("codCtaPla")==null?"":"" + rst.getInt("codCtaPla") )  );
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_NUM_CTA, "" + ( rst.getString("numCtaPla")==null?"":"" + rst.getString("numCtaPla") )  );
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_NOM_CTA, "" + ( rst.getString("nomCtaPla")==null?"":"" + rst.getString("nomCtaPla") ));
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_SEL, "" );
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_TIP_CTA, "" + ( rst.getString("tx_tipcta")==null?"":"" + rst.getString("tx_tipcta") ));
                    vecDatPlaCta.add(vecRegPlaCta);
                }
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                con.close();
                con=null;
                objTblModPlaCta.setData(vecDatPlaCta);
                tblDatPlaCta.setModel(objTblModPlaCta);
                vecDatPlaCta.clear();
            }            
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }                
        return blnRes;
    }


    
    private int obtieneNumFilTblPlaCta(){
        java.sql.Connection conTipDoc;
        java.sql.Statement stmTipDoc;
        java.sql.ResultSet rstTipDoc;
        String strVecTmp[] = new String [11];
        boolean blnRes=true;
        int intTmp=0;
        strAux="";
        int retNumFilPlaCta=0;
        try{            
            
            conTipDoc=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conTipDoc!=null){
                stmTipDoc=conTipDoc.createStatement();
                strSQL="";
                strSQL+="select count(*) as numFil";
                strSQL+=" from tbm_placta";
                strSQL+=" where co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and tx_tipcta='D'";
                strSQL+=" and st_reg='A'";
                int z=0;
                if(chkSelAct.isSelected())                    z++;
                if(chkSelPas.isSelected())                    z++;
                if(chkSelPat.isSelected())                    z++;
                if(chkSelIng.isSelected())                    z++;
                if(chkSelCos.isSelected())                    z++;
                if(chkSelGto.isSelected())                    z++;
                if(chkSelOtrIng.isSelected())                    z++;
                if(chkSelOtrGto.isSelected())                    z++;                               
                
                for(int j=0;j<=z;j++){
                    if (chkSelAct.isSelected()){                        strVecTmp[j]="'1'";                        j++;                    }                        
                    if (chkSelPas.isSelected()){                        strVecTmp[j]="'2'";                        j++;                    }                        
                    if (chkSelPat.isSelected()){                        strVecTmp[j]="'3'";                        j++;                    }                        
                    if (chkSelIng.isSelected()){                        strVecTmp[j]="'4'";                        j++;                    }                        
                    if (chkSelCos.isSelected()){                        strVecTmp[j]="'5'";                        j++;                    }                        
                    if (chkSelGto.isSelected()){                        strVecTmp[j]="'6'";                        j++;                    }                        
                    if (chkSelOtrIng.isSelected()){                     strVecTmp[j]="'7'";                        j++;                    }                        
                    if (chkSelOtrGto.isSelected()){                     strVecTmp[j]="'8'";                        j++;                    }  
                }

                for(int j=z-1;j>=0;j--){
                    if(intTmp==0){
                        strAux+=" and tx_niv1 in (";
                        intTmp++;
                    }                                        
                    if(j==0){
                        strAux+=strVecTmp[j];
                        strAux+=" )";
                    }
                    else{
                        strAux+=strVecTmp[j] + ",";
                    }
                }                                
                strSQL+=strAux;
                rstTipDoc=stmTipDoc.executeQuery(strSQL);
                while (rstTipDoc.next()){                    
                    retNumFilPlaCta=rstTipDoc.getInt("numFil");
                }
                conTipDoc.close();
                conTipDoc=null;
                stmTipDoc.close();
                stmTipDoc=null;
                rstTipDoc.close();
                rstTipDoc=null;
                strVecTmp=null;
            }            
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }                
        return retNumFilPlaCta;
    }
           
    
    
    
    
    
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }    
    
    
    private boolean configurarVenConGrp()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_grp");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Nombre Grupo");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("80");
            arlAncCol.add("334");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_grp, a1.tx_nom";
            strSQL+=" FROM tbm_grpCta AS a1";
            strSQL+=" WHERE ";
            strSQL+=" a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" AND st_reg not in ('I', 'E')";
            strSQL+=" ORDER BY a1.co_grp";
            vcoTipDoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de tipos de documentos", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoTipDoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoTipDoc.setConfiguracionColumna(2, javax.swing.JLabel.LEFT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean mostrarVenConGrp(int intTipBus){
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoTipDoc.setCampoBusqueda(1);
                    vcoTipDoc.show();
                    if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                    {
                        txtCodGrp.setText(vcoTipDoc.getValueAt(1));
                        txtDesLarGrp.setText(vcoTipDoc.getValueAt(2));
                    }
                    break;
                case 1: //Búsqueda directa por "Descripción corta".
                    if (vcoTipDoc.buscar("a1.co_grp", txtCodGrp.getText()))
                    {
                        txtCodGrp.setText(vcoTipDoc.getValueAt(1));
                        txtDesLarGrp.setText(vcoTipDoc.getValueAt(2));
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(1);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodGrp.setText(vcoTipDoc.getValueAt(1));
                            txtDesLarGrp.setText(vcoTipDoc.getValueAt(2));
                        }
                        else
                        {
                            txtCodGrp.setText(strCodGrp);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoTipDoc.buscar("a1.tx_nom", txtDesLarGrp.getText()))
                    {
                        txtCodGrp.setText(vcoTipDoc.getValueAt(1));
                        txtDesLarGrp.setText(vcoTipDoc.getValueAt(2));
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(2);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodGrp.setText(vcoTipDoc.getValueAt(1));
                            txtDesLarGrp.setText(vcoTipDoc.getValueAt(2));
                        }
                        else
                        {
                            txtDesLarGrp.setText(strDesLarGrp);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
          
    private void cleanFrm(){
        txtCodGrp.setText("");
        txtDesLarGrp.setText("");
    }

    private void noSelBloCta(boolean blnTmp){
        chkSelAct.setEnabled(blnTmp);
        chkSelPas.setEnabled(blnTmp);
        chkSelPat.setEnabled(blnTmp);
        chkSelIng.setEnabled(blnTmp);
        chkSelCos.setEnabled(blnTmp);
        chkSelGto.setEnabled(blnTmp);
        chkSelOtrIng.setEnabled(blnTmp);
        chkSelOtrGto.setEnabled(blnTmp);
    }

    
    private boolean isTipDocSel(){
        int j=0;
        strSQL="";
        strSQL+="SELECT co_grp FROM tbr_ctagrpcta";
        strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
        strSQL+=" AND co_grp=" + txtCodGrp.getText() + "";
        if (!objUti.isCodigoUnico(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL)){
            mostrarMsgInf("<HTML>El grupo <FONT COLOR=\"blue\">" + txtDesLarGrp.getText() + "</FONT>  ya fue ingresado.<BR>Si desea realizarle algún cambio a este grupo MODIFIQUE.</HTML>");
            return false;
        }

        if (txtCodGrp.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Grupo</FONT> es obligatorio.<BR>Escriba o seleccione un grupo y vuelva a intentarlo.</HTML>");
            txtDesLarGrp.requestFocus();
            return false;
        }
        return true;
    }   
    
    private boolean insertarReg()
    {
        boolean blnRes=false;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (insertaTbrCtaGrpCta()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    
    private boolean insertaTbrCtaGrpCta(){
        boolean blnRes=true;
        String strTipCtaLoc="";
        try{
            if(con!=null){
                stm=con.createStatement();
                for(int i=0; i<objTblModPlaCta.getRowCountTrue();i++){
                    if(objTblModPlaCta.isChecked(i, INT_TBL_PLA_CTA_SEL)){
                        strTipCtaLoc=""+objTblModPlaCta.getValueAt(i, INT_TBL_PLA_CTA_TIP_CTA);
//                        if(strTipCtaLoc.toString().equals("D")){
                            strSQL="";
                            strSQL+=" INSERT INTO tbr_ctagrpcta(";
                            strSQL+=" co_emp, co_grp, co_cta)";
                            strSQL+=" VALUES (";
                            strSQL+="" + objParSis.getCodigoEmpresa() + ",";
                            strSQL+="" + objUti.codificar( txtCodGrp.getText() ) + ",";
                            strSQL+="" + objTblModPlaCta.getValueAt(i, INT_TBL_PLA_CTA_COD_CTA) + "";
                            strSQL+=")";
                            System.out.println("SQL DE INSERCION EN TBR_CTAGRPCTA" + strSQL);
                            stm.executeUpdate(strSQL);                            
//                        }
                    }
                }
                stm.close();
                stm=null;
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    
    private boolean consultarReg()
    {
        int intCodEmp, intCodLoc;
        boolean blnRes=true;
        try
        {
            intCodEmp=objParSis.getCodigoEmpresa();
            intCodLoc=objParSis.getCodigoLocal();
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null)
            {
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                //Validar que sólo se muestre los documentos asignados al programa.
                strSQL="";
                strSQL+=" select distinct(a3.co_grp),a1.co_emp";
                strSQL+=" from tbm_placta as a1 inner join";
                strSQL+=" (tbr_ctaGrpCta as a2 inner join tbm_grpCta as a3 on a2.co_emp=a3.co_emp and a2.co_grp=a3.co_grp )";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.co_cta=a2.co_cta";
                strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and a1.st_reg='A'";
                
                strAux=txtCodGrp.getText();
                if (!strAux.equals(""))
                    strSQL+=" and a3.co_grp LIKE '" + strAux.replaceAll("'", "''") + "'";
                System.out.println("EN CONSULTARREG: " + strSQL);
                rstCab=stmCab.executeQuery(strSQL);
                if (rstCab.next()){
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    System.out.println("CONSULTAR REG: " + objTooBar.getEstado());
                    cargarPlaCta();
                }
                else
                {
                    mostrarMsgInf("No se ha encontrado ningún registro que cumpla el criterio de búsqueda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    private void limpiarFrm(){
        txtCodGrp.setText("");
        txtDesLarGrp.setText("");
        objTblModPlaCta.removeAllRows();
    }
    

    private boolean isRegPro()
    {
        boolean blnRes=true;
        strAux="¿Desea guardar los cambios efectuados a éste registro?\n";
        strAux+="Si no guarda los cambios perderá toda la información que no haya guardado.";
        switch (mostrarMsgCon(strAux))
        {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado()){
                    case 'n': //Insertar
                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }    
    
    private int mostrarMsgCon(String strMsg){
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    
    private boolean actualizarReg(){
        boolean blnRes=false;
        boolean blnMod=objTblModPlaCta.isDataModelChanged();
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if(blnMod){
                    if (deleteTbrCtaGrpCta()){
                        if (insertaTbrCtaGrpCta()){
                            con.commit();
                            blnRes=true;
                        }
                        else
                            con.rollback();
                    }
                    else
                        con.rollback();
                }
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    private boolean deleteTbrCtaGrpCta(){
        boolean blnRes=true;
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+=" DELETE FROM tbr_ctagrpcta";
                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND co_grp=" + objUti.codificar(txtCodGrp.getText()) + "";
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDatPlaCta.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_PLA_CTA_LIN:
                    strMsg="";
                    break;
                case INT_TBL_PLA_CTA_COD_EMP:
                    strMsg="Código de la empresa";
                    break;
                case INT_TBL_PLA_CTA_COD_CTA:
                    strMsg="Código de Cuenta";
                    break;
                case INT_TBL_PLA_CTA_NUM_CTA:
                    strMsg="Número de Cuenta";
                    break;
                case INT_TBL_PLA_CTA_NOM_CTA:
                    strMsg="Nombre de Cuenta";
                    break;
                default:
                    strMsg="";
                    break;
            }
            tblDatPlaCta.getTableHeader().setToolTipText(strMsg);
        }
    }
    
    private void tblEmpMouseClicked(java.awt.event.MouseEvent evt){
        int i, intNumFil;
        int intColSel=tblDatPlaCta.getSelectedColumn();
        String strTipCtaLoc="";
        try
        {
            intNumFil=objTblModPlaCta.getRowCountTrue();
            //Marcar la casilla sólo si se da 1 click con el botón izquierdo.
            if (evt.getButton()==evt.BUTTON1 && evt.getClickCount()==1 && tblDatPlaCta.columnAtPoint(evt.getPoint())==intColSel)
            {
                if (blnMarTodChkTblEmp)
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        
                        strTipCtaLoc=""+objTblModPlaCta.getValueAt(i, INT_TBL_PLA_CTA_TIP_CTA);
                        if(strTipCtaLoc.toString().equals("D")){
                            objTblModPlaCta.setChecked(true, i, intColSel);
                        }
                    }
                    blnMarTodChkTblEmp=false;
                }
                else
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        objTblModPlaCta.setChecked(false, i, intColSel);
                    }
                    blnMarTodChkTblEmp=true;
                }
            }
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }
    
    private boolean callNodosPadres(String nodoPadreCta){
        boolean blnRes=true;
        Connection conNodPad;
        Statement stmNodPad;
        ResultSet rstNodPad;
        String strNodPadCta=nodoPadreCta==null?"":nodoPadreCta;
        String strNivCta="";
        arlDatNodPad.clear();
        try{
            conNodPad=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conNodPad!=null){
                stmNodPad=conNodPad.createStatement();
                //PARA OBTENER EL NUMERO DE NIVELES DE LA CUENTA... SE USA PARA EL FOR
                strSQL="";
                strSQL+="SELECT a1.ne_niv";
                strSQL+=" FROM tbm_plaCta AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and a1.tx_codCta LIKE '" + strNodPadCta + "'";
                strSQL+=" ORDER BY a1.tx_codCta";
                rstNodPad=stmNodPad.executeQuery(strSQL);
                if(rstNodPad.next()){
                    strNivCta=objUti.codificar(""+rstNodPad.getInt("ne_niv"), 3);
                }
                
                int intNivCta=Integer.parseInt(strNivCta);
                int k=1;
                String strCamCab="";

                strSQL="";
                strSQL+="SELECT b1.co_cta" + strCamCab + "";
                strSQL+=" FROM(";
                strSQL+=" 	SELECT a1.co_emp, a1.co_cta, a1.tx_codCta, a1.ne_pad, a1.tx_desLar, a1.ne_niv";
                strSQL+=" 	FROM tbm_plaCta AS a1";
                strSQL+=" 	WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="       AND a1.tx_codCta LIKE '" + strNodPadCta + "'";
                strSQL+=" 	ORDER BY a1.tx_codCta) AS b" + k + "";
                
                for(int m=1;m<intNivCta; m++){
                    k++;
                    strSQL+=" 	LEFT OUTER JOIN(";
                    strSQL+=" 	SELECT a1.co_emp, a1.co_cta, a1.tx_codCta, a1.ne_pad, a1.tx_desLar";
                    strSQL+=" 	FROM tbm_plaCta AS a1) AS b" + (k+1) + "";
                    strSQL+=" 	ON b" + k + ".co_emp=b" + (k+1) + ".co_emp AND b" + k + ".ne_pad=b" + (k+1) + ".co_cta";
                    strCamCab+=", b" + (k) + ".co_cta";
                    
                }
                                
                k=1;
                
                strSQL="";
                strSQL+="SELECT b1.co_cta" + strCamCab + "";
                strSQL+=" FROM(";
                strSQL+=" 	SELECT a1.co_emp, a1.co_cta, a1.tx_codCta, a1.ne_pad, a1.tx_desLar, a1.ne_niv";
                strSQL+=" 	FROM tbm_plaCta AS a1";
                strSQL+=" 	WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="       AND a1.tx_codCta LIKE '" + strNodPadCta + "'";
                strSQL+=" 	ORDER BY a1.tx_codCta) AS b" + k + "";
                
                for(int m=1;m<intNivCta; m++){
                    k++;
                    strSQL+=" 	LEFT OUTER JOIN(";
                    strSQL+=" 	SELECT a1.co_emp, a1.co_cta, a1.tx_codCta, a1.ne_pad, a1.tx_desLar";
                    strSQL+=" 	FROM tbm_plaCta AS a1) AS b" + (k) + "";
                    strSQL+=" 	ON b" + (k-1) + ".co_emp=b" + (k) + ".co_emp AND b" + (k-1) + ".ne_pad=b" + k + ".co_cta";
                }
                strCamCab="";
                System.out.println("ANTES DE SALIR MIERCOLES:  "   +strSQL );
                rstNodPad=stmNodPad.executeQuery(strSQL);
                while(rstNodPad.next()){
                    for(int p=1; p<=intNivCta; p++){
                        arlRegNodPad=new ArrayList();
                        arlRegNodPad.add(INT_ARL_NOD_PAD_CTA_SEL, ""+rstNodPad.getString(p));
                        arlDatNodPad.add(arlRegNodPad);
                    }

                }
                System.out.println("EL ARRAYLIST DE LOS NODOS PADRES DE LA CTA SELECCIONADA SON: " + arlDatNodPad.toString());
                conNodPad.close();
                conNodPad=null;
                stmNodPad.close();
                stmNodPad=null;
                rstNodPad.close();
                rstNodPad=null;
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
        
    }
    
    
    
    
    
}
