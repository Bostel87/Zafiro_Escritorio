/*
 * ZafCon01.java
 *
 * Created on 27 de noviembre de 2004, 12:50 PM
 */
package Contabilidad.ZafCon01;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;
import java.util.ArrayList;

/**
 *
 * @author  Eddye Lino
 */
public class ZafCon01 extends javax.swing.JInternalFrame 
{
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafVenCon vcoNumCta;                        //Ventana de consulta "Número de cuenta".
    private MiToolBar objTooBar;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private String strSQL, strAux, strSQLCon;
    private Vector vecEstReg;
    private boolean blnHayCam;                          //Determina si hay cambios en el formulario.
    private ZafDocLis objDocLis;
    private java.util.Date datFecAux;                   //Auxiliar: Para almacenar fechas.
    //Variables de la clase.
    private String strNumCta;                           //Número de cuenta.
    private int intCodCtaPad;                           //Código de la cuenta padre.
    private int intCodCta;
    private String strEstIniCtaFluEfe;
    private String strVersion="v1.1.4";

    /*
     * Para almacenar informacion de nodos padres que sera usada para conceder permisos a la cuenta creada
     * para los usuarios de acuerdo al tipo de documento y según si se tiene permisos a la cuenta(s) padre(s). 
     */
    private Vector vecRegNodPad, vecDatNodPad;
    
    /** Crea una nueva instancia de la clase ZafCon01. */
    public ZafCon01(ZafParSis obj)
    {
        try
        {
            initComponents();
            //Inicializar objetos.
            objParSis=(ZafParSis)obj.clone();
            strEstIniCtaFluEfe="";
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    public ZafCon01(ZafParSis obj, Integer codigoCuenta)
    {
        this(obj);
        formInternalFrameOpened(null);
        txtCodSis.setText(codigoCuenta.toString());
        objTooBar.setEstado('c');
        objTooBar.consultar();
        objTooBar.setEstado('w');
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrTipCta = new javax.swing.ButtonGroup();
        bgrNatCta = new javax.swing.ButtonGroup();
        bgrAut = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panGen = new javax.swing.JPanel();
        lblCodSis = new javax.swing.JLabel();
        txtCodSis = new javax.swing.JTextField();
        lblCodAlt = new javax.swing.JLabel();
        txtCodAlt = new javax.swing.JTextField();
        lblNumCta = new javax.swing.JLabel();
        lblObs1 = new javax.swing.JLabel();
        spnObs1 = new javax.swing.JScrollPane();
        txaObs1 = new javax.swing.JTextArea();
        spnObs2 = new javax.swing.JScrollPane();
        txaObs2 = new javax.swing.JTextArea();
        lblObs2 = new javax.swing.JLabel();
        lblEstReg = new javax.swing.JLabel();
        cboEstReg = new javax.swing.JComboBox();
        lblNom = new javax.swing.JLabel();
        txtNom = new javax.swing.JTextField();
        lblTipCta = new javax.swing.JLabel();
        lblNatCta = new javax.swing.JLabel();
        optCtaDet = new javax.swing.JRadioButton();
        optCtaCab = new javax.swing.JRadioButton();
        optNatDeu = new javax.swing.JRadioButton();
        optNatAcr = new javax.swing.JRadioButton();
        txtNiv1 = new javax.swing.JTextField();
        txtNiv2 = new javax.swing.JTextField();
        txtNiv3 = new javax.swing.JTextField();
        txtNiv4 = new javax.swing.JTextField();
        txtNiv5 = new javax.swing.JTextField();
        txtNiv6 = new javax.swing.JTextField();
        butNumCta = new javax.swing.JButton();
        chkCtaEfe = new javax.swing.JCheckBox();
        panBar = new javax.swing.JPanel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panGen.setLayout(null);

        lblCodSis.setText("Código:");
        panGen.add(lblCodSis);
        lblCodSis.setBounds(4, 4, 100, 20);

        txtCodSis.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGen.add(txtCodSis);
        txtCodSis.setBounds(104, 4, 84, 20);

        lblCodAlt.setText("Código alterno:");
        panGen.add(lblCodAlt);
        lblCodAlt.setBounds(4, 24, 100, 20);

        txtCodAlt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGen.add(txtCodAlt);
        txtCodAlt.setBounds(104, 24, 84, 20);

        lblNumCta.setText("Número de cuenta:");
        lblNumCta.setToolTipText("Número de cuenta");
        panGen.add(lblNumCta);
        lblNumCta.setBounds(4, 44, 100, 20);

        lblObs1.setText("Observación1:");
        panGen.add(lblObs1);
        lblObs1.setBounds(4, 124, 100, 20);

        spnObs1.setViewportView(txaObs1);

        panGen.add(spnObs1);
        spnObs1.setBounds(104, 124, 460, 40);

        spnObs2.setViewportView(txaObs2);

        panGen.add(spnObs2);
        spnObs2.setBounds(104, 164, 460, 40);

        lblObs2.setText("Observación2:");
        panGen.add(lblObs2);
        lblObs2.setBounds(4, 164, 100, 20);

        lblEstReg.setText("Estado del registro:");
        lblEstReg.setToolTipText("Estado del registro");
        panGen.add(lblEstReg);
        lblEstReg.setBounds(4, 204, 100, 20);
        panGen.add(cboEstReg);
        cboEstReg.setBounds(104, 204, 180, 20);

        lblNom.setText("Nombre de cuenta:");
        lblNom.setToolTipText("Nombre de cuenta");
        panGen.add(lblNom);
        lblNom.setBounds(4, 64, 100, 20);
        panGen.add(txtNom);
        txtNom.setBounds(104, 64, 460, 20);

        lblTipCta.setText("Tipo de cuenta:");
        panGen.add(lblTipCta);
        lblTipCta.setBounds(4, 84, 100, 20);

        lblNatCta.setText("Naturaleza de la cuenta:");
        lblNatCta.setToolTipText("Naturaleza de la cuenta:");
        panGen.add(lblNatCta);
        lblNatCta.setBounds(4, 104, 100, 20);

        bgrTipCta.add(optCtaDet);
        optCtaDet.setText("Cuenta de detalle");
        panGen.add(optCtaDet);
        optCtaDet.setBounds(256, 84, 140, 20);

        bgrTipCta.add(optCtaCab);
        optCtaCab.setText("Cuenta de cabecera");
        panGen.add(optCtaCab);
        optCtaCab.setBounds(104, 84, 140, 20);

        bgrNatCta.add(optNatDeu);
        optNatDeu.setText("Deudora");
        panGen.add(optNatDeu);
        optNatDeu.setBounds(104, 104, 140, 20);

        bgrNatCta.add(optNatAcr);
        optNatAcr.setText("Acreedora");
        panGen.add(optNatAcr);
        optNatAcr.setBounds(256, 104, 140, 20);

        txtNiv1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGen.add(txtNiv1);
        txtNiv1.setBounds(104, 44, 28, 20);

        txtNiv2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGen.add(txtNiv2);
        txtNiv2.setBounds(132, 44, 28, 20);

        txtNiv3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGen.add(txtNiv3);
        txtNiv3.setBounds(160, 44, 28, 20);

        txtNiv4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGen.add(txtNiv4);
        txtNiv4.setBounds(188, 44, 32, 20);

        txtNiv5.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGen.add(txtNiv5);
        txtNiv5.setBounds(220, 44, 32, 20);

        txtNiv6.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        panGen.add(txtNiv6);
        txtNiv6.setBounds(252, 44, 32, 20);

        butNumCta.setText("...");
        butNumCta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butNumCtaActionPerformed(evt);
            }
        });
        panGen.add(butNumCta);
        butNumCta.setBounds(284, 44, 20, 20);

        chkCtaEfe.setText("Cuenta de Flujo de Efectivo");
        panGen.add(chkCtaEfe);
        chkCtaEfe.setBounds(0, 240, 250, 16);

        tabFrm.addTab("General", panGen);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());
        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-400)/2, 600, 400);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        configurarFrm();
        agregarDocLis();
    }//GEN-LAST:event_formInternalFrameOpened

    private void butNumCtaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butNumCtaActionPerformed
        mostrarVenConCta(0);
    }//GEN-LAST:event_butNumCtaActionPerformed

    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrAut;
    private javax.swing.ButtonGroup bgrNatCta;
    private javax.swing.ButtonGroup bgrTipCta;
    private javax.swing.JButton butNumCta;
    private javax.swing.JComboBox cboEstReg;
    private javax.swing.JCheckBox chkCtaEfe;
    private javax.swing.JLabel lblCodAlt;
    private javax.swing.JLabel lblCodSis;
    private javax.swing.JLabel lblEstReg;
    private javax.swing.JLabel lblNatCta;
    private javax.swing.JLabel lblNom;
    private javax.swing.JLabel lblNumCta;
    private javax.swing.JLabel lblObs1;
    private javax.swing.JLabel lblObs2;
    private javax.swing.JLabel lblTipCta;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optCtaCab;
    private javax.swing.JRadioButton optCtaDet;
    private javax.swing.JRadioButton optNatAcr;
    private javax.swing.JRadioButton optNatDeu;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGen;
    private javax.swing.JScrollPane spnObs1;
    private javax.swing.JScrollPane spnObs2;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTextArea txaObs1;
    private javax.swing.JTextArea txaObs2;
    private javax.swing.JTextField txtCodAlt;
    private javax.swing.JTextField txtCodSis;
    private javax.swing.JTextField txtNiv1;
    private javax.swing.JTextField txtNiv2;
    private javax.swing.JTextField txtNiv3;
    private javax.swing.JTextField txtNiv4;
    private javax.swing.JTextField txtNiv5;
    private javax.swing.JTextField txtNiv6;
    private javax.swing.JTextField txtNom;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            objTooBar=new MiToolBar(this);
            objDocLis=new ZafDocLis();
            panBar.add(objTooBar);
            objTooBar.setVisibleAnular(false);
            //JComboBox: Configurar.
            vecEstReg=new Vector();
            vecEstReg.add("A");
            vecEstReg.add("I");
            cboEstReg.addItem("Activo");
            cboEstReg.addItem("Inactivo");
            this.setTitle(objParSis.getNombreMenu() + strVersion);
            lblTit.setText(objParSis.getNombreMenu());
            txtCodSis.setBackground(objParSis.getColorCamposSistema());
            txtNom.setBackground(objParSis.getColorCamposObligatorios());
            txtNiv1.setBackground(objParSis.getColorCamposObligatorios());
            //Configurar ZafVenCon.
            configurarVenConCta();
            
            vecDatNodPad=new Vector();
            vecDatNodPad.clear();           
            
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
     * insertar, consultar, modificar, eliminar, etc. Además de los botones de navegación
     * que permiten desplazarse al primero, anterior, siguiente y último registro.
     */
    private class MiToolBar extends ZafToolBar
    {
        public MiToolBar(javax.swing.JInternalFrame ifrFrm)
        {
            super(ifrFrm, objParSis);
        }

        public boolean anular()
        {
            return true;
        }

        public void clickAceptar() 
        {
            
        }

        public void clickAnterior() 
        {
            try
            {
                if (!rstCab.isFirst())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.previous();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.previous();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnular()
        {
            txtCodSis.setEnabled(true);
            txtCodSis.requestFocus();
        }

        public void clickCancelar()
        {

        }

        public void clickConsultar() 
        {
            txtCodSis.setEnabled(true);
            txtCodSis.requestFocus();
            
        }

        public void clickEliminar()
        {
            
        }

        public void clickFin() 
        {
            try
            {
                if (!rstCab.isLast())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.last();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.last();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickImprimir()
        {
            
        }

        public void clickInicio()
        {
            try
            {
                if (!rstCab.isFirst())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.first();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.first();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickInsertar()
        {
            try
            {
                if (blnHayCam)
                {
                    isRegPro();
                }
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                limpiarFrm();
                txtCodSis.setEditable(false);
                optCtaDet.setSelected(true);
                optNatDeu.setSelected(true);
                cboEstReg.setSelectedIndex(0);
                txtCodAlt.requestFocus();
                //Inicializar las variables que indican cambios.
                blnHayCam=false;
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickModificar()
        {
            txtCodSis.setEditable(false);
            txtCodAlt.selectAll();
            txtCodAlt.requestFocus();
        }

        public void clickSiguiente()
        {
            try
            {
                if (!rstCab.isLast())
                {
                    if (blnHayCam)
                    {
                        if (isRegPro())
                        {
                            rstCab.next();
                            cargarReg();
                        }
                    }
                    else
                    {
                        rstCab.next();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickVisPreliminar() 
        {
            
        }

        public boolean consultar() 
        {
            consultarReg();
            return true;
        }

        public boolean eliminar()
        {
            try
            {
                if (!eliminarReg())
                    return false;
                //Desplazarse al siguiente registro si es posible.
                if (!rstCab.isLast())
                {
                    rstCab.next();
                    cargarReg();
                }
                else
                {
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                }
                blnHayCam=false;
            }
            catch (java.sql.SQLException e)
            {
                return true;
            }
            return true;
        }

        public boolean insertar()
        {
            if (!insertarReg())
                return false;
            return true;
        }

        public boolean modificar() 
        {
           // if (verificaCambioDeCuenta()) {
                if (!actualizarReg())
                return false;
            //}else{
              //  return false;
            //}
            return true;
        }
        
        public boolean cancelar()
        {
            boolean blnRes=true;
            try
            {
                if (blnHayCam)
                {
                    if (objTooBar.getEstado()=='n' || objTooBar.getEstado()=='m')
                    {
                        if (!isRegPro())
                            return false;
                    }
                }
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            limpiarFrm();
            blnHayCam=false;
            return blnRes;
        }
        
        public boolean vistaPreliminar()
        {
            return true;
        }
        
        public boolean aceptar()
        {
            return true;
        }
        
        public boolean imprimir()
        {
            return true;
        }
        
        public boolean beforeInsertar(){
            if (!isCamVal())
                return false;
            return true;
        }
        
        public boolean beforeConsultar()
        {
            return true;
        }

        public boolean beforeModificar()
        {
            if (verificaCambioDeCuenta()) {
                strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible modificar un documento eliminado.");
                return false;
            }
            if (!isCamVal())
                return false;
            }else{
                return false;
            }
            return true;
        }

        public boolean beforeEliminar()
        {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                mostrarMsgInf("El documento ya está ELIMINADO.\nNo es posible eliminar un documento eliminado.");
                return false;
            }
            if (optCtaCab.isSelected())
            {
                if (isCtaCabCtaDet())
                {
                    mostrarMsgInf("La cuenta contable que desea eliminar tiene cuentas que dependen de ella.\nNo será posible eliminar la cuenta mientras no haya eliminado la(s) cuenta(s) que dependen de ella.");
                    return false;
                }
            }
            
            //Validar que el "Código alterno" no se repita.
            if (!txtCodSis.getText().equals("")){
                strSQL="";
                strSQL+="select co_cta";
                strSQL+=" from tbm_salCta";
                strSQL+=" where co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and co_cta=" + txtCodSis.getText() + "";
                
                if (!objUti.isCodigoUnico(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL))
                {
                    tabFrm.setSelectedIndex(0);
                    mostrarMsgInf("<HTML>La cuenta que desea eliminar tiene saldo.<BR>No se puede eliminar una cuenta que tenga saldo.</HTML>");
                    return false;
                }
            }
            return true;
        }

        public boolean beforeAnular()
        {
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado"))
            {
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible anular un documento eliminado.");
                return false;
            }
            if (strAux.equals("Anulado"))
            {
                mostrarMsgInf("El documento ya está ANULADO.\nNo es posible anular un documento anulado.");
                return false;
            }
            return true;
        }

        public boolean beforeImprimir()
        {
            return true;
        }

        public boolean beforeVistaPreliminar()
        {
            return true;
        }

        public boolean beforeAceptar()
        {
            return true;
        }
        
        public boolean beforeCancelar()
        {
            return true;
        }
        
        public boolean afterInsertar()
        {
            blnHayCam=false;
            objTooBar.setEstado('w');
            consultarRegIns();
            blnHayCam=false;
            return true;
        }

        public boolean afterConsultar()
        {
            return true;
        }

        public boolean afterModificar()
        {
            if(chkCtaEfe.isSelected())
                strEstIniCtaFluEfe="S";
            else
                strEstIniCtaFluEfe="N";
            blnHayCam=false;
            return true;
        }

        public boolean afterEliminar()
        {
            return true;
        }

        public boolean afterAnular()
        {
            return true;
        }

        public boolean afterImprimir()
        {
            return true;
        }

        public boolean afterVistaPreliminar()
        {
            return true;
        }

        public boolean afterAceptar()
        {
            return true;
        }
        
        public boolean afterCancelar()
        {
            return true;
        }

        
        
    }
    
    /**
     * Esta función determina si los campos son válidos.
     * @return true: Si los campos son válidos.
     * <BR>false: En el caso contrario.
     */
    private boolean isCamVal()
    {   
       String strAux;
        //Obtener el número de cuenta.
        strNumCta=getNumCta();
        System.out.println("");
        //Validar el "Número de cuenta".
        if (strNumCta.length()>0)
        {
            //Validar que el "Número de cuenta" sea correcto.
            if (strNumCta.startsWith(".") || strNumCta.indexOf("..")>0)
            {
                tabFrm.setSelectedIndex(0);
                mostrarMsgInf("<HTML>El número de cuenta <FONT COLOR=\"blue\">" + strNumCta + "</FONT> es incorrecto.<BR>Escriba un número de cuenta válido y vuelva a intentarlo.</HTML>");
                setFocTxtNivVac();
                return false;
            }
            else
            {   
                /*
                //Validar que el "Número de cuenta" no exista en la Base de Datos.
                if (isNumCtaBasDat())
                {
                    tabFrm.setSelectedIndex(0);
                    mostrarMsgInf("<HTML>El número de cuenta <FONT COLOR=\"blue\">" + strNumCta + "</FONT> ya existe.<BR>Escriba otro número de cuenta y vuelva a intentarlo.</HTML>");
                    setFocTxtNivVac();
                    return false;
                }*/
                
                if (objTooBar.getEstado() == 'n')
                {  //Estado 'n' = Modo Insertar
                   strAux = ValNumCta();
                
                   if (!strAux.equals("true"))
                   {   tabFrm.setSelectedIndex(0);
                       mostrarMsgInf(strAux);
                       setFocTxtNivVac();
                       return false;
                   }
                }
                else if (isNumCtaBasDat())
                {   //Validar que el "Número de cuenta" no exista en la Base de Datos.
                    tabFrm.setSelectedIndex(0);
                    mostrarMsgInf("<HTML>El número de cuenta <FONT COLOR=\"blue\">" + strNumCta + "</FONT> ya existe.<BR>Escriba otro número de cuenta y vuelva a intentarlo.</HTML>");
                    setFocTxtNivVac();
                    return false;
                }
                //else
                //{
                //Validar que el "Número de cuenta" tenga una cuenta padre solo si no es una cuenta de nivel 1.
                if (strNumCta.indexOf(".")!=-1)
                {
                    intCodCtaPad=getCodCtaPad(objParSis.getCodigoEmpresa());
                    if (intCodCtaPad==-1)
                    {
                        tabFrm.setSelectedIndex(0);
                        mostrarMsgInf("<HTML>No existe una cuenta de cabecera para la cuenta <FONT COLOR=\"blue\">" + strNumCta + "</FONT>.<BR>Escriba otro número de cuenta o cree la cuenta de cabecera <FONT COLOR=\"blue\">" + strNumCta.substring(0, strNumCta.lastIndexOf(".")) + "</FONT> y vuelva a intentarlo.</HTML>");
                        setFocTxtNivVac();
                        return false;
                    }
                }
                else
                    optCtaCab.setSelected(true);
                //}
            }
        }
        else
        {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Número de cuenta</FONT> es obligatorio.<BR>Escriba un número de cuenta y vuelva a intentarlo.</HTML>");
            txtNiv1.requestFocus();
            return false;
        }
        //Validar el "Nombre de la cuenta".
        if (txtNom.getText().equals(""))
        {
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Nombre de cuenta</FONT> es obligatorio.<BR>Escriba un nombre para la cuenta y vuelva a intentarlo.</HTML>");
            txtNom.requestFocus();
            return false;
        }
        //Validar que el "Código alterno" no se repita.
        if (!txtCodAlt.getText().equals(""))
        {
            strSQL="";
            strSQL+="SELECT a1.tx_codAlt ";
            strSQL+="FROM tbm_plaCta AS a1 ";
            strSQL+="WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + " ";
            strSQL+="AND a1.tx_codAlt='" + txtCodAlt.getText().replaceAll("'", "''") + "' ";
            if (objTooBar.getEstado()=='m')
                strSQL+="AND a1.co_cta<>" + txtCodSis.getText();
            if (!objUti.isCodigoUnico(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL))
            {
                tabFrm.setSelectedIndex(0);
                mostrarMsgInf("<HTML>El código <FONT COLOR=\"blue\">" + txtCodAlt.getText() + "</FONT> ya existe.<BR>Escriba otro código y vuelva a intentarlo.</HTML>");
                txtCodAlt.selectAll();
                txtCodAlt.requestFocus();
                return false;
            }
        }
        
        /* 
         * Estado "Modificar"
         * Valida que la cuenta que se modifica si es cambiada de nivel, no contenga cuentas de detalle.
         */
        if( (objTooBar.getEstado()=='m')  || (objTooBar.getEstado()=='x')  ){
            strSQL="";
            strSQL+="SELECT co_cta FROM tbm_placta";
            strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
            strSQL+=" AND ne_pad=" + txtCodSis.getText() + "";
            if (!objUti.isCodigoUnico(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL)){
                mostrarMsgInf("<HTML>No se puede modificar una cuenta de cabecera que contiene cuenta(s) de detalle.</HTML>");
                return false;
            }
        }
        return true;
    }
    
    /**
     * Esta función valida si el número de cuenta es correcto.
     * @return true: Si el numero de cuenta esta correcto.
     * <BR>false: En el caso contrario.
     */
    private String ValNumCta()
    {
        String strRes = "", strNomEmp, strAux1, strAux2;
        int intCodEmp, intNivCta, intCodCtaMay, intSecMay, intAux, i, j;
        ArrayList arlRegEmp, arlDatEmp, arlRegSecMay, arlDatSecMay;
        Statement stmLoc;
        ResultSet rstLoc;
        
        try
        {   con = DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con != null)
            {   stmLoc = con.createStatement();
                arlDatEmp = new ArrayList();
                strSQL = "select co_emp, tx_nom from tbm_emp where st_reg = 'A'";
                rstLoc = stmLoc.executeQuery(strSQL);
                
                while (rstLoc.next())
                {  arlRegEmp = new ArrayList();
                   arlRegEmp.add(0, "" + rstLoc.getInt("co_emp"));
                   arlRegEmp.add(1, "" + rstLoc.getString("tx_nom"));
                   arlDatEmp.add(arlRegEmp);
                }
                
                i = 0;
                intNivCta = getNivCta();
                
                while (i < arlDatEmp.size())
                {  intCodEmp = objUti.getIntValueAt(arlDatEmp, i, 0);
                   strNomEmp = objUti.getStringValueAt(arlDatEmp, i, 1);
                   //Validar que el "Numero de cuenta" no exista en la Base de Datos
                   strSQL =  "SELECT co_cta FROM tbm_plaCta ";
                   strSQL += "WHERE co_emp = " + intCodEmp + " AND tx_codCta = '" + strNumCta + "'";
                   rstLoc = stmLoc.executeQuery(strSQL);
                   
                   if (rstLoc.next() == true)
                   {  if (intNivCta > 1)
                      {  //Como el "Numero de cuenta" ya existe en la Base de Datos, se va a buscar en todas las empresas y se va a obtener el mayor numero 
                         //secuencial de las Cuentas Hijas pertenecientes a la misma Cuenta padre. Ej: Si estoy en Tuval, y se desea crear el Num. de cuenta 
                         //1.01.04.01.298, y sale el mensaje que ya existe en la base de datos, para el padre de esta cuenta (en este caso 1.01.04.01) se va 
                         //a buscar para todas las empresas cual es la cuenta que tenga el mayor numero secuencial en el nivel 5 y mostrarle un mensaje al 
                         //usuario para que sepa cual es el numero secuencial que debera usar.
                         strSQL =  "select a1.co_emp, a1.tx_codcta from tbm_placta as a1 ";
                         strSQL += "inner join ( select max(co_cta) as co_cta, co_emp ";
                         strSQL += "             from tbm_placta ";
                         //En la condicion "tx_codcta like" va la Cta. Padre
                         strSQL += "             where tx_codcta like '" + strNumCta.substring(0, strNumCta.lastIndexOf(".")) + "%' ";
                         strSQL += "             and ne_niv = " + intNivCta + " ";
                         strSQL += "             group by co_emp ";
                         strSQL += "           ) as b ";
                         strSQL += "on a1.co_emp = b.co_emp and a1.co_cta = b.co_cta";
                         rstLoc = stmLoc.executeQuery(strSQL);
                         arlDatSecMay = new ArrayList();
                         
                         while (rstLoc.next())
                         {  strAux1 = rstLoc.getString("tx_codcta");
                            strAux2 = strAux1.substring(strAux1.lastIndexOf(".") + 1, strAux1.length()); //Ej: Si la cadena es 1.01.04.01.298 extraera "298"
                            arlRegSecMay = new ArrayList();
                            arlRegSecMay.add(0, "" + rstLoc.getInt("co_emp"));
                            arlRegSecMay.add(1, "" + strAux2);
                            arlDatSecMay.add(arlRegSecMay);
                         }
                         
                         intSecMay = -1;
                         
                         for (j = 0; j < arlDatSecMay.size(); j++)
                         {  //Se va a barrer el arreglo para obtener el mayor numero secuencial
                            intAux = objUti.getIntValueAt(arlDatSecMay, j, 1);
                            
                            if (intAux > intSecMay)
                               intSecMay = intAux;
                         }
                            
                         strAux1 = strNumCta.substring(0, strNumCta.lastIndexOf(".")) + "." + intSecMay;
                         strRes =  "<HTML>En " + strNomEmp + " el número de cuenta <FONT COLOR=\"blue\">" + strNumCta + "</FONT> ya existe.<BR>";
                         strRes += "<HTML>Buscando en todas las empresas, se encontró que el mayor secuencial de las Cuentas de Detalle es <FONT COLOR=\"blue\">" + strAux1 + "</FONT>.<BR>";
                         strRes += "Escriba otro número de cuenta el cual deberá ser mayor al encontrado y vuelva a intentarlo.</HTML>";
                         return strRes;
                      } //if (intNivCta > 1)
                      else
                      {  strRes = "<HTML>En " + strNomEmp + " el número de cuenta <FONT COLOR=\"blue\">" + strNumCta + "</FONT> ya existe.<BR>Escriba otro número de cuenta y vuelva a intentarlo.</HTML>";
                         return strRes;
                      }
                   } //if (rstLoc.next() == true)
                   i++;
                } //while (i < arlDatEmp.size())
                
                rstLoc.close();
                stmLoc.close();
                con.close();
                rstLoc = null;
                stmLoc = null;
                con = null;
                strRes = "true";
            }
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(null, e);
            strRes = "Error en funcion ValNumCta. " + e.toString();
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(null, e);
            strRes = "Error en funcion ValNumCta. " + e.toString();
        }
        
        return strRes;
    }

    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

    /**
     * Esta función muestra un mensaje de advertencia al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos se han cargado
     * con errores y que debe revisar dichos datos.
     */
    private void mostrarMsgAdv(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        if (strMsg.equals(""))
            strMsg="<HTML>Este registro tiene <FONT COLOR=\"red\">problemas</FONT>. <BR>Notifíquelo a su administrador del sistema.</HTML>";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.WARNING_MESSAGE);
    }

    /**
     * Esta función inserta el registro en la base de datos.
     * @return true: Si se pudo insertar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarReg()
    {
        boolean blnRes=false, blnExiRollback;
        int intCodEmp, i;
        ArrayList arlRegEmp, arlDatEmp;
        Statement stmLoc;
        ResultSet rstLoc;
        
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null)
            {   stmLoc = con.createStatement();
                blnExiRollback = false;
                i = 0;
                arlDatEmp = new ArrayList();
                strSQL = "select co_emp from tbm_emp where st_reg = 'A'";
                rstLoc = stmLoc.executeQuery(strSQL);
                
                while (rstLoc.next())
                {  arlRegEmp = new ArrayList();
                   arlRegEmp.add(0, "" + rstLoc.getInt("co_emp"));
                   arlDatEmp.add(arlRegEmp);
                }
                
                while (i < arlDatEmp.size() && blnExiRollback == false)
                {  intCodEmp = objUti.getIntValueAt(arlDatEmp, i, 0);
                   //Validar que el "Numero de cuenta" no exista en la Base de Datos
                   //strSQL =  "SELECT co_cta FROM tbm_plaCta ";
                   //strSQL += "WHERE co_emp = " + intCodEmp + " AND tx_codCta = '" + strNumCta + "'";
                   //rstLoc = stmLoc.executeQuery(strSQL);
                   
                   //if (rstLoc.next() == false)
                     if (insertarCab(intCodEmp)){
                         if (insertaTbmSalCta(intCodEmp)){
                            if (insertaTbmSalCtaEfe(intCodEmp)){
     //                        if(setPermisosUsuarioCuenta()){
                               //con.commit();
                               //blnRes=true;
     //                          }
     //                          else
     //                             con.rollback();
                            }
                            else
                            {  con.rollback();
                               blnExiRollback = true;
                            }
                         }
                         else
                         {  con.rollback();
                            blnExiRollback = true;
                         }
                      }
                      else
                      {  con.rollback();
                         blnExiRollback = true;
                      }
                   i++;
                }
                
                if (blnExiRollback == false)
                {  con.commit();
                   blnRes = true;
                }
                
                rstLoc.close();
                rstLoc = null;
                stmLoc.close();
                stmLoc = null;
                con.close();
                con = null;
            }
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    
    private boolean insertaTbmSalCta(int intCodEmp){
        boolean blnRes=true;
        int intAni=0;
        String strMes="";
        double dblSal=0.00;
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+=" select extract('year' FROM CURRENT_TIMESTAMP) as anio";
                rst=stm.executeQuery(strSQL);
                while (rst.next()){
                    intAni=rst.getInt("anio");
                }
                for(int i=1; i<=12; i++){
                    strMes=(i<=9?"0"+i:""+i);
                    strSQL="";
                    strSQL+="INSERT INTO tbm_salcta(";
                    strSQL+=" co_emp, co_cta, co_per, nd_salcta, st_regrep)";
                    strSQL+=" VALUES(";
                    //strSQL+="" + objParSis.getCodigoEmpresa() + ",";
                    strSQL+="" + intCodEmp + ",";
                    strSQL+="" + txtCodSis.getText() + ",";
                    strSQL+="" + intAni + "" + strMes + ",";
                    strSQL+="" + dblSal + ",";
                    strSQL+="'I'";
                    strSQL+=")";
                    System.out.println("SQL DE insertaCuentasTbmSalCta: " + strSQL);
                    stm.executeUpdate(strSQL);
                }
                stm.close();
                stm=null;
                rst.close();
                rst=null;
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean insertaTbmSalCtaEfe(int intCodEmp){
        boolean blnRes=true;
        int intAni=0;
        String strMes="";
        double dblSal=0.00;
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+=" select extract('year' FROM CURRENT_TIMESTAMP) as anio";
                rst=stm.executeQuery(strSQL);
                while (rst.next()){
                    intAni=rst.getInt("anio");
                }

                for(int i=1; i<=12; i++){
                    strMes=(i<=9?"0"+i:""+i);
                    strSQL="";
                    strSQL+="INSERT INTO tbm_salctaEfe(";
                    strSQL+=" co_emp, co_cta, co_per, nd_salcta, st_regrep)";//el campo ne_numdiaesp no lo coloque porq tiene default '0'
                    strSQL+=" VALUES(";
                    //strSQL+="" + objParSis.getCodigoEmpresa() + ",";
                    strSQL+="" + intCodEmp + ",";
                    strSQL+="" + txtCodSis.getText() + ",";
                    strSQL+="" + intAni + "" + strMes + ",";
                    strSQL+="" + dblSal + ",";
                    strSQL+="'I'";
                    strSQL+=")";
                    System.out.println("insertaTbmSalCtaEfe: " + strSQL);
                    stm.executeUpdate(strSQL);
                }
                stm.close();
                stm=null;
                rst.close();
                rst=null;
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean deleteTbmSalCtaEfe()
    {
        boolean blnRes=true;
        int intAni=0;
        String strMes="";
        double dblSal=0.00;
        try{
            if(con!=null)
            {
                stm=con.createStatement();
                strSQL="";
                strSQL+="DELETE FROM tbm_salctaEfe";
                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() +"";
                strSQL+=" AND co_cta=" + txtCodSis.getText() + "";
                System.out.println("deleteTbmSalCtaEfe: " + strSQL);
                stm.executeUpdate(strSQL);
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    /**
     * Esta función permite consultar el registro insertado.
     * @return true: Si se pudo consultar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean consultarRegIns()
    {
        int intCodEmp;
        boolean blnRes=true;
        try
        {
            intCodEmp=objParSis.getCodigoEmpresa();
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null)
            {
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                strSQL="";
                strSQL+="SELECT a1.co_emp, a1.co_cta";
                strSQL+=" FROM tbm_plaCta AS a1";
                strSQL+=" WHERE a1.co_emp=" + intCodEmp;
                strSQL+=" AND a1.co_cta=" + txtCodSis.getText();
                rstCab=stmCab.executeQuery(strSQL);
                if (rstCab.next())
                {
                    rstCab.last();
                    objTooBar.setMenSis("Se encontró " + rstCab.getRow() + " registro");
                    objTooBar.setPosicionRelativa("1 / 1");
                    objTooBar.setEstadoRegistro(cboEstReg.getSelectedItem().toString());
                    rstCab.first();
                    strSQLCon=strSQL;
                }
                else
                {
                    mostrarMsgInf("No se ha encontrado ningún registro que cumpla el criterio de búsqueda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean consultarReg()
    {
        int intCodEmp;
        boolean blnRes=true;
        try
        {
            intCodEmp=objParSis.getCodigoEmpresa();
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null)
            {
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                strSQL="";
                strSQL+="SELECT a1.co_emp, a1.co_cta";
                strSQL+=" FROM tbm_plaCta AS a1";
                strSQL+=" WHERE a1.co_emp=" + intCodEmp;
                strAux=txtCodSis.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_cta = '" + strAux.replaceAll("'", "''") + "'";
                strAux=txtCodAlt.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.tx_codAlt LIKE '" + strAux.replaceAll("'", "''") + "'";
                strAux=txtNiv1.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.tx_niv1 LIKE '" + strAux.replaceAll("'", "''") + "'";
                strAux=txtNiv2.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.tx_niv2 LIKE '" + strAux.replaceAll("'", "''") + "'";
                strAux=txtNiv3.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.tx_niv3 LIKE '" + strAux.replaceAll("'", "''") + "'";
                strAux=txtNiv4.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.tx_niv4 LIKE '" + strAux.replaceAll("'", "''") + "'";
                strAux=txtNiv5.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.tx_niv5 LIKE '" + strAux.replaceAll("'", "''") + "'";
                strAux=txtNiv6.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.tx_niv6 LIKE '" + strAux.replaceAll("'", "''") + "'";
                strAux=txtNom.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND LOWER(a1.tx_desLar) LIKE '" + strAux.replaceAll("'", "''").replace('*', '%').toLowerCase() + "'";
                strAux=txaObs1.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND LOWER(a1.tx_obs1) LIKE '" + strAux.replaceAll("'", "''").replace('*', '%').toLowerCase() + "'";
                strAux=txaObs2.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND LOWER(a1.tx_obs2) LIKE '" + strAux.replaceAll("'", "''").replace('*', '%').toLowerCase() + "'";
                strSQL+=" ORDER BY a1.co_emp, a1.co_cta";
                rstCab=stmCab.executeQuery(strSQL);
                if (rstCab.next())
                {
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                    strSQLCon=strSQL;
                }
                else
                {
                    mostrarMsgInf("No se ha encontrado ningún registro que cumpla el criterio de búsqueda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función actualiza el registro en la base de datos.
     * @return true: Si se pudo actualizar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarReg()
    {
        boolean blnRes=false;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                System.out.println("strEstIniCtaFluEfe: " + strEstIniCtaFluEfe);
                if (actualizarCab()){
                    if(  (strEstIniCtaFluEfe.equals("N"))  && chkCtaEfe.isSelected() ){
                        if(insertaTbmSalCtaEfe(objParSis.getCodigoEmpresa())){
                            con.commit();
                            blnRes=true;
                        }
                        else
                            con.rollback();
                    }
                    else if(  (strEstIniCtaFluEfe.equals("S"))  && ( ! chkCtaEfe.isSelected()) ){
                        if(deleteTbmSalCtaEfe()){
                            con.commit();
                            blnRes=true;
                        }
                        else
                            con.rollback();
                    }
                    else{
                        con.commit();
                        blnRes=true;
                    }
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función elimina el registro de la base de datos.
     * @return true: Si se pudo eliminar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminarReg()
    {
        boolean blnRes=false;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null)
            {
                if (eliminarCab())
                {
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite insertar la cabecera de un registro.
     * @return true: Si se pudo insertar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean insertarCab(int intCodEmp)
    {
        int intCodUsr, intUltReg;
        boolean blnRes=true;
        ResultSet rstLoc;
        
        try
        {
            if (con!=null)
            {
                stm=con.createStatement();
                //intCodEmp=objParSis.getCodigoEmpresa();
                intCodUsr=objParSis.getCodigoUsuario();
                //Obtener el código del último registro.
                strSQL="";
                strSQL+="SELECT MAX(a1.co_cta)";
                strSQL+=" FROM tbm_plaCta AS a1";
                strSQL+=" WHERE a1.co_emp=" + intCodEmp;
                intUltReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intUltReg==-1)
                    return false;
                intUltReg++;
                txtCodSis.setText("" + intUltReg);
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;
                //Armar la sentencia SQL.
                intCodCta=intUltReg;
                
                //Se va a obtener el codigo de la Cuenta de Cabecera
                strSQL =  "SELECT co_cta FROM tbm_plaCta ";
                strSQL += "WHERE co_emp = " + intCodEmp + " ";
                strSQL += "AND tx_codCta = '" + strNumCta.substring(0, strNumCta.lastIndexOf(".")) + "' ";
                strSQL += "AND tx_tipCta = 'C'";
                
                if (objTooBar.getEstado()=='m')
                    strSQL+="AND co_cta<>" + txtCodSis.getText();
                
                rstLoc = stm.executeQuery(strSQL);
                intCodCtaPad = 0;
                
                if (rstLoc.next())
                   intCodCtaPad = rstLoc.getInt("co_cta");
                
                strSQL="";
                strSQL+="INSERT INTO tbm_plaCta (co_emp, co_cta, tx_codAlt, tx_desLar, ne_pad, ne_niv, tx_niv1, tx_niv2, tx_niv3";
                strSQL+=", tx_niv4, tx_niv5, tx_niv6, tx_codCta, tx_tipCta, tx_natCta, st_aut, st_ctaFluEfe, st_ctaFluFon, st_ctaPre";
                strSQL+=", tx_obs1, tx_obs2, st_reg, fe_ing, fe_ultMod, co_usrIng, co_usrMod)";
                strSQL+=" VALUES (";
                strSQL+="" + intCodEmp; //co_emp
                strSQL+=", " + intUltReg; //co_cta
                strSQL+=", " + objUti.codificar(txtCodAlt.getText()); //tx_codAlt
                strSQL+=", " + objUti.codificar(txtNom.getText()); //tx_desLar
                strSQL+=", " + intCodCtaPad; //ne_pad
                strSQL+="," + getNivCta(); //ne_niv
                strSQL+=", " + objUti.codificar(txtNiv1.getText()); //tx_niv1
                strSQL+=", " + objUti.codificar(txtNiv2.getText()); //tx_niv2
                strSQL+=", " + objUti.codificar(txtNiv3.getText()); //tx_niv3
                strSQL+=", " + objUti.codificar(txtNiv4.getText()); //tx_niv4
                strSQL+=", " + objUti.codificar(txtNiv5.getText()); //tx_niv5
                strSQL+=", " + objUti.codificar(txtNiv6.getText()); //tx_niv6
                strSQL+=", " + objUti.codificar(strNumCta); //tx_codCta
                strSQL+=", " + (optCtaCab.isSelected()?"'C'":"'D'"); //tx_tipCta
                strSQL+=", " + (optNatDeu.isSelected()?"'D'":"'H'"); //tx_natCta
                strSQL+=", 'N'"; //st_aut
                if(chkCtaEfe.isSelected())
                    strSQL+=", 'S'"; //st_ctaFluEfe
                else
                    strSQL+=", 'N'"; //st_ctaFluEfe
                strSQL+=", 'N'"; //st_ctaFluFon
                strSQL+=", 'N'"; //st_ctaPre
                strSQL+=", " + objUti.codificar(txaObs1.getText()); //tx_obs1
                strSQL+=", " + objUti.codificar(txaObs2.getText()); //tx_obs2
                strSQL+=", '" + vecEstReg.get(cboEstReg.getSelectedIndex()) + "'"; //st_reg
                strAux=objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos());
                strSQL+=", '" + strAux + "'"; //fe_ing
                strSQL+=", '" + strAux + "'"; //fe_ultMod
                strSQL+=", " + intCodUsr; //co_usrIng
                strSQL+=", " + intCodUsr; //co_usrMod
                strSQL+=")";
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite cargar el registro seleccionado.
     * @return true: Si se pudo cargar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarReg()
    {
        boolean blnRes=true;
        try
        {
            if (cargarCabReg())
            {
                ;
            }
            blnHayCam=false;
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }
    
    /**
     * Esta función permite cargar la cabecera del registro seleccionado.
     * @return true: Si se pudo cargar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarCabReg()
    {
        int intPosRel;
        boolean blnRes=true;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                strSQL="";
                strSQL+="SELECT a1.co_cta, a1.tx_codAlt, a1.tx_desLar, a1.tx_niv1, a1.tx_niv2, a1.tx_niv3, a1.tx_niv4";
                strSQL+=", a1.tx_niv5, a1.tx_niv6, a1.tx_tipCta, a1.tx_natCta, a1.st_aut, a1.tx_obs1, a1.tx_obs2, a1.st_reg, a1.st_ctaFluEfe";
                strSQL+=" FROM tbm_plaCta AS a1";
                strSQL+=" WHERE a1.co_emp=" + rstCab.getString("co_emp");
                strSQL+=" AND a1.co_cta=" + rstCab.getString("co_cta");
                rst=stm.executeQuery(strSQL);
                if (rst.next())
                {
                    strAux=rst.getString("co_cta");
                    txtCodSis.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_codAlt");
                    txtCodAlt.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_niv1");
                    txtNiv1.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_niv2");
                    txtNiv2.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_niv3");
                    txtNiv3.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_niv4");
                    txtNiv4.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_niv5");
                    txtNiv5.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_niv6");
                    txtNiv6.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_desLar");
                    txtNom.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_tipCta");
                    if (strAux.equals("C"))
                        optCtaCab.setSelected(true);
                    else
                        optCtaDet.setSelected(true);
                    strAux=rst.getString("tx_natCta");
                    if (strAux.equals("D"))
                        optNatDeu.setSelected(true);
                    else
                        optNatAcr.setSelected(true);
                    
                    
                    strAux=rst.getString("st_aut");
                    strAux=rst.getString("tx_obs1");
                    txaObs1.setText((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_obs2");
                    txaObs2.setText((strAux==null)?"":strAux);
                    //Mostrar el estado del registro.
                    strAux=rst.getString("st_reg");
                    if (!objUti.setItemCombo(cboEstReg, vecEstReg, strAux))
                        blnRes=false;
                    objTooBar.setEstadoRegistro("" + cboEstReg.getSelectedItem());
                    
                    strEstIniCtaFluEfe=rst.getObject("st_ctaFluEfe")==null?"":rst.getString("st_ctaFluEfe");
                    if(strEstIniCtaFluEfe.equals("S"))
                        chkCtaEfe.setSelected(true);
                    else
                        chkCtaEfe.setSelected(false);
                }
                else
                {
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                    blnRes=false;
                }
            }
            rst.close();
            stm.close();
            con.close();
            rst=null;
            stm=null;
            con=null;
            //Mostrar la posición relativa del registro.
            intPosRel=rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite insertar la cabecera de un registro.
     * @return true: Si se pudo insertar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarCab()
    {
        boolean blnRes=true;
        try
        {
            if (con!=null)
            {
                stm=con.createStatement();
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_plaCta";
                strSQL+=" SET tx_codAlt=" + objUti.codificar(txtCodAlt.getText());
                strSQL+=", tx_desLar=" + objUti.codificar(txtNom.getText());
                strSQL+=", ne_pad=" + intCodCtaPad;
                strSQL+=", ne_niv=" + getNivCta();
                strSQL+=", tx_niv1=" + objUti.codificar(txtNiv1.getText());
                strSQL+=", tx_niv2=" + objUti.codificar(txtNiv2.getText());
                strSQL+=", tx_niv3=" + objUti.codificar(txtNiv3.getText());
                strSQL+=", tx_niv4=" + objUti.codificar(txtNiv4.getText());
                strSQL+=", tx_niv5=" + objUti.codificar(txtNiv5.getText());
                strSQL+=", tx_niv6=" + objUti.codificar(txtNiv6.getText());
                strSQL+=", tx_codCta=" + objUti.codificar(getNumCta());
                strSQL+=", tx_tipCta=" + (optCtaCab.isSelected()?"'C'":"'D'");
                strSQL+=", tx_natCta=" + (optNatDeu.isSelected()?"'D'":"'H'");
                strSQL+=", tx_obs1=" + objUti.codificar(txaObs1.getText());
                strSQL+=", tx_obs2=" + objUti.codificar(txaObs2.getText());
                strSQL+=", st_reg='" + vecEstReg.get(cboEstReg.getSelectedIndex()) + "'";
                strSQL+=", fe_ultMod='" + objUti.formatearFecha(datFecAux, objParSis.getFormatoFechaHoraBaseDatos()) + "'";
                strSQL+=", co_usrMod=" + objParSis.getCodigoUsuario();
                if(chkCtaEfe.isSelected())
                    strSQL+=", st_ctaFluEfe='S'";
                else
                    strSQL+=", st_ctaFluEfe='N'";
                strSQL+=" WHERE co_emp=" + rstCab.getString("co_emp");
                strSQL+=" AND co_cta=" + rstCab.getString("co_cta");
                System.out.println("actualizarCab: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
                datFecAux=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite eliminar la cabecera de un registro.
     * @return true: Si se pudo eliminar la cabecera del registro.
     * <BR>false: En el caso contrario.
     */
    private boolean eliminarCab()
    {
        boolean blnRes=true;
        try
        {
            if (con!=null)
            {
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="DELETE FROM tbm_plaCta";
                strSQL+=" WHERE co_emp=" + rstCab.getString("co_emp");
                strSQL+=" AND co_cta=" + rstCab.getString("co_cta");
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta función permite limpiar el formulario.
     * @return true: Si se pudo limpiar la ventana sin ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean limpiarFrm()
    {
        boolean blnRes=true;
        try
        {
            txtCodSis.setText("");
            txtCodAlt.setText("");
            txtNiv1.setText("");
            txtNiv2.setText("");
            txtNiv3.setText("");
            txtNiv4.setText("");
            txtNiv5.setText("");
            txtNiv6.setText("");
            txtNom.setText("");
            txaObs1.setText("");
            txaObs2.setText("");
            cboEstReg.setSelectedIndex(-1);
        }
        catch (Exception e)
        {
            blnRes=false;
        }
        return blnRes;
    }

    /**
     * Esta función configura la "Ventana de consulta" que será utilizada para
     * mostrar las "Cuentas contables".
     */
    private boolean configurarVenConCta()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.tx_niv1");
            arlCam.add("a1.tx_niv2");
            arlCam.add("a1.tx_niv3");
            arlCam.add("a1.tx_niv4");
            arlCam.add("a1.tx_niv5");
            arlCam.add("a1.tx_niv6");
            arlCam.add("a1.tx_codCta");
            arlCam.add("a1.tx_desLar");
            arlCam.add("a1.tx_tipCta");
            arlCam.add("a1.tx_natCta");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Nivel 1");
            arlAli.add("Nivel 2");
            arlAli.add("Nivel 3");
            arlAli.add("Nivel 4");
            arlAli.add("Nivel 5");
            arlAli.add("Nivel 6");
            arlAli.add("Cuenta");
            arlAli.add("Nombre");
            arlAli.add("Tip.Cta.");
            arlAli.add("Nat.Cta.");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("50");
            arlAncCol.add("50");
            arlAncCol.add("50");
            arlAncCol.add("50");
            arlAncCol.add("50");
            arlAncCol.add("100");
            arlAncCol.add("324");
            arlAncCol.add("60");
            arlAncCol.add("60");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.tx_niv1, a1.tx_niv2, a1.tx_niv3, a1.tx_niv4, a1.tx_niv5, a1.tx_niv6, a1.tx_codCta, a1.tx_desLar, a1.tx_tipCta, a1.tx_natCta";
            strSQL+=" FROM tbm_plaCta AS a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" ORDER BY a1.tx_codCta";
            //Ocultar columnas.
            int intColOcu[]=new int[6];
            intColOcu[0]=1;
            intColOcu[1]=2;
            intColOcu[2]=3;
            intColOcu[3]=4;
            intColOcu[4]=5;
            intColOcu[5]=6;
            vcoNumCta=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de cuentas contables", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoNumCta.setConfiguracionColumna(9, javax.swing.JLabel.CENTER);
            vcoNumCta.setConfiguracionColumna(10, javax.swing.JLabel.CENTER);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConCta(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoNumCta.setCampoBusqueda(0);
                    vcoNumCta.show();
                    if (vcoNumCta.getSelectedButton()==vcoNumCta.INT_BUT_ACE)
                    {
                        //Validar que sólo se carge la cuenta de mayor.
                        if (vcoNumCta.getValueAt(9).equals("C"))
                        {
                            txtNiv1.setText(vcoNumCta.getValueAt(1));
                            txtNiv2.setText(vcoNumCta.getValueAt(2));
                            txtNiv3.setText(vcoNumCta.getValueAt(3));
                            txtNiv4.setText(vcoNumCta.getValueAt(4));
                            txtNiv5.setText(vcoNumCta.getValueAt(5));
                            txtNiv6.setText(vcoNumCta.getValueAt(6));
                        }
                        else
                        {
                            txtNiv1.setText(vcoNumCta.getValueAt(1));
                            txtNiv2.setText(vcoNumCta.getValueAt(2));
                            txtNiv3.setText(vcoNumCta.getValueAt(3));
                            txtNiv4.setText(vcoNumCta.getValueAt(4));
                            txtNiv5.setText(vcoNumCta.getValueAt(5));
                            txtNiv6.setText(vcoNumCta.getValueAt(6));
                            //Borrar el último nivel.
                            if (txtNiv6.getText().length()>0)
                                txtNiv6.setText("");
                            else if (txtNiv5.getText().length()>0)
                                txtNiv5.setText("");
                            else if (txtNiv4.getText().length()>0)
                                txtNiv4.setText("");
                            else if (txtNiv3.getText().length()>0)
                                txtNiv3.setText("");
                            else if (txtNiv2.getText().length()>0)
                                txtNiv2.setText("");
                            else if (txtNiv1.getText().length()>0)
                                txtNiv1.setText("");
                        }
                        //Seleccionar el campo "Naturaleza de la cuenta".
                        if (vcoNumCta.getValueAt(10).equals("D"))
                            optNatDeu.setSelected(true);
                        else
                            optNatAcr.setSelected(true);
                        //Ubicar el foco en el JTextField adecuado.
                        setFocTxtNivVac();
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta clase implementa la interface DocumentListener que observa los cambios que
     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
     * Se la usa en el sistema para determinar si existe algún cambio que se deba grabar
     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
     * presentará un mensaje advirtiendo que si no guarda los cambios los perderá.
     */
    class ZafDocLis implements javax.swing.event.DocumentListener 
    {
        public void changedUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }
    }

    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private void agregarDocLis()
    {
        txtCodSis.getDocument().addDocumentListener(objDocLis);
        txtCodAlt.getDocument().addDocumentListener(objDocLis);
        txtNiv1.getDocument().addDocumentListener(objDocLis);
        txtNiv2.getDocument().addDocumentListener(objDocLis);
        txtNiv3.getDocument().addDocumentListener(objDocLis);
        txtNiv4.getDocument().addDocumentListener(objDocLis);
        txtNiv5.getDocument().addDocumentListener(objDocLis);
        txtNiv6.getDocument().addDocumentListener(objDocLis);
        txtNom.getDocument().addDocumentListener(objDocLis);
        txaObs1.getDocument().addDocumentListener(objDocLis);
        txaObs2.getDocument().addDocumentListener(objDocLis);
    }   

    /**
     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
     * de tipo texto para poder determinar si su contenido a cambiado o no.
     */
    private boolean isRegPro()
    {
        boolean blnRes=true;
        strAux="¿Desea guardar los cambios efectuados a éste registro?\n";
        strAux+="Si no guarda los cambios perderá toda la información que no haya guardado.";
        switch (mostrarMsgCon(strAux))
        {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado())
                {
                    case 'n': //Insertar
                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }
    
    /**
     * Esta función obtiene el "Número de cuenta" completo. Por ejemplo: 1.01.01.02.09
     */
    public String getNumCta(){
        int i;
        strAux=txtNiv1.getText() + "." + txtNiv2.getText() + "." + txtNiv3.getText() + "." + txtNiv4.getText() + "." + txtNiv5.getText() + "." + txtNiv6.getText();
        for (i=strAux.length()-1; i>=0; i--)
        {
            if (strAux.endsWith("."))
                strAux=strAux.substring(0, i);
            else
                break;
        }
        return strAux;
    }

    
    
    public String getNumCtaPadre(){
        int i;
        int p=0;
        strAux=txtNiv1.getText() + "." + txtNiv2.getText() + "." + txtNiv3.getText() + "." + txtNiv4.getText() + "." + txtNiv5.getText() + "." + txtNiv6.getText();
        for (   i=(strAux.length()-4)  ; i>=0  ; i--){
            if(p==0){
                strAux=strAux.substring(0, i);
                p++;
            }
        }
        return strAux;
    }
    
    
    
    
    /**
     * Esta función establece el foco en uno de los 6 JTextFields utilizados para presentar
     * los niveles de la cuenta. El foco se ubica en el primer JTextField que se encuentra
     * vacío empezando de izquierda a derecha.
     */
    private void setFocTxtNivVac()
    {
        if (txtNiv1.getText().length()==0)
            txtNiv1.requestFocus();
        else if (txtNiv2.getText().length()==0)
            txtNiv2.requestFocus();
        else if (txtNiv3.getText().length()==0)
            txtNiv3.requestFocus();
        else if (txtNiv4.getText().length()==0)
            txtNiv4.requestFocus();
        else if (txtNiv5.getText().length()==0)
            txtNiv5.requestFocus();
        else if (txtNiv6.getText().length()==0)
            txtNiv6.requestFocus();
    }
    
    /**
     * Esta función determina si el número de cuenta ya existe en la base de datos.
     * @return true: Si la cuenta ya existe en la base de datos.
     * <BR>false: En el caso contrario.
     */
    private boolean isNumCtaBasDat()
    {
        boolean blnRes=false;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT co_cta";
                strSQL+=" FROM tbm_plaCta";
                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND tx_codCta='" + strNumCta + "'";
                if (objTooBar.getEstado()=='m')
                    strSQL+="AND co_cta<>" + txtCodSis.getText();
                rst=stm.executeQuery(strSQL);
                if (rst.next())
                {
                    blnRes=true;
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(null, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(null, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función obtiene el código de la cuenta padre.
     * <BR>Por ejemplo:
     * <CENTER>
     * <TABLE BORDER=1>
     *     <TR><TD><I>Código</I></TD><TD><I>Cuenta</I></TD><TD><I>Nombre de la cuenta</I></TD></TR>
     *     <TR><TD>15</TD><TD>1</TD><TD>Activo</TD></TR>
     *     <TR><TD>28</TD><TD>1.01</TD><TD>Activo corriente</TD></TR>
     * </TABLE>
     * </CENTER>
     * La cuenta padre de la cuenta "Activo corriente" es la cuenta "Activo" con lo que se concluye que
     * el código de la cuenta padre de la cuenta "Activo corriente" es 15.
     * @return El código de la cuenta padre.
     * <BR>Nota.-La función retorna <I>-1</I> si no existe una cuenta padre.
     */
    private int getCodCtaPad(int intCodEmp)
    {
        int intRes=-1;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT co_cta";
                strSQL+=" FROM tbm_plaCta";
                //strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" WHERE co_emp=" + intCodEmp;
                strSQL+=" AND tx_codCta='" + strNumCta.substring(0, strNumCta.lastIndexOf(".")) + "'";
                strSQL+=" AND tx_tipCta='C'";
                if (objTooBar.getEstado()=='m')
                    strSQL+="AND co_cta<>" + txtCodSis.getText();
                System.out.println("getCodCtaPad: " + strSQL);
                rst=stm.executeQuery(strSQL);
                if (rst.next())
                {
                    intRes=rst.getInt("co_cta");
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(null, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(null, e);
        }
        return intRes;
    }
    
    /**
     * Esta función obtiene el nivel de la cuenta.
     * <BR>Por ejemplo:
     * <CENTER>
     * <TABLE BORDER=1>
     *     <TR><TD><I>Cuenta</I></TD><TD><I>Nombre de la cuenta</I></TD><TD><I>Nivel</I></TD></TR>
     *     <TR><TD>1</TD><TD>Activo</TD><TD>1</TD></TR>
     *     <TR><TD>1.01</TD><TD>Activo corriente</TD><TD>2</TD></TR>
     *     <TR><TD>1.01.01.02.01</TD><TD>Banco del pichincha</TD><TD>5</TD></TR>
     * </TABLE>
     * </CENTER>
     * @return El nivel de la cuenta.
     * <BR>Nota.-La función retorna <I>-1</I> si ocurre una excepción.
     */
    private int getNivCta()
    {
        int intRes=-1;
        try
        {
            if (!txtNiv1.getText().equals("") && !txtNiv2.getText().equals("") && !txtNiv3.getText().equals("") && !txtNiv4.getText().equals("") && !txtNiv5.getText().equals("") && !txtNiv6.getText().equals(""))
                intRes=6;
            if (!txtNiv1.getText().equals("") && !txtNiv2.getText().equals("") && !txtNiv3.getText().equals("") && !txtNiv4.getText().equals("") && !txtNiv5.getText().equals("") && txtNiv6.getText().equals(""))
                intRes=5;
            if (!txtNiv1.getText().equals("") && !txtNiv2.getText().equals("") && !txtNiv3.getText().equals("") && !txtNiv4.getText().equals("") && txtNiv5.getText().equals("") && txtNiv6.getText().equals(""))
                intRes=4;
            if (!txtNiv1.getText().equals("") && !txtNiv2.getText().equals("") && !txtNiv3.getText().equals("") && txtNiv4.getText().equals("") && txtNiv5.getText().equals("") && txtNiv6.getText().equals(""))
                intRes=3;
            if (!txtNiv1.getText().equals("") && !txtNiv2.getText().equals("") && txtNiv3.getText().equals("") && txtNiv4.getText().equals("") && txtNiv5.getText().equals("") && txtNiv6.getText().equals(""))
                intRes=2;
            if (!txtNiv1.getText().equals("") && txtNiv2.getText().equals("") && txtNiv3.getText().equals("") && txtNiv4.getText().equals("") && txtNiv5.getText().equals("") && txtNiv6.getText().equals(""))
                intRes=1;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(null, e);
        }
        return intRes;
    }
    
    /**
     * Esta función determina si la cuenta de cabecera tiene cuentas de detalle.
     * @return true: Si la cuenta de cabecera tiene cuentas de detalle.
     * <BR>false: En el caso contrario.
     */
    private boolean isCtaCabCtaDet()
    {
        boolean blnRes=false;
        try
        {
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="SELECT COUNT(*)";
                strSQL+=" FROM tbm_plaCta";
                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa();
                strSQL+=" AND ne_pad=" + txtCodSis.getText();
                rst=stm.executeQuery(strSQL);
                if (rst.next())
                {
                    if (rst.getInt(1)>0)
                        blnRes=true;
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(null, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(null, e);
        }
        return blnRes;
    }

    
    
    private boolean setPermisosUsuarioCuenta(){
        boolean blnRes=true;
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="INSERT INTO tbr_ctaTipDocUsr(co_emp, co_loc, co_tipDoc, co_usr, co_cta)";
                strSQL+="(	SELECT co_emp, co_loc, co_tipDoc, co_usr, " + txtCodSis.getText() + " AS co_cta";
                strSQL+=" 	FROM tbr_ctaTipDocUsr";
                strSQL+="   WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+="	AND co_cta=(SELECT ne_pad FROM tbm_plaCta ";
                strSQL+="               WHERE co_emp=" + objParSis.getCodigoEmpresa() + " AND co_cta=" + txtCodSis.getText() + ")";
                strSQL+="	AND NOT EXISTS(SELECT *FROM tbr_ctaTipDocUsr";
                strSQL+="                          WHERE co_emp=" + objParSis.getCodigoEmpresa() + " AND co_cta=" + txtCodSis.getText() + ")";
                strSQL+="	GROUP BY co_emp, co_loc, co_tipDoc, co_usr";
                strSQL+="	ORDER BY co_emp, co_loc, co_tipDoc, co_usr";
                strSQL+="	)";
                System.out.println("SQL INSERT DE setPermisosUsuarioCuenta : " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }            
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean delete_TbrCtaTipDocUsr(){
        boolean blnRes=true;
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="DELETE FROM tbr_ctaTipDocUsr";
                strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" AND co_cta=" + txtCodSis.getText() + "";
                System.out.println("delete_TbrCtaTipDocUsr: " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    private boolean verificaCambioDeCuenta() {
             if (!txtCodSis.getText().equals("")){
                strSQL="";
                strSQL+="select co_cta";
                strSQL+=" from tbm_detdia";
                strSQL+=" where co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and co_cta=" + txtCodSis.getText() + "";
                
                if (!objUti.isCodigoUnico(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL))
                {
                    tabFrm.setSelectedIndex(0);
                    mostrarMsgInf("<HTML>La cuenta que desea modificar ya tiene movimientos. <BR>No se puede modificar una cuenta que ya tiene movimientos.</HTML>");
                    return false;
                }
            }
             return true;
    }
    
    
}
