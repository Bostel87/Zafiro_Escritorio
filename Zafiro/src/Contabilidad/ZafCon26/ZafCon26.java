/*
 * ZafCon20.java
 *
 * Created on 01 de enero de 2007, 10:10 AM
 *
 * FORMULARIO_RETENCIONES_RECIBIDAS POR FACTURAS
 */
package Contabilidad.ZafCon26;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafVenCon.ZafVenCon;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Vector;
import java.util.ArrayList;

/**
 *
 * @author  Dario Cardenas FORMULARIO_RETENCIONES_RECIBIDAS
 */
public class ZafCon26 extends javax.swing.JInternalFrame 
{
    //Constantes: Columnas del JTable:
    static final int INT_TBL_DAT_LIN=0;                         // LINEA
    static final int INT_TBL_DAT_TIP_RUC=1;                     // TIPO DE RUC (R / C)
    static final int INT_TBL_DAT_NUM_RUC=2;                     // NUMERO DE RUC O CED
    static final int INT_TBL_DAT_NOM_CLI=3;                     // NOMBRE DEL CLIENTE
    static final int INT_TBL_DAT_TIP_DOC=4;                     // TIPO DE DOCUMENTO
    static final int INT_TBL_DAT_NUM_DOC=5;                     // NUMERO DE DOCUMENTO    
    static final int INT_TBL_DAT_FEC_DOC=6;                     // FECHA DEL DOCUMENTO
    static final int INT_TBL_DAT_VAL_BAS=7;                     // VALOR BASE (SUBTOTAL DE FACTURA)
    static final int INT_TBL_DAT_VAL_IVA=8;                     // VALOR IVA (12% A FACTURA)
    static final int INT_TBL_DAT_NUM_RET=9;                     // NUMERO DE RETENCION DEL CLIENTE
    static final int INT_TBL_DAT_NUM_AUT=10;                    // AUTORIZACION DEL SRI DEL CLIENTE
    static final int INT_TBL_DAT_FEC_CAD=11;                    // FECHA DE CADUCIDAD DEL CLIENTE
    static final int INT_TBL_DAT_COD_RET=12;                    // CODIGO DEL SRI DEPENDIENDO DEL IMPUESTO
    static final int INT_TBL_DAT_VAL_RET=13;                    // VALOR DE LA RETENCION
        
        
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafColNumerada objColNum;
    private ZafTblMod objTblMod;
    private ZafThreadGUI objThrGUI;
    private ZafTblCelRenLbl objTblCelRenLbl;    //Render: Presentar JLabel en JTable.
    private ZafMouMotAda objMouMotAda;          //ToolTipText en TableHeader.
    private ZafTblPopMnu objTblPopMnu;          //PopupMenu: Establecer PeopuMenú en JTable.
    private ZafTblBus objTblBus;
    private ZafVenCon vcoTipDoc;                //Ventana de consulta.
    private ZafVenCon vcoCli;                   //Ventana de consulta.
    private Connection con;
    private Statement stm, stmA;
    private ResultSet rst, rstA;
    private String strSQL, strSQLA, strAux, strAuxTmp;
    private Vector vecDat, vecCab, vecReg;
    private Vector vecEstReg;
    private boolean blnCon;                     //true: Continua la ejecución del hilo.
    private String strDesCorTipDoc, strDesLarTipDoc;    //Contenido del campo al obtener el foco.
    private String strCodCli, strDesLarCli;             //Contenido del campo al obtener el foco.
    //variables para la fecha//
    private Librerias.ZafDate.ZafDatePicker dtpFecDes;
    private Librerias.ZafDate.ZafDatePicker dtpFecHas;        
    private Librerias.ZafDate.ZafDatePicker dtpFecTmp;        
    
    
    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafCon26(ZafParSis obj) 
    {
        initComponents();
        //Inicializar objetos.
        objParSis=obj;
        
        objUti=new ZafUtil();
        
            //Configurar fechas//
            dtpFecDes=new Librerias.ZafDate.ZafDatePicker(((javax.swing.JFrame)this.getParent()),"d/m/y");
            dtpFecDes.setBackground(objParSis.getColorCamposObligatorios());
            dtpFecDes.setText("");
            //panCorRpt.add(dtpFecDes);
            panNomCta.add(dtpFecDes);
            dtpFecDes.setBounds(56, 20, 148, 20);

            dtpFecHas=new Librerias.ZafDate.ZafDatePicker(((javax.swing.JFrame)this.getParent()),"d/m/y");
            dtpFecHas.setBackground(objParSis.getColorCamposObligatorios());
            dtpFecHas.setText("");
            //panCorRpt.add(dtpFecHas);
            panNomCta.add(dtpFecHas);
            dtpFecHas.setBounds(310, 20, 148, 20);
                
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        optTod = new javax.swing.JRadioButton();
        optFil = new javax.swing.JRadioButton();
        panNomCta = new javax.swing.JPanel();
        lblFecDes = new javax.swing.JLabel();
        lblFecHas = new javax.swing.JLabel();
        lblTipDoc = new javax.swing.JLabel();
        txtCodTipDoc = new javax.swing.JTextField();
        txtDesCorTipDoc = new javax.swing.JTextField();
        txtDesLarTipDoc = new javax.swing.JTextField();
        butTipDoc = new javax.swing.JButton();
        lblTipRep = new javax.swing.JLabel();
        cboTipRep = new javax.swing.JComboBox();
        lblCli = new javax.swing.JLabel();
        txtCodCli = new javax.swing.JTextField();
        txtDesLarCli = new javax.swing.JTextField();
        butCli = new javax.swing.JButton();
        panRpt = new javax.swing.JPanel();
        spnDat = new javax.swing.JScrollPane();
        tblDat = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("T\u00edtulo de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14));
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("T\u00edtulo de la ventana");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setLayout(null);

        optTod.setSelected(true);
        optTod.setText("Todas los documentos");
        bgrFil.add(optTod);
        optTod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                optTodItemStateChanged(evt);
            }
        });

        panFil.add(optTod);
        optTod.setBounds(4, 4, 400, 20);

        optFil.setText("S\u00f3lo los documentos que cumplan el criterio seleccionado");
        bgrFil.add(optFil);
        panFil.add(optFil);
        optFil.setBounds(4, 24, 400, 20);

        panNomCta.setLayout(null);

        panNomCta.setBorder(new javax.swing.border.TitledBorder("Fecha del documento"));
        lblFecDes.setText("Desde:");
        panNomCta.add(lblFecDes);
        lblFecDes.setBounds(12, 20, 44, 20);

        lblFecHas.setText("Hasta:");
        panNomCta.add(lblFecHas);
        lblFecHas.setBounds(270, 20, 44, 20);

        panFil.add(panNomCta);
        panNomCta.setBounds(24, 90, 490, 52);

        lblTipDoc.setText("Tipo de documento:");
        lblTipDoc.setToolTipText("Tipo de documento");
        panFil.add(lblTipDoc);
        lblTipDoc.setBounds(24, 44, 120, 20);

        panFil.add(txtCodTipDoc);
        txtCodTipDoc.setBounds(112, 44, 32, 20);

        txtDesCorTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorTipDocActionPerformed(evt);
            }
        });
        txtDesCorTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusLost(evt);
            }
        });

        panFil.add(txtDesCorTipDoc);
        txtDesCorTipDoc.setBounds(144, 44, 56, 20);

        txtDesLarTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarTipDocActionPerformed(evt);
            }
        });
        txtDesLarTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusLost(evt);
            }
        });

        panFil.add(txtDesLarTipDoc);
        txtDesLarTipDoc.setBounds(200, 44, 460, 20);

        butTipDoc.setText("...");
        butTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butTipDocActionPerformed(evt);
            }
        });

        panFil.add(butTipDoc);
        butTipDoc.setBounds(660, 44, 20, 20);

        lblTipRep.setText("Tipo de Reporte");
        lblTipRep.setToolTipText("Estado del documento");
        panFil.add(lblTipRep);
        lblTipRep.setBounds(24, 150, 120, 20);

        panFil.add(cboTipRep);
        cboTipRep.setBounds(144, 150, 156, 20);

        lblCli.setText("Cliente/Proveedor:");
        lblCli.setToolTipText("Beneficiario");
        panFil.add(lblCli);
        lblCli.setBounds(24, 64, 120, 20);

        txtCodCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodCliActionPerformed(evt);
            }
        });
        txtCodCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodCliFocusLost(evt);
            }
        });

        panFil.add(txtCodCli);
        txtCodCli.setBounds(144, 64, 56, 20);

        txtDesLarCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarCliActionPerformed(evt);
            }
        });
        txtDesLarCli.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarCliFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarCliFocusLost(evt);
            }
        });

        panFil.add(txtDesLarCli);
        txtDesLarCli.setBounds(200, 64, 460, 20);

        butCli.setText("...");
        butCli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCliActionPerformed(evt);
            }
        });

        panFil.add(butCli);
        butCli.setBounds(660, 64, 20, 20);

        tabFrm.addTab("Filtro", panFil);

        panRpt.setLayout(new java.awt.BorderLayout());

        tblDat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDat.setToolTipText("Doble click o ENTER para abrir la opci\u00f3n seleccionada.");
        tblDat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblDatKeyPressed(evt);
            }
        });
        tblDat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDatMouseClicked(evt);
            }
        });

        spnDat.setViewportView(tblDat);

        panRpt.add(spnDat, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Reporte", panRpt);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });

        panBot.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });

        panBot.add(butCer);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setLayout(new java.awt.BorderLayout());

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 19));
        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        jPanel6.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        pgrSis.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }//GEN-END:initComponents

    private void butCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCliActionPerformed
        mostrarVenConCli(0);
        //Seleccionar el JRadioButton de filtro si es necesario.
        if (txtCodCli.getText().length()>0)
        {
            optFil.setSelected(true);
        }
    }//GEN-LAST:event_butCliActionPerformed

    private void txtDesLarCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarCliFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesLarCli.getText().equalsIgnoreCase(strDesLarCli))
        {
            if (txtDesLarCli.getText().equals(""))
            {
                txtCodCli.setText("");
                txtDesLarCli.setText("");
            }
            else
            {
                mostrarVenConCli(2);
            }
        }
        else
            txtDesLarCli.setText(strDesLarCli);
        //Seleccionar el JRadioButton de filtro si es necesario.
        if (txtCodCli.getText().length()>0)
        {
            optFil.setSelected(true);
        }
    }//GEN-LAST:event_txtDesLarCliFocusLost

    private void txtDesLarCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarCliFocusGained
        strDesLarCli=txtDesLarCli.getText();
        txtDesLarCli.selectAll();
    }//GEN-LAST:event_txtDesLarCliFocusGained

    private void txtDesLarCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarCliActionPerformed
        txtDesLarCli.transferFocus();
    }//GEN-LAST:event_txtDesLarCliActionPerformed

    private void txtCodCliFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCliFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtCodCli.getText().equalsIgnoreCase(strCodCli))
        {
            if (txtCodCli.getText().equals(""))
            {
                txtCodCli.setText("");
                txtDesLarCli.setText("");
            }
            else
            {
                mostrarVenConCli(1);
            }
        }
        else
            txtCodCli.setText(strCodCli);
        //Seleccionar el JRadioButton de filtro si es necesario.
        if (txtCodCli.getText().length()>0)
        {
            optFil.setSelected(true);
        }
    }//GEN-LAST:event_txtCodCliFocusLost

    private void txtCodCliFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodCliFocusGained
        strCodCli=txtCodCli.getText();
        txtCodCli.selectAll();
    }//GEN-LAST:event_txtCodCliFocusGained

    private void txtCodCliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodCliActionPerformed
        txtCodCli.transferFocus();
    }//GEN-LAST:event_txtCodCliActionPerformed

    private void txtDesLarTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesLarTipDoc.getText().equalsIgnoreCase(strDesLarTipDoc))
        {
            if (txtDesLarTipDoc.getText().equals(""))
            {
                txtCodTipDoc.setText("");
                txtDesCorTipDoc.setText("");
            }
            else
            {
                mostrarVenConTipDoc(2);
            }
        }
        else
            txtDesLarTipDoc.setText(strDesLarTipDoc);
        //Seleccionar el JRadioButton de filtro si es necesario.
        if (txtCodTipDoc.getText().length()>0)
        {
            optFil.setSelected(true);
        }
    }//GEN-LAST:event_txtDesLarTipDocFocusLost

    private void txtDesLarTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusGained
        strDesLarTipDoc=txtDesLarTipDoc.getText();
        txtDesLarTipDoc.selectAll();
    }//GEN-LAST:event_txtDesLarTipDocFocusGained

    private void txtDesLarTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarTipDocActionPerformed
        txtDesLarTipDoc.transferFocus();
    }//GEN-LAST:event_txtDesLarTipDocActionPerformed

    private void txtDesCorTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorTipDocActionPerformed
        txtDesCorTipDoc.transferFocus();
    }//GEN-LAST:event_txtDesCorTipDocActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        configurarFrm();
    }//GEN-LAST:event_formInternalFrameOpened

    private void butTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butTipDocActionPerformed
        mostrarVenConTipDoc(0);
    }//GEN-LAST:event_butTipDocActionPerformed

    private void txtDesCorTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusLost
        //Validar el contenido de la celda sólo si ha cambiado.
        if (!txtDesCorTipDoc.getText().equalsIgnoreCase(strDesCorTipDoc))
        {
            if (txtDesCorTipDoc.getText().equals(""))
            {
                txtCodTipDoc.setText("");
                txtDesLarTipDoc.setText("");
            }
            else
            {
                mostrarVenConTipDoc(1);
            }
        }
        else
            txtDesCorTipDoc.setText(strDesCorTipDoc);
        //Seleccionar el JRadioButton de filtro si es necesario.
        if (txtCodTipDoc.getText().length()>0)
        {
            optFil.setSelected(true);
        }
    }//GEN-LAST:event_txtDesCorTipDocFocusLost

    private void txtDesCorTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusGained
        strDesCorTipDoc=txtDesCorTipDoc.getText();
        txtDesCorTipDoc.selectAll();
    }//GEN-LAST:event_txtDesCorTipDocFocusGained

    private void optTodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_optTodItemStateChanged
        if (optTod.isSelected())
        {
            txtCodTipDoc.setText("");
            txtDesCorTipDoc.setText("");
            txtDesLarTipDoc.setText("");
            txtCodCli.setText("");
            txtDesLarCli.setText("");
            //txtFecDes.setText("");
            //txtFecHas.setText("");
            cboTipRep.setSelectedIndex(0);
        }
    }//GEN-LAST:event_optTodItemStateChanged

    private void tblDatKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblDatKeyPressed
        //Abrir la opción seleccionada al presionar ENTER.
        if (evt.getKeyCode()==java.awt.event.KeyEvent.VK_ENTER)
        {
            evt.consume();
            abrirFrm();
        }
    }//GEN-LAST:event_tblDatKeyPressed

    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar acción de acuerdo a la etiqueta del botón ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar"))
        {
            blnCon=true;
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();
            }            
        }
        else
        {
            blnCon=false;
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    private void tblDatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDatMouseClicked
        //Abrir la opción seleccionada al dar doble click.
        if (evt.getClickCount()==2)
        {
            abrirFrm();
        }
    }//GEN-LAST:event_tblDatMouseClicked

    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¿Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm

    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCli;
    private javax.swing.JButton butCon;
    private javax.swing.JButton butTipDoc;
    private javax.swing.JComboBox cboTipRep;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel lblCli;
    private javax.swing.JLabel lblFecDes;
    private javax.swing.JLabel lblFecHas;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTipDoc;
    private javax.swing.JLabel lblTipRep;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optFil;
    private javax.swing.JRadioButton optTod;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panNomCta;
    private javax.swing.JPanel panRpt;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDat;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDat;
    private javax.swing.JTextField txtCodCli;
    private javax.swing.JTextField txtCodTipDoc;
    private javax.swing.JTextField txtDesCorTipDoc;
    private javax.swing.JTextField txtDesLarCli;
    private javax.swing.JTextField txtDesLarTipDoc;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.2"); ///FORMULARIO_RETENCIONES_POR FACTURAS");
            lblTit.setText(strAux);
            //Configurar objetos.
            txtCodTipDoc.setVisible(false);            
            
            //Configurar el combo "Estado de registro".
            vecEstReg=new Vector();
            vecEstReg.add("");
            //vecEstReg.add("CR1");
            //vecEstReg.add("CR2");
            cboTipRep.addItem("Rete-Recibidas");            
            cboTipRep.addItem("Rete-Emitidas");
            //cboTipRep.addItem("CR2 = CodRet30B");
            cboTipRep.setSelectedIndex(0);
            
            //Configurar ZafVenCon: Tipo de documento.
            configurarVenConTipDoc();
            configurarVenConCli();
            
            //Configurar JTable: Establecer el modelo.
            vecDat=new Vector();    //Almacena los datos
            vecCab=new Vector(15);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_LIN,"");                                    
            vecCab.add(INT_TBL_DAT_TIP_RUC,"Tip.Ruc.");
            vecCab.add(INT_TBL_DAT_NUM_RUC,"Num.Ruc.");
            vecCab.add(INT_TBL_DAT_NOM_CLI,"Nom.Cli.");
            vecCab.add(INT_TBL_DAT_TIP_DOC,"Tip.Doc.");
            vecCab.add(INT_TBL_DAT_NUM_DOC,"Num.Doc.");            
            vecCab.add(INT_TBL_DAT_FEC_DOC,"Fec.Doc.");
            vecCab.add(INT_TBL_DAT_VAL_BAS,"Val.Bas.");
            vecCab.add(INT_TBL_DAT_VAL_IVA,"Val.Iva.");
            vecCab.add(INT_TBL_DAT_NUM_RET,"Num.Ret.");
            vecCab.add(INT_TBL_DAT_NUM_AUT,"Aut.Sri.");            
            vecCab.add(INT_TBL_DAT_FEC_CAD,"Fec.Cad.");
            vecCab.add(INT_TBL_DAT_COD_RET,"Cod.Sri.");
            vecCab.add(INT_TBL_DAT_VAL_RET,"Val.Ret.");
                        
            objTblMod=new ZafTblMod();
            objTblMod.setHeader(vecCab);
            tblDat.setModel(objTblMod);
            
            //Configurar JTable: Establecer tipo de selección.
            tblDat.setRowSelectionAllowed(true);
            tblDat.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            
            //Configurar JTable: Establecer la fila de cabecera.
            objColNum=new ZafColNumerada(tblDat,INT_TBL_DAT_LIN);
            
            //Configurar JTable: Establecer el menú de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDat);
            
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDat.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDat.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_LIN).setPreferredWidth(40);           
            tcmAux.getColumn(INT_TBL_DAT_TIP_RUC).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_NUM_RUC).setPreferredWidth(115);            
            tcmAux.getColumn(INT_TBL_DAT_NOM_CLI).setPreferredWidth(190);
	    tcmAux.getColumn(INT_TBL_DAT_TIP_DOC).setPreferredWidth(60);
            tcmAux.getColumn(INT_TBL_DAT_NUM_DOC).setPreferredWidth(120);
            tcmAux.getColumn(INT_TBL_DAT_FEC_DOC).setPreferredWidth(95);
            tcmAux.getColumn(INT_TBL_DAT_VAL_BAS).setPreferredWidth(75);
            tcmAux.getColumn(INT_TBL_DAT_VAL_IVA).setPreferredWidth(75);
	    tcmAux.getColumn(INT_TBL_DAT_NUM_RET).setPreferredWidth(110);
            tcmAux.getColumn(INT_TBL_DAT_NUM_AUT).setPreferredWidth(100);
            tcmAux.getColumn(INT_TBL_DAT_FEC_CAD).setPreferredWidth(70);
            tcmAux.getColumn(INT_TBL_DAT_COD_RET).setPreferredWidth(40);
            tcmAux.getColumn(INT_TBL_DAT_VAL_RET).setPreferredWidth(80);
            
	    //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDat.getTableHeader().setReorderingAllowed(false);
                        
            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAda=new ZafMouMotAda();
            tblDat.getTableHeader().addMouseMotionListener(objMouMotAda);
            
            //Configurar JTable: Editor de búsqueda.
            objTblBus=new ZafTblBus(tblDat);
            
//            //Configurar JTable: Renderizar celdas.
//            objTblCelRenLbl=new ZafTblCelRenLbl();
//            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
//            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);            
//            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);            
//            objTblCelRenLbl=null;            
//            objTblCelRenLbl=new ZafTblCelRenLbl();
//            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.CENTER);            
//            objTblCelRenLbl=null;
            
            //Configurar JTable: Renderizar celdas.
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            tcmAux.getColumn(INT_TBL_DAT_VAL_BAS).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VAL_IVA).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VAL_RET).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_VAL_BAS).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VAL_IVA).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_VAL_RET).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
            
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    /**
     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
     * @return true: Si se pudo consultar los registros.
     * <BR>false: En el caso contrario.
     */
    private boolean cargarDetReg()
    {
        //int intCodEmp, intCodLoc, intNumTotReg, i;
        int intNumTotReg, i;
        boolean blnRes=true;
        try
        {            
                                
                //comparacion para escoger opcion TODOS en el combo// 
                if (cboTipRep.getSelectedIndex() == 0)
                {   
                    cargarDetRegOp0();
                    rst=null;
                    stm=null;
                    con=null;
                }                   
                
                
                //comparacion para escoger opcion 1 CodRet307 en el combo// 
                if (cboTipRep.getSelectedIndex() == 1)
                {   
                    cargarDetRegOp1();
                    rst=null;
                    stm=null;
                    con=null;
                }               
                
                /*
                //comparacion para escoger opcion 2 CodRet30B en el combo// 
                if (cboTipRep.getSelectedIndex() == 2)
                {   
                    cargarDetRegOp2();
                    rst=null;
                    stm=null;
                    con=null;
                }
                */
                
        }        
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    //final funcion cargar consulta
            
    
    //FUNCION PARA ESCOGER LA OPCION 0 --MUESTRA TODOS LOS REGISTROS--
    private boolean cargarDetRegOp0()
    {
        int intCodEmp, intCodLoc, intNumTotReg, intNumTotRegSRI, i, coreg=0, nudocdes=0, nudochas=0;
        boolean blnRes=true;
        try
        {
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            intCodEmp=objParSis.getCodigoEmpresa();
            intCodLoc=objParSis.getCodigoLocal();
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                /////////////////////////DATOS PARA EL SRI////////////////////////
                stmA=con.createStatement();
                
                strSQLA="";
                strSQLA+=" SELECT count(*)";
                strSQLA+=" FROM  tbm_cabtipdoc as a1";
                strSQLA+=" INNER JOIN tbm_datautsri as a2 on(a1.co_emp=a2.co_emp and a1.co_loc=a2.co_loc and a1.co_tipdoc=a2.co_tipdoc)";
                strSQLA+=" WHERE a2.co_tipdoc in (1, 7) AND a1.co_emp=" + intCodEmp;
                strSQLA+=" AND a1.co_loc=" + intCodLoc;
                
                intNumTotRegSRI=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQLA);
                if (intNumTotRegSRI==-1)
                    return false;
                
                System.out.println("El total de registros para el SRI es: " +intNumTotRegSRI);
                                

                ///Obtener datos de tabla tbm_datautsri para declaracion de Retenciones///                                                                        
                strSQLA="";
                strSQLA+=" SELECT a1.co_emp, a1.co_loc, a1.co_tipdoc, a2.co_reg, a1.tx_descor, a2.ne_numdocdes, a2.ne_numdochas, a2.tx_numserfac, a2.tx_numautsri, a2.tx_feccadfac";
                strSQLA+=" FROM  tbm_cabtipdoc as a1";
                strSQLA+=" INNER JOIN tbm_datautsri as a2 on(a1.co_emp=a2.co_emp and a1.co_loc=a2.co_loc and a1.co_tipdoc=a2.co_tipdoc)";
                strSQLA+=" WHERE a2.co_tipdoc in (1,7) AND a1.co_emp=" + intCodEmp;
                strSQLA+=" AND a1.co_loc=" + intCodLoc;
                strSQLA+=" ORDER BY a2.co_reg ";
                System.out.println("El Query para Datos del SRI es: " +strSQLA);

                //Sentencia que ejecuta el SQL
                rstA=stmA.executeQuery(strSQLA);
                
                /*
                if(rstA.next())
                {
                            ////////CAMBIANDO EL TIPO DE VARIABLES STRING A ENTERAS/////////
                            String codtipdoc = rstA.getString("co_tipdoc");
                            int cotipdoc = Integer.parseInt(codtipdoc);
                            System.out.println("El CodTipDoc es: " + cotipdoc);
                            String codreg = rstA.getString("co_reg");
                            coreg = Integer.parseInt(codreg);
                            System.out.println("El CodReg es: " + coreg);
                            String numdocdes = rstA.getString("ne_numdocdes");
                            nudocdes = Integer.parseInt(numdocdes);
                            System.out.println("El NumFacDes es: " + nudocdes);
                            String numdochas = rstA.getString("ne_numdochas");
                            nudochas = Integer.parseInt(numdochas);
                            System.out.println("El NumFacHas es: " + nudochas);
                            String numserfac = rstA.getString("tx_numserfac");
                            System.out.println("El NumSerFac es: " + numserfac);
                            ////////////////////////////////////////////////////////
                }
                 */
                ////////////////////////////////////////////////////////////////
                
                
                
                
                stm=con.createStatement();
                //Obtener la condición.
                strAuxTmp="";
                
                //hace referencia a la tabla tbm_cabtipdoc //
                if (txtCodTipDoc.getText().length()>0)
                {
                    strAuxTmp+=" AND a1.co_tipDoc=" + txtCodTipDoc.getText();
                    
                    int tipdoc = Integer.parseInt(txtCodTipDoc.getText());
                    if (tipdoc==7)
                        strAuxTmp+=" AND a5.co_tipDoc IN ('25') ";
                }
                
                //hace referencia a la tabla tbm_cli//
                if (txtCodCli.getText().length()>0)
                    strAuxTmp+=" AND a6.co_cli=" + txtCodCli.getText();
                
                //Hace referencia a la fechas//                
                if (dtpFecDes.isFecha() && dtpFecHas.isFecha()){
                    strAuxTmp+=" AND (a1.fe_doc>='" + objUti.formatearFecha(dtpFecDes.getText(),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "'";
                    strAuxTmp+=" AND a1.fe_doc<='" + objUti.formatearFecha(dtpFecHas.getText(),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "') ";                    
                }
                                       
                //Obtener el número total de registros.
                strSQL="";
                strSQL+=" SELECT count(*)";
                strSQL+=" FROM tbm_cabmovinv AS a1 ";
                strSQL+=" INNER JOIN tbm_pagMovInv AS a2  ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) ";
                strSQL+=" INNER JOIN tbm_cabtipdoc AS a3  ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc) ";
                strSQL+=" INNER JOIN tbm_detpag AS a4 ON (a2.co_emp=a4.co_emp AND a2.co_loc=a4.co_locPag AND a2.co_tipDoc=a4.co_tipDocPag AND a2.co_doc=a4.co_docPag AND a2.co_reg=a4.co_regPag) ";
                strSQL+=" INNER JOIN tbm_cabpag AS a5 ON (a4.co_emp=a5.co_emp AND a4.co_loc=a5.co_loc AND a4.co_tipdoc=a5.co_tipdoc AND a4.co_doc=a5.co_doc) ";
                strSQL+=" INNER JOIN tbm_cli AS a6 ON (a1.co_emp=a6.co_emp AND a1.co_cli=a6.co_cli) ";
                strSQL+=" WHERE (abs(a2.mo_pag+a2.nd_abo)>0 OR a4.nd_abo IS NOT NULL) AND a2.st_reg IN ('A','C') ";
                strSQL+=" AND a5.co_tipDoc IN ('25','26','27') AND a1.co_tipdoc IN ('1','7')";
                strSQL+=" AND a1.co_emp=" + intCodEmp;
                strSQL+=" AND a1.co_loc=" + intCodLoc;
                strSQL+=strAuxTmp;

                strSQL+=strAuxTmp;
                intNumTotReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intNumTotReg==-1)
                    return false;

                System.out.println("El total de registros es: " +intNumTotReg);
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+=" SELECT a1.co_emp, a1.co_cli, a6.tx_tipide as TIPRUC, a6.tx_ide as NUMRUC, a6.tx_nom as NOMCLI, a1.co_tipdoc, a3.tx_descor as TIPDOC, '001001'||LPAD(a1.ne_numdoc,7,'0') as NUMDOC, ";
                strSQL+=" a1.co_doc, a1.fe_doc as FECDOC, a2.fe_ven, abs(round(a1.nd_sub,2)) as VALBAS, abs(round(a1.nd_valiva,2)) as VALIVA, a5.co_tipDoc, REPLACE(a1.tx_secdoc, '-','')||LPAD((REPLACE(a4.tx_numchq,'','')),7,'0')  as NUMRET, ";
                strSQL+=" a1.tx_numautsri as AUTSRI, a1.tx_feccad as FECCAD, CASE a5.co_tipDoc when '25' then '307' when '26' then '30B' when '27' then '70S' end as CODSRI, ";
                strSQL+=" CASE a5.co_tipDoc when '25' then abs(round(a1.nd_sub,2)*0.01) when '26' then abs(round(a1.nd_valiva,2)*0.30) when '27' then abs(round(a1.nd_valiva,2)*0.70) end as VALRET ";
                strSQL+=" FROM tbm_cabmovinv AS a1 ";
                strSQL+=" INNER JOIN tbm_pagMovInv AS a2  ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) ";
                strSQL+=" INNER JOIN tbm_cabtipdoc AS a3  ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc) ";
                strSQL+=" INNER JOIN tbm_detpag AS a4 ON (a2.co_emp=a4.co_emp AND a2.co_loc=a4.co_locPag AND a2.co_tipDoc=a4.co_tipDocPag AND a2.co_doc=a4.co_docPag AND a2.co_reg=a4.co_regPag) ";
                strSQL+=" INNER JOIN tbm_cabpag AS a5 ON (a4.co_emp=a5.co_emp AND a4.co_loc=a5.co_loc AND a4.co_tipdoc=a5.co_tipdoc AND a4.co_doc=a5.co_doc) ";
                strSQL+=" INNER JOIN tbm_cli AS a6 ON (a1.co_emp=a6.co_emp AND a1.co_cli=a6.co_cli) ";
                strSQL+=" WHERE (abs(a2.mo_pag+a2.nd_abo)>0 OR a4.nd_abo IS NOT NULL) AND a2.st_reg IN ('A','C') ";
                strSQL+=" AND a5.co_tipDoc IN ('25','26','27') AND a1.co_tipdoc IN ('1','7')";
                strSQL+=" AND a1.co_emp=" + intCodEmp;
                strSQL+=" AND a1.co_loc=" + intCodLoc;
                strSQL+=strAuxTmp;
                strSQL+=" ORDER BY a1.co_tipdoc, a1.fe_doc, a1.ne_numdoc ";
                
                System.out.println("Query de Retenciones Recibidas por Facturas es: " +strSQL);
                
/*
    SELECT 
a1.co_emp, a1.co_cli, a6.tx_tipide, a6.tx_ide, a6.tx_nom, a1.co_tipdoc, a3.tx_descor, '001001'||LPAD(a1.ne_numdoc,7,'0') as NumDoc, 
a1.co_doc, a1.fe_doc, a2.fe_ven, a1.nd_sub as ValBas, a1.nd_valiva as ValIva, a5.co_tipDoc, REPLACE(a1.tx_secdoc, '-','')||LPAD((REPLACE(a4.tx_numchq,'','')),7,'0')  as NUM_RET, 
a1.tx_numautsri, a1.tx_feccad, CASE a5.co_tipDoc when '25' then '307' when '26' then '30B' when '27' then '70S' end as CodSri, 
CASE a5.co_tipDoc when '25' then abs(round(a1.nd_sub,2)*0.01) when '26' then abs(round(a1.nd_valiva,2)*0.30) when '27' then abs(round(a1.nd_valiva,2)*0.70) end as ValRet 
FROM tbm_cabmovinv AS a1 
INNER JOIN tbm_pagMovInv AS a2  ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) 
INNER JOIN tbm_cabtipdoc AS a3  ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc) 
INNER JOIN tbm_detpag AS a4 ON (a2.co_emp=a4.co_emp AND a2.co_loc=a4.co_locPag AND a2.co_tipDoc=a4.co_tipDocPag AND a2.co_doc=a4.co_docPag AND a2.co_reg=a4.co_regPag) 
INNER JOIN tbm_cabpag AS a5 ON (a4.co_emp=a5.co_emp AND a4.co_loc=a5.co_loc AND a4.co_tipdoc=a5.co_tipdoc AND a4.co_doc=a5.co_doc) 
INNER JOIN tbm_cli AS a6 ON (a1.co_emp=a6.co_emp AND a1.co_cli=a6.co_cli) 
WHERE (abs(a2.mo_pag+a2.nd_abo)>0 OR a4.nd_abo IS NOT NULL) AND a2.st_reg IN ('A','C')  
AND a1.co_emp=1 AND a1.co_loc=1 AND a5.co_tipDoc IN ('25','26','27') AND a1.co_tipdoc IN ('1')
ORDER BY a1.co_tipdoc, a1.fe_doc, a1.ne_numdoc, a5.ne_numdoc1,  a2.co_emp, a2.co_loc, a2.co_tipDoc, a2.co_doc, a2.co_reg            
                
  */              
                
                //Sentencia que ejecuta el SQL
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                
                i=0;
                while (rst.next())
                {
                    if (blnCon)
                    {                        
                        vecReg=new Vector(); 
                        vecReg.add(INT_TBL_DAT_LIN,"");
			vecReg.add(INT_TBL_DAT_TIP_RUC,rst.getString("TIPRUC"));
                        vecReg.add(INT_TBL_DAT_NUM_RUC,rst.getString("NUMRUC"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI,rst.getString("NOMCLI"));
                        vecReg.add(INT_TBL_DAT_TIP_DOC,rst.getString("TIPDOC"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC,rst.getString("NUMDOC"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC,rst.getString("FECDOC"));                        
                        vecReg.add(INT_TBL_DAT_VAL_BAS,rst.getString("VALBAS"));
			vecReg.add(INT_TBL_DAT_VAL_IVA,rst.getString("VALIVA"));
                        vecReg.add(INT_TBL_DAT_NUM_RET,rst.getString("NUMRET"));                                                
                        vecReg.add(INT_TBL_DAT_NUM_AUT,rst.getString("AUTSRI"));                        
                        vecReg.add(INT_TBL_DAT_FEC_CAD,rst.getString("FECCAD"));
                        vecReg.add(INT_TBL_DAT_COD_RET,rst.getString("CODSRI"));
                        vecReg.add(INT_TBL_DAT_VAL_RET,rst.getString("VALRET"));

                        vecDat.add(vecReg);
                        i++;
                        pgrSis.setValue(i);
                    }
                    else
                    {
                        break;
                    }
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                if (intNumTotReg==tblDat.getRowCount())
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros.");
                else
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros pero sólo se procesaron " + tblDat.getRowCount() + ".");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
                
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    //final opcion 0 todos los registros //
       
    //FUNCION PARA ESCOGER LA OPCION 0 --MUESTRA TODOS LOS REGISTROS--
    private boolean cargarDetRegOp1()
    {
        int intCodEmp, intCodLoc, intNumTotReg, intNumTotRegSRI, i, coreg=0, nudocdes=0, nudochas=0;
        boolean blnRes=true;
        try
        {
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");
            intCodEmp=objParSis.getCodigoEmpresa();
            intCodLoc=objParSis.getCodigoLocal();
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null)
            {
                /////////////////////////DATOS PARA EL SRI////////////////////////
                stmA=con.createStatement();
                
                strSQLA="";
                strSQLA+=" SELECT count(*)";
                strSQLA+=" FROM  tbm_cabtipdoc as a1";
                strSQLA+=" INNER JOIN tbm_datautsri as a2 on(a1.co_emp=a2.co_emp and a1.co_loc=a2.co_loc and a1.co_tipdoc=a2.co_tipdoc)";
                strSQLA+=" WHERE a2.co_tipdoc in (1, 7) AND a1.co_emp=" + intCodEmp;
                strSQLA+=" AND a1.co_loc=" + intCodLoc;
                
                intNumTotRegSRI=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQLA);
                if (intNumTotRegSRI==-1)
                    return false;
                
                System.out.println("El total de registros para el SRI es: " +intNumTotRegSRI);
                                

                ///Obtener datos de tabla tbm_datautsri para declaracion de Retenciones///                                                                        
                strSQLA="";
                strSQLA+=" SELECT a1.co_emp, a1.co_loc, a1.co_tipdoc, a2.co_reg, a1.tx_descor, a2.ne_numdocdes, a2.ne_numdochas, a2.tx_numserfac, a2.tx_numautsri, a2.tx_feccadfac";
                strSQLA+=" FROM  tbm_cabtipdoc as a1";
                strSQLA+=" INNER JOIN tbm_datautsri as a2 on(a1.co_emp=a2.co_emp and a1.co_loc=a2.co_loc and a1.co_tipdoc=a2.co_tipdoc)";
                strSQLA+=" WHERE a2.co_tipdoc in (1,7) AND a1.co_emp=" + intCodEmp;
                strSQLA+=" AND a1.co_loc=" + intCodLoc;
                strSQLA+=" ORDER BY a2.co_reg ";
                System.out.println("El Query para Datos del SRI es: " +strSQLA);

                //Sentencia que ejecuta el SQL
                rstA=stmA.executeQuery(strSQLA);
                
                /*
                if(rstA.next())
                {
                            ////////CAMBIANDO EL TIPO DE VARIABLES STRING A ENTERAS/////////
                            String codtipdoc = rstA.getString("co_tipdoc");
                            int cotipdoc = Integer.parseInt(codtipdoc);
                            System.out.println("El CodTipDoc es: " + cotipdoc);
                            String codreg = rstA.getString("co_reg");
                            coreg = Integer.parseInt(codreg);
                            System.out.println("El CodReg es: " + coreg);
                            String numdocdes = rstA.getString("ne_numdocdes");
                            nudocdes = Integer.parseInt(numdocdes);
                            System.out.println("El NumFacDes es: " + nudocdes);
                            String numdochas = rstA.getString("ne_numdochas");
                            nudochas = Integer.parseInt(numdochas);
                            System.out.println("El NumFacHas es: " + nudochas);
                            String numserfac = rstA.getString("tx_numserfac");
                            System.out.println("El NumSerFac es: " + numserfac);
                            ////////////////////////////////////////////////////////
                }
                 */
                ////////////////////////////////////////////////////////////////
                
                
                
                
                stm=con.createStatement();
                //Obtener la condición.
                strAuxTmp="";
                
                //hace referencia a la tabla tbm_cabtipdoc //
                if (txtCodTipDoc.getText().length()>0)
                {
                    strAuxTmp+=" AND a1.co_tipDoc=" + txtCodTipDoc.getText();
                }
                
                //hace referencia a la tabla tbm_cli//
                if (txtCodCli.getText().length()>0)
                    strAuxTmp+=" AND a6.co_cli=" + txtCodCli.getText();
                
                //Hace referencia a la fechas//                
                if (dtpFecDes.isFecha() && dtpFecHas.isFecha()){
                    strAuxTmp+=" AND (a1.fe_doc>='" + objUti.formatearFecha(dtpFecDes.getText(),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "'";
                    strAuxTmp+=" AND a1.fe_doc<='" + objUti.formatearFecha(dtpFecHas.getText(),"dd/MM/yyyy",objParSis.getFormatoFechaBaseDatos()) + "') ";                    
                }
                                       
                //Obtener el número total de registros.
                strSQL="";
                strSQL+=" SELECT count(*)";
                strSQL+=" FROM tbm_cabmovinv AS a1 ";
                strSQL+=" INNER JOIN tbm_pagMovInv AS a2  ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) ";
                strSQL+=" INNER JOIN tbm_cabtipdoc AS a3  ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc) ";
                strSQL+=" INNER JOIN tbm_detpag AS a4 ON (a2.co_emp=a4.co_emp AND a2.co_loc=a4.co_locPag AND a2.co_tipDoc=a4.co_tipDocPag AND a2.co_doc=a4.co_docPag AND a2.co_reg=a4.co_regPag) ";
                strSQL+=" INNER JOIN tbm_cabpag AS a5 ON (a4.co_emp=a5.co_emp AND a4.co_loc=a5.co_loc AND a4.co_tipdoc=a5.co_tipdoc AND a4.co_doc=a5.co_doc) ";
                strSQL+=" INNER JOIN tbm_cli AS a6 ON (a1.co_emp=a6.co_emp AND a1.co_cli=a6.co_cli) ";
                strSQL+=" WHERE (abs(a2.mo_pag+a2.nd_abo)>0 OR a4.nd_abo IS NOT NULL) AND a2.st_reg IN ('A','C') ";
                strSQL+=" AND a5.co_tipDoc IN ('33') AND a1.co_tipdoc IN ('2','38')";
                strSQL+=" AND a1.co_emp=" + intCodEmp;
                strSQL+=" AND a1.co_loc=" + intCodLoc;
                strSQL+=strAuxTmp;

                intNumTotReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intNumTotReg==-1)
                    return false;

                System.out.println("El total de registros es: " +intNumTotReg);
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+=" SELECT a1.co_emp, a1.co_cli, a6.tx_tipide as TIPRUC, a6.tx_ide as NUMRUC, a6.tx_nom as NOMCLI, a1.co_tipdoc, a3.tx_descor as TIPDOC, '001001'||LPAD(a1.ne_numdoc,7,'0') as NUMDOC, a1.co_doc, a1.fe_doc as FECDOC, ";
                strSQL+=" a2.fe_ven, abs(round(a1.nd_sub,2)) as VALBAS, abs(round(a1.nd_valiva,2)) as VALIVA, a5.co_tipDoc, REPLACE(a1.tx_secdoc, '-','')||LPAD((REPLACE(a5.ne_numdoc1,'','')),7,'0')  as NUMRET, a1.tx_numautsri as AUTSRI, a1.tx_feccad as FECCAD, ";
                strSQL+=" CASE a2.nd_porret when '1.00' then '307' when '5.00' then '307' when '8.00' then '307' when '0.10' then '307' when '30.00' then '30B' when '70.00' then '70S' when '100.00' then '100S' end as CODSRI, ";
                strSQL+=" CASE a2.nd_porret when '1.00' then round(a1.nd_sub*0.01,2) when '5.00' then round(a1.nd_sub*0.05,2) when '8.00' then round(a1.nd_sub*0.08,2) when '0.10' then round(a1.nd_sub*0.001,2) when '30.00' then round(a1.nd_valiva*0.30,2) when '70.00' then round(a1.nd_valiva*0.70,2) when '100.00' then round(a1.nd_valiva*1,2) end as VALRET ";
                strSQL+=" FROM tbm_cabmovinv AS a1 ";
                strSQL+=" INNER JOIN tbm_pagMovInv AS a2  ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) ";
                strSQL+=" INNER JOIN tbm_cabtipdoc AS a3  ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc) ";
                strSQL+=" INNER JOIN tbm_detpag AS a4 ON (a2.co_emp=a4.co_emp AND a2.co_loc=a4.co_locPag AND a2.co_tipDoc=a4.co_tipDocPag AND a2.co_doc=a4.co_docPag AND a2.co_reg=a4.co_regPag) ";
                strSQL+=" INNER JOIN tbm_cabpag AS a5 ON (a4.co_emp=a5.co_emp AND a4.co_loc=a5.co_loc AND a4.co_tipdoc=a5.co_tipdoc AND a4.co_doc=a5.co_doc) ";
                strSQL+=" INNER JOIN tbm_cli AS a6 ON (a1.co_emp=a6.co_emp AND a1.co_cli=a6.co_cli) ";
                strSQL+=" WHERE (abs(a2.mo_pag+a2.nd_abo)>0 OR a4.nd_abo IS NOT NULL) AND a2.st_reg IN ('A','C') ";
                strSQL+=" AND a5.co_tipDoc IN ('33') AND a1.co_tipdoc IN ('2','38')";
                strSQL+=" AND a1.co_emp=" + intCodEmp;
                strSQL+=" AND a1.co_loc=" + intCodLoc;
                strSQL+=strAuxTmp;
                strSQL+=" ORDER BY a1.co_tipdoc, a1.fe_doc, a1.ne_numdoc ";
                
                System.out.println("Query de Retenciones Recibidas por Facturas es: " +strSQL);
                
/*
    SELECT 
a1.co_emp, a1.co_cli, a6.tx_tipide, a6.tx_ide, a6.tx_nom, a1.co_tipdoc, a3.tx_descor, '001001'||LPAD(a1.ne_numdoc,7,'0') 
as NumDoc, a1.co_doc, a1.fe_doc, a2.fe_ven, a1.nd_sub as ValBas, a1.nd_valiva as ValIva, 
a5.co_tipDoc, round(a2.nd_porret,2) as porret, REPLACE(a1.tx_secdoc, '-','')||LPAD((REPLACE(a5.ne_numdoc1,'','')),7,'0')  
as NUM_RET, a1.tx_numautsri, a1.tx_feccad, 
CASE a2.nd_porret 
when '1.00' then '307' when '5.00' then '307' when '8.00' then '307' when '0.10' then '307'
when '30.00' then '30B' when '70.00' then '70S' when '100.00' then '100S' end as CodSri,
CASE a2.nd_porret 
when '1.00' then round(a1.nd_sub*0.01,2) when '5.00' then round(a1.nd_sub*0.05,2) 
when '8.00' then round(a1.nd_sub*0.08,2) when '0.10' then round(a1.nd_sub*0.001,2) 
when '30.00' then round(a1.nd_valiva*0.30,2) when '70.00' then round(a1.nd_valiva*0.70,2)
when '100.00' then round(a1.nd_valiva*1,2) end as ValRet,
a5.ne_numdoc1 
FROM tbm_cabmovinv AS a1 
INNER JOIN tbm_pagMovInv AS a2  ON (a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc AND a1.co_doc=a2.co_doc) 
INNER JOIN tbm_cabtipdoc AS a3  ON (a1.co_emp=a3.co_emp AND a1.co_loc=a3.co_loc AND a1.co_tipDoc=a3.co_tipDoc) 
INNER JOIN tbm_detpag AS a4 ON (a2.co_emp=a4.co_emp AND a2.co_loc=a4.co_locPag AND a2.co_tipDoc=a4.co_tipDocPag AND a2.co_doc=a4.co_docPag AND a2.co_reg=a4.co_regPag) 
INNER JOIN tbm_cabpag AS a5 ON (a4.co_emp=a5.co_emp AND a4.co_loc=a5.co_loc AND a4.co_tipdoc=a5.co_tipdoc AND a4.co_doc=a5.co_doc) 
INNER JOIN tbm_cli AS a6 ON (a1.co_emp=a6.co_emp AND a1.co_cli=a6.co_cli) 
WHERE (abs(a2.mo_pag+a2.nd_abo)>0 OR a4.nd_abo IS NOT NULL) AND a2.st_reg IN ('A','C')  
AND a1.co_emp=1 AND a1.co_loc=1 AND a5.co_tipDoc IN ('33') AND a1.co_tipdoc IN ('2','38')
AND a1.co_tipdoc IN ('38')
--AND a5.co_tipDoc IN ('33')
--AND a1.co_emp=1 AND a1.co_loc=1 AND a5.co_tipDoc IN ('33') AND a1.co_tipdoc IN ('2','38')
ORDER BY a1.co_tipdoc, a1.fe_doc, a1.ne_numdoc, a5.ne_numdoc1,  a2.co_emp, a2.co_loc, a2.co_tipDoc, 
a2.co_doc, a2.co_reg           
                
  */              
                
                //Sentencia que ejecuta el SQL
                rst=stm.executeQuery(strSQL);
                //Limpiar vector de datos.
                vecDat.clear();
                //Obtener los registros.
                lblMsgSis.setText("Cargando datos...");
                pgrSis.setMinimum(0);
                pgrSis.setMaximum(intNumTotReg);
                pgrSis.setValue(0);
                
                i=0;
                while (rst.next())
                {
                    if (blnCon)
                    {                        
                        vecReg=new Vector(); 
                        vecReg.add(INT_TBL_DAT_LIN,"");
			vecReg.add(INT_TBL_DAT_TIP_RUC,rst.getString("TIPRUC"));
                        vecReg.add(INT_TBL_DAT_NUM_RUC,rst.getString("NUMRUC"));
                        vecReg.add(INT_TBL_DAT_NOM_CLI,rst.getString("NOMCLI"));
                        vecReg.add(INT_TBL_DAT_TIP_DOC,rst.getString("TIPDOC"));
                        vecReg.add(INT_TBL_DAT_NUM_DOC,rst.getString("NUMDOC"));
                        vecReg.add(INT_TBL_DAT_FEC_DOC,rst.getString("FECDOC"));                        
                        vecReg.add(INT_TBL_DAT_VAL_BAS,rst.getString("VALBAS"));
			vecReg.add(INT_TBL_DAT_VAL_IVA,rst.getString("VALIVA"));
                        vecReg.add(INT_TBL_DAT_NUM_RET,rst.getString("NUMRET"));                                                
                        vecReg.add(INT_TBL_DAT_NUM_AUT,rst.getString("AUTSRI"));                        
                        vecReg.add(INT_TBL_DAT_FEC_CAD,rst.getString("FECCAD"));
                        vecReg.add(INT_TBL_DAT_COD_RET,rst.getString("CODSRI"));
                        vecReg.add(INT_TBL_DAT_VAL_RET,rst.getString("VALRET"));

                        vecDat.add(vecReg);
                        i++;
                        pgrSis.setValue(i);
                    }
                    else
                    {
                        break;
                    }
                }
                rst.close();
                stm.close();
                con.close();
                rst=null;
                stm=null;
                con=null;
                //Asignar vectores al modelo.
                objTblMod.setData(vecDat);
                tblDat.setModel(objTblMod);
                vecDat.clear();
                if (intNumTotReg==tblDat.getRowCount())
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros.");
                else
                    lblMsgSis.setText("Se encontraron " + intNumTotReg + " registros pero sólo se procesaron " + tblDat.getRowCount() + ".");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
                
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    //final opcion 1 todos los registros //
    
    private boolean abrirFrm()
    {
        boolean blnRes=true;
        try
        {
            if (!((tblDat.getSelectedColumn()==-1) || (tblDat.getSelectedRow()==-1)))
            {
                strAux="Contabilidad.ZafCon01.ZafCon01";
                objParSis.setNombreMenu("Plan de cuentas...");
                if (!strAux.equals(""))
                    invocarClase(strAux);
            }       
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    private boolean invocarClase(String clase)
    {
        boolean blnRes=true;
        try
        {
            //Obtener el constructor de la clase que se va a invocar.
            Class objVen=Class.forName(clase);
            Class objCla[]=new Class[2];
            objCla[0]=objParSis.getClass();
            objCla[1]=new Integer(0).getClass();
            java.lang.reflect.Constructor objCon=objVen.getConstructor(objCla);
            //Inicializar el constructor que se obtuvo.
            Object objObj[]=new Object[2];
            objObj[0]=objParSis;
//            objObj[1]=new Integer(tblDat.getValueAt(tblDat.getSelectedRow(),INT_TBL_DAT_COD_SIS).toString());
            javax.swing.JInternalFrame ifrVen;
            ifrVen=(javax.swing.JInternalFrame)objCon.newInstance(objObj);
            this.getParent().add(ifrVen,javax.swing.JLayeredPane.DEFAULT_LAYER);
            ifrVen.show();
        }
        catch (ClassNotFoundException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (NoSuchMethodException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (SecurityException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (InstantiationException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (IllegalAccessException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (IllegalArgumentException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (java.lang.reflect.InvocationTargetException e) 
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
     * Si y No. El usuario es quien determina lo que debe hacer el sistema
     * seleccionando una de las opciones que se presentan.
     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    
    /**
     * Esta función muestra un mensaje de error al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique que los datos no se grabaron
     * y que debe comunicar de este particular al administrador del sistema.
     */
    private void mostrarMsgErr(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Esta función configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Tipos de documentos".
     */
    private boolean configurarVenConTipDoc()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_tipdoc");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            arlCam.add("a1.ne_ultDoc");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Tip.Doc.");
            arlAli.add("Tipo de documento");
            arlAli.add("Ult.Doc.");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar, a1.ne_ultDoc";
            strSQL+=" FROM tbm_cabTipDoc AS a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();
            strSQL+=" AND a1.co_tipdoc IN (1,2,7,38)";
            strSQL+=" ORDER BY a1.co_tipdoc";
            vcoTipDoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de tipos de documentos", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoTipDoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoTipDoc.setConfiguracionColumna(4, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Clientes/Proveedores".
     */
    private boolean configurarVenConCli()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_cli");
            arlCam.add("a1.tx_ide");
            arlCam.add("a1.tx_nom");
            arlCam.add("a1.tx_dir");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Identificación");
            arlAli.add("Nombre");
            arlAli.add("Dirección");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("100");
            arlAncCol.add("284");
            arlAncCol.add("110");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_cli, a1.tx_ide, a1.tx_nom, a1.tx_dir";
            strSQL+=" FROM tbm_cli AS a1";
            strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" ORDER BY a1.tx_nom";
            vcoCli=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de clientes/proveedores", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoCli.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoCli.setConfiguracionColumna(2, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConTipDoc(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoTipDoc.setCampoBusqueda(1);
                    vcoTipDoc.show();
                    if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Descripción corta".
                    if (vcoTipDoc.buscar("a1.tx_desCor", txtDesCorTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(1);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        }
                        else
                        {
                            txtDesCorTipDoc.setText(strDesCorTipDoc);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoTipDoc.buscar("a1.tx_desLar", txtDesLarTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(2);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE)
                        {
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        }
                        else
                        {
                            txtDesLarTipDoc.setText(strDesLarTipDoc);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
 
    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConCli(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoCli.setCampoBusqueda(2);
                    vcoCli.show();
                    if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                    {
                        txtCodCli.setText(vcoCli.getValueAt(1));
                        txtDesLarCli.setText(vcoCli.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Código".
                    if (vcoCli.buscar("a1.co_cli", txtCodCli.getText()))
                    {
                        txtCodCli.setText(vcoCli.getValueAt(1));
                        txtDesLarCli.setText(vcoCli.getValueAt(3));
                    }
                    else
                    {
                        vcoCli.setCampoBusqueda(0);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                        {
                            txtCodCli.setText(vcoCli.getValueAt(1));
                            txtDesLarCli.setText(vcoCli.getValueAt(3));
                        }
                        else
                        {
                            txtCodCli.setText(strCodCli);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoCli.buscar("a1.tx_nom", txtDesLarCli.getText()))
                    {
                        txtCodCli.setText(vcoCli.getValueAt(1));
                        txtDesLarCli.setText(vcoCli.getValueAt(3));
                    }
                    else
                    {
                        vcoCli.setCampoBusqueda(2);
                        vcoCli.setCriterio1(11);
                        vcoCli.cargarDatos();
                        vcoCli.show();
                        if (vcoCli.getSelectedButton()==vcoCli.INT_BUT_ACE)
                        {
                            txtCodCli.setText(vcoCli.getValueAt(1));
                            txtDesLarCli.setText(vcoCli.getValueAt(3));
                        }
                        else
                        {
                            txtDesLarCli.setText(strDesLarCli);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podría presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaría informado en todo
     * momento de lo que ocurre. Si se desea hacer ésto es necesario utilizar ésta clase
     * ya que si no sólo se apreciaría los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarDetReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sólo cuando haya datos.
            if (tblDat.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDat.setRowSelectionInterval(0, 0);
                tblDat.requestFocus();
            }
            objThrGUI=null;
        }
    }
    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDat.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_DAT_LIN:
                    strMsg="";
                    break;                                
                case INT_TBL_DAT_TIP_RUC:
                    strMsg="Tipo de Ruc o Cedula";
                    break;
                case INT_TBL_DAT_NUM_RUC:
                    strMsg="Numero de Ruc o Cedula";
                    break;                
                case INT_TBL_DAT_NOM_CLI:
                    strMsg="Nombre del Cliente";
                    break;
                case INT_TBL_DAT_TIP_DOC:
                    strMsg="Tipo de Documento";
                    break;
                case INT_TBL_DAT_NUM_DOC:
                    strMsg="Numero de Documento";
                    break;
                case INT_TBL_DAT_FEC_DOC:
                    strMsg="Fecha del Documento";
                    break;
                case INT_TBL_DAT_VAL_BAS:
                    strMsg="Valor Base a Retener";
                    break;
                case INT_TBL_DAT_VAL_IVA:
                    strMsg="Valor del Iva";
                    break;                
                case INT_TBL_DAT_NUM_RET:
                    strMsg="Numero de Retencion del Cliente";
                    break;
                case INT_TBL_DAT_NUM_AUT:
                    strMsg="Numero de Autorizacion del Sri";
                    break;                                
                case INT_TBL_DAT_FEC_CAD:
                    strMsg="Fecha de Caducidad de la Retencion del Cliente";
                    break;
                case INT_TBL_DAT_COD_RET:
                    strMsg="Cod del Sri por Cliente";
                    break;
                case INT_TBL_DAT_VAL_RET:
                    strMsg="Valor de la Retencion";
                    break;
            }
            tblDat.getTableHeader().setToolTipText(strMsg);
        }
    }
    
}


