/*
 * ZafMae32.java
 * modificado el 18 de Mayo del 2007 14h14
 * Created on May 11, 2007, 11:44 AM
 */
package Contabilidad.ZafCon34;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.DriverManager;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblEdi.ZafTblEdi;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafVenCon.ZafVenCon;
import Librerias.ZafTblUti.ZafTblCelRenChk.ZafTblCelRenChk;
import Librerias.ZafTblUti.ZafTblCelEdiChk.ZafTblCelEdiChk;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Vector;
/**
 *
 * @author  ilino
 */
public class ZafCon34 extends javax.swing.JInternalFrame {

    javax.swing.JInternalFrame jfrThis; //Hace referencia a this
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private MiToolBar objTooBar;
    private ZafTblMod objTblModGrpUsr, objTblModPlaCta;
    private ZafTblPopMnu objTblPopMnuGrpUsr, objTblPopMnuPlaCta;
    private ZafColNumerada objColNumGrpUsr, objColNumPlaCta;
    //para grupo
    private ZafTblCelRenChk objTblCelRenChk;
    private ZafTblCelEdiChk objTblCelEdiChk;
    //para plan de cuentas
    private ZafTblCelRenChk objTblCelRenChkPlaCta;
    private ZafTblCelEdiChk objTblCelEdiChkPlaCta;
    private ZafTblEdi objTblEdi;
    private ZafTblCelRenLbl objTblCelRenLbl;            //Render: Presentar JLabel en JTable.
    private ZafVenCon vcoTipDoc, vcoCtaDeb, vcoCtaHab;                        //Ventana de consulta "Tipo de documento".    
    private Connection con;
    private Statement stm;
    private ResultSet rst;
    private String strDesCorTipDoc, strDesLarTipDoc, strAux, strSQL, strNumCtaDeb, strNomCtaDeb, strNumCtaHab, strNomCtaHab;
    
    private Vector vecCabGrpUsr, vecRegGrpUsr, vecDatGrpUsr;
    private Vector vecCabPlaCta, vecRegPlaCta, vecDatPlaCta;
    private int numFilPlaCta;
    private Vector vecAux;
    

    /*arraylist que almacenar√° los nodos hijos de la cuenta seleccionada
     */
    private ArrayList arlRegNodHij, arlDatNodHij;
    final int INT_ARL_COD_EMP=0;
    final int INT_ARL_COD_CTA_SEL=1;
    final int INT_ARL_COD_CTA_HIJ=2;
    
    
    private ArrayList arlDatCodGrpUsr;
    private int numColModIni;
    
    final int INT_TBL_GRP_USU_LIN=0;
    final int INT_TBL_GRP_USU_CHK=1;
    final int INT_TBL_GRP_USU_COD=2;
    final int INT_TBL_GRP_USU_DES_COR=3;
    final int INT_TBL_GRP_USU_DES_LAR=4;
    
    final int INT_TBL_PLA_CTA_LIN=0;
    final int INT_TBL_PLA_CTA_COD_EMP=1;
    final int INT_TBL_PLA_CTA_COD_CTA=2;
    final int INT_TBL_PLA_CTA_NUM_CTA=3;
    final int INT_TBL_PLA_CTA_NOM_CTA=4;
//    final int INT_TBL_PLA_CTA_SEL=5;
    private boolean blnMarTodChkTblEmp=true; 
    final int INT_ARR_COD_GRP_COD_USR=0;
    final int INT_ARR_COD_GRP_NOM_USR=1;
    
    private int intNumDatVecDat;
    //para saber si se realizaron cambios en la Cta de Debe y Haber del Tipo de Documento
    private boolean blnCamCtaDeb, blnCamCtaHab;
    //para guardar el valor inicial de la Cta de Debe y Haber del Tipo de Documento
    private String codCtaDebTipDocIni, codCtaHabTipDocIni;
    //para guardar el valor final(modificado) de la Cta de Debe y Haber del Tipo de Documento
    private String codCtaDebTipDocFin, codCtaHabTipDocFin;
    
    private String strVecDat[][];
    
    private int numColModFinGlb;
    private int iniRec;
    private ZafTblBus objTblBus;
    
    private String strCodUsrEli;
    
    /** Creates new form ZafMae32 */
    public ZafCon34(ZafParSis obj) {
        try{
            initComponents();
            //Inicializar objetos.
            this.objParSis=obj;
            jfrThis = this;
            objParSis=(ZafParSis)obj.clone();
            objUti=new ZafUtil();
            objTooBar=new MiToolBar(this);
            panTooBar.add(objTooBar);//llama a la barra de botones

            if (!configurarFrm())
                exitForm();
        }
        catch (CloneNotSupportedException e)
        {
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        tabFrm = new javax.swing.JTabbedPane();
        panGrl = new javax.swing.JPanel();
        panGrlCab = new javax.swing.JPanel();
        panTit = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        panCab = new javax.swing.JPanel();
        txtCodCtaHab = new javax.swing.JTextField();
        butCtaHab = new javax.swing.JButton();
        txtNomCtaHab = new javax.swing.JTextField();
        txtNumCtaHab = new javax.swing.JTextField();
        lblCtaHab = new javax.swing.JLabel();
        butCtaDeb = new javax.swing.JButton();
        txtNomCtaDeb = new javax.swing.JTextField();
        txtNumCtaDeb = new javax.swing.JTextField();
        txtCodCtaDeb = new javax.swing.JTextField();
        lblCtaDeb = new javax.swing.JLabel();
        butTipDoc = new javax.swing.JButton();
        txtDesLarTipDoc = new javax.swing.JTextField();
        txtDesCorTipDoc = new javax.swing.JTextField();
        txtCodTipDoc = new javax.swing.JTextField();
        lblTitTipDoc = new javax.swing.JLabel();
        panGrlGrp = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        spnGrlGrpUsu = new javax.swing.JScrollPane();
        tblDatGrpUsu = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        optGrp = new javax.swing.JRadioButton();
        optUsu = new javax.swing.JRadioButton();
        panPie = new javax.swing.JPanel();
        panGrlCta = new javax.swing.JPanel();
        chkSelAct = new javax.swing.JCheckBox();
        chkSelPas = new javax.swing.JCheckBox();
        chkSelPat = new javax.swing.JCheckBox();
        chkSelIng = new javax.swing.JCheckBox();
        chkSelCos = new javax.swing.JCheckBox();
        chkSelGto = new javax.swing.JCheckBox();
        chkSelOtrIng = new javax.swing.JCheckBox();
        chkSelOtrGto = new javax.swing.JCheckBox();
        panDat = new javax.swing.JPanel();
        panCtaUsr = new javax.swing.JPanel();
        spnPlaCta = new javax.swing.JScrollPane();
        tblDatPlaCta = new javax.swing.JTable();
        panTooBar = new javax.swing.JPanel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        panGrl.setLayout(new java.awt.BorderLayout());

        panGrlCab.setPreferredSize(new java.awt.Dimension(0, 100));
        panGrlCab.setLayout(new java.awt.BorderLayout());

        panTit.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("jLabel1");
        lblTit.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        panTit.add(lblTit, java.awt.BorderLayout.NORTH);

        panGrlCab.add(panTit, java.awt.BorderLayout.NORTH);

        panCab.setLayout(null);
        panCab.add(txtCodCtaHab);
        txtCodCtaHab.setBounds(80, 60, 50, 20);

        butCtaHab.setText("...");
        butCtaHab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCtaHabActionPerformed(evt);
            }
        });
        panCab.add(butCtaHab);
        butCtaHab.setBounds(460, 60, 30, 23);

        txtNomCtaHab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomCtaHabActionPerformed(evt);
            }
        });
        txtNomCtaHab.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomCtaHabFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomCtaHabFocusLost(evt);
            }
        });
        panCab.add(txtNomCtaHab);
        txtNomCtaHab.setBounds(228, 60, 230, 20);

        txtNumCtaHab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumCtaHabActionPerformed(evt);
            }
        });
        txtNumCtaHab.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNumCtaHabFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNumCtaHabFocusLost(evt);
            }
        });
        panCab.add(txtNumCtaHab);
        txtNumCtaHab.setBounds(131, 60, 96, 20);

        lblCtaHab.setText("Cuenta de haber:");
        panCab.add(lblCtaHab);
        lblCtaHab.setBounds(10, 60, 120, 14);

        butCtaDeb.setText("...");
        butCtaDeb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCtaDebActionPerformed(evt);
            }
        });
        panCab.add(butCtaDeb);
        butCtaDeb.setBounds(460, 34, 30, 23);

        txtNomCtaDeb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomCtaDebActionPerformed(evt);
            }
        });
        txtNomCtaDeb.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomCtaDebFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomCtaDebFocusLost(evt);
            }
        });
        panCab.add(txtNomCtaDeb);
        txtNomCtaDeb.setBounds(228, 34, 230, 20);

        txtNumCtaDeb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumCtaDebActionPerformed(evt);
            }
        });
        txtNumCtaDeb.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNumCtaDebFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNumCtaDebFocusLost(evt);
            }
        });
        panCab.add(txtNumCtaDeb);
        txtNumCtaDeb.setBounds(131, 34, 96, 20);
        panCab.add(txtCodCtaDeb);
        txtCodCtaDeb.setBounds(80, 34, 50, 20);

        lblCtaDeb.setText("Cuenta de debe:");
        panCab.add(lblCtaDeb);
        lblCtaDeb.setBounds(10, 34, 120, 14);

        butTipDoc.setText("...");
        butTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butTipDocActionPerformed(evt);
            }
        });
        panCab.add(butTipDoc);
        butTipDoc.setBounds(460, 10, 30, 23);

        txtDesLarTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarTipDocActionPerformed(evt);
            }
        });
        txtDesLarTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarTipDocFocusLost(evt);
            }
        });
        panCab.add(txtDesLarTipDoc);
        txtDesLarTipDoc.setBounds(228, 10, 230, 20);

        txtDesCorTipDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorTipDocActionPerformed(evt);
            }
        });
        txtDesCorTipDoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorTipDocFocusLost(evt);
            }
        });
        panCab.add(txtDesCorTipDoc);
        txtDesCorTipDoc.setBounds(131, 10, 96, 20);
        panCab.add(txtCodTipDoc);
        txtCodTipDoc.setBounds(80, 10, 50, 20);

        lblTitTipDoc.setText("Tipo de documento:");
        panCab.add(lblTitTipDoc);
        lblTitTipDoc.setBounds(10, 10, 120, 14);

        panGrlCab.add(panCab, java.awt.BorderLayout.CENTER);

        panGrl.add(panGrlCab, java.awt.BorderLayout.NORTH);

        panGrlGrp.setBorder(javax.swing.BorderFactory.createTitledBorder("Grupo de usuarios"));
        panGrlGrp.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        tblDatGrpUsu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnGrlGrpUsu.setViewportView(tblDatGrpUsu);

        jPanel1.add(spnGrlGrpUsu, java.awt.BorderLayout.CENTER);

        jPanel2.setPreferredSize(new java.awt.Dimension(100, 34));
        jPanel2.setLayout(null);

        optGrp.setSelected(true);
        optGrp.setText("Por Grupo");
        optGrp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optGrpActionPerformed(evt);
            }
        });
        jPanel2.add(optGrp);
        optGrp.setBounds(0, 0, 220, 16);

        optUsu.setText("Por Usuario");
        optUsu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optUsuActionPerformed(evt);
            }
        });
        jPanel2.add(optUsu);
        optUsu.setBounds(0, 16, 290, 16);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        panGrlGrp.add(jPanel1, java.awt.BorderLayout.CENTER);

        panGrl.add(panGrlGrp, java.awt.BorderLayout.CENTER);

        panPie.setPreferredSize(new java.awt.Dimension(10, 40));
        panPie.setLayout(new java.awt.BorderLayout());

        panGrlCta.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuentas"));
        panGrlCta.setPreferredSize(new java.awt.Dimension(0, 40));
        panGrlCta.setLayout(null);

        chkSelAct.setSelected(true);
        chkSelAct.setText("Activo");
        panGrlCta.add(chkSelAct);
        chkSelAct.setBounds(6, 15, 80, 18);

        chkSelPas.setSelected(true);
        chkSelPas.setText("Pasivo");
        panGrlCta.add(chkSelPas);
        chkSelPas.setBounds(82, 15, 80, 18);

        chkSelPat.setSelected(true);
        chkSelPat.setText("Patrimonio");
        panGrlCta.add(chkSelPat);
        chkSelPat.setBounds(158, 15, 80, 18);

        chkSelIng.setSelected(true);
        chkSelIng.setText("Ingresos");
        panGrlCta.add(chkSelIng);
        chkSelIng.setBounds(234, 15, 80, 18);

        chkSelCos.setSelected(true);
        chkSelCos.setText("Costos");
        panGrlCta.add(chkSelCos);
        chkSelCos.setBounds(310, 15, 80, 18);

        chkSelGto.setSelected(true);
        chkSelGto.setText("Gastos");
        panGrlCta.add(chkSelGto);
        chkSelGto.setBounds(386, 15, 80, 18);

        chkSelOtrIng.setSelected(true);
        chkSelOtrIng.setText("Otros Ingresos");
        panGrlCta.add(chkSelOtrIng);
        chkSelOtrIng.setBounds(462, 15, 100, 18);

        chkSelOtrGto.setSelected(true);
        chkSelOtrGto.setText("Otros Gastos");
        panGrlCta.add(chkSelOtrGto);
        chkSelOtrGto.setBounds(558, 15, 100, 18);

        panPie.add(panGrlCta, java.awt.BorderLayout.NORTH);

        panGrl.add(panPie, java.awt.BorderLayout.SOUTH);

        tabFrm.addTab("General", panGrl);

        panDat.setLayout(new java.awt.BorderLayout());

        panCtaUsr.setLayout(new java.awt.BorderLayout());

        tblDatPlaCta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnPlaCta.setViewportView(tblDatPlaCta);

        panCtaUsr.add(spnPlaCta, java.awt.BorderLayout.CENTER);

        panDat.add(panCtaUsr, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Reporte", panDat);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panTooBar.setLayout(new java.awt.BorderLayout());
        panFrm.add(panTooBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void butCtaHabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCtaHabActionPerformed
        // TODO add your handling code here:
        mostrarVenConCtaHab(0);
    }//GEN-LAST:event_butCtaHabActionPerformed

    private void txtNomCtaHabFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCtaHabFocusLost
        // TODO add your handling code here:
        //Validar el contenido de la celda s√≥lo si ha cambiado.
        if (!txtNomCtaHab.getText().equalsIgnoreCase(strNomCtaHab))
        {
            if (txtNomCtaHab.getText().equals(""))
            {
                txtCodCtaHab.setText("");
                txtNumCtaHab.setText("");
            }
            else
            {
                mostrarVenConCtaHab(2);
            }
        }
        else
            txtNomCtaHab.setText(strNomCtaHab);
    }//GEN-LAST:event_txtNomCtaHabFocusLost

    private void txtNomCtaHabFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCtaHabFocusGained
        // TODO add your handling code here:
        strNomCtaHab=txtNomCtaHab.getText();
        txtNomCtaHab.selectAll();
    }//GEN-LAST:event_txtNomCtaHabFocusGained

    private void txtNomCtaHabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomCtaHabActionPerformed
        // TODO add your handling code here:
        txtNomCtaHab.transferFocus();
    }//GEN-LAST:event_txtNomCtaHabActionPerformed

    private void txtNumCtaHabFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumCtaHabFocusLost
        // TODO add your handling code here:
        //Validar el contenido de la celda s√≥lo si ha cambiado.
        if (!txtNumCtaHab.getText().equalsIgnoreCase(strNumCtaHab))
        {
            if (txtNumCtaHab.getText().equals(""))
            {
                txtCodCtaHab.setText("");
                txtNomCtaHab.setText("");
            }
            else
            {
                mostrarVenConCtaHab(1);
            }
        }
        else
            txtNumCtaHab.setText(strNumCtaHab);
    }//GEN-LAST:event_txtNumCtaHabFocusLost

    private void txtNumCtaHabFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumCtaHabFocusGained
        // TODO add your handling code here:
        strNumCtaHab=txtNumCtaHab.getText();
        txtNumCtaHab.selectAll();
    }//GEN-LAST:event_txtNumCtaHabFocusGained

    private void txtNumCtaHabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumCtaHabActionPerformed
        // TODO add your handling code here:
        txtNumCtaHab.transferFocus();
    }//GEN-LAST:event_txtNumCtaHabActionPerformed

    private void txtNomCtaDebFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCtaDebFocusLost
        //Validar el contenido de la celda s√≥lo si ha cambiado.
        if (!txtNomCtaDeb.getText().equalsIgnoreCase(strNomCtaDeb))
        {
            if (txtNomCtaDeb.getText().equals(""))
            {
                txtCodCtaDeb.setText("");
                txtNumCtaDeb.setText("");
            }
            else
            {
                mostrarVenConCtaDeb(2);
            }
        }
        else
            txtNomCtaDeb.setText(strNomCtaDeb);
    }//GEN-LAST:event_txtNomCtaDebFocusLost

    private void txtNomCtaDebFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomCtaDebFocusGained
        // TODO add your handling code here:
        strNomCtaDeb=txtNomCtaDeb.getText();
        txtNomCtaDeb.selectAll();
    }//GEN-LAST:event_txtNomCtaDebFocusGained

    private void txtNomCtaDebActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomCtaDebActionPerformed
        // TODO add your handling code here:
	txtNomCtaDeb.transferFocus();
    }//GEN-LAST:event_txtNomCtaDebActionPerformed

    private void txtNumCtaDebFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumCtaDebFocusLost
        // TODO add your handling code here:
        //Validar el contenido de la celda s√≥lo si ha cambiado.
        if (!txtNumCtaDeb.getText().equalsIgnoreCase(strNumCtaDeb))
        {
            if (txtNumCtaDeb.getText().equals(""))
            {
                txtCodCtaDeb.setText("");
                txtNomCtaDeb.setText("");
            }
            else
            {
                mostrarVenConCtaDeb(1);
            }
        }
        else
            txtNumCtaDeb.setText(strNumCtaDeb);
    }//GEN-LAST:event_txtNumCtaDebFocusLost

    private void txtNumCtaDebFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumCtaDebFocusGained
        // TODO add your handling code here:
        strNumCtaDeb=txtNumCtaDeb.getText();
        txtNumCtaDeb.selectAll();
    }//GEN-LAST:event_txtNumCtaDebFocusGained

    private void txtNumCtaDebActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumCtaDebActionPerformed
        // TODO add your handling code here:
        txtNumCtaDeb.transferFocus();
    }//GEN-LAST:event_txtNumCtaDebActionPerformed

    private void butCtaDebActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCtaDebActionPerformed
        // TODO add your handling code here:
        mostrarVenConCtaDeb(0);
    }//GEN-LAST:event_butCtaDebActionPerformed

    private void butTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butTipDocActionPerformed
        // TODO add your handling code here:
        mostrarVenConTipDoc(0);
    }//GEN-LAST:event_butTipDocActionPerformed

    private void txtDesLarTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusLost
        //Validar el contenido de la celda s√≥lo si ha cambiado.
        if (!txtDesLarTipDoc.getText().equalsIgnoreCase(strDesLarTipDoc))
        {
            if (txtDesLarTipDoc.getText().equals(""))
            {
                txtCodTipDoc.setText("");
                txtDesCorTipDoc.setText("");
            }
            else
            {
                mostrarVenConTipDoc(2);
            }
        }
        else
            txtDesLarTipDoc.setText(strDesLarTipDoc);
    }//GEN-LAST:event_txtDesLarTipDocFocusLost

    private void txtDesLarTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarTipDocFocusGained
        // TODO add your handling code here:
        strDesLarTipDoc=txtDesLarTipDoc.getText();
        txtDesLarTipDoc.selectAll();        
    }//GEN-LAST:event_txtDesLarTipDocFocusGained

    private void txtDesLarTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarTipDocActionPerformed
        // TODO add your handling code here:
        txtDesLarTipDoc.transferFocus();
    }//GEN-LAST:event_txtDesLarTipDocActionPerformed

    private void txtDesCorTipDocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusLost
        if (!txtDesCorTipDoc.getText().equalsIgnoreCase(strDesCorTipDoc))
        {
            if (txtDesCorTipDoc.getText().equals(""))
            {
                txtCodTipDoc.setText("");
                txtDesLarTipDoc.setText("");
            }
            else
            {
                mostrarVenConTipDoc(1);
            }
        }
        else
            txtDesCorTipDoc.setText(strDesCorTipDoc);
    }//GEN-LAST:event_txtDesCorTipDocFocusLost

    private void txtDesCorTipDocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorTipDocFocusGained
        // TODO add your handling code here:
        strDesCorTipDoc=txtDesCorTipDoc.getText();
        txtDesCorTipDoc.selectAll();        
    }//GEN-LAST:event_txtDesCorTipDocFocusGained

    private void txtDesCorTipDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorTipDocActionPerformed
        // TODO add your handling code here:
        txtDesCorTipDoc.transferFocus();
        
    }//GEN-LAST:event_txtDesCorTipDocActionPerformed

    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="¬øEst√° seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            arlDatCodGrpUsr.clear();
            arlDatCodGrpUsr=null;
            dispose();
        }        
    }//GEN-LAST:event_exitForm

    private void optGrpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optGrpActionPerformed
        // TODO add your handling code here:
        if(optGrp.isSelected()){
            optUsu.setSelected(false);
            if(! (cargarGrpUsr()) )
                mostrarMsgInf("Advertencia: No se cargaron correctamente los datos de Grupos de Usuarios");
        }

}//GEN-LAST:event_optGrpActionPerformed

    private void optUsuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optUsuActionPerformed
        // TODO add your handling code here:
        if(optUsu.isSelected()){
            optGrp.setSelected(false);
            if(! (cargarUsr()) )
                mostrarMsgInf("Advertencia: No se cargaron correctamente los datos de Usuarios");
        }
}//GEN-LAST:event_optUsuActionPerformed
    
    
    private void exitForm(){
        arlDatCodGrpUsr.clear();
        arlDatCodGrpUsr=null;        
        dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butCtaDeb;
    private javax.swing.JButton butCtaHab;
    private javax.swing.JButton butTipDoc;
    private javax.swing.JCheckBox chkSelAct;
    private javax.swing.JCheckBox chkSelCos;
    private javax.swing.JCheckBox chkSelGto;
    private javax.swing.JCheckBox chkSelIng;
    private javax.swing.JCheckBox chkSelOtrGto;
    private javax.swing.JCheckBox chkSelOtrIng;
    private javax.swing.JCheckBox chkSelPas;
    private javax.swing.JCheckBox chkSelPat;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblCtaDeb;
    private javax.swing.JLabel lblCtaHab;
    private javax.swing.JLabel lblTit;
    private javax.swing.JLabel lblTitTipDoc;
    private javax.swing.JRadioButton optGrp;
    private javax.swing.JRadioButton optUsu;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panCtaUsr;
    private javax.swing.JPanel panDat;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGrl;
    private javax.swing.JPanel panGrlCab;
    private javax.swing.JPanel panGrlCta;
    private javax.swing.JPanel panGrlGrp;
    private javax.swing.JPanel panPie;
    private javax.swing.JPanel panTit;
    private javax.swing.JPanel panTooBar;
    private javax.swing.JScrollPane spnGrlGrpUsu;
    private javax.swing.JScrollPane spnPlaCta;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDatGrpUsu;
    private javax.swing.JTable tblDatPlaCta;
    private javax.swing.JTextField txtCodCtaDeb;
    private javax.swing.JTextField txtCodCtaHab;
    private javax.swing.JTextField txtCodTipDoc;
    private javax.swing.JTextField txtDesCorTipDoc;
    private javax.swing.JTextField txtDesLarTipDoc;
    private javax.swing.JTextField txtNomCtaDeb;
    private javax.swing.JTextField txtNomCtaHab;
    private javax.swing.JTextField txtNumCtaDeb;
    private javax.swing.JTextField txtNumCtaHab;
    // End of variables declaration//GEN-END:variables

    
    public class MiToolBar extends ZafToolBar{
        
        public MiToolBar(javax.swing.JInternalFrame jfrThis){
            super(jfrThis, objParSis);       
        }
        
        public boolean aceptar() {
            boolean blnRes=true;
            return blnRes;
        }
        
        public boolean afterAceptar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterAnular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterCancelar() {
            boolean blnRes=true;
            return blnRes;
        }
        
        public boolean afterConsultar() {
            boolean blnRes=true;
            setEditablePlaCta(true);
            if(con!=null){
                try{
                    con.close();
                    con=null;
                }
                catch (java.sql.SQLException e){
                    objUti.mostrarMsgErr_F1(this, e);
                }               
            }
            tabFrm.setSelectedIndex(1);
            return blnRes;            
        }
        
        public boolean afterEliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterImprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterInsertar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean afterModificar() {
            boolean blnRes=true;            
            
            codCtaDebTipDocIni=codCtaDebTipDocFin;
            blnCamCtaDeb=false;
            codCtaHabTipDocIni=codCtaHabTipDocFin;
            blnCamCtaHab=false;
            return blnRes;            
        }
        
        public boolean afterVistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean anular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeAceptar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeAnular() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeCancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeConsultar() {
            boolean blnRes=true;
            try{
                con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
                if(con!=null){
                    
                    if(!(isTipDocSel())){
                        return false;
                    }
                    if(generaNumColChk()){
                        if(eliminaColTblDatAdicionadas()){
                            if( agregarColTblDat() ){
                            }
                            else
                                blnRes=false;
                        }
                        else
                            blnRes=false;

                    }
                    else
                        blnRes=false;
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }               
            

            return blnRes;            
        }
        
        public boolean beforeEliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeImprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeInsertar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean beforeModificar() {
            boolean blnRes=true;
            if(isCamCmpCtaTipDoc());
//            tabFrm.setSelectedIndex(1);
            return blnRes;            
        }
        
        public boolean beforeVistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean cancelar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public void clickAceptar() {
        }
        
        public void clickAnterior() {
        }
        
        public void clickAnular() {
        }
        
        public void clickCancelar() {
            cleanFrm();
            objTblModGrpUsr.removeAllRows();
            objTblModPlaCta.removeAllRows();
            chkSelAct.setSelected(true);
            chkSelPas.setSelected(true);
            chkSelPat.setSelected(true);
            chkSelIng.setSelected(true);
            chkSelCos.setSelected(true);
            chkSelGto.setSelected(true);
            chkSelOtrIng.setSelected(true);
            chkSelOtrGto.setSelected(true);
            txtCodTipDoc.setEditable(true);
            txtDesCorTipDoc.setEditable(true);
            txtDesLarTipDoc.setEditable(true);
            butTipDoc.setEnabled(true);
            txtCodCtaDeb.setEditable(false);
            txtNumCtaDeb.setEditable(false);
            txtNomCtaDeb.setEditable(false);
            butCtaDeb.setEnabled(false);
            txtCodCtaHab.setEditable(false);
            txtNumCtaHab.setEditable(false);
            txtNomCtaHab.setEditable(false);
            butCtaHab.setEnabled(false);
            strAux="";
            if(arlDatCodGrpUsr==null){
                arlDatCodGrpUsr.clear();
                arlDatCodGrpUsr=null;                
            }
            eliminaColTblDatAdicionadas();
            
            if(con!=null){
                try{
                    con.close();
                    con=null;
                }
                catch (java.sql.SQLException e){
                    objUti.mostrarMsgErr_F1(this, e);
                }               
            }
            tabFrm.setSelectedIndex(0);
        }
        
        public void clickConsultar() {

            txtCodCtaDeb.setEditable(false);
            txtNumCtaDeb.setEditable(false);
            txtNomCtaDeb.setEditable(false);
            butCtaDeb.setEnabled(false);
            txtCodCtaHab.setEditable(false);
            txtNumCtaHab.setEditable(false);
            txtNomCtaHab.setEditable(false);
            butCtaHab.setEnabled(false);

            txtCodTipDoc.setEditable(true);
            txtDesCorTipDoc.setEditable(true);
            txtDesLarTipDoc.setEditable(true);
            butTipDoc.setEnabled(true);


            setEditableGrpUsr(true);
            if(optGrp.isSelected()){
                if(! (cargarGrpUsr()) )
                    mostrarMsgInf("Advertencia: No se cargaron correctamente los datos de Grupos de Usuarios");
            }
            else{
                if(!cargarUsr()){
                    mostrarMsgInf("Advertencia: No se cargaron correctamente los datos de Usuarios");
                }
            }


            

        }
        
        public void clickEliminar() {
        }
        
        public void clickFin() {
        }
        
        public void clickImprimir() {
        }
        
        public void clickInicio() {
        }
        
        public void clickInsertar() {
        }
        
        public void clickModificar() {
            txtCodCtaDeb.setEditable(true);
            txtNumCtaDeb.setEditable(true);
            txtNomCtaDeb.setEditable(true);
            butCtaDeb.setEnabled(true);
            txtCodCtaHab.setEditable(true);
            txtNumCtaHab.setEditable(true);
            txtNomCtaHab.setEnabled(true);
            butCtaHab.setEnabled(true);
            txtCodTipDoc.setEditable(false);
            txtDesCorTipDoc.setEditable(false);
            txtDesLarTipDoc.setEditable(false);
            butTipDoc.setEnabled(false);
            setEditableGrpUsr(false);
            noSelBloCta(false);
        }
        
        public void clickSiguiente() {
        }
        
        public void clickVisPreliminar() {
        }
        
        public boolean consultar() {
            boolean blnRes=true;
            setEditablePlaCta(true);
                if(cargarPlaCta())
                    tabFrm.setSelectedIndex(1);
            return blnRes;            
        }
        
        public boolean eliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean imprimir() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean insertar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
        public boolean modificar() {
            boolean blnRes=true;
//            if(!(actualizaCtaTipDoc()))
//                blnRes=false;
            
            if( ! (actualizaTbrCtaTipDocUsr())  )
                blnRes=false;
            
            return blnRes;            
        }
        
        public boolean vistaPreliminar() {
            boolean blnRes=true;
            return blnRes;            
        }
        
    }
    
    
    
    
    private boolean configurarFrm(){
        boolean blnRes=true;
        lblTit.setText(objParSis.getNombreMenu());
        this.setTitle(objParSis.getNombreMenu() + "v0.4.5");
        strVecDat=new String [50][50];
        txtCodTipDoc.setVisible(false);
        txtCodCtaDeb.setVisible(false);
        txtCodCtaHab.setVisible(false);
        arlDatCodGrpUsr=new ArrayList();
        configurarVenConTipDoc();
        configurarVenConCtaDeb();
        configurarVenConCtaHab();
        
        configurarGrpUsr();
        configurarPlaCta();
        
        objTooBar.setVisibleInsertar(false);
        objTooBar.setVisibleAnular(false);
        objTooBar.setVisibleEliminar(false);
        
        arlDatNodHij=new ArrayList();
        arlDatNodHij.clear();
        numColModIni=tblDatPlaCta.getColumnCount();
        return blnRes;
    }    
    
    
    private void configurarGrpUsr(){
        vecDatGrpUsr=new Vector();
        vecDatGrpUsr.clear();
        vecCabGrpUsr=new Vector(5);
        vecCabGrpUsr.clear();
        vecCabGrpUsr.add(INT_TBL_GRP_USU_LIN, "");
        vecCabGrpUsr.add(INT_TBL_GRP_USU_CHK, "SEL.");
        vecCabGrpUsr.add(INT_TBL_GRP_USU_COD, "C√ìDIGO DE GRUPO DE USUARIO");
        vecCabGrpUsr.add(INT_TBL_GRP_USU_DES_COR, "DESC. CORTA DE GRUPO DE USUARIO.");
        vecCabGrpUsr.add(INT_TBL_GRP_USU_DES_LAR, "DESC. LARGA DE GRUPO DE USUARIO.");

        objTblModGrpUsr=new ZafTblMod();
        objTblModGrpUsr.setHeader(vecCabGrpUsr);            
        //Configurar JTable: Establecer el modelo de la tabla.
        tblDatGrpUsu.setModel(objTblModGrpUsr);
        objColNumGrpUsr=new ZafColNumerada(tblDatGrpUsu, INT_TBL_GRP_USU_LIN);
        //Configurar JTable: Establecer tipo de selecci√≥n.
        tblDatGrpUsu.setRowSelectionAllowed(true);
        tblDatGrpUsu.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        //Configurar JTable: Establecer el men√∫ de contexto.
        objTblPopMnuGrpUsr=new ZafTblPopMnu(tblDatGrpUsu);
        //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
        tblDatGrpUsu.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        //Configurar JTable: Establecer el ancho de las columnas.
        javax.swing.table.TableColumnModel tcmAux=tblDatGrpUsu.getColumnModel();
        tcmAux.getColumn(INT_TBL_GRP_USU_LIN).setPreferredWidth(40);
        tcmAux.getColumn(INT_TBL_GRP_USU_CHK).setPreferredWidth(30);
        tcmAux.getColumn(INT_TBL_GRP_USU_COD).setPreferredWidth(60);
        tcmAux.getColumn(INT_TBL_GRP_USU_DES_COR).setPreferredWidth(80);                
        tcmAux.getColumn(INT_TBL_GRP_USU_DES_LAR).setPreferredWidth(200);
        //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
        tcmAux.getColumn(INT_TBL_GRP_USU_CHK).setResizable(false);
        tcmAux.getColumn(INT_TBL_GRP_USU_COD).setResizable(false);
        //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
        tblDatGrpUsu.getTableHeader().setReorderingAllowed(false);
        
        
        //Configurar JTable: Ocultar columnas del sistema.
//        tcmAux.getColumn(INT_TBL_GRP_USU_COD).setWidth(0);
//        tcmAux.getColumn(INT_TBL_GRP_USU_COD).setMaxWidth(0);
//        tcmAux.getColumn(INT_TBL_GRP_USU_COD).setMinWidth(0);
//        tcmAux.getColumn(INT_TBL_GRP_USU_COD).setPreferredWidth(0);
//        tcmAux.getColumn(INT_TBL_GRP_USU_COD).setResizable(false);        
        
        objTblCelRenChk=new ZafTblCelRenChk();
        tblDatGrpUsu.getColumnModel().getColumn(INT_TBL_GRP_USU_CHK).setCellRenderer(objTblCelRenChk);
        objTblCelEdiChk=new ZafTblCelEdiChk(tblDatGrpUsu);
        tblDatGrpUsu.getColumnModel().getColumn(INT_TBL_GRP_USU_CHK).setCellEditor(objTblCelEdiChk);            
        objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {

            });
        //para hacer editable las celdas
        vecAux=new Vector();                       
        vecAux.add("" + INT_TBL_GRP_USU_CHK);
        objTblModGrpUsr.setColumnasEditables(vecAux);            
        vecAux=null;

         //Configurar JTable: Editor de la tabla.
        objTblEdi=new ZafTblEdi(tblDatGrpUsu);
        setEditableGrpUsr(true);
    }
    
    
    private void configurarPlaCta(){
        vecDatPlaCta=new Vector();
        vecDatPlaCta.clear();
        vecCabPlaCta=new Vector(5);
        vecCabPlaCta.clear();
        vecCabPlaCta.add(INT_TBL_PLA_CTA_LIN, "");
        vecCabPlaCta.add(INT_TBL_PLA_CTA_COD_EMP, "COD. EMP.");
        vecCabPlaCta.add(INT_TBL_PLA_CTA_COD_CTA, "COD. CTA.");
        vecCabPlaCta.add(INT_TBL_PLA_CTA_NUM_CTA, "NUM. CTA.");
        vecCabPlaCta.add(INT_TBL_PLA_CTA_NOM_CTA, "NOMBRE CUENTA");
//        vecCabPlaCta.add(INT_TBL_PLA_CTA_SEL, "SEL");
        

        objTblModPlaCta=new ZafTblMod();
        objTblModPlaCta.setHeader(vecCabPlaCta);            
        //Configurar JTable: Establecer el modelo de la tabla.
        tblDatPlaCta.setModel(objTblModPlaCta);
        objColNumPlaCta=new ZafColNumerada(tblDatPlaCta, INT_TBL_PLA_CTA_LIN);
        //Configurar JTable: Establecer tipo de selecci√≥n.
        tblDatPlaCta.setRowSelectionAllowed(true);
        tblDatPlaCta.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        //Configurar JTable: Establecer el men√∫ de contexto.
        objTblPopMnuPlaCta=new ZafTblPopMnu(tblDatPlaCta);
        //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
        tblDatPlaCta.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        //Configurar JTable: Establecer el ancho de las columnas.
        javax.swing.table.TableColumnModel tcmAuxPlaCta=tblDatPlaCta.getColumnModel();
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_LIN).setPreferredWidth(40);
//        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_EMP).setPreferredWidth(40);
//        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_CTA).setPreferredWidth(30);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_NUM_CTA).setPreferredWidth(90);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_NOM_CTA).setPreferredWidth(200);
//        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_SEL).setPreferredWidth(40);
        
        //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_CTA).setResizable(false);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_EMP).setResizable(false);
        //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
        tblDatPlaCta.getTableHeader().setReorderingAllowed(false);
        
        tblDatPlaCta.getTableHeader().addMouseMotionListener(new ZafMouMotAda());
        //Configurar JTable: Establecer los listener para el TableHeader.
        tblDatPlaCta.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEmpMouseClicked(evt);
            }
        });        
        
        
        
        //Configurar JTable: Ocultar columnas del sistema.
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_CTA).setWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_CTA).setMaxWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_CTA).setMinWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_CTA).setPreferredWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_CTA).setResizable(false);
        
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_EMP).setWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_EMP).setMaxWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_EMP).setMinWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_EMP).setPreferredWidth(0);
        tcmAuxPlaCta.getColumn(INT_TBL_PLA_CTA_COD_EMP).setResizable(false);         
        
          //para crear check
//        objTblCelRenChk=new ZafTblCelRenChk();
//        tblDatPlaCta.getColumnModel().getColumn(INT_TBL_GRP_USU_CHK).setCellRenderer(objTblCelRenChk);
//        objTblCelEdiChk=new ZafTblCelEdiChk(tblDatPlaCta);
//        tblDatPlaCta.getColumnModel().getColumn(INT_TBL_GRP_USU_CHK).setCellEditor(objTblCelEdiChk);            
//        objTblCelEdiChk.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
//        });
          //para hacer editable las celdas
//        vecAux=new Vector();                       
//        vecAux.add("" + INT_TBL_GRP_USU_CHK);
//        objTblModGrpUsr.setColumnasEditables(vecAux);            
//        vecAux=null;
          //Configurar JTable: Editor de la tabla.
//        objTblEdi=new ZafTblEdi(tblDatPlaCta);
//        setEditableGrpUsr(true);
        
        objTblBus=new ZafTblBus(tblDatPlaCta);
        
    }
    
    
    //para q puedan editarse las columnas especificadas en funcion configurarFrmGrpUsr();
    public void setEditableGrpUsr(boolean editable)
    {
        if (editable==true)
        {
            objTblModGrpUsr.setModoOperacion(objTblModGrpUsr.INT_TBL_EDI);
        }
        else
        {
            objTblModGrpUsr.setModoOperacion(objTblModGrpUsr.INT_TBL_NO_EDI);
        }
    }
    
    
    //para q puedan editarse las columnas especificadas en funcion configurarFrmPlaCta();
    public void setEditablePlaCta(boolean editable)
    {
        if (editable==true)
        {
            objTblModPlaCta.setModoOperacion(objTblModPlaCta.INT_TBL_INS);
        }
        else
        {
            objTblModPlaCta.setModoOperacion(objTblModPlaCta.INT_TBL_NO_EDI);
        }
    }    
    
    
    
    private boolean cargarGrpUsr(){
        boolean blnRes=true;
        objTblModPlaCta.removeAllRows();
        try{                        
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="select co_grp, tx_descor, tx_deslar";
                strSQL+=" from tbm_grpusr";
                strSQL+=" where st_reg='A'";
                strSQL+=" order by tx_descor";
                rst=stm.executeQuery(strSQL);
                while (rst.next()){
                    vecRegGrpUsr=new Vector();
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_LIN, "");
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_CHK, "");
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_COD, "" + rst.getInt("co_grp"));
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_DES_COR, "" + (rst.getString("tx_descor")==null?"":rst.getString("tx_descor")) );
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_DES_LAR, "" + (rst.getString("tx_deslar")==null?"":rst.getString("tx_deslar")) );
                    vecDatGrpUsr.add(vecRegGrpUsr);
                }
                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                objTblModGrpUsr.setData(vecDatGrpUsr);
                tblDatGrpUsu.setModel(objTblModGrpUsr);
                vecDatGrpUsr.clear();
            }            
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }                
        return blnRes;
    }
    
    
    private boolean cargarUsr(){
        boolean blnRes=true;
        objTblModPlaCta.removeAllRows();
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                if(objParSis.getCodigoUsuario()==1){
                    strSQL="";
                    strSQL+="SELECT a1.co_usr, a1.tx_usr, a1.tx_nom ";
                    strSQL+=" FROM tbm_usr AS a1";
                    strSQL+=" WHERE ";
                    strSQL+=" a1.st_reg NOT IN('I','E')";
                    strSQL+=" ORDER BY a1.tx_nom";
                }
                else{
                    strSQL="";
                    strSQL+="SELECT a1.co_usr, a1.tx_usr, a1.tx_nom ";
                    strSQL+=" FROM tbm_usr AS a1 INNER JOIN tbr_usrEmp AS a2";
                    strSQL+=" ON a1.co_usr=a2.co_usr";
                    strSQL+=" WHERE a2.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+=" AND a1.st_reg NOT IN('I','E')";
                    strSQL+=" ORDER BY a1.tx_nom";
                }


                rst=stm.executeQuery(strSQL);
                while (rst.next()){
                    vecRegGrpUsr=new Vector();
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_LIN, "");
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_CHK, "");
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_COD, "" + rst.getInt("co_usr"));
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_DES_COR, "" + (rst.getString("tx_usr")==null?"":rst.getString("tx_usr")) );
                    vecRegGrpUsr.add(INT_TBL_GRP_USU_DES_LAR, "" + (rst.getString("tx_nom")==null?"":rst.getString("tx_nom")) );
                    vecDatGrpUsr.add(vecRegGrpUsr);
                }
                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                objTblModGrpUsr.setData(vecDatGrpUsr);
                tblDatGrpUsu.setModel(objTblModGrpUsr);
                vecDatGrpUsr.clear();
            }
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }

    
    private boolean cargarPlaCta(){
        String strVecTmp[] = new String [11];
        boolean blnRes=true;
        int intTmp=0;
        strAux="";
        int intNumFil=0;
        int intNumFilTblPlaCta=obtieneNumFilTblPlaCta();
        strAux="";
        
        int flag=0;
        String strCodUsr="";
        int w=0;
        int intColSet=0;
        String strCodCtaTipDoc="", strCodCtaTbl;
        String strCodUsrGrp="";
        
        
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="select a1.co_emp as codEmpPla, a1.co_cta as codCtaPla, a1.tx_codcta as numCtaPla, a1.tx_deslar as nomCtaPla";
                strSQL+=" from tbm_placta as a1";
                strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and a1.st_reg='A'";
                
                
                int z=0;
                if(chkSelAct.isSelected())                    z++;
                if(chkSelPas.isSelected())                    z++;
                if(chkSelPat.isSelected())                    z++;
                if(chkSelIng.isSelected())                    z++;
                if(chkSelCos.isSelected())                    z++;
                if(chkSelGto.isSelected())                    z++;
                if(chkSelOtrIng.isSelected())                    z++;
                if(chkSelOtrGto.isSelected())                    z++;                               
                
                for(int j=0;j<=z;j++){
                    if (chkSelAct.isSelected()){                        strVecTmp[j]="'1'";                        j++;                    }                        
                    if (chkSelPas.isSelected()){                        strVecTmp[j]="'2'";                        j++;                    }                        
                    if (chkSelPat.isSelected()){                        strVecTmp[j]="'3'";                        j++;                    }                        
                    if (chkSelIng.isSelected()){                        strVecTmp[j]="'4'";                        j++;                    }                        
                    if (chkSelCos.isSelected()){                        strVecTmp[j]="'5'";                        j++;                    }                        
                    if (chkSelGto.isSelected()){                        strVecTmp[j]="'6'";                        j++;                    }                        
                    if (chkSelOtrIng.isSelected()){                     strVecTmp[j]="'7'";                        j++;                    }                        
                    if (chkSelOtrGto.isSelected()){                     strVecTmp[j]="'8'";                        j++;                    }  
                }
                for(int j=z-1;j>=0;j--){
                    if(intTmp==0){
                        strAux+=" and a1.tx_niv1 in (";
                        intTmp++;
                    }                                        
                    if(j==0){
                        strAux+=strVecTmp[j];
                        strAux+=" )";
                    }
                    else{
                        strAux+=strVecTmp[j] + ",";
                    }
                }
                strSQL+=strAux;
                strSQL+=" group by a1.tx_codcta, a1.co_emp, a1.co_cta, a1.tx_deslar";
                strSQL+=" order by a1.tx_codcta";
                rst=stm.executeQuery(strSQL);
                
                while (rst.next()){
                    vecRegPlaCta=new Vector();
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_LIN, "");
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_COD_EMP, "" + ( rst.getString("codEmpPla")==null?"":"" + rst.getInt("codEmpPla") )  );
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_COD_CTA, "" + ( rst.getString("codCtaPla")==null?"":"" + rst.getInt("codCtaPla") )  );
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_NUM_CTA, "" + ( rst.getString("numCtaPla")==null?"":"" + rst.getString("numCtaPla") )  );
                    vecRegPlaCta.add(INT_TBL_PLA_CTA_NOM_CTA, "" + ( rst.getString("nomCtaPla")==null?"":"" + rst.getString("nomCtaPla") ));
                    
                    //para adicionar el componente CHK en las columnas adicionadas
                    vecAux=new Vector();                    
                    for (int j=0; j<intNumDatVecDat; j++){
                        vecRegPlaCta.add(5+j, "");
                        objTblCelRenChkPlaCta=new ZafTblCelRenChk();
                        tblDatPlaCta.getColumnModel().getColumn(5+j).setCellRenderer(objTblCelRenChkPlaCta);
//                        objTblCelEdiChkPlaCta=new ZafTblCelEdiChk(tblDatPlaCta);
//                        tblDatPlaCta.getColumnModel().getColumn(5+j).setCellEditor(objTblCelEdiChkPlaCta);

                        //para hacer editable las celdas
                        vecAux.add("" + (5+j));
                        objTblModPlaCta.setColumnasEditables(vecAux);
                         //Configurar JTable: Editor de la tabla.
                        objTblEdi=new ZafTblEdi(tblDatPlaCta);
                        setEditablePlaCta(true);
                    }
                    vecDatPlaCta.add(vecRegPlaCta);
                    blnMarTodChkTblEmp=false;
                }
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                objTblModPlaCta.setData(vecDatPlaCta);
                tblDatPlaCta.setModel(objTblModPlaCta);
                vecDatPlaCta.clear();

                strAux="";
                intTmp=0;
                stm=con.createStatement();
                strSQL="";
                strSQL+="select a1.co_emp as codEmpPla, a1.co_cta as codCtaPla, a1.tx_codcta as numCtaPla, a1.tx_deslar as nomCtaPla,";
                strSQL+=" a2.co_emp as codEmpTipGrp, a2.co_loc as codLocTipGrp, a2.co_tipdoc as codTipDocTipGrp, a2.co_usr as codUsrTipGrp, a2.co_cta as codCtaTipGrp";
                strSQL+=" from tbm_placta as a1 inner join";
                strSQL+=" (tbr_ctatipdocusr as a2 inner join tbm_usr as a3 on a2.co_usr=a3.co_usr";
                strSQL+=" inner join tbm_cabtipdoc as a4 on a2.co_emp=a4.co_emp and a2.co_loc=a4.co_loc and a2.co_tipdoc=a4.co_tipdoc)";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.co_cta=a2.co_cta";
                strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + " AND a2.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" /*and a1.tx_tipcta='D'*/ and a1.st_reg='A'";
                

                z=0;
                if(chkSelAct.isSelected())                    z++;
                if(chkSelPas.isSelected())                    z++;
                if(chkSelPat.isSelected())                    z++;
                if(chkSelIng.isSelected())                    z++;
                if(chkSelCos.isSelected())                    z++;
                if(chkSelGto.isSelected())                    z++;
                if(chkSelOtrIng.isSelected())                    z++;
                if(chkSelOtrGto.isSelected())                    z++;                               

                for(int j=0;j<=z;j++){
                    if (chkSelAct.isSelected()){                        strVecTmp[j]="'1'";                        j++;                    }                        
                    if (chkSelPas.isSelected()){                        strVecTmp[j]="'2'";                        j++;                    }                        
                    if (chkSelPat.isSelected()){                        strVecTmp[j]="'3'";                        j++;                    }                        
                    if (chkSelIng.isSelected()){                        strVecTmp[j]="'4'";                        j++;                    }                        
                    if (chkSelCos.isSelected()){                        strVecTmp[j]="'5'";                        j++;                    }                        
                    if (chkSelGto.isSelected()){                        strVecTmp[j]="'6'";                        j++;                    }                        
                    if (chkSelOtrIng.isSelected()){                     strVecTmp[j]="'7'";                        j++;                    }                        
                    if (chkSelOtrGto.isSelected()){                     strVecTmp[j]="'8'";                        j++;                    }  
                }
                for(int j=z-1;j>=0;j--){
                    if(intTmp==0){
                        strAux+=" and a1.tx_niv1 in (";
                        intTmp++;
                    }                                        
                    if(j==0){
                        strAux+=strVecTmp[j];
                        strAux+=" )";
                    }
                    else{
                        strAux+=strVecTmp[j] + ",";
                    }
                }
                strSQL+=strAux;                    


                strSQL+=" and a2.co_tipdoc=" + txtCodTipDoc.getText() + "";
                
                strAux="";
                intTmp=0;
                for(int j=iniRec-1;j>=0;j--){
                    if(intTmp==0){
                        if(optGrp.isSelected())
                            strAux+=" and a3.co_grpusr in (";
                        else
                            strAux+=" and a2.co_usr in (";
                        intTmp++;
                    }                                        
                    if(j==0){
                        strAux+=objUti.getIntValueAt(arlDatCodGrpUsr, j, INT_ARR_COD_GRP_COD_USR);
                        strAux+=")";
                    }
                    else{
                        strAux+=objUti.getStringValueAt(arlDatCodGrpUsr, j, INT_ARR_COD_GRP_COD_USR) + ",";
                    }
                }
                strSQL+=strAux;
                strSQL+=" order by a2.co_usr";
                rst=stm.executeQuery(strSQL);
                strCodUsrGrp=strVecDat[w][0]==null?"":strVecDat[w][0];
                while (rst.next()){
                    strCodUsr=rst.getString("codUsrTipGrp");
                    while( !(strCodUsrGrp.equals(""))  ){
                        strCodUsrGrp=strVecDat[w][0]==null?"":strVecDat[w][0];
                        if(strCodUsr.toString().equals(strCodUsrGrp)){
                            intColSet=Integer.parseInt(strVecDat[w][2]);
                            
                            strCodCtaTipDoc=rst.getString("codCtaTipGrp");
                            for(int y=0; y<objTblModPlaCta.getRowCountTrue(); y++){
                                strCodCtaTbl=""+(objTblModPlaCta.getValueAt(y, INT_TBL_PLA_CTA_COD_CTA)==null?"":objTblModPlaCta.getValueAt(y, INT_TBL_PLA_CTA_COD_CTA));
                                if(strCodCtaTipDoc.toString().equals(strCodCtaTbl)){
                                    objTblModPlaCta.setValueAt(new Boolean(true), y, intColSet);
                                }
                            }
                             
                        }
                    w++;
                    }
                    w=0;
                    strCodUsrGrp=strVecDat[w][0]==null?"":strVecDat[w][0];
                }

                con.close();
                con=null;
                stm.close();
                stm=null;
                rst.close();
                rst=null;
                strVecTmp=null;
            }            
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }                
        return blnRes;
    }
        

    
    private int obtieneNumFilTblPlaCta(){
        java.sql.Connection conTipDoc;
        java.sql.Statement stmTipDoc;
        java.sql.ResultSet rstTipDoc;
        String strVecTmp[] = new String [11];
        boolean blnRes=true;
        int intTmp=0;
        strAux="";
        int retNumFilPlaCta=0;
        try{            
            
            conTipDoc=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conTipDoc!=null){
                stmTipDoc=conTipDoc.createStatement();
                strSQL="";
                strSQL+="select count(*) as numFil";
                strSQL+=" from tbm_placta";
                strSQL+=" where co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" /*and tx_tipcta='D'*/";
                strSQL+=" and st_reg='A'";
                int z=0;
                if(chkSelAct.isSelected())                    z++;
                if(chkSelPas.isSelected())                    z++;
                if(chkSelPat.isSelected())                    z++;
                if(chkSelIng.isSelected())                    z++;
                if(chkSelCos.isSelected())                    z++;
                if(chkSelGto.isSelected())                    z++;
                if(chkSelOtrIng.isSelected())                    z++;
                if(chkSelOtrGto.isSelected())                    z++;                               
                
                for(int j=0;j<=z;j++){
                    if (chkSelAct.isSelected()){                        strVecTmp[j]="'1'";                        j++;                    }                        
                    if (chkSelPas.isSelected()){                        strVecTmp[j]="'2'";                        j++;                    }                        
                    if (chkSelPat.isSelected()){                        strVecTmp[j]="'3'";                        j++;                    }                        
                    if (chkSelIng.isSelected()){                        strVecTmp[j]="'4'";                        j++;                    }                        
                    if (chkSelCos.isSelected()){                        strVecTmp[j]="'5'";                        j++;                    }                        
                    if (chkSelGto.isSelected()){                        strVecTmp[j]="'6'";                        j++;                    }                        
                    if (chkSelOtrIng.isSelected()){                     strVecTmp[j]="'7'";                        j++;                    }                        
                    if (chkSelOtrGto.isSelected()){                     strVecTmp[j]="'8'";                        j++;                    }  
                }

                for(int j=z-1;j>=0;j--){
                    if(intTmp==0){
                        strAux+=" and tx_niv1 in (";
                        intTmp++;
                    }                                        
                    if(j==0){
                        strAux+=strVecTmp[j];
                        strAux+=" )";
                    }
                    else{
                        strAux+=strVecTmp[j] + ",";
                    }
                }                                
                strSQL+=strAux;
                rstTipDoc=stmTipDoc.executeQuery(strSQL);
                while (rstTipDoc.next()){                    
                    retNumFilPlaCta=rstTipDoc.getInt("numFil");
                }
                conTipDoc.close();
                conTipDoc=null;
                stmTipDoc.close();
                stmTipDoc=null;
                rstTipDoc.close();
                rstTipDoc=null;
                strVecTmp=null;
            }            
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }                
        return retNumFilPlaCta;
    }
           
    
    
    
    
    
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }    
    
    
    private boolean configurarVenConTipDoc()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_tipdoc");
            arlCam.add("a1.tx_desCor");
            arlCam.add("a1.tx_desLar");
            arlCam.add("a1.ne_ultDoc");
            arlCam.add("a1.tx_natDoc");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("C√≥digo");
            arlAli.add("Tip.Doc.");
            arlAli.add("Tipo de documento");
            arlAli.add("Ult.Doc.");
            arlAli.add("Nat.Doc.");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            arlAncCol.add("80");
            arlAncCol.add("80");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+="SELECT a1.co_tipdoc, a1.tx_desCor, a1.tx_desLar, a1.ne_ultDoc, a1.tx_natDoc";
            strSQL+=" FROM tbm_cabTipDoc AS a1";
            strSQL+=" WHERE ";
            strSQL+=" a1.co_emp=" + objParSis.getCodigoEmpresa();
            strSQL+=" AND a1.co_loc=" + objParSis.getCodigoLocal();
            strSQL+=" ORDER BY a1.tx_desCor";
            //Ocultar columnas.
            int intColOcu[]=new int[1];
            intColOcu[0]=5;
            vcoTipDoc=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de tipos de documentos", strSQL, arlCam, arlAli, arlAncCol, intColOcu);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            intColOcu=null;
            //Configurar columnas.
            vcoTipDoc.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoTipDoc.setConfiguracionColumna(4, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean mostrarVenConTipDoc(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoTipDoc.setCampoBusqueda(1);
                    vcoTipDoc.show();
                    if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE){
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        if (objTooBar.getEstado()=='n')
                        {
                            strAux=vcoTipDoc.getValueAt(4);
                        }
                        //LA SIGUIENTE FUNCION CARGA EN LOS TXT RESPECTIVOS LAS CUENTAS DE DEBE Y HABER DEL TIPO DE DOCUMENTO
                        cargaCtaTipDoc();
                        
                    }
                    break;
                case 1: //B√∫squeda directa por "Descripci√≥n corta".
                    if (vcoTipDoc.buscar("a1.tx_desCor", txtDesCorTipDoc.getText())){
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        if (objTooBar.getEstado()=='n')
                        {
                            strAux=vcoTipDoc.getValueAt(4);
                        }
                        //LA SIGUIENTE FUNCION CARGA EN LOS TXT RESPECTIVOS LAS CUENTAS DE DEBE Y HABER DEL TIPO DE DOCUMENTO
                        cargaCtaTipDoc();                        
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(1);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE){
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                            if (objTooBar.getEstado()=='n')
                            {
                                strAux=vcoTipDoc.getValueAt(4);
                            }
                        //LA SIGUIENTE FUNCION CARGA EN LOS TXT RESPECTIVOS LAS CUENTAS DE DEBE Y HABER DEL TIPO DE DOCUMENTO
                        cargaCtaTipDoc();
                        }
                        else
                        {
                            txtDesCorTipDoc.setText(strDesCorTipDoc);
                        }
                    }
                    break;
                case 2: //B√∫squeda directa por "Descripci√≥n larga".
                    if (vcoTipDoc.buscar("a1.tx_desLar", txtDesLarTipDoc.getText()))
                    {
                        txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                        txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                        txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                        if (objTooBar.getEstado()=='n')
                        {
                            strAux=vcoTipDoc.getValueAt(4);
                        }
                    //LA SIGUIENTE FUNCION CARGA EN LOS TXT RESPECTIVOS LAS CUENTAS DE DEBE Y HABER DEL TIPO DE DOCUMENTO
                    cargaCtaTipDoc();                        
                    }
                    else
                    {
                        vcoTipDoc.setCampoBusqueda(2);
                        vcoTipDoc.setCriterio1(11);
                        vcoTipDoc.cargarDatos();
                        vcoTipDoc.show();
                        if (vcoTipDoc.getSelectedButton()==vcoTipDoc.INT_BUT_ACE){
                            txtCodTipDoc.setText(vcoTipDoc.getValueAt(1));
                            txtDesCorTipDoc.setText(vcoTipDoc.getValueAt(2));
                            txtDesLarTipDoc.setText(vcoTipDoc.getValueAt(3));
                            if (objTooBar.getEstado()=='n')
                            {
                                strAux=vcoTipDoc.getValueAt(4);
                            }
                        //LA SIGUIENTE FUNCION CARGA EN LOS TXT RESPECTIVOS LAS CUENTAS DE DEBE Y HABER DEL TIPO DE DOCUMENTO
                        cargaCtaTipDoc();
                        }
                        else
                        {
                            txtDesLarTipDoc.setText(strDesLarTipDoc);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
   
    
    
    private boolean cargaCtaTipDoc(){
        boolean blnRes=true;
        try{            
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                if(cargarCtaDebTipDoc())
                    if(cargarCtaHabTipDoc());
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }        
        return blnRes;        
    }
    
    
    
    private boolean cargarCtaDebTipDoc(){
        boolean blnRes=true;        
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="select a2.co_cta, a2.tx_codcta, a2.tx_deslar";
                strSQL+=" from tbm_cabtipdoc as a1 left outer  join tbm_placta as a2";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.co_ctadeb=a2.co_cta";
                strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and a1.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" and a1.co_tipdoc=" + txtCodTipDoc.getText() + "";
                rst=stm.executeQuery(strSQL);
                if(rst.next()){
                    txtCodCtaDeb.setText("" + ( rst.getString("co_cta")==null?"": "" + rst.getInt("co_cta") )  );
                    txtNumCtaDeb.setText("" + ( rst.getString("tx_codcta")==null?"": rst.getString("tx_codcta") )  );
                    txtNomCtaDeb.setText("" + ( rst.getString("tx_deslar")==null?"": rst.getString("tx_deslar") )  );
                    codCtaDebTipDocIni=rst.getString("co_cta")==null?"": "" + rst.getInt("co_cta");
                }
                stm.close();
                rst.close();
                stm=null;
                rst=null;
            }            
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    
    private boolean cargarCtaHabTipDoc(){
        boolean blnRes=true;
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="select a2.co_cta, a2.tx_codcta, a2.tx_deslar";
                strSQL+=" from tbm_cabtipdoc as a1 left outer  join tbm_placta as a2";
                strSQL+=" on a1.co_emp=a2.co_emp and a1.co_ctaHab=a2.co_cta";
                strSQL+=" where a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and a1.co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" and a1.co_tipdoc=" + txtCodTipDoc.getText() + "";
                rst=stm.executeQuery(strSQL);
                if(rst.next()){
                    txtCodCtaHab.setText("" + ( rst.getString("co_cta")==null?"": "" + rst.getInt("co_cta") )  );
                    txtNumCtaHab.setText("" + ( rst.getString("tx_codcta")==null?"": rst.getString("tx_codcta") )  );
                    txtNomCtaHab.setText("" + ( rst.getString("tx_deslar")==null?"": rst.getString("tx_deslar") )  );
                    codCtaHabTipDocIni=rst.getString("co_cta")==null?"": "" + rst.getInt("co_cta");
                }
                stm.close();
                rst.close();
                stm=null;
                rst=null;
            }            
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }    
    
    
    
    private boolean configurarVenConCtaDeb()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a2.co_cta");
            arlCam.add("a2.tx_codcta");
            arlCam.add("a2.tx_deslar");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("C√≥digo Cuenta");
            arlAli.add("N√∫mero Cuenta");
            arlAli.add("Nombre Cuenta");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+=" select a2.co_cta, a2.tx_codcta, a2.tx_deslar";
            strSQL+=" from tbm_placta as a2";
            strSQL+=" where a2.co_emp=" + objParSis.getCodigoEmpresa() + "";
            strSQL+=" and tx_tipcta='D'";
            strSQL+=" order by tx_codcta";
            vcoCtaDeb=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de Cuenta", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoCtaDeb.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoCtaDeb.setConfiguracionColumna(2, javax.swing.JLabel.LEFT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }      
    
    private boolean mostrarVenConCtaDeb(int intTipBus)
    {
        boolean blnRes=true;        
        try
        {
            //Validar que s√≥lo se pueda seleccionar la "Cuenta" si se seleccion√≥ el "Tipo de documento".
            if (txtCodTipDoc.getText().equals(""))
            {
                txtCodCtaDeb.setText("");
                txtNumCtaDeb.setText("");
                txtNomCtaDeb.setText("");
                mostrarMsgInf("<HTML>Primero debe seleccionar un <FONT COLOR=\"blue\">Tipo de documento</FONT>.<BR>Escriba o seleccione un tipo de documento y vuelva a intentarlo.</HTML>");
                txtDesCorTipDoc.requestFocus();
            }
            else
            {
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+=" select a2.co_cta, a2.tx_codcta, a2.tx_deslar";
                strSQL+=" from tbm_placta as a2";
                strSQL+=" where a2.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and tx_tipcta='D'";
                strSQL+=" order by tx_codcta";
                vcoCtaDeb.setSentenciaSQL(strSQL);
                switch (intTipBus)
                {
                    case 0: //Mostrar la ventana de consulta.
                        vcoCtaDeb.setCampoBusqueda(1);
                        vcoCtaDeb.show();
                        if (vcoCtaDeb.getSelectedButton()==vcoCtaDeb.INT_BUT_ACE)
                        {
                            txtCodCtaDeb.setText(vcoCtaDeb.getValueAt(1));
                            txtNumCtaDeb.setText(vcoCtaDeb.getValueAt(2));
                            txtNomCtaDeb.setText(vcoCtaDeb.getValueAt(3));
                        }
                        break;
                    case 1: //B√∫squeda directa por "N√∫mero de cuenta".
                        if (vcoCtaDeb.buscar("a2.tx_codCta", txtNumCtaDeb.getText()))
                        {
                            txtCodCtaDeb.setText(vcoCtaDeb.getValueAt(1));
                            txtNumCtaDeb.setText(vcoCtaDeb.getValueAt(2));
                            txtNomCtaDeb.setText(vcoCtaDeb.getValueAt(3));
                        }
                        else
                        {
                            vcoCtaDeb.setCampoBusqueda(0);
                            vcoCtaDeb.setCriterio1(11);
                            vcoCtaDeb.cargarDatos();
                            vcoCtaDeb.show();
                            if (vcoCtaDeb.getSelectedButton()==vcoCtaDeb.INT_BUT_ACE)
                            {
                                txtCodCtaDeb.setText(vcoCtaDeb.getValueAt(1));
                                txtNumCtaDeb.setText(vcoCtaDeb.getValueAt(2));
                                txtNomCtaDeb.setText(vcoCtaDeb.getValueAt(3));
                            }
                            else
                            {
                                txtNumCtaDeb.setText(strNumCtaDeb);
                            }
                        }
                        break;
                    case 2: //B√∫squeda directa por "Descripci√≥n larga".
                        if (vcoCtaDeb.buscar("a2.tx_desLar", txtNomCtaDeb.getText()))
                        {
                            txtCodCtaDeb.setText(vcoCtaDeb.getValueAt(1));
                            txtNumCtaDeb.setText(vcoCtaDeb.getValueAt(2));
                            txtNomCtaDeb.setText(vcoCtaDeb.getValueAt(3));
                        }
                        else
                        {
                            vcoCtaDeb.setCampoBusqueda(1);
                            vcoCtaDeb.setCriterio1(11);
                            vcoCtaDeb.cargarDatos();
                            vcoCtaDeb.show();
                            if (vcoCtaDeb.getSelectedButton()==vcoCtaDeb.INT_BUT_ACE)
                            {
                                txtCodCtaDeb.setText(vcoCtaDeb.getValueAt(1));
                                txtNumCtaDeb.setText(vcoCtaDeb.getValueAt(2));
                                txtNomCtaDeb.setText(vcoCtaDeb.getValueAt(3));
                            }
                            else
                            {
                                txtNomCtaDeb.setText(strNomCtaDeb);
                            }
                        }
                        break;
                }
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean configurarVenConCtaHab()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a2.co_cta");
            arlCam.add("a2.tx_codcta");
            arlCam.add("a2.tx_deslar");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("C√≥digo Cuenta");
            arlAli.add("N√∫mero Cuenta");
            arlAli.add("Nombre Cuenta");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("80");
            arlAncCol.add("334");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+=" select a2.co_cta, a2.tx_codcta, a2.tx_deslar";
            strSQL+=" from tbm_placta as a2";
            strSQL+=" where a2.co_emp=" + objParSis.getCodigoEmpresa() + "";
            strSQL+=" and tx_tipcta='D'";
            strSQL+=" order by tx_codcta";
            vcoCtaHab=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de Cuenta", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoCtaHab.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
            vcoCtaHab.setConfiguracionColumna(2, javax.swing.JLabel.LEFT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }      
    
    private boolean mostrarVenConCtaHab(int intTipBus)
    {
        boolean blnRes=true;        
        try
        {
            //Validar que s√≥lo se pueda seleccionar la "Cuenta" si se seleccion√≥ el "Tipo de documento".
            if (txtCodTipDoc.getText().equals(""))
            {
                txtCodCtaHab.setText("");
                txtNumCtaHab.setText("");
                txtNomCtaHab.setText("");
                mostrarMsgInf("<HTML>Primero debe seleccionar un <FONT COLOR=\"blue\">Tipo de documento</FONT>.<BR>Escriba o seleccione un tipo de documento y vuelva a intentarlo.</HTML>");
                txtDesCorTipDoc.requestFocus();
            }
            else
            {
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+=" select a2.co_cta, a2.tx_codcta, a2.tx_deslar";
                strSQL+=" from tbm_placta as a2";
                strSQL+=" where a2.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and tx_tipcta='D'";
                strSQL+=" order by tx_codcta";
                vcoCtaHab.setSentenciaSQL(strSQL);
                switch (intTipBus)
                {
                    case 0: //Mostrar la ventana de consulta.
                        vcoCtaHab.setCampoBusqueda(1);
                        vcoCtaHab.show();
                        if (vcoCtaHab.getSelectedButton()==vcoCtaHab.INT_BUT_ACE)
                        {
                            txtCodCtaHab.setText(vcoCtaHab.getValueAt(1));
                            txtNumCtaHab.setText(vcoCtaHab.getValueAt(2));
                            txtNomCtaHab.setText(vcoCtaHab.getValueAt(3));
                        }
                        break;
                    case 1: //B√∫squeda directa por "N√∫mero de cuenta".
                        if (vcoCtaHab.buscar("a2.tx_codCta", txtNumCtaHab.getText()))
                        {
                            txtCodCtaHab.setText(vcoCtaHab.getValueAt(1));
                            txtNumCtaHab.setText(vcoCtaHab.getValueAt(2));
                            txtNomCtaHab.setText(vcoCtaHab.getValueAt(3));
                        }
                        else
                        {
                            vcoCtaHab.setCampoBusqueda(0);
                            vcoCtaHab.setCriterio1(11);
                            vcoCtaHab.cargarDatos();
                            vcoCtaHab.show();
                            if (vcoCtaHab.getSelectedButton()==vcoCtaHab.INT_BUT_ACE)
                            {
                                txtCodCtaHab.setText(vcoCtaHab.getValueAt(1));
                                txtNumCtaHab.setText(vcoCtaHab.getValueAt(2));
                                txtNomCtaHab.setText(vcoCtaHab.getValueAt(3));
                            }
                            else
                            {
                                txtNumCtaHab.setText(strNumCtaHab);
                            }
                        }
                        break;
                    case 2: //B√∫squeda directa por "Descripci√≥n larga".
                        if (vcoCtaHab.buscar("a2.tx_desLar", txtNomCtaHab.getText()))
                        {
                            txtCodCtaHab.setText(vcoCtaHab.getValueAt(1));
                            txtNumCtaHab.setText(vcoCtaHab.getValueAt(2));
                            txtNomCtaHab.setText(vcoCtaHab.getValueAt(3));
                        }
                        else
                        {
                            vcoCtaHab.setCampoBusqueda(1);
                            vcoCtaHab.setCriterio1(11);
                            vcoCtaHab.cargarDatos();
                            vcoCtaHab.show();
                            if (vcoCtaHab.getSelectedButton()==vcoCtaHab.INT_BUT_ACE)
                            {
                                txtCodCtaHab.setText(vcoCtaHab.getValueAt(1));
                                txtNumCtaHab.setText(vcoCtaHab.getValueAt(2));
                                txtNomCtaHab.setText(vcoCtaHab.getValueAt(3));
                            }
                            else
                            {
                                txtNomCtaHab.setText(strNomCtaHab);
                            }
                        }
                        break;
                }
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    

    private boolean agregarColTblDat(){
        int z=0,intTmp=0;
        boolean blnRes=true;
        strAux="";
        int intNumFilTblPlaCta=obtieneNumFilTblPlaCta();
        javax.swing.table.TableColumn tbc;
        
        try{
            //Configurar JTable: Renderizar celdas.
            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            
           
            for (int i=0; i<intNumDatVecDat; i++)
            {
                tbc=new javax.swing.table.TableColumn(5+i);
                tbc.setHeaderValue(" " + strVecDat[i][1] + " ");
                strVecDat[i][2]=String.valueOf((5+i));
                //Configurar JTable: Establecer el ancho de la columna.
                tbc.setPreferredWidth(60);
                //Configurar JTable: Ocultar la columna.
//                tbc.setWidth(0);
//                tbc.setMaxWidth(0);
//                tbc.setMinWidth(0);
//                tbc.setPreferredWidth(0);
//                tbc.setResizable(false);
                //Configurar JTable: Renderizar celdas.
                tbc.setCellRenderer(objTblCelRenLbl);
                
                objTblCelEdiChkPlaCta=new ZafTblCelEdiChk(tblDatPlaCta);
                tbc.setCellEditor(objTblCelEdiChkPlaCta);
                objTblCelEdiChkPlaCta.addTableEditorListener(new Librerias.ZafTblUti.ZafTblEvt.ZafTableAdapter() {
                    public void beforeEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                        switch (tblDatPlaCta.getSelectedColumn())
                        {
                            case 6:
                                break;
                            case 7:
                                break;
                        }
//                            objTblCelEdiChk.setCancelarEdicion(true);
//                        else
//                            objTblCelEdiChk.setCancelarEdicion(false);
                    }
                    public void afterEdit(Librerias.ZafTblUti.ZafTblEvt.ZafTableEvent evt) {
                        int intColSel=tblDatPlaCta.getSelectedColumn();
//                        if (objTblCelEdiChkPlaCta.isChecked()){
                        if(objTblModPlaCta.isChecked(tblDatPlaCta.getSelectedRow(), intColSel)){
                            markNodHijos(objTblModPlaCta.getValueAt(tblDatPlaCta.getSelectedRow(), INT_TBL_PLA_CTA_COD_CTA).toString());
                            String strCodCtaNodPadTbl="", strCodCtaNodPadArl="";

                            if(arlDatNodHij.size()>0){
                                for(int i=0; i<objTblModPlaCta.getRowCountTrue(); i++){
                                    strCodCtaNodPadTbl=objUti.codificar(objTblModPlaCta.getValueAt(i, INT_TBL_PLA_CTA_COD_CTA), 1);
                                    for(int j=0; j<arlDatNodHij.size(); j++){
                                        strCodCtaNodPadArl=objUti.codificar(objUti.getStringValueAt(arlDatNodHij, j, INT_ARL_COD_CTA_HIJ),1);
                                        if(strCodCtaNodPadTbl.toString().equals(strCodCtaNodPadArl)){
                                            objTblModPlaCta.setChecked(true, i, intColSel);
                                        }
                                    }
                                }
                            }
                        }
                        else{
                            markNodHijos(objTblModPlaCta.getValueAt(tblDatPlaCta.getSelectedRow(), INT_TBL_PLA_CTA_COD_CTA).toString());
                            String strCodCtaNodPadTbl="", strCodCtaNodPadArl="";

                            if(arlDatNodHij.size()>0){
                                for(int i=0; i<objTblModPlaCta.getRowCountTrue(); i++){
                                    strCodCtaNodPadTbl=objUti.codificar(objTblModPlaCta.getValueAt(i, INT_TBL_PLA_CTA_COD_CTA), 1);
                                    for(int j=0; j<arlDatNodHij.size(); j++){
                                        strCodCtaNodPadArl=objUti.codificar(objUti.getStringValueAt(arlDatNodHij, j, INT_ARL_COD_CTA_HIJ),1);
                                        if(strCodCtaNodPadTbl.toString().equals(strCodCtaNodPadArl)){
                                            objTblModPlaCta.setChecked(false, i, intColSel);
                                        }
                                    }
                                }
                            }
                        }

                    }
                });
                
                
                
                //Configurar JTable: Agregar la columna al JTable.
//                tblDat.addColumn(tbc);
                objTblModPlaCta.addColumn(tblDatPlaCta, tbc);
            }
            objTblCelRenLbl=null;
            numColModFinGlb=tblDatPlaCta.getColumnCount();
            
            
            
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }        
                        
        return blnRes;
    }
    
    private boolean generaNumColChk(){
        int z=0,intTmp=0;
        boolean blnRes=true;
        arlDatCodGrpUsr=new ArrayList();
//        String strVecDat[][]= new String[50][50];        
        int intNumFilTblPlaCta=obtieneNumFilTblPlaCta();
        strAux="";
        intNumDatVecDat=0;
        strCodUsrEli="";
        try{
            if(con!=null){
                stm=con.createStatement();
                if(objParSis.getCodigoUsuario()==1){
                    strSQL="";
                    strSQL+="select a2.co_usr, a2.tx_usr";
                    strSQL+=" from tbm_grpusr as a1 inner join tbm_usr as a2";
                    strSQL+=" on a1.co_grp=a2.co_grpusr";
                    strSQL+=" where a1.st_reg='A' and a2.st_reg='A'";                    
                }
                else{
                    strSQL="";
                    strSQL+="select a2.co_usr, a2.tx_usr, a3.co_emp";
                    strSQL+=" from tbm_grpusr as a1 inner join tbm_usr as a2";
                    strSQL+=" on a1.co_grp=a2.co_grpusr";
                    strSQL+=" inner join tbr_usremp as a3";
                    strSQL+=" on a2.co_usr=a3.co_usr and a3.co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+=" where a1.st_reg='A' and a2.st_reg='A'";
                }
                for(int i=0; i<objTblModGrpUsr.getRowCountTrue();i++){
                    if(objTblModGrpUsr.isChecked(i, INT_TBL_GRP_USU_CHK)){
                        ArrayList arlRegCodGrpUsr=new ArrayList();
                        arlRegCodGrpUsr.add(INT_ARR_COD_GRP_COD_USR, objTblModGrpUsr.getValueAt(i, INT_TBL_GRP_USU_COD));
                        arlRegCodGrpUsr.add(INT_ARR_COD_GRP_NOM_USR, objTblModGrpUsr.getValueAt(i, INT_TBL_GRP_USU_DES_COR));
                        arlDatCodGrpUsr.add(arlRegCodGrpUsr);
                        z++;
                        }
                }
                iniRec=z;
                
                    for(int j=z-1;j>=0;j--){
                        if(intTmp==0){
                            if(optGrp.isSelected()){
                                strAux+=" and a2.co_grpusr in (";
                            }
                            else{
                                strAux+=" and a2.co_usr in (";
                            }
                            intTmp++;
                        }
                        if(j==0){
                            strAux+=objUti.getIntValueAt(arlDatCodGrpUsr, j, INT_ARR_COD_GRP_COD_USR);
                            strAux+=")";
                        }
                        else{
                            strAux+=objUti.getStringValueAt(arlDatCodGrpUsr, j, INT_ARR_COD_GRP_COD_USR) + ",";
                        }
                    }

                strSQL+=strAux;
                strSQL+=" order by a2.co_usr";
                rst=stm.executeQuery(strSQL);                
                for(int i=0; rst.next(); i++){
                    strVecDat[i][0]="" + rst.getInt("co_usr");
                    strVecDat[i][1]=rst.getString("tx_usr");
                    intNumDatVecDat++;
                    
                    if(i==0){
                        strCodUsrEli+="" + rst.getInt("co_usr");
                    }
                    else{
                        strCodUsrEli+=",";
                        strCodUsrEli+="" + rst.getInt("co_usr");
                    }
                    
                    
                }
                stm.close();
                rst.close();
                stm=null;
                rst=null;
            }
//            arlDatCodGrpUsr.clear();
//            arlDatCodGrpUsr=null;
            
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
            blnRes=false;
        }
        return blnRes;
    }
    
    private void cleanFrm(){
        txtCodTipDoc.setText("");
        txtDesCorTipDoc.setText("");
        txtDesLarTipDoc.setText("");
        txtCodCtaDeb.setText("");
        txtNumCtaDeb.setText("");
        txtNomCtaDeb.setText("");
        txtCodCtaHab.setText("");
        txtNumCtaHab.setText("");
        txtNomCtaHab.setText("");
    }

    private boolean eliminaColTblDatAdicionadas(){
        boolean blnRes=true;
        int numColModFin=tblDatPlaCta.getColumnCount();
        numColModFinGlb=numColModFin;
        try{
            for (int i=(numColModFin-1); i>=numColModIni; i--){
                tblDatPlaCta.removeColumn(tblDatPlaCta.getColumnModel().getColumn(i));
            }
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    private void noSelBloCta(boolean blnTmp){
        chkSelAct.setEnabled(blnTmp);
        chkSelPas.setEnabled(blnTmp);
        chkSelPat.setEnabled(blnTmp);
        chkSelIng.setEnabled(blnTmp);
        chkSelCos.setEnabled(blnTmp);
        chkSelGto.setEnabled(blnTmp);
        chkSelOtrIng.setEnabled(blnTmp);
        chkSelOtrGto.setEnabled(blnTmp);
    }

    //valida si se realizaron cambios en las cuentas de debe y haber del Tipo de Documento q se seleccion√≥
    private boolean isCamCmpCtaTipDoc(){
        boolean blnRes=true;
        codCtaDebTipDocFin=txtCodCtaDeb.getText()==null?"":txtCodCtaDeb.getText();
        codCtaHabTipDocFin=txtCodCtaHab.getText()==null?"":txtCodCtaHab.getText();
        if(codCtaDebTipDocIni.toString().equals(codCtaDebTipDocFin))
            blnCamCtaDeb=false;
        else
            blnCamCtaDeb=true;
        
        if(codCtaHabTipDocIni.toString().equals(codCtaHabTipDocFin))
            blnCamCtaHab=false;
        else
            blnCamCtaHab=true;
        return blnRes;
    }

    
    
    private boolean actualizaCtaTipDoc(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if(con!=null){
                if(blnCamCtaDeb==true){
                    if(actualizaCtaDebTipDoc()){
                        con.commit();                        
                    }
                    else{
                        con.rollback();
                        blnRes=false;
                    }
                        
                }
                if(blnCamCtaHab==true){
                    if(actualizaCtaHabTipDoc()){
                        con.commit();
                    }
                    else{
                        con.rollback();
                        blnRes=false;
                    }
                }
            con.close();
            con=null;            
            }            
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
    private boolean actualizaCtaDebTipDoc(){
        boolean blnRes=true;
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="update tbm_cabtipdoc";
                strSQL+=" set co_ctadeb=" +  objUti.codificar(txtCodCtaDeb.getText(), 0) + "";
                strSQL+=" where co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" and co_tipdoc=" + txtCodTipDoc.getText() + "";
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    private boolean actualizaCtaHabTipDoc(){
        boolean blnRes=true;
        try{
            if(con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+="update tbm_cabtipdoc";
                strSQL+=" set co_ctahab=" + objUti.codificar(txtCodCtaHab.getText(), 0) + "";
                strSQL+=" where co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" and co_loc=" + objParSis.getCodigoLocal() + "";
                strSQL+=" and co_tipdoc=" + txtCodTipDoc.getText() + "";
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    private boolean isTipDocSel(){
        int j=0;
        String strTipSelUsu="";
        if(optGrp.isSelected())
            strTipSelUsu=" Grupo de usuario";
        else
            strTipSelUsu=" Usuario";

        if (txtCodTipDoc.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\">Tipo de documento</FONT> es obligatorio.<BR>Escriba o seleccione un tipo de documento y vuelva a intentarlo.</HTML>");
            txtDesCorTipDoc.requestFocus();
            return false;
        }
        for(int i=0; i<objTblModGrpUsr.getRowCountTrue();i++){
            if(objTblModGrpUsr.isChecked(i, INT_TBL_GRP_USU_CHK)){
                j++;
            }
        }
        if(j==0){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>Debe seleccionar alg√∫n <FONT COLOR=\"blue\">" + strTipSelUsu + "</FONT> para realizar la consulta.</HTML>");
            return false;            
        }
        return true;
    }   
    
    
    
    
    
    private boolean actualizaTbrCtaTipDocUsr(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if(con!=null){
                //ACTUALIZA EN LA TABLA tbr_ctaTipDocUsrMod
                if(eliminaTbrCtaTipDocUsrMod()){
                    if(insertaTbrCtaTipDocUsrMod()){
                        if( (blnCamCtaDeb==true) ||  (blnCamCtaHab==true) ){
                            if(blnCamCtaDeb==true){
                                if(actualizaCtaDebTipDoc())
                                    con.commit();
                                else{
                                    con.rollback();
                                    blnRes=false;
                                }
                            }
                            if(blnCamCtaHab==true){
                                if(actualizaCtaHabTipDoc())
                                    con.commit();
                                else{
                                    con.rollback();
                                    blnRes=false;
                                }
                            }                            
                        }
                        else
                            con.commit();
                    }
                    else{
                        con.rollback();
                        blnRes=false;
                    }
                }
                else{
                    con.rollback();
                    blnRes=false;                    
                }
            con.close();
            con=null;            
            }            
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    

    //ACTUALIZA EN LA TABLA tbr_ctaTipDocUsrMod
    private boolean insertaTbrCtaTipDocUsrMod(){
        boolean blnRes=true;
        String strColVec="";
        int w=0;
        String strColTbl="";
        String strCodUsrGrp="";
        int intCodCta=0;
        String strInsCtaUsr="";
        try{
            if(con!=null){
                strInsCtaUsr="";
                stm=con.createStatement();
                for(int i=0; i<objTblModPlaCta.getRowCountTrue(); i++){
                    if(objTblModPlaCta.getValueAt(i, INT_TBL_PLA_CTA_LIN)=="M"){
                        for( int j=(numColModIni); j<=numColModFinGlb; j++ ){
                            strColVec=strVecDat[w][2]==null?"":strVecDat[w][2];
                            strColTbl=""+j;
                            while( !(strColVec.equals(""))  ){
                                if(strColVec.toString().equals(strColTbl)){
                                    if(objTblModPlaCta.isChecked(i, j)){
                                        strCodUsrGrp=strVecDat[w][0]==null?"":strVecDat[w][0];
                                        intCodCta=Integer.parseInt(""+objTblModPlaCta.getValueAt(i, INT_TBL_PLA_CTA_COD_CTA));
                                        
                                        strSQL="";
                                        strSQL+="INSERT INTO tbr_ctatipdocusr(";
                                        strSQL+=" co_emp, co_loc, co_tipdoc, co_usr, co_cta)";
                                        strSQL+=" VALUES (";
                                        strSQL+="" + objParSis.getCodigoEmpresa() + ",";
                                        strSQL+=" " + objParSis.getCodigoLocal() + ",";
                                        strSQL+=" " + txtCodTipDoc.getText() + ",";
                                        strSQL+=" " + strCodUsrGrp + ",";
                                        strSQL+=" " + intCodCta + "";
                                        strSQL+=" );";
                                        strInsCtaUsr+=strSQL;
                                        
                                    }
                                }
                                w++;
                                strColVec=strVecDat[w][2]==null?"":strVecDat[w][2];
                            }
                            w=0;
                        }                        
                    }
                }
                System.out.println("SQL: " + strInsCtaUsr);
                stm.executeUpdate(strInsCtaUsr);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    
    private boolean eliminaTbrCtaTipDocUsrMod(){
        boolean blnRes=true;
        try{
            
            if(con!=null){
                    stm=con.createStatement();
                    strSQL="";
                    strSQL+="DELETE FROM tbr_ctatipdocusr";
                    strSQL+=" WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                    strSQL+=" AND co_loc=" + objParSis.getCodigoLocal() + "";
                    strSQL+=" AND co_tipdoc=" + txtCodTipDoc.getText() + "";
                    strSQL+=" AND co_usr IN(";
                    strSQL+="" + strCodUsrEli;
                    strSQL+=")";
//                    System.out.println("eliminaTbrCtaTipDocUsrMod: " + strSQL);
                    stm.executeUpdate(strSQL);
                    stm.close();
                    stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }    
    
    /**
     * Esta funci√≥n se ejecuta cuando se hace el "MouseClicked" en la cabecera del JTable.
     * Se utiliza √©sta funci√≥n especificamente para marcar todas las casillas de verificaci√≥n
     * de la columna que indica la bodega seleccionada en el el JTable de bodegas.
     */
    private void tblEmpMouseClicked(java.awt.event.MouseEvent evt){
        int i, intNumFil;
        int intColSel=tblDatPlaCta.getSelectedColumn();
        try
        {
            intNumFil=objTblModPlaCta.getRowCountTrue();
            //Marcar la casilla s√≥lo si se da 1 click con el bot√≥n izquierdo.
            if (evt.getButton()==evt.BUTTON1 && evt.getClickCount()==1 && tblDatPlaCta.columnAtPoint(evt.getPoint())==intColSel)
            {
                if (blnMarTodChkTblEmp)
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        objTblModPlaCta.setChecked(true, i, intColSel);
                    }
                    blnMarTodChkTblEmp=false;
                }
                else
                {
                    for (i=0; i<intNumFil; i++)
                    {
                        objTblModPlaCta.setChecked(false, i, intColSel);
                    }
                    blnMarTodChkTblEmp=true;
                }
            }
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
    }    
    
    private class ZafMouMotAda extends java.awt.event.MouseMotionAdapter
    {
        public void mouseMoved(java.awt.event.MouseEvent evt)
        {
            int intCol=tblDatPlaCta.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol)
            {
                case INT_TBL_PLA_CTA_LIN:
                    strMsg="";
                    break;
                case INT_TBL_PLA_CTA_COD_EMP:
                    strMsg="C√≥digo de la empresa";
                    break;
                case INT_TBL_PLA_CTA_COD_CTA:
                    strMsg="C√≥digo de Cuenta";
                    break;
                case INT_TBL_PLA_CTA_NUM_CTA:
                    strMsg="N√∫mero de Cuenta";
                    break;
                case INT_TBL_PLA_CTA_NOM_CTA:
                    strMsg="Nombre de Cuenta";
                    break;                    
                    
                default:
                    strMsg="";
                    break;
            }
            tblDatPlaCta.getTableHeader().setToolTipText(strMsg);
        }
    }
    

    
//HACERLO A TRAVES DE TX_CODCTA Y NO A TRAVES DE NE_PAD    
    private boolean markNodHijos(String nodPadSel){
        boolean blnRes=true;
        Connection conNodHij;
        Statement stmNodHij;
        ResultSet rstNodHij;
        String strNodPadSel=nodPadSel==null?"":nodPadSel;
        arlDatNodHij.clear();
        try{
            conNodHij=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conNodHij!=null){
                stmNodHij=conNodHij.createStatement();
                strSQL="";
                strSQL+=" SELECT a1.co_emp, a1.co_cta, a1.tx_codCta, a1.ne_pad";
                strSQL+=" FROM tbm_plaCta AS a1";
                strSQL+=" WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                strSQL+=" AND a1.tx_codCta like('" + objTblModPlaCta.getValueAt(tblDatPlaCta.getSelectedRow(), INT_TBL_PLA_CTA_NUM_CTA) + "%')";
                strSQL+=" ORDER BY a1.tx_codCta";

                rstNodHij=stmNodHij.executeQuery(strSQL);
                while(rstNodHij.next()){
                    arlRegNodHij=new ArrayList();
                    arlRegNodHij.add(INT_ARL_COD_EMP, "" + rstNodHij.getString("co_emp"));
                    arlRegNodHij.add(INT_ARL_COD_CTA_SEL, "" + rstNodHij.getString("ne_pad"));
                    arlRegNodHij.add(INT_ARL_COD_CTA_HIJ, "" + rstNodHij.getString("co_cta"));
                    arlDatNodHij.add(arlRegNodHij);
                }
                conNodHij.close();
                conNodHij=null;
                stmNodHij.close();
                stmNodHij=null;
                rstNodHij.close();
                rstNodHij=null;
            }
        }
        catch(java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    
    
}
