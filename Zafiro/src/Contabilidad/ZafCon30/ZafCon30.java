/*
 * ZafCon30.java
 *
 * Created on 16 de enero de 2005, 17:10 PM
 */

package Contabilidad.ZafCon30;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafColNumerada.ZafColNumerada;
import Librerias.ZafRptSis.ZafRptSis;
import Librerias.ZafSelFec.ZafSelFec;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaColGrp;
import Librerias.ZafTblUti.ZafTblHeaGrp.ZafTblHeaGrp;
import Librerias.ZafTblUti.ZafTblTot.ZafTblTot;
import java.util.ArrayList;
import java.sql.*;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
/**
 *
 * @author  Ingrid Lino
 */



public class ZafCon30 extends javax.swing.JInternalFrame
{
    //Constantes: Columnas del JTable:
    //DATOS DEL CREDITO DEL PERIODO
    final int INT_TBL_DAT_UNO_LIN=0;
    final int INT_TBL_DAT_UNO_COD_EMP=1;
    final int INT_TBL_DAT_UNO_CRE_PER_COS_EFE_ANU=2;
    final int INT_TBL_DAT_UNO_CRE_PER_CEA_CRE=3;
    final int INT_TBL_DAT_UNO_CRE_PER_CEA_CON=4;
    final int INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU=5;
    final int INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU_CRE=6;
    //MOROSIDAD DE LA CARTERA DEL CREDITO OTROGADO EN EL PERIODO
    final int INT_TBL_DAT_DOS_LIN=0;
    final int INT_TBL_DAT_DOS_COD_EMP=1;    
    final int INT_TBL_DAT_DOS_MCC_PLA_PRO=2;
    final int INT_TBL_DAT_DOS_MCC_NUM_CLI_PER=3;
    final int INT_TBL_DAT_DOS_MCC_MON_PER=4;
    //MOROSIDAD ACUMULADA A LA FECHA  
    final int INT_TBL_DAT_TRE_LIN=0;
    final int INT_TBL_DAT_TRE_COD_EMP=1;
    final int INT_TBL_DAT_TRE_MAF_PLA_PRO=2;
    final int INT_TBL_DAT_TRE_MAF_NUM_CLI_FEC=3;
    final int INT_TBL_DAT_TRE_MAF_SAL_FEC_PRE=4;
        
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafColNumerada objColNum;
    private ZafTblMod objTblModCrePer, objTblModMorCarCreOtoPer, objTblModMorAcuFec, objTblModFor104, objTblModVerLisDocVta;
    private ZafTblPopMnu objTblPopMnu;                  //PopupMenu: Establecer PeopuMená en JTable.
    private ZafThreadGUI objThrGUI;
    private Connection con, conCab;
    private Statement stm;
    private ResultSet rst;
    private String strSQL, strAux;    
    private Vector vecDat, vecCab, vecReg, vecAux;
    private boolean blnCon;                     //true: Continua la ejecucián del hilo.
    private String strMsg="";
    private String strTit;
    private javax.swing.JOptionPane oppMsg;
    private ZafTblCelRenLbl objTblCelRenLbl;
    private ZafSelFec objSelFec;   
    private ZafRptSis objRptSis;
    private java.util.Date datFecAux;
    
    private ZafMouMotAdaCrePer objMouMotAdaCrePer;
    private ZafMouMotAdaMorCarCrePer objMouMotAdaMorCarCrePer;
    private ZafMouMotAdaMorAcuFec objMouMotAdaMorAcuFec;

    
    private ZafTblFilCab objTblFilCab;
    private ZafTblTot /*objTblTotCrePer,*/ objTblTotMorCarCreOtoPer, objTblTotMorAcuFec;

    /** Crea una nueva instancia de la clase ZafIndRpt. */
    public ZafCon30(ZafParSis obj)
    {
        try{
            initComponents();
            //Inicializar objetos.
            this.objParSis = (Librerias.ZafParSis.ZafParSis) obj.clone();
            objUti=new ZafUtil();

            if (!configurarFrm())
                exitForm();
      }
      catch (CloneNotSupportedException e){
          objUti.mostrarMsgErr_F1(this, e);
      }

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrFil = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        panCab = new javax.swing.JPanel();
        panCorRpt = new javax.swing.JPanel();
        panDat = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        panDatCrePer = new javax.swing.JPanel();
        spnDatCrePer = new javax.swing.JScrollPane();
        tblDatCrePer = new javax.swing.JTable() {
            protected javax.swing.table.JTableHeader createDefaultTableHeader()
            {
                return new ZafTblHeaGrp(columnModel);
            }
        };
        panDatMorCarCrePerMorAcuFec = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        panMorCarCrePer = new java.awt.Panel();
        spnDatMorCarCrePer = new javax.swing.JScrollPane();
        tblDatMorCarCrePer = new javax.swing.JTable() {
            protected javax.swing.table.JTableHeader createDefaultTableHeader()
            {
                return new ZafTblHeaGrp(columnModel);
            }
        };
        spnTotMorCarCrePer = new javax.swing.JScrollPane();
        tblTotMorCarCrePer = new javax.swing.JTable();
        panMorAcuFec = new java.awt.Panel();
        spnDatMorAcuFec = new javax.swing.JScrollPane();
        tblDatMorAcuFec = new javax.swing.JTable() {
            protected javax.swing.table.JTableHeader createDefaultTableHeader()
            {
                return new ZafTblHeaGrp(columnModel);
            }
        };
        spnTotMorAcuFec = new javax.swing.JScrollPane();
        tblTotMorAcuFec = new javax.swing.JTable();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        butCon = new javax.swing.JButton();
        butCer = new javax.swing.JButton();
        panBarEst = new javax.swing.JPanel();
        lblMsgSis = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        pgrSis = new javax.swing.JProgressBar();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Título de la ventana");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título de la ventana");
        lblTit.setPreferredSize(new java.awt.Dimension(138, 16));
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panFil.setPreferredSize(new java.awt.Dimension(576, 96));
        panFil.setLayout(new java.awt.BorderLayout());

        panCab.setLayout(new java.awt.BorderLayout());

        panCorRpt.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panCorRpt.setPreferredSize(new java.awt.Dimension(560, 72));
        panCorRpt.setLayout(new java.awt.BorderLayout());
        panCab.add(panCorRpt, java.awt.BorderLayout.NORTH);
        panCorRpt.getAccessibleContext().setAccessibleName("Codigo");

        panFil.add(panCab, java.awt.BorderLayout.NORTH);

        tabFrm.addTab("Filtro", panFil);

        panDat.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setOneTouchExpandable(true);

        panDatCrePer.setLayout(new java.awt.BorderLayout());

        tblDatCrePer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDatCrePer.setViewportView(tblDatCrePer);

        panDatCrePer.add(spnDatCrePer, java.awt.BorderLayout.CENTER);

        jSplitPane1.setTopComponent(panDatCrePer);

        panDatMorCarCrePerMorAcuFec.setLayout(new java.awt.BorderLayout());

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setOneTouchExpandable(true);

        panMorCarCrePer.setLayout(new java.awt.BorderLayout());

        tblDatMorCarCrePer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDatMorCarCrePer.setViewportView(tblDatMorCarCrePer);

        panMorCarCrePer.add(spnDatMorCarCrePer, java.awt.BorderLayout.CENTER);

        spnTotMorCarCrePer.setPreferredSize(new java.awt.Dimension(452, 30));

        tblTotMorCarCrePer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnTotMorCarCrePer.setViewportView(tblTotMorCarCrePer);

        panMorCarCrePer.add(spnTotMorCarCrePer, java.awt.BorderLayout.SOUTH);

        jSplitPane2.setTopComponent(panMorCarCrePer);

        panMorAcuFec.setLayout(new java.awt.BorderLayout());

        tblDatMorAcuFec.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnDatMorAcuFec.setViewportView(tblDatMorAcuFec);

        panMorAcuFec.add(spnDatMorAcuFec, java.awt.BorderLayout.CENTER);

        spnTotMorAcuFec.setPreferredSize(new java.awt.Dimension(452, 30));

        tblTotMorAcuFec.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spnTotMorAcuFec.setViewportView(tblTotMorAcuFec);

        panMorAcuFec.add(spnTotMorAcuFec, java.awt.BorderLayout.SOUTH);

        jSplitPane2.setBottomComponent(panMorAcuFec);

        panDatMorCarCrePerMorAcuFec.add(jSplitPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setBottomComponent(panDatMorCarCrePerMorAcuFec);

        panDat.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        tabFrm.addTab("Datos", panDat);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        panBar.setPreferredSize(new java.awt.Dimension(320, 46));
        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setPreferredSize(new java.awt.Dimension(200, 100));
        panBot.setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(296, 26));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        butCon.setText("Consultar");
        butCon.setToolTipText("Ejecuta la consulta de acuerdo al filtro especificado.");
        butCon.setPreferredSize(new java.awt.Dimension(92, 25));
        butCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butConActionPerformed(evt);
            }
        });
        jPanel1.add(butCon);

        butCer.setText("Cerrar");
        butCer.setToolTipText("Cierra la ventana.");
        butCer.setPreferredSize(new java.awt.Dimension(92, 25));
        butCer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCerActionPerformed(evt);
            }
        });
        jPanel1.add(butCer);

        panBot.add(jPanel1, java.awt.BorderLayout.SOUTH);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panBarEst.setPreferredSize(new java.awt.Dimension(320, 18));
        panBarEst.setLayout(new java.awt.BorderLayout());

        lblMsgSis.setText("Listo");
        lblMsgSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        panBarEst.add(lblMsgSis, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel6.setMinimumSize(new java.awt.Dimension(24, 26));
        jPanel6.setPreferredSize(new java.awt.Dimension(200, 15));
        jPanel6.setLayout(new java.awt.BorderLayout(2, 2));

        pgrSis.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pgrSis.setBorderPainted(false);
        pgrSis.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pgrSis.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel6.add(pgrSis, java.awt.BorderLayout.CENTER);

        panBarEst.add(jPanel6, java.awt.BorderLayout.EAST);

        panBar.add(panBarEst, java.awt.BorderLayout.SOUTH);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        getContentPane().add(panFrm);

        setBounds(0, 0, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

    
                /*Permite obtener un log de la tabla tbm_grpvar
 *
 */    
     
    
    
                        
    private void butConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butConActionPerformed
        //Realizar accián de acuerdo a la etiqueta del botán ("Consultar" o "Detener").
        if (butCon.getText().equals("Consultar"))
        {
            blnCon=true;
            if (objThrGUI==null)
            {
                objThrGUI=new ZafThreadGUI();
                objThrGUI.start();                
                
            }            
        }
        else
        {
            blnCon=false;
        }
    }//GEN-LAST:event_butConActionPerformed

    private void butCerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCerActionPerformed
        exitForm(null);
    }//GEN-LAST:event_butCerActionPerformed

    
    /** Cerrar la aplicación. */
    private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
        String strTit, strMsg;
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        strTit="Mensaje del sistema Zafiro";
        strMsg="Está seguro que desea cerrar este programa?";
        if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
        {
            dispose();
        }
    }//GEN-LAST:event_exitForm


    /**
     * Esta función muestra un mensaje informativo al usuario. Se podráa utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }


    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }    
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrFil;
    private javax.swing.JButton butCer;
    private javax.swing.JButton butCon;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JLabel lblMsgSis;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBarEst;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panCab;
    private javax.swing.JPanel panCorRpt;
    private javax.swing.JPanel panDat;
    private javax.swing.JPanel panDatCrePer;
    private javax.swing.JPanel panDatMorCarCrePerMorAcuFec;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFrm;
    private java.awt.Panel panMorAcuFec;
    private java.awt.Panel panMorCarCrePer;
    private javax.swing.JProgressBar pgrSis;
    private javax.swing.JScrollPane spnDatCrePer;
    private javax.swing.JScrollPane spnDatMorAcuFec;
    private javax.swing.JScrollPane spnDatMorCarCrePer;
    private javax.swing.JScrollPane spnTotMorAcuFec;
    private javax.swing.JScrollPane spnTotMorCarCrePer;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTable tblDatCrePer;
    private javax.swing.JTable tblDatMorAcuFec;
    private javax.swing.JTable tblDatMorCarCrePer;
    private javax.swing.JTable tblTotMorAcuFec;
    private javax.swing.JTable tblTotMorCarCrePer;
    // End of variables declaration//GEN-END:variables

    /** Configurar el formulario. */
    private boolean configurarFrm(){
        boolean blnRes=true;
        try{
            strAux=objParSis.getNombreMenu() + "v0.1";
            this.setTitle(strAux);
            lblTit.setText(strAux);
            
            //Configurar ZafSelFec:
            objSelFec=new ZafSelFec();
            objSelFec.setCheckBoxVisible(false);
            panCorRpt.add(objSelFec);
            objSelFec.setBounds(4, 4, 472, 72);               
           
            vecDat=new Vector();    //Almacena los datos
            
            configurarTblDatCrePer();
            configurarTblDatMorCarCreOtoPer();
            configurarTblDatMorAcuFec();
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    /**
     * Esta función configura el JTable "tblDatCrePer".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDatCrePer(){
        boolean blnRes=true;
        try{
            //Configurar JTable: Establecer el modelo.            
            vecCab=new Vector(7);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_UNO_LIN,"");
            vecCab.add(INT_TBL_DAT_UNO_COD_EMP,"Cód.Emp.");
            vecCab.add(INT_TBL_DAT_UNO_CRE_PER_COS_EFE_ANU,"Cos.Efe.Anu.(Tas).");
            vecCab.add(INT_TBL_DAT_UNO_CRE_PER_CEA_CRE,"Cré.");
            vecCab.add(INT_TBL_DAT_UNO_CRE_PER_CEA_CON,"Con.");
            vecCab.add(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU,"Cos.Nom.Anu.(Tas).");
            vecCab.add(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU_CRE,"Cré.");

            objTblModCrePer=new ZafTblMod();
            objTblModCrePer.setHeader(vecCab);
//            //Configurar ZafTblMod: Establecer el tipo de dato de las columnas.
//            objTblMod.setColumnDataType(INT_TBL_GRL_DAT_CAN, objTblMod.INT_COL_DBL, new Integer(0), null);
//            objTblMod.setColumnDataType(INT_TBL_GRL_DAT_PRE, objTblMod.INT_COL_DBL, new Integer(0), null);
//            objTblMod.setColumnDataType(INT_TBL_GRL_DAT_SUB, objTblMod.INT_COL_DBL, new Integer(0), null);
//            objTblMod.setColumnDataType(INT_TBL_GRL_DAT_IVA, objTblMod.INT_COL_DBL, new Integer(0), null);
//            objTblMod.setColumnDataType(INT_TBL_GRL_DAT_TOT, objTblMod.INT_COL_DBL, new Integer(0), null);
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDatCrePer.setModel(objTblModCrePer);
            //Configurar JTable: Establecer tipo de seleccián.
            tblDatCrePer.setRowSelectionAllowed(true);
            tblDatCrePer.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el mená de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDatCrePer);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDatCrePer.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDatCrePer.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_UNO_LIN).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_UNO_COD_EMP).setPreferredWidth(130);
            tcmAux.getColumn(INT_TBL_DAT_UNO_CRE_PER_COS_EFE_ANU).setPreferredWidth(192);
            tcmAux.getColumn(INT_TBL_DAT_UNO_CRE_PER_CEA_CRE).setPreferredWidth(96);
            tcmAux.getColumn(INT_TBL_DAT_UNO_CRE_PER_CEA_CON).setPreferredWidth(84);
            tcmAux.getColumn(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU).setPreferredWidth(192);
            tcmAux.getColumn(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU_CRE).setPreferredWidth(94);

            //Configurar JTable: Ocultar columnas del sistema.
            objTblModCrePer.addSystemHiddenColumn(INT_TBL_DAT_UNO_COD_EMP, tblDatCrePer);

//            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
//            tcmAux.getColumn(INT_TBL_GRL_DAT_EST_IVA).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDatCrePer.getTableHeader().setReorderingAllowed(false);

            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAdaCrePer=new ZafMouMotAdaCrePer();
            tblDatCrePer.getTableHeader().addMouseMotionListener(objMouMotAdaCrePer);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDatCrePer);
            tcmAux.getColumn(INT_TBL_DAT_UNO_LIN).setCellRenderer(objTblFilCab);

            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.LEFT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_GEN);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_UNO_COD_EMP).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;

            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_UNO_CRE_PER_CEA_CRE).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_UNO_CRE_PER_CEA_CON).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU_CRE).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
            //Datos del crédito del período
            ZafTblHeaGrp objTblHeaGrpSol=(ZafTblHeaGrp)tblDatCrePer.getTableHeader();
            objTblHeaGrpSol.setHeight(16*3);

            ZafTblHeaColGrp objTblHeaColGrpSol=null;
            objTblHeaColGrpSol=new ZafTblHeaColGrp("Datos del crédito del período");
            objTblHeaColGrpSol.setHeight(16);
            objTblHeaGrpSol.addColumnGroup(objTblHeaColGrpSol);

            objTblHeaColGrpSol.add(tcmAux.getColumn(INT_TBL_DAT_UNO_CRE_PER_COS_EFE_ANU));
            objTblHeaColGrpSol.add(tcmAux.getColumn(INT_TBL_DAT_UNO_CRE_PER_CEA_CRE));
            objTblHeaColGrpSol.add(tcmAux.getColumn(INT_TBL_DAT_UNO_CRE_PER_CEA_CON));
            objTblHeaColGrpSol.add(tcmAux.getColumn(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU));
            objTblHeaColGrpSol.add(tcmAux.getColumn(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU_CRE));

            //Configurar JTable: Establecer relación entre el JTable de datos y JTable de totales.
            //int intCol[]={INT_TBL_DAT_UNO_CRE_PER_CEA_CRE, INT_TBL_DAT_UNO_CRE_PER_CEA_CON, INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU_CRE};
            //objTblTotCrePer=new ZafTblTot(spnDatCrePer, spnTotCrePer, tblDatCrePer, tblTotCrePer, intCol);

            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAdaCrePer extends java.awt.event.MouseMotionAdapter{
        public void mouseMoved(java.awt.event.MouseEvent evt){
            int intCol=tblDatCrePer.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol){
                case INT_TBL_DAT_UNO_COD_EMP:
                    strMsg="Código de la empresa";
                    break;
                case INT_TBL_DAT_UNO_CRE_PER_COS_EFE_ANU:
                    strMsg="Costo efectivo anual(Tasa)";
                    break;
                case INT_TBL_DAT_UNO_CRE_PER_CEA_CRE:
                    strMsg="Crédito";
                    break;
                case INT_TBL_DAT_UNO_CRE_PER_CEA_CON:
                    strMsg="Contado";
                    break;
                case INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU:
                    strMsg="Costo nominal anual(Tasa)";
                    break;
                case INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU_CRE:
                    strMsg="Crédito";
                    break;
                default:
                    strMsg="";
                    break;                    
            }
            tblDatCrePer.getTableHeader().setToolTipText(strMsg);
        }
    }

    
    

    /**
     * Esta función configura el JTable "tblDatMorCarCrePer".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDatMorCarCreOtoPer(){
        boolean blnRes=true;
        try{
            //Configurar JTable: Establecer el modelo.            
            vecCab=new Vector(5);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_DOS_LIN,"");
            vecCab.add(INT_TBL_DAT_DOS_COD_EMP,"Cód.Emp.");
            vecCab.add(INT_TBL_DAT_DOS_MCC_PLA_PRO,"Pla.Pro.");
            vecCab.add(INT_TBL_DAT_DOS_MCC_NUM_CLI_PER,"Núm.Cli.Per.");
            vecCab.add(INT_TBL_DAT_DOS_MCC_MON_PER,"Mon.Per.");
            
            objTblModMorCarCreOtoPer=new ZafTblMod();
            objTblModMorCarCreOtoPer.setHeader(vecCab);
//            //Configurar ZafTblMod: Establecer el tipo de dato de las columnas.
//            objTblMod.setColumnDataType(INT_TBL_GRL_DAT_CAN, objTblMod.INT_COL_DBL, new Integer(0), null);
//            objTblMod.setColumnDataType(INT_TBL_GRL_DAT_PRE, objTblMod.INT_COL_DBL, new Integer(0), null);
//            objTblMod.setColumnDataType(INT_TBL_GRL_DAT_SUB, objTblMod.INT_COL_DBL, new Integer(0), null);
//            objTblMod.setColumnDataType(INT_TBL_GRL_DAT_IVA, objTblMod.INT_COL_DBL, new Integer(0), null);
//            objTblMod.setColumnDataType(INT_TBL_GRL_DAT_TOT, objTblMod.INT_COL_DBL, new Integer(0), null);
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDatMorCarCrePer.setModel(objTblModMorCarCreOtoPer);
            //Configurar JTable: Establecer tipo de seleccián.
            tblDatMorCarCrePer.setRowSelectionAllowed(true);
            tblDatMorCarCrePer.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el mená de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDatMorCarCrePer);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDatMorCarCrePer.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDatMorCarCrePer.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_DOS_LIN).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_DOS_COD_EMP).setPreferredWidth(130);
            tcmAux.getColumn(INT_TBL_DAT_DOS_MCC_PLA_PRO).setPreferredWidth(130);
            tcmAux.getColumn(INT_TBL_DAT_DOS_MCC_NUM_CLI_PER).setPreferredWidth(130);
            tcmAux.getColumn(INT_TBL_DAT_DOS_MCC_MON_PER).setPreferredWidth(130);           

            //Configurar JTable: Ocultar columnas del sistema.
            objTblModMorCarCreOtoPer.addSystemHiddenColumn(INT_TBL_DAT_DOS_COD_EMP, tblDatMorCarCrePer);

//            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
//            tcmAux.getColumn(INT_TBL_GRL_DAT_EST_IVA).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDatMorCarCrePer.getTableHeader().setReorderingAllowed(false);

            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAdaMorCarCrePer=new ZafMouMotAdaMorCarCrePer();
            tblDatMorCarCrePer.getTableHeader().addMouseMotionListener(objMouMotAdaCrePer);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDatMorCarCrePer);
            tcmAux.getColumn(INT_TBL_DAT_DOS_LIN).setCellRenderer(objTblFilCab);

            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.LEFT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_GEN);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_DOS_COD_EMP).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_DOS_MCC_PLA_PRO).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;

            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_DOS_MCC_NUM_CLI_PER).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_DOS_MCC_MON_PER).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;
            
            //Datos de morosidad de la cartera del credito otorgado en el período
            ZafTblHeaGrp objTblHeaGrpSolMorCarCre=(ZafTblHeaGrp)tblDatMorCarCrePer.getTableHeader();
            objTblHeaGrpSolMorCarCre.setHeight(16*3);

            ZafTblHeaColGrp objTblHeaColGrpSolMorCarCre=null;
            objTblHeaColGrpSolMorCarCre=new ZafTblHeaColGrp("Morosidad de la cartera del crédito otorgado en el período");
            objTblHeaColGrpSolMorCarCre.setHeight(16);
            objTblHeaGrpSolMorCarCre.addColumnGroup(objTblHeaColGrpSolMorCarCre);

            objTblHeaColGrpSolMorCarCre.add(tcmAux.getColumn(INT_TBL_DAT_DOS_MCC_PLA_PRO));
            objTblHeaColGrpSolMorCarCre.add(tcmAux.getColumn(INT_TBL_DAT_DOS_MCC_NUM_CLI_PER));
            objTblHeaColGrpSolMorCarCre.add(tcmAux.getColumn(INT_TBL_DAT_DOS_MCC_MON_PER));
            
            //Configurar JTable: Establecer relación entre el JTable de datos y JTable de totales.
            int intCol[]={INT_TBL_DAT_DOS_MCC_NUM_CLI_PER, INT_TBL_DAT_DOS_MCC_MON_PER};
            objTblTotMorCarCreOtoPer=new ZafTblTot(spnDatMorCarCrePer, spnTotMorCarCrePer, tblDatMorCarCrePer, tblTotMorCarCrePer, intCol);

            
            
            
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAdaMorCarCrePer extends java.awt.event.MouseMotionAdapter{
        public void mouseMoved(java.awt.event.MouseEvent evt){
            int intCol=tblDatMorCarCrePer.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol){
                case INT_TBL_DAT_DOS_COD_EMP:
                    strMsg="Código de la empresa";
                    break;
                case INT_TBL_DAT_DOS_MCC_PLA_PRO:
                    strMsg="Plazo promedio";
                    break;
                case INT_TBL_DAT_DOS_MCC_NUM_CLI_PER:
                    strMsg="No. de clientes del período";
                    break;
                case INT_TBL_DAT_DOS_MCC_MON_PER:
                    strMsg="Monto del período US($)";
                    break;
                default:
                    strMsg="";
                    break;                    
            }
            tblDatMorCarCrePer.getTableHeader().setToolTipText(strMsg);
        }
    }

    
    
    /**
     * Esta función configura el JTable "tblDatMorAcuFec".
     * @return true: Si se pudo configurar el JTable.
     * <BR>false: En el caso contrario.
     */
    private boolean configurarTblDatMorAcuFec(){
        boolean blnRes=true;
        try{
            //Configurar JTable: Establecer el modelo.            
            vecCab=new Vector(5);  //Almacena las cabeceras
            vecCab.clear();
            vecCab.add(INT_TBL_DAT_TRE_LIN,"");
            vecCab.add(INT_TBL_DAT_TRE_COD_EMP,"Cód.Emp.");
            vecCab.add(INT_TBL_DAT_TRE_MAF_PLA_PRO,"Pla.Pro.");
            vecCab.add(INT_TBL_DAT_TRE_MAF_NUM_CLI_FEC,"Núm.Cli.Fec.");
            vecCab.add(INT_TBL_DAT_TRE_MAF_SAL_FEC_PRE,"Sal.Fec.Pre.");
            
            
            objTblModMorAcuFec=new ZafTblMod();
            objTblModMorAcuFec.setHeader(vecCab);
//            //Configurar ZafTblMod: Establecer el tipo de dato de las columnas.
//            objTblMod.setColumnDataType(INT_TBL_GRL_DAT_CAN, objTblMod.INT_COL_DBL, new Integer(0), null);
//            objTblMod.setColumnDataType(INT_TBL_GRL_DAT_PRE, objTblMod.INT_COL_DBL, new Integer(0), null);
//            objTblMod.setColumnDataType(INT_TBL_GRL_DAT_SUB, objTblMod.INT_COL_DBL, new Integer(0), null);
//            objTblMod.setColumnDataType(INT_TBL_GRL_DAT_IVA, objTblMod.INT_COL_DBL, new Integer(0), null);
//            objTblMod.setColumnDataType(INT_TBL_GRL_DAT_TOT, objTblMod.INT_COL_DBL, new Integer(0), null);
            //Configurar JTable: Establecer el modelo de la tabla.
            tblDatMorAcuFec.setModel(objTblModMorAcuFec);
            //Configurar JTable: Establecer tipo de seleccián.
            tblDatMorAcuFec.setRowSelectionAllowed(true);
            tblDatMorAcuFec.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //Configurar JTable: Establecer el mená de contexto.
            objTblPopMnu=new ZafTblPopMnu(tblDatMorAcuFec);
            //Configurar JTable: Establecer el tipo de redimensionamiento de las columnas.
            tblDatMorAcuFec.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            //Configurar JTable: Establecer el ancho de las columnas.
            javax.swing.table.TableColumnModel tcmAux=tblDatMorAcuFec.getColumnModel();
            tcmAux.getColumn(INT_TBL_DAT_TRE_LIN).setPreferredWidth(20);
            tcmAux.getColumn(INT_TBL_DAT_TRE_COD_EMP).setPreferredWidth(130);
            tcmAux.getColumn(INT_TBL_DAT_TRE_MAF_PLA_PRO).setPreferredWidth(130);
            tcmAux.getColumn(INT_TBL_DAT_TRE_MAF_NUM_CLI_FEC).setPreferredWidth(130);           
            tcmAux.getColumn(INT_TBL_DAT_TRE_MAF_SAL_FEC_PRE).setPreferredWidth(130);
            

            //Configurar JTable: Ocultar columnas del sistema.
            objTblModMorAcuFec.addSystemHiddenColumn(INT_TBL_DAT_TRE_COD_EMP, tblDatMorAcuFec);

//            //Configurar JTable: Establecer las columnas que no se pueden redimensionar.
//            tcmAux.getColumn(INT_TBL_GRL_DAT_EST_IVA).setResizable(false);
            //Configurar JTable: Establecer el tipo de reordenamiento de columnas.
            tblDatMorAcuFec.getTableHeader().setReorderingAllowed(false);

            //Configurar JTable: Mostrar ToolTipText en la cabecera de las columnas.
            objMouMotAdaMorAcuFec=new ZafMouMotAdaMorAcuFec();
            tblDatMorAcuFec.getTableHeader().addMouseMotionListener(objMouMotAdaCrePer);
            //Configurar JTable: Establecer la fila de cabecera.
            objTblFilCab=new ZafTblFilCab(tblDatMorAcuFec);
            tcmAux.getColumn(INT_TBL_DAT_TRE_LIN).setCellRenderer(objTblFilCab);

            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.LEFT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_GEN);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);
            tcmAux.getColumn(INT_TBL_DAT_TRE_COD_EMP).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_TRE_MAF_PLA_PRO).setCellRenderer(objTblCelRenLbl);
            objTblCelRenLbl=null;

            objTblCelRenLbl=new ZafTblCelRenLbl();
            objTblCelRenLbl.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
            objTblCelRenLbl.setTipoFormato(objTblCelRenLbl.INT_FOR_NUM);
            objTblCelRenLbl.setFormatoNumerico(objParSis.getFormatoNumero(),false,true);            
            tcmAux.getColumn(INT_TBL_DAT_TRE_MAF_NUM_CLI_FEC).setCellRenderer(objTblCelRenLbl);
            tcmAux.getColumn(INT_TBL_DAT_TRE_MAF_SAL_FEC_PRE).setCellRenderer(objTblCelRenLbl);
            
            objTblCelRenLbl=null;
            
            //Datos de morosidad de la cartera del credito otorgado en el período
            ZafTblHeaGrp objTblHeaGrpSolMorAcuFec=(ZafTblHeaGrp)tblDatMorAcuFec.getTableHeader();
            objTblHeaGrpSolMorAcuFec.setHeight(16*3);

            ZafTblHeaColGrp objTblHeaColGrpSolMorAcuFec=null;
            objTblHeaColGrpSolMorAcuFec=new ZafTblHeaColGrp("Morosidad acumulada a la fecha");
            objTblHeaColGrpSolMorAcuFec.setHeight(16);
            objTblHeaGrpSolMorAcuFec.addColumnGroup(objTblHeaColGrpSolMorAcuFec);

            objTblHeaColGrpSolMorAcuFec.add(tcmAux.getColumn(INT_TBL_DAT_TRE_MAF_PLA_PRO));
            objTblHeaColGrpSolMorAcuFec.add(tcmAux.getColumn(INT_TBL_DAT_TRE_MAF_NUM_CLI_FEC));
            objTblHeaColGrpSolMorAcuFec.add(tcmAux.getColumn(INT_TBL_DAT_TRE_MAF_SAL_FEC_PRE));
            
            //Configurar JTable: Establecer relación entre el JTable de datos y JTable de totales.
            int intCol[]={INT_TBL_DAT_TRE_MAF_NUM_CLI_FEC, INT_TBL_DAT_TRE_MAF_SAL_FEC_PRE};
            objTblTotMorAcuFec=new ZafTblTot(spnDatMorAcuFec, spnTotMorAcuFec, tblDatMorAcuFec, tblTotMorAcuFec, intCol);


            
            //Libero los objetos auxiliares.
            tcmAux=null;
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
    /**
     * Esta clase hereda de la clase MouseMotionAdapter que permite manejar eventos de
     * del mouse (mover el mouse; arrastrar y soltar).
     * Se la usa en el sistema para mostrar el ToolTipText adecuado en la cabecera de
     * las columnas. Es necesario hacerlo porque el ancho de las columnas a veces
     * resulta muy corto para mostrar leyendas que requieren más espacio.
     */
    private class ZafMouMotAdaMorAcuFec extends java.awt.event.MouseMotionAdapter{
        public void mouseMoved(java.awt.event.MouseEvent evt){
            int intCol=tblDatMorAcuFec.columnAtPoint(evt.getPoint());
            String strMsg="";
            switch (intCol){
                case INT_TBL_DAT_TRE_COD_EMP:
                    strMsg="Código de la empresa";
                    break;
                case INT_TBL_DAT_TRE_MAF_PLA_PRO:
                    strMsg="Plazo promedio";
                    break;
                case INT_TBL_DAT_TRE_MAF_NUM_CLI_FEC:
                    strMsg="Clientes a la fecha";
                    break;                    
                case INT_TBL_DAT_TRE_MAF_SAL_FEC_PRE:
                    strMsg="Saldo a la fecha de presentación US($)";
                    break;
                default:
                    strMsg="";
                    break;                    
            }
            tblDatMorAcuFec.getTableHeader().setToolTipText(strMsg);
        }
    }
    

    

    

    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podráa presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaráa informado en todo
     * momento de lo que ocurre. Si se desea hacer ásto es necesario utilizar ásta clase
     * ya que si no sálo se apreciaráa los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        public void run()
        {
            if (!cargarReg())
            {
                //Inicializar objetos si no se pudo cargar los datos.
                lblMsgSis.setText("Listo");
                pgrSis.setValue(0);
                butCon.setText("Consultar");
            }
            //Establecer el foco en el JTable sálo cuando haya datos.
            if (tblDatCrePer.getRowCount()>0)
            {
                tabFrm.setSelectedIndex(1);
                tblDatCrePer.setRowSelectionInterval(0, 0);
                tblDatCrePer.requestFocus();
            }
            objThrGUI=null;
        }
    }



        

    private boolean cargarRegDatCre()
    {
        boolean blnRes=true;
        strAux="";
        String strAuxFecIniCor="", strAuxFecFinCor="";
        BigDecimal bdePerSubCreMax01_30=new BigDecimal("0"), bdePerSubCreMax31_60=new BigDecimal("0"), bdePerSubCreMaxMas60=new BigDecimal("0");
        BigDecimal bdePerNumCreMax01_30=new BigDecimal("0"), bdePerNumCreMax31_60=new BigDecimal("0"), bdePerNumCreMaxMas60=new BigDecimal("0");
        
        BigDecimal bdeAcuSubCreMax01_30=new BigDecimal("0"), bdeAcuSubCreMax31_60=new BigDecimal("0"), bdeAcuSubCreMaxMas60=new BigDecimal("0");
        BigDecimal bdeAcuNumCreMax01_30=new BigDecimal("0"), bdeAcuNumCreMax31_60=new BigDecimal("0"), bdeAcuNumCreMaxMas60=new BigDecimal("0");
        
        try{
            butCon.setText("Detener");
            lblMsgSis.setText("Obteniendo datos...");

            switch (objSelFec.getTipoSeleccion()){
                case 0: //Búsqueda por rangos
                    strAux+="			AND a1.fe_doc BETWEEN '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "' AND '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                    strAuxFecFinCor="          '" + objUti.formatearFecha(objSelFec.getFechaHasta(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                    strAuxFecIniCor="          '" + objUti.formatearFecha(objSelFec.getFechaDesde(), objSelFec.getFormatoFecha(), objParSis.getFormatoFechaBaseDatos()) + "'";
                    
                    vecDat.clear();
                    lblMsgSis.setText("Cargando datos...");
                    pgrSis.setMinimum(0);
                    pgrSis.setValue(0);

                    //registro 1
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_UNO_LIN,                     "");
                    vecReg.add(INT_TBL_DAT_UNO_COD_EMP,                 null);
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_COS_EFE_ANU,     "No. Total Clientes(Crédito activas período): ");
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_CEA_CRE,         null);
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_CEA_CON,         null);
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU,     "No. Total Clientes(Crédito activas fecha):");
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU_CRE, null);                        
                    vecDat.add(vecReg);
                    //registro 2
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_UNO_LIN,                     "");
                    vecReg.add(INT_TBL_DAT_UNO_COD_EMP,                 null);
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_COS_EFE_ANU,     "No. Total Operaciones(Crédito Activas Período): ");
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_CEA_CRE,         null);
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_CEA_CON,         null);
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU,     "No. Total Operaciones(Crédito Activas Fecha): ");
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU_CRE, null);                        
                    vecDat.add(vecReg);
                    //registro 3
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_UNO_LIN,                     "");
                    vecReg.add(INT_TBL_DAT_UNO_COD_EMP,                 null);
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_COS_EFE_ANU,     "Plazo promedio CxC(Días): ");
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_CEA_CRE,         null);
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_CEA_CON,         null);
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU,     "Plazo máximo CxC(Días): ");
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU_CRE, null);                        
                    vecDat.add(vecReg);
                    //registro 4
                    vecReg=new Vector();
                    vecReg.add(INT_TBL_DAT_UNO_LIN,                     "");
                    vecReg.add(INT_TBL_DAT_UNO_COD_EMP,                 null);
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_COS_EFE_ANU,     "Valor total CxC del período(Ventas a crédito): ");
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_CEA_CRE,         null);
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_CEA_CON,         null);
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU,     "Valor total CxC a la fecha(Ventas a crédito): ");
                    vecReg.add(INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU_CRE, null);                        
                    vecDat.add(vecReg);

                    //Asignar vectores al modelo.
                    objTblModCrePer.setData(vecDat);
                    tblDatCrePer.setModel(objTblModCrePer);
                    vecDat.clear();

                    if(con!=null){
                        stm=con.createStatement();
                        //-- B - No. total de clientes de credito activas del periodo
                        strSQL="";
                        strSQL+="SELECT SUM(x.transaccionesContado) AS ne_numCliOpeCon, SUM(x.transaccionesCredito) AS ne_numCliOpeCre  FROM(";
                        strSQL+=" 	 SELECT x.co_cli, SUM(x.co_cliCon) AS transaccionesContado, SUM(x.co_cliCre) AS transaccionesCredito";
                        strSQL+=" 	 , SUM(x.co_cliCon) + SUM(x.co_cliCre) AS suma";
                        strSQL+=" 	 FROM(";
                        strSQL+=" 		SELECT y.co_cli, y.co_cliCon, y.co_cliCre FROM(";
                        strSQL+=" 			SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc, a1.co_cli, a1.tx_nomCli";
                        strSQL+=" 			, CASE WHEN b1.ne_tipforPag IN(1,4) THEN 1 ELSE 0 END AS co_cliCon";
                        strSQL+=" 			, CASE WHEN b1.ne_tipforPag NOT IN(1,4) THEN 1 ELSE 0 END AS co_cliCre";
                        strSQL+="			, b1.co_forPag";
                        strSQL+=" 			FROM (   ( tbm_cabMovInv AS a1";
                        strSQL+="				   LEFT OUTER JOIN (tbm_cabForPag AS b1 LEFT OUTER JOIN tbm_detForPag AS b2 ON b1.co_emp=b2.co_emp AND b1.co_forPag=b2.co_forPag)";
                        strSQL+=" 				   ON a1.co_emp=b1.co_emp AND a1.co_forPag=b1.co_forPag";
                        strSQL+=" 				 )";
                        strSQL+=" 				INNER JOIN tbm_detMovInv AS c6";
                        strSQL+=" 				ON a1.co_emp=c6.co_emp AND a1.co_loc=c6.co_loc AND a1.co_tipDoc=c6.co_tipDoc AND a1.co_doc=c6.co_doc";
                        strSQL+=" 				INNER JOIN tbm_inv AS a7";
                        strSQL+=" 				ON c6.co_emp=a7.co_emp AND c6.co_itm=a7.co_itm";
                        strSQL+=" 			    )";
                        strSQL+=" 			INNER JOIN tbm_cabTipdoc AS a2";
                        strSQL+=" 			ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                        strSQL+=" 			WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="" + strAux + "";//AND a1.fe_doc BETWEEN '2014-10-01' AND '2014-12-31'  
                        strSQL+=" 			AND a1.st_reg NOT IN('E','I')";
                        strSQL+="                   AND a1.co_tipDoc IN(" + getTipDocCnfPrg() + ")";
                        strSQL+=" 			GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc, a1.nd_valIva, a1.nd_sub, b1.ne_tipforPag";
                        strSQL+=" 			, a1.co_cli, a1.tx_nomCli, b1.co_forPag";
                        strSQL+=" 			ORDER BY a1.co_cli, a1.co_doc";
                        strSQL+=" 		) AS y";
                        strSQL+=" 		GROUP BY y.co_cli, y.co_cliCon, y.co_cliCre";
                        strSQL+=" 		ORDER BY y.co_cli";
                        strSQL+=" 	 ) AS x";
                        strSQL+=" 	GROUP BY x.co_cli";
                        strSQL+=" ) AS x";
                        System.out.println("1er. SQL : " + strSQL);
                        rst=stm.executeQuery(strSQL);
                        if(rst.next()){
                            objTblModCrePer.setValueAt(rst.getObject("ne_numCliOpeCon"), 0, INT_TBL_DAT_UNO_CRE_PER_CEA_CON);
                            objTblModCrePer.setValueAt(rst.getObject("ne_numCliOpeCre"), 0, INT_TBL_DAT_UNO_CRE_PER_CEA_CRE);
                        }
                        
                        

                        //-- A - No. total de operaciones de credito activas del periodo
                        strSQL="";
                        strSQL+=" SELECT COUNT(x.transaccionesContado) AS transaccionesContado";
                        strSQL+=" , COUNT(x.transaccionesCredito) AS transaccionesCredito";
                        strSQL+=" FROM(";
                        strSQL+=" 	SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc";
                        strSQL+=" 	, CASE WHEN b1.ne_tipforPag IN(1,4)  THEN (a1.co_doc) END AS transaccionesContado";
                        strSQL+=" 	       , CASE WHEN b1.ne_tipforPag NOT IN(1,4) THEN (a1.co_doc) END AS transaccionesCredito";
                        strSQL+=" 	FROM (   ( tbm_cabMovInv AS a1";
                        strSQL+=" 		   LEFT OUTER JOIN (tbm_cabForPag AS b1 LEFT OUTER JOIN tbm_detForPag AS b2 ON b1.co_emp=b2.co_emp AND b1.co_forPag=b2.co_forPag)";
                        strSQL+=" 		   ON a1.co_emp=b1.co_emp AND a1.co_forPag=b1.co_forPag";
                        strSQL+=" 		 )";
                        strSQL+=" 		INNER JOIN tbm_detMovInv AS c6";
                        strSQL+=" 		ON a1.co_emp=c6.co_emp AND a1.co_loc=c6.co_loc AND a1.co_tipDoc=c6.co_tipDoc AND a1.co_doc=c6.co_doc";
                        strSQL+=" 		INNER JOIN tbm_inv AS a7";
                        strSQL+=" 		ON c6.co_emp=a7.co_emp AND c6.co_itm=a7.co_itm";
                        strSQL+=" 	    )";
                        strSQL+=" 	INNER JOIN tbm_cabTipdoc AS a2";
                        strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                        strSQL+=" 	WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="" + strAux + "";//AND a1.fe_doc BETWEEN '2014-10-01' AND '2014-12-31'
                        strSQL+=" 	AND a1.st_reg NOT IN('E','I')";
                        strSQL+=" 	AND a1.co_tipDoc IN (" + getTipDocCnfPrg() + ")";
                        strSQL+="	GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc, a1.nd_valIva, a1.nd_sub, b1.ne_tipforpag";
                        strSQL+="	ORDER BY a1.ne_numDoc";
                        strSQL+=") AS x";
                        System.out.println("2do. SQL : " + strSQL);
                        rst=stm.executeQuery(strSQL);
                        if(rst.next()){
                            objTblModCrePer.setValueAt(rst.getObject("transaccionesContado"), 1, INT_TBL_DAT_UNO_CRE_PER_CEA_CON);
                            objTblModCrePer.setValueAt(rst.getObject("transaccionesCredito"), 1, INT_TBL_DAT_UNO_CRE_PER_CEA_CRE);
                        }
        
                        //-- C - Plazo promedio cuenta por cobrar(Dias)
                        strSQL="";
                        strSQL+="SELECT z.ne_proDiaCon, ne_proDiaCre FROM(";
                        strSQL+=" 	SELECT SUM(y.ne_diaCon) AS ne_diaCon, SUM(y.ne_diaCre) AS ne_diaCre ";
                        strSQL+=" 	, COUNT(y.ne_diaCon) AS ne_cntDiaCon, COUNT(y.ne_diaCre) AS ne_cntDiaCre";
                        strSQL+=" 	, (SUM(CAST(y.ne_diaCon AS NUMERIC(6,2) )) / COUNT(CAST(y.ne_diaCon AS NUMERIC(6,2))) )  AS ne_proDiaCon";
                        strSQL+=" 	, (SUM(CAST(y.ne_diaCre AS NUMERIC(6,2) )) / COUNT(CAST(y.ne_diaCre AS NUMERIC(6,2))) ) AS ne_proDiaCre";
                        strSQL+="	FROM(";
                        strSQL+=" 		SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc, a1.co_cli, a1.tx_nomCli";
                        strSQL+=" 		       , CASE WHEN b1.ne_tipforPag IN(1,4) THEN MAX(b2.ne_diaCre) END AS ne_diaCon";
                        strSQL+=" 		       , CASE WHEN b1.ne_tipforPag NOT IN(1,4) THEN MAX(b2.ne_diaCre) END AS ne_diaCre";
                        strSQL+=" 		       , MAX(b2.ne_diaCre) AS ne_diaCreMax";
                        strSQL+=" 		       FROM (   (tbm_cabMovInv AS a1 ";
                        strSQL+=" 				   LEFT OUTER JOIN (tbm_cabForPag AS b1 LEFT OUTER JOIN tbm_detForPag AS b2 ON b1.co_emp=b2.co_emp AND b1.co_forPag=b2.co_forPag)";
                        strSQL+=" 				   ON a1.co_emp=b1.co_emp AND a1.co_forPag=b1.co_forPag";
                        strSQL+=" 				)";
                        strSQL+=" 		       INNER JOIN tbm_detMovInv AS c6";
                        strSQL+=" 		       ON a1.co_emp=c6.co_emp AND a1.co_loc=c6.co_loc AND a1.co_tipDoc=c6.co_tipDoc AND a1.co_doc=c6.co_doc";
                        strSQL+=" 		       INNER JOIN tbm_inv AS a7";
                        strSQL+=" 		       ON c6.co_emp=a7.co_emp AND c6.co_itm=a7.co_itm";
                        strSQL+=" 		    )";
                        strSQL+=" 		INNER JOIN tbm_cabTipdoc AS a2";
                        strSQL+=" 		ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                        strSQL+=" 		WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="" + strAux + "";//AND a1.fe_doc BETWEEN '2014-10-01' AND '2014-12-31'
                        strSQL+=" 		AND a1.st_reg NOT IN('E','I')";
                        strSQL+=" 		AND a1.co_tipDoc IN (" + getTipDocCnfPrg() + ")";
                        strSQL+=" 		GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc, a1.nd_valIva, a1.nd_sub, b1.ne_tipforPag";
                        strSQL+=" 		, a1.co_cli, a1.tx_nomCli";
                        strSQL+=" 		ORDER BY a1.co_cli";
                        strSQL+=" 	) AS y";
                        strSQL+=" ) AS z";
                        System.out.println("3er. SQL : " + strSQL);
                        rst=stm.executeQuery(strSQL);
                        if(rst.next()){
                            objTblModCrePer.setValueAt(rst.getObject("ne_proDiaCon"), 2, INT_TBL_DAT_UNO_CRE_PER_CEA_CON);
                            objTblModCrePer.setValueAt(rst.getObject("ne_proDiaCre"), 2, INT_TBL_DAT_UNO_CRE_PER_CEA_CRE);
                        }

                        //-- D - Valor total cxc del periodo(ventas a credito)
                        strSQL="";
                        strSQL+="SELECT ABS(SUM(x.nd_valCon)) AS nd_valCon, ABS(SUM(x.nd_valCre)) AS nd_valCre";
                        strSQL+=" , SUM(x.nd_valNetConIva) AS nd_sumValCon_sumValCre";
                        strSQL+=" FROM(";
                        strSQL+=" 	SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc";
                        strSQL+=" 	       , CASE WHEN (a1.nd_valIva=0 OR a1.nd_valIva IS NULL)  THEN (a1.nd_sub) END AS nd_valNetSinIva";
                        strSQL+=" 	       , CASE WHEN a1.nd_valIva<>0 THEN (a1.nd_sub) END AS nd_valNetConIva";
                        strSQL+=" 	       , a1.nd_valIva AS nd_valIvaNet";
                        strSQL+="  	       , CASE WHEN b1.ne_tipforPag IN(1,4) THEN a1.nd_valIva END AS nd_valIvaCon";
                        strSQL+=" 	       , CASE WHEN b1.ne_tipforPag NOT IN(1,4) THEN a1.nd_valIva END AS nd_valIvaCre";
                        strSQL+=" 	       , CASE WHEN b1.ne_tipforPag IN(1,4) THEN a1.nd_sub END AS nd_valCon";
                        strSQL+=" 	       , CASE WHEN b1.ne_tipforPag NOT IN(1,4) THEN a1.nd_sub END AS nd_valCre";
                        strSQL+=" 		FROM (   ( tbm_cabMovInv AS a1";
                        strSQL+=" 			   LEFT OUTER JOIN (tbm_cabForPag AS b1 LEFT OUTER JOIN tbm_detForPag AS b2 ON b1.co_emp=b2.co_emp AND b1.co_forPag=b2.co_forPag)";
                        strSQL+=" 			   ON a1.co_emp=b1.co_emp AND a1.co_forPag=b1.co_forPag";
                        strSQL+=" 			 )";
                        strSQL+=" 	       INNER JOIN tbm_detMovInv AS c6";
                        strSQL+=" 	       ON a1.co_emp=c6.co_emp AND a1.co_loc=c6.co_loc AND a1.co_tipDoc=c6.co_tipDoc AND a1.co_doc=c6.co_doc";
                        strSQL+=" 	       INNER JOIN tbm_inv AS a7";
                        strSQL+=" 	       ON c6.co_emp=a7.co_emp AND c6.co_itm=a7.co_itm";
                        strSQL+=" 	    )";
                        strSQL+=" 	INNER JOIN tbm_cabTipdoc AS a2";
                        strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                        strSQL+=" 	WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="" + strAux + "";//AND a1.fe_doc BETWEEN '2014-10-01' AND '2014-12-31'  --" + strAux;
                        strSQL+=" 	AND a1.st_reg NOT IN('E','I')";
                        strSQL+=" 	AND a1.co_tipDoc IN (" + getTipDocCnfPrg() + ")";
                        strSQL+=" 	GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc, a1.nd_valIva, a1.nd_sub, b1.ne_tipforPag";
                        strSQL+=" 	ORDER BY a1.ne_numDoc";
                        strSQL+=" ) AS x";
                        System.out.println("4to. SQL : " + strSQL);
                        rst=stm.executeQuery(strSQL);
                        if(rst.next()){
                            objTblModCrePer.setValueAt(rst.getObject("nd_valCon"), 3, INT_TBL_DAT_UNO_CRE_PER_CEA_CON);
                            objTblModCrePer.setValueAt(rst.getObject("nd_valCre"), 3, INT_TBL_DAT_UNO_CRE_PER_CEA_CRE);
                        }

                        //--MOROSIDAD DE LA CARTERA DEL CREDITO OTROGADO EN EL PERIODO
                        vecDat.clear();
                        //registro 1
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_DOS_LIN,             "");
                        vecReg.add(INT_TBL_DAT_DOS_COD_EMP,         null);
                        vecReg.add(INT_TBL_DAT_DOS_MCC_PLA_PRO,     "Hasta 30 días: ");
                        vecReg.add(INT_TBL_DAT_DOS_MCC_NUM_CLI_PER, null);
                        vecReg.add(INT_TBL_DAT_DOS_MCC_MON_PER,     null);                       
                        vecDat.add(vecReg);
                        //registro 2
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_DOS_LIN,             "");
                        vecReg.add(INT_TBL_DAT_DOS_COD_EMP,         null);
                        vecReg.add(INT_TBL_DAT_DOS_MCC_PLA_PRO,     "De 31 a 60 días: ");
                        vecReg.add(INT_TBL_DAT_DOS_MCC_NUM_CLI_PER, null);
                        vecReg.add(INT_TBL_DAT_DOS_MCC_MON_PER,     null);                       
                        vecDat.add(vecReg);
                        //registro 3
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_DOS_LIN,             "");
                        vecReg.add(INT_TBL_DAT_DOS_COD_EMP,         null);
                        vecReg.add(INT_TBL_DAT_DOS_MCC_PLA_PRO,     "Más de 60 días: ");
                        vecReg.add(INT_TBL_DAT_DOS_MCC_NUM_CLI_PER, null);
                        vecReg.add(INT_TBL_DAT_DOS_MCC_MON_PER,     null);                       
                        vecDat.add(vecReg);
                        
                        //Asignar vectores al modelo.
                        objTblModMorCarCreOtoPer.setData(vecDat);
                        tblDatMorCarCrePer.setModel(objTblModMorCarCreOtoPer);
                        vecDat.clear();                       
                        
                        //-- E - 1) 2) 3) 4)   No. Clientes del periodo                        
                        strSQL="";
                        strSQL+="SELECT SUM(b1.ne_numDiaCreMaxCon) AS ne_numDiaCreMaxCon, SUM(b1.ne_numDiaCreMax01_30) AS ne_numDiaCreMax01_30";
                        strSQL+=" , SUM(b1.ne_numDiaCreMax31_60) AS ne_numDiaCreMax31_60, SUM(b1.ne_numDiaCreMaxMas60) AS ne_numDiaCreMaxMas60";
                        strSQL+=" FROM(";
                        strSQL+=" 	SELECT d1.co_emp, d1.co_cli";
                        strSQL+=" 		, (d3.ne_numDiaCreMaxCon) AS ne_numDiaCreMaxCon, (d4.ne_numDiaCreMax01_30) AS ne_numDiaCreMax01_30";
                        strSQL+=" 		, (d4.ne_numDiaCreMax31_60) AS ne_numDiaCreMax31_60, (d4.ne_numDiaCreMaxMas60) AS ne_numDiaCreMaxMas60";
                        strSQL+=" 	FROM(";
                        strSQL+=" 		SELECT a1.co_emp, a1.co_cli";
                        strSQL+=" 		FROM tbm_cabMovInv AS a1";
                        strSQL+=" 		INNER JOIN tbm_detMovInv AS c6 ON a1.co_emp=c6.co_emp AND a1.co_loc=c6.co_loc AND a1.co_tipDoc=c6.co_tipDoc AND a1.co_doc=c6.co_doc";
                        strSQL+=" 		INNER JOIN tbm_inv AS a7 ON c6.co_emp=a7.co_emp AND c6.co_itm=a7.co_itm";
                        strSQL+=" 		WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="" + strAux + "";//AND a1.fe_doc BETWEEN '2014-10-01' AND '2014-12-31'  
                        strSQL+=" 		AND a1.st_reg NOT IN('E','I') AND a1.co_tipDoc IN (" + getTipDocCnfPrg() + ")";
                        strSQL+=" 		GROUP BY a1.co_emp, a1.co_cli";
                        strSQL+="		ORDER BY a1.co_cli";
                        strSQL+=" 	) AS d1";
                        strSQL+=" 	LEFT OUTER JOIN(/*Contado*/";
                        strSQL+=" 		SELECT e1.co_emp, e1.co_cli";
                        strSQL+="		, SUM(e1.ne_numDiaCreMaxCon) AS ne_numDiaCreMaxCon";
                        strSQL+=" 		FROM(";
                        strSQL+=" 			SELECT y.co_emp, y.co_cli/*, y.tx_nomCli*/";
                        strSQL+=" 			, y.ne_numDiaCreMaxCon";
                        strSQL+=" 			FROM(";
                        strSQL+=" 				SELECT a1.co_emp, /*a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc,*/ a1.co_cli, a1.tx_nomCli ";
                        strSQL+=" 				, CASE WHEN (MAX(a1.ne_diaCre) = 0 OR MAX(a1.ne_diaCre) IS NULL) THEN 1 ELSE 0 END AS ne_numDiaCreMaxCon";
                        strSQL+=" 				FROM(";
                        strSQL+=" 					SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc, a1.co_cli, a1.tx_nomCli, MAX(b2.ne_diaCre) AS ne_diaCre";
                        strSQL+=" 					FROM (   (tbm_cabMovInv AS a1 LEFT OUTER JOIN (tbm_cabForPag AS b1 LEFT OUTER JOIN tbm_detForPag AS b2 ON b1.co_emp=b2.co_emp AND b1.co_forPag=b2.co_forPag)";
                        strSQL+=" 						   ON a1.co_emp=b1.co_emp AND a1.co_forPag=b1.co_forPag";
                        strSQL+=" 						)";
                        strSQL+=" 					INNER JOIN tbm_detMovInv AS c6 ON a1.co_emp=c6.co_emp AND a1.co_loc=c6.co_loc AND a1.co_tipDoc=c6.co_tipDoc AND a1.co_doc=c6.co_doc";
                        strSQL+=" 					INNER JOIN tbm_inv AS a7 ON c6.co_emp=a7.co_emp AND c6.co_itm=a7.co_itm";
                        strSQL+="					)";
                        strSQL+=" 					INNER JOIN tbm_cabTipdoc AS a2 ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                        strSQL+=" 					WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="" + strAux + "";//AND a1.fe_doc BETWEEN '2014-10-01' AND '2014-12-31'  
                        strSQL+=" 					AND a1.st_reg NOT IN('E','I') AND a1.co_tipDoc IN (" + getTipDocCnfPrg() + ")";
                        strSQL+=" 					AND b1.ne_tipforPag IN(1,4) /*Contado*/";
                        strSQL+="					GROUP BY a1.co_emp, a1.co_cli, a1.tx_nomCli, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc";
                        strSQL+="					ORDER BY a1.co_cli";
                        strSQL+="				) AS a1";
                        strSQL+=" 				GROUP BY a1.co_emp, a1.co_cli, a1.tx_nomCli";
                        strSQL+=" 				ORDER BY a1.co_cli";
                        strSQL+="			) AS y";
                        strSQL+="			GROUP BY y.co_emp, y.co_cli/*, y.tx_nomCli*/, y.ne_numDiaCreMaxCon";
                        strSQL+="			ORDER BY y.co_cli";
                        strSQL+="		) AS e1";
                        strSQL+="		GROUP BY e1.co_emp, e1.co_cli";
                        strSQL+="		ORDER BY e1.co_emp, e1.co_cli";
                        strSQL+="	) AS d3";
                        strSQL+=" 	ON d1.co_emp=d3.co_emp AND d1.co_cli=d3.co_cli";
                        strSQL+="	LEFT OUTER JOIN(/*Crédito*/";
                        strSQL+=" 		SELECT e1.co_emp, e1.co_cli";
                        strSQL+=" 		, SUM(e1.ne_numDiaCreMax01_30) AS ne_numDiaCreMax01_30";
                        strSQL+="		, SUM(e1.ne_numDiaCreMax31_60) AS ne_numDiaCreMax31_60, SUM(e1.ne_numDiaCreMaxMas60) AS ne_numDiaCreMaxMas60";
                        strSQL+=" 		FROM(";
                        strSQL+=" 			SELECT y.co_emp, y.co_cli/*, y.tx_nomCli*/";
                        strSQL+="			, y.ne_numDiaCreMax01_30, y.ne_numDiaCreMax31_60, y.ne_numDiaCreMaxMas60";
                        strSQL+=" 			FROM(";
                        strSQL+="				SELECT a1.co_emp, /*a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc,*/ a1.co_cli, a1.tx_nomCli";
                        strSQL+="				, CASE WHEN MAX(a1.ne_diaCre) BETWEEN   1 AND 30 THEN 1 ELSE 0 END AS ne_numDiaCreMax01_30";
                        strSQL+="				, CASE WHEN MAX(a1.ne_diaCre) BETWEEN  31 AND 60 THEN 1 ELSE 0 END AS ne_numDiaCreMax31_60";
                        strSQL+="				, CASE WHEN MAX(a1.ne_diaCre)>60 		 THEN 1 ELSE 0 END AS ne_numDiaCreMaxMas60";
                        strSQL+="				FROM(";
                        strSQL+="					SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc, a1.co_cli, a1.tx_nomCli, MAX(b2.ne_diaCre) AS ne_diaCre";
                        strSQL+="					FROM (   (tbm_cabMovInv AS a1 LEFT OUTER JOIN (tbm_cabForPag AS b1 LEFT OUTER JOIN tbm_detForPag AS b2 ON b1.co_emp=b2.co_emp AND b1.co_forPag=b2.co_forPag)";
                        strSQL+="						   ON a1.co_emp=b1.co_emp AND a1.co_forPag=b1.co_forPag";
                        strSQL+="						)";
                        strSQL+=" 					INNER JOIN tbm_detMovInv AS c6 ON a1.co_emp=c6.co_emp AND a1.co_loc=c6.co_loc AND a1.co_tipDoc=c6.co_tipDoc AND a1.co_doc=c6.co_doc";
                        strSQL+="					INNER JOIN tbm_inv AS a7 ON c6.co_emp=a7.co_emp AND c6.co_itm=a7.co_itm";
                        strSQL+="					)";
                        strSQL+=" 					INNER JOIN tbm_cabTipdoc AS a2 ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                        strSQL+=" 					WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="" + strAux + "";//AND a1.fe_doc BETWEEN '2014-10-01' AND '2014-12-31'
                        strSQL+=" 					AND a1.st_reg NOT IN('E','I') AND a1.co_tipDoc IN (" + getTipDocCnfPrg() + ")";
                        strSQL+="					AND b1.ne_tipforPag NOT IN(1,4) /*Crédito*/";
                        strSQL+=" 					GROUP BY a1.co_emp, a1.co_cli, a1.tx_nomCli, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc";
                        strSQL+="					ORDER BY a1.co_cli";
                        strSQL+="				) AS a1";
                        strSQL+="				GROUP BY a1.co_emp, a1.co_cli, a1.tx_nomCli";
                        strSQL+="				ORDER BY a1.co_cli";
                        strSQL+="			) AS y";
                        strSQL+="			GROUP BY y.co_emp, y.co_cli/*, y.tx_nomCli*/, y.ne_numDiaCreMax01_30, y.ne_numDiaCreMax31_60, y.ne_numDiaCreMaxMas60";
                        strSQL+=" 			ORDER BY y.co_cli";
                        strSQL+="		) AS e1";
                        strSQL+="		GROUP BY e1.co_emp, e1.co_cli";
                        strSQL+="		ORDER BY e1.co_emp, e1.co_cli";
                        strSQL+="	) AS d4";
                        strSQL+=" 	ON d1.co_emp=d4.co_emp AND d1.co_cli=d4.co_cli";
                        strSQL+="	GROUP BY d1.co_emp, d1.co_cli";
                        strSQL+="	, d3.ne_numDiaCreMaxCon, d4.ne_numDiaCreMax01_30";
                        strSQL+="	, d4.ne_numDiaCreMax31_60, d4.ne_numDiaCreMaxMas60";
                        strSQL+="	ORDER BY d1.co_cli";
                        strSQL+=") AS b1";
                        System.out.println("5to. SQL : " + strSQL);
                        rst=stm.executeQuery(strSQL);
                        if(rst.next()){
                            objTblModMorCarCreOtoPer.setValueAt(rst.getObject("ne_numDiaCreMax01_30"), 0, INT_TBL_DAT_DOS_MCC_NUM_CLI_PER);
                            objTblModMorCarCreOtoPer.setValueAt(rst.getObject("ne_numDiaCreMax31_60"), 1, INT_TBL_DAT_DOS_MCC_NUM_CLI_PER);
                            objTblModMorCarCreOtoPer.setValueAt(rst.getObject("ne_numDiaCreMaxMas60"), 2, INT_TBL_DAT_DOS_MCC_NUM_CLI_PER);
                                                        
                            bdePerNumCreMax01_30=new BigDecimal(rst.getObject("ne_numDiaCreMax01_30")==null?"0":(rst.getString("ne_numDiaCreMax01_30").equals("")?"0":rst.getString("ne_numDiaCreMax01_30")));
                            bdePerNumCreMax31_60=new BigDecimal(rst.getObject("ne_numDiaCreMax31_60")==null?"0":(rst.getString("ne_numDiaCreMax31_60").equals("")?"0":rst.getString("ne_numDiaCreMax31_60")));
                            bdePerNumCreMaxMas60=new BigDecimal(rst.getObject("ne_numDiaCreMaxMas60")==null?"0":(rst.getString("ne_numDiaCreMaxMas60").equals("")?"0":rst.getString("ne_numDiaCreMaxMas60")));
                            
                        }
                        
                        //-- E - 1) 2) 3) 4)   Monto del periodo US$
                        strSQL="";
                        strSQL+="SELECT ABS(SUM(d1.nd_sub)) AS nd_sub, ABS(SUM(d1.nd_valIva)) AS nd_valIva";
                        strSQL+="     , ABS(SUM(d1.ne_subConMax00)) AS ne_subConMax00, ABS(SUM(d1.ne_ivaConMax00)) AS ne_ivaConMax00, ABS(SUM(d1.ne_subCreMax01_30)) AS ne_subCreMax01_30";
                        strSQL+="     , ABS(SUM(d1.ne_ivaCreMax01_30)) AS ne_ivaCreMax01_30, ABS(SUM(d1.ne_subCreMax31_60)) AS ne_subCreMax31_60, ABS(SUM(d1.ne_ivaCreMax31_60)) AS ne_ivaCreMax31_60";
                        strSQL+="      , ABS(SUM(d1.ne_subCreMaxMas60)) AS ne_subCreMaxMas60, ABS(SUM(d1.ne_ivaCreMaxMas60)) AS ne_ivaCreMaxMas60";
                        strSQL+=" FROM(";
                        strSQL+="	SELECT d1.co_emp, d1.co_cli, SUM(d1.nd_sub) AS nd_sub, SUM(d1.nd_valIva) AS nd_valIva";
                        strSQL+=" 		, d3.ne_subConMax00, d3.ne_ivaConMax00, d4.ne_subCreMax01_30, d4.ne_ivaCreMax01_30";
                        strSQL+=" 		, d4.ne_subCreMax31_60, d4.ne_ivaCreMax31_60, d4.ne_subCreMaxMas60, d4.ne_ivaCreMaxMas60";
                        strSQL+=" 	FROM(";
                        strSQL+=" 		SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.co_cli, a1.nd_sub, a1.nd_valIva";
                        strSQL+=" 		FROM tbm_cabMovInv AS a1";
                        strSQL+=" 		INNER JOIN tbm_detMovInv AS c6 ON a1.co_emp=c6.co_emp AND a1.co_loc=c6.co_loc AND a1.co_tipDoc=c6.co_tipDoc AND a1.co_doc=c6.co_doc";
                        strSQL+=" 		INNER JOIN tbm_inv AS a7 ON c6.co_emp=a7.co_emp AND c6.co_itm=a7.co_itm";
                        strSQL+=" 		WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="" + strAux + "";//AND a1.fe_doc BETWEEN '2014-10-01' AND '2014-12-31'
                        strSQL+=" 		AND a1.st_reg NOT IN('E','I') AND a1.co_tipDoc IN (" + getTipDocCnfPrg() + ")";
                        strSQL+="		GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.co_cli, a1.nd_sub, a1.nd_valIva";
                        strSQL+="		ORDER BY a1.co_cli";
                        strSQL+="	) AS d1";
                        strSQL+="	LEFT OUTER JOIN(/*Contado*/";
                        strSQL+="		SELECT e1.co_emp, e1.co_cli";
                        strSQL+="		, SUM(e1.ne_subConMax01_30) AS ne_subConMax00, SUM(e1.ne_ivaConMax01_30) AS ne_ivaConMax00";
                        strSQL+=" 		FROM(";
                        strSQL+=" 			SELECT y.co_emp, y.co_cli";
                        strSQL+="			, y.ne_subConMax01_30, y.ne_ivaConMax01_30";
                        strSQL+=" 			FROM(";
                        strSQL+=" 				SELECT a1.co_emp, a1.co_cli, a1.tx_nomCli";
                        strSQL+=" 				, CASE WHEN (MAX(a1.ne_diaCre) = 0 OR MAX(a1.ne_diaCre) IS NULL) THEN SUM(a1.nd_sub)    ELSE 0 END AS ne_subConMax01_30";
                        strSQL+=" 				, CASE WHEN (MAX(a1.ne_diaCre) = 0 OR MAX(a1.ne_diaCre) IS NULL) THEN SUM(a1.nd_valIva) ELSE 0 END AS ne_ivaConMax01_30";
                        strSQL+=" 				FROM(";
                        strSQL+=" 					SELECT a1.co_emp, a1.co_cli, a1.tx_nomCli, MAX(b2.ne_diaCre) AS ne_diaCre";
                        strSQL+=" 					, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.nd_sub, a1.nd_valIva";
                        strSQL+=" 					FROM (   (tbm_cabMovInv AS a1 LEFT OUTER JOIN (tbm_cabForPag AS b1 LEFT OUTER JOIN tbm_detForPag AS b2 ON b1.co_emp=b2.co_emp AND b1.co_forPag=b2.co_forPag)";
                        strSQL+=" 						   ON a1.co_emp=b1.co_emp AND a1.co_forPag=b1.co_forPag";
                        strSQL+=" 						)";
                        strSQL+=" 					INNER JOIN tbm_detMovInv AS c6 ON a1.co_emp=c6.co_emp AND a1.co_loc=c6.co_loc AND a1.co_tipDoc=c6.co_tipDoc AND a1.co_doc=c6.co_doc";
                        strSQL+="					INNER JOIN tbm_inv AS a7 ON c6.co_emp=a7.co_emp AND c6.co_itm=a7.co_itm";
                        strSQL+="					)";
                        strSQL+="					INNER JOIN tbm_cabTipdoc AS a2 ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                        strSQL+=" 					WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="" + strAux + "";//AND a1.fe_doc BETWEEN '2014-10-01' AND '2014-12-31'
                        strSQL+=" 					AND a1.st_reg NOT IN('E','I') AND a1.co_tipDoc IN (" + getTipDocCnfPrg() + ")";
                        strSQL+="					AND b1.ne_tipforPag IN(1,4) /*Contado*/";
                        strSQL+="					GROUP BY a1.co_emp, a1.co_cli, a1.tx_nomCli, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.nd_sub, a1.nd_valIva";
                        strSQL+="					ORDER BY a1.co_cli";
                        strSQL+="				) AS a1";
                        strSQL+="				GROUP BY a1.co_emp, a1.co_cli, a1.tx_nomCli";
                        strSQL+="				ORDER BY a1.co_cli";
                        strSQL+="			) AS y";
                        strSQL+="			GROUP BY y.co_emp, y.co_cli, y.ne_subConMax01_30, y.ne_ivaConMax01_30";
                        strSQL+="			ORDER BY y.co_cli";
                        strSQL+="		) AS e1";
                        strSQL+="		GROUP BY e1.co_emp, e1.co_cli";
                        strSQL+="		ORDER BY e1.co_emp, e1.co_cli";
                        strSQL+="	) AS d3";
                        strSQL+=" 	ON d1.co_emp=d3.co_emp AND d1.co_cli=d3.co_cli";
                        strSQL+=" 	LEFT OUTER JOIN(/*Crédito*/";
                        strSQL+=" 		SELECT e1.co_emp, e1.co_cli";
                        strSQL+=" 		, SUM(e1.ne_subCreMax01_30) AS ne_subCreMax01_30, SUM(e1.ne_ivaCreMax01_30) AS ne_ivaCreMax01_30";
                        strSQL+=" 		, SUM(e1.ne_subCreMax31_60) AS ne_subCreMax31_60, SUM(e1.ne_ivaCreMax31_60) AS ne_ivaCreMax31_60";
                        strSQL+="		, SUM(e1.ne_subCreMaxMas60) AS ne_subCreMaxMas60, SUM(e1.ne_ivaCreMaxMas60) AS ne_ivaCreMaxMas60";
                        strSQL+=" 		FROM(";
                        strSQL+="			SELECT y.co_emp, y.co_cli";
                        strSQL+=" 			, y.ne_subCreMax01_30, y.ne_ivaCreMax01_30, y.ne_subCreMax31_60, y.ne_ivaCreMax31_60, y.ne_subCreMaxMas60, y.ne_ivaCreMaxMas60";
                        strSQL+=" 			FROM(";
                        strSQL+=" 				SELECT a1.co_emp, a1.co_cli, a1.tx_nomCli";
                        strSQL+=" 				, CASE WHEN MAX(a1.ne_diaCre) BETWEEN   1 AND 30 THEN SUM(a1.nd_sub)    ELSE 0 END AS ne_subCreMax01_30";
                        strSQL+=" 				, CASE WHEN MAX(a1.ne_diaCre) BETWEEN   1 AND 30 THEN SUM(a1.nd_valIva) ELSE 0 END AS ne_ivaCreMax01_30";
                        strSQL+=" 				, CASE WHEN MAX(a1.ne_diaCre) BETWEEN  31 AND 60 THEN SUM(a1.nd_sub)    ELSE 0 END AS ne_subCreMax31_60";
                        strSQL+=" 				, CASE WHEN MAX(a1.ne_diaCre) BETWEEN  31 AND 60 THEN SUM(a1.nd_valIva) ELSE 0 END AS ne_ivaCreMax31_60";
                        strSQL+=" 				, CASE WHEN MAX(a1.ne_diaCre)>60 		 THEN SUM(a1.nd_sub)    ELSE 0 END AS ne_subCreMaxMas60";
                        strSQL+=" 				, CASE WHEN MAX(a1.ne_diaCre)>60 		 THEN SUM(a1.nd_valIva) ELSE 0 END AS ne_ivaCreMaxMas60";
                        strSQL+=" 				FROM(";
                        strSQL+=" 					SELECT a1.co_emp, a1.co_cli, a1.tx_nomCli, MAX(b2.ne_diaCre) AS ne_diaCre, a1.nd_sub, a1.nd_valIva";
                        strSQL+=" 					, a1.co_loc, a1.co_tipDoc, a1.co_doc";
                        strSQL+="					FROM (   (tbm_cabMovInv AS a1 LEFT OUTER JOIN (tbm_cabForPag AS b1 LEFT OUTER JOIN tbm_detForPag AS b2 ON b1.co_emp=b2.co_emp AND b1.co_forPag=b2.co_forPag)";
                        strSQL+=" 						   ON a1.co_emp=b1.co_emp AND a1.co_forPag=b1.co_forPag";
                        strSQL+="						)";
                        strSQL+=" 					INNER JOIN tbm_detMovInv AS c6 ON a1.co_emp=c6.co_emp AND a1.co_loc=c6.co_loc AND a1.co_tipDoc=c6.co_tipDoc AND a1.co_doc=c6.co_doc";
                        strSQL+="					INNER JOIN tbm_inv AS a7 ON c6.co_emp=a7.co_emp AND c6.co_itm=a7.co_itm";
                        strSQL+=" 					)";
                        strSQL+="					INNER JOIN tbm_cabTipdoc AS a2 ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                        strSQL+=" 					WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="" + strAux + "";//AND a1.fe_doc BETWEEN '2014-10-01' AND '2014-12-31'
                        strSQL+="					AND a1.st_reg NOT IN('E','I') AND a1.co_tipDoc IN (" + getTipDocCnfPrg() + ")";
                        strSQL+="					AND b1.ne_tipforPag NOT IN(1,4) /*Crédito*/";
                        strSQL+="					GROUP BY a1.co_emp, a1.co_cli, a1.tx_nomCli, a1.nd_sub, a1.nd_valIva";
                        strSQL+="					, a1.co_loc, a1.co_tipDoc, a1.co_doc";
                        strSQL+="					ORDER BY a1.co_cli";
                        strSQL+="				) AS a1";
                        strSQL+="				GROUP BY a1.co_emp, a1.co_cli, a1.tx_nomCli";
                        strSQL+="				ORDER BY a1.co_cli";
                        strSQL+="			) AS y";
                        strSQL+="			GROUP BY y.co_emp, y.co_cli, y.ne_subCreMax01_30, y.ne_ivaCreMax01_30, y.ne_subCreMax31_60";
                        strSQL+="			, y.ne_ivaCreMax31_60, y.ne_subCreMaxMas60, y.ne_ivaCreMaxMas60";
                        strSQL+="			ORDER BY y.co_cli";
                        strSQL+="		) AS e1";
                        strSQL+="		GROUP BY e1.co_emp, e1.co_cli";
                        strSQL+="		ORDER BY e1.co_emp, e1.co_cli";
                        strSQL+="	) AS d4";
                        strSQL+="	ON d1.co_emp=d4.co_emp AND d1.co_cli=d4.co_cli";
                        strSQL+=" 	GROUP BY d1.co_emp, d1.co_cli";
                        strSQL+=" 	, d3.ne_subConMax00, d3.ne_ivaConMax00, d4.ne_subCreMax01_30, d4.ne_ivaCreMax01_30";
                        strSQL+=" 	, d4.ne_subCreMax31_60, d4.ne_ivaCreMax31_60, d4.ne_subCreMaxMas60, d4.ne_ivaCreMaxMas60";
                        strSQL+=" 	ORDER BY d1.co_cli";
                        strSQL+=" ) AS d1";
                        System.out.println("6to. SQL : " + strSQL);
                        rst=stm.executeQuery(strSQL);
                        if(rst.next()){
                            objTblModMorCarCreOtoPer.setValueAt(rst.getObject("ne_subCreMax01_30"), 0, INT_TBL_DAT_DOS_MCC_MON_PER);
                            objTblModMorCarCreOtoPer.setValueAt(rst.getObject("ne_subCreMax31_60"), 1, INT_TBL_DAT_DOS_MCC_MON_PER);
                            objTblModMorCarCreOtoPer.setValueAt(rst.getObject("ne_subCreMaxMas60"), 2, INT_TBL_DAT_DOS_MCC_MON_PER);
                            
                            bdePerSubCreMax01_30=new BigDecimal(rst.getObject("ne_subCreMax01_30")==null?"0":(rst.getString("ne_subCreMax01_30").equals("")?"0":rst.getString("ne_subCreMax01_30")));
                            bdePerSubCreMax31_60=new BigDecimal(rst.getObject("ne_subCreMax31_60")==null?"0":(rst.getString("ne_subCreMax31_60").equals("")?"0":rst.getString("ne_subCreMax31_60")));
                            bdePerSubCreMaxMas60=new BigDecimal(rst.getObject("ne_subCreMaxMas60")==null?"0":(rst.getString("ne_subCreMaxMas60").equals("")?"0":rst.getString("ne_subCreMaxMas60")));
                            
                        }
                        
                        //--MOROSIDAD ACUMULADA A LA FECHA     -- FALTA AGREGARLE LO DEL PERIODO PORQUE SOLO SON LOS SALDOS QUE AUN NOS DEBEN NO DEL PERIODO SINO ANTES AL PERIODO
                        
                        vecDat.clear();
                        //registro 1
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_TRE_LIN,             "");
                        vecReg.add(INT_TBL_DAT_TRE_COD_EMP,         null);
                        vecReg.add(INT_TBL_DAT_TRE_MAF_PLA_PRO,     "Hasta 30 días: ");
                        vecReg.add(INT_TBL_DAT_TRE_MAF_NUM_CLI_FEC, null);
                        vecReg.add(INT_TBL_DAT_TRE_MAF_SAL_FEC_PRE, null);                        
                        vecDat.add(vecReg);
                        //registro 2
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_TRE_LIN,             "");
                        vecReg.add(INT_TBL_DAT_TRE_COD_EMP,         null);
                        vecReg.add(INT_TBL_DAT_TRE_MAF_PLA_PRO,     "De 31 a 60 días: ");
                        vecReg.add(INT_TBL_DAT_TRE_MAF_NUM_CLI_FEC, null);
                        vecReg.add(INT_TBL_DAT_TRE_MAF_SAL_FEC_PRE, null);                        
                        vecDat.add(vecReg);
                        //registro 3
                        vecReg=new Vector();
                        vecReg.add(INT_TBL_DAT_TRE_LIN,             "");
                        vecReg.add(INT_TBL_DAT_TRE_COD_EMP,         null);
                        vecReg.add(INT_TBL_DAT_TRE_MAF_PLA_PRO,     "Más de 60 días: ");
                        vecReg.add(INT_TBL_DAT_TRE_MAF_NUM_CLI_FEC, null);
                        vecReg.add(INT_TBL_DAT_TRE_MAF_SAL_FEC_PRE, null);                        
                        vecDat.add(vecReg);
                        
                        //Asignar vectores al modelo.
                        objTblModMorAcuFec.setData(vecDat);
                        tblDatMorAcuFec.setModel(objTblModMorAcuFec);
                        vecDat.clear();                       
                        
                        //-- F - Saldo a la fecha de presentación US$
                        strSQL="";
                        strSQL+="SELECT 0 AS ne_valCon00, ABS(SUM(a1.valPen)) AS ne_valPnd, ABS(SUM(a1.valPorVen)) AS ne_valPorVen, ABS(SUM(a1.val_1_30)) AS ne_valCre01_30";
                        strSQL+=" , ABS(SUM(a1.val_31_60)) AS ne_valCre31_60, ABS(SUM(a1.val_61_90 + a1.val_mas_90)) AS ne_valCre61Mas FROM(";
                        strSQL+="	SELECT x.co_emp, x.co_cli, x.tx_nomcli, sum(x.valpen) AS valpen, sum(x.valporven) AS valporven, sum(x.val_1_30) AS val_1_30";
                        strSQL+=" 	,  sum(x.val_31_60) AS val_31_60, sum(x.val_61_90) AS val_61_90, sum(x.val_mas_90) AS val_mas_90";
                        strSQL+=" 	FROM (";
                        strSQL+=" 		SELECT CASE WHEN dias < 0 THEN valpen ELSE 0 END AS valporven, CASE WHEN dias BETWEEN 0 AND 30 THEN valpen ELSE 0 END AS val_1_30";
                        strSQL+=" 		, CASE WHEN dias BETWEEN 31 AND 60 THEN valpen ELSE 0 END AS val_31_60, CASE WHEN dias BETWEEN 61 AND 90 THEN valpen ELSE 0 END AS val_61_90";
                        strSQL+=" 		, CASE WHEN dias  > 90 THEN valpen ELSE 0 END AS val_mas_90, *";
                        strSQL+=" 		FROM (";
                        strSQL+=" 			SELECT * ,( mo_pag+ sumabodet) AS valpen";
                        strSQL+=" 			FROM (";
                        strSQL+=" 				SELECT x.* , CASE WHEN x1.sumabodet IS NULL THEN 0 ELSE x1.sumabodet END AS sumabodet FROM (";
                        strSQL+=" 					SELECT cli.tx_ide, a1.co_banchq";
                        strSQL+=" 					, a3.tx_deslar as nomban, a1.tx_numctachq, a1.tx_numchq, a1.fe_recchq, a1.fe_venchq, a1.nd_monchq, a.co_emp, a.co_loc, a.co_cli, a.tx_nomcli";
                        strSQL+=" 					, a.co_tipdoc, a2.tx_descor, a2.tx_deslar,  a.co_doc, a1.co_reg, a.ne_numdoc, a.fe_doc, a1.ne_diacre, a1.fe_ven, a1.nd_porret, a1.mo_pag";
                        strSQL+=" 					,  (" + strAuxFecFinCor + " - a1.fe_ven ) AS dias";
                        strSQL+="					FROM tbm_cabmovinv as a INNER JOIN tbm_pagmovinv as a1";
                        strSQL+=" 					ON (a1.co_emp=a.co_emp AND a1.co_loc=a.co_loc AND a1.co_tipdoc=a.co_tipdoc AND a1.co_doc=a.co_doc )";
                        strSQL+=" 					INNER JOIN tbm_cabtipdoc AS a2 ON (a2.co_emp=a.co_emp AND a2.co_loc=a.co_loc AND a2.co_tipdoc=a.co_tipdoc )";
                        strSQL+=" 					INNER JOIN tbm_cli AS cli ON (cli.co_emp=a.co_emp AND cli.co_cli=a.co_cli )";
                        strSQL+=" 					LEFT OUTER JOIN tbm_var AS a3 ON (a3.co_reg=a1.co_banchq )";
                        strSQL+=" 					WHERE a.st_reg NOT IN ('E','I')  AND a1.st_reg IN ('A','C')";
                        strSQL+=" 					AND (a.fe_doc <=" + strAuxFecFinCor + " AND (a.fe_doc NOT BETWEEN " + strAuxFecIniCor + " AND " + strAuxFecFinCor + ") )";
                        strSQL+=" 					AND (cli.co_empGrp IS NULL OR a2.co_cat IN (3, 4) AND cli.co_empGrp IS NOT NULL)";
                        strSQL+=" 					AND (   a1.mo_pag > 0   OR a1.mo_pag < 0   )    AND a.co_emp = " + objParSis.getCodigoEmpresa() + "  AND a.co_tipDoc IN (" + getTipDocCnfPrg() + ")";
                        strSQL+="				) AS x  LEFT OUTER JOIN (";
                        strSQL+=" 					SELECT x1.co_emp, x1.co_locpag, x1.co_tipdocpag, x1.co_docpag, x1.co_regpag, sum(x1.nd_abo) AS sumabodet";
                        strSQL+=" 					FROM tbm_detpag AS x1   INNER JOIN tbm_cabpag AS x2";
                        strSQL+="					ON (x1.co_emp=x2.co_emp AND x1.co_loc=x2.co_loc AND x1.co_tipdoc=x2.co_tipdoc AND x1.co_doc=x2.co_doc)";
                        strSQL+=" 					WHERE x2.st_reg NOT IN ('E','I')   AND  x1.st_reg NOT IN ('E','I')";
                        strSQL+=" 					AND x2.fe_doc <= " + strAuxFecFinCor + "";
                        strSQL+=" 					GROUP BY x1.co_emp, x1.co_locpag, x1.co_tipdocpag, x1.co_docpag, x1.co_regpag";
                        strSQL+=" 				) AS x1";
                        strSQL+=" 				ON (x.co_emp=x1.co_emp AND x.co_loc=x1.co_locpag AND x.co_tipdoc=x1.co_tipdocpag AND x.co_doc=x1.co_docpag AND x.co_reg=x1.co_regpag )";
                        strSQL+=" 			) AS x";
                        strSQL+=" 			WHERE (mo_pag + sumabodet) != 0";
                        strSQL+=" 			ORDER BY tx_nomcli, fe_ven";
                        strSQL+=" 		) AS x";
                        strSQL+=" 	) AS x";
                        strSQL+=" 	GROUP BY x.co_emp, x.co_cli, x.tx_nomcli";
                        strSQL+=" 	ORDER BY x.co_cli";
                        strSQL+=" ) AS a1";
                        System.out.println("7mo. SQL : " + strSQL);
                        rst=stm.executeQuery(strSQL);
                        if(rst.next()){                            
                            bdeAcuSubCreMax01_30=new BigDecimal(rst.getObject("ne_valCre01_30")==null?"0":(rst.getString("ne_valCre01_30").equals("")?"0":rst.getString("ne_valCre01_30")));
                            bdeAcuSubCreMax31_60=new BigDecimal(rst.getObject("ne_valCre31_60")==null?"0":(rst.getString("ne_valCre31_60").equals("")?"0":rst.getString("ne_valCre31_60")));
                            bdeAcuSubCreMaxMas60=new BigDecimal(rst.getObject("ne_valCre61Mas")==null?"0":(rst.getString("ne_valCre61Mas").equals("")?"0":rst.getString("ne_valCre61Mas")));
                        }
                        
                    
                        objTblModMorAcuFec.setValueAt( (bdePerSubCreMax01_30.add(bdeAcuSubCreMax01_30)), 0, INT_TBL_DAT_TRE_MAF_SAL_FEC_PRE);
                        objTblModMorAcuFec.setValueAt( (bdePerSubCreMax31_60.add(bdeAcuSubCreMax31_60)), 1, INT_TBL_DAT_TRE_MAF_SAL_FEC_PRE);
                        objTblModMorAcuFec.setValueAt( (bdePerSubCreMaxMas60.add(bdeAcuSubCreMaxMas60)), 2, INT_TBL_DAT_TRE_MAF_SAL_FEC_PRE);
                        
                        //-- F - No. Clientes a la fecha
                        strSQL="";
                        strSQL+="SELECT SUM(a1.co_cli01_30) AS co_cli01_30, SUM(a1.co_cli31_60) AS co_cli31_60, SUM(a1.co_cli60Mas) AS co_cli60Mas FROM(";
                        strSQL+="	SELECT x.co_emp, x.co_cli, CASE WHEN x.co_cli01_30 <> 0 THEN 1 ELSE 0 END AS co_cli01_30, CASE WHEN x.co_cli31_60 <> 0 THEN 1 ELSE 0 END AS co_cli31_60";
                        strSQL+=" 	, CASE WHEN x.co_cli60Mas <> 0 THEN 1 ELSE 0 END AS co_cli60Mas FROM(";
                        strSQL+=" 		SELECT x.co_emp, x.co_cli, x.tx_nomCli, SUM(x.co_cli01_30) AS co_cli01_30, SUM(x.co_cli31_60) AS co_cli31_60, SUM(x.co_cli60Mas) AS co_cli60Mas FROM(";
                        strSQL+=" 			SELECT x.co_emp, x.co_cli, x.tx_nomCli";
                        strSQL+=" 			,CASE WHEN dias BETWEEN 0 AND 30  THEN 1 ELSE 0 END AS co_cli01_30";
                        strSQL+=" 			, CASE WHEN dias BETWEEN 31 AND 60 THEN 1 ELSE 0 END AS co_cli31_60";
                        strSQL+=" 			, CASE WHEN dias > 60 		THEN 1 ELSE 0 END AS co_cli60Mas";
                        strSQL+=" 			FROM (";
                        strSQL+=" 				SELECT * ,( mo_pag+ sumabodet) AS valpen";
                        strSQL+=" 				FROM (";
                        strSQL+=" 					SELECT x.* , CASE WHEN x1.sumabodet IS NULL THEN 0 ELSE x1.sumabodet END AS sumabodet FROM (";
                        strSQL+=" 						SELECT cli.tx_ide, a1.co_banchq";
                        strSQL+=" 						, a3.tx_deslar as nomban, a1.tx_numctachq, a1.tx_numchq, a1.fe_recchq, a1.fe_venchq, a1.nd_monchq, a.co_emp, a.co_loc, a.co_cli, a.tx_nomcli";
                        strSQL+="						, a.co_tipdoc, a2.tx_descor, a2.tx_deslar,  a.co_doc, a1.co_reg, a.ne_numdoc, a.fe_doc, a1.ne_diacre, a1.fe_ven, a1.nd_porret, a1.mo_pag";
                        strSQL+="						,  (" + strAuxFecFinCor + " - a1.fe_ven ) AS dias ";
                        strSQL+="						FROM tbm_cabmovinv as a INNER JOIN tbm_pagmovinv as a1";
                        strSQL+=" 						ON (a1.co_emp=a.co_emp AND a1.co_loc=a.co_loc AND a1.co_tipdoc=a.co_tipdoc AND a1.co_doc=a.co_doc )";
                        strSQL+=" 						INNER JOIN tbm_cabtipdoc AS a2 ON (a2.co_emp=a.co_emp AND a2.co_loc=a.co_loc AND a2.co_tipdoc=a.co_tipdoc )";
                        strSQL+=" 						INNER JOIN tbm_cli AS cli ON (cli.co_emp=a.co_emp AND cli.co_cli=a.co_cli )";
                        strSQL+=" 						LEFT OUTER JOIN tbm_var AS a3 ON (a3.co_reg=a1.co_banchq )";
                        strSQL+=" 						WHERE a.st_reg NOT IN ('E','I')  AND a1.st_reg IN ('A','C')";
                        strSQL+=" 						AND (a.fe_doc <=" + strAuxFecFinCor + " AND (a.fe_doc NOT BETWEEN " + strAuxFecIniCor + " AND " + strAuxFecFinCor + ") )";
                        strSQL+=" 						AND (cli.co_empGrp IS NULL OR a2.co_cat IN (3, 4) AND cli.co_empGrp IS NOT NULL)";
                        strSQL+="						AND (   a1.mo_pag > 0   OR a1.mo_pag < 0   )";
                        strSQL+=" 						AND a.co_emp = " + objParSis.getCodigoEmpresa() + "  AND a.co_tipDoc IN (" + getTipDocCnfPrg() + ")";
                        strSQL+="					) as x  LEFT OUTER JOIN (";
                        strSQL+=" 						SELECT x1.co_emp, x1.co_locpag, x1.co_tipdocpag, x1.co_docpag, x1.co_regpag, sum(x1.nd_abo) AS sumabodet";
                        strSQL+=" 						FROM tbm_detpag AS x1   INNER JOIN tbm_cabpag AS x2";
                        strSQL+="						ON (x1.co_emp=x2.co_emp AND x1.co_loc=x2.co_loc AND x1.co_tipdoc=x2.co_tipdoc AND x1.co_doc=x2.co_doc)";
                        strSQL+="						WHERE x2.st_reg NOT IN ('E','I')   AND  x1.st_reg NOT IN ('E','I')";
                        strSQL+=" 						AND x2.fe_doc <=" + strAuxFecFinCor + "";
                        strSQL+=" 						GROUP BY x1.co_emp, x1.co_locpag, x1.co_tipdocpag, x1.co_docpag, x1.co_regpag";
                        strSQL+=" 					) AS x1";
                        strSQL+=" 					ON (x.co_emp=x1.co_emp AND x.co_loc=x1.co_locpag AND x.co_tipdoc=x1.co_tipdocpag AND x.co_doc=x1.co_docpag AND x.co_reg=x1.co_regpag )";
                        strSQL+=" 				) as x";
                        strSQL+=" 				WHERE (mo_pag + sumabodet) != 0";
                        strSQL+=" 				ORDER BY tx_nomcli, fe_ven";
                        strSQL+=" 			) AS x";
                        strSQL+=" 			GROUP BY x.co_emp, x.co_cli, x.tx_nomCli, x.dias";
                        strSQL+=" 		) AS x";
                        strSQL+="		GROUP BY x.co_emp, x.co_cli, x.tx_nomCli";
                        strSQL+="		ORDER BY x.co_emp, x.co_cli";
                        strSQL+="	) AS x";
                        strSQL+=" 	GROUP BY x.co_emp, x.co_cli, x.co_cli01_30, x.co_cli31_60, x.co_cli60Mas";
                        strSQL+=" 	ORDER BY x.co_emp, x.co_cli";
                        strSQL+=" ) AS a1";
                        System.out.println("8vo. SQL : " + strSQL);
                        rst=stm.executeQuery(strSQL);
                        if(rst.next()){                            
                            bdeAcuNumCreMax01_30=new BigDecimal(rst.getObject("co_cli01_30")==null?"0":(rst.getString("co_cli01_30").equals("")?"0":rst.getString("co_cli01_30")));
                            bdeAcuNumCreMax31_60=new BigDecimal(rst.getObject("co_cli31_60")==null?"0":(rst.getString("co_cli31_60").equals("")?"0":rst.getString("co_cli31_60")));
                            bdeAcuNumCreMaxMas60=new BigDecimal(rst.getObject("co_cli60Mas")==null?"0":(rst.getString("co_cli60Mas").equals("")?"0":rst.getString("co_cli60Mas")));
                                    
                            objTblModMorAcuFec.setValueAt( (bdePerNumCreMax01_30.add(bdeAcuNumCreMax01_30)), 0, INT_TBL_DAT_TRE_MAF_NUM_CLI_FEC);
                            objTblModMorAcuFec.setValueAt( (bdePerNumCreMax31_60.add(bdeAcuNumCreMax31_60)), 1, INT_TBL_DAT_TRE_MAF_NUM_CLI_FEC);
                            objTblModMorAcuFec.setValueAt( (bdePerNumCreMaxMas60.add(bdeAcuNumCreMaxMas60)), 2, INT_TBL_DAT_TRE_MAF_NUM_CLI_FEC);                                                        
                        }
                        
                        //G - DATOS DEL CREDITO DEL PERIODO
                        //No. Total de clientes con operaciones de credito activas a la fecha - B - credito
                        objTblModCrePer.setValueAt( (bdePerNumCreMax01_30.add(bdeAcuNumCreMax01_30).add(bdePerNumCreMax31_60).add(bdeAcuNumCreMax31_60).add(bdePerNumCreMaxMas60).add(bdeAcuNumCreMaxMas60)), 0, INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU_CRE);
                        
                        
                        //No. Total de operaciones de credito activas a la fecha
                        strSQL="";
                        strSQL+=" SELECT COUNT(x.transaccionesCredito) AS transaccionesCredito";
                        strSQL+=" FROM(";
                        strSQL+="	(";
                        strSQL+=" 	SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc";
                        strSQL+="        , CASE WHEN b1.ne_tipforPag NOT IN(1,4) THEN (a1.co_doc) END AS transaccionesCredito";
                        strSQL+=" 	FROM (   ( tbm_cabMovInv AS a1";
                        strSQL+=" 		   LEFT OUTER JOIN (tbm_cabForPag AS b1 LEFT OUTER JOIN tbm_detForPag AS b2 ON b1.co_emp=b2.co_emp AND b1.co_forPag=b2.co_forPag)";
                        strSQL+=" 		   ON a1.co_emp=b1.co_emp AND a1.co_forPag=b1.co_forPag";
                        strSQL+=" 		 )";
                        strSQL+=" 		INNER JOIN tbm_detMovInv AS c6";
                        strSQL+=" 		ON a1.co_emp=c6.co_emp AND a1.co_loc=c6.co_loc AND a1.co_tipDoc=c6.co_tipDoc AND a1.co_doc=c6.co_doc";
                        strSQL+=" 		INNER JOIN tbm_inv AS a7";
                        strSQL+=" 		ON c6.co_emp=a7.co_emp AND c6.co_itm=a7.co_itm";
                        strSQL+=" 	    )";
                        strSQL+=" 	INNER JOIN tbm_cabTipdoc AS a2";
                        strSQL+=" 	ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                        strSQL+=" 	WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + "";
                        strSQL+="" + strAux + "";//AND a1.fe_doc BETWEEN '2014-10-01' AND '2014-12-31'  
                        strSQL+=" 	AND a1.st_reg NOT IN('E','I')";
                        strSQL+=" 	AND a1.co_tipDoc IN (" + getTipDocCnfPrg() + ")";
                        strSQL+=" 	GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc, a1.nd_valIva, a1.nd_sub, b1.ne_tipforpag";
                        strSQL+=" 	ORDER BY a1.ne_numDoc";
                        strSQL+=" 	)";
                        strSQL+=" 	UNION";
                        strSQL+=" 	(";
                        strSQL+="	SELECT x.co_emp, x.co_loc, x.co_tipDoc, x.co_doc, x.ne_numDoc,  ( x.mo_pag + x.sumabodet) AS nd_valpen";
                        strSQL+=" 	FROM (";
                        strSQL+=" 		SELECT x.* , CASE WHEN x1.sumabodet IS NULL THEN 0 ELSE x1.sumabodet END AS sumabodet FROM (";
                        strSQL+=" 			SELECT cli.tx_ide, a1.co_banchq";
                        strSQL+=" 			, a3.tx_deslar as nomban, a1.tx_numctachq, a1.tx_numchq, a1.fe_recchq, a1.fe_venchq, a1.nd_monchq, a.co_emp, a.co_loc, a.co_cli, a.tx_nomcli";
                        strSQL+=" 			, a.co_tipdoc, a2.tx_descor, a2.tx_deslar,  a.co_doc, a1.co_reg, a.ne_numdoc, a.fe_doc, a1.ne_diacre, a1.fe_ven, a1.nd_porret, a1.mo_pag";
                        strSQL+=" 			,  (" + strAuxFecFinCor + " - a1.fe_ven ) AS dias";
                        strSQL+=" 			FROM tbm_cabmovinv as a INNER JOIN tbm_pagmovinv as a1";
                        strSQL+=" 			ON (a1.co_emp=a.co_emp AND a1.co_loc=a.co_loc AND a1.co_tipdoc=a.co_tipdoc AND a1.co_doc=a.co_doc )";
                        strSQL+=" 			INNER JOIN tbm_cabtipdoc AS a2 ON (a2.co_emp=a.co_emp AND a2.co_loc=a.co_loc AND a2.co_tipdoc=a.co_tipdoc )";
                        strSQL+=" 			INNER JOIN tbm_cli AS cli ON (cli.co_emp=a.co_emp AND cli.co_cli=a.co_cli )";
                        strSQL+=" 			LEFT OUTER JOIN tbm_var AS a3 ON (a3.co_reg=a1.co_banchq )";
                        strSQL+=" 			WHERE a.st_reg NOT IN ('E','I')  AND a1.st_reg IN ('A','C')";
                        strSQL+=" 			AND (a.fe_doc <=" + strAuxFecFinCor + " AND (a.fe_doc NOT BETWEEN " + strAuxFecIniCor + " AND " + strAuxFecFinCor + ") )";
                        strSQL+=" 			AND (cli.co_empGrp IS NULL OR a2.co_cat IN (3, 4) AND cli.co_empGrp IS NOT NULL)";
                        strSQL+="			AND (   a1.mo_pag > 0   OR a1.mo_pag < 0   )    AND a.co_emp=" + objParSis.getCodigoEmpresa() + "  AND a.co_tipDoc IN (" + getTipDocCnfPrg() + ")";
                        strSQL+=" 		) as x  LEFT OUTER JOIN (";
                        strSQL+=" 			SELECT x1.co_emp, x1.co_locpag, x1.co_tipdocpag, x1.co_docpag, x1.co_regpag, sum(x1.nd_abo) AS sumabodet";
                        strSQL+="			FROM tbm_detpag AS x1   INNER JOIN tbm_cabpag AS x2";
                        strSQL+="			ON (x1.co_emp=x2.co_emp AND x1.co_loc=x2.co_loc AND x1.co_tipdoc=x2.co_tipdoc AND x1.co_doc=x2.co_doc)";
                        strSQL+="			WHERE x2.st_reg NOT IN ('E','I')   AND  x1.st_reg NOT IN ('E','I')";
                        strSQL+=" 			AND x2.fe_doc <=" + strAuxFecFinCor + "";
                        strSQL+=" 			GROUP BY x1.co_emp, x1.co_locpag, x1.co_tipdocpag, x1.co_docpag, x1.co_regpag";
                        strSQL+=" 		) AS x1";
                        strSQL+=" 		ON (x.co_emp=x1.co_emp AND x.co_loc=x1.co_locpag AND x.co_tipdoc=x1.co_tipdocpag AND x.co_doc=x1.co_docpag AND x.co_reg=x1.co_regpag )";
                        strSQL+="	) AS x";
                        strSQL+="	WHERE (x.mo_pag + x.sumabodet) != 0";
                        strSQL+="	ORDER BY x.tx_nomcli, x.fe_ven";
                        strSQL+="	)";
                        strSQL+="	ORDER BY co_emp, co_loc, co_tipDoc, co_doc";
                        strSQL+=") AS x";
                        System.out.println("9no. SQL : " + strSQL);
                        rst=stm.executeQuery(strSQL);
                        if(rst.next()){
                            objTblModCrePer.setValueAt(rst.getObject("transaccionesCredito"), 1, INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU_CRE);
                        }
                        
                        //Plazo máximo CxC(Dias)
                        strSQL="";
                        strSQL+="SELECT z.ne_proDiaCon, ne_proDiaCre FROM(";
                        strSQL+="	SELECT SUM(y.ne_diaCon) AS ne_diaCon, SUM(y.ne_diaCre) AS ne_diaCre";
                        strSQL+="	, COUNT(y.ne_diaCon) AS ne_cntDiaCon, COUNT(y.ne_diaCre) AS ne_cntDiaCre";
                        strSQL+=" 	, (SUM(CAST(y.ne_diaCon AS NUMERIC(6,2) )) / COUNT(CAST(y.ne_diaCon AS NUMERIC(6,2))) )  AS ne_proDiaCon";
                        strSQL+=" 	, (SUM(CAST(y.ne_diaCre AS NUMERIC(6,2) )) / COUNT(CAST(y.ne_diaCre AS NUMERIC(6,2))) ) AS ne_proDiaCre";
                        strSQL+="	FROM(";
                        strSQL+="		SELECT a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc, a1.co_cli, a1.tx_nomCli";
                        strSQL+="		       , CASE WHEN b1.ne_tipforPag IN(1,4) THEN MAX(b2.ne_diaCre) END AS ne_diaCon";
                        strSQL+="		       , CASE WHEN b1.ne_tipforPag NOT IN(1,4) THEN MAX(b2.ne_diaCre) END AS ne_diaCre";
                        strSQL+="		       , MAX(b2.ne_diaCre) AS ne_diaCreMax";
                        strSQL+="		       FROM (   (tbm_cabMovInv AS a1";
                        strSQL+="				   LEFT OUTER JOIN (tbm_cabForPag AS b1 LEFT OUTER JOIN tbm_detForPag AS b2 ON b1.co_emp=b2.co_emp AND b1.co_forPag=b2.co_forPag)";
                        strSQL+="				   ON a1.co_emp=b1.co_emp AND a1.co_forPag=b1.co_forPag";
                        strSQL+="				)";
                        strSQL+="		       INNER JOIN tbm_detMovInv AS c6";
                        strSQL+="		       ON a1.co_emp=c6.co_emp AND a1.co_loc=c6.co_loc AND a1.co_tipDoc=c6.co_tipDoc AND a1.co_doc=c6.co_doc";
                        strSQL+="		       INNER JOIN tbm_inv AS a7";
                        strSQL+="		       ON c6.co_emp=a7.co_emp AND c6.co_itm=a7.co_itm";
                        strSQL+="		    )";
                        strSQL+="		INNER JOIN tbm_cabTipdoc AS a2";
                        strSQL+="		ON a1.co_emp=a2.co_emp AND a1.co_loc=a2.co_loc AND a1.co_tipDoc=a2.co_tipDoc";
                        strSQL+=" 		WHERE a1.co_emp=" + objParSis.getCodigoEmpresa() + " AND a1.fe_doc <=" + strAuxFecFinCor + "";
                        strSQL+="		AND a1.st_reg NOT IN('E','I')";
                        strSQL+=" 		AND a1.co_tipDoc IN (" + getTipDocCnfPrg() + ")";
                        strSQL+="		GROUP BY a1.co_emp, a1.co_loc, a1.co_tipDoc, a1.co_doc, a1.ne_numDoc, a1.nd_valIva, a1.nd_sub, b1.ne_tipforPag";
                        strSQL+="		, a1.co_cli, a1.tx_nomCli";
                        strSQL+="		ORDER BY a1.co_cli";
                        strSQL+="	) AS y";
                        strSQL+=") AS z";
                        System.out.println("10mo. SQL : " + strSQL);
                        rst=stm.executeQuery(strSQL);
                        if(rst.next()){
                            objTblModCrePer.setValueAt(rst.getObject("ne_proDiaCre"), 2, INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU_CRE);
                        }                        
                        
                        //Valor total cuentas por cobrar a la fecha(ventas a credito)
                        objTblModCrePer.setValueAt( (bdePerSubCreMax01_30.add(bdeAcuSubCreMax01_30).add(bdePerSubCreMax31_60).add(bdeAcuSubCreMax31_60).add(bdePerSubCreMaxMas60).add(bdeAcuSubCreMaxMas60)), 3, INT_TBL_DAT_UNO_CRE_PER_COS_NOM_ANU_CRE);                        

                        
                        
                        
                        rst.close();
                        rst=null;
                        stm.close();
                        stm=null;
                    }
                break;
                case 1:
                    break;
                case 2:
                    break;
            }
            
//            objTblTotCrePer.calcularTotales();son cosas diferentes por eso comento la fila de totales, clientes, operaciones, etc, no son lo mismo
            objTblTotMorCarCreOtoPer.calcularTotales();
            objTblTotMorAcuFec.calcularTotales();
            
            
            
            
            pgrSis.setValue(0);
            butCon.setText("Consultar");
            lblMsgSis.setText("Se encontraron registros");


        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
            
    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(con!=null){
                if(cargarRegDatCre()){
                    
                }
                con.close();
                con=null;
            }            
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }



    private String getTipDocCnfPrg(){
        boolean blnRes=true;
        Connection conTipDocCnfPrg;
        Statement stmTipDocCnfPrg;
        ResultSet rstTipDocCnfPrg;
        String strTipDocCnfPrg="";
        try{
            conTipDocCnfPrg=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if(conTipDocCnfPrg!=null){
                stmTipDocCnfPrg=conTipDocCnfPrg.createStatement();
                strTipDocCnfPrg="";
                strTipDocCnfPrg+="SELECT co_tipDoc FROM tbr_tipDocPrg WHERE co_emp=" + objParSis.getCodigoEmpresa() + "";
                strTipDocCnfPrg+=" AND co_mnu=" + objParSis.getCodigoMenu() + "";
                rstTipDocCnfPrg=stmTipDocCnfPrg.executeQuery(strTipDocCnfPrg);
                strTipDocCnfPrg="";
                for(int i=0; rstTipDocCnfPrg.next(); i++){
                    if(i==0)
                        strTipDocCnfPrg="" + rstTipDocCnfPrg.getString("co_tipDoc");
                    else
                        strTipDocCnfPrg+=", " + rstTipDocCnfPrg.getString("co_tipDoc");
                }
                conTipDocCnfPrg.close();
                conTipDocCnfPrg=null;
                stmTipDocCnfPrg.close();
                stmTipDocCnfPrg=null;
                rstTipDocCnfPrg.close();
                rstTipDocCnfPrg=null;
            }
            
        }
        catch(java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch(Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return strTipDocCnfPrg;
    }




    
}