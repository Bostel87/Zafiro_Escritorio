/*
 * ZafVeh02.java
 *
 * Created on Agosto 1, 2013, 11:47 PM
 */
package Vehiculos.ZafVeh02;
import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafTblUti.ZafTblBus.ZafTblBus;
import Librerias.ZafTblUti.ZafTblCelRenLbl.ZafTblCelRenLbl;
import Librerias.ZafTblUti.ZafTblFilCab.ZafTblFilCab;
import Librerias.ZafTblUti.ZafTblMod.ZafTblMod;
import Librerias.ZafTblUti.ZafTblOrd.ZafTblOrd;
import Librerias.ZafTblUti.ZafTblPopMnu.ZafTblPopMnu;
import Librerias.ZafToolBar.ZafToolBar;
import Librerias.ZafUtil.ZafUtil;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.Vector;
import Librerias.ZafTblUti.ZafTblCelRenBut.ZafTblCelRenBut;
import Librerias.ZafTblUti.ZafTblCelEdiButDlg.ZafTblCelEdiButDlg;
import Librerias.ZafTblUti.ZafTblCelEdiTxt.ZafTblCelEdiTxt;
import Librerias.ZafVenCon.ZafVenCon;
import java.util.ArrayList;

/**
 *
 * @author  José Marín
 */
public class ZafVeh02 extends javax.swing.JInternalFrame {
    
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private MiToolBar objTooBar;
    private String strAux;
    private boolean blnHayCam;
    private ZafDocLis objDocLis;
    private Connection con, conCab;
    private Statement stm, stmCab;
    private ResultSet rst, rstCab;
    private String strSQL;
    private java.util.Date datFecAux;
    
    private String strDesCorPai, strDesLarPai;
    private String strVehiculo;
    private String strChoCod;
    private String strChoNom;
    private String strMarCod;
    private String strMarNom;
    private String strPlacas;
    
    private ZafVenCon vcoPai;
    private ZafVenCon vcoCho;//j
    private ZafVenCon vcoVeh;//j
    private ZafVenCon vcoMar;//j
    

    /** Creates new form ZafMae03 */
    public ZafVeh02(ZafParSis obj) {
        try{
            objParSis=(ZafParSis)obj.clone();
            initComponents();
            configurarFrm();
            agregarDocLis();
        }
        catch (CloneNotSupportedException e){
            this.setTitle(this.getTitle() + " [ERROR]");
        }
    }

//    /** This method is called from within the constructor to
//     * initialize the form.
//     * WARNING: Do NOT modify this code. The content of this method is
//     * always regenerated by the Form Editor.
//     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpTipo = new javax.swing.ButtonGroup();
        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        panBar = new javax.swing.JPanel();
        tabFrm = new javax.swing.JTabbedPane();
        panFil = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtCodVeh = new javax.swing.JTextField();
        txtDesLarVeh = new javax.swing.JTextField();
        lblObs1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblObs3 = new javax.swing.JLabel();
        spnObs1 = new javax.swing.JScrollPane();
        txaObs = new javax.swing.JTextArea();
        txtPlaca = new javax.swing.JTextField();
        lblMarca = new javax.swing.JLabel();
        txtCodMar = new javax.swing.JTextField();
        txtNomMar = new javax.swing.JTextField();
        butMar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        optCarro = new javax.swing.JRadioButton();
        optMoto = new javax.swing.JRadioButton();
        optMontacarga = new javax.swing.JRadioButton();
        optOtro = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        txtPeso = new javax.swing.JTextField();
        txtTipCom = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        panFil1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtCodPro1 = new javax.swing.JTextField();
        txtDesLarPro1 = new javax.swing.JTextField();
        lblObs2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblObs4 = new javax.swing.JLabel();
        spnObs2 = new javax.swing.JScrollPane();
        txaObs2 = new javax.swing.JTextArea();
        txtDesCorPai1 = new javax.swing.JTextField();
        butPai1 = new javax.swing.JButton();
        lblMarca1 = new javax.swing.JLabel();
        txtCod1 = new javax.swing.JTextField();
        txtNom1 = new javax.swing.JTextField();
        butPrg1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        jRadioButton8 = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtTanque = new javax.swing.JTextField();
        butVeh = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        txtRendimiento = new javax.swing.JTextField();
        lblMarca2 = new javax.swing.JLabel();
        txtCodChofer = new javax.swing.JTextField();
        txtNomChofer = new javax.swing.JTextField();
        butChofer = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                exitForm(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("jLabel1");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panBar.setPreferredSize(new java.awt.Dimension(0, 70));
        panBar.setLayout(new java.awt.BorderLayout());
        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        panFil.setLayout(null);

        jLabel2.setText("Código:");
        panFil.add(jLabel2);
        jLabel2.setBounds(10, 8, 110, 15);
        panFil.add(txtCodVeh);
        txtCodVeh.setBounds(160, 6, 90, 19);
        panFil.add(txtDesLarVeh);
        txtDesLarVeh.setBounds(160, 46, 400, 19);

        lblObs1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblObs1.setText("Placa:");
        panFil.add(lblObs1);
        lblObs1.setBounds(10, 30, 100, 14);

        jLabel5.setText("Descripción larga:");
        panFil.add(jLabel5);
        jLabel5.setBounds(10, 50, 130, 15);

        lblObs3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblObs3.setText("Observación:");
        panFil.add(lblObs3);
        lblObs3.setBounds(10, 174, 100, 14);

        txaObs.setLineWrap(true);
        txaObs.setPreferredSize(new java.awt.Dimension(400, 15));
        spnObs1.setViewportView(txaObs);

        panFil.add(spnObs1);
        spnObs1.setBounds(160, 180, 403, 80);

        txtPlaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPlacaActionPerformed(evt);
            }
        });
        txtPlaca.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPlacaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPlacaFocusLost(evt);
            }
        });
        panFil.add(txtPlaca);
        txtPlaca.setBounds(160, 26, 90, 19);

        lblMarca.setText("Marca:");
        panFil.add(lblMarca);
        lblMarca.setBounds(10, 66, 39, 15);

        txtCodMar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodMarActionPerformed(evt);
            }
        });
        txtCodMar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodMarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodMarFocusLost(evt);
            }
        });
        panFil.add(txtCodMar);
        txtCodMar.setBounds(160, 66, 90, 19);

        txtNomMar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomMarActionPerformed(evt);
            }
        });
        txtNomMar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomMarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomMarFocusLost(evt);
            }
        });
        panFil.add(txtNomMar);
        txtNomMar.setBounds(250, 66, 310, 19);

        butMar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        butMar.setText("...");
        butMar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butMarActionPerformed(evt);
            }
        });
        panFil.add(butMar);
        butMar.setBounds(560, 66, 20, 20);

        jLabel1.setText("Tipo de vehiculo:");
        panFil.add(jLabel1);
        jLabel1.setBounds(10, 86, 120, 15);

        grpTipo.add(optCarro);
        optCarro.setSelected(true);
        optCarro.setText("Carro");
        panFil.add(optCarro);
        optCarro.setBounds(160, 90, 59, 23);

        grpTipo.add(optMoto);
        optMoto.setText("Moto");
        panFil.add(optMoto);
        optMoto.setBounds(250, 90, 60, 23);

        grpTipo.add(optMontacarga);
        optMontacarga.setText("Montacarga");
        panFil.add(optMontacarga);
        optMontacarga.setBounds(340, 90, 114, 23);

        grpTipo.add(optOtro);
        optOtro.setText("Otro");
        panFil.add(optOtro);
        optOtro.setBounds(490, 90, 70, 23);

        jLabel3.setText("Peso Soportado (Kg):");
        panFil.add(jLabel3);
        jLabel3.setBounds(10, 114, 130, 15);

        txtPeso.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPesoFocusLost(evt);
            }
        });
        panFil.add(txtPeso);
        txtPeso.setBounds(160, 114, 90, 19);

        txtTipCom.setEnabled(false);
        panFil.add(txtTipCom);
        txtTipCom.setBounds(400, 114, 160, 19);

        jLabel4.setText("Combustible:");
        panFil.add(jLabel4);
        jLabel4.setBounds(260, 114, 100, 15);

        panFil1.setLayout(null);

        jLabel6.setText("Código:");
        panFil1.add(jLabel6);
        jLabel6.setBounds(10, 8, 110, 15);
        panFil1.add(txtCodPro1);
        txtCodPro1.setBounds(140, 6, 90, 19);
        panFil1.add(txtDesLarPro1);
        txtDesLarPro1.setBounds(140, 50, 440, 19);

        lblObs2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblObs2.setText("Código de país:");
        panFil1.add(lblObs2);
        lblObs2.setBounds(10, 30, 100, 14);

        jLabel7.setText("Descripción larga:");
        panFil1.add(jLabel7);
        jLabel7.setBounds(10, 50, 130, 15);

        lblObs4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblObs4.setText("Observación:");
        panFil1.add(lblObs4);
        lblObs4.setBounds(10, 190, 100, 14);

        txaObs2.setLineWrap(true);
        spnObs2.setViewportView(txaObs2);

        panFil1.add(spnObs2);
        spnObs2.setBounds(140, 190, 440, 60);

        txtDesCorPai1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorPai1ActionPerformed(evt);
            }
        });
        txtDesCorPai1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorPai1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorPai1FocusLost(evt);
            }
        });
        panFil1.add(txtDesCorPai1);
        txtDesCorPai1.setBounds(140, 26, 90, 19);

        butPai1.setText("...");
        butPai1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPai1ActionPerformed(evt);
            }
        });
        panFil1.add(butPai1);
        butPai1.setBounds(590, 20, 20, 20);

        lblMarca1.setText("Marca:");
        panFil1.add(lblMarca1);
        lblMarca1.setBounds(10, 70, 39, 15);
        panFil1.add(txtCod1);
        txtCod1.setBounds(140, 70, 90, 19);
        panFil1.add(txtNom1);
        txtNom1.setBounds(230, 70, 160, 19);

        butPrg1.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        butPrg1.setText("...");
        butPrg1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butPrg1ActionPerformed(evt);
            }
        });
        panFil1.add(butPrg1);
        butPrg1.setBounds(390, 70, 20, 20);

        jLabel8.setText("Tipo de vehiculo:");
        panFil1.add(jLabel8);
        jLabel8.setBounds(10, 90, 120, 15);

        jRadioButton5.setText("Carro");
        panFil1.add(jRadioButton5);
        jRadioButton5.setBounds(140, 90, 59, 23);

        jRadioButton6.setText("Moto");
        panFil1.add(jRadioButton6);
        jRadioButton6.setBounds(200, 90, 60, 23);

        jRadioButton7.setText("Montacarga");
        panFil1.add(jRadioButton7);
        jRadioButton7.setBounds(260, 90, 114, 23);

        jRadioButton8.setText("Otro");
        panFil1.add(jRadioButton8);
        jRadioButton8.setBounds(370, 90, 70, 23);

        jLabel9.setText("Peso Soportado (Kg):");
        panFil1.add(jLabel9);
        jLabel9.setBounds(10, 120, 130, 15);
        panFil1.add(jTextField3);
        jTextField3.setBounds(140, 120, 90, 19);
        panFil1.add(jTextField4);
        jTextField4.setBounds(380, 120, 90, 19);

        jLabel10.setText("Tipo de combustible:");
        panFil1.add(jLabel10);
        jLabel10.setBounds(240, 120, 150, 15);

        panFil.add(panFil1);
        panFil1.setBounds(0, 0, 0, 0);

        jLabel11.setText("Capacidad del Tanque:");
        panFil.add(jLabel11);
        jLabel11.setBounds(10, 134, 150, 15);

        txtTanque.setEnabled(false);
        panFil.add(txtTanque);
        txtTanque.setBounds(160, 134, 90, 19);

        butVeh.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        butVeh.setText("...");
        butVeh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butVehActionPerformed(evt);
            }
        });
        panFil.add(butVeh);
        butVeh.setBounds(250, 6, 20, 20);

        jLabel12.setText("Rendimiento:");
        panFil.add(jLabel12);
        jLabel12.setBounds(260, 134, 130, 15);

        txtRendimiento.setEnabled(false);
        panFil.add(txtRendimiento);
        txtRendimiento.setBounds(400, 134, 60, 19);

        lblMarca2.setText("Chofer:");
        panFil.add(lblMarca2);
        lblMarca2.setBounds(10, 154, 50, 15);

        txtCodChofer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodChoferActionPerformed(evt);
            }
        });
        txtCodChofer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodChoferFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodChoferFocusLost(evt);
            }
        });
        panFil.add(txtCodChofer);
        txtCodChofer.setBounds(160, 154, 90, 19);

        txtNomChofer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomChoferActionPerformed(evt);
            }
        });
        txtNomChofer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNomChoferFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNomChoferFocusLost(evt);
            }
        });
        panFil.add(txtNomChofer);
        txtNomChofer.setBounds(250, 154, 310, 19);

        butChofer.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        butChofer.setText("...");
        butChofer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butChoferActionPerformed(evt);
            }
        });
        panFil.add(butChofer);
        butChofer.setBounds(560, 154, 20, 20);

        tabFrm.addTab("General", panFil);

        panFrm.add(tabFrm, java.awt.BorderLayout.CENTER);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-700)/2, (screenSize.height-450)/2, 700, 450);
    }// </editor-fold>//GEN-END:initComponents

private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
// TODO add your handling code here:

}//GEN-LAST:event_formInternalFrameOpened

private void exitForm(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_exitForm
// TODO add your handling code here:
        String strTit, strMsg;
        try
        {
            javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
            strTit="Mensaje del sistema Zafiro";
            strMsg="¿Está seguro que desea cerrar este programa?";
            if (oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE)==javax.swing.JOptionPane.YES_OPTION)
            {
                //Cerrar la conexión si está abierta.
                if (rstCab!=null)
                {
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
                dispose();
            }
        }
        catch (java.sql.SQLException e){
            dispose();
        }
}//GEN-LAST:event_exitForm

    private void txtPlacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPlacaActionPerformed
        // TODO add your handling code here:
        txtPlaca.transferFocus();
    }//GEN-LAST:event_txtPlacaActionPerformed

    private void txtPlacaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPlacaFocusGained
        
    }//GEN-LAST:event_txtPlacaFocusGained

    private void txtPlacaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPlacaFocusLost
        
    }//GEN-LAST:event_txtPlacaFocusLost

    private void butMarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butMarActionPerformed
        // TODO add your handling code here:
        strMarCod=txtCodMar.getText();
       mostrarMarcas(0);
    }//GEN-LAST:event_butMarActionPerformed

    private void txtDesCorPai1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorPai1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDesCorPai1ActionPerformed

    private void txtDesCorPai1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorPai1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDesCorPai1FocusGained

    private void txtDesCorPai1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorPai1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDesCorPai1FocusLost

    private void butPai1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPai1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_butPai1ActionPerformed

    private void butPrg1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butPrg1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_butPrg1ActionPerformed

    private void butVehActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butVehActionPerformed
        // TODO add your handling code here:
       mostrarVehiculos(0);
    }//GEN-LAST:event_butVehActionPerformed

    private void butChoferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butChoferActionPerformed
        // TODO add your handling code here:
        mostrarChoferes(0);
    }//GEN-LAST:event_butChoferActionPerformed

    private void txtCodMarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodMarActionPerformed
        // TODO add your handling code here:
        txtCodMar.transferFocus();        
    }//GEN-LAST:event_txtCodMarActionPerformed

    private void txtCodMarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodMarFocusGained
        // TODO add your handling code here:
        strMarCod=txtCodMar.getText();
        txtCodMar.selectAll();
    }//GEN-LAST:event_txtCodMarFocusGained

    private void txtCodMarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodMarFocusLost
        // TODO add your handling code here:
         if (!txtCodMar.getText().equalsIgnoreCase(strMarCod)){
            if (txtCodMar.getText().equals("")){
                txtCodMar.setText("");
                txtNomMar.setText("");
            }
            else
            mostrarMarcas(1);
        }
        else
        txtCodMar.setText(strMarCod);
    }//GEN-LAST:event_txtCodMarFocusLost

    private void txtNomMarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomMarActionPerformed
        // TODO add your handling code here:
        txtNomMar.transferFocus();
    }//GEN-LAST:event_txtNomMarActionPerformed

    private void txtNomMarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomMarFocusGained
        // TODO add your handling code here:
        strMarNom=txtNomMar.getText();
        txtNomMar.selectAll();
    }//GEN-LAST:event_txtNomMarFocusGained

    private void txtNomMarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomMarFocusLost
        // TODO add your handling code here:
         if (!txtNomMar.getText().equalsIgnoreCase(strMarNom))
        {
            if (txtNomMar.getText().equals(""))
            {
                txtCodMar.setText("");
                txtNomMar.setText("");
                }
            else
            {
                mostrarMarcas(2);
            }
        }
        else
            txtNomMar.setText(strMarNom);
    }//GEN-LAST:event_txtNomMarFocusLost

    private void txtCodChoferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodChoferActionPerformed
        // TODO add your handling code here:
        txtCodChofer.transferFocus();
    }//GEN-LAST:event_txtCodChoferActionPerformed

    private void txtCodChoferFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodChoferFocusGained
        // TODO add your handling code here:
        strChoCod=txtCodChofer.getText();
        txtCodChofer.selectAll();
    }//GEN-LAST:event_txtCodChoferFocusGained

    private void txtCodChoferFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodChoferFocusLost
        // TODO add your handling code here:
        if (!txtCodChofer.getText().equalsIgnoreCase(strChoCod)){
            if (txtCodChofer.getText().equals("")){
                txtCodChofer.setText("");
                txtNomChofer.setText("");
                txtCodChofer.setText("");
                txtNomChofer.setText("");
            }
            else
                mostrarChoferes(1);
        }
        else
            txtCodChofer.setText(strChoCod);
    }//GEN-LAST:event_txtCodChoferFocusLost

    private void txtNomChoferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomChoferActionPerformed
        // TODO add your handling code here:
          txtNomChofer.transferFocus();
    }//GEN-LAST:event_txtNomChoferActionPerformed

    private void txtNomChoferFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomChoferFocusGained
        // TODO add your handling code here:
        strChoNom=txtNomChofer.getText();
        txtNomChofer.selectAll();
    }//GEN-LAST:event_txtNomChoferFocusGained

    private void txtNomChoferFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNomChoferFocusLost
        // TODO add your handling code here:
        if (!txtNomChofer.getText().equalsIgnoreCase(strChoNom))
        {
            if (txtNomChofer.getText().equals(""))
            {
                txtCodChofer.setText("");
                txtNomChofer.setText("");
                //objTblMod.removeAllRows();
                //panLoc.setVisible(false);
            }
            else
            {
                mostrarChoferes(2);
            }
        }
        else
            txtNomChofer.setText(strChoNom);
    }//GEN-LAST:event_txtNomChoferFocusLost

    private void txtPesoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPesoFocusLost
        if(Double.parseDouble(txtPeso.getText())<0) //solo ingrese pesos positivos 
                txtPeso.setText("");            
    }//GEN-LAST:event_txtPesoFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butChofer;
    private javax.swing.JButton butMar;
    private javax.swing.JButton butPai1;
    private javax.swing.JButton butPrg1;
    private javax.swing.JButton butVeh;
    private javax.swing.ButtonGroup grpTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel lblMarca;
    private javax.swing.JLabel lblMarca1;
    private javax.swing.JLabel lblMarca2;
    private javax.swing.JLabel lblObs1;
    private javax.swing.JLabel lblObs2;
    private javax.swing.JLabel lblObs3;
    private javax.swing.JLabel lblObs4;
    private javax.swing.JLabel lblTit;
    private javax.swing.JRadioButton optCarro;
    private javax.swing.JRadioButton optMontacarga;
    private javax.swing.JRadioButton optMoto;
    private javax.swing.JRadioButton optOtro;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panFil;
    private javax.swing.JPanel panFil1;
    private javax.swing.JPanel panFrm;
    private javax.swing.JScrollPane spnObs1;
    private javax.swing.JScrollPane spnObs2;
    private javax.swing.JTabbedPane tabFrm;
    private javax.swing.JTextArea txaObs;
    private javax.swing.JTextArea txaObs2;
    private javax.swing.JTextField txtCod1;
    private javax.swing.JTextField txtCodChofer;
    private javax.swing.JTextField txtCodMar;
    private javax.swing.JTextField txtCodPro1;
    private javax.swing.JTextField txtCodVeh;
    private javax.swing.JTextField txtDesCorPai1;
    private javax.swing.JTextField txtDesLarPro1;
    private javax.swing.JTextField txtDesLarVeh;
    private javax.swing.JTextField txtNom1;
    private javax.swing.JTextField txtNomChofer;
    private javax.swing.JTextField txtNomMar;
    private javax.swing.JTextField txtPeso;
    private javax.swing.JTextField txtPlaca;
    private javax.swing.JTextField txtRendimiento;
    private javax.swing.JTextField txtTanque;
    private javax.swing.JTextField txtTipCom;
    // End of variables declaration//GEN-END:variables

    
//    /** Configurar el formulario. */
    private boolean configurarFrm(){
        boolean blnRes=true;
        try{
            //Inicializar objetos.
            objUti=new ZafUtil();
            objTooBar=new MiToolBar(this);
            objDocLis=new ZafDocLis();
            panBar.add(objTooBar);
            strAux=objParSis.getNombreMenu();
            this.setTitle(strAux + " v0.2");
            lblTit.setText(strAux);
            txtCodVeh.setBackground(objParSis.getColorCamposSistema());
            txtDesLarVeh.setBackground(objParSis.getColorCamposObligatorios());
            configurarMarcas();
            configurarChoferes();
            configurarVehiculos();
            System.out.println("configurarFrm::..");
        }
        catch(Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

 

    
//    /**
//     * Esta clase implementa la interface DocumentListener que observa los cambios que
//     * se presentan en los objetos de tipo texto. Por ejemplo: JTextField, JTextArea, etc.
//     * Se la usa en el sistema para determinar si existe algún cambio que se deba grabar
//     * antes de abandonar uno de los modos o desplazarse a otro registro. Por ejemplo: si
//     * se ha hecho cambios a un registro y quiere cancelar o moverse a otro registro se
//     * presentará un mensaje advirtiendo que si no guarda los cambios los perderá.
//     */
    class ZafDocLis implements javax.swing.event.DocumentListener 
    {
        public void changedUpdate(javax.swing.event.DocumentEvent evt)        {
            blnHayCam=true;
        }

        public void insertUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }

        public void removeUpdate(javax.swing.event.DocumentEvent evt) 
        {
            blnHayCam=true;
        }
    }
    
    
//    /**
//     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
//     * de tipo texto para poder determinar si su contenido a cambiado o no.
//     */
    private void agregarDocLis()
    {
        txtCodVeh.getDocument().addDocumentListener(objDocLis);
        txtPlaca.getDocument().addDocumentListener(objDocLis);
        txtCodMar.getDocument().addDocumentListener(objDocLis);
        txtDesLarVeh.getDocument().addDocumentListener(objDocLis);
        txtPeso.getDocument().addDocumentListener(objDocLis);
        txtCodChofer.getDocument().addDocumentListener(objDocLis);
        txaObs.getDocument().addDocumentListener(objDocLis);
    } 
    
//    /**
//     * Esta clase crea la barra de herramientas para el sistema. Dicha barra de herramientas
//     * contiene los botones que realizan las diferentes operaciones del sistema. Es decir,
//     * insertar, consultar, modificar, eliminar, etc. Además de los botones de navegación
//     * que permiten desplazarse al primero, anterior, siguiente y último registro.
//     */
    private class MiToolBar extends ZafToolBar
    {
        public MiToolBar(javax.swing.JInternalFrame ifrFrm)
        {
            super(ifrFrm, objParSis);
        }

        public void clickInicio() {
            try{
                if (!rstCab.isFirst()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.first();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.first();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickAnterior() {
            try{
                System.out.println("clickAnterior::.. ");
                if (!rstCab.isFirst()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.previous();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.previous();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            
        }

        public void clickSiguiente() {
            try{
                System.out.println("clickSiguiente::..");
                if (!rstCab.isLast()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.next();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.next();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickFin() {
            try{
                System.out.println("clickFin:::... ");
                if (!rstCab.isLast()){
                    if (blnHayCam){
                        if (isRegPro()){
                            rstCab.last();
                            cargarReg();
                        }
                    }
                    else{
                        rstCab.last();
                        cargarReg();
                    }
                }
            }
            catch (java.sql.SQLException e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickInsertar() {
            try{
                System.out.println("clickInsertar:::...");
                if (blnHayCam){
                    isRegPro();
                }
                limpiarFrm();
                txtCodVeh.setEditable(false);
                //txtDesCorPro.selectAll();
                //txtDesCorPro.requestFocus();
                //Inicializar las variables que indican cambios.
                blnHayCam=false;                
            }
            catch (Exception e){
                objUti.mostrarMsgErr_F1(this, e);
            }
        }

        public void clickConsultar() {            
        }

        public void clickModificar() {
            System.out.println("clickModificar::..");
            txtCodVeh.setEditable(false);
        }

        public void clickEliminar() {
            
        }

        public void clickAnular() {
            System.out.println("clickAnular:::..");
            cargarCabReg();
        }

        public void clickImprimir() {
        }

        public void clickVisPreliminar() {
        }

        public void clickAceptar() {
        }

        public void clickCancelar() {
        }

        public boolean insertar() {
            System.out.println("insertar:::...");
            if (!insertarReg())
                return false;
            return true;
        }

        public boolean consultar() {
            System.out.println("consultar:::..");
            consultarReg();
            return true;
        }

        public boolean modificar() {
            System.out.println("modificar:::...");
            if (!actualizarReg())
                return false;
            return true;
        }

        public boolean eliminar() {
            try{
                System.out.println("eliminar::...");
                if (!eliminarReg())
                    return false;
                //Desplazarse al siguiente registro si es posible.
                if (!rstCab.isLast()){
                    rstCab.next();
                    cargarReg();
                }
                else{
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                }
                blnHayCam=false;
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
                return true;
            }
            return true;
        }

        public boolean anular() {
            System.out.println("anular:::.");
            if (!anularReg())
                return false;
            objTooBar.setEstadoRegistro("Anulado");
            blnHayCam=false;
            return true;
        }

        public boolean imprimir() {
            return true;
        }

        public boolean vistaPreliminar() {
            return true;
        }

        public boolean aceptar() {
            return true;
        }

        public boolean cancelar() {
            boolean blnRes=true;
            try{
                System.out.println("cancelar:::..");
                if (blnHayCam){
                    if (objTooBar.getEstado()=='n' || objTooBar.getEstado()=='m'){
                        if (!isRegPro())
                            return false;
                    }
                }
                if (rstCab!=null){
                    rstCab.close();
                    stmCab.close();
                    conCab.close();
                    rstCab=null;
                    stmCab=null;
                    conCab=null;
                }
            }
            catch (java.sql.SQLException e){
                objUti.mostrarMsgErr_F1(this, e);
            }
            catch (Exception e)
            {
                objUti.mostrarMsgErr_F1(this, e);
            }
            limpiarFrm();
            blnHayCam=false;
            return blnRes;
        }

        public boolean beforeInsertar() {
            System.out.println("beforeInsertar:::...");
            if (!isCamVal())
                return false;
            return true;
        }

        public boolean beforeConsultar() {
            return true;
        }

        public boolean beforeModificar() {
            boolean blnRes=true;
            System.out.println("beforeModificar:::...");
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Anulado")){
                mostrarMsgInf("El documento está ANULADO.\nNo es posible modificar un documento anulados.");
                blnRes=false;
            }
            return blnRes;
        }

        public boolean beforeEliminar() {
            System.out.println("beforeEliminar::...");
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado")){
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible eliminar un documento eliminado.");
                return false;
            }
            return true;
        }

        public boolean beforeAnular() {
            System.out.println("beforeAnular:::...");
            strAux=objTooBar.getEstadoRegistro();
            if (strAux.equals("Eliminado")){
                mostrarMsgInf("El documento está ELIMINADO.\nNo es posible anular un documento eliminado.");
                return false;
            }
            if (strAux.equals("Anulado")){
                mostrarMsgInf("El documento ya está ANULADO.\nNo es posible anular un documento anulado.");
                return false;
            }
            return true;
        }

        public boolean beforeImprimir() {
            return true;
        }

        public boolean beforeVistaPreliminar() {
            return true;
        }

        public boolean beforeAceptar() {
            return true;
        }

        public boolean beforeCancelar() {
            return true;
        }

        public boolean afterInsertar() {
            System.out.println("afterInsertar:..");
            this.setEstado('w');
            blnHayCam=false;
            objTooBar.setEstado('w');
            consultarReg();
            blnHayCam=false;
            return true;
        }

        public boolean afterConsultar() {
            System.out.println("afterConsultar:::...");
            return true;
        }

        public boolean afterModificar() {
            System.out.println("afterModificar:::...");
            blnHayCam=false;
            objTooBar.setEstado('w');
            cargarReg();
            objTooBar.afterConsultar();
            return true;
        }

        public boolean afterEliminar() {
            return true;
        }

        public boolean afterAnular() {
            cargarReg();
            return true;
        }

        public boolean afterImprimir() {
            return true;
        }

        public boolean afterVistaPreliminar() {
            return true;
        }

        public boolean afterAceptar() {
            return true;
        }

        public boolean afterCancelar() {
            return true;
        }
    }



//    /**
//     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
//     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
//     * debe llenar o corregir.
//     */
    private void mostrarMsgInf(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }

//    /**
//     * Esta función muestra un mensaje "showConfirmDialog". Presenta las opciones
//     * Si, No y Cancelar. El usuario es quien determina lo que debe hacer el sistema
//     * seleccionando una de las opciones que se presentan.
//     */
    private int mostrarMsgCon(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        return oppMsg.showConfirmDialog(this,strMsg,strTit,javax.swing.JOptionPane.YES_NO_CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
    }

//    /**
//     * Esta función muestra un mensaje de advertencia al usuario. Se podría utilizar
//     * para mostrar al usuario un mensaje que indique que los datos se han cargado
//     * con errores y que debe revisar dichos datos.
//     */
    private void mostrarMsgAdv(String strMsg)
    {
        javax.swing.JOptionPane oppMsg=new javax.swing.JOptionPane();
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        if (strMsg.equals(""))
            strMsg="<HTML>Este registro tiene <FONT COLOR=\"red\">problemas</FONT>. <BR>Notifíquelo a su administrador del sistema.</HTML>";
        oppMsg.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.WARNING_MESSAGE);
    }
    

//    /**
//     * Esta función se encarga de agregar el listener "DocumentListener" a los objetos
//     * de tipo texto para poder determinar si su contenido a cambiado o no.
//     */
    private boolean isRegPro()
    {
        System.out.println("isRegPro:::..");
        boolean blnRes=true;
        strAux="¿Desea guardar los cambios efectuados a éste registro?\n";
        strAux+="Si no guarda los cambios perderá toda la información que no haya guardado.";
        switch (mostrarMsgCon(strAux))
        {
            case 0: //YES_OPTION
                switch (objTooBar.getEstado())
                {
                    case 'n': //Insertar
                        blnRes=objTooBar.insertar();
                        break;
                    case 'm': //Modificar
                        blnRes=objTooBar.modificar();
                        break;
                }
                break;
            case 1: //NO_OPTION
                blnHayCam=false;
                blnRes=true;
                break;
            case 2: //CANCEL_OPTION
                blnRes=false;
                break;
        }
        return blnRes;
    }
    
    
//    /**
//     * Esta función permite limpiar el formulario.
//     * @return true: Si se pudo limpiar la ventana sin ningún problema.
//     * <BR>false: En el caso contrario.
//     */
    private boolean limpiarFrm(){
        boolean blnRes=true;
        try{
            txtCodVeh.setText("");
            txtPlaca.setText("");
            txtDesLarVeh.setText("");
            txtCodMar.setText("");
            txtNomMar.setText("");
            optCarro.setSelected(true);
            txtPeso.setText("");
            txtTipCom.setText("");
            txtTanque.setText("");
            txtRendimiento.setText("");
            txtCodChofer.setText("");
            txtNomChofer.setText("");
            txaObs.setText("");
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
    

//    /**
//     * Esta función inserta el registro en la base de datos.
//     * @return true: Si se pudo insertar el registro.
//     * <BR>false: En el caso contrario.
//     */
    private boolean insertarReg(){
        boolean blnRes=false;
        try{
            System.out.println("insertarReg::...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (insertarPro()){
                    con.commit();
                    blnRes=true;           
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
//    /**
//     * Esta función permite insertar la cabecera de un registro.
//     * @return true: Si se pudo insertar la cabecera del registro.
//     * <BR>false: En el caso contrario.
//     */
    private boolean insertarPro(){
        int intUltReg;
        String aux;
        boolean blnRes=true;
        try{
            System.out.println("insertarPro::...");
            if (con!=null){
                stm=con.createStatement();
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;
                //Obtener el código del último registro.
                strSQL="";
                strSQL+=" SELECT MAX(a1.co_veh)";
                strSQL+=" FROM tbm_veh AS a1";
                intUltReg=objUti.getNumeroRegistro(this, objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), strSQL);
                if (intUltReg==-1)
                    return false;
                intUltReg++;
                txtCodVeh.setText("" + intUltReg);
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+=" INSERT INTO tbm_veh (co_veh,  tx_deslar"; 
                if(txtPlaca.getText().length()>0)
                strSQL+=" ,tx_pla ";
                if(txtCodMar.getText().length()>0)
                strSQL+=" ,co_mar";
                strSQL+=" ,tx_tipveh";
                if(txtPeso.getText().length()>0)
                    strSQL+=" ,nd_pessopkgr";
                if(txtCodChofer.getText().length()>0)
                    strSQL+=",co_cho";
                if(txaObs.getText().length()>0)
                    strSQL+=",tx_obs1";                
                strSQL+=",ne_ultKil) VALUES (" + txtCodVeh.getText(); //NuevoCodigoParaVehiculo
                //Descripcion larga es obligatoria 
                strSQL+=" ,"+ objUti.codificar(txtDesLarVeh.getText()) + "";
                //Los demas campos no son obligatorios 
                if(txtPlaca.getText().length()>0)
                    strSQL+=" ," + objUti.codificar(txtPlaca.getText()) + "";
                if(txtCodMar.getText().length()>0)
                    strSQL+=" ," + txtCodMar.getText() + "";
                
                if(optCarro.isSelected()==true)
                    strSQL+=" ,'C'";
                if(optMoto.isSelected()==true)
                    strSQL+=" ,'M'";
                if(optMontacarga.isSelected()==true)
                    strSQL+=" ,'N'";
                if(optOtro.isSelected()==true)
                    strSQL+=" ,'O'";
                
                if(txtPeso.getText().length()>0)
                    strSQL+=" ," + txtPeso.getText() + "";
                if(txtCodChofer.getText().length()>0)
                    strSQL+=" ," + txtCodChofer.getText() + "";
                if(txaObs.getText().length()>0)
                    strSQL+=" ," + objUti.codificar(txaObs.getText()) + "";
                strSQL+=",0);";
                System.out.println("insertarPro:.. " + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


//    /**
//     * Esta función actualiza el registro en la base de datos.
//     * @return true: Si se pudo actualizar el registro.
//     * <BR>false: En el caso contrario.
//     */
    private boolean actualizarReg(){
        boolean blnRes=false;
        try{
            System.out.println("actualizarReg::..."); 
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (actualizarPro()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
//    /**
//     * Esta función permite actualizar la cabecera de un registro.
//     * @return true: Si se pudo actualizar la cabecera del registro.
//     * <BR>false: En el caso contrario.
//     */
    private boolean actualizarPro(){
        boolean blnRes=true;
        try{
            System.out.println("actualizarReg:::..");
            if (con!=null){
                //Obtener la fecha del servidor.
                datFecAux=objUti.getFechaServidor(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos(), objParSis.getQueryFechaHoraBaseDatos());
                if (datFecAux==null)
                    return false;
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_veh";
                strSQL+=" SET"; 
                if(txtPlaca.getText().length()>0)
                    strSQL+=" tx_pla=" + objUti.codificar(txtPlaca.getText()) + ",";
                if(txtDesLarVeh.getText().length()>0)
                    strSQL+=" tx_desLar=" + objUti.codificar(txtDesLarVeh.getText()) + ",";
                if(txtCodMar.getText().length()>0)
                    strSQL+=" co_mar=" + txtCodMar.getText() + ",";
                if(optCarro.isSelected()==true)
                    strSQL+=" tx_tipVeh='C',";
                if(optMoto.isSelected()==true)
                    strSQL+=" tx_tipVeh='M',";
                if(optMontacarga.isSelected()==true)
                    strSQL+=" tx_tipVeh='N',";
                if(optOtro.isSelected()==true)
                    strSQL+=" tx_tipVeh='O',";
                if(txtPeso.getText().length()>0)
                    strSQL+=" nd_pessopkgr=" + txtPeso.getText() + ",";
                if(txtCodChofer.getText().length()>0)
                strSQL+=" co_cho=" + txtCodChofer.getText() + ",";
                if(txaObs.getText().length()>0)
                strSQL+=" tx_obs1=" + objUti.codificar(txaObs.getText()) + ",";
                strSQL+=" st_reg='A'";
                strSQL+="where co_veh=" + txtCodVeh.getText();
                System.out.println("actualizarPro:." + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

    
//    /**
//     * Esta función permite consultar los registros de acuerdo al criterio seleccionado.
//     * @return true: Si se pudo consultar los registros.
//     * <BR>false: En el caso contrario.
//     */
    private boolean consultarReg(){
        boolean blnRes=true;
        try{
            System.out.println("consultarReg::::....");
            conCab=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (conCab!=null){
                stmCab=conCab.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                //Validar que sólo se muestre los documentos asignados al programa.
                strSQL="";
                strSQL+="SELECT a1.co_veh";
                strSQL+=" FROM tbm_veh AS a1";
                strSQL+=" WHERE a1.st_reg NOT IN('E')";
                strAux=txtCodVeh.getText();
                if (!strAux.equals(""))
                    strSQL+=" AND a1.co_veh=" + strAux.replaceAll("'", "''") + "";
                strSQL+=" ORDER BY a1.co_veh";
                System.out.println("consultarReg: " + strSQL);
                rstCab=stmCab.executeQuery(strSQL);
                if (rstCab.next()){
                    rstCab.last();
                    objTooBar.setMenSis("Se encontraron " + rstCab.getRow() + " registros");
                    rstCab.first();
                    cargarReg();
                }
                else
                {
                    mostrarMsgInf("No se ha encontrado ningún registro que cumpla el criterio de búsqueda especificado.");
                    limpiarFrm();
                    objTooBar.setEstado('l');
                    objTooBar.setMenSis("Listo");
                }
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    

//    /**
//     * Esta función permite cargar el registro seleccionado.
//     * @return true: Si se pudo cargar el registro.
//     * <BR>false: En el caso contrario.
//     */
   
    private boolean cargarReg(){
        boolean blnRes=true;
        try{
            System.out.print("cargarReg:::..");
            if (cargarCabReg()){
               
            }
            blnHayCam=false;
        }
        catch (Exception e){
            blnRes=false;
        }
        return blnRes;
    }
    
//    /**
//     * Esta función permite cargar la cabecera del registro seleccionado.
//     * @return true: Si se pudo cargar la cabecera del registro.
//     * <BR>false: En el caso contrario.
//     */
    private boolean cargarCabReg(){
        int intPosRel;
        boolean blnRes=true;
        try{
            System.out.println("cargarCabReg:::.."); 
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            if (con!=null){
                stm=con.createStatement();
                strSQL="";
                strSQL+=" SELECT a1.co_veh, a1.tx_pla, a1.tx_deslar as desVeh, a2.co_mar,";
                strSQL+=" a2.tx_deslar as desMar, tx_tipVeh, a1.st_reg,";
                strSQL+=" round(a1.nd_pessopkgr,2) as nd_pessopkgr, a4.tx_desLar as tx_tipcom,";
                strSQL+=" round(a1.nd_captan,2) as nd_captan,";
                strSQL+=" round(a1.nd_renveh,2) as nd_renveh, a3.co_tra, a3.tx_nom, a3.tx_ape,a1.tx_obs1";
                strSQL+=" FROM tbm_veh as a1 LEFT OUTER JOIN tbm_marVeh as a2 ON (a1.co_mar=a2.co_mar)";
                strSQL+=" LEFT OUTER JOIN tbm_tra as a3 ON (a1.co_cho=a3.co_tra)";
                strSQL+=" LEFT OUTER JOIN tbm_comVeh as a4 ON(a1.co_com=a4.co_com)";
                strSQL+=" WHERE a1.co_veh=" + rstCab.getString("co_veh");
                System.out.println("cargarCabReg: " + strSQL);
                rst=stm.executeQuery(strSQL);
                if (rst.next()){
                    strAux=rst.getString("co_veh");
                    txtCodVeh.setText((strAux==null)?"":strAux);                    
                    strAux=rst.getString("tx_pla");
                    txtPlaca.setText((strAux==null)?"":strAux);                  
                    strAux=rst.getString("desVeh");
                    txtDesLarVeh.setText((strAux==null)?"":strAux);                    
                    strAux=rst.getString("co_mar");
                    txtCodMar.setText((strAux==null)?"":strAux);                    
                    strAux=rst.getString("desMar");
                    txtNomMar.setText((strAux==null)?"":strAux);                    
                    strAux=rst.getString("tx_tipVeh");
                    strAux=((strAux==null)?" ":strAux);
                    switch(strAux.charAt(0))
                    {
                        case 'C': optCarro.setSelected(true); break;
                        case 'M': optMoto.setSelected(true); break;
                        case 'N': optMontacarga.setSelected(true); break;
                        case 'O': optOtro.setSelected(true); break; 
                        default:optCarro.setSelected(true);break;
                    }
                    //Mostrar el estado del registro.
                    strAux=rst.getString("st_reg");
                    objTooBar.setEstadoRegistro(getEstReg(strAux));
                    
                    strAux=rst.getString("tx_obs1");
                    txaObs.setText((strAux==null)?"":strAux);

                    strAux=rst.getString("nd_pessopkgr");
                    txtPeso.setText((strAux==null)?"":strAux);
                    
                    strAux=rst.getString("nd_captan");
                    txtTanque.setText((strAux==null)?"":strAux);
                    
                    strAux=rst.getString("tx_tipcom");
                    txtTipCom.setText((strAux==null)?"":strAux);
                    
                    strAux=rst.getString("nd_renveh");
                    txtRendimiento.setText((strAux==null)?"":strAux);
                    //chofer
                    strAux=rst.getString("co_tra");
                    txtCodChofer.setText((strAux==null)?"":strAux);
                    String nombre;
                    strAux=rst.getString("tx_nom");
                    nombre=((strAux==null)?"":strAux);
                    strAux=rst.getString("tx_ape");
                    nombre+=" "+ ((strAux==null)?"":strAux);
                    txtNomChofer.setText(nombre);
                    
                }
                else{
                    objTooBar.setEstadoRegistro("Eliminado");
                    limpiarFrm();
                    blnRes=false;
                }
            }
            rst.close();
            stm.close();
            con.close();
            rst=null;
            stm=null;
            con=null;
            //Mostrar la posición relativa del registro.
            intPosRel=rstCab.getRow();
            rstCab.last();
            objTooBar.setPosicionRelativa("" + intPosRel + " / " + rstCab.getRow());
            rstCab.absolute(intPosRel);
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }



//    /**
//     * Esta función obtiene la descripción larga del estado del registro.
//     * @param estado El estado del registro. Por ejemplo: A, I, etc.
//     * @return La descripción larga del estado del registro.
//     * <BR>Nota.- Si la cadena recibida es <I>null</I> la función devuelve una cadena vacía.
//     */
    private String getEstReg(String estado)
    {
        if (estado==null)
            estado="";
        else
            switch (estado.charAt(0))
            {
                case 'A':
                    estado="Activo";
                    break;
                case 'I':
                    estado="Anulado";
                    break;
                case 'P':
                    estado="Pendiente de autorizar";
                    break;
                case 'D':
                    estado="Autorización denegada";
                    break;
                case 'R':
                    estado="Pendiente de impresión";
                    break;
                case 'C':
                    estado="Pendiente confirmación de inventario";
                    break;
                case 'F':
                    estado="Existen diferencias de inventario";
                    break;
                default:
                    estado="Desconocido";
                    break;
            }
        return estado;
    }
    

//    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        dispose();
    }

//    /**
//     * Esta función determina si los campos son válidos.
//     * @return true: Si los campos son válidos.
//     * <BR>false: En el caso contrario.
//     */
    private boolean isCamVal(){
//        if (txtDesCorPro.getText().equals("")){
//            tabFrm.setSelectedIndex(0);
//            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\"> descripción corta</FONT> es obligatorio.<BR>Escriba una descripción corta y vuelva a intentarlo.</HTML>");
//            txtDesCorPro.requestFocus();
//            return false;
//        }        
        if (txtDesLarVeh.getText().equals("")){
            tabFrm.setSelectedIndex(0);
            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\"> descripción larga</FONT> es obligatorio.<BR>Escriba una descripción larga y vuelva a intentarlo.</HTML>");
            txtDesLarVeh.requestFocus();
            return false;
        }
//        if (txtCodPai.getText().equals("")){
//            tabFrm.setSelectedIndex(0);
//            mostrarMsgInf("<HTML>El campo <FONT COLOR=\"blue\"> País</FONT> es obligatorio.<BR>Seleccione un país y vuelva a intentarlo.</HTML>");
//            txtDesLarPai.requestFocus();
//            return false;
//        }        

        return true;
    }
    

//    /**
//     * Esta función anula el registro de la base de datos.
//     * @return true: Si se pudo anular el registro.
//     * <BR>false: En el caso contrario.
//     */
    private boolean anularReg(){
        boolean blnRes=false;
        try{
            System.out.println("anularReg:::..");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (anularGrp()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    

//    /**
//     * Esta función permite anular la cabecera de un registro.
//     * @return true: Si se pudo anular la cabecera del registro.
//     * <BR>false: En el caso contrario.
//     */
    private boolean anularGrp(){
        boolean blnRes=true;
        try{
            System.out.println("anularGrp:::....");
            if (con!=null){
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_veh";
                strSQL+=" SET st_reg='I'";
                strSQL+=" WHERE co_veh=" + rstCab.getString("co_veh");
                System.out.println("anularGrp" + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e){
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
//    /**
//     * Esta función elimina el registro de la base de datos.
//     * @return true: Si se pudo eliminar el registro.
//     * <BR>false: En el caso contrario.
//     */
    private boolean eliminarReg(){
        boolean blnRes=false;
        try{
            System.out.println("eliminarReg:::...");
            con=DriverManager.getConnection(objParSis.getStringConexion(), objParSis.getUsuarioBaseDatos(), objParSis.getClaveBaseDatos());
            con.setAutoCommit(false);
            if (con!=null){
                if (eliminarGrp()){
                    con.commit();
                    blnRes=true;
                }
                else
                    con.rollback();
            }
            con.close();
            con=null;
        }
        catch (java.sql.SQLException e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    
//    /**
//     * Esta función permite eliminar la cabecera de un registro.
//     * @return true: Si se pudo eliminar la cabecera del registro.
//     * <BR>false: En el caso contrario.
//     */
    private boolean eliminarGrp(){
        boolean blnRes=true;
        try{
            System.out.println("eliminarGrp::...");
            if (con!=null){
                stm=con.createStatement();
                //Armar la sentencia SQL.
                strSQL="";
                strSQL+="UPDATE tbm_veh";
                strSQL+=" SET st_reg='E'";
                strSQL+=" WHERE co_veh=" + rstCab.getString("co_veh");
                System.out.println("eliminarGrp" + strSQL);
                stm.executeUpdate(strSQL);
                stm.close();
                stm=null;
            }
        }
        catch (java.sql.SQLException e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
   
    /*
     * llenar la consulta de marcas  
     */
    
    private boolean configurarMarcas()
    {
        boolean blnRes=true;
        try
        {
            System.out.println("configurarMarcas::....");
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_mar");
            arlCam.add("a1.tx_desLar");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("200");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+=" SELECT a1.co_mar, a1.tx_deslar";
            strSQL+=" FROM tbm_marVeh a1 WHERE a1.st_reg NOT IN('I','E')";
            if(txtCodMar.getText().length()>0)
            strSQL+=" and a1.co_mar=" + txtCodMar.getText();
            strSQL+=" ORDER BY a1.co_mar";
            System.out.println("configurarMarcas:.." + strSQL);
            vcoMar=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de Marcas", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoMar.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    
 
//    /**
//     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
//     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
//     * una básqueda directa (No se muestra la ventana de consulta a menos que no
//     * exista lo que se está buscando) o presentar la ventana de consulta para que
//     * el usuario seleccione la opcián que desea utilizar.
//     * @param intTipBus El tipo de básqueda a realizar.
//     * @return true: Si no se presentá ningán problema.
//     * <BR>false: En el caso contrario.
//     */
    private boolean mostrarMarcas(int intTipBus)
    {
       System.out.println("mostrarMarcas");
        boolean blnRes=true;
        try
        {
            switch (intTipBus)
            {
               case 0: //Mostrar la ventana de consulta.
                    vcoMar.setCampoBusqueda(2);
                    vcoMar.setVisible(true);
                    if (vcoMar.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                    {
                        txtCodMar.setText(vcoMar.getValueAt(1));
                        txtNomMar.setText(vcoMar.getValueAt(2));
                    }
                    break;
                case 1: //Búsqueda directa por "Código".
                    if (vcoMar.buscar("a1.co_mar", txtCodMar.getText()))
                    {
                        txtCodMar.setText(vcoMar.getValueAt(1));
                        txtNomMar.setText(vcoMar.getValueAt(2));
                    }
                    else
                    {
                        vcoMar.setCampoBusqueda(0);
                        vcoMar.setCriterio1(11);
                        vcoMar.cargarDatos();
                        vcoMar.setVisible(true);
                        if (vcoMar.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodMar.setText(vcoMar.getValueAt(1));
                            txtNomMar.setText(vcoMar.getValueAt(2));
                        }
                        else
                        {
                            txtCodMar.setText(strMarCod);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Nombre".
                    if (vcoMar.buscar("a1.tx_deslar", txtNomMar.getText()))
                    {
                        txtCodMar.setText(vcoMar.getValueAt(1));
                        txtNomMar.setText(vcoMar.getValueAt(2));
                    }
                    else
                    {
                        vcoMar.setCampoBusqueda(2);
                        vcoMar.setCriterio1(11);
                        vcoMar.cargarDatos();
                        vcoMar.setVisible(true);
                        if (vcoMar.getSelectedButton()==ZafVenCon.INT_BUT_ACE)
                        {
                            txtCodMar.setText(vcoMar.getValueAt(1));
                            txtNomMar.setText(vcoMar.getValueAt(3));
                        }
                        else
                        {
                            txtNomMar.setText(strMarNom);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /*
     * llenar la consulta de choferes
     */
    
    private boolean configurarChoferes(){
        boolean blnRes=true;
        try{
            //Listado de campos.
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_tra");
            arlCam.add("nombre");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("250");
            //Armar la sentencia SQL.
            strSQL="";
//            strSQL+=" select distinct a2.co_tra, (a2.tx_ape || ' ' ||a2.tx_nom) as nombre ";
//            strSQL+=" from tbm_traEmp as a1 INNER JOIN tbm_tra as a2 ON (a1.co_tra = a2.co_tra)";
//            strSQL+=" INNER JOIN tbm_carLab as a3 ON (a1.co_car=a3.co_car)";
//            strSQL+=" INNER JOIN tbm_carLabPre as a4 ON (a3.co_carPre=a4.co_carPre)";
//            strSQL+=" WHERE a4.co_carPre=1 ";
//            strSQL+=" ORDER BY nombre";
            strSQL="";
            strSQL+=" SELECT distinct a2.co_tra, (a2.tx_ape || ' ' ||a2.tx_nom) as nombre \n";
            strSQL+=" FROM tbm_traEmp as a1 \n";
            strSQL+=" INNER JOIN tbm_tra as a2 ON (a1.co_tra = a2.co_tra) \n";
            //strSQL+=" WHERE a1.st_reg = 'A' and a2.st_reg='A' \n";  
            strSQL+=" WHERE a1.st_reg IN ('A','I') and a2.st_reg='A' \n";  //TEMPORAL HASTA INTEGRAR COSENCO EN LA BASE DE ZAFIRO2006
            strSQL+=" ORDER BY nombre \n";
            System.out.println("configurarChoferes:.." + strSQL);
            vcoCho=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de Choferes", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoCho.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

 
//    /**
//     * Esta funcián permite utilizar la "Ventana de Consulta" para seleccionar un
//     * registro de la base de datos. El tipo de básqueda determina si se debe hacer
//     * una básqueda directa (No se muestra la ventana de consulta a menos que no
//     * exista lo que se está buscando) o presentar la ventana de consulta para que
//     * el usuario seleccione la opcián que desea utilizar.
//     * @param intTipBus El tipo de básqueda a realizar.
//     * @return true: Si no se presentá ningán problema.
//     * <BR>false: En el caso contrario.
//     */
    private boolean mostrarChoferes(int intTipBus)
    {
        boolean blnRes=true;
        try
        {
            System.out.println("mostrarChoferes:.....");
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoCho.setCampoBusqueda(1);
                    vcoCho.show();
                    if (vcoCho.getSelectedButton()==vcoCho.INT_BUT_ACE){
                        txtCodChofer.setText(vcoCho.getValueAt(1));
                        txtNomChofer.setText(vcoCho.getValueAt(2));
                    }
                    break;
               case 1: //Búsqueda directa por "Número de cuenta".
                    if (vcoCho.buscar("a1.co_tra", txtCodChofer.getText())){
                        txtCodChofer.setText(vcoCho.getValueAt(1));
                        txtNomChofer.setText(vcoCho.getValueAt(2));
                    }
                    else{
                        vcoCho.setCampoBusqueda(0);
                        vcoCho.setCriterio1(11);
                        vcoCho.cargarDatos();
                        vcoCho.show();
                        if (vcoCho.getSelectedButton()==vcoCho.INT_BUT_ACE){
                            txtCodChofer.setText(vcoCho.getValueAt(1));
                            txtNomChofer.setText(vcoCho.getValueAt(2));
                        }
                        else{
                            txtCodChofer.setText(strChoCod);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoCho.buscar("nombre", txtNomChofer.getText())){
                        txtCodChofer.setText(vcoCho.getValueAt(1));
                        txtNomChofer.setText(vcoCho.getValueAt(2));
                    }
                    else{
                        vcoCho.setCampoBusqueda(2);
                        vcoCho.setCriterio1(11);
                        vcoCho.cargarDatos();
                        vcoCho.show();
                        if (vcoCho.getSelectedButton()==vcoCho.INT_BUT_ACE)
                        {
                            txtCodChofer.setText(vcoCho.getValueAt(1));
                            txtNomChofer.setText(vcoCho.getValueAt(2));
                        }
                        else{
                            txtNomChofer.setText(strChoNom);
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
  //  mostrarVehiculos

private boolean mostrarVehiculos(int intTipBus)
    {
        boolean blnRes=true;
        String aux="";
        try
        {
            System.out.println("mostrarVehiculos::::....");
            switch (intTipBus)
            {
                case 0: //Mostrar la ventana de consulta.
                    vcoVeh.setCampoBusqueda(0);
                    vcoVeh.show();
                    if (vcoVeh.getSelectedButton()==vcoVeh.INT_BUT_ACE){
                       txtCodVeh.setText(vcoVeh.getValueAt(1));
                            txtPlaca.setText(vcoVeh.getValueAt(2));
                            txtDesLarVeh.setText(vcoVeh.getValueAt(3));
                            txtCodMar.setText(vcoVeh.getValueAt(4));
                            txtNomMar.setText(vcoVeh.getValueAt(5));
                            aux=vcoVeh.getValueAt(6);//case
                            switch(aux.charAt(0))
                            {
                                case 'C': optCarro.setSelected(true); break;
                                case 'M': optMoto.setSelected(true); break;
                                case 'N': optMontacarga.setSelected(true); break;
                                case 'O': optOtro.setSelected(true); break; 
                                default:optCarro.setSelected(true);break;
                            }
                            txtPeso.setText(vcoVeh.getValueAt(7));
                            txtTipCom.setText(vcoVeh.getValueAt(8));
                            txtTanque.setText(vcoVeh.getValueAt(9));
                            txtRendimiento.setText(vcoVeh.getValueAt(10));
                            txtCodChofer.setText(vcoVeh.getValueAt(11));
                            txtNomChofer.setText(vcoVeh.getValueAt(12));
                            txaObs.setText(vcoVeh.getValueAt(13));
                    }
                    break;
                case 1: //Búsqueda directa por "Codigo de Vehiculo".
                    if (vcoVeh.buscar("a1.co_veh", txtCodVeh.getText())){
                            txtCodVeh.setText(vcoVeh.getValueAt(1));
                            txtPlaca.setText(vcoVeh.getValueAt(2));
                            txtDesLarVeh.setText(vcoVeh.getValueAt(3));
                            txtCodMar.setText(vcoVeh.getValueAt(4));
                            txtNomMar.setText(vcoVeh.getValueAt(5));
                            aux=vcoVeh.getValueAt(6);//case
                            switch(aux.charAt(0))
                            {
                                case 'C': optCarro.setSelected(true); break;
                                case 'M': optMoto.setSelected(true); break;
                                case 'N': optMontacarga.setSelected(true); break;
                                case 'O': optOtro.setSelected(true); break; 
                                default:optCarro.setSelected(true);break;
                            }
                            txtPeso.setText(vcoVeh.getValueAt(7));
                            txtTipCom.setText(vcoVeh.getValueAt(8));
                            txtTanque.setText(vcoVeh.getValueAt(9));
                            txtRendimiento.setText(vcoVeh.getValueAt(10));
                            txtCodChofer.setText(vcoVeh.getValueAt(11));
                            txtNomChofer.setText(vcoVeh.getValueAt(12));
                            txaObs.setText(vcoVeh.getValueAt(13));
                    }
                    else
                    {
                        vcoVeh.setCampoBusqueda(1);
                        vcoVeh.setCriterio1(11);
                        vcoVeh.cargarDatos();
                        vcoVeh.show();
                        if (vcoVeh.getSelectedButton()==vcoVeh.INT_BUT_ACE){
                            txtCodVeh.setText(vcoVeh.getValueAt(1));
                        }
                        else
                        {
                           txtCodVeh.setText(vcoVeh.getValueAt(1));
                            txtPlaca.setText(vcoVeh.getValueAt(2));
                            txtDesLarVeh.setText(vcoVeh.getValueAt(3));
                            txtCodMar.setText(vcoVeh.getValueAt(4));
                            txtNomMar.setText(vcoVeh.getValueAt(5));
                            aux=vcoVeh.getValueAt(6);//case
                            switch(aux.charAt(0))
                            {
                                case 'C': optCarro.setSelected(true); break;
                                case 'M': optMoto.setSelected(true); break;
                                case 'N': optMontacarga.setSelected(true); break;
                                case 'O': optOtro.setSelected(true); break; 
                                default:optCarro.setSelected(true);break;
                            }
                            txtPeso.setText(vcoVeh.getValueAt(7));
                            txtTipCom.setText(vcoVeh.getValueAt(8));
                            txtTanque.setText(vcoVeh.getValueAt(9));
                            txtRendimiento.setText(vcoVeh.getValueAt(10));
                            txtCodChofer.setText(vcoVeh.getValueAt(11));
                            txtNomChofer.setText(vcoVeh.getValueAt(12));
                            txaObs.setText(vcoVeh.getValueAt(13));
                        }
                    }
                    break;
            }
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }


    /*
     * llenar la consulta de Vehiculos
     */
    
    private boolean configurarVehiculos()
    {
        boolean blnRes=true;
        try
        {
            //Listado de campos.
            ArrayList arlCam=new ArrayList();
            arlCam.add("a1.co_veh");
            arlCam.add("a1.tx_pla");
            arlCam.add("a1.tx_desLarVeh");
            arlCam.add("a1.co_mar");
            arlCam.add("a1.tx_desLarMar");
            arlCam.add("a1.tx_tipVeh");
            arlCam.add("a1.nd_pesSopKgr");
            arlCam.add("a1.tx_desLarCom");
            arlCam.add("a1.nd_capTan");
            arlCam.add("a1.nd_renVeh");
            arlCam.add("a1.co_tra");
            arlCam.add("a1.nombre");
            arlCam.add("a1.tx_obs1");
            //Alias de los campos.
            ArrayList arlAli=new ArrayList();
            arlAli.add("Código");
            arlAli.add("Placa");
            arlAli.add("Descripción");
            arlAli.add("Cód.Mar.");
            arlAli.add("Marca");
            arlAli.add("Tip.Veh.");
            arlAli.add("Pes.Sop.");
            arlAli.add("Combustible");
            arlAli.add("Cap.Tan.");
            arlAli.add("Ren.Veh");
            arlAli.add("Cód.Cho.");
            arlAli.add("Chofer");
            arlAli.add("Observación");
            //Ancho de las columnas.
            ArrayList arlAncCol=new ArrayList();
            arlAncCol.add("50");
            arlAncCol.add("60");
            arlAncCol.add("350");
            arlAncCol.add("60");
            arlAncCol.add("60");
            arlAncCol.add("60");
            arlAncCol.add("60");
            arlAncCol.add("60");
            arlAncCol.add("60");
            arlAncCol.add("60");
            arlAncCol.add("60");
            arlAncCol.add("60");
            arlAncCol.add("100");
            //Armar la sentencia SQL.
            strSQL="";
            strSQL+=" SELECT a1.co_veh, a1.tx_pla, a1.tx_deslar as tx_desLarVeh, a2.co_mar, a2.tx_deslar as tx_deslarMar,";
            strSQL+=" a1.tx_tipVeh, round(a1.nd_pessopkgr,2) as nd_pessopKgr,";
            strSQL+=" a4.tx_desLar as tx_desLarCom, round(a1.nd_captan,2) as nd_captan,";
            strSQL+=" round(a1.nd_renveh,2) as nd_renveh, a3.co_tra,(a3.tx_ape || ' ' || a3.tx_nom) as Nombre,a1.tx_obs1";
            strSQL+=" FROM tbm_veh as a1 ";
            strSQL+=" LEFT OUTER JOIN tbm_marVeh as a2 ON (a1.co_mar=a2.co_mar)";
            strSQL+=" LEFT OUTER JOIN tbm_tra as a3 ON (a1.co_cho=a3.co_tra)";
            strSQL+=" LEFT OUTER JOIN tbm_comVeh as a4 ON (a1.co_com=a4.co_com)";
            if(txtCodVeh.getText().length()>0)
            strSQL+=" WHERE a1.co_veh=" + txtCodVeh.getText();
            strSQL+=" ORDER BY a1.co_veh";
            System.out.println("configurarVehiculos:.." + strSQL);
            vcoVeh=new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de Vehiculos", strSQL, arlCam, arlAli, arlAncCol);
            arlCam=null;
            arlAli=null;
            arlAncCol=null;
            //Configurar columnas.
            vcoVeh.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        }
        catch (Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
}
    
