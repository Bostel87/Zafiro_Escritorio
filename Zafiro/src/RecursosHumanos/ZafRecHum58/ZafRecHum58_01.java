package RecursosHumanos.ZafRecHum58;

import Librerias.ZafParSis.ZafParSis;
import Librerias.ZafUtil.ZafUtil;
import Librerias.ZafVenCon.ZafVenCon;
import java.util.ArrayList;
import java.util.Vector;

/**
 *
 * @author  Roberto Flores
 * Guayaquil 18/03/2013
 */
public class ZafRecHum58_01 extends javax.swing.JDialog
{
    //Variables
    private ZafParSis objParSis;
    private ZafUtil objUti;
    private ZafThreadGUI objThrGUI;
    private String strSQL, strAux;
    private Vector vecDat, vecCab, vecReg;
    private ArrayList arlParDlg;                                //Parametros a pasar al JDialog que se llama desde el JTable.
    
    //Variables de la clase.
    private int intCodNov;                                      //Código de la empresa.
    
    private int intOpcSelDlg;                                   //Opción seleccionada en el JDialog.

    private ZafVenCon vcoUsr;                           //Ventana de consulta "Usuario".
    private String strUsr="";
    private String strDesCorUsr, strDesLarUsr;          //Contenido del campo al obtener el foco.
    
    private ZafRecHum58 objZafRecHum58;
    
    /** Creates new form ZafRecHum58_01 */
    public ZafRecHum58_01(java.awt.Frame parent, boolean modal, ZafParSis obj) 
    {
        super(parent, modal);
        
        vecDat=new Vector();
        //Inicializar objetos.
        objParSis=obj;
        initComponents();
        clnTextos();
        intOpcSelDlg=0;
        if (!configurarFrm())
            exitForm();
    }
    
    private void clnTextos(){
        txtCodUsr.setText("");
        txtDesCorUsr.setText("");
        txtDesLarUsr.setText("");
        txtMsj.setText("");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panFrm = new javax.swing.JPanel();
        lblTit = new javax.swing.JLabel();
        panBar = new javax.swing.JPanel();
        panBot = new javax.swing.JPanel();
        butAce = new javax.swing.JButton();
        butCan = new javax.swing.JButton();
        tabGen = new javax.swing.JTabbedPane();
        panGenTabGen = new javax.swing.JPanel();
        panGen = new javax.swing.JPanel();
        lblDesNov = new javax.swing.JLabel();
        txtCodUsr = new javax.swing.JTextField();
        txtDesCorUsr = new javax.swing.JTextField();
        txtDesLarUsr = new javax.swing.JTextField();
        butUsr = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMsj = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panFrm.setLayout(new java.awt.BorderLayout());

        lblTit.setFont(new java.awt.Font("MS Sans Serif", 1, 14)); // NOI18N
        lblTit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTit.setText("Título");
        panFrm.add(lblTit, java.awt.BorderLayout.NORTH);

        panBar.setLayout(new java.awt.BorderLayout());

        panBot.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        butAce.setText("Aceptar");
        butAce.setPreferredSize(new java.awt.Dimension(92, 25));
        butAce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAceActionPerformed(evt);
            }
        });
        panBot.add(butAce);

        butCan.setText("Cancelar");
        butCan.setToolTipText("Cierra el cuadro de dialogo");
        butCan.setPreferredSize(new java.awt.Dimension(92, 25));
        butCan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCanActionPerformed(evt);
            }
        });
        panBot.add(butCan);

        panBar.add(panBot, java.awt.BorderLayout.CENTER);

        panFrm.add(panBar, java.awt.BorderLayout.SOUTH);

        panGenTabGen.setLayout(new java.awt.BorderLayout());

        panGen.setPreferredSize(new java.awt.Dimension(100, 320));
        panGen.setLayout(null);

        lblDesNov.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        lblDesNov.setText("Destinatario:"); // NOI18N
        panGen.add(lblDesNov);
        lblDesNov.setBounds(10, 30, 40, 20);
        panGen.add(txtCodUsr);
        txtCodUsr.setBounds(40, 30, 32, 20);
        txtCodUsr.setVisible(false);

        txtDesCorUsr.setBackground(objParSis.getColorCamposObligatorios());
        txtDesCorUsr.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtDesCorUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesCorUsrActionPerformed(evt);
            }
        });
        txtDesCorUsr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesCorUsrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesCorUsrFocusLost(evt);
            }
        });
        panGen.add(txtDesCorUsr);
        txtDesCorUsr.setBounds(70, 30, 70, 20);

        txtDesLarUsr.setBackground(objParSis.getColorCamposObligatorios());
        txtDesLarUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDesLarUsrActionPerformed(evt);
            }
        });
        txtDesLarUsr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDesLarUsrFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDesLarUsrFocusLost(evt);
            }
        });
        panGen.add(txtDesLarUsr);
        txtDesLarUsr.setBounds(140, 30, 410, 20);

        butUsr.setText(".."); // NOI18N
        butUsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butUsrActionPerformed(evt);
            }
        });
        panGen.add(butUsr);
        butUsr.setBounds(550, 30, 20, 20);

        txtMsj.setColumns(20);
        txtMsj.setLineWrap(true);
        txtMsj.setRows(5);
        jScrollPane1.setViewportView(txtMsj);

        panGen.add(jScrollPane1);
        jScrollPane1.setBounds(10, 70, 540, 210);

        panGenTabGen.add(panGen, java.awt.BorderLayout.NORTH);

        tabGen.addTab("General", panGenTabGen);

        panFrm.add(tabGen, java.awt.BorderLayout.CENTER);

        getContentPane().add(panFrm, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(600, 400));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void butAceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAceActionPerformed

         if (objThrGUI==null)
        {
            objThrGUI=new ZafRecHum58_01.ZafThreadGUI();
            objThrGUI.setIndFunEje(0);
            objThrGUI.start();
        }
    }//GEN-LAST:event_butAceActionPerformed

    /**
    * validad campos requeridos antes de insertar o modificar
    * @return  true si esta todo bien   false   falta algun dato
    */
      private boolean validaCampos(){

          if(txtCodUsr.getText().equals("") ){
              tabGen.setSelectedIndex(0);
              mostrarMsgInf("El campo << Destinatario >> es obligatorio.\nEscoja y vuelva a intentarlo.");
              txtCodUsr.requestFocus();
              return false;
          }
          
          return true;
      }
    
    public boolean guardarDat(java.sql.Connection conn){
        boolean blnRes=false;
            java.sql.Statement stmLoc;
            java.sql.ResultSet rstLoc;
            String strSql="";
            int intCoReg = 0;
            
            try{

                if(conn!=null){

                    stmLoc=conn.createStatement();

                    strSql="SELECT max(co_reg) as co_reg from tbm_reenovRecHum where co_nov = " + intCodNov;
                    rstLoc = stmLoc.executeQuery(strSql);
                    if(rstLoc.next())
                        intCoReg = rstLoc.getInt("co_reg")+1;
                    rstLoc.close();
                    rstLoc=null;
                    
                    if (insertarReg(conn,this.intCodNov, intCoReg)) { 
                        blnRes = true;
                    }
                }
            }catch(java.sql.SQLException Evt) { Evt.printStackTrace(); blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt);  }
            catch(Exception  Evt){ Evt.printStackTrace();blnRes=false;  objUti.mostrarMsgErr_F1(this, Evt); }
            return blnRes;
    }
    
    public boolean insertarReg(java.sql.Connection con, int intCodNov, int intCoReg ){
        boolean blnRes=false;
        String strSql="";
        java.sql.Statement stmLoc = null;
        java.sql.ResultSet rstLoc = null;
        int intNeNumRee = 0;

        try{
            if(con!=null){
                stmLoc=con.createStatement();

                  strSql="";
                  strSql="INSERT INTO tbm_reenovrechum(co_nov, co_reg, fe_ing, co_usrrem, co_usrdes, tx_obs1) VALUES (";
                  strSql+= " " + intCodNov + " , ";
                  strSql+= " " + intCoReg + " , ";
                  strSql+= " current_timestamp , ";
                  strSql+= " " + objParSis.getCodigoUsuario() + " , ";
                  strSql+= " " + txtCodUsr.getText() + " , ";
                  strSql+= " " + objUti.codificar(txtMsj.getText());
                  strSql+= ")";

                  System.out.println("insertTbm_reeNovRecHum: " + strSql);
                  stmLoc.executeUpdate(strSql);

                  strSql="";
                  strSql="SELECT max(ne_numree) as ne_numree from tbm_novRecHum where co_nov = " + intCodNov;
                  rstLoc = stmLoc.executeQuery(strSql);
                  if(rstLoc.next())
                      intNeNumRee = rstLoc.getInt("ne_numree")+1;
                  rstLoc.close();
                  rstLoc=null;

                  strSql="";
                  strSql+="update tbm_novRecHum set ne_numree =  " + intNeNumRee +" , ";
//                  strSql+=" co_usrdesree = " + objParSis.getCodigoUsuario();
                  strSql+=" co_usrdesree = " + txtCodUsr.getText();
                  strSql+=" where co_nov = " + intCodNov;

                  System.out.println("updateTbm_NovRecHum: " + strSql);
                  stmLoc.executeUpdate(strSql);
                  blnRes=true;
            }
        }catch(java.sql.SQLException Evt){ 
            blnRes=false;  
            objUti.mostrarMsgErr_F1(this, Evt); 
        }catch(Exception Evt){ 
            blnRes=false;  
            objUti.mostrarMsgErr_F1(this, Evt); 
        }finally {
            try{stmLoc.close();}catch(Throwable ignore){}
            try{rstLoc.close();}catch(Throwable ignore){}
        }
       return blnRes;         
    }
   
    private void butCanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCanActionPerformed
        intOpcSelDlg=0;
        dispose();
    }//GEN-LAST:event_butCanActionPerformed

    private void txtDesCorUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesCorUsrActionPerformed
        // TODO add your handling code here:
        txtDesCorUsr.transferFocus();
    }//GEN-LAST:event_txtDesCorUsrActionPerformed

    private void txtDesCorUsrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorUsrFocusGained
        // TODO add your handling code here:
        strUsr=txtDesCorUsr.getText();
        txtDesCorUsr.selectAll();
    }//GEN-LAST:event_txtDesCorUsrFocusGained

    private void txtDesCorUsrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesCorUsrFocusLost
        // TODO add your handling code here:
        if (txtDesCorUsr.isEditable()) {
            //Validar el contenido de la celda sólo si ha cambiado.
            if (!txtDesCorUsr.getText().equalsIgnoreCase(strDesCorUsr)) {
                if (txtDesCorUsr.getText().equals("")) {
                    txtCodUsr.setText("");
                    txtDesLarUsr.setText("");
                } else {
                    mostrarVenConUsr(1);
                }
            } else {
                txtDesCorUsr.setText(strDesCorUsr);
            }
        }
    }//GEN-LAST:event_txtDesCorUsrFocusLost

    private void txtDesLarUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDesLarUsrActionPerformed
        // TODO add your handling code here:
        txtDesLarUsr.transferFocus();
    }//GEN-LAST:event_txtDesLarUsrActionPerformed

    private void txtDesLarUsrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarUsrFocusGained
        // TODO add your handling code here:
        strDesLarUsr = txtDesLarUsr.getText();
        txtDesLarUsr.selectAll();
    }//GEN-LAST:event_txtDesLarUsrFocusGained

    private void txtDesLarUsrFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDesLarUsrFocusLost
        // TODO add your handling code here:
        if (txtDesLarUsr.isEditable()) {
            //Validar el contenido de la celda sólo si ha cambiado.
            if (!txtDesLarUsr.getText().equalsIgnoreCase(strDesLarUsr)) {
                if (txtDesLarUsr.getText().equals("")) {
                    txtCodUsr.setText("");
                    txtDesCorUsr.setText("");
                } else {
                    mostrarVenConUsr(2);
                }
            } else {
                txtDesLarUsr.setText(strDesLarUsr);
            }
        }
    }//GEN-LAST:event_txtDesLarUsrFocusLost

    private void butUsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butUsrActionPerformed
        mostrarVenConUsr(0);
    }//GEN-LAST:event_butUsrActionPerformed
    
    /** Cerrar la aplicación. */
    private void exitForm() 
    {
        intOpcSelDlg=0;
        dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butAce;
    private javax.swing.JButton butCan;
    private javax.swing.JButton butUsr;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDesNov;
    private javax.swing.JLabel lblTit;
    private javax.swing.JPanel panBar;
    private javax.swing.JPanel panBot;
    private javax.swing.JPanel panFrm;
    private javax.swing.JPanel panGen;
    private javax.swing.JPanel panGenTabGen;
    private javax.swing.JTabbedPane tabGen;
    private javax.swing.JTextField txtCodUsr;
    private javax.swing.JTextField txtDesCorUsr;
    private javax.swing.JTextField txtDesLarUsr;
    private javax.swing.JTextArea txtMsj;
    // End of variables declaration//GEN-END:variables
 
    /** Configurar el formulario. */
    private boolean configurarFrm()
    {
        boolean blnRes=true;
        try
        {
            //Inicializar objetos.
            objUti=new ZafUtil();
            strAux="Destinatario";
            this.setTitle(strAux + " v1.0");
            lblTit.setText(strAux);
            arlParDlg=new ArrayList();
            
            //Configurar ventanas de consulta
            configurarVenConUsr();
        }
        catch(Exception e)
        {
            blnRes=false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }

//    /**
//     * Esta función permite limpiar el formulario.
//     * @return true: Si se pudo limpiar la ventana sin ningún problema.
//     * <BR>false: En el caso contrario.
//     */
//    private boolean limpiarFrm()
//    {
//        boolean blnRes=true;
//        try
//        {
//            objTblMod.removeAllRows();
//        }
//        catch (Exception e)
//        {
//            blnRes=false;
//        }
//        return blnRes;
//    }
    
    /**
     * Esta función muestra un mensaje informativo al usuario. Se podría utilizar
     * para mostrar al usuario un mensaje que indique el campo que es invalido y que
     * debe llenar o corregir.
     */
    private void mostrarMsgInf(String strMsg)
    {
        String strTit;
        strTit="Mensaje del sistema Zafiro";
        javax.swing.JOptionPane.showMessageDialog(this,strMsg,strTit,javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * Esta función establece los parámetros que debe utilizar el JDialog.
     * @param intCodNov El código de la novedad.
     */
     public void setParDlg(int intCodNov)
    {
        this.intCodNov=intCodNov;
    }
    
    public void setParDlg(ZafParSis objZafParsis, ZafRecHum58 objRecHum58,int intCodNov) 
    {
        this.objParSis=objZafParsis;
        this.intCodNov=intCodNov;
        this.objZafRecHum58=objRecHum58;
        clnTextos();
    }
    
    /**
     * Esta función obtiene la opción que seleccionó el usuario en el JDialog.
     * Puede devolver uno de los siguientes valores:
     * <UL>
     * <LI>0: Click en el botón Cancelar.
     * <LI>1: Click en el botón Aceptar.
     * </UL>
     * <BR>Nota.- La opción predeterminada es el botón Cancelar.
     * @return La opción seleccionada por el usuario.
     */
    public int getOpcSelDlg()
    {
        return intOpcSelDlg;
    }

    /**
     * Esta clase crea un hilo que permite manipular la interface gráfica de usuario (GUI).
     * Por ejemplo: se la puede utilizar para cargar los datos en un JTable donde la idea
     * es mostrar al usuario lo que está ocurriendo internamente. Es decir a medida que se
     * llevan a cabo los procesos se podría presentar mensajes informativos en un JLabel e
     * ir incrementando un JProgressBar con lo cual el usuario estaría informado en todo
     * momento de lo que ocurre. Si se desea hacer ésto es necesario utilizar ésta clase
     * ya que si no sólo se apreciaría los cambios cuando ha terminado todo el proceso.
     */
    private class ZafThreadGUI extends Thread
    {
        private int intIndFun;
        
        public ZafThreadGUI()
        {
            intIndFun=0;
        }
        
        public void run()
        {
            switch (intIndFun)
            {
                case 0: //Guardar los cambios.

                    if(validaCampos()){
                        if (actualizarReg())
                        {
                            mostrarMsgInf("La operación se realizó con éxito.");
                            intOpcSelDlg=1;
                            dispose();
                        }
                    }
            }
            objThrGUI=null;
        }
        
        /**
         * Esta función establece el indice de la función a ejecutar. En la clase Thread
         * se pueden ejecutar diferentes funciones. Esta función sirve para determinar
         * la función que debe ejecutar el Thread.
         * @param indice El indice de la función a ejecutar.
         */
        public void setIndFunEje(int indice)
        {
            intIndFun=indice;
        }
    }
    
    /**
     * Esta función actualiza el registro en la base de datos.
     * @return true: Si se pudo actualizar el registro.
     * <BR>false: En el caso contrario.
     */
    private boolean actualizarReg()
    {
        
        boolean blnRes=false;
        java.sql.Connection conn;
        try{

            conn=java.sql.DriverManager.getConnection(objParSis.getStringConexion(),objParSis.getUsuarioBaseDatos(),objParSis.getClaveBaseDatos());
            if(conn!=null){
                conn.setAutoCommit(false);
    
                if(guardarDat(conn)){
                    conn.commit();
                    blnRes=true;
                }else{
                    conn.rollback();
                }

                conn.close();
                conn=null;
            }
        }catch(java.sql.SQLException Evt) { blnRes=false;objUti.mostrarMsgErr_F1(this, Evt);  }
        catch(Exception  Evt){ blnRes=false;objUti.mostrarMsgErr_F1(this, Evt); }
            
        return blnRes;
    }
    
    /**
     * Esta función permite utilizar la "Ventana de Consulta" para seleccionar un
     * registro de la base de datos. El tipo de búsqueda determina si se debe hacer
     * una búsqueda directa (No se muestra la ventana de consulta a menos que no 
     * exista lo que se está buscando) o presentar la ventana de consulta para que
     * el usuario seleccione la opción que desea utilizar.
     * @param intTipBus El tipo de búsqueda a realizar.
     * @return true: Si no se presentó ningún problema.
     * <BR>false: En el caso contrario.
     */
    private boolean mostrarVenConUsr(int intTipBus) {
        boolean blnRes = true;
        try {
            switch (intTipBus) {
                case 0: //Mostrar la ventana de consulta.
                    vcoUsr.setCampoBusqueda(1);
                    vcoUsr.show();
                    if (vcoUsr.getSelectedButton() == vcoUsr.INT_BUT_ACE) {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    }
                    break;
                case 1: //Búsqueda directa por "Descripción corta".
                    if (vcoUsr.buscar("a1.tx_usr", txtDesCorUsr.getText())) {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    } else {
                        vcoUsr.setCampoBusqueda(1);
                        vcoUsr.setCriterio1(11);
                        vcoUsr.cargarDatos();
                        vcoUsr.show();
                        if (vcoUsr.getSelectedButton() == vcoUsr.INT_BUT_ACE) {
                            txtCodUsr.setText(vcoUsr.getValueAt(1));
                            txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                            txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                        } else {
                            txtDesCorUsr.setText(strDesCorUsr);
                        }
                    }
                    break;
                case 2: //Búsqueda directa por "Descripción larga".
                    if (vcoUsr.buscar("a1.tx_nom", txtDesLarUsr.getText())) {
                        txtCodUsr.setText(vcoUsr.getValueAt(1));
                        txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                        txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                    } else {
                        vcoUsr.setCampoBusqueda(2);
                        vcoUsr.setCriterio1(11);
                        vcoUsr.cargarDatos();
                        vcoUsr.show();
                        if (vcoUsr.getSelectedButton() == vcoUsr.INT_BUT_ACE) {
                            txtCodUsr.setText(vcoUsr.getValueAt(1));
                            txtDesCorUsr.setText(vcoUsr.getValueAt(2));
                            txtDesLarUsr.setText(vcoUsr.getValueAt(3));
                        } else {
                            txtDesLarUsr.setText(strDesLarUsr);
                        }
                    }
                    break;
            }
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
    
    /**
     * Esta función configura la "Ventana de consulta" que será utilizada para
     * mostrar los "Usuarios".
     */
    private boolean configurarVenConUsr() {
        boolean blnRes = true;
        String strSQL="";
        try {
            //Listado de campos.
            ArrayList arlCam = new ArrayList();
            arlCam.add("a1.co_usr");
            arlCam.add("a1.tx_usr");
            arlCam.add("a1.tx_nom");
            //Alias de los campos.
            ArrayList arlAli = new ArrayList();
            arlAli.add("Código");
            arlAli.add("Usuario");
            arlAli.add("Nombre");
            //Ancho de las columnas.
            ArrayList arlAncCol = new ArrayList();
            arlAncCol.add("30");
            arlAncCol.add("80");
            arlAncCol.add("300");
            //Armar la sentencia SQL.
            strSQL = "";
            strSQL += "SELECT a1.co_usr, a1.tx_usr, a1.tx_nom";
            strSQL += " FROM tbm_usr AS a1";
            strSQL += " WHERE a1.st_usrSis='S'";
            strSQL += " AND a1.st_reg='A'";
            strSQL += " ORDER BY a1.tx_usr";
            vcoUsr = new ZafVenCon(javax.swing.JOptionPane.getFrameForComponent(this), objParSis, "Listado de usuarios", strSQL, arlCam, arlAli, arlAncCol);
            arlCam = null;
            arlAli = null;
            arlAncCol = null;
            //Configurar columnas.
            vcoUsr.setConfiguracionColumna(1, javax.swing.JLabel.RIGHT);
        } catch (Exception e) {
            blnRes = false;
            objUti.mostrarMsgErr_F1(this, e);
        }
        return blnRes;
    }
}